{
    "queries": [
        {
            "question": "Найти всех клиентов, у которых есть активные кредитные карты с лимитом более 50000 рублей, и показать их имена, номера карт и текущий баланс. Результат отсортировать по балансу по убыванию.",
            "sql_query": "SELECT c.FirstName, c.LastName, cc.CardNumber, cc.Balance FROM Customers c JOIN CreditCards cc ON c.CustomerID = cc.CustomerID WHERE cc.CreditLimit > 50000 AND cc.Status = 'Активна' ORDER BY cc.Balance DESC;",
            "google/gemini-2.0-flash-001_response": "SELECT \n    c.FirstName,\n    c.LastName,\n    cc.CardNumber,\n    cc.Balance\nFROM Customers c\nJOIN CreditCards cc ON c.CustomerID = cc.CustomerID\nWHERE cc.Status = 'Активна' AND cc.CreditLimit > 50000\nORDER BY cc.Balance DESC;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT c.FirstName, c.LastName, cc.CardNumber, cc.Balance\nFROM Customers c\nJOIN CreditCards cc ON c.CustomerID = cc.CustomerID\nWHERE cc.CreditLimit > 50000 AND cc.Status = 'Активна'\nORDER BY cc.Balance DESC;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT c.FirstName, c.LastName, cc.CardNumber, cc.Balance \nFROM Customers c \nJOIN CreditCards cc ON c.CustomerID = cc.CustomerID \nWHERE cc.Status = 'Активна' AND cc.CreditLimit > 50000 \nORDER BY cc.Balance DESC;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT c.FirstName, c.LastName, cc.CardNumber, cc.Balance\nFROM Customers c\nJOIN CreditCards cc ON c.CustomerID = cc.CustomerID\nWHERE cc.Status = 'Активна' AND cc.CreditLimit > 50000\nORDER BY cc.Balance DESC;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT c.FirstName, c.LastName, cc.CardNumber, cc.Balance\nFROM Customers c\nJOIN CreditCards cc ON c.CustomerID = cc.CustomerID\nWHERE cc.Status = 'Активна' AND cc.CreditLimit > 50000\nORDER BY cc.Balance DESC;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT c.FirstName, c.LastName, cc.CardNumber, cc.Balance\nFROM Customers c\nJOIN CreditCards cc ON c.CustomerID = cc.CustomerID\nWHERE cc.Status = 'Активна' AND cc.CreditLimit > 50000\nORDER BY cc.Balance DESC;",
            "gigachat_response": "SELECT \n    c.FirstName, \n    c.LastName, \n    cc.CardNumber, \n    cc.Balance\nFROM \n    Customers c\nJOIN \n    CreditCards cc ON c.CustomerID = cc.CustomerID\nWHERE \n    cc.CreditLimit > 50000 \n    AND cc.Status = 'Активна'\nORDER BY \n    cc.Balance DESC;",
            "gigachat_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    cc.CardNumber, \n    cc.Balance\nFROM \n    Customers c\nINNER JOIN \n    CreditCards cc ON c.CustomerID = cc.CustomerID\nWHERE \n    cc.CreditLimit > 50000 \n    AND cc.Status = 'Активна'\nORDER BY \n    cc.Balance DESC;",
            "gpt-4o_response": "SELECT c.FirstName, c.LastName, cc.CardNumber, cc.Balance\nFROM Customers c\nJOIN CreditCards cc ON c.CustomerID = cc.CustomerID\nWHERE cc.Status = 'Активна' AND cc.CreditLimit > 50000\nORDER BY cc.Balance DESC;",
            "gpt-4o_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    cc.CardNumber, \n    cc.Balance\nFROM \n    Customers c\nJOIN \n    CreditCards cc ON c.CustomerID = cc.CustomerID\nWHERE \n    cc.Status = 'Активна' \n    AND cc.CreditLimit > 50000\nORDER BY \n    cc.Balance DESC;"
        },
        {
            "question": "Вывести список всех отделений банка с количеством работающих в них сотрудников и средним размером их зарплаты. Результат отсортировать по количеству сотрудников по убыванию.",
            "sql_query": "SELECT b.BranchName, COUNT(e.EmployeeID) as EmployeeCount, AVG(e.Salary) as AverageSalary FROM Branches b LEFT JOIN Employees e ON b.BranchID = e.BranchID GROUP BY b.BranchID, b.BranchName ORDER BY EmployeeCount DESC;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    b.BranchName,\n    COUNT(e.EmployeeID) AS NumberOfEmployees,\n    AVG(e.Salary) AS AverageSalary\nFROM\n    Branches b\nJOIN\n    Employees e ON b.BranchID = e.BranchID\nGROUP BY\n    b.BranchName\nORDER BY\n    NumberOfEmployees DESC;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    b.BranchName,\n    COUNT(e.EmployeeID) AS NumberOfEmployees,\n    AVG(e.Salary) AS AverageSalary\nFROM\n    Branches b\nJOIN\n    Employees e ON b.BranchID = e.BranchID\nGROUP BY\n    b.BranchName\nORDER BY\n    NumberOfEmployees DESC;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    b.BranchName, \n    COUNT(e.EmployeeID) AS TotalEmployees, \n    AVG(e.Salary) AS AverageSalary\nFROM \n    Branches b\nJOIN \n    Employees e ON b.BranchID = e.BranchID\nGROUP BY \n    b.BranchName\nORDER BY \n    TotalEmployees DESC;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    b.BranchName, \n    COUNT(e.EmployeeID) AS TotalEmployees, \n    AVG(e.Salary) AS AverageSalary\nFROM \n    Branches b \nJOIN \n    Employees e ON b.BranchID = e.BranchID\nGROUP BY \n    b.BranchName\nORDER BY \n    TotalEmployees DESC;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT b.BranchName, COUNT(e.EmployeeID) AS EmployeeCount, AVG(e.Salary) AS AverageSalary \nFROM Branches b \nLEFT JOIN Employees e ON b.BranchID = e.BranchID \nGROUP BY b.BranchName \nORDER BY EmployeeCount DESC;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT b.BranchName, COUNT(e.EmployeeID) AS EmployeeCount, AVG(e.Salary) AS AverageSalary\nFROM Branches b\nLEFT JOIN Employees e ON b.BranchID = e.BranchID\nGROUP BY b.BranchName\nORDER BY EmployeeCount DESC;",
            "gigachat_response": "SELECT \n    b.BranchName,\n    COUNT(e.EmployeeID) AS NumberOfEmployees,\n    AVG(e.Salary) AS AverageSalary\nFROM \n    Branches b\nJOIN \n    Employees e ON b.BranchID = e.BranchID\nGROUP BY \n    b.BranchName\nORDER BY \n    NumberOfEmployees DESC;",
            "gigachat_response_ru": "SELECT \n    b.BranchName,\n    COUNT(e.EmployeeID) AS NumberOfEmployees,\n    AVG(e.Salary) AS AverageSalary\nFROM \n    Branches b\nLEFT JOIN \n    Employees e ON b.BranchID = e.BranchID\nGROUP BY \n    b.BranchName\nORDER BY \n    NumberOfEmployees DESC;",
            "gpt-4o_response": "SELECT \n    b.BranchName, \n    COUNT(e.EmployeeID) AS EmployeeCount, \n    AVG(e.Salary) AS AverageSalary\nFROM \n    Branches b\nLEFT JOIN \n    Employees e ON b.BranchID = e.BranchID\nGROUP BY \n    b.BranchName\nORDER BY \n    EmployeeCount DESC;",
            "gpt-4o_response_ru": "SELECT \n    b.BranchName, \n    COUNT(e.EmployeeID) AS EmployeeCount, \n    AVG(e.Salary) AS AverageSalary\nFROM \n    Branches b\nLEFT JOIN \n    Employees e ON b.BranchID = e.BranchID\nGROUP BY \n    b.BranchName\nORDER BY \n    EmployeeCount DESC;"
        },
        {
            "question": "Найти клиентов, у которых есть активные депозиты на сумму более 200000 рублей, и показать их имена, тип депозита и процентную ставку. Результат отсортировать по сумме депозита по убыванию.",
            "sql_query": "SELECT c.FirstName, c.LastName, d.DepositType, d.InterestRate, d.Amount FROM Customers c JOIN Deposits d ON c.CustomerID = d.CustomerID WHERE d.Amount > 200000 AND d.Status = 'Активен' ORDER BY d.Amount DESC;",
            "google/gemini-2.0-flash-001_response": "SELECT \n    c.FirstName,\n    c.LastName,\n    d.DepositType,\n    d.InterestRate\nFROM Customers c\nJOIN Deposits d ON c.CustomerID = d.CustomerID\nWHERE d.Status = 'Активен' AND d.Amount > 200000\nORDER BY d.Amount DESC;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    c.FirstName,\n    c.LastName,\n    d.DepositType,\n    d.InterestRate\nFROM\n    Customers c\nJOIN\n    Deposits d ON c.CustomerID = d.CustomerID\nWHERE\n    d.Status = 'Активен' AND d.Amount > 200000\nORDER BY\n    d.Amount DESC;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT c.FirstName, c.LastName, d.DepositType, d.InterestRate \nFROM Customers c \nJOIN Deposits d ON c.CustomerID = d.CustomerID \nWHERE d.Status = 'Активен' AND d.Amount > 200000 \nORDER BY d.Amount DESC;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT c.FirstName, c.LastName, d.DepositType, d.InterestRate, d.Amount \nFROM Customers c \nJOIN Deposits d ON c.CustomerID = d.CustomerID \nWHERE d.Status = 'Активен' AND d.Amount > 200000 \nORDER BY d.Amount DESC;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT c.FirstName, c.LastName, d.DepositType, d.InterestRate, d.Amount \nFROM Customers c \nJOIN Deposits d ON c.CustomerID = d.CustomerID \nWHERE d.Status = 'Активен' AND d.Amount > 200000 \nORDER BY d.Amount DESC;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT c.FirstName, c.LastName, d.DepositType, d.InterestRate, d.Amount\nFROM Customers c\nJOIN Deposits d ON c.CustomerID = d.CustomerID\nWHERE d.Status = 'Активен' AND d.Amount > 200000 AND d.Currency = 'RUB'\nORDER BY d.Amount DESC;",
            "gigachat_response": "SELECT \n    c.FirstName, \n    c.LastName, \n    d.DepositType, \n    d.InterestRate\nFROM \n    Customers c\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID\nWHERE \n    d.Status = 'Активен' \n    AND d.Amount > 200000\nORDER BY \n    d.Amount DESC;",
            "gigachat_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    d.DepositType, \n    d.InterestRate \nFROM \n    Customers c \nINNER JOIN \n    Deposits d ON c.CustomerID = d.CustomerID \nWHERE \n    d.Status = 'Активен' \nAND \n    d.Amount > 200000 \nORDER BY \n    d.Amount DESC;",
            "gpt-4o_response": "SELECT c.FirstName, c.LastName, d.DepositType, d.InterestRate, d.Amount\nFROM Customers c\nJOIN Deposits d ON c.CustomerID = d.CustomerID\nWHERE d.Status = 'Активен' AND d.Amount > 200000 AND d.Currency = 'RUB'\nORDER BY d.Amount DESC;",
            "gpt-4o_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    d.DepositType, \n    d.InterestRate, \n    d.Amount\nFROM \n    Customers c\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID\nWHERE \n    d.Status = 'Активен' \n    AND d.Amount > 200000 \n    AND d.Currency = 'RUB'\nORDER BY \n    d.Amount DESC;"
        },
        {
            "question": "Вывести список всех транзакций по кредитным картам за последний месяц с указанием имени клиента и названия торговой точки. Результат отсортировать по дате транзакции по убыванию.",
            "sql_query": "SELECT c.FirstName, c.LastName, ct.TransactionDate, ct.Amount, ct.MerchantName FROM Customers c JOIN CreditCards cc ON c.CustomerID = cc.CustomerID JOIN CardTransactions ct ON cc.CardID = ct.CardID WHERE ct.TransactionDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) ORDER BY ct.TransactionDate DESC;",
            "google/gemini-2.0-flash-001_response": "SELECT \n    c.FirstName,\n    c.LastName,\n    ct.TransactionDate,\n    ct.Amount,\n    ct.MerchantName,\n    ct.Currency,\n    ct.Status\nFROM Customers c\nJOIN CreditCards cc ON c.CustomerID = cc.CustomerID\nJOIN CardTransactions ct ON cc.CardID = ct.CardID\nWHERE ct.TransactionDate >= date('now', '-1 month')\nORDER BY ct.TransactionDate DESC;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    c.FirstName,\n    c.LastName,\n    ct.TransactionDate,\n    ct.Amount,\n    ct.MerchantName\nFROM\n    CardTransactions ct\nJOIN\n    CreditCards cc ON ct.CardID = cc.CardID\nJOIN\n    Customers c ON cc.CustomerID = c.CustomerID\nWHERE\n    ct.TransactionDate >= date('now', '-1 month')\nORDER BY\n    ct.TransactionDate DESC;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT c.FirstName, c.LastName, ct.CardTransactionID, ct.TransactionDate, ct.Amount, ct.MerchantName \nFROM CardTransactions ct \nJOIN CreditCards cc ON ct.CardID = cc.CardID \nJOIN Customers c ON cc.CustomerID = c.CustomerID \nWHERE ct.TransactionDate >= CURRENT_DATE - INTERVAL 1 MONTH \nORDER BY ct.TransactionDate DESC;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    ct.TransactionDate, \n    ct.Amount, \n    ct.MerchantName\nFROM \n    Customers c\nJOIN \n    CreditCards cc ON c.CustomerID = cc.CustomerID\nJOIN \n    CardTransactions ct ON cc.CardID = ct.CardID\nWHERE \n    ct.TransactionDate >= NOW() - INTERVAL 1 MONTH\nORDER BY \n    ct.TransactionDate DESC;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    c.FirstName || ' ' || c.LastName AS CustomerName,\n    ct.MerchantName,\n    ct.TransactionDate,\n    ct.Amount,\n    ct.Currency,\n    ct.Status\nFROM \n    CardTransactions ct\nJOIN \n    CreditCards cc ON ct.CardID = cc.CardID\nJOIN \n    Customers c ON cc.CustomerID = c.CustomerID\nWHERE \n    ct.TransactionDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH)\nORDER BY \n    ct.TransactionDate DESC;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    c.FirstName || ' ' || c.LastName AS CustomerName,\n    ct.MerchantName,\n    ct.TransactionDate,\n    ct.Amount,\n    ct.Currency,\n    ct.Status\nFROM \n    CardTransactions ct\nJOIN \n    CreditCards cc ON ct.CardID = cc.CardID\nJOIN \n    Customers c ON cc.CustomerID = c.CustomerID\nWHERE \n    ct.TransactionDate >= DATE('now', '-1 month')\nORDER BY \n    ct.TransactionDate DESC;",
            "gigachat_response": "SELECT \n    ct.TransactionDate,\n    CONCAT(c.FirstName, ' ', c.LastName) AS FullName,\n    m.MerchantName,\n    ct.Amount,\n    ct.Currency\nFROM \n    CardTransactions ct\nJOIN \n    CreditCards cc ON ct.CardID = cc.CardID\nJOIN \n    Customers c ON cc.CustomerID = c.CustomerID\nWHERE \n    ct.TransactionDate >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 MONTH)\nORDER BY \n    ct.TransactionDate DESC;",
            "gigachat_response_ru": "SELECT \n    CONCAT(c.FirstName, ' ', c.LastName) AS ClientFullName,\n    ct.TransactionDate,\n    m.MerchantName,\n    ct.Amount\nFROM \n    CardTransactions ct\nINNER JOIN \n    CreditCards cc ON ct.CardID = cc.CardID\nINNER JOIN \n    Customers c ON cc.CustomerID = c.CustomerID\nWHERE \n    ct.TransactionDate >= DATEADD(MONTH, -1, GETDATE())\nORDER BY \n    ct.TransactionDate DESC;",
            "gpt-4o_response": "SELECT \n    c.FirstName, \n    c.LastName, \n    ct.TransactionDate, \n    ct.MerchantName \nFROM \n    CardTransactions ct\nJOIN \n    CreditCards cc ON ct.CardID = cc.CardID\nJOIN \n    Customers c ON cc.CustomerID = c.CustomerID\nWHERE \n    ct.TransactionDate >= DATEADD(MONTH, -1, CURRENT_DATE)\nORDER BY \n    ct.TransactionDate DESC;",
            "gpt-4o_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    ct.TransactionDate, \n    ct.MerchantName\nFROM \n    CardTransactions ct\nJOIN \n    CreditCards cc ON ct.CardID = cc.CardID\nJOIN \n    Customers c ON cc.CustomerID = c.CustomerID\nWHERE \n    ct.TransactionDate >= DATEADD(MONTH, -1, CURRENT_DATE)\nORDER BY \n    ct.TransactionDate DESC;"
        },
        {
            "question": "Найти клиентов, у которых есть активные страховые полисы с суммой покрытия более 500000 рублей, и показать их имена, тип полиса и дату окончания. Результат отсортировать по сумме покрытия по убыванию.",
            "sql_query": "SELECT c.FirstName, c.LastName, ip.PolicyType, ip.EndDate, ip.CoverageAmount FROM Customers c JOIN InsurancePolicies ip ON c.CustomerID = ip.CustomerID WHERE ip.CoverageAmount > 500000 AND ip.Status = 'Активен' ORDER BY ip.CoverageAmount DESC;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    c.FirstName,\n    c.LastName,\n    ip.PolicyType,\n    ip.EndDate,\n    ip.CoverageAmount\nFROM\n    Customers c\nJOIN\n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nWHERE\n    ip.Status = 'Активен' AND ip.CoverageAmount > 500000\nORDER BY\n    ip.CoverageAmount DESC;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    c.FirstName,\n    c.LastName,\n    ip.PolicyType,\n    ip.EndDate,\n    ip.CoverageAmount\nFROM\n    Customers c\nJOIN\n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nWHERE\n    ip.Status = 'Активен' AND ip.CoverageAmount > 500000\nORDER BY\n    ip.CoverageAmount DESC;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT c.FirstName, c.LastName, ip.PolicyType, ip.EndDate \nFROM Customers c \nJOIN InsurancePolicies ip ON c.CustomerID = ip.CustomerID \nWHERE ip.Status = 'Активен' AND ip.CoverageAmount > 500000 \nORDER BY ip.CoverageAmount DESC;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    ip.PolicyType, \n    ip.CoverageAmount, \n    ip.EndDate\nFROM \n    Customers c\nJOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nWHERE \n    ip.Status = 'Активен' AND ip.CoverageAmount > 500000\nORDER BY \n    ip.CoverageAmount DESC;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT c.FirstName, c.LastName, ip.PolicyType, ip.CoverageAmount, ip.EndDate \nFROM Customers c \nJOIN InsurancePolicies ip ON c.CustomerID = ip.CustomerID \nWHERE ip.Status = 'Активен' AND ip.CoverageAmount > 500000 \nORDER BY ip.CoverageAmount DESC;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT c.FirstName, c.LastName, ip.PolicyType, ip.CoverageAmount, ip.EndDate \nFROM Customers c \nJOIN InsurancePolicies ip ON c.CustomerID = ip.CustomerID \nWHERE ip.Status = 'Активен' AND ip.CoverageAmount > 500000 \nORDER BY ip.CoverageAmount DESC;",
            "gigachat_response": "SELECT \n    c.FirstName, \n    c.LastName, \n    ip.PolicyType, \n    ip.EndDate\nFROM \n    Customers c\nJOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nWHERE \n    ip.CoverageAmount > 500000 \n    AND ip.Status = 'Активен'\nORDER BY \n    ip.CoverageAmount DESC;",
            "gigachat_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    ip.PolicyType, \n    ip.EndDate\nFROM \n    Customers c\nINNER JOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nWHERE \n    ip.CoverageAmount > 500000 \n    AND ip.Status = 'Активен'\nORDER BY \n    ip.CoverageAmount DESC;",
            "gpt-4o_response": "SELECT c.FirstName, c.LastName, ip.PolicyType, ip.EndDate, ip.CoverageAmount\nFROM Customers c\nJOIN InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nWHERE ip.Status = 'Активен' AND ip.CoverageAmount > 500000\nORDER BY ip.CoverageAmount DESC;",
            "gpt-4o_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    ip.PolicyType, \n    ip.EndDate, \n    ip.CoverageAmount\nFROM \n    Customers c\nJOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nWHERE \n    ip.Status = 'Активен' \n    AND ip.CoverageAmount > 500000\nORDER BY \n    ip.CoverageAmount DESC;"
        },
        {
            "question": "Какие 10 активных рублевых счетов имеют наибольший объем транзакций? Покажите также количество завершенных транзакций по этим счетам.",
            "sql_query": "SELECT a.AccountNumber, (SELECT COUNT(*) FROM Transactions t WHERE t.AccountID = a.AccountID AND t.Status = 'Завершено') AS CompletedTransactions, (SELECT SUM(t.Amount) FROM Transactions t WHERE t.AccountID = a.AccountID AND t.Status = 'Завершено') AS TotalTransactionAmount FROM Accounts a WHERE a.Status = 'Active' AND a.Currency = 'RUB' ORDER BY TotalTransactionAmount DESC LIMIT 10;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    a.AccountNumber,\n    COUNT(t.TransactionID) AS TotalTransactions\nFROM\n    Accounts a\nJOIN\n    Transactions t ON a.AccountID = t.AccountID\nWHERE\n    a.Currency = 'RUB'\n    AND a.Status = 'Active'\n    AND t.Status = 'Завершено'\nGROUP BY\n    a.AccountNumber\nORDER BY\n    TotalTransactions DESC\nLIMIT 10;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    a.AccountNumber,\n    c.FirstName,\n    c.LastName,\n    SUM(t.Amount) AS TotalTransactionAmount,\n    COUNT(CASE WHEN t.Status = 'Завершено' THEN 1 END) AS CompletedTransactions\nFROM\n    Accounts a\nJOIN\n    Customers c ON a.CustomerID = c.CustomerID\nJOIN\n    Transactions t ON a.AccountID = t.AccountID\nWHERE\n    a.Status = 'Active' AND a.Currency = 'RUB'\nGROUP BY\n    a.AccountNumber, c.FirstName, c.LastName\nORDER BY\n    TotalTransactionAmount DESC\nLIMIT 10;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    a.AccountNumber, \n    COUNT(t.TransactionID) AS TotalTransactions, \n    SUM(CASE WHEN t.Status = 'Завершено' THEN 1 ELSE 0 END) AS CompletedTransactions\nFROM \n    Accounts a\nJOIN \n    Transactions t ON a.AccountID = t.AccountID\nWHERE \n    a.Status = 'Active' AND a.Currency = 'RUB'\nGROUP BY \n    a.AccountNumber\nORDER BY \n    TotalTransactions DESC\nLIMIT 10;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    a.AccountNumber, \n    COUNT(t.TransactionID) AS TotalTransactions,\n    SUM(CASE WHEN t.Status = 'Завершено' THEN 1 ELSE 0 END) AS CompletedTransactions\nFROM \n    Accounts a\nJOIN \n    Transactions t ON a.AccountID = t.AccountID\nWHERE \n    a.Status = 'Active' AND a.Currency = 'RUB'\nGROUP BY \n    a.AccountNumber\nORDER BY \n    TotalTransactions DESC\nLIMIT 10;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT a.AccountNumber, \n       SUM(t.Amount) AS TotalTransactionVolume, \n       COUNT(t.TransactionID) AS CompletedTransactionsCount\nFROM Accounts a\nJOIN Transactions t ON a.AccountID = t.AccountID\nWHERE a.Status = 'Active' \n  AND a.Currency = 'RUB' \n  AND t.Status = 'Завершено'\nGROUP BY a.AccountNumber\nORDER BY TotalTransactionVolume DESC\nLIMIT 10;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT a.AccountNumber, \n       SUM(t.Amount) AS TotalTransactionAmount,\n       COUNT(t.TransactionID) AS CompletedTransactionsCount\nFROM Accounts a\nJOIN Transactions t ON a.AccountID = t.AccountID\nWHERE a.Status = 'Active' \n  AND a.Currency = 'RUB'\n  AND t.Status = 'Завершено'\nGROUP BY a.AccountNumber\nORDER BY TotalTransactionAmount DESC\nLIMIT 10;",
            "gigachat_response": "SELECT \n    a.AccountNumber, \n    COUNT(t.TransactionID) AS CompletedTransactionsCount,\n    SUM(t.Amount) AS TotalTransactionVolume\nFROM \n    Accounts a\nJOIN \n    Transactions t ON a.AccountID = t.AccountID\nWHERE \n    a.Status = 'Active' \n    AND a.Currency = 'RUB'\n    AND t.Status = 'Завершено'\nGROUP BY \n    a.AccountNumber\nORDER BY \n    TotalTransactionVolume DESC\nLIMIT 10;",
            "gigachat_response_ru": "SELECT \n    a.AccountNumber,\n    COUNT(t.TransactionID) AS NumberOfCompletedTransactions,\n    SUM(t.Amount) AS TotalTransactionVolume\nFROM \n    Accounts a\nJOIN \n    Transactions t ON a.AccountID = t.AccountID\nWHERE \n    a.Status = 'Active' \n    AND a.Currency = 'RUB'\n    AND t.Status = 'Завершено'\nGROUP BY \n    a.AccountNumber\nORDER BY \n    TotalTransactionVolume DESC\nLIMIT 10;",
            "gpt-4o_response": "SELECT a.AccountNumber, \n       SUM(t.Amount) AS TotalTransactionVolume, \n       COUNT(t.TransactionID) AS CompletedTransactions\nFROM Accounts a\nJOIN Transactions t ON a.AccountID = t.AccountID\nWHERE a.Status = 'Active' \n  AND a.Currency = 'RUB' \n  AND t.Status = 'Завершено'\nGROUP BY a.AccountNumber\nORDER BY TotalTransactionVolume DESC\nLIMIT 10;",
            "gpt-4o_response_ru": "SELECT \n    a.AccountNumber, \n    SUM(t.Amount) AS TotalTransactionVolume,\n    COUNT(t.TransactionID) AS CompletedTransactions\nFROM \n    Accounts a\nJOIN \n    Transactions t ON a.AccountID = t.AccountID\nWHERE \n    a.Status = 'Active' \n    AND a.Currency = 'RUB' \n    AND t.Status = 'Завершено'\nGROUP BY \n    a.AccountNumber\nORDER BY \n    TotalTransactionVolume DESC\nLIMIT 10;"
        },
        {
            "question": "Найти отделения банка, где средняя сумма активных кредитов превышает среднюю сумму активных депозитов, и показать разницу между этими суммами. Результат отсортировать по разнице сумм по убыванию.",
            "sql_query": "WITH BranchStats AS (SELECT b.BranchID, b.BranchName, AVG(l.PrincipalAmount) as AvgLoanAmount, AVG(d.Amount) as AvgDepositAmount FROM Branches b LEFT JOIN Customers c ON b.BranchID = c.BranchID LEFT JOIN Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно' LEFT JOIN Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен' GROUP BY b.BranchID, b.BranchName) SELECT BranchName, AvgLoanAmount, AvgDepositAmount, (AvgLoanAmount - AvgDepositAmount) as Difference FROM BranchStats WHERE AvgLoanAmount > AvgDepositAmount ORDER BY Difference DESC;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    b.BranchName,\n    (AVG(Loans.PrincipalAmount) - AVG(Deposits.Amount)) AS Difference\nFROM\n    Branches b\nLEFT JOIN\n    (SELECT c.BranchID, l.PrincipalAmount FROM Customers c JOIN Loans l ON c.CustomerID = l.CustomerID WHERE l.Status = 'Активно') AS Loans\nON\n    b.BranchID = Loans.BranchID\nLEFT JOIN\n    (SELECT c.BranchID, d.Amount FROM Customers c JOIN Deposits d ON c.CustomerID = d.CustomerID WHERE d.Status = 'Активен') AS Deposits\nON\n    b.BranchID = Deposits.BranchID\nGROUP BY\n    b.BranchName\nHAVING\n    AVG(Loans.PrincipalAmount) > AVG(Deposits.Amount)\nORDER BY\n    Difference DESC;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    b.BranchName,\n    (AVG(l.PrincipalAmount) - AVG(d.Amount)) AS Difference\nFROM\n    Branches b\nJOIN\n    Customers c ON b.BranchID = c.BranchID\nLEFT JOIN\n    Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\nLEFT JOIN\n    Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\nGROUP BY\n    b.BranchName\nHAVING\n    AVG(l.PrincipalAmount) > AVG(d.Amount)\nORDER BY\n    Difference DESC;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH ActiveLoans AS (\n  SELECT l.BranchID, SUM(l.PrincipalAmount) as TotalActiveLoans\n  FROM Loans l\n  WHERE l.Status = 'Активно'\n  GROUP BY l.BranchID\n),\nActiveDeposits AS (\n  SELECT d.BranchID, SUM(d.Amount) as TotalActiveDeposits\n  FROM Deposits d\n  WHERE d.Status = 'Активен'\n  GROUP BY d.BranchID\n)\nSELECT \n  b.BranchName, \n  al.TotalActiveLoans, \n  ad.TotalActiveDeposits, \n  al.TotalActiveLoans - ad.TotalActiveDeposits as Difference\nFROM \n  Branches b\n  LEFT JOIN ActiveLoans al ON b.BranchID = al.BranchID\n  LEFT JOIN ActiveDeposits ad ON b.BranchID = ad.BranchID\nWHERE \n  al.TotalActiveLoans > ad.TotalActiveDeposits\nORDER BY \n  Difference DESC;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH ActiveLoans AS (\n  SELECT l.BranchID, SUM(l.PrincipalAmount) as TotalLoanAmount\n  FROM Loans l\n  WHERE l.Status = 'Активно'\n  GROUP BY l.BranchID\n),\nActiveDeposits AS (\n  SELECT d.BranchID, SUM(d.Amount) as TotalDepositAmount\n  FROM Deposits d\n  WHERE d.Status = 'Активен'\n  GROUP BY d.BranchID\n),\nBranchData AS (\n  SELECT \n    b.BranchName, \n    COALESCE(al.TotalLoanAmount, 0) as TotalLoanAmount, \n    COALESCE(ad.TotalDepositAmount, 0) as TotalDepositAmount,\n    COALESCE(al.TotalLoanAmount, 0) - COALESCE(ad.TotalDepositAmount, 0) as Difference\n  FROM Branches b\n  LEFT JOIN ActiveLoans al ON b.BranchID = al.BranchID\n  LEFT JOIN ActiveDeposits ad ON b.BranchID = ad.BranchID\n)\nSELECT \n  BranchName, \n  TotalLoanAmount, \n  TotalDepositAmount, \n  Difference\nFROM BranchData\nWHERE TotalLoanAmount > TotalDepositAmount\nORDER BY Difference DESC;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    b.BranchID,\n    b.BranchName,\n    AVG(l.PrincipalAmount) AS AvgActiveLoanAmount,\n    AVG(d.Amount) AS AvgActiveDepositAmount,\n    (AVG(l.PrincipalAmount) - AVG(d.Amount)) AS Difference\nFROM \n    Branches b\nJOIN \n    Customers c ON b.BranchID = c.BranchID\nLEFT JOIN \n    Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\nLEFT JOIN \n    Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\nGROUP BY \n    b.BranchID, b.BranchName\nHAVING \n    AVG(l.PrincipalAmount) > AVG(d.Amount)\nORDER BY \n    Difference DESC;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    b.BranchName,\n    AVG(l.PrincipalAmount) AS AvgLoanAmount,\n    AVG(d.Amount) AS AvgDepositAmount,\n    (AVG(l.PrincipalAmount) - AVG(d.Amount)) AS Difference\nFROM \n    Branches b\nJOIN \n    Customers c ON b.BranchID = c.BranchID\nLEFT JOIN \n    Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\nLEFT JOIN \n    Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\nGROUP BY \n    b.BranchName\nHAVING \n    AVG(l.PrincipalAmount) > AVG(d.Amount)\nORDER BY \n    Difference DESC;",
            "gigachat_response": "SELECT \n    b.BranchName,\n    AVG(l.PrincipalAmount) AS AverageLoanAmount,\n    AVG(d.Amount) AS AverageDepositAmount,\n    (AVG(l.PrincipalAmount) - AVG(d.Amount)) AS Difference\nFROM \n    Branches b\nJOIN \n    Loans l ON b.BranchID = l.BranchID\nJOIN \n    Deposits d ON b.BranchID = d.BranchID\nWHERE \n    l.Status = 'Активно' AND d.Status = 'Активен'\nGROUP BY \n    b.BranchName\nHAVING \n    AVG(l.PrincipalAmount) > AVG(d.Amount)\nORDER BY \n    Difference DESC;",
            "gigachat_response_ru": "SELECT \n    b.BranchName,\n    AVG(l.PrincipalAmount) AS AverageLoanAmount,\n    AVG(d.Amount) AS AverageDepositAmount,\n    (AVG(l.PrincipalAmount) - AVG(d.Amount)) AS Difference\nFROM \n    Branches b\nLEFT JOIN \n    Loans l ON b.BranchID = l.BranchID AND l.Status = 'Активно'\nLEFT JOIN \n    Deposits d ON b.BranchID = d.BranchID AND d.Status = 'Активен'\nGROUP BY \n    b.BranchName\nHAVING \n    AVG(l.PrincipalAmount) > AVG(d.Amount)\nORDER BY \n    Difference DESC;",
            "gpt-4o_response": "SELECT \n    b.BranchName,\n    AVG(l.PrincipalAmount) AS AvgLoanAmount,\n    AVG(d.Amount) AS AvgDepositAmount,\n    (AVG(l.PrincipalAmount) - AVG(d.Amount)) AS Difference\nFROM \n    Branches b\nJOIN \n    Customers c ON b.BranchID = c.BranchID\nLEFT JOIN \n    Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\nLEFT JOIN \n    Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\nGROUP BY \n    b.BranchName\nHAVING \n    AVG(l.PrincipalAmount) > AVG(d.Amount)\nORDER BY \n    Difference DESC;",
            "gpt-4o_response_ru": "SELECT \n    b.BranchName,\n    AVG(l.PrincipalAmount) AS AvgLoanAmount,\n    AVG(d.Amount) AS AvgDepositAmount,\n    AVG(l.PrincipalAmount) - AVG(d.Amount) AS Difference\nFROM \n    Branches b\nJOIN \n    Customers c ON b.BranchID = c.BranchID\nLEFT JOIN \n    Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\nLEFT JOIN \n    Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\nGROUP BY \n    b.BranchName\nHAVING \n    AVG(l.PrincipalAmount) > AVG(d.Amount)\nORDER BY \n    Difference DESC;"
        },
        {
            "question": "Вывести список клиентов, у которых есть активные кредиты, депозиты и страховые полисы одновременно, с указанием общей суммы их активов и обязательств. Результат отсортировать по чистой позиции (разнице между депозитами и кредитами) по убыванию.",
            "sql_query": "SELECT c.FirstName, c.LastName, SUM(d.Amount) as TotalDeposits, SUM(l.PrincipalAmount) as TotalLoans, SUM(ip.CoverageAmount) as TotalInsurance, (SUM(d.Amount) - SUM(l.PrincipalAmount)) as NetPosition FROM Customers c LEFT JOIN Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен' LEFT JOIN Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно' LEFT JOIN InsurancePolicies ip ON c.CustomerID = ip.CustomerID AND ip.Status = 'Активен' GROUP BY c.CustomerID, c.FirstName, c.LastName HAVING COUNT(DISTINCT d.DepositID) > 0 AND COUNT(DISTINCT l.LoanID) > 0 AND COUNT(DISTINCT ip.PolicyID) > 0 ORDER BY NetPosition DESC;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    c.FirstName,\n    c.LastName,\n    SUM(COALESCE(l.PrincipalAmount, 0)) AS TotalLoans,\n    SUM(COALESCE(d.Amount, 0)) AS TotalDeposits,\n    SUM(COALESCE(ip.CoverageAmount, 0)) AS TotalInsuranceCoverage,\n    (SUM(COALESCE(d.Amount, 0)) - SUM(COALESCE(l.PrincipalAmount, 0))) AS NetPosition\nFROM Customers c\nLEFT JOIN Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\nLEFT JOIN Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\nLEFT JOIN InsurancePolicies ip ON c.CustomerID = ip.CustomerID AND ip.Status = 'Активен'\nWHERE c.CustomerID IN (SELECT CustomerID FROM Loans WHERE Status = 'Активно')\n  AND c.CustomerID IN (SELECT CustomerID FROM Deposits WHERE Status = 'Активен')\n  AND c.CustomerID IN (SELECT CustomerID FROM InsurancePolicies WHERE Status = 'Активен')\nGROUP BY c.CustomerID, c.FirstName, c.LastName\nORDER BY NetPosition DESC;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    c.FirstName,\n    c.LastName,\n    SUM(d.Amount) AS TotalDeposits,\n    SUM(l.PrincipalAmount) AS TotalLoans,\n    SUM(ip.CoverageAmount) AS TotalCoverage,\n    (SUM(d.Amount) - SUM(l.PrincipalAmount)) AS NetPosition\nFROM\n    Customers c\nJOIN\n    Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\nJOIN\n    Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\nJOIN\n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID AND ip.Status = 'Активен'\nGROUP BY\n    c.CustomerID, c.FirstName, c.LastName\nHAVING\n    SUM(d.Amount) > 0 AND SUM(l.PrincipalAmount) > 0 AND SUM(ip.CoverageAmount) > 0\nORDER BY\n    NetPosition DESC;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH ActiveCustomers AS (\n  SELECT c.CustomerID, c.FirstName, c.LastName, \n         SUM(l.PrincipalAmount) as TotalLoans, \n         SUM(d.Amount) as TotalDeposits, \n         SUM(ip.CoverageAmount) as TotalInsurance\n  FROM Customers c\n  LEFT JOIN Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\n  LEFT JOIN Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\n  LEFT JOIN InsurancePolicies ip ON c.CustomerID = ip.CustomerID AND ip.Status = 'Активен'\n  GROUP BY c.CustomerID, c.FirstName, c.LastName\n  HAVING TotalLoans > 0 AND TotalDeposits > 0 AND TotalInsurance > 0\n)\nSELECT FirstName, LastName, \n       TotalLoans, \n       TotalDeposits, \n       TotalInsurance, \n       (TotalDeposits - TotalLoans) as NetPosition\nFROM ActiveCustomers\nORDER BY NetPosition DESC;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH ActiveCustomers AS (\n  SELECT c.CustomerID, c.FirstName, c.LastName,\n         SUM(CASE WHEN l.Status = 'Активно' THEN l.PrincipalAmount ELSE 0 END) as TotalLoans,\n         SUM(CASE WHEN d.Status = 'Активен' THEN d.Amount ELSE 0 END) as TotalDeposits,\n         SUM(CASE WHEN ip.Status = 'Активен' THEN 1 ELSE 0 END) as ActivePolicies\n  FROM Customers c\n  LEFT JOIN Loans l ON c.CustomerID = l.CustomerID\n  LEFT JOIN Deposits d ON c.CustomerID = d.CustomerID\n  LEFT JOIN InsurancePolicies ip ON c.CustomerID = ip.CustomerID\n  GROUP BY c.CustomerID, c.FirstName, c.LastName\n  HAVING SUM(CASE WHEN l.Status = 'Активно' THEN 1 ELSE 0 END) > 0\n     AND SUM(CASE WHEN d.Status = 'Активен' THEN 1 ELSE 0 END) > 0\n     AND SUM(CASE WHEN ip.Status = 'Активен' THEN 1 ELSE 0 END) > 0\n)\nSELECT FirstName, LastName, TotalLoans, TotalDeposits, ActivePolicies,\n       (TotalDeposits - TotalLoans) as NetPosition\nFROM ActiveCustomers\nORDER BY NetPosition DESC;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    c.CustomerID,\n    c.FirstName,\n    c.LastName,\n    COALESCE(SUM(d.Amount), 0) AS TotalDeposits,\n    COALESCE(SUM(l.PrincipalAmount), 0) AS TotalLoans,\n    COALESCE(SUM(ip.CoverageAmount), 0) AS TotalInsuranceCoverage,\n    (COALESCE(SUM(d.Amount), 0) - COALESCE(SUM(l.PrincipalAmount), 0)) AS NetPosition\nFROM \n    Customers c\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\nJOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID AND ip.Status = 'Активен'\nGROUP BY \n    c.CustomerID, c.FirstName, c.LastName\nORDER BY \n    NetPosition DESC;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    c.CustomerID,\n    c.FirstName,\n    c.LastName,\n    COALESCE(SUM(d.Amount), 0) AS TotalDeposits,\n    COALESCE(SUM(l.PrincipalAmount), 0) AS TotalLoans,\n    COALESCE(SUM(ip.CoverageAmount), 0) AS TotalInsuranceCoverage,\n    (COALESCE(SUM(d.Amount), 0) - COALESCE(SUM(l.PrincipalAmount), 0)) AS NetPosition\nFROM \n    Customers c\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\nJOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID AND ip.Status = 'Активен'\nGROUP BY \n    c.CustomerID, c.FirstName, c.LastName\nHAVING \n    SUM(d.Amount) > 0 AND SUM(l.PrincipalAmount) > 0 AND SUM(ip.CoverageAmount) > 0\nORDER BY \n    NetPosition DESC;",
            "gigachat_response": "SELECT \n    c.FirstName, \n    c.LastName, \n    SUM(l.PrincipalAmount) AS TotalLoans, \n    SUM(d.Amount) AS TotalDeposits, \n    SUM(ip.CoverageAmount) AS TotalInsuranceCoverage,\n    (SUM(d.Amount) - SUM(l.PrincipalAmount)) AS NetPosition\nFROM \n    Customers c\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\nJOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID AND ip.Status = 'Активен'\nGROUP BY \n    c.FirstName, c.LastName\nORDER BY \n    NetPosition DESC;",
            "gigachat_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    SUM(l.PrincipalAmount) AS TotalLoans, \n    SUM(d.Amount) AS TotalDeposits, \n    SUM(i.CoverageAmount) AS TotalInsuranceCoverage,\n    (SUM(d.Amount) - SUM(l.PrincipalAmount)) AS NetPosition\nFROM \n    Customers c\nINNER JOIN \n    Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\nINNER JOIN \n    Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\nINNER JOIN \n    InsurancePolicies i ON c.CustomerID = i.CustomerID AND i.Status = 'Активен'\nGROUP BY \n    c.FirstName, c.LastName\nORDER BY \n    NetPosition DESC;",
            "gpt-4o_response": "SELECT \n    c.FirstName, \n    c.LastName, \n    SUM(d.Amount) AS TotalDeposits, \n    SUM(l.PrincipalAmount) AS TotalLoans, \n    SUM(ip.CoverageAmount) AS TotalInsuranceCoverage, \n    (SUM(d.Amount) - SUM(l.PrincipalAmount)) AS NetPosition\nFROM \n    Customers c\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\nJOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID AND ip.Status = 'Активен'\nGROUP BY \n    c.CustomerID, c.FirstName, c.LastName\nORDER BY \n    NetPosition DESC;",
            "gpt-4o_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    SUM(d.Amount) AS TotalDeposits, \n    SUM(l.PrincipalAmount) AS TotalLoans, \n    SUM(ip.CoverageAmount) AS TotalInsuranceCoverage, \n    (SUM(d.Amount) - SUM(l.PrincipalAmount)) AS NetPosition\nFROM \n    Customers c\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\nJOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID AND ip.Status = 'Активен'\nGROUP BY \n    c.CustomerID, c.FirstName, c.LastName\nORDER BY \n    NetPosition DESC;"
        },
        {
            "question": "Найти клиентов, у которых в течение последних 2 лет были транзакции по кредитным картам на сумму более 100000 рублей, и показать их средний чек и количество транзакций. Результат отсортировать по общей сумме расходов по убыванию.",
            "sql_query": "SELECT c.FirstName, c.LastName, COUNT(ct.CardTransactionID) as TransactionCount, AVG(ct.Amount) as AverageTransactionAmount, SUM(ct.Amount) as TotalSpent FROM Customers c JOIN CreditCards cc ON c.CustomerID = cc.CustomerID JOIN CardTransactions ct ON cc.CardID = ct.CardID WHERE ct.TransactionDate >= DATE_SUB(CURRENT_DATE, INTERVAL 2 YEAR) AND ct.Status = 'Завершена' GROUP BY c.CustomerID, c.FirstName, c.LastName HAVING SUM(ct.Amount) > 100000 ORDER BY TotalSpent DESC;",
            "google/gemini-2.0-flash-001_response": "SELECT \n    c.FirstName,\n    c.LastName,\n    AVG(ct.Amount) AS AverageTransactionAmount,\n    COUNT(ct.CardTransactionID) AS NumberOfTransactions,\n    SUM(ct.Amount) AS TotalTransactionAmount\nFROM Customers c\nJOIN CreditCards cc ON c.CustomerID = cc.CustomerID\nJOIN CardTransactions ct ON cc.CardID = ct.CardID\nWHERE ct.TransactionDate >= DATE('now', '-2 years')\n  AND ct.Currency = 'RUB'\nGROUP BY c.CustomerID, c.FirstName, c.LastName\nHAVING SUM(ct.Amount) > 100000\nORDER BY TotalTransactionAmount DESC;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    c.FirstName,\n    c.LastName,\n    AVG(ct.Amount) AS AverageTransactionAmount,\n    COUNT(ct.CardTransactionID) AS TotalTransactions,\n    SUM(ct.Amount) AS TotalTransactionAmount\nFROM\n    Customers c\nJOIN\n    CreditCards cc ON c.CustomerID = cc.CustomerID\nJOIN\n    CardTransactions ct ON cc.CardID = ct.CardID\nWHERE\n    ct.TransactionDate >= DATE('now', '-2 year')\n    AND ct.Currency = 'RUB'\nGROUP BY\n    c.CustomerID, c.FirstName, c.LastName\nHAVING\n    SUM(ct.Amount) > 100000\nORDER BY\n    TotalTransactionAmount DESC;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH CustomerCardTransactions AS (\n  SELECT c.CustomerID, c.FirstName, c.LastName, \n         SUM(ct.Amount) as TotalCardTransactionAmount, \n         COUNT(ct.CardTransactionID) as TotalCardTransactions,\n         AVG(ct.Amount) as AverageCardTransactionAmount\n  FROM Customers c\n  JOIN CreditCards cc ON c.CustomerID = cc.CustomerID\n  JOIN CardTransactions ct ON cc.CardID = ct.CardID\n  WHERE ct.TransactionDate > NOW() - INTERVAL 2 YEAR\n  GROUP BY c.CustomerID, c.FirstName, c.LastName\n  HAVING SUM(ct.Amount) > 100000\n)\nSELECT FirstName, LastName, AverageCardTransactionAmount, TotalCardTransactions, TotalCardTransactionAmount\nFROM CustomerCardTransactions\nORDER BY TotalCardTransactionAmount DESC;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH CustomerCardTransactions AS (\n  SELECT c.CustomerID, c.FirstName, c.LastName, \n         SUM(ct.Amount) AS TotalTransactionAmount, \n         COUNT(ct.CardTransactionID) AS TotalTransactions,\n         AVG(ct.Amount) AS AverageTransactionAmount\n  FROM Customers c\n  JOIN CreditCards cc ON c.CustomerID = cc.CustomerID\n  JOIN CardTransactions ct ON cc.CardID = ct.CardID\n  WHERE ct.TransactionDate > CURRENT_DATE - INTERVAL 2 YEAR\n  AND ct.Amount > 100000\n  GROUP BY c.CustomerID, c.FirstName, c.LastName\n)\nSELECT FirstName, LastName, TotalTransactionAmount, TotalTransactions, AverageTransactionAmount\nFROM CustomerCardTransactions\nORDER BY TotalTransactionAmount DESC;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    c.CustomerID,\n    c.FirstName,\n    c.LastName,\n    SUM(ct.Amount) AS TotalSpent,\n    COUNT(ct.CardTransactionID) AS TransactionCount,\n    AVG(ct.Amount) AS AverageCheck\nFROM \n    Customers c\nJOIN \n    CreditCards cc ON c.CustomerID = cc.CustomerID\nJOIN \n    CardTransactions ct ON cc.CardID = ct.CardID\nWHERE \n    ct.TransactionDate >= DATE_SUB(CURRENT_DATE, INTERVAL 2 YEAR)\n    AND ct.Currency = 'RUB'\n    AND ct.Status = 'Завершена'\nGROUP BY \n    c.CustomerID, c.FirstName, c.LastName\nHAVING \n    SUM(ct.Amount) > 100000\nORDER BY \n    TotalSpent DESC;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    c.FirstName,\n    c.LastName,\n    SUM(ct.Amount) AS TotalSpent,\n    COUNT(ct.CardTransactionID) AS TransactionCount,\n    AVG(ct.Amount) AS AverageCheck\nFROM \n    Customers c\nJOIN \n    CreditCards cc ON c.CustomerID = cc.CustomerID\nJOIN \n    CardTransactions ct ON cc.CardID = ct.CardID\nWHERE \n    ct.TransactionDate >= DATE_SUB(CURRENT_DATE, INTERVAL 2 YEAR)\n    AND ct.Currency = 'RUB'\n    AND ct.Status = 'Завершена'\nGROUP BY \n    c.CustomerID, c.FirstName, c.LastName\nHAVING \n    SUM(ct.Amount) > 100000\nORDER BY \n    TotalSpent DESC;",
            "gigachat_response": "SELECT \n    c.FirstName, \n    c.LastName, \n    AVG(ct.Amount) AS AverageCheck, \n    COUNT(ct.CardTransactionID) AS NumberOfTransactions, \n    SUM(ct.Amount) AS TotalSpent\nFROM \n    Customers c\nJOIN \n    CreditCards cc ON c.CustomerID = cc.CustomerID\nJOIN \n    CardTransactions ct ON cc.CardID = ct.CardID\nWHERE \n    ct.TransactionDate >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 YEAR)\n    AND ct.Status = 'Завершена'\nGROUP BY \n    c.CustomerID\nHAVING \n    SUM(ct.Amount) > 100000\nORDER BY \n    TotalSpent DESC;",
            "gigachat_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    AVG(ct.Amount) AS AverageCheck, \n    COUNT(ct.CardTransactionID) AS NumberOfTransactions\nFROM \n    Customers c\nINNER JOIN \n    CreditCards cc ON c.CustomerID = cc.CustomerID\nINNER JOIN \n    CardTransactions ct ON cc.CardID = ct.CardID\nWHERE \n    ct.TransactionDate >= DATEADD(YEAR, -2, GETDATE()) -- последние два года\nAND \n    ct.Amount > 100000 -- сумма больше 100000 руб\nGROUP BY \n    c.FirstName, \n    c.LastName\nORDER BY \n    SUM(ct.Amount) DESC;",
            "gpt-4o_response": "SELECT \n    c.FirstName, \n    c.LastName, \n    COUNT(ct.CardTransactionID) AS TransactionCount, \n    AVG(ct.Amount) AS AverageTransactionAmount, \n    SUM(ct.Amount) AS TotalSpent\nFROM \n    Customers c\nJOIN \n    CreditCards cc ON c.CustomerID = cc.CustomerID\nJOIN \n    CardTransactions ct ON cc.CardID = ct.CardID\nWHERE \n    ct.TransactionDate >= DATE_SUB(CURDATE(), INTERVAL 2 YEAR)\n    AND ct.Status = 'Завершена'\nGROUP BY \n    c.CustomerID, c.FirstName, c.LastName\nHAVING \n    SUM(ct.Amount) > 100000\nORDER BY \n    TotalSpent DESC;",
            "gpt-4o_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    COUNT(ct.CardTransactionID) AS TransactionCount, \n    AVG(ct.Amount) AS AverageTransactionAmount, \n    SUM(ct.Amount) AS TotalSpent\nFROM \n    Customers c\nJOIN \n    CreditCards cc ON c.CustomerID = cc.CustomerID\nJOIN \n    CardTransactions ct ON cc.CardID = ct.CardID\nWHERE \n    ct.TransactionDate >= DATEADD(YEAR, -2, CURRENT_DATE) \n    AND ct.Status = 'Завершена'\nGROUP BY \n    c.CustomerID, c.FirstName, c.LastName\nHAVING \n    SUM(ct.Amount) > 100000\nORDER BY \n    TotalSpent DESC;"
        },
        {
            "question": "Вывести статистику по страховым случаям: количество случаев по каждому типу полиса, среднюю сумму выплаты и процент успешных выплат. Результат отсортировать по количеству случаев по убыванию, показать только типы полисов, по которым были обращения.",
            "sql_query": "SELECT ip.PolicyType, COUNT(pc.ClaimID) as TotalClaims, AVG(pc.ClaimAmount) as AverageClaimAmount, (COUNT(CASE WHEN pc.Status = 'Выплачено' THEN 1 END) * 100.0 / COUNT(*)) as SuccessRate FROM InsurancePolicies ip LEFT JOIN PolicyClaims pc ON ip.PolicyID = pc.PolicyID GROUP BY ip.PolicyType HAVING COUNT(pc.ClaimID) > 0 ORDER BY TotalClaims DESC;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    ip.PolicyType,\n    COUNT(pc.ClaimID) AS ClaimCount,\n    AVG(pc.ClaimAmount) AS AverageClaimAmount,\n    SUM(CASE WHEN pc.Status IN ('Выплачено', 'Утверждено') THEN 1 ELSE 0 END) * 100.0 / COUNT(pc.ClaimID) AS SuccessPercentage\nFROM\n    InsurancePolicies ip\nJOIN\n    PolicyClaims pc ON ip.PolicyID = pc.PolicyID\nGROUP BY\n    ip.PolicyType\nHAVING\n    COUNT(pc.ClaimID) > 0\nORDER BY\n    ClaimCount DESC;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    ip.PolicyType,\n    COUNT(pc.ClaimID) AS ClaimCount,\n    AVG(pc.ClaimAmount) AS AverageClaimAmount,\n    SUM(CASE WHEN pc.Status = 'Выплачено' OR pc.Status = 'Утверждено' THEN 1 ELSE 0 END) * 100.0 / COUNT(pc.ClaimID) AS SuccessPaymentPercentage\nFROM\n    InsurancePolicies ip\nJOIN\n    PolicyClaims pc ON ip.PolicyID = pc.PolicyID\nGROUP BY\n    ip.PolicyType\nHAVING\n    COUNT(pc.ClaimID) > 0\nORDER BY\n    ClaimCount DESC;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    ip.PolicyType, \n    COUNT(pc.ClaimID) AS TotalClaims, \n    AVG(pc.ClaimAmount) AS AverageClaimAmount, \n    (COUNT(CASE WHEN pc.Status = 'Выплачено' THEN 1 END) * 100.0 / COUNT(pc.ClaimID)) AS SuccessfulClaimPercentage\nFROM \n    InsurancePolicies ip\nJOIN \n    PolicyClaims pc ON ip.PolicyID = pc.PolicyID\nGROUP BY \n    ip.PolicyType\nHAVING \n    COUNT(pc.ClaimID) > 0\nORDER BY \n    TotalClaims DESC;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    ip.PolicyType, \n    COUNT(pc.ClaimID) AS TotalClaims, \n    AVG(pc.ClaimAmount) AS AverageClaimAmount, \n    (SUM(CASE WHEN pc.Status = 'Выплачено' THEN 1 ELSE 0 END) * 1.0 / COUNT(pc.ClaimID)) * 100 AS SuccessfulPayoutPercentage\nFROM \n    InsurancePolicies ip\nJOIN \n    PolicyClaims pc ON ip.PolicyID = pc.PolicyID\nGROUP BY \n    ip.PolicyType\nHAVING \n    COUNT(pc.ClaimID) > 0\nORDER BY \n    TotalClaims DESC;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    ip.PolicyType,\n    COUNT(pc.ClaimID) AS TotalClaims,\n    AVG(pc.ClaimAmount) AS AverageClaimAmount,\n    (COUNT(CASE WHEN pc.Status = 'Выплачено' OR pc.Status = 'Утверждено' THEN 1 END) * 100.0 / COUNT(pc.ClaimID)) AS SuccessRate\nFROM \n    InsurancePolicies ip\nJOIN \n    PolicyClaims pc ON ip.PolicyID = pc.PolicyID\nGROUP BY \n    ip.PolicyType\nORDER BY \n    TotalClaims DESC;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    ip.PolicyType,\n    COUNT(pc.ClaimID) AS TotalClaims,\n    AVG(pc.ClaimAmount) AS AverageClaimAmount,\n    (COUNT(CASE WHEN pc.Status = 'Выплачено' OR pc.Status = 'Утверждено' THEN 1 END) * 100.0 / COUNT(pc.ClaimID)) AS SuccessRate\nFROM \n    InsurancePolicies ip\nJOIN \n    PolicyClaims pc ON ip.PolicyID = pc.PolicyID\nGROUP BY \n    ip.PolicyType\nORDER BY \n    TotalClaims DESC;",
            "gigachat_response": "SELECT \n    p.PolicyType,\n    COUNT(pc.ClaimID) AS NumberOfCases,\n    COALESCE(AVG(pc.ClaimAmount), 0) AS AveragePayoutAmount,\n    ROUND((COUNT(CASE WHEN pc.Status = 'Выплачено' THEN 1 ELSE NULL END) * 100.0 / COUNT(pc.ClaimID)), 2) AS SuccessPercentage\nFROM \n    InsurancePolicies p\nJOIN \n    PolicyClaims pc ON p.PolicyID = pc.PolicyID\nGROUP BY \n    p.PolicyType\nORDER BY \n    NumberOfCases DESC;",
            "gigachat_response_ru": "SELECT \n    p.PolicyType,\n    COUNT(pc.ClaimID) AS NumberOfCases,\n    COALESCE(AVG(pc.ClaimAmount), 0) AS AveragePayout,\n    ROUND((COUNT(CASE WHEN pc.Status = 'Выплачено' THEN 1 ELSE NULL END) * 100.0 / COUNT(pc.ClaimID)), 2) AS SuccessPercentage\nFROM \n    InsurancePolicies p\nLEFT JOIN \n    PolicyClaims pc ON p.PolicyID = pc.PolicyID\nWHERE \n    pc.ClaimID IS NOT NULL -- Только случаи, где был хотя бы один страховой случай\nGROUP BY \n    p.PolicyType\nORDER BY \n    NumberOfCases DESC;",
            "gpt-4o_response": "SELECT \n    ip.PolicyType,\n    COUNT(pc.ClaimID) AS TotalClaims,\n    AVG(pc.ClaimAmount) AS AverageClaimAmount,\n    (SUM(CASE WHEN pc.Status = 'Выплачено' OR pc.Status = 'Утверждено' THEN 1 ELSE 0 END) * 100.0 / COUNT(pc.ClaimID)) AS SuccessRate\nFROM \n    InsurancePolicies ip\nJOIN \n    PolicyClaims pc ON ip.PolicyID = pc.PolicyID\nGROUP BY \n    ip.PolicyType\nHAVING \n    COUNT(pc.ClaimID) > 0\nORDER BY \n    TotalClaims DESC;",
            "gpt-4o_response_ru": "SELECT \n    ip.PolicyType,\n    COUNT(pc.ClaimID) AS ClaimCount,\n    AVG(pc.ClaimAmount) AS AverageClaimAmount,\n    (SUM(CASE WHEN pc.Status = 'Выплачено' THEN 1 ELSE 0 END) * 100.0 / COUNT(pc.ClaimID)) AS SuccessfulPayoutPercentage\nFROM \n    InsurancePolicies ip\nJOIN \n    PolicyClaims pc ON ip.PolicyID = pc.PolicyID\nGROUP BY \n    ip.PolicyType\nHAVING \n    COUNT(pc.ClaimID) > 0\nORDER BY \n    ClaimCount DESC;"
        },
        {
            "question": "Найти клиентов, у которых есть просроченные платежи по кредитам, но при этом есть активные депозиты на сумму, достаточную для погашения просрочки. Показать сумму просрочки и доступные средства на депозитах. Результат отсортировать по сумме просрочки по убыванию.",
            "sql_query": "WITH LoanPaymentsStatus AS (SELECT l.CustomerID, l.LoanID, l.PrincipalAmount, (SELECT SUM(Amount) FROM LoanPayments WHERE LoanID = l.LoanID AND Status = 'Завершено') as PaidAmount FROM Loans l WHERE l.Status = 'Активно') SELECT c.FirstName, c.LastName, lps.LoanID, lps.PrincipalAmount - lps.PaidAmount as OverdueAmount, SUM(d.Amount) as AvailableDeposits FROM Customers c JOIN LoanPaymentsStatus lps ON c.CustomerID = lps.CustomerID JOIN Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен' GROUP BY c.CustomerID, c.FirstName, c.LastName, lps.LoanID, lps.PrincipalAmount, lps.PaidAmount HAVING (lps.PrincipalAmount - lps.PaidAmount) > 0 AND SUM(d.Amount) >= (lps.PrincipalAmount - lps.PaidAmount) ORDER BY OverdueAmount DESC;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    c.FirstName,\n    c.LastName,\n    SUM(CASE WHEN lp.PaymentDate < DATE('now') AND lp.Status != 'Завершено' THEN lp.Amount ELSE 0 END) AS TotalOverdueAmount,\n    SUM(d.Amount) AS TotalDepositAmount\nFROM\n    Customers c\nJOIN\n    Loans l ON c.CustomerID = l.CustomerID\nJOIN\n    LoanPayments lp ON l.LoanID = lp.LoanID\nJOIN\n    Deposits d ON c.CustomerID = d.CustomerID\nWHERE\n    lp.PaymentDate < DATE('now')\n    AND lp.Status != 'Завершено'\n    AND d.Status = 'Активен'\nGROUP BY\n    c.CustomerID, c.FirstName, c.LastName\nHAVING\n    SUM(CASE WHEN lp.PaymentDate < DATE('now') AND lp.Status != 'Завершено' THEN lp.Amount ELSE 0 END) > 0\n    AND SUM(d.Amount) >= SUM(CASE WHEN lp.PaymentDate < DATE('now') AND lp.Status != 'Завершено' THEN lp.Amount ELSE 0 END)\nORDER BY\n    TotalOverdueAmount DESC;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    c.FirstName,\n    c.LastName,\n    SUM(CASE WHEN lp.Status = 'Ошибка' THEN lp.Amount ELSE 0 END) AS TotalOverdueAmount,\n    SUM(d.Amount) AS TotalDepositAmount\nFROM\n    Customers c\nJOIN\n    Loans l ON c.CustomerID = l.CustomerID\nJOIN\n    LoanPayments lp ON l.LoanID = lp.LoanID\nJOIN\n    Deposits d ON c.CustomerID = d.CustomerID\nWHERE\n    lp.Status = 'Ошибка'\n    AND d.Status = 'Активен'\nGROUP BY\n    c.CustomerID, c.FirstName, c.LastName\nHAVING\n    SUM(CASE WHEN lp.Status = 'Ошибка' THEN lp.Amount ELSE 0 END) > 0\n    AND SUM(d.Amount) >= SUM(CASE WHEN lp.Status = 'Ошибка' THEN lp.Amount ELSE 0 END)\nORDER BY\n    TotalOverdueAmount DESC;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH OverdueLoans AS (\n  SELECT l.CustomerID, SUM(lp.Amount) as OverdueAmount\n  FROM Loans l\n  JOIN LoanPayments lp ON l.LoanID = lp.LoanID\n  WHERE lp.Status = 'Ошибка' OR lp.Status = 'В ожидании'\n  GROUP BY l.CustomerID\n),\nAvailableDeposits AS (\n  SELECT d.CustomerID, SUM(d.Amount) as AvailableAmount\n  FROM Deposits d\n  WHERE d.Status = 'Активен'\n  GROUP BY d.CustomerID\n)\nSELECT c.FirstName, c.LastName, ol.OverdueAmount, ad.AvailableAmount\nFROM Customers c\nJOIN OverdueLoans ol ON c.CustomerID = ol.CustomerID\nJOIN AvailableDeposits ad ON c.CustomerID = ad.CustomerID\nWHERE ad.AvailableAmount >= ol.OverdueAmount\nORDER BY ol.OverdueAmount DESC;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH OverdueLoans AS (\n  SELECT l.CustomerID, SUM(l.PrincipalAmount - COALESCE(lp.Amount, 0)) AS OverdueAmount\n  FROM Loans l\n  LEFT JOIN (\n    SELECT LoanID, SUM(Amount) AS Amount\n    FROM LoanPayments\n    GROUP BY LoanID\n  ) lp ON l.LoanID = lp.LoanID\n  WHERE l.Status = 'Активно' AND l.PrincipalAmount > COALESCE(lp.Amount, 0)\n  GROUP BY l.CustomerID\n),\nActiveDeposits AS (\n  SELECT d.CustomerID, SUM(d.Amount) AS AvailableAmount\n  FROM Deposits d\n  WHERE d.Status = 'Активен'\n  GROUP BY d.CustomerID\n)\nSELECT \n  c.FirstName, \n  c.LastName, \n  ol.OverdueAmount, \n  ad.AvailableAmount\nFROM Customers c\nJOIN OverdueLoans ol ON c.CustomerID = ol.CustomerID\nJOIN ActiveDeposits ad ON c.CustomerID = ad.CustomerID\nWHERE ol.OverdueAmount <= ad.AvailableAmount\nORDER BY ol.OverdueAmount DESC;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    c.CustomerID,\n    c.FirstName,\n    c.LastName,\n    SUM(lp.Amount) AS OverdueAmount,\n    SUM(d.Amount) AS DepositAmount\nFROM \n    Customers c\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\nJOIN \n    LoanPayments lp ON l.LoanID = lp.LoanID AND lp.Status = 'Ошибка'\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\nWHERE \n    lp.PaymentDate < CURRENT_DATE\nGROUP BY \n    c.CustomerID, c.FirstName, c.LastName\nHAVING \n    SUM(d.Amount) >= SUM(lp.Amount)\nORDER BY \n    OverdueAmount DESC;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    c.FirstName,\n    c.LastName,\n    SUM(lp.Amount) AS OverdueAmount,\n    SUM(d.Amount) AS DepositAmount\nFROM \n    Customers c\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\nJOIN \n    LoanPayments lp ON l.LoanID = lp.LoanID AND lp.Status = 'Ошибка'\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\nWHERE \n    d.Amount >= lp.Amount\nGROUP BY \n    c.CustomerID, c.FirstName, c.LastName\nORDER BY \n    OverdueAmount DESC;",
            "gigachat_response": "SELECT \n    c.FirstName, \n    c.LastName, \n    lp.TotalOverdueAmount AS OverdueAmount, \n    dp.AvailableDepositBalance AS AvailableDepositBalance\nFROM \n    Customers c\nJOIN (\n    -- Подзапрос для расчета общей суммы просроченных платежей по каждому клиенту\n    SELECT \n        l.CustomerID, \n        SUM(lp.Amount) AS TotalOverdueAmount\n    FROM \n        Loans l\n    JOIN LoanPayments lp ON l.LoanID = lp.LoanID\n    WHERE \n        lp.PaymentDate > l.EndDate \n        AND lp.Status <> 'Завершено'\n    GROUP BY \n        l.CustomerID\n) lp ON c.CustomerID = lp.CustomerID\nJOIN (\n    -- Подзапрос для расчета доступной суммы на активных депозитах каждого клиента\n    SELECT \n        d.CustomerID, \n        SUM(d.Amount) AS AvailableDepositBalance\n    FROM \n        Deposits d\n    WHERE \n        d.Status = 'Активен'\n    GROUP BY \n        d.CustomerID\n) dp ON c.CustomerID = dp.CustomerID\nWHERE \n    dp.AvailableDepositBalance >= lp.TotalOverdueAmount\nORDER BY \n    lp.TotalOverdueAmount DESC;",
            "gigachat_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    SUM(lp.Amount) AS OverdueAmount, \n    SUM(d.Amount) AS AvailableDepositBalance\nFROM \n    Customers c\nINNER JOIN \n    LoanPayments lp ON c.CustomerID = lp.LoanID AND lp.PaymentDate IS NULL -- Просрочка платежей\nINNER JOIN \n    Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\nGROUP BY \n    c.FirstName, c.LastName\nHAVING \n    SUM(d.Amount) >= SUM(lp.Amount) -- Средства на депозитах покрывают задолженность\nORDER BY \n    OverdueAmount DESC;",
            "gpt-4o_response": "SELECT \n    c.FirstName, \n    c.LastName, \n    SUM(lp.Amount) AS OverdueAmount, \n    SUM(d.Amount) AS AvailableDepositAmount\nFROM \n    Customers c\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID\nJOIN \n    LoanPayments lp ON l.LoanID = lp.LoanID\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID\nWHERE \n    lp.Status = 'Ошибка' \n    AND d.Status = 'Активен'\nGROUP BY \n    c.CustomerID, c.FirstName, c.LastName\nHAVING \n    SUM(d.Amount) >= SUM(lp.Amount)\nORDER BY \n    OverdueAmount DESC;",
            "gpt-4o_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    SUM(lp.Amount) AS OverdueAmount, \n    SUM(d.Amount) AS AvailableDepositAmount\nFROM \n    Customers c\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID\nJOIN \n    LoanPayments lp ON l.LoanID = lp.LoanID\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID\nWHERE \n    lp.Status = 'Ошибка' \n    AND d.Status = 'Активен'\nGROUP BY \n    c.CustomerID, c.FirstName, c.LastName\nHAVING \n    SUM(d.Amount) >= SUM(lp.Amount)\nORDER BY \n    OverdueAmount DESC;"
        },
        {
            "question": "Найти топ-5 отделений банка по количеству активных кредитных карт, выданных их клиентам. Показать название отделения, количество карт и средний кредитный лимит по картам.",
            "sql_query": "SELECT b.BranchName, COUNT(cc.CardID) as CardCount, AVG(cc.CreditLimit) as AverageCreditLimit FROM Branches b JOIN Customers c ON b.BranchID = c.BranchID JOIN CreditCards cc ON c.CustomerID = cc.CustomerID WHERE cc.Status = 'Активна' GROUP BY b.BranchID, b.BranchName ORDER BY CardCount DESC LIMIT 5;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    b.BranchName,\n    COUNT(cc.CardID) AS NumberOfActiveCards,\n    AVG(cc.CreditLimit) AS AverageCreditLimit\nFROM\n    Branches b\nJOIN\n    Customers c ON b.BranchID = c.BranchID\nJOIN\n    CreditCards cc ON c.CustomerID = cc.CustomerID\nWHERE\n    cc.Status = 'Активна'\nGROUP BY\n    b.BranchName\nORDER BY\n    NumberOfActiveCards DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    b.BranchName,\n    COUNT(cc.CardID) AS TotalActiveCreditCards,\n    AVG(cc.CreditLimit) AS AverageCreditLimit\nFROM\n    Branches b\nJOIN\n    Customers c ON b.BranchID = c.BranchID\nJOIN\n    CreditCards cc ON c.CustomerID = cc.CustomerID\nWHERE\n    cc.Status = 'Активна'\nGROUP BY\n    b.BranchName\nORDER BY\n    TotalActiveCreditCards DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT b.BranchName, COUNT(cc.CardID) AS ActiveCreditCards, AVG(cc.CreditLimit) AS AverageCreditLimit\nFROM Branches b\nJOIN Customers c ON b.BranchID = c.BranchID\nJOIN CreditCards cc ON c.CustomerID = cc.CustomerID\nWHERE cc.Status = 'Активна'\nGROUP BY b.BranchName\nORDER BY ActiveCreditCards DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    b.BranchName, \n    COUNT(cc.CardID) AS TotalActiveCreditCards, \n    AVG(cc.CreditLimit) AS AverageCreditLimit\nFROM \n    Branches b\nJOIN \n    Customers c ON b.BranchID = c.BranchID\nJOIN \n    CreditCards cc ON c.CustomerID = cc.CustomerID\nWHERE \n    cc.Status = 'Активна'\nGROUP BY \n    b.BranchName\nORDER BY \n    TotalActiveCreditCards DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT b.BranchName, COUNT(cc.CardID) AS ActiveCreditCards, AVG(cc.CreditLimit) AS AverageCreditLimit\nFROM Branches b\nJOIN Customers c ON b.BranchID = c.BranchID\nJOIN CreditCards cc ON c.CustomerID = cc.CustomerID\nWHERE cc.Status = 'Активна'\nGROUP BY b.BranchName\nORDER BY ActiveCreditCards DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT b.BranchName, COUNT(cc.CardID) AS ActiveCreditCards, AVG(cc.CreditLimit) AS AverageCreditLimit\nFROM Branches b\nJOIN Customers c ON b.BranchID = c.BranchID\nJOIN CreditCards cc ON c.CustomerID = cc.CustomerID\nWHERE cc.Status = 'Активна'\nGROUP BY b.BranchName\nORDER BY ActiveCreditCards DESC\nLIMIT 5;",
            "gigachat_response": "SELECT \n    b.BranchName,\n    COUNT(cc.CardID) AS NumberOfActiveCards,\n    AVG(cc.CreditLimit) AS AverageCreditLimit\nFROM \n    Branches b\nJOIN \n    Customers c ON b.BranchID = c.BranchID\nJOIN \n    CreditCards cc ON c.CustomerID = cc.CustomerID\nWHERE \n    cc.Status = 'Активна'\nGROUP BY \n    b.BranchName\nORDER BY \n    NumberOfActiveCards DESC\nLIMIT 5;",
            "gigachat_response_ru": "SELECT \n    b.BranchName,\n    COUNT(cc.CardID) AS NumberOfActiveCards,\n    AVG(cc.CreditLimit) AS AverageCreditLimit\nFROM \n    Branches b\nJOIN \n    Customers c ON b.BranchID = c.BranchID\nJOIN \n    CreditCards cc ON c.CustomerID = cc.CustomerID\nWHERE \n    cc.Status = 'Активна'\nGROUP BY \n    b.BranchName\nORDER BY \n    NumberOfActiveCards DESC\nLIMIT 5;",
            "gpt-4o_response": "SELECT b.BranchName, COUNT(cc.CardID) AS ActiveCreditCards, AVG(cc.CreditLimit) AS AverageCreditLimit\nFROM Branches b\nJOIN Customers c ON b.BranchID = c.BranchID\nJOIN CreditCards cc ON c.CustomerID = cc.CustomerID\nWHERE cc.Status = 'Активна'\nGROUP BY b.BranchName\nORDER BY ActiveCreditCards DESC\nLIMIT 5;",
            "gpt-4o_response_ru": "SELECT \n    b.BranchName, \n    COUNT(cc.CardID) AS ActiveCreditCardsCount, \n    AVG(cc.CreditLimit) AS AverageCreditLimit\nFROM \n    Branches b\nJOIN \n    Customers c ON b.BranchID = c.BranchID\nJOIN \n    CreditCards cc ON c.CustomerID = cc.CustomerID\nWHERE \n    cc.Status = 'Активна'\nGROUP BY \n    b.BranchName\nORDER BY \n    ActiveCreditCardsCount DESC\nLIMIT 5;"
        },
        {
            "question": "Вывести список клиентов, у которых есть активные депозиты в разных валютах (более одной валюты). Показать имя клиента, валюты депозитов и суммы по каждой валюте, используя GROUP_CONCAT(CONCAT(Currency, ': ', TotalAmount) SEPARATOR ', '). Результат отсортировать по количеству валют по убыванию, затем по сумме депозитов по убыванию.",
            "sql_query": "WITH CustomerCurrencies AS (SELECT c.CustomerID, c.FirstName, c.LastName, a.Currency, SUM(d.Amount) as TotalAmount, COUNT(DISTINCT a.Currency) as CurrencyCount FROM Customers c JOIN Deposits d ON c.CustomerID = d.CustomerID JOIN Accounts a ON c.CustomerID = a.CustomerID AND a.AccountType = 'Депозит' WHERE d.Status = 'Активен' AND a.Status = 'Active' GROUP BY c.CustomerID, c.FirstName, c.LastName, a.Currency HAVING COUNT(DISTINCT a.Currency) > 1) SELECT FirstName, LastName, GROUP_CONCAT(CONCAT(Currency, ': ', TotalAmount) SEPARATOR ', ') as DepositsByCurrency, CurrencyCount, SUM(TotalAmount) as TotalDepositAmount FROM CustomerCurrencies GROUP BY CustomerID, FirstName, LastName, CurrencyCount ORDER BY CurrencyCount DESC, TotalDepositAmount DESC;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    c.FirstName,\n    c.LastName,\n    GROUP_CONCAT(CONCAT(d.Currency, ': ', TotalAmount) SEPARATOR ', ') AS CurrencyAmounts,\n    COUNT(DISTINCT d.Currency) AS NumberOfCurrencies,\n    SUM(TotalAmount) AS TotalDepositAmount\nFROM Customers c\nJOIN (\n    SELECT\n        CustomerID,\n        Currency,\n        SUM(Amount) AS TotalAmount\n    FROM Deposits\n    WHERE Status = 'Активен'\n    GROUP BY CustomerID, Currency\n) AS d ON c.CustomerID = d.CustomerID\nGROUP BY c.CustomerID, c.FirstName, c.LastName\nHAVING COUNT(DISTINCT d.Currency) > 1\nORDER BY NumberOfCurrencies DESC, TotalDepositAmount DESC;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    c.FirstName,\n    c.LastName,\n    GROUP_CONCAT(CONCAT(d.Currency, ': ', TotalAmount) SEPARATOR ', ') AS CurrencyAmounts,\n    COUNT(DISTINCT d.Currency) AS NumberOfCurrencies,\n    SUM(d.Amount) AS TotalDepositAmount\nFROM\n    Customers c\nJOIN\n    Deposits d ON c.CustomerID = d.CustomerID\nWHERE\n    d.Status = 'Активен'\nGROUP BY\n    c.CustomerID, c.FirstName, c.LastName\nHAVING\n    COUNT(DISTINCT d.Currency) > 1\nORDER BY\n    NumberOfCurrencies DESC, TotalDepositAmount DESC;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    c.FirstName, \n    c.LastName, \n    GROUP_CONCAT(CONCAT(d.Currency, ': ', SUM(d.Amount)) SEPARATOR ', ') AS DepositCurrenciesAndAmounts,\n    COUNT(DISTINCT d.Currency) AS NumberOfCurrencies,\n    SUM(d.Amount) AS TotalDepositAmount\nFROM \n    Customers c\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID\nWHERE \n    d.Status = 'Активен'\nGROUP BY \n    c.CustomerID, c.FirstName, c.LastName\nHAVING \n    COUNT(DISTINCT d.Currency) > 1\nORDER BY \n    NumberOfCurrencies DESC, \n    TotalDepositAmount DESC;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    GROUP_CONCAT(CONCAT(d.Currency, ': ', SUM(d.Amount)) SEPARATOR ', ') AS DepositCurrencies,\n    COUNT(DISTINCT d.Currency) AS NumCurrencies,\n    SUM(d.Amount) AS TotalDepositAmount\nFROM \n    Customers c\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID\nWHERE \n    d.Status = 'Активен'\nGROUP BY \n    c.CustomerID, c.FirstName, c.LastName\nHAVING \n    COUNT(DISTINCT d.Currency) > 1\nORDER BY \n    NumCurrencies DESC, TotalDepositAmount DESC;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    c.FirstName,\n    c.LastName,\n    COUNT(DISTINCT d.Currency) AS CurrencyCount,\n    GROUP_CONCAT(CONCAT(d.Currency, ': ', SUM(d.Amount)) SEPARATOR ', ') AS CurrencyAmounts,\n    SUM(d.Amount) AS TotalDepositAmount\nFROM \n    Customers c\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID\nWHERE \n    d.Status = 'Активен'\nGROUP BY \n    c.CustomerID, c.FirstName, c.LastName\nHAVING \n    COUNT(DISTINCT d.Currency) > 1\nORDER BY \n    CurrencyCount DESC, TotalDepositAmount DESC;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    c.FirstName,\n    c.LastName,\n    GROUP_CONCAT(CONCAT(d.Currency, ': ', SUM(d.Amount)) SEPARATOR ', ') AS DepositInfo,\n    COUNT(DISTINCT d.Currency) AS CurrencyCount,\n    SUM(d.Amount) AS TotalDepositAmount\nFROM \n    Customers c\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID\nWHERE \n    d.Status = 'Активен'\nGROUP BY \n    c.CustomerID, c.FirstName, c.LastName\nHAVING \n    COUNT(DISTINCT d.Currency) > 1\nORDER BY \n    CurrencyCount DESC,\n    TotalDepositAmount DESC;",
            "gigachat_response": "SELECT \n    CONCAT(c.FirstName, ' ', c.LastName) AS ClientName,\n    GROUP_CONCAT(DISTINCT CONCAT(dp.Currency, ': ', dp.TotalAmount) SEPARATOR ', ') AS CurrenciesAndAmounts,\n    COUNT(DISTINCT dp.Currency) AS NumCurrencies,\n    SUM(dp.TotalAmount) AS TotalDepositAmount\nFROM \n    Customers c\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID\nJOIN \n(\n    SELECT \n        DepositID, \n        Currency, \n        SUM(Amount) AS TotalAmount\n    FROM \n        DepositTransactions dt\n    WHERE \n        dt.TransactionType <> 'Снятие'\n    GROUP BY \n        DepositID, Currency\n) dp ON d.DepositID = dp.DepositID\nWHERE \n    d.Status = 'Активен'\nGROUP BY \n    c.CustomerID\nHAVING \n    COUNT(DISTINCT dp.Currency) > 1\nORDER BY \n    NumCurrencies DESC, \n    TotalDepositAmount DESC;",
            "gigachat_response_ru": "SELECT \n    CONCAT(c.FirstName, ' ', c.LastName) AS ClientName,\n    GROUP_CONCAT(DISTINCT CONCAT(d.Currency, ': ', FORMAT(SUM(d.Amount), 2)) SEPARATOR ', ') AS CurrenciesAndTotals,\n    COUNT(DISTINCT d.Currency) AS NumCurrencies,\n    SUM(d.Amount) AS TotalDepositAmount\nFROM \n    Customers c\nINNER JOIN \n    Deposits d ON c.CustomerID = d.CustomerID\nWHERE \n    d.Status = 'Активен'\nGROUP BY \n    c.CustomerID\nHAVING \n    COUNT(DISTINCT d.Currency) > 1\nORDER BY \n    NumCurrencies DESC, \n    TotalDepositAmount DESC;",
            "gpt-4o_response": "SELECT \n    c.FirstName, \n    c.LastName, \n    GROUP_CONCAT(CONCAT(d.Currency, ': ', SUM(d.Amount)) SEPARATOR ', ') AS CurrencyAmounts,\n    COUNT(DISTINCT d.Currency) AS CurrencyCount\nFROM \n    Customers c\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID\nWHERE \n    d.Status = 'Активен'\nGROUP BY \n    c.CustomerID, c.FirstName, c.LastName\nHAVING \n    COUNT(DISTINCT d.Currency) > 1\nORDER BY \n    CurrencyCount DESC, \n    SUM(d.Amount) DESC;",
            "gpt-4o_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    GROUP_CONCAT(CONCAT(d.Currency, ': ', SUM(d.Amount)) SEPARATOR ', ') AS CurrencyAmounts\nFROM \n    Customers c\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID\nWHERE \n    d.Status = 'Активен'\nGROUP BY \n    c.CustomerID, c.FirstName, c.LastName\nHAVING \n    COUNT(DISTINCT d.Currency) > 1\nORDER BY \n    COUNT(DISTINCT d.Currency) DESC, \n    SUM(d.Amount) DESC;"
        },
        {
            "question": "Найти клиентов, у которых в течение последних 6 месяцев были транзакции по счетам на сумму более 500000 рублей, и при этом есть активные страховые полисы. Показать имя клиента, общую сумму транзакций, тип страхового полиса и сумму покрытия. Результат отсортировать по сумме транзакций по убыванию.",
            "sql_query": "SELECT c.FirstName, c.LastName, SUM(t.Amount) as TotalTransactions, ip.PolicyType, ip.CoverageAmount FROM Customers c JOIN Accounts a ON c.CustomerID = a.CustomerID JOIN Transactions t ON a.AccountID = t.AccountID JOIN InsurancePolicies ip ON c.CustomerID = ip.CustomerID WHERE t.TransactionDate >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH) AND t.Status = 'Завершено' AND ip.Status = 'Активен' GROUP BY c.CustomerID, c.FirstName, c.LastName, ip.PolicyType, ip.CoverageAmount HAVING SUM(t.Amount) > 500000 ORDER BY TotalTransactions DESC;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    c.FirstName,\n    c.LastName,\n    SUM(t.Amount) AS TotalTransactionAmount,\n    ip.PolicyType,\n    ip.CoverageAmount\nFROM\n    Customers c\nJOIN\n    Accounts a ON c.CustomerID = a.CustomerID\nJOIN\n    Transactions t ON a.AccountID = t.AccountID\nJOIN\n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nWHERE\n    t.TransactionDate >= DATE('now', '-6 months')\n    AND ip.Status = 'Активен'\nGROUP BY\n    c.CustomerID,\n    c.FirstName,\n    c.LastName,\n    ip.PolicyType,\n    ip.CoverageAmount\nHAVING\n    SUM(t.Amount) > 500000\nORDER BY\n    TotalTransactionAmount DESC;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    c.FirstName,\n    c.LastName,\n    SUM(t.Amount) AS TotalTransactionAmount,\n    ip.PolicyType,\n    ip.CoverageAmount\nFROM\n    Customers c\nJOIN\n    Accounts a ON c.CustomerID = a.CustomerID\nJOIN\n    Transactions t ON a.AccountID = t.AccountID\nJOIN\n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nWHERE\n    t.TransactionDate >= DATE('now', '-6 months')\n    AND ip.Status = 'Активен'\nGROUP BY\n    c.CustomerID,\n    c.FirstName,\n    c.LastName,\n    ip.PolicyType,\n    ip.CoverageAmount\nHAVING\n    SUM(t.Amount) > 500000\nORDER BY\n    TotalTransactionAmount DESC;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    c.FirstName, \n    c.LastName, \n    SUM(t.Amount) AS TotalTransactionAmount, \n    ip.PolicyType, \n    ip.CoverageAmount\nFROM \n    Customers c\nJOIN \n    Accounts a ON c.CustomerID = a.CustomerID\nJOIN \n    Transactions t ON a.AccountID = t.AccountID\nJOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nWHERE \n    t.TransactionDate >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH) \n    AND t.Amount > 500000 \n    AND ip.Status = 'Активен'\nGROUP BY \n    c.FirstName, \n    c.LastName, \n    ip.PolicyType, \n    ip.CoverageAmount\nORDER BY \n    TotalTransactionAmount DESC;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    SUM(t.Amount) AS TotalTransactionAmount, \n    ip.PolicyType, \n    ip.CoverageAmount\nFROM \n    Customers c\nJOIN \n    Accounts a ON c.CustomerID = a.CustomerID\nJOIN \n    Transactions t ON a.AccountID = t.AccountID\nJOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nWHERE \n    t.TransactionDate >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH) \n    AND t.Amount > 500000 \n    AND ip.Status = 'Активен'\nGROUP BY \n    c.FirstName, \n    c.LastName, \n    ip.PolicyType, \n    ip.CoverageAmount\nORDER BY \n    TotalTransactionAmount DESC;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    c.FirstName || ' ' || c.LastName AS CustomerName,\n    SUM(t.Amount) AS TotalTransactionAmount,\n    ip.PolicyType,\n    ip.CoverageAmount\nFROM \n    Customers c\nJOIN \n    Accounts a ON c.CustomerID = a.CustomerID\nJOIN \n    Transactions t ON a.AccountID = t.AccountID\nJOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nWHERE \n    t.TransactionDate >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH)\n    AND t.Currency = 'RUB'\n    AND t.Status = 'Завершено'\n    AND ip.Status = 'Активен'\nGROUP BY \n    c.CustomerID, c.FirstName, c.LastName, ip.PolicyType, ip.CoverageAmount\nHAVING \n    SUM(t.Amount) > 500000\nORDER BY \n    TotalTransactionAmount DESC;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    c.FirstName,\n    c.LastName,\n    SUM(t.Amount) AS TotalTransactionAmount,\n    ip.PolicyType,\n    ip.CoverageAmount\nFROM \n    Customers c\nJOIN \n    Accounts a ON c.CustomerID = a.CustomerID\nJOIN \n    Transactions t ON a.AccountID = t.AccountID\nJOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nWHERE \n    t.TransactionDate >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH)\n    AND t.Status = 'Завершено'\n    AND a.Currency = 'RUB'\n    AND ip.Status = 'Активен'\nGROUP BY \n    c.CustomerID, c.FirstName, c.LastName, ip.PolicyType, ip.CoverageAmount\nHAVING \n    SUM(t.Amount) > 500000\nORDER BY \n    TotalTransactionAmount DESC;",
            "gigachat_response": "SELECT \n    c.FirstName || ' ' || c.LastName AS FullName,\n    SUM(t.Amount) AS TotalTransactionsSum,\n    ip.PolicyType,\n    ip.CoverageAmount\nFROM \n    Customers c\nJOIN \n    Accounts acc ON c.CustomerID = acc.CustomerID\nJOIN \n    Transactions t ON acc.AccountID = t.AccountID\nJOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nWHERE \n    t.TransactionDate >= DATE('now', '-6 months')\n    AND t.Status = 'Завершено'\n    AND ip.Status = 'Активен'\nGROUP BY \n    c.CustomerID, ip.PolicyType, ip.CoverageAmount\nHAVING \n    SUM(t.Amount) > 500000\nORDER BY \n    TotalTransactionsSum DESC;",
            "gigachat_response_ru": "SELECT \n    c.FirstName || ' ' || c.LastName AS FullName,\n    SUM(t.Amount) AS TotalTransactionsSum,\n    ip.PolicyType,\n    ip.CoverageAmount\nFROM \n    Customers c\nINNER JOIN \n    Accounts acc ON c.CustomerID = acc.CustomerID\nINNER JOIN \n    Transactions t ON acc.AccountID = t.AccountID\nLEFT JOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID AND ip.Status = 'Активен'\nWHERE \n    t.TransactionDate >= DATEADD(MONTH, -6, GETDATE()) -- последние 6 месяцев\n    AND t.Amount > 500000\nGROUP BY \n    c.FirstName, c.LastName, ip.PolicyType, ip.CoverageAmount\nHAVING \n    COUNT(DISTINCT CASE WHEN t.Amount > 500000 THEN t.TransactionID ELSE NULL END) > 0\nORDER BY \n    TotalTransactionsSum DESC;",
            "gpt-4o_response": "SELECT \n    c.FirstName, \n    c.LastName, \n    SUM(t.Amount) AS TotalTransactionAmount, \n    ip.PolicyType, \n    ip.CoverageAmount\nFROM \n    Customers c\nJOIN \n    Accounts a ON c.CustomerID = a.CustomerID\nJOIN \n    Transactions t ON a.AccountID = t.AccountID\nJOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nWHERE \n    t.TransactionDate >= DATEADD(MONTH, -6, CURRENT_DATE) \n    AND t.Status = 'Завершено'\n    AND ip.Status = 'Активен'\nGROUP BY \n    c.FirstName, \n    c.LastName, \n    ip.PolicyType, \n    ip.CoverageAmount\nHAVING \n    SUM(t.Amount) > 500000\nORDER BY \n    TotalTransactionAmount DESC;",
            "gpt-4o_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    SUM(t.Amount) AS TotalTransactionAmount, \n    ip.PolicyType, \n    ip.CoverageAmount\nFROM \n    Customers c\nJOIN \n    Accounts a ON c.CustomerID = a.CustomerID\nJOIN \n    Transactions t ON a.AccountID = t.AccountID\nJOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nWHERE \n    t.TransactionDate >= DATEADD(MONTH, -6, CURRENT_DATE) \n    AND t.Status = 'Завершено'\n    AND t.Currency = 'RUB'\n    AND ip.Status = 'Активен'\nGROUP BY \n    c.CustomerID, c.FirstName, c.LastName, ip.PolicyType, ip.CoverageAmount\nHAVING \n    SUM(t.Amount) > 500000\nORDER BY \n    TotalTransactionAmount DESC;"
        },
        {
            "question": "Вывести статистику по банкоматам: для каждого отделения показать количество активных банкоматов, общую сумму доступных средств и среднюю сумму на один банкомат. Показать только отделения, где есть хотя бы один активный банкомат. Результат отсортировать по общей сумме доступных средств по убыванию.",
            "sql_query": "SELECT b.BranchName, COUNT(a.ATMID) as ActiveATMCount, SUM(a.CashAvailable) as TotalCashAvailable, AVG(a.CashAvailable) as AverageCashPerATM FROM Branches b JOIN ATMs a ON b.BranchID = a.BranchID WHERE a.Status = 'Active' GROUP BY b.BranchID, b.BranchName HAVING COUNT(a.ATMID) > 0 ORDER BY TotalCashAvailable DESC;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    b.BranchName,\n    COUNT(a.ATMID) AS ActiveATMs,\n    SUM(a.CashAvailable) AS TotalCashAvailable,\n    AVG(a.CashAvailable) AS AverageCashPerATM\nFROM\n    Branches b\nJOIN\n    ATMs a ON b.BranchID = a.BranchID\nWHERE\n    a.Status = 'Active'\nGROUP BY\n    b.BranchName\nHAVING\n    COUNT(a.ATMID) > 0\nORDER BY\n    TotalCashAvailable DESC;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    b.BranchName,\n    COUNT(a.ATMID) AS ActiveATMs,\n    SUM(a.CashAvailable) AS TotalCashAvailable,\n    AVG(a.CashAvailable) AS AverageCashPerATM\nFROM\n    Branches b\nJOIN\n    ATMs a ON b.BranchID = a.BranchID\nWHERE\n    a.Status = 'Active'\nGROUP BY\n    b.BranchName\nHAVING\n    COUNT(a.ATMID) > 0\nORDER BY\n    TotalCashAvailable DESC;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    b.BranchName, \n    COUNT(a.ATMID) AS ActiveATMs,\n    SUM(a.CashAvailable) AS TotalCashAvailable,\n    AVG(a.CashAvailable) AS AverageCashPerATM\nFROM \n    Branches b\nJOIN \n    ATMs a ON b.BranchID = a.BranchID\nWHERE \n    a.Status = 'Active'\nGROUP BY \n    b.BranchName\nHAVING \n    COUNT(a.ATMID) > 0\nORDER BY \n    TotalCashAvailable DESC;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    b.BranchName, \n    COUNT(a.ATMID) AS ActiveATMs, \n    SUM(a.CashAvailable) AS TotalCashAvailable, \n    AVG(a.CashAvailable) AS AverageCashPerATM\nFROM \n    ATMs a\nJOIN \n    Branches b ON a.BranchID = b.BranchID\nWHERE \n    a.Status = 'Active'\nGROUP BY \n    b.BranchName\nHAVING \n    COUNT(a.ATMID) > 0\nORDER BY \n    TotalCashAvailable DESC;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    b.BranchName,\n    COUNT(a.ATMID) AS ActiveATMsCount,\n    SUM(a.CashAvailable) AS TotalCashAvailable,\n    AVG(a.CashAvailable) AS AverageCashPerATM\nFROM \n    Branches b\nJOIN \n    ATMs a ON b.BranchID = a.BranchID\nWHERE \n    a.Status = 'Active'\nGROUP BY \n    b.BranchName\nHAVING \n    COUNT(a.ATMID) > 0\nORDER BY \n    TotalCashAvailable DESC;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    b.BranchName,\n    COUNT(a.ATMID) AS ActiveATMsCount,\n    SUM(a.CashAvailable) AS TotalCashAvailable,\n    AVG(a.CashAvailable) AS AverageCashPerATM\nFROM \n    Branches b\nJOIN \n    ATMs a ON b.BranchID = a.BranchID\nWHERE \n    a.Status = 'Active'\nGROUP BY \n    b.BranchName\nHAVING \n    COUNT(a.ATMID) > 0\nORDER BY \n    TotalCashAvailable DESC;",
            "gigachat_response": "SELECT \n    b.BranchName,\n    COUNT(a.ATMID) AS ActiveATMsCount,\n    SUM(a.CashAvailable) AS TotalCashAvailable,\n    AVG(a.CashAvailable) AS AverageCashPerATM\nFROM \n    Branches b\nJOIN \n    ATMs a ON b.BranchID = a.BranchID\nWHERE \n    a.Status = 'Active'\nGROUP BY \n    b.BranchName\nORDER BY \n    TotalCashAvailable DESC;",
            "gigachat_response_ru": "SELECT \n    b.BranchName,\n    COUNT(a.ATMID) AS ActiveATMsCount,\n    SUM(a.CashAvailable) AS TotalCashAvailable,\n    AVG(a.CashAvailable) AS AverageCashPerATM\nFROM \n    Branches b\nINNER JOIN \n    ATMs a ON b.BranchID = a.BranchID\nWHERE \n    a.Status = 'Active'\nGROUP BY \n    b.BranchName\nORDER BY \n    TotalCashAvailable DESC;",
            "gpt-4o_response": "SELECT \n    b.BranchName, \n    COUNT(a.ATMID) AS ActiveATMs, \n    SUM(a.CashAvailable) AS TotalCashAvailable, \n    AVG(a.CashAvailable) AS AverageCashPerATM\nFROM \n    Branches b\nJOIN \n    ATMs a ON b.BranchID = a.BranchID\nWHERE \n    a.Status = 'Active'\nGROUP BY \n    b.BranchName\nHAVING \n    COUNT(a.ATMID) > 0\nORDER BY \n    TotalCashAvailable DESC;",
            "gpt-4o_response_ru": "SELECT \n    b.BranchName,\n    COUNT(a.ATMID) AS ActiveATMs,\n    SUM(a.CashAvailable) AS TotalCashAvailable,\n    AVG(a.CashAvailable) AS AverageCashPerATM\nFROM \n    Branches b\nJOIN \n    ATMs a ON b.BranchID = a.BranchID\nWHERE \n    a.Status = 'Active'\nGROUP BY \n    b.BranchName\nHAVING \n    COUNT(a.ATMID) > 0\nORDER BY \n    TotalCashAvailable DESC;"
        },
        {
            "question": "Найти клиентов, у которых есть активные кредиты с процентной ставкой выше 5%, и при этом есть активные депозиты с процентной ставкой ниже 4%. Результат отсортировать по разнице между процентными ставками по убыванию.",
            "sql_query": "SELECT c.FirstName, c.LastName, l.PrincipalAmount as LoanAmount, l.InterestRate as LoanInterestRate, d.Amount as DepositAmount, d.InterestRate as DepositInterestRate, (l.InterestRate - d.InterestRate) as InterestRateDifference FROM Customers c JOIN Loans l ON c.CustomerID = l.CustomerID JOIN Deposits d ON c.CustomerID = d.CustomerID WHERE l.Status = 'Активно' AND d.Status = 'Активен' AND l.InterestRate > 5 AND d.InterestRate < 4 ORDER BY InterestRateDifference DESC;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    c.FirstName,\n    c.LastName,\n    l.InterestRate AS LoanInterestRate,\n    d.InterestRate AS DepositInterestRate,\n    (l.InterestRate - d.InterestRate) AS InterestRateDifference\nFROM\n    Customers c\nJOIN\n    Loans l ON c.CustomerID = l.CustomerID\nJOIN\n    Deposits d ON c.CustomerID = d.CustomerID\nWHERE\n    l.Status = 'Активно' AND l.InterestRate > 5\n    AND d.Status = 'Активен' AND d.InterestRate < 4\nORDER BY\n    InterestRateDifference DESC;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    c.FirstName,\n    c.LastName,\n    l.InterestRate AS LoanInterestRate,\n    d.InterestRate AS DepositInterestRate,\n    (l.InterestRate - d.InterestRate) AS InterestRateDifference\nFROM\n    Customers c\nJOIN\n    Loans l ON c.CustomerID = l.CustomerID\nJOIN\n    Deposits d ON c.CustomerID = d.CustomerID\nWHERE\n    l.Status = 'Активно' AND l.InterestRate > 5\n    AND d.Status = 'Активен' AND d.InterestRate < 4\nORDER BY\n    InterestRateDifference DESC;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    c.FirstName, \n    c.LastName, \n    l.InterestRate AS LoanInterestRate, \n    d.InterestRate AS DepositInterestRate, \n    (l.InterestRate - d.InterestRate) AS InterestRateDifference\nFROM \n    Customers c\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно' AND l.InterestRate > 5\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен' AND d.InterestRate < 4\nORDER BY \n    InterestRateDifference DESC;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    l.InterestRate AS LoanInterestRate, \n    d.InterestRate AS DepositInterestRate, \n    (l.InterestRate - d.InterestRate) AS InterestRateDifference\nFROM \n    Customers c\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно' AND l.InterestRate > 5\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен' AND d.InterestRate < 4\nORDER BY \n    InterestRateDifference DESC;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    c.CustomerID,\n    c.FirstName,\n    c.LastName,\n    l.LoanID,\n    l.InterestRate AS LoanInterestRate,\n    d.DepositID,\n    d.InterestRate AS DepositInterestRate,\n    (l.InterestRate - d.InterestRate) AS InterestRateDifference\nFROM \n    Customers c\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно' AND l.InterestRate > 5\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен' AND d.InterestRate < 4\nORDER BY \n    InterestRateDifference DESC;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    l.LoanType, \n    l.InterestRate AS LoanInterestRate, \n    d.DepositType, \n    d.InterestRate AS DepositInterestRate, \n    (l.InterestRate - d.InterestRate) AS RateDifference\nFROM \n    Customers c\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно' AND l.InterestRate > 5\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен' AND d.InterestRate < 4\nORDER BY \n    RateDifference DESC;",
            "gigachat_response": "SELECT \n    c.FirstName,\n    c.LastName,\n    l.InterestRate AS LoanInterestRate,\n    d.InterestRate AS DepositInterestRate,\n    (l.InterestRate - d.InterestRate) AS RateDifference\nFROM \n    Customers c\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно' AND l.InterestRate > 5\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен' AND d.InterestRate < 4\nORDER BY \n    RateDifference DESC;",
            "gigachat_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    l.InterestRate AS LoanInterestRate, \n    d.InterestRate AS DepositInterestRate, \n    (l.InterestRate - d.InterestRate) AS RateDifference\nFROM \n    Customers c\nINNER JOIN \n    Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно' AND l.InterestRate > 5\nINNER JOIN \n    Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен' AND d.InterestRate < 4\nORDER BY \n    RateDifference DESC;",
            "gpt-4o_response": "SELECT \n    c.FirstName, \n    c.LastName, \n    l.InterestRate AS LoanInterestRate, \n    d.InterestRate AS DepositInterestRate, \n    (l.InterestRate - d.InterestRate) AS InterestRateDifference\nFROM \n    Customers c\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID\nWHERE \n    l.Status = 'Активно' \n    AND l.InterestRate > 5 \n    AND d.Status = 'Активен' \n    AND d.InterestRate < 4\nORDER BY \n    InterestRateDifference DESC;",
            "gpt-4o_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    l.InterestRate AS LoanInterestRate, \n    d.InterestRate AS DepositInterestRate, \n    (l.InterestRate - d.InterestRate) AS InterestRateDifference\nFROM \n    Customers c\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID\nWHERE \n    l.Status = 'Активно' \n    AND l.InterestRate > 5 \n    AND d.Status = 'Активен' \n    AND d.InterestRate < 4\nORDER BY \n    InterestRateDifference DESC;"
        },
        {
            "question": "Вывести список сотрудников, которые работают в отделениях с более чем 2 активными банкоматами, и показать их должность, дату приема на работу и зарплату. Результат отсортировать по дате приема на работу по возрастанию.",
            "sql_query": "SELECT e.FirstName, e.LastName, e.Position, e.HireDate, e.Salary FROM Employees e JOIN (SELECT BranchID, COUNT(*) as ATMCount FROM ATMs WHERE Status = 'Active' GROUP BY BranchID HAVING COUNT(*) > 2) as ActiveATMs ON e.BranchID = ActiveATMs.BranchID ORDER BY e.HireDate ASC;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    e.FirstName,\n    e.LastName,\n    e.Position,\n    e.HireDate,\n    e.Salary\nFROM\n    Employees e\nJOIN\n    Branches b ON e.BranchID = b.BranchID\nWHERE\n    b.BranchID IN (\n        SELECT\n            BranchID\n        FROM\n            ATMs\n        WHERE\n            Status = 'Active'\n        GROUP BY\n            BranchID\n        HAVING\n            COUNT(*) > 2\n    )\nORDER BY\n    e.HireDate ASC;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    e.FirstName,\n    e.LastName,\n    e.Position,\n    e.HireDate,\n    e.Salary\nFROM\n    Employees e\nJOIN\n    Branches b ON e.BranchID = b.BranchID\nWHERE\n    b.BranchID IN (\n        SELECT\n            BranchID\n        FROM\n            ATMs\n        WHERE\n            Status = 'Active'\n        GROUP BY\n            BranchID\n        HAVING\n            COUNT(*) > 2\n    )\nORDER BY\n    e.HireDate ASC;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT e.FirstName, e.LastName, e.Position, e.HireDate, e.Salary \nFROM Employees e \nJOIN Branches b ON e.BranchID = b.BranchID \nWHERE b.BranchID IN (\n    SELECT a.BranchID \n    FROM ATMs a \n    WHERE a.Status = 'Active' \n    GROUP BY a.BranchID \n    HAVING COUNT(a.ATMID) > 2\n) \nORDER BY e.HireDate ASC;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    e.FirstName, \n    e.LastName, \n    e.Position, \n    e.HireDate, \n    e.Salary\nFROM \n    Employees e\nJOIN \n    Branches b ON e.BranchID = b.BranchID\nWHERE \n    b.BranchID IN (\n        SELECT \n            a.BranchID\n        FROM \n            ATMs a\n        WHERE \n            a.Status = 'Active'\n        GROUP BY \n            a.BranchID\n        HAVING \n            COUNT(a.ATMID) > 2\n    )\nORDER BY \n    e.HireDate ASC;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT e.FirstName, e.LastName, e.Position, e.HireDate, e.Salary \nFROM Employees e\nJOIN Branches b ON e.BranchID = b.BranchID\nWHERE b.BranchID IN (\n    SELECT BranchID \n    FROM ATMs \n    WHERE Status = 'Active' \n    GROUP BY BranchID \n    HAVING COUNT(ATMID) > 2\n)\nORDER BY e.HireDate ASC;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT e.FirstName, e.LastName, e.Position, e.HireDate, e.Salary\nFROM Employees e\nJOIN Branches b ON e.BranchID = b.BranchID\nWHERE b.BranchID IN (\n    SELECT BranchID\n    FROM ATMs\n    WHERE Status = 'Active'\n    GROUP BY BranchID\n    HAVING COUNT(ATMID) > 2\n)\nORDER BY e.HireDate ASC;",
            "gigachat_response": "SELECT \n    e.FirstName, \n    e.LastName, \n    e.Position, \n    e.HireDate, \n    e.Salary\nFROM \n    Employees e\nJOIN \n    Branches b ON e.BranchID = b.BranchID\nWHERE \n    b.BranchID IN (\n        SELECT \n            BranchID \n        FROM \n            ATMs \n        WHERE \n            Status = 'Active'\n        GROUP BY \n            BranchID\n        HAVING \n            COUNT(ATMID) > 2\n    )\nORDER BY \n    e.HireDate ASC;",
            "gigachat_response_ru": "SELECT \n    e.FirstName, \n    e.LastName, \n    e.Position, \n    e.HireDate, \n    e.Salary\nFROM \n    Employees e\nINNER JOIN \n    Branches b ON e.BranchID = b.BranchID\nWHERE \n    b.BranchID IN (\n        SELECT \n            BranchID \n        FROM \n            ATMs \n        WHERE \n            Status = 'Active'\n        GROUP BY \n            BranchID\n        HAVING \n            COUNT(ATMID) > 2\n    )\nORDER BY \n    e.HireDate ASC;",
            "gpt-4o_response": "SELECT e.FirstName, e.LastName, e.Position, e.HireDate, e.Salary\nFROM Employees e\nJOIN Branches b ON e.BranchID = b.BranchID\nJOIN (\n    SELECT BranchID\n    FROM ATMs\n    WHERE Status = 'Active'\n    GROUP BY BranchID\n    HAVING COUNT(ATMID) > 2\n) active_branches ON b.BranchID = active_branches.BranchID\nORDER BY e.HireDate ASC;",
            "gpt-4o_response_ru": "SELECT e.FirstName, e.LastName, e.Position, e.HireDate, e.Salary\nFROM Employees e\nJOIN Branches b ON e.BranchID = b.BranchID\nJOIN (\n    SELECT BranchID\n    FROM ATMs\n    WHERE Status = 'Active'\n    GROUP BY BranchID\n    HAVING COUNT(ATMID) > 2\n) active_branches ON b.BranchID = active_branches.BranchID\nORDER BY e.HireDate ASC;"
        },
        {
            "question": "Найти клиентов, у которых есть активные кредитные карты с просроченным сроком действия, но при этом есть активные счета. Показать имя клиента, номер карты, дату истечения срока действия и баланс активного счета. Результат отсортировать по дате истечения срока действия по возрастанию.",
            "sql_query": "SELECT c.FirstName, c.LastName, cc.CardNumber, cc.ExpiryDate, a.Balance FROM Customers c JOIN CreditCards cc ON c.CustomerID = cc.CustomerID JOIN Accounts a ON c.CustomerID = a.CustomerID WHERE cc.ExpiryDate < CURRENT_DATE AND cc.Status = 'Активна' AND a.Status = 'Active' ORDER BY cc.ExpiryDate ASC;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    c.FirstName,\n    c.LastName,\n    cc.CardNumber,\n    cc.ExpiryDate,\n    a.Balance\nFROM\n    Customers c\nJOIN\n    CreditCards cc ON c.CustomerID = cc.CustomerID\nJOIN\n    Accounts a ON c.CustomerID = a.CustomerID\nWHERE\n    cc.ExpiryDate < CURRENT_DATE\n    AND cc.Status = 'Активна'\n    AND a.Status = 'Active'\nORDER BY\n    cc.ExpiryDate ASC;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    c.FirstName,\n    c.LastName,\n    cc.CardNumber,\n    cc.ExpiryDate,\n    a.Balance\nFROM\n    Customers c\nJOIN\n    CreditCards cc ON c.CustomerID = cc.CustomerID\nJOIN\n    Accounts a ON c.CustomerID = a.CustomerID\nWHERE\n    cc.ExpiryDate < DATE('now')\n    AND cc.Status = 'Активна'\n    AND a.Status = 'Active'\nORDER BY\n    cc.ExpiryDate ASC;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    c.FirstName, \n    c.LastName, \n    cc.CardNumber, \n    cc.ExpiryDate, \n    a.Balance\nFROM \n    Customers c\nJOIN \n    CreditCards cc ON c.CustomerID = cc.CustomerID\nJOIN \n    Accounts a ON c.CustomerID = a.CustomerID\nWHERE \n    cc.Status = 'Просрочена' \n    AND cc.ExpiryDate < CURRENT_DATE \n    AND a.Status = 'Active'\nORDER BY \n    cc.ExpiryDate ASC;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    cc.CardNumber, \n    cc.ExpiryDate, \n    a.Balance\nFROM \n    Customers c\nJOIN \n    CreditCards cc ON c.CustomerID = cc.CustomerID\nJOIN \n    Accounts a ON c.CustomerID = a.CustomerID\nWHERE \n    cc.Status = 'Просрочена' \n    AND cc.ExpiryDate < CURRENT_DATE \n    AND a.Status = 'Active'\nORDER BY \n    cc.ExpiryDate ASC;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT c.FirstName, c.LastName, cc.CardNumber, cc.ExpiryDate, a.Balance\nFROM Customers c\nJOIN CreditCards cc ON c.CustomerID = cc.CustomerID\nJOIN Accounts a ON c.CustomerID = a.CustomerID\nWHERE cc.Status = 'Активна' \nAND cc.ExpiryDate < CURRENT_DATE\nAND a.Status = 'Active'\nORDER BY cc.ExpiryDate ASC;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    c.FirstName || ' ' || c.LastName AS CustomerName,\n    cc.CardNumber,\n    cc.ExpiryDate,\n    a.Balance\nFROM \n    Customers c\nJOIN \n    CreditCards cc ON c.CustomerID = cc.CustomerID\nJOIN \n    Accounts a ON c.CustomerID = a.CustomerID\nWHERE \n    cc.Status = 'Активна' \n    AND cc.ExpiryDate < CURRENT_DATE\n    AND a.Status = 'Active'\nORDER BY \n    cc.ExpiryDate ASC;",
            "gigachat_response": "SELECT \n    c.FirstName || ' ' || c.LastName AS FullName,\n    cc.CardNumber,\n    cc.ExpiryDate,\n    a.Balance\nFROM \n    Customers c\nJOIN \n    CreditCards cc ON c.CustomerID = cc.CustomerID\nJOIN \n    Accounts a ON c.CustomerID = a.CustomerID\nWHERE \n    cc.Status = 'Активна' \n    AND cc.ExpiryDate < CURRENT_DATE \n    AND a.Status = 'Active'\nORDER BY \n    cc.ExpiryDate ASC;",
            "gigachat_response_ru": "SELECT \n    c.FirstName || ' ' || c.MiddleName || ' ' || c.LastName AS FullName,\n    cc.CardNumber,\n    cc.ExpiryDate,\n    a.Balance\nFROM \n    Customers c\nINNER JOIN \n    CreditCards cc ON c.CustomerID = cc.CustomerID\nINNER JOIN \n    Accounts a ON c.CustomerID = a.CustomerID\nWHERE \n    cc.Status = 'Активна'\nAND \n    cc.ExpiryDate < CURRENT_DATE\nAND \n    a.Status = 'Active'\nORDER BY \n    cc.ExpiryDate ASC;",
            "gpt-4o_response": "SELECT \n    c.FirstName, \n    c.LastName, \n    cc.CardNumber, \n    cc.ExpiryDate, \n    a.Balance \nFROM \n    Customers c \nJOIN \n    CreditCards cc ON c.CustomerID = cc.CustomerID \nJOIN \n    Accounts a ON c.CustomerID = a.CustomerID \nWHERE \n    cc.Status = 'Активна' \n    AND cc.ExpiryDate < CURRENT_DATE \n    AND a.Status = 'Active' \nORDER BY \n    cc.ExpiryDate ASC;",
            "gpt-4o_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    cc.CardNumber, \n    cc.ExpiryDate, \n    a.Balance\nFROM \n    Customers c\nJOIN \n    CreditCards cc ON c.CustomerID = cc.CustomerID\nJOIN \n    Accounts a ON c.CustomerID = a.CustomerID\nWHERE \n    cc.Status = 'Активна' \n    AND cc.ExpiryDate < CURRENT_DATE\n    AND a.Status = 'Active'\nORDER BY \n    cc.ExpiryDate ASC;"
        },
        {
            "question": "Вывести статистику по услугам банка: для каждой активной услуги показать количество подключенных клиентов, среднюю стоимость услуги и общую сумму полученных комиссий. Результат отсортировать по количеству подключенных клиентов по убыванию.",
            "sql_query": "SELECT s.ServiceName, COUNT(cs.CustomerServiceID) as CustomerCount, s.Fee as AverageFee, (s.Fee * COUNT(cs.CustomerServiceID)) as TotalFees FROM Services s LEFT JOIN CustomerServices cs ON s.ServiceID = cs.ServiceID WHERE s.Status = 'Активен' AND cs.Status = 'активен' GROUP BY s.ServiceID, s.ServiceName, s.Fee ORDER BY CustomerCount DESC;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    s.ServiceName,\n    COUNT(cs.CustomerID) AS NumberOfCustomers,\n    AVG(s.Fee) AS AverageFee,\n    SUM(s.Fee) AS TotalFees\nFROM\n    Services s\nJOIN\n    CustomerServices cs ON s.ServiceID = cs.ServiceID\nWHERE\n    s.Status = 'Активен'\nGROUP BY\n    s.ServiceName\nORDER BY\n    NumberOfCustomers DESC;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    s.ServiceName,\n    COUNT(cs.CustomerID) AS NumberOfCustomers,\n    AVG(s.Fee) AS AverageFee,\n    SUM(s.Fee) AS TotalRevenue\nFROM\n    Services s\nJOIN\n    CustomerServices cs ON s.ServiceID = cs.ServiceID\nWHERE\n    s.Status = 'Активен'\nGROUP BY\n    s.ServiceName\nORDER BY\n    NumberOfCustomers DESC;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    s.ServiceName, \n    COUNT(cs.CustomerID) AS TotalCustomers, \n    AVG(s.Fee) AS AverageFee, \n    SUM(s.Fee) AS TotalCommission\nFROM \n    Services s\nJOIN \n    CustomerServices cs ON s.ServiceID = cs.ServiceID\nWHERE \n    s.Status = 'Активен' AND cs.Status = 'активен'\nGROUP BY \n    s.ServiceName\nORDER BY \n    TotalCustomers DESC;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    s.ServiceName, \n    COUNT(cs.CustomerID) AS ConnectedCustomers, \n    AVG(s.Fee) AS AverageFee, \n    SUM(s.Fee * COUNT(cs.CustomerID)) AS TotalCommission\nFROM \n    Services s\nJOIN \n    CustomerServices cs ON s.ServiceID = cs.ServiceID\nWHERE \n    s.Status = 'Активен' AND cs.Status = 'активен'\nGROUP BY \n    s.ServiceName\nORDER BY \n    ConnectedCustomers DESC;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    s.ServiceName,\n    COUNT(cs.CustomerID) AS ConnectedCustomers,\n    AVG(s.Fee) AS AverageFee,\n    SUM(s.Fee) AS TotalFees\nFROM \n    Services s\nJOIN \n    CustomerServices cs ON s.ServiceID = cs.ServiceID\nWHERE \n    s.Status = 'Активен' AND cs.Status = 'активен'\nGROUP BY \n    s.ServiceName\nORDER BY \n    ConnectedCustomers DESC;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    s.ServiceName,\n    COUNT(cs.CustomerServiceID) AS CustomerCount,\n    AVG(s.Fee) AS AverageFee,\n    SUM(s.Fee) AS TotalFees\nFROM \n    Services s\nJOIN \n    CustomerServices cs ON s.ServiceID = cs.ServiceID\nWHERE \n    s.Status = 'Активен' AND cs.Status = 'активен'\nGROUP BY \n    s.ServiceName\nORDER BY \n    CustomerCount DESC;",
            "gigachat_response": "SELECT s.ServiceName, \n       COUNT(cs.CustomerServiceID) AS SubscribedClientsCount, \n       AVG(s.Fee) AS AverageFee, \n       SUM(s.Fee) AS TotalCommission\nFROM Services s\nJOIN CustomerServices cs ON s.ServiceID = cs.ServiceID\nWHERE s.Status = 'Активен'\nGROUP BY s.ServiceName\nORDER BY SubscribedClientsCount DESC;",
            "gigachat_response_ru": "SELECT s.ServiceName, \n       COUNT(cs.CustomerServiceID) AS SubscribedClientsCount, \n       AVG(s.Fee) AS AverageFee, \n       SUM(s.Fee) AS TotalCommission\nFROM Services s\nJOIN CustomerServices cs ON s.ServiceID = cs.ServiceID\nWHERE s.Status = 'Активен'\nGROUP BY s.ServiceName\nORDER BY SubscribedClientsCount DESC;",
            "gpt-4o_response": "SELECT \n    s.ServiceName, \n    COUNT(cs.CustomerID) AS ConnectedCustomers, \n    AVG(s.Fee) AS AverageServiceFee, \n    SUM(s.Fee) AS TotalFeesCollected\nFROM \n    Services s\nJOIN \n    CustomerServices cs ON s.ServiceID = cs.ServiceID\nWHERE \n    s.Status = 'Активен' AND cs.Status = 'активен'\nGROUP BY \n    s.ServiceName\nORDER BY \n    ConnectedCustomers DESC;",
            "gpt-4o_response_ru": "SELECT \n    s.ServiceName,\n    COUNT(cs.CustomerID) AS ConnectedCustomers,\n    AVG(s.Fee) AS AverageServiceFee,\n    SUM(s.Fee) AS TotalFeesCollected\nFROM \n    Services s\nJOIN \n    CustomerServices cs ON s.ServiceID = cs.ServiceID\nWHERE \n    s.Status = 'Активен'\n    AND cs.Status = 'активен'\nGROUP BY \n    s.ServiceName\nORDER BY \n    ConnectedCustomers DESC;"
        },
        {
            "question": "Найти клиентов, у которых есть активные страховые полисы с суммой покрытия более 1000000 рублей, и при этом есть активные кредиты. Показать имя клиента, тип страхового полиса, сумму покрытия, тип кредита и сумму кредита. Результат отсортировать по сумме покрытия по убыванию.",
            "sql_query": "SELECT c.FirstName, c.LastName, ip.PolicyType, ip.CoverageAmount, l.LoanType, l.PrincipalAmount FROM Customers c JOIN InsurancePolicies ip ON c.CustomerID = ip.CustomerID JOIN Loans l ON c.CustomerID = l.CustomerID WHERE ip.Status = 'Активен' AND l.Status = 'Активно' AND ip.CoverageAmount > 1000000 ORDER BY ip.CoverageAmount DESC;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    c.FirstName,\n    c.LastName,\n    ip.PolicyType,\n    ip.CoverageAmount,\n    l.LoanType,\n    l.PrincipalAmount\nFROM\n    Customers c\nJOIN\n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nJOIN\n    Loans l ON c.CustomerID = l.CustomerID\nWHERE\n    ip.Status = 'Активен'\n    AND ip.CoverageAmount > 1000000\n    AND l.Status = 'Активно'\nORDER BY\n    ip.CoverageAmount DESC;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    c.FirstName,\n    c.LastName,\n    ip.PolicyType,\n    ip.CoverageAmount,\n    l.LoanType,\n    l.PrincipalAmount\nFROM\n    Customers c\nJOIN\n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nJOIN\n    Loans l ON c.CustomerID = l.CustomerID\nWHERE\n    ip.Status = 'Активен'\n    AND ip.CoverageAmount > 1000000\n    AND l.Status = 'Активно'\nORDER BY\n    ip.CoverageAmount DESC;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    c.FirstName, \n    c.LastName, \n    ip.PolicyType, \n    ip.CoverageAmount, \n    l.LoanType, \n    l.PrincipalAmount\nFROM \n    Customers c\nJOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID AND ip.Status = 'Активен' AND ip.CoverageAmount > 1000000\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\nORDER BY \n    ip.CoverageAmount DESC;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    ip.PolicyType, \n    ip.CoverageAmount, \n    l.LoanType, \n    l.PrincipalAmount\nFROM \n    Customers c\nJOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID\nWHERE \n    ip.Status = 'Активен' \n    AND ip.CoverageAmount > 1000000 \n    AND l.Status = 'Активно'\nORDER BY \n    ip.CoverageAmount DESC;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT c.FirstName, c.LastName, ip.PolicyType, ip.CoverageAmount, l.LoanType, l.PrincipalAmount\nFROM Customers c\nJOIN InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nJOIN Loans l ON c.CustomerID = l.CustomerID\nWHERE ip.Status = 'Активен' AND ip.CoverageAmount > 1000000 AND l.Status = 'Активно'\nORDER BY ip.CoverageAmount DESC;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    ip.PolicyType, \n    ip.CoverageAmount, \n    l.LoanType, \n    l.PrincipalAmount\nFROM \n    Customers c\nJOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID\nWHERE \n    ip.Status = 'Активен' \n    AND ip.CoverageAmount > 1000000\n    AND l.Status = 'Активно'\nORDER BY \n    ip.CoverageAmount DESC;",
            "gigachat_response": "SELECT \n    c.FirstName, \n    c.LastName, \n    ip.PolicyType, \n    ip.CoverageAmount, \n    l.LoanType, \n    l.PrincipalAmount\nFROM \n    Customers c\nJOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID AND ip.Status = 'Активен' AND ip.CoverageAmount > 1000000\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\nORDER BY \n    ip.CoverageAmount DESC;",
            "gigachat_response_ru": "SELECT \n    c.FirstName || ' ' || c.LastName AS FullName,\n    ip.PolicyType,\n    ip.CoverageAmount,\n    l.LoanType,\n    l.PrincipalAmount\nFROM \n    Customers c\nINNER JOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nINNER JOIN \n    Loans l ON c.CustomerID = l.CustomerID\nWHERE \n    ip.Status = 'Активен'\nAND \n    ip.CoverageAmount > 1000000\nAND \n    l.Status = 'Активно'\nORDER BY \n    ip.CoverageAmount DESC;",
            "gpt-4o_response": "SELECT \n    c.FirstName, \n    c.LastName, \n    ip.PolicyType, \n    ip.CoverageAmount, \n    l.LoanType, \n    l.PrincipalAmount\nFROM \n    Customers c\nJOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID\nWHERE \n    ip.Status = 'Активен' \n    AND ip.CoverageAmount > 1000000 \n    AND l.Status = 'Активно'\nORDER BY \n    ip.CoverageAmount DESC;",
            "gpt-4o_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    ip.PolicyType, \n    ip.CoverageAmount, \n    l.LoanType, \n    l.PrincipalAmount\nFROM \n    Customers c\nJOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID\nWHERE \n    ip.Status = 'Активен' \n    AND ip.CoverageAmount > 1000000 \n    AND l.Status = 'Активно'\nORDER BY \n    ip.CoverageAmount DESC;"
        },
        {
            "question": "Вывести список клиентов, у которых есть активные депозиты с процентной ставкой выше средней по всем депозитам, и при этом есть активные кредиты с процентной ставкой ниже средней по всем кредитам. Показать имя клиента, тип депозита, процентную ставку по депозиту, тип кредита и процентную ставку по кредиту. Результат отсортировать по разнице между процентными ставками по убыванию.",
            "sql_query": "WITH AvgRates AS (SELECT AVG(InterestRate) as AvgDepositRate FROM Deposits WHERE Status = 'Активен'), AvgLoanRates AS (SELECT AVG(InterestRate) as AvgLoanRate FROM Loans WHERE Status = 'Активно') SELECT c.FirstName, c.LastName, d.DepositType, d.InterestRate as DepositRate, l.LoanType, l.InterestRate as LoanRate, (d.InterestRate - l.InterestRate) as RateDifference FROM Customers c JOIN Deposits d ON c.CustomerID = d.CustomerID JOIN Loans l ON c.CustomerID = l.CustomerID CROSS JOIN AvgRates CROSS JOIN AvgLoanRates WHERE d.Status = 'Активен' AND l.Status = 'Активно' AND d.InterestRate > AvgRates.AvgDepositRate AND l.InterestRate < AvgLoanRates.AvgLoanRate ORDER BY RateDifference DESC;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    c.FirstName,\n    c.LastName,\n    d.DepositType,\n    d.InterestRate AS DepositInterestRate,\n    l.LoanType,\n    l.InterestRate AS LoanInterestRate\nFROM\n    Customers c\nJOIN\n    Deposits d ON c.CustomerID = d.CustomerID\nJOIN\n    Loans l ON c.CustomerID = l.CustomerID\nWHERE\n    d.Status = 'Активен'\n    AND d.InterestRate > (SELECT AVG(InterestRate) FROM Deposits)\n    AND l.Status = 'Активно'\n    AND l.InterestRate < (SELECT AVG(InterestRate) FROM Loans)\nORDER BY\n    ABS(d.InterestRate - l.InterestRate) DESC;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    c.FirstName,\n    c.LastName,\n    d.DepositType,\n    d.InterestRate AS DepositInterestRate,\n    l.LoanType,\n    l.InterestRate AS LoanInterestRate\nFROM\n    Customers c\nJOIN\n    Deposits d ON c.CustomerID = d.CustomerID\nJOIN\n    Loans l ON c.CustomerID = l.CustomerID\nWHERE\n    d.Status = 'Активен'\n    AND l.Status = 'Активно'\n    AND d.InterestRate > (SELECT AVG(InterestRate) FROM Deposits)\n    AND l.InterestRate < (SELECT AVG(InterestRate) FROM Loans)\nORDER BY\n    ABS(d.InterestRate - l.InterestRate) DESC;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH AverageDepositRate AS (\n  SELECT AVG(InterestRate) AS AverageRate\n  FROM Deposits\n),\nAverageLoanRate AS (\n  SELECT AVG(InterestRate) AS AverageRate\n  FROM Loans\n),\nEligibleDeposits AS (\n  SELECT d.CustomerID, d.DepositType, d.InterestRate\n  FROM Deposits d\n  WHERE d.Status = 'Активен' AND d.InterestRate > (SELECT AverageRate FROM AverageDepositRate)\n),\nEligibleLoans AS (\n  SELECT l.CustomerID, l.LoanType, l.InterestRate\n  FROM Loans l\n  WHERE l.Status = 'Активно' AND l.InterestRate < (SELECT AverageRate FROM AverageLoanRate)\n)\nSELECT \n  c.FirstName, \n  c.LastName, \n  ed.DepositType, \n  ed.InterestRate AS DepositInterestRate, \n  el.LoanType, \n  el.InterestRate AS LoanInterestRate,\n  (ed.InterestRate - el.InterestRate) AS InterestRateDifference\nFROM EligibleDeposits ed\nJOIN EligibleLoans el ON ed.CustomerID = el.CustomerID\nJOIN Customers c ON ed.CustomerID = c.CustomerID\nORDER BY InterestRateDifference DESC;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH AverageDepositRate AS (\n    SELECT AVG(InterestRate) as AverageRate\n    FROM Deposits\n),\nAverageLoanRate AS (\n    SELECT AVG(InterestRate) as AverageRate\n    FROM Loans\n),\nEligibleCustomers AS (\n    SELECT c.CustomerID, c.FirstName, c.LastName\n    FROM Customers c\n    JOIN Deposits d ON c.CustomerID = d.CustomerID\n    JOIN Loans l ON c.CustomerID = l.CustomerID\n    WHERE d.Status = 'Активен' AND l.Status = 'Активно'\n    AND d.InterestRate > (SELECT AverageRate FROM AverageDepositRate)\n    AND l.InterestRate < (SELECT AverageRate FROM AverageLoanRate)\n)\nSELECT ec.FirstName, ec.LastName, d.DepositType, d.InterestRate as DepositRate, l.LoanType, l.InterestRate as LoanRate, (d.InterestRate - l.InterestRate) as RateDifference\nFROM EligibleCustomers ec\nJOIN Deposits d ON ec.CustomerID = d.CustomerID\nJOIN Loans l ON ec.CustomerID = l.CustomerID\nWHERE d.Status = 'Активен' AND l.Status = 'Активно'\nORDER BY RateDifference DESC;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH AvgDepositRates AS (\n    SELECT AVG(InterestRate) AS AvgDepositRate \n    FROM Deposits \n    WHERE Status = 'Активен'\n),\nAvgLoanRates AS (\n    SELECT AVG(InterestRate) AS AvgLoanRate \n    FROM Loans \n    WHERE Status = 'Активно'\n)\nSELECT \n    c.FirstName || ' ' || c.LastName AS CustomerName,\n    d.DepositType,\n    d.InterestRate AS DepositInterestRate,\n    l.LoanType,\n    l.InterestRate AS LoanInterestRate,\n    (d.InterestRate - l.InterestRate) AS RateDifference\nFROM \n    Customers c\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\nCROSS JOIN \n    AvgDepositRates\nCROSS JOIN \n    AvgLoanRates\nWHERE \n    d.InterestRate > AvgDepositRates.AvgDepositRate\n    AND l.InterestRate < AvgLoanRates.AvgLoanRate\nORDER BY \n    RateDifference DESC;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    c.FirstName || ' ' || c.LastName AS CustomerName,\n    d.DepositType,\n    d.InterestRate AS DepositInterestRate,\n    l.LoanType,\n    l.InterestRate AS LoanInterestRate,\n    (d.InterestRate - l.InterestRate) AS RateDifference\nFROM \n    Customers c\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\nWHERE \n    d.InterestRate > (SELECT AVG(InterestRate) FROM Deposits WHERE Status = 'Активен')\n    AND l.InterestRate < (SELECT AVG(InterestRate) FROM Loans WHERE Status = 'Активно')\nORDER BY \n    RateDifference DESC;",
            "gigachat_response": "WITH DepositStats AS (\n    SELECT AVG(InterestRate) AS avg_deposit_rate\n    FROM Deposits\n), LoanStats AS (\n    SELECT AVG(InterestRate) AS avg_loan_rate\n    FROM Loans\n), EligibleClients AS (\n    SELECT \n        c.CustomerID,\n        c.FirstName || ' ' || c.MiddleName || ' ' || c.LastName AS FullName,\n        d.DepositType,\n        d.InterestRate AS DepositInterestRate,\n        l.LoanType,\n        l.InterestRate AS LoanInterestRate\n    FROM Customers c\n    INNER JOIN Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\n    INNER JOIN Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\n)\nSELECT \n    FullName,\n    DepositType,\n    DepositInterestRate,\n    LoanType,\n    LoanInterestRate,\n    ABS(DepositInterestRate - LoanInterestRate) AS RateDifference\nFROM EligibleClients ec\nCROSS JOIN DepositStats ds\nCROSS JOIN LoanStats ls\nWHERE ec.DepositInterestRate > ds.avg_deposit_rate\nAND ec.LoanInterestRate < ls.avg_loan_rate\nORDER BY RateDifference DESC;",
            "gigachat_response_ru": "WITH DepositStats AS (\n    SELECT AVG(InterestRate) AS avg_deposit_rate\n    FROM Deposits\n), LoanStats AS (\n    SELECT AVG(InterestRate) AS avg_loan_rate\n    FROM Loans\n)\nSELECT \n    c.FirstName || ' ' || c.LastName AS FullName,\n    d.DepositType,\n    d.InterestRate AS DepositInterestRate,\n    l.LoanType,\n    l.InterestRate AS LoanInterestRate\nFROM \n    Customers c\nINNER JOIN Deposits d ON c.CustomerID = d.CustomerID\nINNER JOIN Loans l ON c.CustomerID = l.CustomerID\nCROSS JOIN DepositStats ds\nCROSS JOIN LoanStats ls\nWHERE \n    d.Status = 'Активен'\nAND d.InterestRate > ds.avg_deposit_rate\nAND l.Status = 'Активно'\nAND l.InterestRate < ls.avg_loan_rate\nORDER BY ABS(d.InterestRate - l.InterestRate) DESC;",
            "gpt-4o_response": "SELECT \n    c.FirstName, \n    c.LastName, \n    d.DepositType, \n    d.InterestRate AS DepositInterestRate, \n    l.LoanType, \n    l.InterestRate AS LoanInterestRate,\n    (d.InterestRate - l.InterestRate) AS InterestRateDifference\nFROM \n    Customers c\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID\nWHERE \n    d.Status = 'Активен' \n    AND l.Status = 'Активно'\n    AND d.InterestRate > (SELECT AVG(InterestRate) FROM Deposits)\n    AND l.InterestRate < (SELECT AVG(InterestRate) FROM Loans)\nORDER BY \n    InterestRateDifference DESC;",
            "gpt-4o_response_ru": "WITH AvgRates AS (\n    SELECT \n        (SELECT AVG(InterestRate) FROM Deposits WHERE Status = 'Активен') AS AvgDepositRate,\n        (SELECT AVG(InterestRate) FROM Loans WHERE Status = 'Активно') AS AvgLoanRate\n),\nEligibleCustomers AS (\n    SELECT \n        c.CustomerID,\n        c.FirstName,\n        c.LastName,\n        d.DepositType,\n        d.InterestRate AS DepositInterestRate,\n        l.LoanType,\n        l.InterestRate AS LoanInterestRate,\n        (d.InterestRate - l.InterestRate) AS RateDifference\n    FROM \n        Customers c\n    JOIN \n        Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\n    JOIN \n        Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\n    CROSS JOIN \n        AvgRates ar\n    WHERE \n        d.InterestRate > ar.AvgDepositRate\n        AND l.InterestRate < ar.AvgLoanRate\n)\nSELECT \n    FirstName,\n    LastName,\n    DepositType,\n    DepositInterestRate,\n    LoanType,\n    LoanInterestRate\nFROM \n    EligibleCustomers\nORDER BY \n    RateDifference DESC;"
        },
        {
            "question": "Найти отделения банка, где средняя сумма активных кредитов превышает среднюю сумму активных депозитов более чем в 2 раза, и при этом есть хотя бы 3 активных банкомата. Показать название отделения, среднюю сумму кредитов, среднюю сумму депозитов, количество банкоматов и отношение средних сумм. Результат отсортировать по отношению средних сумм по убыванию.",
            "sql_query": "WITH BranchStats AS (SELECT b.BranchID, b.BranchName, AVG(l.PrincipalAmount) as AvgLoanAmount, AVG(d.Amount) as AvgDepositAmount, COUNT(DISTINCT a.ATMID) as ATMCount FROM Branches b LEFT JOIN Customers c ON b.BranchID = c.BranchID LEFT JOIN Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно' LEFT JOIN Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен' LEFT JOIN ATMs a ON b.BranchID = a.BranchID AND a.Status = 'Active' GROUP BY b.BranchID, b.BranchName HAVING COUNT(DISTINCT a.ATMID) >= 3) SELECT BranchName, AvgLoanAmount, AvgDepositAmount, ATMCount, (AvgLoanAmount / AvgDepositAmount) as LoanToDepositRatio FROM BranchStats WHERE AvgLoanAmount > (AvgDepositAmount * 2) ORDER BY LoanToDepositRatio DESC;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    b.BranchName,\n    AvgLoans,\n    AvgDeposits,\n    AtmCount,\n    AvgLoans / AvgDeposits AS Ratio\nFROM\n    Branches b\nJOIN\n    (SELECT\n        br.BranchID,\n        COUNT(atm.ATMID) AS AtmCount\n    FROM\n        Branches br\n    JOIN\n        ATMs atm ON br.BranchID = atm.BranchID\n    WHERE\n        atm.Status = 'Active'\n    GROUP BY\n        br.BranchID\n    HAVING\n        COUNT(atm.ATMID) >= 3) AS ActiveATMs ON b.BranchID = ActiveATMs.BranchID\nJOIN\n    (SELECT\n        c.BranchID,\n        AVG(LoanAmount) AS AvgLoans\n    FROM\n        Customers c\n    JOIN\n        (SELECT\n            l.CustomerID,\n            SUM(l.PrincipalAmount) AS LoanAmount\n        FROM\n            Loans l\n        WHERE\n            l.Status = 'Активно'\n        GROUP BY\n            l.CustomerID) AS ActiveLoans ON c.CustomerID = ActiveLoans.CustomerID\n    GROUP BY\n        c.BranchID) AS AvgActiveLoans ON b.BranchID = AvgActiveLoans.BranchID\nJOIN\n    (SELECT\n        c.BranchID,\n        AVG(DepositAmount) AS AvgDeposits\n    FROM\n        Customers c\n    JOIN\n        (SELECT\n            d.CustomerID,\n            SUM(d.Amount) AS DepositAmount\n        FROM\n            Deposits d\n        WHERE\n            d.Status = 'Активен'\n        GROUP BY\n            d.CustomerID) AS ActiveDeposits ON c.CustomerID = ActiveDeposits.CustomerID\n    GROUP BY\n        c.BranchID) AS AvgActiveDeposits ON b.BranchID = AvgActiveDeposits.BranchID\nWHERE\n    AvgLoans / AvgDeposits > 2\nORDER BY\n    Ratio DESC;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    b.BranchName,\n    AvgLoans,\n    AvgDeposits,\n    AtmCount,\n    AvgLoans / AvgDeposits AS Ratio\nFROM\n    Branches b\nJOIN\n    (\n        SELECT\n            BranchID,\n            AVG(PrincipalAmount) AS AvgLoans\n        FROM\n            Loans\n        WHERE\n            Status = 'Активно'\n        GROUP BY\n            BranchID\n    ) AS LoansAvg ON b.BranchID = LoansAvg.BranchID\nJOIN\n    (\n        SELECT\n            BranchID,\n            AVG(Amount) AS AvgDeposits\n        FROM\n            Deposits\n        WHERE\n            Status = 'Активен'\n        GROUP BY\n            BranchID\n    ) AS DepositsAvg ON b.BranchID = DepositsAvg.BranchID\nJOIN\n    (\n        SELECT\n            BranchID,\n            COUNT(*) AS AtmCount\n        FROM\n            ATMs\n        WHERE\n            Status = 'Active'\n        GROUP BY\n            BranchID\n        HAVING\n            COUNT(*) >= 3\n    ) AS ATMsCount ON b.BranchID = ATMsCount.BranchID\nWHERE\n    AvgLoans / AvgDeposits > 2\nORDER BY\n    Ratio DESC;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH ActiveLoans AS (\n    SELECT l.BranchID, AVG(l.PrincipalAmount) as AverageLoanAmount\n    FROM Loans l\n    WHERE l.Status = 'Активно'\n    GROUP BY l.BranchID\n),\nActiveDeposits AS (\n    SELECT d.BranchID, AVG(d.Amount) as AverageDepositAmount\n    FROM Deposits d\n    WHERE d.Status = 'Активен'\n    GROUP BY d.BranchID\n),\nActiveATMs AS (\n    SELECT a.BranchID, COUNT(a.ATMID) as ActiveATMCount\n    FROM ATMs a\n    WHERE a.Status = 'Active'\n    GROUP BY a.BranchID\n)\nSELECT \n    b.BranchName,\n    al.AverageLoanAmount,\n    ad.AverageDepositAmount,\n    aat.ActiveATMCount,\n    al.AverageLoanAmount / ad.AverageDepositAmount as LoanToDepositRatio\nFROM \n    Branches b\nJOIN \n    ActiveLoans al ON b.BranchID = al.BranchID\nJOIN \n    ActiveDeposits ad ON b.BranchID = ad.BranchID\nJOIN \n    ActiveATMs aat ON b.BranchID = aat.BranchID\nWHERE \n    al.AverageLoanAmount > ad.AverageDepositAmount * 2\n    AND aat.ActiveATMCount >= 3\nORDER BY \n    LoanToDepositRatio DESC;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH ActiveLoans AS (\n  SELECT b.BranchID, SUM(l.PrincipalAmount) as TotalLoans\n  FROM Branches b\n  JOIN Customers c ON b.BranchID = c.BranchID\n  JOIN Loans l ON c.CustomerID = l.CustomerID\n  WHERE l.Status = 'Активно'\n  GROUP BY b.BranchID\n),\nActiveDeposits AS (\n  SELECT b.BranchID, SUM(d.Amount) as TotalDeposits\n  FROM Branches b\n  JOIN Customers c ON b.BranchID = c.BranchID\n  JOIN Deposits d ON c.CustomerID = d.CustomerID\n  WHERE d.Status = 'Активен'\n  GROUP BY b.BranchID\n),\nATMCount AS (\n  SELECT b.BranchID, COUNT(a.ATMID) as ATMCount\n  FROM Branches b\n  JOIN ATMs a ON b.BranchID = a.BranchID\n  WHERE a.Status = 'Active'\n  GROUP BY b.BranchID\n)\nSELECT \n  b.BranchName, \n  al.TotalLoans / COUNT(DISTINCT al.BranchID) as AvgLoans, \n  ad.TotalDeposits / COUNT(DISTINCT ad.BranchID) as AvgDeposits, \n  ac.ATMCount, \n  (al.TotalLoans / COUNT(DISTINCT al.BranchID)) / (ad.TotalDeposits / COUNT(DISTINCT ad.BranchID)) as Ratio\nFROM Branches b\nJOIN ActiveLoans al ON b.BranchID = al.BranchID\nJOIN ActiveDeposits ad ON b.BranchID = ad.BranchID\nJOIN ATMCount ac ON b.BranchID = ac.BranchID\nWHERE (al.TotalLoans / COUNT(DISTINCT al.BranchID)) / (ad.TotalDeposits / COUNT(DISTINCT ad.BranchID)) > 2\nAND ac.ATMCount >= 3\nGROUP BY b.BranchName, al.TotalLoans, ad.TotalDeposits, ac.ATMCount\nORDER BY Ratio DESC;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    b.BranchName,\n    AVG(l.PrincipalAmount) AS AvgLoanAmount,\n    AVG(d.Amount) AS AvgDepositAmount,\n    COUNT(DISTINCT a.ATMID) AS ATMsCount,\n    AVG(l.PrincipalAmount) / AVG(d.Amount) AS LoanToDepositRatio\nFROM \n    Branches b\nJOIN \n    Customers c ON b.BranchID = c.BranchID\nLEFT JOIN \n    Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\nLEFT JOIN \n    Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\nJOIN \n    ATMs a ON b.BranchID = a.BranchID AND a.Status = 'Active'\nGROUP BY \n    b.BranchName\nHAVING \n    AVG(l.PrincipalAmount) / AVG(d.Amount) > 2 \n    AND COUNT(DISTINCT a.ATMID) >= 3\nORDER BY \n    LoanToDepositRatio DESC;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    b.BranchName,\n    AVG(l.PrincipalAmount) AS AvgLoanAmount,\n    AVG(d.Amount) AS AvgDepositAmount,\n    COUNT(DISTINCT a.ATMID) AS ATMsCount,\n    (AVG(l.PrincipalAmount) / AVG(d.Amount)) AS LoanToDepositRatio\nFROM \n    Branches b\nJOIN \n    Customers c ON b.BranchID = c.BranchID\nLEFT JOIN \n    Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\nLEFT JOIN \n    Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\nLEFT JOIN \n    ATMs a ON b.BranchID = a.BranchID AND a.Status = 'Active'\nGROUP BY \n    b.BranchName\nHAVING \n    (AVG(l.PrincipalAmount) / AVG(d.Amount)) > 2 \n    AND COUNT(DISTINCT a.ATMID) >= 3\nORDER BY \n    LoanToDepositRatio DESC;",
            "gigachat_response": "WITH ActiveCredits AS (\n    SELECT \n        b.BranchID,\n        AVG(l.PrincipalAmount) AS AverageLoanAmount\n    FROM \n        Branches b\n    INNER JOIN \n        Loans l ON b.BranchID = l.BranchID\n    WHERE \n        l.Status = 'Активно'\n    GROUP BY \n        b.BranchID\n), \nActiveDeposits AS (\n    SELECT \n        b.BranchID,\n        AVG(d.Amount) AS AverageDepositAmount\n    FROM \n        Branches b\n    INNER JOIN \n        Deposits d ON b.BranchID = d.BranchID\n    WHERE \n        d.Status = 'Активен'\n    GROUP BY \n        b.BranchID\n), \nActiveATMs AS (\n    SELECT \n        BranchID,\n        COUNT(ATMID) AS ATMCount\n    FROM \n        ATMs\n    WHERE \n        Status = 'Active'\n    GROUP BY \n        BranchID\n)\nSELECT \n    b.BranchName,\n    ac.AverageLoanAmount,\n    ad.AverageDepositAmount,\n    aa.ATMCount,\n    ROUND(ac.AverageLoanAmount / ad.AverageDepositAmount, 2) AS Ratio\nFROM \n    Branches b\nINNER JOIN \n    ActiveCredits ac ON b.BranchID = ac.BranchID\nINNER JOIN \n    ActiveDeposits ad ON b.BranchID = ad.BranchID\nINNER JOIN \n    ActiveATMs aa ON b.BranchID = aa.BranchID\nWHERE \n    ac.AverageLoanAmount > ad.AverageDepositAmount * 2 \n    AND aa.ATMCount >= 3\nORDER BY \n    Ratio DESC;",
            "gigachat_response_ru": "SELECT \n    b.BranchName,\n    AVG(l.PrincipalAmount) AS AverageLoanAmount,\n    AVG(d.Amount) AS AverageDepositAmount,\n    COUNT(DISTINCT at.ATMID) AS ATMCount,\n    AVG(l.PrincipalAmount)/AVG(d.Amount) AS Ratio\nFROM \n    Branches b\nLEFT JOIN \n    Loans l ON b.BranchID = l.BranchID AND l.Status = 'Активно'\nLEFT JOIN \n    Deposits d ON b.BranchID = d.BranchID AND d.Status = 'Активен'\nLEFT JOIN \n    ATMs at ON b.BranchID = at.BranchID AND at.Status = 'Active'\nGROUP BY \n    b.BranchName\nHAVING \n    AVG(l.PrincipalAmount)/AVG(d.Amount) > 2 \nAND \n    COUNT(DISTINCT at.ATMID) >= 3\nORDER BY \n    Ratio DESC;",
            "gpt-4o_response": "SELECT \n    b.BranchName, \n    AVG(l.PrincipalAmount) AS AverageLoanAmount, \n    AVG(d.Amount) AS AverageDepositAmount, \n    COUNT(a.ATMID) AS ActiveATMs, \n    (AVG(l.PrincipalAmount) / AVG(d.Amount)) AS LoanToDepositRatio\nFROM \n    Branches b\nJOIN \n    Customers c ON b.BranchID = c.BranchID\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\nJOIN \n    ATMs a ON b.BranchID = a.BranchID AND a.Status = 'Active'\nGROUP BY \n    b.BranchID, b.BranchName\nHAVING \n    AVG(l.PrincipalAmount) > 2 * AVG(d.Amount) \n    AND COUNT(a.ATMID) >= 3\nORDER BY \n    LoanToDepositRatio DESC;",
            "gpt-4o_response_ru": "SELECT \n    b.BranchName, \n    AVG(l.PrincipalAmount) AS AvgLoanAmount, \n    AVG(d.Amount) AS AvgDepositAmount, \n    COUNT(a.ATMID) AS ActiveATMs, \n    (AVG(l.PrincipalAmount) / AVG(d.Amount)) AS LoanToDepositRatio\nFROM \n    Branches b\nJOIN \n    Customers c ON b.BranchID = c.BranchID\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\nJOIN \n    ATMs a ON b.BranchID = a.BranchID AND a.Status = 'Active'\nGROUP BY \n    b.BranchName\nHAVING \n    AVG(l.PrincipalAmount) > 2 * AVG(d.Amount) \n    AND COUNT(a.ATMID) >= 3\nORDER BY \n    LoanToDepositRatio DESC;"
        },
        {
            "question": "Вывести список клиентов, у которых есть активные кредитные карты с просроченным сроком действия, активные депозиты и активные страховые полисы. Показать имя клиента, номер карты, дату истечения срока действия, сумму депозита, тип страхового полиса и сумму покрытия. Результат отсортировать по сумме депозита по убыванию.",
            "sql_query": "SELECT c.FirstName, c.LastName, cc.CardNumber, cc.ExpiryDate, d.Amount as DepositAmount, ip.PolicyType, ip.CoverageAmount FROM Customers c JOIN CreditCards cc ON c.CustomerID = cc.CustomerID JOIN Deposits d ON c.CustomerID = d.CustomerID JOIN InsurancePolicies ip ON c.CustomerID = ip.CustomerID WHERE cc.ExpiryDate < CURRENT_DATE AND cc.Status = 'Активна' AND d.Status = 'Активен' AND ip.Status = 'Активен' ORDER BY d.Amount DESC;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    c.FirstName,\n    c.LastName,\n    cc.CardNumber,\n    cc.ExpiryDate,\n    d.Amount AS DepositAmount,\n    ip.PolicyType,\n    ip.CoverageAmount\nFROM\n    Customers c\nJOIN\n    CreditCards cc ON c.CustomerID = cc.CustomerID\nJOIN\n    Deposits d ON c.CustomerID = d.CustomerID\nJOIN\n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nWHERE\n    cc.ExpiryDate < CURRENT_DATE\n    AND cc.Status = 'Активна'\n    AND d.Status = 'Активен'\n    AND ip.Status = 'Активен'\nORDER BY\n    d.Amount DESC;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    c.FirstName,\n    c.LastName,\n    cc.CardNumber,\n    cc.ExpiryDate,\n    d.Amount AS DepositAmount,\n    ip.PolicyType,\n    ip.CoverageAmount\nFROM\n    Customers c\nJOIN\n    CreditCards cc ON c.CustomerID = cc.CustomerID\nJOIN\n    Deposits d ON c.CustomerID = d.CustomerID\nJOIN\n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nWHERE\n    cc.ExpiryDate < DATE('now')\n    AND cc.Status = 'Активна'\n    AND d.Status = 'Активен'\n    AND ip.Status = 'Активен'\nORDER BY\n    d.Amount DESC;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    c.FirstName, \n    c.LastName, \n    cc.CardNumber, \n    cc.ExpiryDate, \n    d.Amount, \n    ip.PolicyType, \n    ip.CoverageAmount\nFROM \n    Customers c\nJOIN \n    CreditCards cc ON c.CustomerID = cc.CustomerID\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID\nJOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nWHERE \n    cc.Status = 'Активна' \n    AND cc.ExpiryDate < CURRENT_DATE \n    AND d.Status = 'Активен' \n    AND ip.Status = 'Активен'\nORDER BY \n    d.Amount DESC;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    cc.CardNumber, \n    cc.ExpiryDate, \n    d.Amount, \n    ip.PolicyType, \n    ip.CoverageAmount\nFROM \n    Customers c\nJOIN \n    CreditCards cc ON c.CustomerID = cc.CustomerID\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID\nJOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nWHERE \n    cc.Status = 'Активна' \n    AND cc.ExpiryDate < CURRENT_DATE \n    AND d.Status = 'Активен' \n    AND ip.Status = 'Активен'\nORDER BY \n    d.Amount DESC;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    c.FirstName || ' ' || c.LastName AS CustomerName,\n    cc.CardNumber,\n    cc.ExpiryDate,\n    d.Amount AS DepositAmount,\n    ip.PolicyType,\n    ip.CoverageAmount\nFROM \n    Customers c\nJOIN \n    CreditCards cc ON c.CustomerID = cc.CustomerID AND cc.Status = 'Активна' AND cc.ExpiryDate < CURRENT_DATE\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\nJOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID AND ip.Status = 'Активен'\nORDER BY \n    d.Amount DESC;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    c.FirstName || ' ' || c.LastName AS CustomerName,\n    cc.CardNumber,\n    cc.ExpiryDate,\n    d.Amount AS DepositAmount,\n    ip.PolicyType,\n    ip.CoverageAmount\nFROM \n    Customers c\nJOIN \n    CreditCards cc ON c.CustomerID = cc.CustomerID AND cc.Status = 'Активна' AND cc.ExpiryDate < CURRENT_DATE\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\nJOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID AND ip.Status = 'Активен'\nORDER BY \n    d.Amount DESC;",
            "gigachat_response": "SELECT \n    c.FirstName || ' ' || c.LastName AS FullName,\n    cc.CardNumber,\n    cc.ExpiryDate,\n    d.Amount AS DepositAmount,\n    ip.PolicyType,\n    ip.CoverageAmount\nFROM \n    Customers c\nJOIN \n    CreditCards cc ON c.CustomerID = cc.CustomerID\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID\nJOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nWHERE \n    cc.Status = 'Активна' \n    AND cc.ExpiryDate < CURRENT_DATE \n    AND d.Status = 'Активен' \n    AND ip.Status = 'Активен'\nORDER BY \n    DepositAmount DESC;",
            "gigachat_response_ru": "SELECT \n    c.FirstName || ' ' || c.LastName AS FullName,\n    cc.CardNumber,\n    cc.ExpiryDate,\n    d.Amount AS DepositAmount,\n    ip.PolicyType,\n    ip.CoverageAmount\nFROM \n    Customers c\nINNER JOIN \n    CreditCards cc ON c.CustomerID = cc.CustomerID\nINNER JOIN \n    Deposits d ON c.CustomerID = d.CustomerID\nINNER JOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nWHERE \n    cc.Status = 'Активна' \n    AND cc.ExpiryDate < CURRENT_DATE \n    AND d.Status = 'Активен' \n    AND ip.Status = 'Активен'\nORDER BY \n    DepositAmount DESC;",
            "gpt-4o_response": "SELECT \n    c.FirstName, \n    c.LastName, \n    cc.CardNumber, \n    cc.ExpiryDate, \n    d.Amount AS DepositAmount, \n    ip.PolicyType, \n    ip.CoverageAmount\nFROM \n    Customers c\nJOIN \n    CreditCards cc ON c.CustomerID = cc.CustomerID\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID\nJOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nWHERE \n    cc.Status = 'Активна' \n    AND cc.ExpiryDate < CURRENT_DATE\n    AND d.Status = 'Активен'\n    AND ip.Status = 'Активен'\nORDER BY \n    d.Amount DESC;",
            "gpt-4o_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    cc.CardNumber, \n    cc.ExpiryDate, \n    d.Amount AS DepositAmount, \n    ip.PolicyType, \n    ip.CoverageAmount\nFROM \n    Customers c\nJOIN \n    CreditCards cc ON c.CustomerID = cc.CustomerID\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID\nJOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nWHERE \n    cc.Status = 'Активна' \n    AND cc.ExpiryDate < CURRENT_DATE\n    AND d.Status = 'Активен'\n    AND ip.Status = 'Активен'\nORDER BY \n    d.Amount DESC;"
        },
        {
            "question": "Найти клиентов, у которых есть активные кредиты с просроченными платежами (сумма просрочки более 100000 рублей), но при этом есть активные депозиты на сумму, достаточную для погашения просрочки, и активные страховые полисы. Показать имя клиента, сумму просрочки, сумму депозита, тип страхового полиса и сумму покрытия. Результат отсортировать по сумме просрочки по убыванию.",
            "sql_query": "WITH LoanPaymentsStatus AS (SELECT l.CustomerID, l.LoanID, l.PrincipalAmount, (SELECT SUM(Amount) FROM LoanPayments WHERE LoanID = l.LoanID AND Status = 'Завершено') as PaidAmount FROM Loans l WHERE l.Status = 'Активно') SELECT c.FirstName, c.LastName, (lps.PrincipalAmount - lps.PaidAmount) as OverdueAmount, SUM(d.Amount) as AvailableDeposits, ip.PolicyType, ip.CoverageAmount FROM Customers c JOIN LoanPaymentsStatus lps ON c.CustomerID = lps.CustomerID JOIN Deposits d ON c.CustomerID = d.CustomerID JOIN InsurancePolicies ip ON c.CustomerID = ip.CustomerID WHERE d.Status = 'Активен' AND ip.Status = 'Активен' GROUP BY c.CustomerID, c.FirstName, c.LastName, lps.LoanID, lps.PrincipalAmount, lps.PaidAmount, ip.PolicyType, ip.CoverageAmount HAVING (lps.PrincipalAmount - lps.PaidAmount) > 100000 AND SUM(d.Amount) >= (lps.PrincipalAmount - lps.PaidAmount) ORDER BY OverdueAmount DESC;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    c.FirstName,\n    c.LastName,\n    SUM(CASE WHEN lp.Status != 'Завершено' THEN lp.Amount ELSE 0 END) AS TotalOverdueAmount,\n    SUM(d.Amount) AS TotalDepositAmount,\n    ip.PolicyType,\n    ip.CoverageAmount\nFROM\n    Customers c\nJOIN\n    Loans l ON c.CustomerID = l.CustomerID\nJOIN\n    LoanPayments lp ON l.LoanID = lp.LoanID\nJOIN\n    Deposits d ON c.CustomerID = d.CustomerID\nJOIN\n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nWHERE\n    l.Status = 'Активно'\n    AND lp.Status != 'Завершено'\n    AND d.Status = 'Активен'\n    AND ip.Status = 'Активен'\nGROUP BY\n    c.CustomerID,\n    c.FirstName,\n    c.LastName,\n    ip.PolicyType,\n    ip.CoverageAmount\nHAVING\n    SUM(CASE WHEN lp.Status != 'Завершено' THEN lp.Amount ELSE 0 END) > 100000\n    AND SUM(d.Amount) >= SUM(CASE WHEN lp.Status != 'Завершено' THEN lp.Amount ELSE 0 END)\nORDER BY\n    TotalOverdueAmount DESC;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    c.FirstName,\n    c.LastName,\n    SUM(CASE WHEN lp.PaymentDate < DATE('now') AND lp.Status != 'Завершено' THEN lp.Amount ELSE 0 END) AS TotalOverdueAmount,\n    SUM(d.Amount) AS TotalDepositAmount,\n    ip.PolicyType,\n    ip.CoverageAmount\nFROM Customers c\nJOIN Loans l ON c.CustomerID = l.CustomerID\nJOIN LoanPayments lp ON l.LoanID = lp.LoanID\nJOIN Deposits d ON c.CustomerID = d.CustomerID\nJOIN InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nWHERE l.Status = 'Активно'\n  AND d.Status = 'Активен'\n  AND ip.Status = 'Активен'\nGROUP BY c.CustomerID, c.FirstName, c.LastName, ip.PolicyType, ip.CoverageAmount\nHAVING SUM(CASE WHEN lp.PaymentDate < DATE('now') AND lp.Status != 'Завершено' THEN lp.Amount ELSE 0 END) > 100000\n   AND SUM(d.Amount) >= SUM(CASE WHEN lp.PaymentDate < DATE('now') AND lp.Status != 'Завершено' THEN lp.Amount ELSE 0 END)\nORDER BY TotalOverdueAmount DESC;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    c.FirstName, \n    c.LastName, \n    SUM(lp.Amount) AS OverdueAmount, \n    d.Amount AS DepositAmount, \n    ip.PolicyType, \n    ip.CoverageAmount\nFROM \n    Customers c\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\nJOIN \n    LoanPayments lp ON l.LoanID = lp.LoanID AND lp.Status = 'Ошибка'\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\nJOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID AND ip.Status = 'Активен'\nWHERE \n    SUM(lp.Amount) > 100000\nGROUP BY \n    c.FirstName, \n    c.LastName, \n    d.Amount, \n    ip.PolicyType, \n    ip.CoverageAmount\nHAVING \n    SUM(d.Amount) >= SUM(lp.Amount)\nORDER BY \n    OverdueAmount DESC;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    SUM(lp.Amount) AS OverdueAmount, \n    d.Amount AS DepositAmount, \n    ip.PolicyType, \n    ip.CoverageAmount\nFROM \n    Customers c\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID\nJOIN \n    LoanPayments lp ON l.LoanID = lp.LoanID\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID\nJOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nWHERE \n    l.Status = 'Активно' \n    AND lp.Status = 'Ошибка' \n    AND d.Status = 'Активен' \n    AND ip.Status = 'Активен'\n    AND lp.Amount > 100000\nGROUP BY \n    c.FirstName, \n    c.LastName, \n    d.Amount, \n    ip.PolicyType, \n    ip.CoverageAmount\nHAVING \n    SUM(lp.Amount) < d.Amount\nORDER BY \n    OverdueAmount DESC;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    c.FirstName || ' ' || c.LastName AS CustomerName,\n    SUM(lp.Amount) AS OverdueAmount,\n    SUM(d.Amount) AS DepositAmount,\n    ip.PolicyType,\n    ip.CoverageAmount\nFROM \n    Customers c\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\nJOIN \n    LoanPayments lp ON l.LoanID = lp.LoanID AND lp.Status = 'Ошибка' AND lp.Amount > 100000\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен' AND d.Amount >= lp.Amount\nJOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID AND ip.Status = 'Активен'\nGROUP BY \n    c.CustomerID, c.FirstName, c.LastName, ip.PolicyType, ip.CoverageAmount\nORDER BY \n    OverdueAmount DESC;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    c.FirstName || ' ' || c.LastName AS CustomerName,\n    SUM(lp.Amount) AS OverdueAmount,\n    SUM(d.Amount) AS DepositAmount,\n    ip.PolicyType,\n    ip.CoverageAmount\nFROM \n    Customers c\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\nJOIN \n    LoanPayments lp ON l.LoanID = lp.LoanID AND lp.Status = 'Ошибка' AND lp.Amount > 100000\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен' AND d.Amount >= lp.Amount\nJOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID AND ip.Status = 'Активен'\nGROUP BY \n    c.CustomerID, c.FirstName, c.LastName, ip.PolicyType, ip.CoverageAmount\nORDER BY \n    OverdueAmount DESC;",
            "gigachat_response": "SELECT \n    c.FirstName || ' ' || c.LastName AS FullName,\n    lp.TotalOverdueAmount AS OverdueAmount,\n    dp.ActiveDepositAmount AS DepositAmount,\n    ip.PolicyType,\n    ip.CoverageAmount\nFROM \n    Customers c\nJOIN \n    -- Find customers with overdue loan payments more than 100k rubles\n    (SELECT \n         l.CustomerID, \n         SUM(lp.Amount) AS TotalOverdueAmount\n     FROM \n         Loans l\n     JOIN \n         LoanPayments lp ON l.LoanID = lp.LoanID\n     WHERE \n         l.Status = 'Активно'\n         AND lp.PaymentDate IS NULL\n         AND lp.Status <> 'Завершено'\n     GROUP BY \n         l.CustomerID\n     HAVING \n         SUM(lp.Amount) > 100000) lp ON c.CustomerID = lp.CustomerID\nJOIN \n    -- Check active deposits sufficient to cover overdue amount\n    (SELECT \n         d.CustomerID, \n         SUM(d.Amount) AS ActiveDepositAmount\n     FROM \n         Deposits d\n     WHERE \n         d.Status = 'Активен'\n     GROUP BY \n         d.CustomerID) dp ON c.CustomerID = dp.CustomerID\nAND \n    dp.ActiveDepositAmount >= lp.TotalOverdueAmount\nJOIN \n    -- Ensure they also have an active insurance policy\n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nWHERE \n    ip.Status = 'Активен'\nORDER BY \n    OverdueAmount DESC;",
            "gigachat_response_ru": "SELECT \n    c.FirstName || ' ' || c.LastName AS FullName,\n    lp.TotalOverdue AS OverdueAmount,\n    dp.DepositBalance AS DepositAmount,\n    ip.PolicyType AS InsuranceType,\n    ip.CoverageAmount AS CoverageAmount\nFROM \n    Customers c\nINNER JOIN (\n    -- Клиенты с общей суммой просрочек больше 100000 руб.\n    SELECT \n        l.CustomerID, \n        SUM(lp.Amount) AS TotalOverdue\n    FROM \n        Loans l\n    INNER JOIN LoanPayments lp ON l.LoanID = lp.LoanID\n    WHERE \n        l.Status = 'Активно'\n        AND lp.PaymentDate IS NULL\n        AND lp.Status <> 'Завершено'\n    GROUP BY \n        l.CustomerID\n    HAVING \n        SUM(lp.Amount) > 100000\n) lp ON c.CustomerID = lp.CustomerID\n-- Активные депозиты, покрывающие просрочку\nINNER JOIN (\n    SELECT \n        d.CustomerID, \n        SUM(d.Amount) AS DepositBalance\n    FROM \n        Deposits d\n    WHERE \n        d.Status = 'Активен'\n    GROUP BY \n        d.CustomerID\n) dp ON c.CustomerID = dp.CustomerID\nAND dp.DepositBalance >= lp.TotalOverdue\n-- Наличие активного страхового полиса\nINNER JOIN InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nWHERE \n    ip.Status = 'Активен'\nORDER BY \n    OverdueAmount DESC;",
            "gpt-4o_response": "SELECT \n    c.FirstName, \n    c.LastName, \n    (SELECT SUM(lp.Amount) \n     FROM LoanPayments lp \n     WHERE lp.LoanID = l.LoanID AND lp.Status = 'Ошибка') AS OverdueAmount,\n    (SELECT SUM(d.Amount) \n     FROM Deposits d \n     WHERE d.CustomerID = c.CustomerID AND d.Status = 'Активен') AS DepositAmount,\n    ip.PolicyType, \n    ip.CoverageAmount\nFROM \n    Customers c\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID\nJOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nWHERE \n    l.Status = 'Активно'\n    AND (SELECT SUM(lp.Amount) \n         FROM LoanPayments lp \n         WHERE lp.LoanID = l.LoanID AND lp.Status = 'Ошибка') > 100000\n    AND (SELECT SUM(d.Amount) \n         FROM Deposits d \n         WHERE d.CustomerID = c.CustomerID AND d.Status = 'Активен') >= \n        (SELECT SUM(lp.Amount) \n         FROM LoanPayments lp \n         WHERE lp.LoanID = l.LoanID AND lp.Status = 'Ошибка')\n    AND ip.Status = 'Активен'\nORDER BY \n    OverdueAmount DESC;",
            "gpt-4o_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    lp.OverdueAmount, \n    d.Amount AS DepositAmount, \n    ip.PolicyType, \n    ip.CoverageAmount\nFROM \n    Customers c\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\nJOIN \n    (SELECT \n        LoanID, \n        SUM(Amount) AS OverdueAmount \n     FROM \n        LoanPayments \n     WHERE \n        Status = 'Ошибка' \n     GROUP BY \n        LoanID \n     HAVING \n        SUM(Amount) > 100000) lp ON l.LoanID = lp.LoanID\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен' AND d.Amount >= lp.OverdueAmount\nJOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID AND ip.Status = 'Активен'\nORDER BY \n    lp.OverdueAmount DESC;"
        },
        {
            "question": "Вывести статистику по транзакциям по кредитным картам за последние 3 месяца: для каждого типа карты показать количество транзакций, среднюю сумму транзакции, общую сумму транзакций и процент успешных транзакций. Показать только типы карт с более чем 5 транзакциями. Результат отсортировать по общей сумме транзакций по убыванию.",
            "sql_query": "SELECT cc.CardType, COUNT(ct.CardTransactionID) as TransactionCount, AVG(ct.Amount) as AverageAmount, SUM(ct.Amount) as TotalAmount, (COUNT(CASE WHEN ct.Status = 'Завершена' THEN 1 END) * 100.0 / COUNT(*)) as SuccessRate FROM CreditCards cc JOIN CardTransactions ct ON cc.CardID = ct.CardID WHERE ct.TransactionDate >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) GROUP BY cc.CardType HAVING COUNT(ct.CardTransactionID) > 5 ORDER BY TotalAmount DESC;",
            "google/gemini-2.0-flash-001_response": "SELECT \n    cc.CardType,\n    COUNT(ct.CardTransactionID) AS TotalTransactions,\n    AVG(ct.Amount) AS AverageTransactionAmount,\n    SUM(ct.Amount) AS TotalTransactionAmount,\n    SUM(CASE WHEN ct.Status = 'Завершена' THEN 1 ELSE 0 END) * 100.0 / COUNT(ct.CardTransactionID) AS SuccessTransactionPercentage\nFROM CreditCards cc\nJOIN CardTransactions ct ON cc.CardID = ct.CardID\nWHERE ct.TransactionDate >= DATE('now', '-3 months')\nGROUP BY cc.CardType\nHAVING COUNT(ct.CardTransactionID) > 5\nORDER BY TotalTransactionAmount DESC;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    cc.CardType,\n    COUNT(ct.CardTransactionID) AS TotalTransactions,\n    AVG(ct.Amount) AS AverageTransactionAmount,\n    SUM(ct.Amount) AS TotalTransactionAmount,\n    SUM(CASE WHEN ct.Status = 'Завершена' THEN 1 ELSE 0 END) * 100.0 / COUNT(ct.CardTransactionID) AS SuccessTransactionPercentage\nFROM\n    CreditCards cc\nJOIN\n    CardTransactions ct ON cc.CardID = ct.CardID\nWHERE\n    ct.TransactionDate >= DATE('now', '-3 months')\nGROUP BY\n    cc.CardType\nHAVING\n    COUNT(ct.CardTransactionID) > 5\nORDER BY\n    TotalTransactionAmount DESC;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    cc.CardType, \n    COUNT(ct.CardTransactionID) AS TotalTransactions, \n    AVG(ct.Amount) AS AverageTransactionAmount, \n    SUM(ct.Amount) AS TotalTransactionAmount, \n    (SUM(CASE WHEN ct.Status = 'Завершена' THEN 1 ELSE 0 END) / COUNT(ct.CardTransactionID)) * 100 AS SuccessfulTransactionPercentage\nFROM \n    CreditCards cc \nJOIN \n    CardTransactions ct ON cc.CardID = ct.CardID\nWHERE \n    ct.TransactionDate >= CURRENT_DATE - INTERVAL 3 MONTH\nGROUP BY \n    cc.CardType\nHAVING \n    COUNT(ct.CardTransactionID) > 5\nORDER BY \n    TotalTransactionAmount DESC;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH CardTransactionsStats AS (\n  SELECT \n    cc.CardType,\n    COUNT(ct.CardTransactionID) AS TotalTransactions,\n    AVG(ct.Amount) AS AverageTransactionAmount,\n    SUM(ct.Amount) AS TotalTransactionAmount,\n    SUM(CASE WHEN ct.Status = 'Завершена' THEN 1 ELSE 0 END) AS SuccessfulTransactions\n  FROM \n    CardTransactions ct\n  JOIN \n    CreditCards cc ON ct.CardID = cc.CardID\n  WHERE \n    ct.TransactionDate >= CURRENT_DATE - INTERVAL '3 month'\n  GROUP BY \n    cc.CardType\n)\nSELECT \n  CardType,\n  TotalTransactions,\n  AverageTransactionAmount,\n  TotalTransactionAmount,\n  (SuccessfulTransactions * 1.0 / TotalTransactions) * 100 AS SuccessfulTransactionPercentage\nFROM \n  CardTransactionsStats\nWHERE \n  TotalTransactions > 5\nORDER BY \n  TotalTransactionAmount DESC;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    cc.CardType,\n    COUNT(ct.CardTransactionID) AS TransactionCount,\n    AVG(ct.Amount) AS AvgTransactionAmount,\n    SUM(ct.Amount) AS TotalTransactionAmount,\n    (COUNT(CASE WHEN ct.Status = 'Завершена' THEN 1 END) * 100.0 / COUNT(ct.CardTransactionID)) AS SuccessRate\nFROM \n    CreditCards cc\nJOIN \n    CardTransactions ct ON cc.CardID = ct.CardID\nWHERE \n    ct.TransactionDate >= DATEADD(month, -3, CURRENT_DATE)\nGROUP BY \n    cc.CardType\nHAVING \n    COUNT(ct.CardTransactionID) > 5\nORDER BY \n    TotalTransactionAmount DESC;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    cc.CardType,\n    COUNT(ct.CardTransactionID) AS TransactionCount,\n    AVG(ct.Amount) AS AvgTransactionAmount,\n    SUM(ct.Amount) AS TotalTransactionAmount,\n    (COUNT(CASE WHEN ct.Status = 'Завершена' THEN 1 END) * 100.0 / COUNT(ct.CardTransactionID)) AS SuccessRate\nFROM \n    CreditCards cc\nJOIN \n    CardTransactions ct ON cc.CardID = ct.CardID\nWHERE \n    ct.TransactionDate >= DATEADD(MONTH, -3, GETDATE())\nGROUP BY \n    cc.CardType\nHAVING \n    COUNT(ct.CardTransactionID) > 5\nORDER BY \n    TotalTransactionAmount DESC;",
            "gigachat_response": "SELECT \n    cc.CardType,\n    COUNT(ct.CardTransactionID) AS NumberOfTransactions,\n    AVG(ct.Amount) AS AverageTransactionAmount,\n    SUM(ct.Amount) AS TotalTransactionAmount,\n    ROUND((COUNT(CASE WHEN ct.Status = 'Завершена' THEN 1 ELSE NULL END)::DECIMAL / COUNT(*)) * 100, 2) AS SuccessPercentage\nFROM \n    CreditCards cc\nJOIN \n    CardTransactions ct ON cc.CardID = ct.CardID\nWHERE \n    ct.TransactionDate >= NOW()::DATE - INTERVAL '3 months'\nGROUP BY \n    cc.CardType\nHAVING \n    COUNT(ct.CardTransactionID) > 5\nORDER BY \n    TotalTransactionAmount DESC;",
            "gigachat_response_ru": "SELECT \n    cr.CardType,\n    COUNT(ct.CardTransactionID) AS NumberOfTransactions,\n    AVG(ct.Amount) AS AverageTransactionAmount,\n    SUM(ct.Amount) AS TotalTransactionAmount,\n    ROUND((COUNT(CASE WHEN ct.Status = 'Завершена' THEN 1 ELSE NULL END)::DECIMAL / COUNT(*)) * 100, 2) AS SuccessPercentage\nFROM \n    CreditCards cr\nINNER JOIN \n    CardTransactions ct ON cr.CardID = ct.CardID\nWHERE \n    ct.TransactionDate >= NOW()::DATE - INTERVAL '3 months'\nGROUP BY \n    cr.CardType\nHAVING \n    COUNT(ct.CardTransactionID) > 5\nORDER BY \n    TotalTransactionAmount DESC;",
            "gpt-4o_response": "SELECT \n    cc.CardType,\n    COUNT(ct.CardTransactionID) AS TransactionCount,\n    AVG(ct.Amount) AS AvgTransactionAmount,\n    SUM(ct.Amount) AS TotalTransactionAmount,\n    (COUNT(CASE WHEN ct.Status = 'Завершена' THEN 1 END) * 100.0 / COUNT(ct.CardTransactionID)) AS SuccessRate\nFROM \n    CardTransactions ct\nJOIN \n    CreditCards cc ON ct.CardID = cc.CardID\nWHERE \n    ct.TransactionDate >= DATEADD(MONTH, -3, CURRENT_DATE)\nGROUP BY \n    cc.CardType\nHAVING \n    COUNT(ct.CardTransactionID) > 5\nORDER BY \n    TotalTransactionAmount DESC;",
            "gpt-4o_response_ru": "SELECT \n    cc.CardType,\n    COUNT(ct.CardTransactionID) AS TransactionCount,\n    AVG(ct.Amount) AS AvgTransactionAmount,\n    SUM(ct.Amount) AS TotalTransactionAmount,\n    (COUNT(CASE WHEN ct.Status = 'Завершена' THEN 1 END) * 100.0 / COUNT(ct.CardTransactionID)) AS SuccessRate\nFROM \n    CreditCards cc\nJOIN \n    CardTransactions ct ON cc.CardID = ct.CardID\nWHERE \n    ct.TransactionDate >= DATEADD(MONTH, -3, CURRENT_DATE)\nGROUP BY \n    cc.CardType\nHAVING \n    COUNT(ct.CardTransactionID) > 5\nORDER BY \n    TotalTransactionAmount DESC;"
        },
        {
            "question": "Найти отделения банка, где средняя зарплата сотрудников выше средней по всем отделениям, и при этом количество активных клиентов превышает среднее по всем отделениям. Показать название отделения, среднюю зарплату, количество активных клиентов, количество сотрудников и отношение средней зарплаты к средней по всем отделениям. Результат отсортировать по этому отношению по убыванию.",
            "sql_query": "WITH BranchStats AS (SELECT AVG(CAST(e.Salary AS DECIMAL(18,2))) as OverallAvgSalary, AVG(ActiveClients) as OverallAvgClients FROM (SELECT b.BranchID, COUNT(DISTINCT c.CustomerID) as ActiveClients FROM Branches b LEFT JOIN Customers c ON b.BranchID = c.BranchID GROUP BY b.BranchID) as ClientCounts CROSS JOIN Employees e), BranchDetails AS (SELECT b.BranchID, b.BranchName, AVG(CAST(e.Salary AS DECIMAL(18,2))) as AvgSalary, COUNT(DISTINCT c.CustomerID) as ActiveClientCount, COUNT(DISTINCT e.EmployeeID) as EmployeeCount FROM Branches b LEFT JOIN Employees e ON b.BranchID = e.BranchID LEFT JOIN Customers c ON b.BranchID = c.BranchID GROUP BY b.BranchID, b.BranchName) SELECT bd.BranchName, bd.AvgSalary, bd.ActiveClientCount, bd.EmployeeCount, (bd.AvgSalary / bs.OverallAvgSalary) as SalaryRatio FROM BranchDetails bd CROSS JOIN BranchStats bs WHERE bd.AvgSalary > bs.OverallAvgSalary AND bd.ActiveClientCount > bs.OverallAvgClients ORDER BY SalaryRatio DESC;",
            "google/gemini-2.0-flash-001_response": "WITH BranchAvgSalaries AS (\n    SELECT\n        b.BranchID,\n        b.BranchName,\n        AVG(e.Salary) AS AvgSalary,\n        COUNT(e.EmployeeID) AS EmployeeCount\n    FROM\n        Branches b\n    JOIN\n        Employees e ON b.BranchID = e.BranchID\n    GROUP BY\n        b.BranchID, b.BranchName\n),\nBranchCustomerCounts AS (\n    SELECT\n        b.BranchID,\n        COUNT(c.CustomerID) AS ActiveCustomerCount\n    FROM\n        Branches b\n    JOIN\n        Customers c ON b.BranchID = c.BranchID\n    GROUP BY\n        b.BranchID\n),\nOverallAverages AS (\n    SELECT\n        AVG(AvgSalary) AS OverallAvgSalary,\n        AVG(ActiveCustomerCount) AS OverallAvgCustomerCount\n    FROM\n        BranchAvgSalaries, BranchCustomerCounts\n)\nSELECT\n    bas.BranchName,\n    bas.AvgSalary,\n    bcc.ActiveCustomerCount,\n    bas.EmployeeCount,\n    bas.AvgSalary / oa.OverallAvgSalary AS SalaryRatio\nFROM\n    BranchAvgSalaries bas\nJOIN\n    BranchCustomerCounts bcc ON bas.BranchID = bcc.BranchID\nJOIN\n    OverallAverages oa ON 1=1\nWHERE\n    bas.AvgSalary > oa.OverallAvgSalary\n    AND bcc.ActiveCustomerCount > oa.OverallAvgCustomerCount\nORDER BY\n    SalaryRatio DESC;",
            "google/gemini-2.0-flash-001_response_ru": "WITH BranchStats AS (\n    SELECT\n        b.BranchID,\n        b.BranchName,\n        AVG(e.Salary) AS AvgSalary,\n        COUNT(DISTINCT c.CustomerID) AS ActiveCustomersCount,\n        COUNT(DISTINCT e.EmployeeID) AS EmployeeCount\n    FROM\n        Branches b\n    LEFT JOIN\n        Employees e ON b.BranchID = e.BranchID\n    LEFT JOIN\n        Customers c ON b.BranchID = c.BranchID\n    GROUP BY\n        b.BranchID, b.BranchName\n),\nAvgBranchStats AS (\n    SELECT\n        AVG(AvgSalary) AS OverallAvgSalary,\n        AVG(ActiveCustomersCount) AS OverallAvgCustomers\n    FROM\n        BranchStats\n)\nSELECT\n    bs.BranchName,\n    bs.AvgSalary,\n    bs.ActiveCustomersCount,\n    bs.EmployeeCount,\n    bs.AvgSalary / avgs.OverallAvgSalary AS SalaryRatio\nFROM\n    BranchStats bs, AvgBranchStats avgs\nWHERE\n    bs.AvgSalary > avgs.OverallAvgSalary\n    AND bs.ActiveCustomersCount > avgs.OverallAvgCustomers\nORDER BY\n    SalaryRatio DESC;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH AverageSalaryAndActiveCustomers AS (\n  SELECT \n    b.BranchName, \n    AVG(e.Salary) AS AverageSalary, \n    COUNT(DISTINCT c.CustomerID) AS ActiveCustomers,\n    COUNT(e.EmployeeID) AS TotalEmployees\n  FROM \n    Branches b\n  JOIN \n    Employees e ON b.BranchID = e.BranchID\n  LEFT JOIN \n    Customers c ON b.BranchID = c.BranchID\n  WHERE \n    c.Status IS NULL OR c.Status = 'Активен'\n  GROUP BY \n    b.BranchName\n),\nAverageSalaryAndActiveCustomersAll AS (\n  SELECT \n    AVG(AverageSalary) AS AverageSalaryAll,\n    AVG(ActiveCustomers) AS ActiveCustomersAll\n  FROM \n    AverageSalaryAndActiveCustomers\n)\nSELECT \n  bsa.BranchName, \n  bsa.AverageSalary, \n  bsa.ActiveCustomers, \n  bsa.TotalEmployees,\n  bsa.AverageSalary / asa.AverageSalaryAll AS SalaryRatio\nFROM \n  AverageSalaryAndActiveCustomers bsa\nCROSS JOIN \n  AverageSalaryAndActiveCustomersAll asa\nWHERE \n  bsa.AverageSalary > asa.AverageSalaryAll AND \n  bsa.ActiveCustomers > asa.ActiveCustomersAll\nORDER BY \n  SalaryRatio DESC;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH AverageSalaryAndCustomerCount AS (\n    SELECT \n        b.BranchName, \n        AVG(e.Salary) AS AverageSalary, \n        COUNT(DISTINCT c.CustomerID) AS ActiveCustomers,\n        COUNT(e.EmployeeID) AS TotalEmployees\n    FROM \n        Branches b\n    JOIN \n        Employees e ON b.BranchID = e.BranchID\n    JOIN \n        Customers c ON b.BranchID = c.BranchID\n    WHERE \n        c.CustomerID IN (SELECT CustomerID FROM Accounts WHERE Status = 'Active')\n    GROUP BY \n        b.BranchName\n),\nOverallAverageSalaryAndCustomerCount AS (\n    SELECT \n        AVG(AverageSalary) AS OverallAverageSalary,\n        AVG(ActiveCustomers) AS OverallAverageCustomers\n    FROM \n        AverageSalaryAndCustomerCount\n)\nSELECT \n    asc.BranchName, \n    asc.AverageSalary, \n    asc.ActiveCustomers, \n    asc.TotalEmployees,\n    asc.AverageSalary / oasc.OverallAverageSalary AS SalaryRatio\nFROM \n    AverageSalaryAndCustomerCount asc\nCROSS JOIN \n    OverallAverageSalaryAndCustomerCount oasc\nWHERE \n    asc.AverageSalary > oasc.OverallAverageSalary\n    AND asc.ActiveCustomers > oasc.OverallAverageCustomers\nORDER BY \n    SalaryRatio DESC;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH BranchStats AS (\n    SELECT \n        b.BranchID,\n        b.BranchName,\n        AVG(e.Salary) AS AvgSalary,\n        COUNT(DISTINCT e.EmployeeID) AS EmployeeCount,\n        COUNT(DISTINCT CASE WHEN a.Status = 'Active' THEN c.CustomerID END) AS ActiveCustomerCount\n    FROM \n        Branches b\n        JOIN Employees e ON b.BranchID = e.BranchID\n        JOIN Customers c ON b.BranchID = c.BranchID\n        LEFT JOIN Accounts a ON c.CustomerID = a.CustomerID\n    GROUP BY \n        b.BranchID, b.BranchName\n),\nGlobalAverages AS (\n    SELECT \n        AVG(e.Salary) AS GlobalAvgSalary,\n        AVG(sub.ActiveCustomerCount) AS GlobalAvgCustomerCount\n    FROM \n        Employees e\n        JOIN (\n            SELECT \n                b.BranchID,\n                COUNT(DISTINCT CASE WHEN a.Status = 'Active' THEN c.CustomerID END) AS ActiveCustomerCount\n            FROM \n                Branches b\n                JOIN Customers c ON b.BranchID = c.BranchID\n                LEFT JOIN Accounts a ON c.CustomerID = a.CustomerID\n            GROUP BY \n                b.BranchID\n        ) sub ON e.BranchID = sub.BranchID\n)\nSELECT \n    bs.BranchName,\n    ROUND(bs.AvgSalary, 2) AS AvgSalary,\n    bs.ActiveCustomerCount,\n    bs.EmployeeCount,\n    ROUND(bs.AvgSalary / ga.GlobalAvgSalary, 2) AS SalaryRatio\nFROM \n    BranchStats bs, \n    GlobalAverages ga\nWHERE \n    bs.AvgSalary > ga.GlobalAvgSalary \n    AND bs.ActiveCustomerCount > ga.GlobalAvgCustomerCount\nORDER BY \n    SalaryRatio DESC;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "WITH BranchStats AS (\n    SELECT \n        b.BranchID,\n        b.BranchName,\n        AVG(e.Salary) AS AvgSalary,\n        COUNT(DISTINCT e.EmployeeID) AS EmployeeCount,\n        COUNT(DISTINCT CASE WHEN a.Status = 'Active' THEN c.CustomerID END) AS ActiveCustomerCount\n    FROM \n        Branches b\n    LEFT JOIN \n        Employees e ON b.BranchID = e.BranchID\n    LEFT JOIN \n        Customers c ON b.BranchID = c.BranchID\n    LEFT JOIN \n        Accounts a ON c.CustomerID = a.CustomerID\n    GROUP BY \n        b.BranchID, b.BranchName\n),\nOverallStats AS (\n    SELECT \n        AVG(AvgSalary) AS OverallAvgSalary,\n        AVG(ActiveCustomerCount) AS OverallAvgCustomerCount\n    FROM \n        BranchStats\n)\nSELECT \n    bs.BranchName,\n    bs.AvgSalary,\n    bs.ActiveCustomerCount,\n    bs.EmployeeCount,\n    (bs.AvgSalary / os.OverallAvgSalary) AS SalaryRatio\nFROM \n    BranchStats bs\nCROSS JOIN \n    OverallStats os\nWHERE \n    bs.AvgSalary > os.OverallAvgSalary \n    AND bs.ActiveCustomerCount > os.OverallAvgCustomerCount\nORDER BY \n    SalaryRatio DESC;",
            "gigachat_response": "WITH BranchStats AS (\n    SELECT \n        b.BranchID,\n        b.BranchName,\n        AVG(e.Salary) OVER () AS OverallAverageSalary,\n        AVG(e.Salary) AS BranchAverageSalary,\n        COUNT(DISTINCT CASE WHEN ac.Status = 'Active' THEN ac.CustomerID ELSE NULL END) AS ActiveCustomersCount,\n        AVG(COUNT(DISTINCT CASE WHEN ac.Status = 'Active' THEN ac.CustomerID ELSE NULL END)) OVER () AS OverallAverageActiveCustomers,\n        COUNT(DISTINCT e.EmployeeID) AS NumberOfEmployees\n    FROM \n        Branches b\n    INNER JOIN \n        Employees e ON b.BranchID = e.BranchID\n    LEFT JOIN \n        Accounts ac ON b.BranchID = ac.BranchID\n    GROUP BY \n        b.BranchID, b.BranchName\n)\nSELECT \n    bs.BranchName,\n    ROUND(bs.BranchAverageSalary, 2) AS AverageSalary,\n    bs.ActiveCustomersCount,\n    bs.NumberOfEmployees,\n    ROUND((bs.BranchAverageSalary / bs.OverallAverageSalary), 2) AS SalaryToOverallAvgRatio\nFROM \n    BranchStats bs\nWHERE \n    bs.BranchAverageSalary > bs.OverallAverageSalary \n    AND bs.ActiveCustomersCount > bs.OverallAverageActiveCustomers\nORDER BY \n    SalaryToOverallAvgRatio DESC;",
            "gigachat_response_ru": "WITH BranchStats AS (\n    SELECT \n        b.BranchID,\n        b.BranchName,\n        AVG(e.Salary) OVER () AS OverallAverageSalary,\n        AVG(e.Salary) AS BranchAverageSalary,\n        COUNT(DISTINCT CASE WHEN c.Status = 'Active' THEN c.CustomerID ELSE NULL END) AS ActiveClientsCount,\n        COUNT(DISTINCT e.EmployeeID) AS TotalEmployees,\n        AVG(e.Salary) / AVG(e.Salary) OVER () AS SalaryToOverallAvgRatio\n    FROM \n        Branches b\n    INNER JOIN \n        Employees e ON b.BranchID = e.BranchID\n    LEFT JOIN \n        Customers c ON b.BranchID = c.BranchID\n    GROUP BY \n        b.BranchID, b.BranchName\n)\nSELECT \n    BranchName,\n    BranchAverageSalary,\n    ActiveClientsCount,\n    TotalEmployees,\n    SalaryToOverallAvgRatio\nFROM \n    BranchStats\nWHERE \n    BranchAverageSalary > OverallAverageSalary \n    AND ActiveClientsCount > (SELECT AVG(ActiveClientsCount) FROM BranchStats)\nORDER BY \n    SalaryToOverallAvgRatio DESC;",
            "gpt-4o_response": "WITH AverageSalary AS (\n    SELECT BranchID, AVG(Salary) AS AvgSalary\n    FROM Employees\n    GROUP BY BranchID\n),\nAverageActiveCustomers AS (\n    SELECT BranchID, COUNT(DISTINCT c.CustomerID) AS ActiveCustomers\n    FROM Customers c\n    JOIN Accounts a ON c.CustomerID = a.CustomerID\n    WHERE a.Status = 'Active'\n    GROUP BY BranchID\n),\nOverallAverages AS (\n    SELECT AVG(AvgSalary) AS OverallAvgSalary, AVG(ActiveCustomers) AS OverallAvgActiveCustomers\n    FROM (\n        SELECT a.BranchID, AVG(e.Salary) AS AvgSalary, COUNT(DISTINCT c.CustomerID) AS ActiveCustomers\n        FROM Employees e\n        JOIN Customers c ON e.BranchID = c.BranchID\n        JOIN Accounts a ON c.CustomerID = a.CustomerID\n        WHERE a.Status = 'Active'\n        GROUP BY a.BranchID\n    ) AS BranchStats\n)\nSELECT b.BranchName, \n       avgSal.AvgSalary, \n       actCust.ActiveCustomers, \n       COUNT(e.EmployeeID) AS TotalEmployees, \n       (avgSal.AvgSalary / oa.OverallAvgSalary) AS SalaryRatio\nFROM Branches b\nJOIN AverageSalary avgSal ON b.BranchID = avgSal.BranchID\nJOIN AverageActiveCustomers actCust ON b.BranchID = actCust.BranchID\nJOIN Employees e ON b.BranchID = e.BranchID\nJOIN OverallAverages oa ON 1=1\nGROUP BY b.BranchName, avgSal.AvgSalary, actCust.ActiveCustomers, oa.OverallAvgSalary\nHAVING avgSal.AvgSalary > oa.OverallAvgSalary AND actCust.ActiveCustomers > oa.OverallAvgActiveCustomers\nORDER BY SalaryRatio DESC;",
            "gpt-4o_response_ru": "WITH AvgSalaryPerBranch AS (\n    SELECT \n        e.BranchID, \n        AVG(e.Salary) AS AvgSalary, \n        COUNT(e.EmployeeID) AS TotalEmployees\n    FROM Employees e\n    GROUP BY e.BranchID\n),\nAvgActiveCustomersPerBranch AS (\n    SELECT \n        c.BranchID, \n        COUNT(DISTINCT c.CustomerID) AS ActiveCustomers\n    FROM Customers c\n    JOIN Accounts a ON c.CustomerID = a.CustomerID\n    WHERE a.Status = 'Active'\n    GROUP BY c.BranchID\n),\nOverallAverages AS (\n    SELECT \n        AVG(aspb.AvgSalary) AS OverallAvgSalary, \n        AVG(aacpb.ActiveCustomers) AS OverallAvgActiveCustomers\n    FROM AvgSalaryPerBranch aspb\n    JOIN AvgActiveCustomersPerBranch aacpb ON aspb.BranchID = aacpb.BranchID\n)\nSELECT \n    b.BranchName, \n    aspb.AvgSalary, \n    aacpb.ActiveCustomers, \n    aspb.TotalEmployees, \n    (aspb.AvgSalary / oa.OverallAvgSalary) AS SalaryToOverallAvgRatio\nFROM AvgSalaryPerBranch aspb\nJOIN AvgActiveCustomersPerBranch aacpb ON aspb.BranchID = aacpb.BranchID\nJOIN OverallAverages oa ON 1=1\nJOIN Branches b ON aspb.BranchID = b.BranchID\nWHERE \n    aspb.AvgSalary > oa.OverallAvgSalary \n    AND aacpb.ActiveCustomers > oa.OverallAvgActiveCustomers\nORDER BY SalaryToOverallAvgRatio DESC;"
        },
        {
            "question": "Вывести список клиентов, у которых есть активные депозиты в разных валютах (более одной), и при этом есть активные кредиты. Показать имя клиента, количество валют по депозитам, общую сумму депозитов в рублях (с учетом конвертации (курс доллара 75 рублей, курс евро 85 рублей)), сумму кредита и разницу между суммой депозитов и кредита. Результат отсортировать по разнице сумм по убыванию.",
            "sql_query": "WITH CustomerDeposits AS (SELECT c.CustomerID, c.FirstName, c.LastName, COUNT(DISTINCT d.DepositType) as CurrencyCount, SUM(CASE WHEN d.DepositType = 'RUB' THEN d.Amount WHEN d.DepositType = 'USD' THEN d.Amount * 75 WHEN d.DepositType = 'EUR' THEN d.Amount * 85 ELSE d.Amount END) as TotalDepositsRUB FROM Customers c JOIN Deposits d ON c.CustomerID = d.CustomerID WHERE d.Status = 'Активен' GROUP BY c.CustomerID, c.FirstName, c.LastName HAVING COUNT(DISTINCT d.DepositType) > 1) SELECT cd.FirstName, cd.LastName, cd.CurrencyCount, cd.TotalDepositsRUB, SUM(l.PrincipalAmount) as TotalLoans, (cd.TotalDepositsRUB - SUM(l.PrincipalAmount)) as NetPosition FROM CustomerDeposits cd JOIN Loans l ON cd.CustomerID = l.CustomerID WHERE l.Status = 'Активно' GROUP BY cd.CustomerID, cd.FirstName, cd.LastName, cd.CurrencyCount, cd.TotalDepositsRUB ORDER BY NetPosition DESC;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    c.FirstName,\n    c.LastName,\n    COUNT(DISTINCT d.Currency) AS NumberOfCurrencies,\n    SUM(\n        CASE\n            WHEN d.Currency = 'RUB' THEN d.Amount\n            WHEN d.Currency = 'USD' THEN d.Amount * 75\n            WHEN d.Currency = 'EUR' THEN d.Amount * 85\n            ELSE 0\n        END\n    ) AS TotalDepositsInRUB,\n    SUM(l.PrincipalAmount) AS TotalLoanAmount,\n    (\n        SUM(\n            CASE\n                WHEN d.Currency = 'RUB' THEN d.Amount\n                WHEN d.Currency = 'USD' THEN d.Amount * 75\n                WHEN d.Currency = 'EUR' THEN d.Amount * 85\n                ELSE 0\n            END\n        ) - SUM(l.PrincipalAmount)\n    ) AS Difference,\n    SUM(l.PrincipalAmount) AS LoanAmountForSorting\nFROM\n    Customers c\nJOIN\n    Deposits d ON c.CustomerID = d.CustomerID\nJOIN\n    Loans l ON c.CustomerID = l.CustomerID\nWHERE\n    d.Status = 'Активен' AND l.Status = 'Активно'\nGROUP BY\n    c.CustomerID, c.FirstName, c.LastName\nHAVING\n    COUNT(DISTINCT d.Currency) > 1\nORDER BY\n    Difference DESC;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    c.FirstName,\n    c.LastName,\n    COUNT(DISTINCT d.Currency) AS NumberOfCurrencies,\n    SUM(\n        CASE\n            WHEN d.Currency = 'RUB' THEN d.Amount\n            WHEN d.Currency = 'USD' THEN d.Amount * 75\n            WHEN d.Currency = 'EUR' THEN d.Amount * 85\n            ELSE 0\n        END\n    ) AS TotalDepositsInRUB,\n    SUM(l.PrincipalAmount) AS TotalLoanAmount,\n    (\n        SUM(\n            CASE\n                WHEN d.Currency = 'RUB' THEN d.Amount\n                WHEN d.Currency = 'USD' THEN d.Amount * 75\n                WHEN d.Currency = 'EUR' THEN d.Amount * 85\n                ELSE 0\n            END\n        ) - SUM(l.PrincipalAmount)\n    ) AS Difference\nFROM\n    Customers c\nJOIN\n    Deposits d ON c.CustomerID = d.CustomerID\nJOIN\n    Loans l ON c.CustomerID = l.CustomerID\nWHERE\n    d.Status = 'Активен' AND l.Status = 'Активно'\nGROUP BY\n    c.CustomerID, c.FirstName, c.LastName\nHAVING\n    COUNT(DISTINCT d.Currency) > 1\nORDER BY\n    Difference DESC;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH ActiveDeposits AS (\n    SELECT d.CustomerID, COUNT(DISTINCT d.Currency) as CurrencyCount, \n    SUM(CASE WHEN d.Currency = 'RUB' THEN d.Amount \n             WHEN d.Currency = 'USD' THEN d.Amount * 75 \n             WHEN d.Currency = 'EUR' THEN d.Amount * 85 \n             ELSE 0 END) as TotalDepositAmount\n    FROM Deposits d\n    WHERE d.Status = 'Активен'\n    GROUP BY d.CustomerID\n),\nActiveLoans AS (\n    SELECT l.CustomerID, SUM(l.PrincipalAmount) as TotalLoanAmount\n    FROM Loans l\n    WHERE l.Status = 'Активно'\n    GROUP BY l.CustomerID\n)\nSELECT c.FirstName, c.LastName, ad.CurrencyCount, ad.TotalDepositAmount, al.TotalLoanAmount, \n       ad.TotalDepositAmount - al.TotalLoanAmount as Difference\nFROM Customers c\nJOIN ActiveDeposits ad ON c.CustomerID = ad.CustomerID\nJOIN ActiveLoans al ON c.CustomerID = al.CustomerID\nWHERE ad.CurrencyCount > 1\nORDER BY Difference DESC;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH ActiveDeposits AS (\n  SELECT d.CustomerID, \n         COUNT(DISTINCT d.Currency) AS CurrencyCount,\n         SUM(CASE WHEN d.Currency = 'RUB' THEN d.Amount \n                  WHEN d.Currency = 'USD' THEN d.Amount * 75 \n                  WHEN d.Currency = 'EUR' THEN d.Amount * 85 \n                  ELSE 0 END) AS TotalAmount\n  FROM Deposits d\n  WHERE d.Status = 'Активен'\n  GROUP BY d.CustomerID\n  HAVING COUNT(DISTINCT d.Currency) > 1\n),\nActiveLoans AS (\n  SELECT l.CustomerID, SUM(l.PrincipalAmount) AS TotalLoanAmount\n  FROM Loans l\n  WHERE l.Status = 'Активно'\n  GROUP BY l.CustomerID\n)\nSELECT c.FirstName, c.LastName, \n       ad.CurrencyCount, \n       ad.TotalAmount, \n       al.TotalLoanAmount, \n       ad.TotalAmount - al.TotalLoanAmount AS Difference\nFROM Customers c\nJOIN ActiveDeposits ad ON c.CustomerID = ad.CustomerID\nJOIN ActiveLoans al ON c.CustomerID = al.CustomerID\nORDER BY Difference DESC;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    c.FirstName || ' ' || c.LastName AS CustomerName,\n    COUNT(DISTINCT d.Currency) AS DepositCurrencyCount,\n    SUM(CASE \n        WHEN d.Currency = 'USD' THEN d.Amount * 75\n        WHEN d.Currency = 'EUR' THEN d.Amount * 85\n        ELSE d.Amount\n    END) AS TotalDepositsRUB,\n    SUM(l.PrincipalAmount) AS TotalLoanAmount,\n    SUM(CASE \n        WHEN d.Currency = 'USD' THEN d.Amount * 75\n        WHEN d.Currency = 'EUR' THEN d.Amount * 85\n        ELSE d.Amount\n    END) - SUM(l.PrincipalAmount) AS Difference\nFROM \n    Customers c\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\nGROUP BY \n    c.CustomerID, c.FirstName, c.LastName\nHAVING \n    COUNT(DISTINCT d.Currency) > 1\nORDER BY \n    Difference DESC;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    c.FirstName || ' ' || c.LastName AS CustomerName,\n    COUNT(DISTINCT d.Currency) AS DepositCurrenciesCount,\n    SUM(CASE \n        WHEN d.Currency = 'USD' THEN d.Amount * 75\n        WHEN d.Currency = 'EUR' THEN d.Amount * 85\n        ELSE d.Amount\n    END) AS TotalDepositsRUB,\n    SUM(l.PrincipalAmount) AS TotalLoanAmount,\n    SUM(CASE \n        WHEN d.Currency = 'USD' THEN d.Amount * 75\n        WHEN d.Currency = 'EUR' THEN d.Amount * 85\n        ELSE d.Amount\n    END) - SUM(l.PrincipalAmount) AS Difference\nFROM \n    Customers c\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\nGROUP BY \n    c.CustomerID, c.FirstName, c.LastName\nHAVING \n    COUNT(DISTINCT d.Currency) > 1\nORDER BY \n    Difference DESC;",
            "gigachat_response": "SELECT \n    c.FirstName || ' ' || c.LastName AS FullName,\n    COUNT(DISTINCT d.Currency) AS NumCurrencies,\n    SUM(\n        CASE \n            WHEN d.Currency = 'RUB' THEN d.Amount\n            WHEN d.Currency = 'USD' THEN d.Amount * 75\n            WHEN d.Currency = 'EUR' THEN d.Amount * 85\n        END\n    ) AS TotalDepositInRubles,\n    SUM(l.PrincipalAmount) AS TotalLoanAmount,\n    SUM(\n        CASE \n            WHEN d.Currency = 'RUB' THEN d.Amount\n            WHEN d.Currency = 'USD' THEN d.Amount * 75\n            WHEN d.Currency = 'EUR' THEN d.Amount * 85\n        END\n    ) - SUM(l.PrincipalAmount) AS Difference\nFROM \n    Customers c\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\nGROUP BY \n    c.CustomerID, c.FirstName, c.LastName\nHAVING \n    COUNT(DISTINCT d.Currency) > 1\nORDER BY \n    Difference DESC;",
            "gigachat_response_ru": "SELECT \n    c.FirstName || ' ' || c.LastName AS FullName,\n    COUNT(DISTINCT d.Currency) AS NumCurrencies,\n    SUM(\n        CASE \n            WHEN d.Currency = 'USD' THEN d.Amount * 75\n            WHEN d.Currency = 'EUR' THEN d.Amount * 85\n            ELSE d.Amount\n        END\n    ) AS TotalDepositInRubles,\n    l.TotalLoanAmount,\n    (SUM(\n        CASE \n            WHEN d.Currency = 'USD' THEN d.Amount * 75\n            WHEN d.Currency = 'EUR' THEN d.Amount * 85\n            ELSE d.Amount\n        END\n    ) - l.TotalLoanAmount) AS Difference\nFROM \n    Customers c\nINNER JOIN \n    Deposits d ON c.CustomerID = d.CustomerID\nINNER JOIN \n    (\n        SELECT \n            CustomerID, \n            SUM(PrincipalAmount) AS TotalLoanAmount\n        FROM \n            Loans\n        WHERE \n            Status = 'Активно'\n        GROUP BY \n            CustomerID\n    ) l ON c.CustomerID = l.CustomerID\nWHERE \n    d.Status = 'Активен'\nGROUP BY \n    c.CustomerID, c.FirstName, c.LastName, l.TotalLoanAmount\nHAVING \n    COUNT(DISTINCT d.Currency) > 1\nORDER BY \n    Difference DESC;",
            "gpt-4o_response": "SELECT \n    c.FirstName, \n    c.LastName, \n    COUNT(DISTINCT d.Currency) AS CurrencyCount, \n    SUM(CASE \n        WHEN d.Currency = 'USD' THEN d.Amount * 75 \n        WHEN d.Currency = 'EUR' THEN d.Amount * 85 \n        ELSE d.Amount \n    END) AS TotalDepositsInRUB, \n    SUM(l.PrincipalAmount) AS TotalLoanAmount, \n    SUM(CASE \n        WHEN d.Currency = 'USD' THEN d.Amount * 75 \n        WHEN d.Currency = 'EUR' THEN d.Amount * 85 \n        ELSE d.Amount \n    END) - SUM(l.PrincipalAmount) AS Difference\nFROM \n    Customers c\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\nGROUP BY \n    c.CustomerID, c.FirstName, c.LastName\nHAVING \n    COUNT(DISTINCT d.Currency) > 1\nORDER BY \n    Difference DESC;",
            "gpt-4o_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    COUNT(DISTINCT d.Currency) AS CurrencyCount, \n    SUM(CASE \n        WHEN d.Currency = 'USD' THEN d.Amount * 75 \n        WHEN d.Currency = 'EUR' THEN d.Amount * 85 \n        ELSE d.Amount \n    END) AS TotalDepositsInRUB, \n    SUM(l.PrincipalAmount) AS TotalLoanAmount, \n    SUM(CASE \n        WHEN d.Currency = 'USD' THEN d.Amount * 75 \n        WHEN d.Currency = 'EUR' THEN d.Amount * 85 \n        ELSE d.Amount \n    END) - SUM(l.PrincipalAmount) AS Difference\nFROM \n    Customers c\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\nGROUP BY \n    c.CustomerID, c.FirstName, c.LastName\nHAVING \n    COUNT(DISTINCT d.Currency) > 1\nORDER BY \n    Difference DESC;"
        },
        {
            "question": "Найти клиентов, у которых есть активные страховые полисы с выплатами по страховым случаям, и при этом есть активные кредиты с регулярными платежами. Показать имя клиента, тип страхового полиса, сумму выплат по страховым случаям, тип кредита, сумму кредита и отношение суммы выплат к сумме кредита. Результат отсортировать по этому отношению по убыванию.",
            "sql_query": "WITH InsuranceClaims AS (SELECT ip.CustomerID, ip.PolicyType, SUM(pc.ClaimAmount) as TotalClaims FROM InsurancePolicies ip JOIN PolicyClaims pc ON ip.PolicyID = pc.PolicyID WHERE ip.Status = 'Активен' AND pc.Status = 'Выплачено' GROUP BY ip.CustomerID, ip.PolicyType), LoanPayments AS (SELECT l.CustomerID, l.LoanType, l.PrincipalAmount, COUNT(lp.PaymentID) as PaymentCount FROM Loans l LEFT JOIN LoanPayments lp ON l.LoanID = lp.LoanID AND lp.Status = 'Завершено' WHERE l.Status = 'Активно' GROUP BY l.CustomerID, l.LoanType, l.PrincipalAmount HAVING COUNT(lp.PaymentID) > 0) SELECT c.FirstName, c.LastName, ic.PolicyType, ic.TotalClaims, lp.LoanType, lp.PrincipalAmount, (ic.TotalClaims / lp.PrincipalAmount) as ClaimsToLoanRatio FROM Customers c JOIN InsuranceClaims ic ON c.CustomerID = ic.CustomerID JOIN LoanPayments lp ON c.CustomerID = lp.CustomerID ORDER BY ClaimsToLoanRatio DESC;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    c.FirstName,\n    c.LastName,\n    ip.PolicyType,\n    SUM(pc.ClaimAmount) AS TotalClaimAmount,\n    l.LoanType,\n    l.PrincipalAmount,\n    SUM(pc.ClaimAmount) / l.PrincipalAmount AS ClaimToLoanRatio\nFROM Customers c\nJOIN InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nJOIN PolicyClaims pc ON ip.PolicyID = pc.PolicyID\nJOIN Loans l ON c.CustomerID = l.CustomerID\nWHERE ip.Status = 'Активен'\n  AND pc.Status IN ('Выплачено', 'Утверждено')\n  AND l.Status = 'Активно'\nGROUP BY\n    c.FirstName,\n    c.LastName,\n    ip.PolicyType,\n    l.LoanType,\n    l.PrincipalAmount\nORDER BY\n    ClaimToLoanRatio DESC;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    c.FirstName,\n    c.LastName,\n    ip.PolicyType,\n    SUM(pc.ClaimAmount) AS TotalClaimAmount,\n    l.LoanType,\n    l.PrincipalAmount,\n    SUM(pc.ClaimAmount) / l.PrincipalAmount AS ClaimToLoanRatio\nFROM\n    Customers c\nJOIN\n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nJOIN\n    PolicyClaims pc ON ip.PolicyID = pc.PolicyID\nJOIN\n    Loans l ON c.CustomerID = l.CustomerID\nWHERE\n    ip.Status = 'Активен' AND l.Status = 'Активно'\nGROUP BY\n    c.FirstName,\n    c.LastName,\n    ip.PolicyType,\n    l.LoanType,\n    l.PrincipalAmount\nHAVING\n    SUM(pc.ClaimAmount) > 0\nORDER BY\n    ClaimToLoanRatio DESC;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    c.FirstName, \n    c.LastName, \n    ip.PolicyType, \n    pc.ClaimAmount, \n    l.LoanType, \n    l.PrincipalAmount, \n    (pc.ClaimAmount / l.PrincipalAmount) AS ClaimToLoanRatio\nFROM \n    Customers c\nJOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID AND ip.Status = 'Активен'\nJOIN \n    PolicyClaims pc ON ip.PolicyID = pc.PolicyID AND pc.Status IN ('Выплачено', 'Утверждено')\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\nWHERE \n    EXISTS (\n        SELECT 1 \n        FROM LoanPayments lp \n        WHERE lp.LoanID = l.LoanID AND lp.Status = 'Завершено'\n    )\nORDER BY \n    ClaimToLoanRatio DESC;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    ip.PolicyType, \n    pc.ClaimAmount, \n    l.LoanType, \n    l.PrincipalAmount, \n    pc.ClaimAmount / l.PrincipalAmount AS ClaimToLoanRatio\nFROM \n    Customers c\nJOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nJOIN \n    PolicyClaims pc ON ip.PolicyID = pc.PolicyID\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID\nWHERE \n    ip.Status = 'Активен' \n    AND pc.Status IN ('Выплачено', 'Утверждено')\n    AND l.Status = 'Активно'\nORDER BY \n    ClaimToLoanRatio DESC;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    c.FirstName || ' ' || c.LastName AS CustomerName,\n    ip.PolicyType,\n    SUM(pc.ClaimAmount) AS TotalClaimAmount,\n    l.LoanType,\n    l.PrincipalAmount AS LoanAmount,\n    (SUM(pc.ClaimAmount) / l.PrincipalAmount) AS ClaimToLoanRatio\nFROM \n    Customers c\nJOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID AND ip.Status = 'Активен'\nJOIN \n    PolicyClaims pc ON ip.PolicyID = pc.PolicyID AND pc.Status IN ('Выплачено', 'Утверждено')\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\nJOIN \n    LoanPayments lp ON l.LoanID = lp.LoanID AND lp.Status = 'Завершено'\nGROUP BY \n    c.CustomerID, c.FirstName, c.LastName, ip.PolicyType, l.LoanType, l.PrincipalAmount\nHAVING \n    COUNT(lp.PaymentID) > 0\nORDER BY \n    ClaimToLoanRatio DESC;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    c.FirstName || ' ' || c.LastName AS CustomerName,\n    ip.PolicyType,\n    SUM(pc.ClaimAmount) AS TotalClaimAmount,\n    l.LoanType,\n    l.PrincipalAmount,\n    (SUM(pc.ClaimAmount) / l.PrincipalAmount) AS ClaimToLoanRatio\nFROM \n    Customers c\nJOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID AND ip.Status = 'Активен'\nJOIN \n    PolicyClaims pc ON ip.PolicyID = pc.PolicyID AND pc.Status IN ('Выплачено', 'Утверждено')\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\nJOIN \n    LoanPayments lp ON l.LoanID = lp.LoanID AND lp.Status = 'Завершено'\nGROUP BY \n    c.CustomerID, c.FirstName, c.LastName, ip.PolicyType, l.LoanType, l.PrincipalAmount\nHAVING \n    COUNT(DISTINCT lp.PaymentID) > 0\nORDER BY \n    ClaimToLoanRatio DESC;",
            "gigachat_response": "SELECT \n    c.FirstName || ' ' || c.LastName AS FullName,\n    ip.PolicyType,\n    SUM(pc.ClaimAmount) AS TotalClaimAmounts,\n    l.LoanType,\n    l.PrincipalAmount,\n    ROUND(SUM(pc.ClaimAmount)/l.PrincipalAmount * 100, 2) AS ClaimToLoanPercentage\nFROM \n    Customers c\nJOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID AND ip.Status = 'Активен'\nJOIN \n    PolicyClaims pc ON ip.PolicyID = pc.PolicyID\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\nWHERE \n    EXISTS (SELECT 1 FROM LoanPayments lp WHERE lp.LoanID = l.LoanID AND lp.Status = 'Завершено')\nGROUP BY \n    c.FirstName, c.LastName, ip.PolicyType, l.LoanType, l.PrincipalAmount\nORDER BY \n    ClaimToLoanPercentage DESC;",
            "gigachat_response_ru": "SELECT \n    c.FirstName || ' ' || c.LastName AS FullName,\n    ip.PolicyType,\n    pc.ClaimAmount,\n    l.LoanType,\n    l.PrincipalAmount,\n    ROUND(pc.ClaimAmount * 100.0 / l.PrincipalAmount, 2) AS ClaimToLoanRatio\nFROM \n    Customers c\nINNER JOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID AND ip.Status = 'Активен'\nINNER JOIN \n    PolicyClaims pc ON ip.PolicyID = pc.PolicyID\nINNER JOIN \n    Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\nWHERE \n    EXISTS (SELECT 1 FROM LoanPayments lp WHERE lp.LoanID = l.LoanID AND lp.Status = 'Завершено')\nORDER BY \n    ClaimToLoanRatio DESC;",
            "gpt-4o_response": "SELECT \n    c.FirstName, \n    c.LastName, \n    ip.PolicyType, \n    SUM(pc.ClaimAmount) AS TotalClaimAmount, \n    l.LoanType, \n    l.PrincipalAmount, \n    SUM(pc.ClaimAmount) / l.PrincipalAmount AS ClaimToLoanRatio\nFROM \n    Customers c\nJOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nJOIN \n    PolicyClaims pc ON ip.PolicyID = pc.PolicyID\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID\nJOIN \n    LoanPayments lp ON l.LoanID = lp.LoanID\nWHERE \n    ip.Status = 'Активен' \n    AND pc.Status = 'Выплачено'\n    AND l.Status = 'Активно'\n    AND lp.Status = 'Завершено'\nGROUP BY \n    c.FirstName, \n    c.LastName, \n    ip.PolicyType, \n    l.LoanType, \n    l.PrincipalAmount\nORDER BY \n    ClaimToLoanRatio DESC;",
            "gpt-4o_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    ip.PolicyType, \n    SUM(pc.ClaimAmount) AS TotalClaimAmount, \n    l.LoanType, \n    l.PrincipalAmount, \n    SUM(pc.ClaimAmount) / l.PrincipalAmount AS ClaimToLoanRatio\nFROM \n    Customers c\nJOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nJOIN \n    PolicyClaims pc ON ip.PolicyID = pc.PolicyID\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID\nJOIN \n    LoanPayments lp ON l.LoanID = lp.LoanID\nWHERE \n    ip.Status = 'Активен' \n    AND l.Status = 'Активно' \n    AND lp.Status = 'Завершено'\nGROUP BY \n    c.FirstName, \n    c.LastName, \n    ip.PolicyType, \n    l.LoanType, \n    l.PrincipalAmount\nORDER BY \n    ClaimToLoanRatio DESC;"
        },
        {
            "question": "Вывести топ-5 отделений банка по эффективности работы сотрудников: для каждого отделения показать среднюю сумму транзакций на одного сотрудника, среднюю сумму кредитов на одного сотрудника и среднюю сумму депозитов на одного сотрудника. Учитывать только активные транзакции, кредиты и депозиты. Результат отсортировать по средней сумме транзакций на сотрудника по убыванию.",
            "sql_query": "WITH BranchMetrics AS (SELECT b.BranchID, b.BranchName, COUNT(DISTINCT e.EmployeeID) as EmployeeCount, SUM(t.Amount) as TotalTransactions, SUM(l.PrincipalAmount) as TotalLoans, SUM(d.Amount) as TotalDeposits FROM Branches b LEFT JOIN Employees e ON b.BranchID = e.BranchID LEFT JOIN Customers c ON b.BranchID = c.BranchID LEFT JOIN Transactions t ON c.CustomerID = t.AccountID AND t.Status = 'Завершено' LEFT JOIN Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно' LEFT JOIN Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен' GROUP BY b.BranchID, b.BranchName HAVING COUNT(DISTINCT e.EmployeeID) > 0) SELECT BranchName, (TotalTransactions / EmployeeCount) as AvgTransactionsPerEmployee, (TotalLoans / EmployeeCount) as AvgLoansPerEmployee, (TotalDeposits / EmployeeCount) as AvgDepositsPerEmployee FROM BranchMetrics ORDER BY AvgTransactionsPerEmployee DESC LIMIT 5;",
            "google/gemini-2.0-flash-001_response": "WITH BranchEmployeeCounts AS (\n    SELECT\n        b.BranchID,\n        b.BranchName,\n        COUNT(e.EmployeeID) AS EmployeeCount\n    FROM\n        Branches b\n    JOIN\n        Employees e ON b.BranchID = e.BranchID\n    GROUP BY\n        b.BranchID,\n        b.BranchName\n),\nBranchTransactionTotals AS (\n    SELECT\n        b.BranchID,\n        SUM(t.Amount) AS TotalTransactionAmount\n    FROM\n        Branches b\n    JOIN\n        Customers c ON b.BranchID = c.BranchID\n    JOIN\n        Accounts a ON c.CustomerID = a.CustomerID\n    JOIN\n        Transactions t ON a.AccountID = t.AccountID\n    WHERE t.Status = 'Завершено'\n    GROUP BY\n        b.BranchID\n),\nBranchLoanTotals AS (\n    SELECT\n        b.BranchID,\n        SUM(l.PrincipalAmount) AS TotalLoanAmount\n    FROM\n        Branches b\n    JOIN\n        Customers c ON b.BranchID = c.BranchID\n    JOIN\n        Loans l ON c.CustomerID = l.CustomerID\n    WHERE l.Status = 'Активно'\n    GROUP BY\n        b.BranchID\n),\nBranchDepositTotals AS (\n    SELECT\n        b.BranchID,\n        SUM(d.Amount) AS TotalDepositAmount\n    FROM\n        Branches b\n    JOIN\n        Customers c ON b.BranchID = c.BranchID\n    JOIN\n        Deposits d ON c.CustomerID = d.CustomerID\n    WHERE d.Status = 'Активен'\n    GROUP BY\n        b.BranchID\n)\nSELECT\n    bec.BranchName,\n    COALESCE(btt.TotalTransactionAmount / bec.EmployeeCount, 0) AS AvgTransactionAmountPerEmployee,\n    COALESCE(blt.TotalLoanAmount / bec.EmployeeCount, 0) AS AvgLoanAmountPerEmployee,\n    COALESCE(bdt.TotalDepositAmount / bec.EmployeeCount, 0) AS AvgDepositAmountPerEmployee\nFROM\n    BranchEmployeeCounts bec\nLEFT JOIN\n    BranchTransactionTotals btt ON bec.BranchID = btt.BranchID\nLEFT JOIN\n    BranchLoanTotals blt ON bec.BranchID = blt.BranchID\nLEFT JOIN\n    BranchDepositTotals bdt ON bec.BranchID = bdt.BranchID\nORDER BY\n    AvgTransactionAmountPerEmployee DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response_ru": "WITH BranchEmployeeCounts AS (\n    SELECT\n        b.BranchID,\n        b.BranchName,\n        COUNT(e.EmployeeID) AS EmployeeCount\n    FROM\n        Branches b\n    JOIN\n        Employees e ON b.BranchID = e.BranchID\n    GROUP BY\n        b.BranchID,\n        b.BranchName\n),\nBranchTransactionTotals AS (\n    SELECT\n        b.BranchID,\n        SUM(t.Amount) AS TotalTransactionAmount\n    FROM\n        Branches b\n    JOIN\n        Accounts a ON b.BranchID = (SELECT BranchID FROM Customers WHERE CustomerID = a.CustomerID)\n    JOIN\n        Transactions t ON a.AccountID = t.AccountID\n    WHERE t.Status = 'Завершено'\n    GROUP BY\n        b.BranchID\n),\nBranchLoanTotals AS (\n    SELECT\n        b.BranchID,\n        SUM(l.PrincipalAmount) AS TotalLoanAmount\n    FROM\n        Branches b\n    JOIN\n        Loans l ON b.BranchID = (SELECT BranchID FROM Customers WHERE CustomerID = l.CustomerID)\n    WHERE l.Status = 'Активно'\n    GROUP BY\n        b.BranchID\n),\nBranchDepositTotals AS (\n    SELECT\n        b.BranchID,\n        SUM(d.Amount) AS TotalDepositAmount\n    FROM\n        Branches b\n    JOIN\n        Deposits d ON b.BranchID = (SELECT BranchID FROM Customers WHERE CustomerID = d.CustomerID)\n    WHERE d.Status = 'Активен'\n    GROUP BY\n        b.BranchID\n)\nSELECT\n    bec.BranchName,\n    btt.TotalTransactionAmount / bec.EmployeeCount AS AvgTransactionAmountPerEmployee,\n    blt.TotalLoanAmount / bec.EmployeeCount AS AvgLoanAmountPerEmployee,\n    bdt.TotalDepositAmount / bec.EmployeeCount AS AvgDepositAmountPerEmployee\nFROM\n    BranchEmployeeCounts bec\nLEFT JOIN\n    BranchTransactionTotals btt ON bec.BranchID = btt.BranchID\nLEFT JOIN\n    BranchLoanTotals blt ON bec.BranchID = blt.BranchID\nLEFT JOIN\n    BranchDepositTotals bdt ON bec.BranchID = bdt.BranchID\nORDER BY\n    AvgTransactionAmountPerEmployee DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH BranchEfficiency AS (\n  SELECT \n    b.BranchName,\n    COUNT(DISTINCT e.EmployeeID) AS TotalEmployees,\n    SUM(CASE WHEN t.Status = 'Завершено' THEN t.Amount ELSE 0 END) AS TotalTransactions,\n    SUM(CASE WHEN l.Status = 'Активно' THEN l.PrincipalAmount ELSE 0 END) AS TotalLoans,\n    SUM(CASE WHEN d.Status = 'Активен' THEN d.Amount ELSE 0 END) AS TotalDeposits\n  FROM \n    Branches b\n  LEFT JOIN \n    Employees e ON b.BranchID = e.BranchID\n  LEFT JOIN \n    Accounts a ON b.BranchID = a.BranchID\n  LEFT JOIN \n    Transactions t ON a.AccountID = t.AccountID\n  LEFT JOIN \n    Loans l ON b.BranchID = l.BranchID\n  LEFT JOIN \n    Deposits d ON b.BranchID = d.BranchID\n  GROUP BY \n    b.BranchName\n)\nSELECT \n  BranchName,\n  TotalEmployees,\n  (TotalTransactions / TotalEmployees) AS AvgTransactionPerEmployee,\n  (TotalLoans / TotalEmployees) AS AvgLoanPerEmployee,\n  (TotalDeposits / TotalEmployees) AS AvgDepositPerEmployee\nFROM \n  BranchEfficiency\nWHERE \n  TotalEmployees > 0\nORDER BY \n  AvgTransactionPerEmployee DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH BranchTransactions AS (\n  SELECT \n    b.BranchID, \n    b.BranchName, \n    SUM(t.Amount) AS TotalTransactionAmount\n  FROM \n    Branches b\n  JOIN \n    Employees e ON b.BranchID = e.BranchID\n  JOIN \n    Accounts a ON e.EmployeeID = a.CustomerID\n  JOIN \n    Transactions t ON a.AccountID = t.AccountID\n  WHERE \n    t.Status = 'Завершено'\n  GROUP BY \n    b.BranchID, b.BranchName\n),\nBranchLoans AS (\n  SELECT \n    b.BranchID, \n    b.BranchName, \n    SUM(l.PrincipalAmount) AS TotalLoanAmount\n  FROM \n    Branches b\n  JOIN \n    Employees e ON b.BranchID = e.BranchID\n  JOIN \n    Customers c ON e.EmployeeID = c.CustomerID\n  JOIN \n    Loans l ON c.CustomerID = l.CustomerID\n  WHERE \n    l.Status = 'Активно'\n  GROUP BY \n    b.BranchID, b.BranchName\n),\nBranchDeposits AS (\n  SELECT \n    b.BranchID, \n    b.BranchName, \n    SUM(d.Amount) AS TotalDepositAmount\n  FROM \n    Branches b\n  JOIN \n    Employees e ON b.BranchID = e.BranchID\n  JOIN \n    Customers c ON e.EmployeeID = c.CustomerID\n  JOIN \n    Deposits d ON c.CustomerID = d.CustomerID\n  WHERE \n    d.Status = 'Активен'\n  GROUP BY \n    b.BranchID, b.BranchName\n),\nEmployeeCount AS (\n  SELECT \n    b.BranchID, \n    b.BranchName, \n    COUNT(e.EmployeeID) AS EmployeeCount\n  FROM \n    Branches b\n  JOIN \n    Employees e ON b.BranchID = e.BranchID\n  GROUP BY \n    b.BranchID, b.BranchName\n)\nSELECT \n  b.BranchName, \n  (bt.TotalTransactionAmount / ec.EmployeeCount) AS AvgTransactionAmountPerEmployee,\n  (bl.TotalLoanAmount / ec.EmployeeCount) AS AvgLoanAmountPerEmployee,\n  (bd.TotalDepositAmount / ec.EmployeeCount) AS AvgDepositAmountPerEmployee\nFROM \n  BranchTransactions bt\nJOIN \n  BranchLoans bl ON bt.BranchID = bl.BranchID\nJOIN \n  BranchDeposits bd ON bt.BranchID = bd.BranchID\nJOIN \n  EmployeeCount ec ON bt.BranchID = ec.BranchID\nJOIN \n  Branches b ON bt.BranchID = b.BranchID\nORDER BY \n  AvgTransactionAmountPerEmployee DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    b.BranchID,\n    b.BranchName,\n    COALESCE(SUM(t.Amount) / COUNT(DISTINCT e.EmployeeID), 0) AS AvgTransactionPerEmployee,\n    COALESCE(SUM(l.PrincipalAmount) / COUNT(DISTINCT e.EmployeeID), 0) AS AvgLoanPerEmployee,\n    COALESCE(SUM(d.Amount) / COUNT(DISTINCT e.EmployeeID), 0) AS AvgDepositPerEmployee\nFROM \n    Branches b\nLEFT JOIN \n    Employees e ON b.BranchID = e.BranchID\nLEFT JOIN \n    Customers c ON b.BranchID = c.BranchID\nLEFT JOIN \n    Accounts a ON c.CustomerID = a.CustomerID\nLEFT JOIN \n    Transactions t ON a.AccountID = t.AccountID AND t.Status = 'Завершено'\nLEFT JOIN \n    Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\nLEFT JOIN \n    Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\nGROUP BY \n    b.BranchID, b.BranchName\nORDER BY \n    AvgTransactionPerEmployee DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    b.BranchName,\n    COUNT(DISTINCT e.EmployeeID) AS EmployeeCount,\n    COALESCE(SUM(CASE WHEN t.Status = 'Завершено' THEN t.Amount ELSE 0 END) / NULLIF(COUNT(DISTINCT e.EmployeeID), 0), 0) AS AvgTransactionPerEmployee,\n    COALESCE(SUM(CASE WHEN l.Status = 'Активно' THEN l.PrincipalAmount ELSE 0 END) / NULLIF(COUNT(DISTINCT e.EmployeeID), 0), 0) AS AvgLoanPerEmployee,\n    COALESCE(SUM(CASE WHEN d.Status = 'Активен' THEN d.Amount ELSE 0 END) / NULLIF(COUNT(DISTINCT e.EmployeeID), 0), 0) AS AvgDepositPerEmployee\nFROM \n    Branches b\nLEFT JOIN \n    Employees e ON b.BranchID = e.BranchID\nLEFT JOIN \n    Customers c ON b.BranchID = c.BranchID\nLEFT JOIN \n    Accounts a ON c.CustomerID = a.CustomerID\nLEFT JOIN \n    Transactions t ON a.AccountID = t.AccountID\nLEFT JOIN \n    Loans l ON c.CustomerID = l.CustomerID\nLEFT JOIN \n    Deposits d ON c.CustomerID = d.CustomerID\nGROUP BY \n    b.BranchName\nORDER BY \n    AvgTransactionPerEmployee DESC\nLIMIT 5;",
            "gigachat_response": "SELECT \n    b.BranchName,\n    AVG(t.Amount) / COUNT(DISTINCT e.EmployeeID) AS AvgTransactionPerEmployee,\n    SUM(l.PrincipalAmount) / COUNT(DISTINCT e.EmployeeID) AS AvgLoanPerEmployee,\n    SUM(d.Amount) / COUNT(DISTINCT e.EmployeeID) AS AvgDepositPerEmployee\nFROM \n    Branches b\nJOIN \n    Employees e ON b.BranchID = e.BranchID\nLEFT JOIN \n    Transactions t ON e.BranchID = t.AccountID AND t.Status = 'Завершено'\nLEFT JOIN \n    Loans l ON e.BranchID = l.CustomerID AND l.Status = 'Активно'\nLEFT JOIN \n    Deposits d ON e.BranchID = d.CustomerID AND d.Status = 'Активен'\nGROUP BY \n    b.BranchName\nORDER BY \n    AvgTransactionPerEmployee DESC\nLIMIT 5;",
            "gigachat_response_ru": "SELECT \n    b.BranchName,\n    AVG(t.AmountPerEmployee) AS AvgTransactionAmountPerEmployee,\n    AVG(lp.AvgLoanAmountPerEmployee) AS AvgLoanAmountPerEmployee,\n    AVG(dp.AvgDepositAmountPerEmployee) AS AvgDepositAmountPerEmployee\nFROM \n    Branches b\nLEFT JOIN (\n    -- Средняя сумма транзакций на сотрудника\n    SELECT \n        e.BranchID,\n        SUM(t.Amount) / COUNT(DISTINCT e.EmployeeID) AS AmountPerEmployee\n    FROM \n        Employees e\n    INNER JOIN Transactions t ON e.BranchID = (SELECT BranchID FROM Accounts WHERE AccountID = t.AccountID)\n    WHERE \n        t.Status = 'Завершено'\n    GROUP BY \n        e.BranchID\n) t ON b.BranchID = t.BranchID\nLEFT JOIN (\n    -- Средняя сумма выданных кредитов на сотрудника\n    SELECT \n        e.BranchID,\n        SUM(l.PrincipalAmount) / COUNT(DISTINCT e.EmployeeID) AS AvgLoanAmountPerEmployee\n    FROM \n        Employees e\n    INNER JOIN Loans l ON e.BranchID = (SELECT BranchID FROM Customers WHERE CustomerID = l.CustomerID)\n    WHERE \n        l.Status = 'Активно'\n    GROUP BY \n        e.BranchID\n) lp ON b.BranchID = lp.BranchID\nLEFT JOIN (\n    -- Средняя сумма привлечённых депозитов на сотрудника\n    SELECT \n        e.BranchID,\n        SUM(d.Amount) / COUNT(DISTINCT e.EmployeeID) AS AvgDepositAmountPerEmployee\n    FROM \n        Employees e\n    INNER JOIN Deposits d ON e.BranchID = (SELECT BranchID FROM Customers WHERE CustomerID = d.CustomerID)\n    WHERE \n        d.Status = 'Активен'\n    GROUP BY \n        e.BranchID\n) dp ON b.BranchID = dp.BranchID\nGROUP BY \n    b.BranchName\nORDER BY \n    AvgTransactionAmountPerEmployee DESC\nLIMIT 5;",
            "gpt-4o_response": "SELECT \n    b.BranchName,\n    AVG(t.Amount) AS AvgTransactionAmountPerEmployee,\n    AVG(l.PrincipalAmount) AS AvgLoanAmountPerEmployee,\n    AVG(d.Amount) AS AvgDepositAmountPerEmployee\nFROM \n    Branches b\nJOIN \n    Employees e ON b.BranchID = e.BranchID\nLEFT JOIN \n    Accounts a ON e.BranchID = a.CustomerID\nLEFT JOIN \n    Transactions t ON a.AccountID = t.AccountID AND t.Status = 'Завершено'\nLEFT JOIN \n    Loans l ON e.BranchID = l.CustomerID AND l.Status = 'Активно'\nLEFT JOIN \n    Deposits d ON e.BranchID = d.CustomerID AND d.Status = 'Активен'\nGROUP BY \n    b.BranchID, b.BranchName\nORDER BY \n    AvgTransactionAmountPerEmployee DESC\nLIMIT 5;",
            "gpt-4o_response_ru": "SELECT \n    b.BranchName,\n    AVG(t.Amount) AS AvgTransactionAmountPerEmployee,\n    AVG(l.PrincipalAmount) AS AvgLoanAmountPerEmployee,\n    AVG(d.Amount) AS AvgDepositAmountPerEmployee\nFROM \n    Branches b\nJOIN \n    Employees e ON b.BranchID = e.BranchID\nLEFT JOIN \n    Accounts a ON a.CustomerID IN (SELECT CustomerID FROM Customers WHERE BranchID = b.BranchID)\nLEFT JOIN \n    Transactions t ON t.AccountID = a.AccountID AND t.Status = 'Завершено'\nLEFT JOIN \n    Loans l ON l.CustomerID IN (SELECT CustomerID FROM Customers WHERE BranchID = b.BranchID) AND l.Status = 'Активно'\nLEFT JOIN \n    Deposits d ON d.CustomerID IN (SELECT CustomerID FROM Customers WHERE BranchID = b.BranchID) AND d.Status = 'Активен'\nGROUP BY \n    b.BranchID, b.BranchName\nORDER BY \n    AvgTransactionAmountPerEmployee DESC\nLIMIT 5;"
        },
        {
            "question": "Найти клиентов с наиболее разнообразным портфелем банковских продуктов: для каждого клиента подсчитать количество уникальных типов продуктов (кредиты, депозиты, страховые полисы, кредитные карты) и общую сумму активов. Показать имя клиента, количество типов продуктов, общую сумму активов и список типов продуктов. Результат отсортировать по количеству типов продуктов по убыванию, затем по сумме активов по убыванию. Показать только топ-8 клиентов.",
            "sql_query": "WITH CustomerProducts AS (SELECT c.CustomerID, c.FirstName, c.LastName, COUNT(DISTINCT CASE WHEN l.LoanID IS NOT NULL THEN 'Кредит' END) + COUNT(DISTINCT CASE WHEN d.DepositID IS NOT NULL THEN 'Депозит' END) + COUNT(DISTINCT CASE WHEN ip.PolicyID IS NOT NULL THEN 'Страховка' END) + COUNT(DISTINCT CASE WHEN cc.CardID IS NOT NULL THEN 'Кредитная карта' END) as ProductTypes, GROUP_CONCAT(DISTINCT CASE WHEN l.LoanID IS NOT NULL THEN 'Кредит' WHEN d.DepositID IS NOT NULL THEN 'Депозит' WHEN ip.PolicyID IS NOT NULL THEN 'Страховка' WHEN cc.CardID IS NOT NULL THEN 'Кредитная карта' END) as ProductList, SUM(COALESCE(d.Amount, 0)) + SUM(COALESCE(cc.Balance, 0)) as TotalAssets FROM Customers c LEFT JOIN Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно' LEFT JOIN Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен' LEFT JOIN InsurancePolicies ip ON c.CustomerID = ip.CustomerID AND ip.Status = 'Активен' LEFT JOIN CreditCards cc ON c.CustomerID = cc.CustomerID AND cc.Status = 'Активна' GROUP BY c.CustomerID, c.FirstName, c.LastName HAVING ProductTypes > 1) SELECT FirstName, LastName, ProductTypes, TotalAssets, ProductList FROM CustomerProducts ORDER BY ProductTypes DESC, TotalAssets DESC LIMIT 8;",
            "google/gemini-2.0-flash-001_response": "WITH CustomerProductSummary AS (\n    SELECT\n        c.CustomerID,\n        c.FirstName,\n        c.LastName,\n        COUNT(DISTINCT CASE\n            WHEN l.LoanID IS NOT NULL THEN 'Loan'\n            WHEN d.DepositID IS NOT NULL THEN 'Deposit'\n            WHEN ip.PolicyID IS NOT NULL THEN 'InsurancePolicy'\n            WHEN cc.CardID IS NOT NULL THEN 'CreditCard'\n            ELSE NULL\n        END) AS ProductTypeCount,\n        COALESCE((SELECT SUM(Balance) FROM Accounts WHERE CustomerID = c.CustomerID), 0) +\n        COALESCE((SELECT SUM(PrincipalAmount) FROM Loans WHERE CustomerID = c.CustomerID), 0) +\n        COALESCE((SELECT SUM(Amount) FROM Deposits WHERE CustomerID = c.CustomerID), 0) +\n        COALESCE((SELECT SUM(CoverageAmount) FROM InsurancePolicies WHERE CustomerID = c.CustomerID), 0) AS TotalAssets,\n        GROUP_CONCAT(DISTINCT CASE\n            WHEN l.LoanID IS NOT NULL THEN 'Loan'\n            WHEN d.DepositID IS NOT NULL THEN 'Deposit'\n            WHEN ip.PolicyID IS NOT NULL THEN 'InsurancePolicy'\n            WHEN cc.CardID IS NOT NULL THEN 'CreditCard'\n            ELSE NULL\n        END) AS ProductTypes\n    FROM\n        Customers c\n    LEFT JOIN\n        Loans l ON c.CustomerID = l.CustomerID\n    LEFT JOIN\n        Deposits d ON c.CustomerID = d.CustomerID\n    LEFT JOIN\n        InsurancePolicies ip ON c.CustomerID = ip.CustomerID\n    LEFT JOIN\n        CreditCards cc ON c.CustomerID = cc.CustomerID\n    GROUP BY\n        c.CustomerID, c.FirstName, c.LastName\n)\nSELECT\n    FirstName,\n    LastName,\n    ProductTypeCount,\n    TotalAssets,\n    ProductTypes\nFROM\n    CustomerProductSummary\nORDER BY\n    ProductTypeCount DESC, TotalAssets DESC\nLIMIT 8;",
            "google/gemini-2.0-flash-001_response_ru": "WITH CustomerProducts AS (\n    SELECT\n        c.CustomerID,\n        c.FirstName,\n        c.LastName,\n        SUM(COALESCE(l.PrincipalAmount, 0)) AS TotalLoans,\n        SUM(COALESCE(d.Amount, 0)) AS TotalDeposits,\n        SUM(COALESCE(ip.CoverageAmount, 0)) AS TotalInsurance,\n        SUM(COALESCE(cc.CreditLimit, 0)) AS TotalCreditLimit,\n        COUNT(DISTINCT CASE WHEN l.LoanID IS NOT NULL THEN 'Loan' END) AS LoanCount,\n        COUNT(DISTINCT CASE WHEN d.DepositID IS NOT NULL THEN 'Deposit' END) AS DepositCount,\n        COUNT(DISTINCT CASE WHEN ip.PolicyID IS NOT NULL THEN 'Insurance' END) AS InsuranceCount,\n        COUNT(DISTINCT CASE WHEN cc.CardID IS NOT NULL THEN 'CreditCard' END) AS CreditCardCount\n    FROM\n        Customers c\n    LEFT JOIN\n        Loans l ON c.CustomerID = l.CustomerID\n    LEFT JOIN\n        Deposits d ON c.CustomerID = d.CustomerID\n    LEFT JOIN\n        InsurancePolicies ip ON c.CustomerID = ip.CustomerID\n    LEFT JOIN\n        CreditCards cc ON c.CustomerID = cc.CustomerID\n    GROUP BY\n        c.CustomerID, c.FirstName, c.LastName\n),\nAggregatedCustomerData AS (\n    SELECT\n        CustomerID,\n        FirstName,\n        LastName,\n        (LoanCount + DepositCount + InsuranceCount + CreditCardCount) AS ProductTypeCount,\n        (TotalLoans + TotalDeposits + TotalInsurance + TotalCreditLimit) AS TotalAssets,\n        CASE\n            WHEN LoanCount > 0 THEN 'Loan' || ', '\n            ELSE ''\n        END ||\n        CASE\n            WHEN DepositCount > 0 THEN 'Deposit' || ', '\n            ELSE ''\n        END ||\n        CASE\n            WHEN InsuranceCount > 0 THEN 'Insurance' || ', '\n            ELSE ''\n        END ||\n        CASE\n            WHEN CreditCardCount > 0 THEN 'CreditCard'\n            ELSE ''\n        END AS ProductTypes\n    FROM\n        CustomerProducts\n)\nSELECT\n    FirstName,\n    LastName,\n    ProductTypeCount,\n    TotalAssets,\n    CASE\n        WHEN SUBSTR(ProductTypes, LENGTH(ProductTypes) - 1, 1) = ',' THEN SUBSTR(ProductTypes, 1, LENGTH(ProductTypes) - 2)\n        ELSE ProductTypes\n    END AS ProductTypes\nFROM\n    AggregatedCustomerData\nORDER BY\n    ProductTypeCount DESC, TotalAssets DESC\nLIMIT 8;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH CustomerProducts AS (\n  SELECT \n    c.CustomerID,\n    c.FirstName,\n    c.LastName,\n    CASE WHEN l.LoanID IS NOT NULL THEN 'Кредит' END AS LoanType,\n    CASE WHEN d.DepositID IS NOT NULL THEN 'Депозит' END AS DepositType,\n    CASE WHEN ip.PolicyID IS NOT NULL THEN 'Страховой полис' END AS InsuranceType,\n    CASE WHEN cc.CardID IS NOT NULL THEN 'Кредитная карта' END AS CreditCardType\n  FROM \n    Customers c\n  LEFT JOIN \n    Loans l ON c.CustomerID = l.CustomerID\n  LEFT JOIN \n    Deposits d ON c.CustomerID = d.CustomerID\n  LEFT JOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\n  LEFT JOIN \n    CreditCards cc ON c.CustomerID = cc.CustomerID\n),\nCustomerProductSummary AS (\n  SELECT \n    CustomerID,\n    FirstName,\n    LastName,\n    COUNT(DISTINCT LoanType) + \n    COUNT(DISTINCT DepositType) + \n    COUNT(DISTINCT InsuranceType) + \n    COUNT(DISTINCT CreditCardType) AS ProductTypes,\n    SUM(CASE WHEN LoanType = 'Кредит' THEN l.PrincipalAmount END) + \n    SUM(CASE WHEN DepositType = 'Депозит' THEN d.Amount END) + \n    SUM(CASE WHEN InsuranceType = 'Страховой полис' THEN ip.CoverageAmount END) + \n    SUM(CASE WHEN CreditCardType = 'Кредитная карта' THEN cc.CreditLimit END) AS TotalAssets\n  FROM \n    CustomerProducts\n  LEFT JOIN \n    Loans l ON CustomerProducts.CustomerID = l.CustomerID\n  LEFT JOIN \n    Deposits d ON CustomerProducts.CustomerID = d.CustomerID\n  LEFT JOIN \n    InsurancePolicies ip ON CustomerProducts.CustomerID = ip.CustomerID\n  LEFT JOIN \n    CreditCards cc ON CustomerProducts.CustomerID = cc.CustomerID\n  GROUP BY \n    CustomerID, FirstName, LastName\n),\nProductTypesList AS (\n  SELECT \n    c.CustomerID,\n    STRING_AGG(DISTINCT \n      CASE \n        WHEN l.LoanID IS NOT NULL THEN 'Кредит'\n        WHEN d.DepositID IS NOT NULL THEN 'Депозит'\n        WHEN ip.PolicyID IS NOT NULL THEN 'Страховой полис'\n        WHEN cc.CardID IS NOT NULL THEN 'Кредитная карта'\n      END, ', '\n    ) AS ProductTypesList\n  FROM \n    Customers c\n  LEFT JOIN \n    Loans l ON c.CustomerID = l.CustomerID\n  LEFT JOIN \n    Deposits d ON c.CustomerID = d.CustomerID\n  LEFT JOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\n  LEFT JOIN \n    CreditCards cc ON c.CustomerID = cc.CustomerID\n  GROUP BY \n    c.CustomerID\n)\nSELECT \n  cps.FirstName,\n  cps.LastName,\n  cps.ProductTypes,\n  cps.TotalAssets,\n  ptl.ProductTypesList\nFROM \n  CustomerProductSummary cps\nJOIN \n  ProductTypesList ptl ON cps.CustomerID = ptl.CustomerID\nORDER BY \n  cps.ProductTypes DESC, \n  cps.TotalAssets DESC\nLIMIT 8;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH CustomerProducts AS (\n  SELECT \n    c.CustomerID,\n    c.FirstName,\n    c.LastName,\n    COUNT(DISTINCT CASE WHEN l.LoanID IS NOT NULL THEN 'Кредит' END) +\n    COUNT(DISTINCT CASE WHEN d.DepositID IS NOT NULL THEN 'Депозит' END) +\n    COUNT(DISTINCT CASE WHEN ip.PolicyID IS NOT NULL THEN 'Страховой полис' END) +\n    COUNT(DISTINCT CASE WHEN cc.CardID IS NOT NULL THEN 'Кредитная карта' END) AS ProductTypes,\n    COALESCE(SUM(l.PrincipalAmount), 0) + \n    COALESCE(SUM(d.Amount), 0) + \n    COALESCE(SUM(ip.CoverageAmount), 0) + \n    COALESCE(SUM(cc.CreditLimit), 0) AS TotalAssets,\n    STRING_AGG(DISTINCT \n      CASE \n        WHEN l.LoanID IS NOT NULL THEN 'Кредит'\n        WHEN d.DepositID IS NOT NULL THEN 'Депозит'\n        WHEN ip.PolicyID IS NOT NULL THEN 'Страховой полис'\n        WHEN cc.CardID IS NOT NULL THEN 'Кредитная карта'\n      END, ', ') AS ProductList\n  FROM \n    Customers c\n  LEFT JOIN \n    Loans l ON c.CustomerID = l.CustomerID\n  LEFT JOIN \n    Deposits d ON c.CustomerID = d.CustomerID\n  LEFT JOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\n  LEFT JOIN \n    CreditCards cc ON c.CustomerID = cc.CustomerID\n  GROUP BY \n    c.CustomerID, c.FirstName, c.LastName\n)\nSELECT \n  FirstName,\n  LastName,\n  ProductTypes,\n  TotalAssets,\n  ProductList\nFROM \n  CustomerProducts\nORDER BY \n  ProductTypes DESC, \n  TotalAssets DESC\nLIMIT 8;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH CustomerProducts AS (\n    SELECT \n        c.CustomerID,\n        c.FirstName,\n        c.LastName,\n        COUNT(DISTINCT CASE WHEN a.AccountID IS NOT NULL THEN 'Accounts' END) +\n        COUNT(DISTINCT CASE WHEN l.LoanID IS NOT NULL THEN 'Loans' END) +\n        COUNT(DISTINCT CASE WHEN cc.CardID IS NOT NULL THEN 'CreditCards' END) +\n        COUNT(DISTINCT CASE WHEN d.DepositID IS NOT NULL THEN 'Deposits' END) +\n        COUNT(DISTINCT CASE WHEN ip.PolicyID IS NOT NULL THEN 'InsurancePolicies' END) AS ProductTypesCount,\n        COALESCE(SUM(a.Balance), 0) + \n        COALESCE(SUM(cc.CreditLimit), 0) + \n        COALESCE(SUM(d.Amount), 0) + \n        COALESCE(SUM(ip.CoverageAmount), 0) - \n        COALESCE(SUM(l.PrincipalAmount), 0) AS TotalAssets,\n        STRING_AGG(DISTINCT CASE WHEN a.AccountID IS NOT NULL THEN 'Accounts' END, ', ') ||\n        STRING_AGG(DISTINCT CASE WHEN l.LoanID IS NOT NULL THEN 'Loans' END, ', ') ||\n        STRING_AGG(DISTINCT CASE WHEN cc.CardID IS NOT NULL THEN 'CreditCards' END, ', ') ||\n        STRING_AGG(DISTINCT CASE WHEN d.DepositID IS NOT NULL THEN 'Deposits' END, ', ') ||\n        STRING_AGG(DISTINCT CASE WHEN ip.PolicyID IS NOT NULL THEN 'InsurancePolicies' END, ', ') AS ProductTypesList\n    FROM \n        Customers c\n    LEFT JOIN Accounts a ON c.CustomerID = a.CustomerID AND a.Status = 'Active'\n    LEFT JOIN Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\n    LEFT JOIN CreditCards cc ON c.CustomerID = cc.CustomerID AND cc.Status = 'Активна'\n    LEFT JOIN Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\n    LEFT JOIN InsurancePolicies ip ON c.CustomerID = ip.CustomerID AND ip.Status = 'Активен'\n    GROUP BY \n        c.CustomerID, c.FirstName, c.LastName\n)\nSELECT \n    FirstName || ' ' || LastName AS CustomerName,\n    ProductTypesCount,\n    TotalAssets,\n    ProductTypesList\nFROM \n    CustomerProducts\nORDER BY \n    ProductTypesCount DESC,\n    TotalAssets DESC\nLIMIT 8;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "WITH CustomerProducts AS (\n    SELECT \n        c.CustomerID,\n        c.FirstName,\n        c.LastName,\n        COUNT(DISTINCT CASE WHEN l.LoanID IS NOT NULL THEN 'Loans' END) AS HasLoans,\n        COUNT(DISTINCT CASE WHEN d.DepositID IS NOT NULL THEN 'Deposits' END) AS HasDeposits,\n        COUNT(DISTINCT CASE WHEN ip.PolicyID IS NOT NULL THEN 'Insurance' END) AS HasInsurance,\n        COUNT(DISTINCT CASE WHEN cc.CardID IS NOT NULL THEN 'CreditCards' END) AS HasCreditCards,\n        SUM(COALESCE(a.Balance, 0) + COALESCE(d.Amount, 0) + COALESCE(cc.CreditLimit, 0) - COALESCE(cc.Balance, 0) + COALESCE(ip.CoverageAmount, 0)) AS TotalAssets,\n        STRING_AGG(DISTINCT \n            CASE \n                WHEN l.LoanID IS NOT NULL THEN 'Loans' \n                WHEN d.DepositID IS NOT NULL THEN 'Deposits' \n                WHEN ip.PolicyID IS NOT NULL THEN 'Insurance' \n                WHEN cc.CardID IS NOT NULL THEN 'CreditCards' \n            END, ', ') AS ProductTypes\n    FROM \n        Customers c\n        LEFT JOIN Accounts a ON c.CustomerID = a.CustomerID AND a.Status = 'Active'\n        LEFT JOIN Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\n        LEFT JOIN Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\n        LEFT JOIN InsurancePolicies ip ON c.CustomerID = ip.CustomerID AND ip.Status = 'Активен'\n        LEFT JOIN CreditCards cc ON c.CustomerID = cc.CustomerID AND cc.Status = 'Активна'\n    GROUP BY \n        c.CustomerID, c.FirstName, c.LastName\n)\nSELECT \n    FirstName,\n    LastName,\n    (HasLoans + HasDeposits + HasInsurance + HasCreditCards) AS ProductTypeCount,\n    TotalAssets,\n    ProductTypes\nFROM \n    CustomerProducts\nORDER BY \n    ProductTypeCount DESC,\n    TotalAssets DESC\nLIMIT 8;",
            "gigachat_response": "WITH ProductTypes AS (\n    SELECT \n        c.CustomerID,\n        c.FirstName || ' ' || c.MiddleName || ' ' || c.LastName AS FullName,\n        COUNT(DISTINCT CASE WHEN l.LoanID IS NOT NULL THEN 'Кредит' ELSE NULL END) +\n        COUNT(DISTINCT CASE WHEN d.DepositID IS NOT NULL THEN 'Депозит' ELSE NULL END) +\n        COUNT(DISTINCT CASE WHEN p.PolicyID IS NOT NULL THEN 'Страховая политика' ELSE NULL END) +\n        COUNT(DISTINCT CASE WHEN cc.CardID IS NOT NULL THEN 'Кредитная карта' ELSE NULL END) AS UniqueProductCount,\n        COALESCE(SUM(l.PrincipalAmount), 0) + COALESCE(SUM(d.Amount), 0) + COALESCE(SUM(p.CoverageAmount), 0) + COALESCE(SUM(cc.CreditLimit), 0) AS TotalAssets,\n        STRING_AGG(DISTINCT CASE WHEN l.LoanID IS NOT NULL THEN 'Кредит' ELSE NULL END ||\n                     CASE WHEN d.DepositID IS NOT NULL THEN ', Депозит' ELSE '' END ||\n                     CASE WHEN p.PolicyID IS NOT NULL THEN ', Страховая политика' ELSE '' END ||\n                     CASE WHEN cc.CardID IS NOT NULL THEN ', Кредитная карта' ELSE '' END, '') AS ProductList\n    FROM Customers c\n    LEFT JOIN Loans l ON c.CustomerID = l.CustomerID\n    LEFT JOIN Deposits d ON c.CustomerID = d.CustomerID\n    LEFT JOIN InsurancePolicies p ON c.CustomerID = p.CustomerID\n    LEFT JOIN CreditCards cc ON c.CustomerID = cc.CustomerID\n    GROUP BY c.CustomerID, c.FirstName, c.MiddleName, c.LastName\n)\nSELECT *\nFROM ProductTypes\nORDER BY UniqueProductCount DESC, TotalAssets DESC\nLIMIT 8;",
            "gigachat_response_ru": "WITH ProductTypes AS (\n    SELECT \n        c.CustomerID,\n        c.FirstName || ' ' || c.LastName AS FullName,\n        COUNT(DISTINCT CASE WHEN l.LoanID IS NOT NULL THEN 'Кредит' ELSE NULL END) +\n        COUNT(DISTINCT CASE WHEN d.DepositID IS NOT NULL THEN 'Депозит' ELSE NULL END) +\n        COUNT(DISTINCT CASE WHEN p.PolicyID IS NOT NULL THEN 'Страховая политика' ELSE NULL END) +\n        COUNT(DISTINCT CASE WHEN cc.CardID IS NOT NULL THEN 'Кредитная карта' ELSE NULL END) AS NumProductTypes,\n        COALESCE(SUM(l.PrincipalAmount), 0) + COALESCE(SUM(d.Amount), 0) + COALESCE(SUM(p.CoverageAmount), 0) + COALESCE(SUM(cc.CreditLimit), 0) AS TotalAssets,\n        STRING_AGG(DISTINCT CASE \n            WHEN l.LoanID IS NOT NULL THEN 'Кредит'\n            WHEN d.DepositID IS NOT NULL THEN 'Депозит'\n            WHEN p.PolicyID IS NOT NULL THEN 'Страховая политика'\n            WHEN cc.CardID IS NOT NULL THEN 'Кредитная карта'\n        END, ', ') AS ProductList\n    FROM Customers c\n    LEFT JOIN Loans l ON c.CustomerID = l.CustomerID\n    LEFT JOIN Deposits d ON c.CustomerID = d.CustomerID\n    LEFT JOIN InsurancePolicies p ON c.CustomerID = p.CustomerID\n    LEFT JOIN CreditCards cc ON c.CustomerID = cc.CustomerID\n    GROUP BY c.CustomerID, c.FirstName, c.LastName\n)\nSELECT *\nFROM ProductTypes\nORDER BY NumProductTypes DESC, TotalAssets DESC\nLIMIT 8;",
            "gpt-4o_response": "WITH ProductCounts AS (\n    SELECT \n        c.CustomerID,\n        c.FirstName,\n        c.LastName,\n        COUNT(DISTINCT CASE WHEN l.LoanID IS NOT NULL THEN 'Loan' END) +\n        COUNT(DISTINCT CASE WHEN d.DepositID IS NOT NULL THEN 'Deposit' END) +\n        COUNT(DISTINCT CASE WHEN ip.PolicyID IS NOT NULL THEN 'Insurance' END) +\n        COUNT(DISTINCT CASE WHEN cc.CardID IS NOT NULL THEN 'CreditCard' END) AS ProductTypesCount,\n        COALESCE(SUM(l.PrincipalAmount), 0) + COALESCE(SUM(d.Amount), 0) + COALESCE(SUM(cc.CreditLimit), 0) AS TotalAssets,\n        STRING_AGG(DISTINCT CASE \n            WHEN l.LoanID IS NOT NULL THEN 'Loan' \n            WHEN d.DepositID IS NOT NULL THEN 'Deposit' \n            WHEN ip.PolicyID IS NOT NULL THEN 'Insurance' \n            WHEN cc.CardID IS NOT NULL THEN 'CreditCard' \n        END, ', ') AS ProductTypes\n    FROM \n        Customers c\n    LEFT JOIN Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\n    LEFT JOIN Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\n    LEFT JOIN InsurancePolicies ip ON c.CustomerID = ip.CustomerID AND ip.Status = 'Активен'\n    LEFT JOIN CreditCards cc ON c.CustomerID = cc.CustomerID AND cc.Status = 'Активна'\n    GROUP BY c.CustomerID, c.FirstName, c.LastName\n)\nSELECT \n    FirstName,\n    LastName,\n    ProductTypesCount,\n    TotalAssets,\n    ProductTypes\nFROM \n    ProductCounts\nORDER BY \n    ProductTypesCount DESC,\n    TotalAssets DESC\nLIMIT 8;",
            "gpt-4o_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    COUNT(DISTINCT ProductType) AS ProductTypeCount, \n    SUM(AssetAmount) AS TotalAssets, \n    GROUP_CONCAT(DISTINCT ProductType ORDER BY ProductType) AS ProductTypes\nFROM \n    Customers c\nLEFT JOIN (\n    SELECT CustomerID, 'Loan' AS ProductType, SUM(PrincipalAmount) AS AssetAmount\n    FROM Loans\n    WHERE Status = 'Активно'\n    GROUP BY CustomerID\n    UNION ALL\n    SELECT CustomerID, 'Deposit' AS ProductType, SUM(Amount) AS AssetAmount\n    FROM Deposits\n    WHERE Status = 'Активен'\n    GROUP BY CustomerID\n    UNION ALL\n    SELECT CustomerID, 'Insurance' AS ProductType, SUM(CoverageAmount) AS AssetAmount\n    FROM InsurancePolicies\n    WHERE Status = 'Активен'\n    GROUP BY CustomerID\n    UNION ALL\n    SELECT CustomerID, 'CreditCard' AS ProductType, SUM(CreditLimit) AS AssetAmount\n    FROM CreditCards\n    WHERE Status = 'Активна'\n    GROUP BY CustomerID\n) AS Products ON c.CustomerID = Products.CustomerID\nGROUP BY c.CustomerID, c.FirstName, c.LastName\nORDER BY ProductTypeCount DESC, TotalAssets DESC\nLIMIT 8;"
        },
        {
            "question": "Вывести статистику по страховым случаям по типам полисов: для каждого типа полиса показать количество случаев, среднюю сумму выплаты, максимальную сумму выплаты и процент успешных выплат. Учитывать только активные полисы и случаи за последние 2 года. Результат отсортировать по средней сумме выплаты по убыванию. Показать только топ-6 типов полисов.",
            "sql_query": "WITH PolicyClaimsStats AS (SELECT ip.PolicyType, COUNT(pc.ClaimID) as TotalClaims, AVG(pc.ClaimAmount) as AvgClaimAmount, MAX(pc.ClaimAmount) as MaxClaimAmount, COUNT(CASE WHEN pc.Status = 'Выплачено' THEN 1 END) as SuccessfulClaims FROM InsurancePolicies ip LEFT JOIN PolicyClaims pc ON ip.PolicyID = pc.PolicyID WHERE ip.Status = 'Активен' AND pc.ClaimDate >= DATE_SUB(CURRENT_DATE, INTERVAL 2 YEAR) GROUP BY ip.PolicyType HAVING COUNT(pc.ClaimID) > 0) SELECT PolicyType, TotalClaims, AvgClaimAmount, MaxClaimAmount, (SuccessfulClaims * 100.0 / TotalClaims) as SuccessRate FROM PolicyClaimsStats ORDER BY AvgClaimAmount DESC LIMIT 6;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    ip.PolicyType,\n    COUNT(pc.ClaimID) AS TotalClaims,\n    AVG(pc.ClaimAmount) AS AverageClaimAmount,\n    MAX(pc.ClaimAmount) AS MaxClaimAmount,\n    SUM(CASE WHEN pc.Status = 'Выплачено' OR pc.Status = 'Утверждено' THEN 1 ELSE 0 END) * 100.0 / COUNT(pc.ClaimID) AS SuccessRate\nFROM\n    InsurancePolicies ip\nJOIN\n    PolicyClaims pc ON ip.PolicyID = pc.PolicyID\nWHERE\n    ip.Status = 'Активен'\n    AND pc.ClaimDate >= DATE('now', '-2 years')\nGROUP BY\n    ip.PolicyType\nORDER BY\n    AverageClaimAmount DESC\nLIMIT 6;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    ip.PolicyType,\n    COUNT(pc.ClaimID) AS TotalClaims,\n    AVG(pc.ClaimAmount) AS AverageClaimAmount,\n    MAX(pc.ClaimAmount) AS MaxClaimAmount,\n    SUM(CASE WHEN pc.Status = 'Выплачено' OR pc.Status = 'Утверждено' THEN 1 ELSE 0 END) * 100.0 / COUNT(pc.ClaimID) AS SuccessRate\nFROM\n    InsurancePolicies ip\nJOIN\n    PolicyClaims pc ON ip.PolicyID = pc.PolicyID\nWHERE\n    ip.Status = 'Активен'\n    AND pc.ClaimDate >= DATE('now', '-2 year')\nGROUP BY\n    ip.PolicyType\nORDER BY\n    AverageClaimAmount DESC\nLIMIT 6;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH PolicyClaimsStatistics AS (\n    SELECT \n        ip.PolicyType,\n        COUNT(pc.ClaimID) AS TotalClaims,\n        AVG(pc.ClaimAmount) AS AverageClaimAmount,\n        MAX(pc.ClaimAmount) AS MaxClaimAmount,\n        SUM(CASE WHEN pc.Status = 'Выплачено' THEN 1 ELSE 0 END) AS SuccessfulClaims\n    FROM \n        InsurancePolicies ip\n    JOIN \n        PolicyClaims pc ON ip.PolicyID = pc.PolicyID\n    WHERE \n        ip.Status = 'Активен' \n        AND pc.ClaimDate >= CURRENT_DATE - INTERVAL 2 YEAR\n    GROUP BY \n        ip.PolicyType\n)\nSELECT \n    PolicyType,\n    TotalClaims,\n    AverageClaimAmount,\n    MaxClaimAmount,\n    (SuccessfulClaims * 100.0 / TotalClaims) AS SuccessfulClaimsPercentage\nFROM \n    PolicyClaimsStatistics\nORDER BY \n    AverageClaimAmount DESC\nLIMIT 6;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH PolicyClaimsStats AS (\n  SELECT \n    ip.PolicyType,\n    COUNT(pc.ClaimID) AS TotalClaims,\n    AVG(pc.ClaimAmount) AS AverageClaimAmount,\n    MAX(pc.ClaimAmount) AS MaxClaimAmount,\n    SUM(CASE WHEN pc.Status = 'Выплачено' THEN 1 ELSE 0 END) AS SuccessfulClaims\n  FROM \n    InsurancePolicies ip\n  JOIN \n    PolicyClaims pc ON ip.PolicyID = pc.PolicyID\n  WHERE \n    ip.Status = 'Активен' AND pc.ClaimDate >= NOW() - INTERVAL 2 YEAR\n  GROUP BY \n    ip.PolicyType\n)\nSELECT \n  PolicyType,\n  TotalClaims,\n  AverageClaimAmount,\n  MaxClaimAmount,\n  (SuccessfulClaims / TotalClaims) * 100 AS SuccessfulClaimsPercentage\nFROM \n  PolicyClaimsStats\nORDER BY \n  AverageClaimAmount DESC\nLIMIT 6;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    ip.PolicyType,\n    COUNT(pc.ClaimID) AS TotalClaims,\n    AVG(pc.ClaimAmount) AS AverageClaimAmount,\n    MAX(pc.ClaimAmount) AS MaxClaimAmount,\n    (COUNT(CASE WHEN pc.Status = 'Выплачено' OR pc.Status = 'Утверждено' THEN 1 END) * 100.0 / COUNT(pc.ClaimID)) AS SuccessRate\nFROM \n    InsurancePolicies ip\nJOIN \n    PolicyClaims pc ON ip.PolicyID = pc.PolicyID\nWHERE \n    ip.Status = 'Активен'\n    AND pc.ClaimDate >= DATE_SUB(CURRENT_DATE, INTERVAL 2 YEAR)\nGROUP BY \n    ip.PolicyType\nORDER BY \n    AverageClaimAmount DESC\nLIMIT 6;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    ip.PolicyType,\n    COUNT(pc.ClaimID) AS TotalClaims,\n    AVG(pc.ClaimAmount) AS AverageClaimAmount,\n    MAX(pc.ClaimAmount) AS MaxClaimAmount,\n    ROUND(100.0 * COUNT(CASE WHEN pc.Status = 'Выплачено' OR pc.Status = 'Утверждено' THEN 1 END) / COUNT(pc.ClaimID), 2) AS SuccessRate\nFROM \n    InsurancePolicies ip\nJOIN \n    PolicyClaims pc ON ip.PolicyID = pc.PolicyID\nWHERE \n    ip.Status = 'Активен'\n    AND pc.ClaimDate >= DATE_SUB(CURRENT_DATE, INTERVAL 2 YEAR)\nGROUP BY \n    ip.PolicyType\nORDER BY \n    AverageClaimAmount DESC\nLIMIT 6;",
            "gigachat_response": "SELECT p.PolicyType,\n       COUNT(pc.ClaimID) AS NumberOfCases,\n       COALESCE(AVG(pc.ClaimAmount), 0) AS AveragePayout,\n       MAX(pc.ClaimAmount) AS MaxPayout,\n       ROUND((COUNT(CASE WHEN pc.Status = 'Выплачено' THEN 1 ELSE NULL END)::DECIMAL / COUNT(pc.ClaimID)) * 100, 2) AS SuccessPercentage\nFROM InsurancePolicies p\nJOIN PolicyClaims pc ON p.PolicyID = pc.PolicyID\nWHERE p.Status = 'Активен'\nAND pc.ClaimDate >= NOW()::DATE - INTERVAL '2 YEARS'\nGROUP BY p.PolicyType\nORDER BY AveragePayout DESC\nLIMIT 6;",
            "gigachat_response_ru": "SELECT \n    p.PolicyType,\n    COUNT(pc.ClaimID) AS NumberOfCases,\n    COALESCE(AVG(pc.ClaimAmount), 0) AS AveragePayout,\n    MAX(pc.ClaimAmount) AS MaxPayout,\n    ROUND((COUNT(CASE WHEN pc.Status = 'Выплачено' THEN 1 ELSE NULL END) * 100.0 / COUNT(pc.ClaimID)), 2) AS SuccessPercentage\nFROM \n    InsurancePolicies p\nLEFT JOIN \n    PolicyClaims pc ON p.PolicyID = pc.PolicyID\nWHERE \n    p.Status = 'Активен'\nAND \n    pc.ClaimDate >= NOW() - INTERVAL '2 YEARS'\nGROUP BY \n    p.PolicyType\nORDER BY \n    AveragePayout DESC\nLIMIT 6;",
            "gpt-4o_response": "SELECT \n    ip.PolicyType,\n    COUNT(pc.ClaimID) AS ClaimCount,\n    AVG(pc.ClaimAmount) AS AvgClaimAmount,\n    MAX(pc.ClaimAmount) AS MaxClaimAmount,\n    (COUNT(CASE WHEN pc.Status = 'Выплачено' OR pc.Status = 'Утверждено' THEN 1 END) * 100.0 / COUNT(pc.ClaimID)) AS SuccessRate\nFROM \n    InsurancePolicies ip\nJOIN \n    PolicyClaims pc ON ip.PolicyID = pc.PolicyID\nWHERE \n    ip.Status = 'Активен' \n    AND pc.ClaimDate >= DATE_SUB(CURRENT_DATE, INTERVAL 2 YEAR)\nGROUP BY \n    ip.PolicyType\nORDER BY \n    AvgClaimAmount DESC\nLIMIT 6;",
            "gpt-4o_response_ru": "SELECT \n    ip.PolicyType,\n    COUNT(pc.ClaimID) AS ClaimCount,\n    AVG(pc.ClaimAmount) AS AvgClaimAmount,\n    MAX(pc.ClaimAmount) AS MaxClaimAmount,\n    (COUNT(CASE WHEN pc.Status = 'Выплачено' THEN 1 END) * 100.0 / COUNT(pc.ClaimID)) AS SuccessRate\nFROM \n    InsurancePolicies ip\nJOIN \n    PolicyClaims pc ON ip.PolicyID = pc.PolicyID\nWHERE \n    ip.Status = 'Активен' \n    AND pc.ClaimDate >= DATE_SUB(CURRENT_DATE, INTERVAL 2 YEAR)\nGROUP BY \n    ip.PolicyType\nORDER BY \n    AvgClaimAmount DESC\nLIMIT 6;"
        },
        {
            "question": "Найти клиентов с наиболее активным использованием банковских услуг: для каждого клиента подсчитать количество транзакций по всем типам (счета, кредитные карты, депозиты) за последние 6 месяцев, среднюю сумму транзакции и общую сумму. Результат отсортировать по количеству транзакций по убыванию. Показать только топ-7 клиентов.",
            "sql_query": "WITH CustomerTransactions AS (SELECT c.CustomerID, c.FirstName, c.LastName, COUNT(t.TransactionID) + COUNT(ct.CardTransactionID) + COUNT(dt.DepositTransactionID) as TotalTransactions, AVG(COALESCE(t.Amount, ct.Amount, dt.Amount)) as AvgTransactionAmount, SUM(COALESCE(t.Amount, 0)) + SUM(COALESCE(ct.Amount, 0)) + SUM(COALESCE(dt.Amount, 0)) as TotalAmount FROM Customers c LEFT JOIN Accounts a ON c.CustomerID = a.CustomerID LEFT JOIN Transactions t ON a.AccountID = t.AccountID AND t.TransactionDate >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH) LEFT JOIN CreditCards cc ON c.CustomerID = cc.CustomerID LEFT JOIN CardTransactions ct ON cc.CardID = ct.CardID AND ct.TransactionDate >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH) LEFT JOIN Deposits d ON c.CustomerID = d.CustomerID LEFT JOIN DepositTransactions dt ON d.DepositID = dt.DepositID AND dt.TransactionDate >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH) GROUP BY c.CustomerID, c.FirstName, c.LastName HAVING TotalTransactions > 0) SELECT FirstName, LastName, TotalTransactions, AvgTransactionAmount, TotalAmount FROM CustomerTransactions ORDER BY TotalTransactions DESC LIMIT 7;",
            "google/gemini-2.0-flash-001_response": "WITH CustomerTransactions AS (\n    SELECT\n        c.CustomerID,\n        c.FirstName,\n        c.LastName,\n        COUNT(DISTINCT t.TransactionID) + COUNT(DISTINCT ct.CardTransactionID) + COUNT(DISTINCT dt.DepositTransactionID) AS TotalTransactions,\n        AVG(COALESCE(t.Amount, 0) + COALESCE(ct.Amount, 0) + COALESCE(dt.Amount, 0)) AS AverageTransactionAmount,\n        SUM(COALESCE(t.Amount, 0) + COALESCE(ct.Amount, 0) + COALESCE(dt.Amount, 0)) AS TotalTransactionAmount\n    FROM\n        Customers c\n    LEFT JOIN\n        Accounts a ON c.CustomerID = a.CustomerID\n    LEFT JOIN\n        Transactions t ON a.AccountID = t.AccountID AND t.TransactionDate >= DATE('now', '-6 months')\n    LEFT JOIN\n        CreditCards cc ON c.CustomerID = cc.CustomerID\n    LEFT JOIN\n        CardTransactions ct ON cc.CardID = ct.CardID AND ct.TransactionDate >= DATE('now', '-6 months')\n    LEFT JOIN\n        Deposits d ON c.CustomerID = d.CustomerID\n    LEFT JOIN\n        DepositTransactions dt ON d.DepositID = dt.DepositID AND dt.TransactionDate >= DATE('now', '-6 months')\n    GROUP BY\n        c.CustomerID, c.FirstName, c.LastName\n)\nSELECT\n    ct.FirstName,\n    ct.LastName,\n    ct.TotalTransactions,\n    ct.AverageTransactionAmount,\n    ct.TotalTransactionAmount\nFROM\n    CustomerTransactions ct\nORDER BY\n    ct.TotalTransactions DESC\nLIMIT 7;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    c.FirstName,\n    c.LastName,\n    COUNT(t.TransactionID) + COUNT(ct.CardTransactionID) + COUNT(dt.DepositTransactionID) AS TotalTransactions,\n    AVG(COALESCE(t.Amount, ct.Amount, dt.Amount)) AS AverageTransactionAmount,\n    SUM(COALESCE(t.Amount, ct.Amount, dt.Amount)) AS TotalTransactionAmount\nFROM\n    Customers c\nLEFT JOIN\n    Accounts a ON c.CustomerID = a.CustomerID\nLEFT JOIN\n    Transactions t ON a.AccountID = t.AccountID AND t.TransactionDate >= date('now', '-6 months')\nLEFT JOIN\n    CreditCards cc ON c.CustomerID = cc.CustomerID\nLEFT JOIN\n    CardTransactions ct ON cc.CardID = ct.CardID AND ct.TransactionDate >= date('now', '-6 months')\nLEFT JOIN\n    Deposits d ON c.CustomerID = d.CustomerID\nLEFT JOIN\n    DepositTransactions dt ON d.DepositID = dt.DepositID AND dt.TransactionDate >= date('now', '-6 months')\nGROUP BY\n    c.CustomerID, c.FirstName, c.LastName\nORDER BY\n    TotalTransactions DESC\nLIMIT 7;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH CustomerTransactions AS (\n  SELECT \n    c.CustomerID,\n    c.FirstName,\n    c.LastName,\n    COUNT(t.TransactionID) AS AccountTransactions,\n    SUM(t.Amount) AS AccountTransactionAmount,\n    COUNT(ct.CardTransactionID) AS CardTransactions,\n    SUM(ct.Amount) AS CardTransactionAmount,\n    COUNT(dt.DepositTransactionID) AS DepositTransactions,\n    SUM(dt.Amount) AS DepositTransactionAmount\n  FROM \n    Customers c\n  LEFT JOIN \n    Accounts a ON c.CustomerID = a.CustomerID\n  LEFT JOIN \n    Transactions t ON a.AccountID = t.AccountID AND t.TransactionDate >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH)\n  LEFT JOIN \n    CreditCards cc ON c.CustomerID = cc.CustomerID\n  LEFT JOIN \n    CardTransactions ct ON cc.CardID = ct.CardID AND ct.TransactionDate >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH)\n  LEFT JOIN \n    Deposits d ON c.CustomerID = d.CustomerID\n  LEFT JOIN \n    DepositTransactions dt ON d.DepositID = dt.DepositID AND dt.TransactionDate >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH)\n  GROUP BY \n    c.CustomerID, c.FirstName, c.LastName\n),\nTotalTransactions AS (\n  SELECT \n    CustomerID,\n    FirstName,\n    LastName,\n    AccountTransactions + CardTransactions + DepositTransactions AS TotalTransactions,\n    (AccountTransactionAmount + CardTransactionAmount + DepositTransactionAmount) / (AccountTransactions + CardTransactions + DepositTransactions) AS AverageTransactionAmount,\n    AccountTransactionAmount + CardTransactionAmount + DepositTransactionAmount AS TotalTransactionAmount\n  FROM \n    CustomerTransactions\n)\nSELECT \n  FirstName,\n  LastName,\n  TotalTransactions,\n  AverageTransactionAmount,\n  TotalTransactionAmount\nFROM \n  TotalTransactions\nORDER BY \n  TotalTransactions DESC\nLIMIT 7;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH CustomerTransactions AS (\n  SELECT \n    c.CustomerID,\n    c.FirstName,\n    c.LastName,\n    COALESCE(t.TransactionID, 0) + COALESCE(ct.CardTransactionID, 0) + COALESCE(dt.DepositTransactionID, 0) AS TotalTransactions,\n    COALESCE(AVG(t.Amount), 0) + COALESCE(AVG(ct.Amount), 0) + COALESCE(AVG(dt.Amount), 0) AS AvgTransactionAmount,\n    COALESCE(SUM(t.Amount), 0) + COALESCE(SUM(ct.Amount), 0) + COALESCE(SUM(dt.Amount), 0) AS TotalTransactionAmount\n  FROM \n    Customers c\n  LEFT JOIN \n    Accounts a ON c.CustomerID = a.CustomerID\n  LEFT JOIN \n    Transactions t ON a.AccountID = t.AccountID AND t.TransactionDate >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH)\n  LEFT JOIN \n    CreditCards cc ON c.CustomerID = cc.CustomerID\n  LEFT JOIN \n    CardTransactions ct ON cc.CardID = ct.CardID AND ct.TransactionDate >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH)\n  LEFT JOIN \n    Deposits d ON c.CustomerID = d.CustomerID\n  LEFT JOIN \n    DepositTransactions dt ON d.DepositID = dt.DepositID AND dt.TransactionDate >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH)\n  GROUP BY \n    c.CustomerID, c.FirstName, c.LastName\n)\nSELECT \n  FirstName,\n  LastName,\n  TotalTransactions,\n  AvgTransactionAmount,\n  TotalTransactionAmount\nFROM \n  CustomerTransactions\nORDER BY \n  TotalTransactions DESC\nLIMIT 7;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH CustomerTransactions AS (\n    SELECT \n        c.CustomerID,\n        c.FirstName,\n        c.LastName,\n        COUNT(t.TransactionID) AS AccountTransactions,\n        AVG(t.Amount) AS AvgAccountTransaction,\n        SUM(t.Amount) AS TotalAccountAmount\n    FROM \n        Customers c\n    LEFT JOIN \n        Accounts a ON c.CustomerID = a.CustomerID\n    LEFT JOIN \n        Transactions t ON a.AccountID = t.AccountID\n    WHERE \n        t.TransactionDate >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH)\n        AND t.Status = 'Завершено'\n    GROUP BY \n        c.CustomerID, c.FirstName, c.LastName\n),\nCardTransactions AS (\n    SELECT \n        c.CustomerID,\n        COUNT(ct.CardTransactionID) AS CardTransactions,\n        AVG(ct.Amount) AS AvgCardTransaction,\n        SUM(ct.Amount) AS TotalCardAmount\n    FROM \n        Customers c\n    LEFT JOIN \n        CreditCards cc ON c.CustomerID = cc.CustomerID\n    LEFT JOIN \n        CardTransactions ct ON cc.CardID = ct.CardID\n    WHERE \n        ct.TransactionDate >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH)\n        AND ct.Status = 'Завершена'\n    GROUP BY \n        c.CustomerID\n),\nDepositTransactions AS (\n    SELECT \n        c.CustomerID,\n        COUNT(dt.DepositTransactionID) AS DepositTransactions,\n        AVG(dt.Amount) AS AvgDepositTransaction,\n        SUM(dt.Amount) AS TotalDepositAmount\n    FROM \n        Customers c\n    LEFT JOIN \n        Deposits d ON c.CustomerID = d.CustomerID\n    LEFT JOIN \n        DepositTransactions dt ON d.DepositID = dt.DepositID\n    WHERE \n        dt.TransactionDate >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH)\n        AND dt.Status = 'Завершено'\n    GROUP BY \n        c.CustomerID\n)\nSELECT \n    c.CustomerID,\n    c.FirstName,\n    c.LastName,\n    COALESCE(ct.AccountTransactions, 0) + COALESCE(cardt.CardTransactions, 0) + COALESCE(dt.DepositTransactions, 0) AS TotalTransactions,\n    (COALESCE(ct.TotalAccountAmount, 0) + COALESCE(cardt.TotalCardAmount, 0) + COALESCE(dt.TotalDepositAmount, 0)) / \n    NULLIF((COALESCE(ct.AccountTransactions, 0) + COALESCE(cardt.CardTransactions, 0) + COALESCE(dt.DepositTransactions, 0)), 0) AS AvgTransactionAmount,\n    COALESCE(ct.TotalAccountAmount, 0) + COALESCE(cardt.TotalCardAmount, 0) + COALESCE(dt.TotalDepositAmount, 0) AS TotalAmount\nFROM \n    Customers c\nLEFT JOIN \n    CustomerTransactions ct ON c.CustomerID = ct.CustomerID\nLEFT JOIN \n    CardTransactions cardt ON c.CustomerID = cardt.CustomerID\nLEFT JOIN \n    DepositTransactions dt ON c.CustomerID = dt.CustomerID\nORDER BY \n    TotalTransactions DESC\nLIMIT 7;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "WITH CustomerTransactions AS (\n    SELECT \n        c.CustomerID,\n        c.FirstName,\n        c.LastName,\n        COUNT(t.TransactionID) AS AccountTransactions,\n        COALESCE(AVG(t.Amount), 0) AS AvgAccountTransaction,\n        COALESCE(SUM(t.Amount), 0) AS TotalAccountAmount\n    FROM \n        Customers c\n    LEFT JOIN \n        Accounts a ON c.CustomerID = a.CustomerID\n    LEFT JOIN \n        Transactions t ON a.AccountID = t.AccountID \n        AND t.TransactionDate >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH)\n        AND t.Status = 'Завершено'\n    GROUP BY \n        c.CustomerID, c.FirstName, c.LastName\n),\nCardTransactions AS (\n    SELECT \n        c.CustomerID,\n        COUNT(ct.CardTransactionID) AS CardTransactions,\n        COALESCE(AVG(ct.Amount), 0) AS AvgCardTransaction,\n        COALESCE(SUM(ct.Amount), 0) AS TotalCardAmount\n    FROM \n        Customers c\n    LEFT JOIN \n        CreditCards cc ON c.CustomerID = cc.CustomerID\n    LEFT JOIN \n        CardTransactions ct ON cc.CardID = ct.CardID \n        AND ct.TransactionDate >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH)\n        AND ct.Status = 'Завершена'\n    GROUP BY \n        c.CustomerID\n),\nDepositTransactions AS (\n    SELECT \n        c.CustomerID,\n        COUNT(dt.DepositTransactionID) AS DepositTransactions,\n        COALESCE(AVG(dt.Amount), 0) AS AvgDepositTransaction,\n        COALESCE(SUM(dt.Amount), 0) AS TotalDepositAmount\n    FROM \n        Customers c\n    LEFT JOIN \n        Deposits d ON c.CustomerID = d.CustomerID\n    LEFT JOIN \n        DepositTransactions dt ON d.DepositID = dt.DepositID \n        AND dt.TransactionDate >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH)\n        AND dt.Status = 'Завершено'\n    GROUP BY \n        c.CustomerID\n)\nSELECT \n    ct.FirstName,\n    ct.LastName,\n    (ct.AccountTransactions + cd.CardTransactions + dp.DepositTransactions) AS TotalTransactions,\n    (ct.TotalAccountAmount + cd.TotalCardAmount + dp.TotalDepositAmount) / \n        NULLIF((ct.AccountTransactions + cd.CardTransactions + dp.DepositTransactions), 0) AS AvgTransactionAmount,\n    (ct.TotalAccountAmount + cd.TotalCardAmount + dp.TotalDepositAmount) AS TotalAmount\nFROM \n    CustomerTransactions ct\nJOIN \n    CardTransactions cd ON ct.CustomerID = cd.CustomerID\nJOIN \n    DepositTransactions dp ON ct.CustomerID = dp.CustomerID\nORDER BY \n    TotalTransactions DESC\nLIMIT 7;",
            "gigachat_response": "WITH AllTransactions AS (\n    -- Транзакции по счетам\n    SELECT \n        t.TransactionID, \n        t.AccountID, \n        a.CustomerID, \n        t.TransactionDate, \n        t.Amount, \n        t.TransactionType, \n        t.Description, \n        t.Currency, \n        t.Status\n    FROM Transactions t\n    INNER JOIN Accounts a ON t.AccountID = a.AccountID\n    \n    UNION ALL\n    \n    -- Транзакции по депозитам\n    SELECT \n        dt.DepositTransactionID, \n        NULL, \n        d.CustomerID, \n        dt.TransactionDate, \n        dt.Amount, \n        dt.TransactionType, \n        '', \n        dt.Currency, \n        dt.Status\n    FROM DepositTransactions dt\n    INNER JOIN Deposits d ON dt.DepositID = d.DepositID\n    \n    UNION ALL\n    \n    -- Транзакции по кредитным картам\n    SELECT \n        ct.CardTransactionID, \n        NULL, \n        cc.CustomerID, \n        ct.TransactionDate, \n        ct.Amount, \n        '', \n        ct.MerchantName, \n        ct.Currency, \n        ct.Status\n    FROM CardTransactions ct\n    INNER JOIN CreditCards cc ON ct.CardID = cc.CardID\n), \nFilteredTransactions AS (\n    SELECT * \n    FROM AllTransactions \n    WHERE TransactionDate >= DATEADD(MONTH, -6, GETDATE()) \n      AND Status = 'Завершено'\n), \nAggregatedData AS (\n    SELECT \n        ft.CustomerID, \n        c.FirstName, \n        c.LastName, \n        COUNT(ft.TransactionID) AS TotalTransactions, \n        AVG(ft.Amount) AS AverageTransactionAmount, \n        SUM(ft.Amount) AS TotalTransactionSum\n    FROM FilteredTransactions ft\n    INNER JOIN Customers c ON ft.CustomerID = c.CustomerID\n    GROUP BY ft.CustomerID, c.FirstName, c.LastName\n)\nSELECT TOP 7 *\nFROM AggregatedData\nORDER BY TotalTransactions DESC;",
            "gigachat_response_ru": "WITH AllTransactions AS (\n    -- Транзакции по счетам\n    SELECT \n        t.TransactionID, \n        t.AccountID, \n        a.CustomerID, \n        t.TransactionDate, \n        t.Amount, \n        t.TransactionType, \n        t.Description, \n        t.Currency, \n        t.Status\n    FROM Transactions t\n    INNER JOIN Accounts a ON t.AccountID = a.AccountID\n    \n    UNION ALL\n    \n    -- Транзакции по депозитам\n    SELECT \n        dt.DepositTransactionID, \n        NULL, \n        d.CustomerID, \n        dt.TransactionDate, \n        dt.Amount, \n        dt.TransactionType, \n        '', \n        dt.Currency, \n        dt.Status\n    FROM DepositTransactions dt\n    INNER JOIN Deposits d ON dt.DepositID = d.DepositID\n    \n    UNION ALL\n    \n    -- Транзакции по кредитным картам\n    SELECT \n        ct.CardTransactionID, \n        NULL, \n        cc.CustomerID, \n        ct.TransactionDate, \n        ct.Amount, \n        '', \n        ct.MerchantName, \n        ct.Currency, \n        ct.Status\n    FROM CardTransactions ct\n    INNER JOIN CreditCards cc ON ct.CardID = cc.CardID\n), \nFilteredTransactions AS (\n    SELECT * \n    FROM AllTransactions \n    WHERE TransactionDate >= DATEADD(MONTH, -6, GETDATE()) AND Status = 'Завершено'\n)\nSELECT TOP 7\n    c.FirstName, \n    c.LastName, \n    COUNT(ft.TransactionID) AS TotalTransactions, \n    AVG(ft.Amount) AS AverageTransactionAmount, \n    SUM(ft.Amount) AS TotalTransactionSum\nFROM FilteredTransactions ft\nINNER JOIN Customers c ON ft.CustomerID = c.CustomerID\nGROUP BY c.FirstName, c.LastName\nORDER BY TotalTransactions DESC;",
            "gpt-4o_response": "WITH RecentTransactions AS (\n    SELECT \n        c.CustomerID,\n        c.FirstName,\n        c.LastName,\n        t.TransactionID,\n        t.Amount\n    FROM \n        Customers c\n    JOIN \n        Accounts a ON c.CustomerID = a.CustomerID\n    JOIN \n        Transactions t ON a.AccountID = t.AccountID\n    WHERE \n        t.TransactionDate >= DATEADD(MONTH, -6, CURRENT_DATE)\n        AND t.Status = 'Завершено'\n    UNION ALL\n    SELECT \n        c.CustomerID,\n        c.FirstName,\n        c.LastName,\n        ct.CardTransactionID AS TransactionID,\n        ct.Amount\n    FROM \n        Customers c\n    JOIN \n        CreditCards cc ON c.CustomerID = cc.CustomerID\n    JOIN \n        CardTransactions ct ON cc.CardID = ct.CardID\n    WHERE \n        ct.TransactionDate >= DATEADD(MONTH, -6, CURRENT_DATE)\n        AND ct.Status = 'Завершена'\n    UNION ALL\n    SELECT \n        c.CustomerID,\n        c.FirstName,\n        c.LastName,\n        dt.DepositTransactionID AS TransactionID,\n        dt.Amount\n    FROM \n        Customers c\n    JOIN \n        Deposits d ON c.CustomerID = d.CustomerID\n    JOIN \n        DepositTransactions dt ON d.DepositID = dt.DepositID\n    WHERE \n        dt.TransactionDate >= DATEADD(MONTH, -6, CURRENT_DATE)\n        AND dt.Status = 'Завершено'\n)\nSELECT \n    rt.FirstName,\n    rt.LastName,\n    COUNT(rt.TransactionID) AS TotalTransactions,\n    AVG(rt.Amount) AS AverageTransactionAmount,\n    SUM(rt.Amount) AS TotalTransactionAmount\nFROM \n    RecentTransactions rt\nGROUP BY \n    rt.CustomerID, rt.FirstName, rt.LastName\nORDER BY \n    TotalTransactions DESC\nLIMIT 7;",
            "gpt-4o_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    COUNT(t.TransactionID) + COUNT(ct.CardTransactionID) + COUNT(dt.DepositTransactionID) AS TotalTransactions,\n    AVG(COALESCE(t.Amount, 0) + COALESCE(ct.Amount, 0) + COALESCE(dt.Amount, 0)) AS AvgTransactionAmount,\n    SUM(COALESCE(t.Amount, 0) + COALESCE(ct.Amount, 0) + COALESCE(dt.Amount, 0)) AS TotalTransactionAmount\nFROM \n    Customers c\nLEFT JOIN \n    Accounts a ON c.CustomerID = a.CustomerID\nLEFT JOIN \n    Transactions t ON a.AccountID = t.AccountID AND t.TransactionDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH) AND t.Status = 'Завершено'\nLEFT JOIN \n    CreditCards cc ON c.CustomerID = cc.CustomerID\nLEFT JOIN \n    CardTransactions ct ON cc.CardID = ct.CardID AND ct.TransactionDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH) AND ct.Status = 'Завершена'\nLEFT JOIN \n    Deposits d ON c.CustomerID = d.CustomerID\nLEFT JOIN \n    DepositTransactions dt ON d.DepositID = dt.DepositID AND dt.TransactionDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH) AND dt.Status = 'Завершено'\nGROUP BY \n    c.CustomerID, c.FirstName, c.LastName\nORDER BY \n    TotalTransactions DESC\nLIMIT 7;"
        },
        {
            "question": "Найти сотрудников, которые работают в отделениях с наибольшим количеством услуг, подключенных клиентами этих отделений. Показать имя сотрудника, должность, название отделения, количество уникальных услуг и общее количество подключений услуг. Результат отсортировать по количеству уникальных услуг по убыванию и ограничить 12 записями.",
            "sql_query": "WITH BranchServices AS (SELECT b.BranchID, b.BranchName, COUNT(DISTINCT cs.ServiceID) as UniqueServices, COUNT(cs.CustomerServiceID) as TotalSubscriptions FROM Branches b JOIN Customers c ON b.BranchID = c.BranchID JOIN CustomerServices cs ON c.CustomerID = cs.CustomerID WHERE cs.Status = 'активен' GROUP BY b.BranchID, b.BranchName) SELECT e.FirstName, e.LastName, e.Position, bs.BranchName, bs.UniqueServices, bs.TotalSubscriptions FROM Employees e JOIN BranchServices bs ON e.BranchID = bs.BranchID ORDER BY bs.UniqueServices DESC, bs.TotalSubscriptions DESC LIMIT 12;",
            "google/gemini-2.0-flash-001_response": "WITH BranchServices AS (\n    SELECT\n        b.BranchID,\n        b.BranchName,\n        COUNT(DISTINCT cs.ServiceID) AS UniqueServicesCount,\n        COUNT(cs.CustomerServiceID) AS TotalServiceSubscriptions\n    FROM\n        Branches b\n    JOIN\n        Customers c ON b.BranchID = c.BranchID\n    JOIN\n        CustomerServices cs ON c.CustomerID = cs.CustomerID\n    GROUP BY\n        b.BranchID, b.BranchName\n),\nRankedBranches AS (\n    SELECT\n        BranchID,\n        BranchName,\n        UniqueServicesCount,\n        TotalServiceSubscriptions,\n        RANK() OVER (ORDER BY UniqueServicesCount DESC) AS Rank\n    FROM\n        BranchServices\n)\nSELECT\n    e.FirstName,\n    e.LastName,\n    e.Position,\n    rb.BranchName,\n    rb.UniqueServicesCount,\n    rb.TotalServiceSubscriptions\nFROM\n    Employees e\nJOIN\n    RankedBranches rb ON e.BranchID = rb.BranchID\nWHERE\n    rb.Rank = 1\nORDER BY\n    rb.UniqueServicesCount DESC\nLIMIT 12;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    e.FirstName,\n    e.LastName,\n    e.Position,\n    b.BranchName,\n    COUNT(DISTINCT cs.ServiceID) AS UniqueServicesCount,\n    COUNT(cs.CustomerServiceID) AS TotalServicesCount\nFROM\n    Employees e\nJOIN\n    Branches b ON e.BranchID = b.BranchID\nJOIN\n    Customers c ON b.BranchID = c.BranchID\nJOIN\n    CustomerServices cs ON c.CustomerID = cs.CustomerID\nGROUP BY\n    e.EmployeeID,\n    b.BranchID\nORDER BY\n    UniqueServicesCount DESC\nLIMIT 12;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH BranchServices AS (\n  SELECT \n    b.BranchID, \n    b.BranchName, \n    COUNT(DISTINCT cs.ServiceID) AS UniqueServices, \n    COUNT(cs.CustomerServiceID) AS TotalServiceSubscriptions\n  FROM \n    Branches b\n  JOIN \n    Customers c ON b.BranchID = c.BranchID\n  JOIN \n    CustomerServices cs ON c.CustomerID = cs.CustomerID\n  GROUP BY \n    b.BranchID, \n    b.BranchName\n),\nRankedBranches AS (\n  SELECT \n    BranchID, \n    BranchName, \n    UniqueServices, \n    TotalServiceSubscriptions,\n    ROW_NUMBER() OVER (ORDER BY UniqueServices DESC) AS RowNum\n  FROM \n    BranchServices\n)\nSELECT \n  e.FirstName, \n  e.LastName, \n  e.Position, \n  rb.BranchName, \n  rb.UniqueServices, \n  rb.TotalServiceSubscriptions\nFROM \n  RankedBranches rb\nJOIN \n  Employees e ON rb.BranchID = e.BranchID\nWHERE \n  rb.RowNum <= 12\nORDER BY \n  rb.UniqueServices DESC;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH BranchServices AS (\n  SELECT \n    b.BranchID, \n    b.BranchName, \n    COUNT(DISTINCT cs.ServiceID) AS UniqueServices, \n    COUNT(cs.CustomerServiceID) AS TotalServiceConnections\n  FROM \n    Branches b\n  JOIN \n    Customers c ON b.BranchID = c.BranchID\n  JOIN \n    CustomerServices cs ON c.CustomerID = cs.CustomerID\n  GROUP BY \n    b.BranchID, b.BranchName\n),\nRankedBranches AS (\n  SELECT \n    BranchID, \n    BranchName, \n    UniqueServices, \n    TotalServiceConnections,\n    ROW_NUMBER() OVER (ORDER BY UniqueServices DESC) AS RowNum\n  FROM \n    BranchServices\n)\nSELECT \n  e.FirstName, \n  e.LastName, \n  e.Position, \n  rb.BranchName, \n  rb.UniqueServices, \n  rb.TotalServiceConnections\nFROM \n  RankedBranches rb\nJOIN \n  Employees e ON rb.BranchID = e.BranchID\nWHERE \n  rb.RowNum <= 12\nORDER BY \n  rb.UniqueServices DESC;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH BranchServices AS (\n    SELECT \n        b.BranchID,\n        b.BranchName,\n        COUNT(DISTINCT cs.ServiceID) AS UniqueServicesCount,\n        COUNT(cs.CustomerServiceID) AS TotalConnections\n    FROM \n        Branches b\n        JOIN Customers c ON b.BranchID = c.BranchID\n        JOIN CustomerServices cs ON c.CustomerID = cs.CustomerID\n    GROUP BY \n        b.BranchID, b.BranchName\n)\nSELECT \n    e.FirstName,\n    e.LastName,\n    e.Position,\n    bs.BranchName,\n    bs.UniqueServicesCount,\n    bs.TotalConnections\nFROM \n    Employees e\n    JOIN Branches b ON e.BranchID = b.BranchID\n    JOIN BranchServices bs ON b.BranchID = bs.BranchID\nWHERE \n    bs.UniqueServicesCount = (SELECT MAX(UniqueServicesCount) FROM BranchServices)\nORDER BY \n    bs.UniqueServicesCount DESC,\n    bs.TotalConnections DESC\nLIMIT 12;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "WITH BranchServices AS (\n    SELECT \n        b.BranchID,\n        b.BranchName,\n        COUNT(DISTINCT cs.ServiceID) AS UniqueServicesCount,\n        COUNT(cs.CustomerServiceID) AS TotalSubscriptions\n    FROM \n        Branches b\n    JOIN \n        Customers c ON b.BranchID = c.BranchID\n    JOIN \n        CustomerServices cs ON c.CustomerID = cs.CustomerID\n    GROUP BY \n        b.BranchID, b.BranchName\n),\nMaxServicesBranches AS (\n    SELECT \n        BranchID,\n        BranchName,\n        UniqueServicesCount,\n        TotalSubscriptions\n    FROM \n        BranchServices\n    WHERE \n        UniqueServicesCount = (SELECT MAX(UniqueServicesCount) FROM BranchServices)\n)\nSELECT \n    e.FirstName,\n    e.LastName,\n    e.Position,\n    msb.BranchName,\n    msb.UniqueServicesCount,\n    msb.TotalSubscriptions\nFROM \n    Employees e\nJOIN \n    MaxServicesBranches msb ON e.BranchID = msb.BranchID\nORDER BY \n    msb.UniqueServicesCount DESC, msb.TotalSubscriptions DESC\nLIMIT 12;",
            "gigachat_response": "SELECT \n    e.FirstName, \n    e.LastName, \n    e.Position, \n    b.BranchName, \n    COUNT(DISTINCT s.ServiceID) AS UniqueServicesCount, \n    COUNT(cs.CustomerServiceID) AS TotalSubscriptions\nFROM \n    Employees e\nJOIN \n    Branches b ON e.BranchID = b.BranchID\nLEFT JOIN \n    Customers c ON b.BranchID = c.BranchID\nLEFT JOIN \n    CustomerServices cs ON c.CustomerID = cs.CustomerID\nLEFT JOIN \n    Services s ON cs.ServiceID = s.ServiceID\nGROUP BY \n    e.FirstName, e.LastName, e.Position, b.BranchName\nORDER BY \n    UniqueServicesCount DESC\nLIMIT 12;",
            "gigachat_response_ru": "SELECT \n    e.FirstName || ' ' || e.LastName AS FullName,\n    e.Position,\n    b.BranchName,\n    COUNT(DISTINCT s.ServiceID) AS UniqueServicesCount,\n    COUNT(cs.CustomerServiceID) AS TotalSubscriptions\nFROM \n    Employees e\nINNER JOIN \n    Branches b ON e.BranchID = b.BranchID\nLEFT JOIN \n    Customers c ON b.BranchID = c.BranchID\nLEFT JOIN \n    CustomerServices cs ON c.CustomerID = cs.CustomerID\nLEFT JOIN \n    Services s ON cs.ServiceID = s.ServiceID\nGROUP BY \n    e.FirstName, e.LastName, e.Position, b.BranchName\nORDER BY \n    UniqueServicesCount DESC\nLIMIT 12;",
            "gpt-4o_response": "SELECT \n    e.FirstName, \n    e.LastName, \n    e.Position, \n    b.BranchName, \n    COUNT(DISTINCT cs.ServiceID) AS UniqueServicesCount, \n    COUNT(cs.CustomerServiceID) AS TotalServiceSubscriptions\nFROM \n    Employees e\nJOIN \n    Branches b ON e.BranchID = b.BranchID\nJOIN \n    Customers c ON b.BranchID = c.BranchID\nJOIN \n    CustomerServices cs ON c.CustomerID = cs.CustomerID\nGROUP BY \n    e.FirstName, e.LastName, e.Position, b.BranchName\nORDER BY \n    UniqueServicesCount DESC\nLIMIT 12;",
            "gpt-4o_response_ru": "SELECT \n    e.FirstName, \n    e.LastName, \n    e.Position, \n    b.BranchName, \n    COUNT(DISTINCT cs.ServiceID) AS UniqueServicesCount, \n    COUNT(cs.CustomerServiceID) AS TotalServiceSubscriptions\nFROM \n    Employees e\nJOIN \n    Branches b ON e.BranchID = b.BranchID\nJOIN \n    Customers c ON b.BranchID = c.BranchID\nJOIN \n    CustomerServices cs ON c.CustomerID = cs.CustomerID\nGROUP BY \n    e.EmployeeID, e.FirstName, e.LastName, e.Position, b.BranchName\nORDER BY \n    UniqueServicesCount DESC\nLIMIT 12;"
        },
        {
            "question": "Вывести анализ эффективности банкоматов: для каждого банкомата показать отношение доступных средств к среднему количеству транзакций клиентов отделения за последние 3 месяца. Показать местоположение банкомата, доступные средства, среднее количество транзакций по отделению и коэффициент эффективности. Результат отсортировать по коэффициенту эффективности по убыванию и ограничить 9 записями.",
            "sql_query": "WITH BranchTransactionStats AS (SELECT b.BranchID, AVG(TransactionCount) as AvgTransactionsPerCustomer FROM Branches b JOIN Customers c ON b.BranchID = c.BranchID JOIN (SELECT a.CustomerID, COUNT(t.TransactionID) as TransactionCount FROM Accounts a LEFT JOIN Transactions t ON a.AccountID = t.AccountID AND t.TransactionDate >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) GROUP BY a.CustomerID) tc ON c.CustomerID = tc.CustomerID GROUP BY b.BranchID) SELECT atm.Location, atm.CashAvailable, bts.AvgTransactionsPerCustomer, (atm.CashAvailable / GREATEST(bts.AvgTransactionsPerCustomer, 1)) as EfficiencyRatio FROM ATMs atm JOIN BranchTransactionStats bts ON atm.BranchID = bts.BranchID WHERE atm.Status = 'Active' ORDER BY EfficiencyRatio DESC LIMIT 9;",
            "google/gemini-2.0-flash-001_response": "WITH MonthlyTransactions AS (\n    SELECT\n        b.BranchID,\n        b.BranchName,\n        DATE_TRUNC('month', t.TransactionDate) AS TransactionMonth,\n        COUNT(t.TransactionID) AS TransactionCount\n    FROM\n        Branches b\n    JOIN\n        Accounts a ON b.BranchID = (SELECT BranchID FROM Customers WHERE CustomerID = a.CustomerID)\n    JOIN\n        Transactions t ON a.AccountID = t.AccountID\n    WHERE\n        t.TransactionDate >= DATE(NOW() - INTERVAL '3 month')\n    GROUP BY\n        b.BranchID, b.BranchName, DATE_TRUNC('month', t.TransactionDate)\n),\nAvgMonthlyTransactions AS (\n    SELECT\n        BranchID,\n        BranchName,\n        AVG(TransactionCount) AS AvgTransactionCount\n    FROM\n        MonthlyTransactions\n    GROUP BY\n        BranchID, BranchName\n)\nSELECT\n    at.Location,\n    at.CashAvailable,\n    amt.AvgTransactionCount,\n    (at.CashAvailable / amt.AvgTransactionCount) AS EfficiencyCoefficient\nFROM\n    ATMs at\nJOIN\n    Branches b ON at.BranchID = b.BranchID\nJOIN\n    AvgMonthlyTransactions amt ON b.BranchID = amt.BranchID\nORDER BY\n    EfficiencyCoefficient DESC\nLIMIT 9;",
            "google/gemini-2.0-flash-001_response_ru": "WITH MonthlyTransactions AS (\n    SELECT\n        b.BranchID,\n        b.BranchName,\n        DATE_TRUNC('month', t.TransactionDate) AS TransactionMonth,\n        COUNT(t.TransactionID) AS MonthlyTransactionCount\n    FROM\n        Branches b\n    JOIN\n        Employees e ON b.BranchID = e.BranchID\n    JOIN\n        Customers c ON b.BranchID = c.BranchID\n    JOIN\n        Accounts a ON c.CustomerID = a.CustomerID\n    JOIN\n        Transactions t ON a.AccountID = t.AccountID\n    WHERE\n        t.TransactionDate >= DATE('now', '-3 months')\n    GROUP BY\n        b.BranchID, b.BranchName, DATE_TRUNC('month', t.TransactionDate)\n),\nAvgMonthlyTransactions AS (\n    SELECT\n        BranchID,\n        BranchName,\n        AVG(MonthlyTransactionCount) AS AvgMonthlyTransactionCount\n    FROM\n        MonthlyTransactions\n    GROUP BY\n        BranchID, BranchName\n)\nSELECT\n    at.Location,\n    at.CashAvailable,\n    amt.AvgMonthlyTransactionCount,\n    (at.CashAvailable / amt.AvgMonthlyTransactionCount) AS EfficiencyCoefficient\nFROM\n    ATMs at\nJOIN\n    Branches b ON at.BranchID = b.BranchID\nJOIN\n    AvgMonthlyTransactions amt ON b.BranchID = amt.BranchID\nORDER BY\n    EfficiencyCoefficient DESC\nLIMIT 9;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH AverageTransactions AS (\n  SELECT \n    b.BranchID, \n    AVG(CASE WHEN t.TransactionDate >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) THEN 1 ELSE 0 END) AS AverageTransactions\n  FROM \n    Branches b\n  JOIN \n    Employees e ON b.BranchID = e.BranchID\n  JOIN \n    Customers c ON e.BranchID = c.BranchID\n  JOIN \n    Accounts a ON c.CustomerID = a.CustomerID\n  JOIN \n    Transactions t ON a.AccountID = t.AccountID\n  GROUP BY \n    b.BranchID\n),\nATMData AS (\n  SELECT \n    a.ATMID, \n    a.BranchID, \n    a.Location, \n    a.CashAvailable,\n    at.AverageTransactions\n  FROM \n    ATMs a\n  JOIN \n    AverageTransactions at ON a.BranchID = at.BranchID\n)\nSELECT \n  ad.Location, \n  ad.CashAvailable, \n  ad.AverageTransactions, \n  ad.CashAvailable / ad.AverageTransactions AS EfficiencyRatio\nFROM \n  ATMData ad\nORDER BY \n  EfficiencyRatio DESC\nLIMIT 9;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH AverageTransactions AS (\n  SELECT \n    b.BranchID, \n    AVG(CASE WHEN t.TransactionDate >= CURRENT_DATE - INTERVAL '3 month' THEN 1 ELSE 0 END) AS AverageTransactions\n  FROM \n    Branches b\n  JOIN \n    Accounts a ON b.BranchID = (SELECT BranchID FROM Customers WHERE CustomerID = a.CustomerID)\n  JOIN \n    Transactions t ON a.AccountID = t.AccountID\n  GROUP BY \n    b.BranchID\n),\nATMData AS (\n  SELECT \n    a.ATMID, \n    a.BranchID, \n    a.Location, \n    a.CashAvailable, \n    at.AverageTransactions\n  FROM \n    ATMs a\n  JOIN \n    AverageTransactions at ON a.BranchID = at.BranchID\n)\nSELECT \n  ad.Location, \n  ad.CashAvailable, \n  ad.AverageTransactions, \n  ad.CashAvailable / ad.AverageTransactions AS EfficiencyRatio\nFROM \n  ATMData ad\nORDER BY \n  EfficiencyRatio DESC\nLIMIT 9;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    a.ATMID,\n    a.Location,\n    a.CashAvailable AS AvailableFunds,\n    branch_avg.AvgTransactions AS AverageBranchTransactions,\n    (a.CashAvailable / NULLIF(branch_avg.AvgTransactions, 0)) AS EfficiencyRatio\nFROM \n    ATMs a\nJOIN \n    Branches b ON a.BranchID = b.BranchID\nJOIN (\n    SELECT \n        b.BranchID,\n        AVG(trans_count.TotalTransactions) AS AvgTransactions\n    FROM \n        Branches b\n    LEFT JOIN \n        Customers c ON b.BranchID = c.BranchID\n    LEFT JOIN (\n        SELECT \n            a.AccountID,\n            COUNT(t.TransactionID) AS TotalTransactions\n        FROM \n            Accounts a\n        JOIN \n            Transactions t ON a.AccountID = t.AccountID\n        WHERE \n            t.TransactionDate >= DATE_SUB(CURRENT_DATE(), INTERVAL 3 MONTH)\n        GROUP BY \n            a.AccountID\n    ) trans_count ON c.CustomerID = trans_count.AccountID\n    GROUP BY \n        b.BranchID\n) branch_avg ON b.BranchID = branch_avg.BranchID\nORDER BY \n    EfficiencyRatio DESC\nLIMIT 9;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    a.Location AS ATM_Location,\n    a.CashAvailable AS Available_Cash,\n    AVG(trans_count.TransactionCount) AS Avg_Transactions_Per_Branch,\n    (a.CashAvailable / NULLIF(AVG(trans_count.TransactionCount), 0)) AS Efficiency_Ratio\nFROM \n    ATMs a\nJOIN \n    Branches b ON a.BranchID = b.BranchID\nLEFT JOIN (\n    SELECT \n        c.BranchID,\n        COUNT(t.TransactionID) AS TransactionCount\n    FROM \n        Customers c\n    JOIN \n        Accounts ac ON c.CustomerID = ac.CustomerID\n    JOIN \n        Transactions t ON ac.AccountID = t.AccountID\n    WHERE \n        t.TransactionDate >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    GROUP BY \n        c.BranchID\n) trans_count ON b.BranchID = trans_count.BranchID\nGROUP BY \n    a.ATMID, a.Location, a.CashAvailable\nORDER BY \n    Efficiency_Ratio DESC\nLIMIT 9;",
            "gigachat_response": "WITH RecentTransactions AS (\n    -- Подзапрос для получения количества транзакций за последние три месяца по каждому отделению\n    SELECT \n        t.AccountID,\n        a.CustomerID,\n        c.BranchID,\n        COUNT(*) AS TransactionCount\n    FROM \n        Transactions t\n        INNER JOIN Accounts a ON t.AccountID = a.AccountID\n        INNER JOIN Customers c ON a.CustomerID = c.CustomerID\n    WHERE \n        t.TransactionDate >= DATEADD(MONTH, -3, GETDATE())\n    GROUP BY \n        t.AccountID, a.CustomerID, c.BranchID\n), \nAvgTransactionsPerBranch AS (\n    -- Среднее количество транзакций по каждому отделению\n    SELECT \n        BranchID,\n        AVG(TransactionCount) AS AvgTransactionCount\n    FROM \n        RecentTransactions\n    GROUP BY \n        BranchID\n)\n-- Основной запрос для анализа эффективности банкоматов\nSELECT \n    at.Location AS ATMLocation,\n    at.CashAvailable,\n    COALESCE(ab.AvgTransactionCount, 0) AS AvgTransactionsPerBranch,\n    CASE \n        WHEN ab.AvgTransactionCount = 0 THEN NULL \n        ELSE at.CashAvailable / ab.AvgTransactionCount \n    END AS EfficiencyCoefficient\nFROM \n    ATMs at\nLEFT JOIN \n    AvgTransactionsPerBranch ab ON at.BranchID = ab.BranchID\nORDER BY \n    EfficiencyCoefficient DESC\nLIMIT 9;",
            "gigachat_response_ru": "SELECT \n    at.Location,\n    at.CashAvailable,\n    COALESCE(AVG(tr.TransactionCount), 0) AS AvgTransactionsPerBranch,\n    CASE \n        WHEN AVG(tr.TransactionCount) <> 0 THEN at.CashAvailable / AVG(tr.TransactionCount)\n        ELSE 0\n    END AS EfficiencyCoefficient\nFROM \n    ATMs at\nLEFT JOIN \n    Branches br ON at.BranchID = br.BranchID\nLEFT JOIN \n    (\n        SELECT \n            BranchID, \n            COUNT(TransactionID) AS TransactionCount\n        FROM \n            Transactions tr\n        INNER JOIN \n            Accounts ac ON tr.AccountID = ac.AccountID\n        WHERE \n            tr.TransactionDate >= DATEADD(MONTH, -3, GETDATE())\n        GROUP BY \n            BranchID\n    ) tr ON br.BranchID = tr.BranchID\nGROUP BY \n    at.ATMID, at.Location, at.CashAvailable\nORDER BY \n    EfficiencyCoefficient DESC\nLIMIT 9;",
            "gpt-4o_response": "WITH BranchTransactionStats AS (\n    SELECT \n        b.BranchID,\n        AVG(t.TransactionCount) AS AvgTransactions\n    FROM \n        Branches b\n    LEFT JOIN \n        Customers c ON b.BranchID = c.BranchID\n    LEFT JOIN \n        Accounts a ON c.CustomerID = a.CustomerID\n    LEFT JOIN (\n        SELECT \n            AccountID, \n            COUNT(*) AS TransactionCount\n        FROM \n            Transactions\n        WHERE \n            TransactionDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH)\n        GROUP BY \n            AccountID\n    ) t ON a.AccountID = t.AccountID\n    GROUP BY \n        b.BranchID\n),\nATMStats AS (\n    SELECT \n        a.ATMID,\n        a.Location,\n        a.CashAvailable,\n        bts.AvgTransactions,\n        (a.CashAvailable / bts.AvgTransactions) AS EfficiencyRatio\n    FROM \n        ATMs a\n    JOIN \n        BranchTransactionStats bts ON a.BranchID = bts.BranchID\n)\nSELECT \n    Location,\n    CashAvailable,\n    AvgTransactions,\n    EfficiencyRatio\nFROM \n    ATMStats\nORDER BY \n    EfficiencyRatio DESC\nLIMIT 9;",
            "gpt-4o_response_ru": "SELECT \n    a.Location AS ATMLocation,\n    a.CashAvailable AS AvailableCash,\n    COALESCE(AVG(t.TransactionCount), 0) AS AvgBranchTransactions,\n    CASE WHEN COALESCE(AVG(t.TransactionCount), 0) = 0 THEN 0 \n         ELSE a.CashAvailable / COALESCE(AVG(t.TransactionCount), 0) \n    END AS EfficiencyRatio\nFROM \n    ATMs a\nJOIN \n    Branches b ON a.BranchID = b.BranchID\nLEFT JOIN \n    (SELECT \n         c.BranchID, \n         COUNT(t.TransactionID) AS TransactionCount\n     FROM \n         Customers c\n     JOIN \n         Accounts acc ON c.CustomerID = acc.CustomerID\n     JOIN \n         Transactions t ON acc.AccountID = t.AccountID\n     WHERE \n         t.TransactionDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH)\n     GROUP BY \n         c.BranchID) t ON b.BranchID = t.BranchID\nGROUP BY \n    a.ATMID, a.Location, a.CashAvailable\nORDER BY \n    EfficiencyRatio DESC\nLIMIT 9;"
        },
        {
            "question": "Найти клиентов с наиболее сбалансированным финансовым портфелем: клиенты, у которых отношение суммы депозитов к сумме кредитов находится в диапазоне от 0.8 до 1.2, и при этом есть активные страховые полисы и кредитные карты. Показать имя клиента, сумму депозитов, сумму кредитов, коэффициент баланса, количество страховых полисов и лимит по кредитным картам. Результат отсортировать по коэффициенту баланса по возрастанию и ограничить 15 записями.",
            "sql_query": "WITH CustomerBalance AS (SELECT c.CustomerID, c.FirstName, c.LastName, SUM(d.Amount) as TotalDeposits, SUM(l.PrincipalAmount) as TotalLoans, COUNT(DISTINCT ip.PolicyID) as PolicyCount, SUM(cc.CreditLimit) as TotalCreditLimit FROM Customers c LEFT JOIN Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен' LEFT JOIN Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно' LEFT JOIN InsurancePolicies ip ON c.CustomerID = ip.CustomerID AND ip.Status = 'Активен' LEFT JOIN CreditCards cc ON c.CustomerID = cc.CustomerID AND cc.Status = 'Активна' GROUP BY c.CustomerID, c.FirstName, c.LastName HAVING TotalDeposits > 0 AND TotalLoans > 0 AND PolicyCount > 0 AND TotalCreditLimit > 0) SELECT FirstName, LastName, TotalDeposits, TotalLoans, (TotalDeposits / TotalLoans) as BalanceRatio, PolicyCount, TotalCreditLimit FROM CustomerBalance WHERE (TotalDeposits / TotalLoans) BETWEEN 0.8 AND 1.2 ORDER BY BalanceRatio ASC LIMIT 15;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    c.FirstName,\n    c.LastName,\n    SUM(d.Amount) AS TotalDeposits,\n    SUM(l.PrincipalAmount) AS TotalLoans,\n    SUM(d.Amount) / SUM(l.PrincipalAmount) AS BalanceRatio,\n    COUNT(DISTINCT ip.PolicyID) AS PolicyCount,\n    SUM(cc.CreditLimit) AS TotalCreditLimit\nFROM\n    Customers c\nLEFT JOIN\n    Deposits d ON c.CustomerID = d.CustomerID\nLEFT JOIN\n    Loans l ON c.CustomerID = l.CustomerID\nLEFT JOIN\n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID AND ip.Status = 'Активен'\nLEFT JOIN\n    CreditCards cc ON c.CustomerID = cc.CustomerID AND cc.Status = 'Активна'\nWHERE l.PrincipalAmount > 0 AND d.Amount > 0\nGROUP BY\n    c.CustomerID, c.FirstName, c.LastName\nHAVING\n    SUM(d.Amount) / SUM(l.PrincipalAmount) BETWEEN 0.8 AND 1.2\n    AND COUNT(DISTINCT ip.PolicyID) > 0\n    AND SUM(cc.CreditLimit) > 0\nORDER BY\n    BalanceRatio ASC\nLIMIT 15;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    c.FirstName,\n    c.LastName,\n    SUM(d.Amount) AS TotalDeposits,\n    SUM(l.PrincipalAmount) AS TotalLoans,\n    SUM(d.Amount) / SUM(l.PrincipalAmount) AS BalanceRatio,\n    COUNT(DISTINCT ip.PolicyID) AS PolicyCount,\n    SUM(cc.CreditLimit) AS TotalCreditLimit\nFROM Customers c\nJOIN Deposits d ON c.CustomerID = d.CustomerID\nJOIN Loans l ON c.CustomerID = l.CustomerID\nJOIN InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nJOIN CreditCards cc ON c.CustomerID = cc.CustomerID\nWHERE ip.Status = 'Активен' AND cc.Status = 'Активна'\nGROUP BY c.CustomerID, c.FirstName, c.LastName\nHAVING SUM(d.Amount) / SUM(l.PrincipalAmount) BETWEEN 0.8 AND 1.2\nORDER BY BalanceRatio ASC\nLIMIT 15;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH BalancedCustomers AS (\n  SELECT \n    c.CustomerID,\n    c.FirstName,\n    c.LastName,\n    SUM(d.Amount) as TotalDeposits,\n    SUM(l.PrincipalAmount) as TotalLoans,\n    COUNT(DISTINCT ip.PolicyID) as ActivePolicies,\n    SUM(cc.CreditLimit) as TotalCreditLimit\n  FROM \n    Customers c\n  LEFT JOIN \n    Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\n  LEFT JOIN \n    Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\n  LEFT JOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID AND ip.Status = 'Активен'\n  LEFT JOIN \n    CreditCards cc ON c.CustomerID = cc.CustomerID AND cc.Status = 'Активна'\n  GROUP BY \n    c.CustomerID, c.FirstName, c.LastName\n  HAVING \n    TotalDeposits > 0 AND TotalLoans > 0 AND \n    (TotalDeposits / TotalLoans) BETWEEN 0.8 AND 1.2 AND \n    ActivePolicies > 0 AND TotalCreditLimit > 0\n)\nSELECT \n  FirstName,\n  LastName,\n  TotalDeposits,\n  TotalLoans,\n  (TotalDeposits / TotalLoans) as BalanceRatio,\n  ActivePolicies,\n  TotalCreditLimit\nFROM \n  BalancedCustomers\nORDER BY \n  BalanceRatio ASC\nLIMIT 15;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH BalancedCustomers AS (\n  SELECT \n    c.CustomerID,\n    c.FirstName,\n    c.LastName,\n    SUM(d.Amount) as TotalDeposits,\n    SUM(l.PrincipalAmount) as TotalLoans,\n    SUM(d.Amount) / SUM(l.PrincipalAmount) as BalanceRatio,\n    COUNT(ip.PolicyID) as InsurancePolicies,\n    SUM(cc.CreditLimit) as CreditCardLimit\n  FROM \n    Customers c\n  LEFT JOIN \n    Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\n  LEFT JOIN \n    Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\n  LEFT JOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID AND ip.Status = 'Активен'\n  LEFT JOIN \n    CreditCards cc ON c.CustomerID = cc.CustomerID AND cc.Status = 'Активна'\n  GROUP BY \n    c.CustomerID, c.FirstName, c.LastName\n  HAVING \n    SUM(d.Amount) > 0 AND \n    SUM(l.PrincipalAmount) > 0 AND \n    SUM(d.Amount) / SUM(l.PrincipalAmount) BETWEEN 0.8 AND 1.2 AND \n    COUNT(ip.PolicyID) > 0 AND \n    SUM(cc.CreditLimit) > 0\n)\nSELECT \n  FirstName,\n  LastName,\n  TotalDeposits,\n  TotalLoans,\n  BalanceRatio,\n  InsurancePolicies,\n  CreditCardLimit\nFROM \n  BalancedCustomers\nORDER BY \n  BalanceRatio ASC\nLIMIT 15;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH CustomerDeposits AS (\n    SELECT \n        c.CustomerID,\n        c.FirstName,\n        c.LastName,\n        SUM(d.Amount) AS TotalDeposits\n    FROM \n        Customers c\n    JOIN \n        Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\n    GROUP BY \n        c.CustomerID, c.FirstName, c.LastName\n),\nCustomerLoans AS (\n    SELECT \n        c.CustomerID,\n        SUM(l.PrincipalAmount) AS TotalLoans\n    FROM \n        Customers c\n    JOIN \n        Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\n    GROUP BY \n        c.CustomerID\n),\nCustomerInsurance AS (\n    SELECT \n        c.CustomerID,\n        COUNT(ip.PolicyID) AS ActivePolicies\n    FROM \n        Customers c\n    JOIN \n        InsurancePolicies ip ON c.CustomerID = ip.CustomerID AND ip.Status = 'Активен'\n    GROUP BY \n        c.CustomerID\n),\nCustomerCreditCards AS (\n    SELECT \n        c.CustomerID,\n        SUM(cc.CreditLimit) AS TotalCreditLimit\n    FROM \n        Customers c\n    JOIN \n        CreditCards cc ON c.CustomerID = cc.CustomerID AND cc.Status = 'Активна'\n    GROUP BY \n        c.CustomerID\n)\nSELECT \n    cd.FirstName,\n    cd.LastName,\n    cd.TotalDeposits,\n    COALESCE(cl.TotalLoans, 0) AS TotalLoans,\n    CASE \n        WHEN COALESCE(cl.TotalLoans, 0) = 0 THEN NULL\n        ELSE cd.TotalDeposits / COALESCE(cl.TotalLoans, 1)\n    END AS BalanceRatio,\n    COALESCE(ci.ActivePolicies, 0) AS ActivePolicies,\n    COALESCE(ccc.TotalCreditLimit, 0) AS TotalCreditLimit\nFROM \n    CustomerDeposits cd\nLEFT JOIN \n    CustomerLoans cl ON cd.CustomerID = cl.CustomerID\nLEFT JOIN \n    CustomerInsurance ci ON cd.CustomerID = ci.CustomerID\nLEFT JOIN \n    CustomerCreditCards ccc ON cd.CustomerID = ccc.CustomerID\nWHERE \n    (cd.TotalDeposits / NULLIF(COALESCE(cl.TotalLoans, 1), 0)) BETWEEN 0.8 AND 1.2\n    AND COALESCE(ci.ActivePolicies, 0) > 0\n    AND COALESCE(ccc.TotalCreditLimit, 0) > 0\nORDER BY \n    BalanceRatio ASC\nLIMIT 15;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "WITH CustomerDeposits AS (\n    SELECT \n        c.CustomerID,\n        c.FirstName,\n        c.LastName,\n        SUM(d.Amount) AS TotalDeposits\n    FROM \n        Customers c\n    JOIN \n        Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\n    GROUP BY \n        c.CustomerID, c.FirstName, c.LastName\n),\nCustomerLoans AS (\n    SELECT \n        c.CustomerID,\n        SUM(l.PrincipalAmount) AS TotalLoans\n    FROM \n        Customers c\n    JOIN \n        Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\n    GROUP BY \n        c.CustomerID\n),\nCustomerCreditCards AS (\n    SELECT \n        c.CustomerID,\n        SUM(cc.CreditLimit) AS TotalCreditLimit\n    FROM \n        Customers c\n    JOIN \n        CreditCards cc ON c.CustomerID = cc.CustomerID AND cc.Status = 'Активна'\n    GROUP BY \n        c.CustomerID\n),\nCustomerInsurancePolicies AS (\n    SELECT \n        c.CustomerID,\n        COUNT(ip.PolicyID) AS ActivePoliciesCount\n    FROM \n        Customers c\n    JOIN \n        InsurancePolicies ip ON c.CustomerID = ip.CustomerID AND ip.Status = 'Активен'\n    GROUP BY \n        c.CustomerID\n)\nSELECT \n    cd.FirstName,\n    cd.LastName,\n    cd.TotalDeposits,\n    cl.TotalLoans,\n    CASE \n        WHEN cl.TotalLoans = 0 THEN NULL \n        ELSE cd.TotalDeposits / cl.TotalLoans \n    END AS BalanceRatio,\n    cip.ActivePoliciesCount,\n    ccc.TotalCreditLimit\nFROM \n    CustomerDeposits cd\nJOIN \n    CustomerLoans cl ON cd.CustomerID = cl.CustomerID\nJOIN \n    CustomerCreditCards ccc ON cd.CustomerID = ccc.CustomerID\nJOIN \n    CustomerInsurancePolicies cip ON cd.CustomerID = cip.CustomerID\nWHERE \n    CASE \n        WHEN cl.TotalLoans = 0 THEN FALSE \n        ELSE (cd.TotalDeposits / cl.TotalLoans) BETWEEN 0.8 AND 1.2 \n    END\n    AND cip.ActivePoliciesCount > 0\n    AND ccc.TotalCreditLimit > 0\nORDER BY \n    BalanceRatio ASC\nLIMIT 15;",
            "gigachat_response": "WITH FinancialPortfolio AS (\n    SELECT \n        c.CustomerID,\n        c.FirstName || ' ' || c.MiddleName || ' ' || c.LastName AS FullName,\n        COALESCE(SUM(d.Amount), 0) AS TotalDeposits,\n        COALESCE(SUM(l.PrincipalAmount), 0) AS TotalLoans,\n        CASE \n            WHEN SUM(d.Amount) <> 0 THEN ROUND(SUM(l.PrincipalAmount) / SUM(d.Amount), 2)\n            ELSE NULL\n        END AS BalanceCoefficient,\n        COUNT(DISTINCT ip.PolicyID) AS NumInsurancePolicies,\n        MAX(cc.CreditLimit) AS MaxCreditCardLimit\n    FROM Customers c\n    LEFT JOIN Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\n    LEFT JOIN Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\n    LEFT JOIN InsurancePolicies ip ON c.CustomerID = ip.CustomerID AND ip.Status = 'Активен'\n    LEFT JOIN CreditCards cc ON c.CustomerID = cc.CustomerID AND cc.Status = 'Активна'\n    GROUP BY c.CustomerID, c.FirstName, c.MiddleName, c.LastName\n    HAVING BalanceCoefficient BETWEEN 0.8 AND 1.2\n       AND NumInsurancePolicies > 0\n       AND MaxCreditCardLimit IS NOT NULL\n)\nSELECT *\nFROM FinancialPortfolio\nORDER BY BalanceCoefficient ASC\nLIMIT 15;",
            "gigachat_response_ru": "WITH FinancialPortfolio AS (\n    SELECT \n        c.CustomerID,\n        c.FirstName || ' ' || c.LastName AS FullName,\n        COALESCE(SUM(d.Amount), 0) AS TotalDeposits,\n        COALESCE(SUM(l.PrincipalAmount), 0) AS TotalLoans,\n        CASE \n            WHEN SUM(d.Amount) <> 0 THEN ROUND(SUM(l.PrincipalAmount) / SUM(d.Amount), 2)\n            ELSE NULL\n        END AS BalanceCoefficient,\n        COUNT(DISTINCT ip.PolicyID) AS NumInsurancePolicies,\n        MAX(cc.CreditLimit) AS MaxCreditCardLimit\n    FROM Customers c\n    LEFT JOIN Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\n    LEFT JOIN Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\n    LEFT JOIN InsurancePolicies ip ON c.CustomerID = ip.CustomerID AND ip.Status = 'Активен'\n    LEFT JOIN CreditCards cc ON c.CustomerID = cc.CustomerID AND cc.Status = 'Активна'\n    GROUP BY c.CustomerID, c.FirstName, c.LastName\n    HAVING BalanceCoefficient BETWEEN 0.8 AND 1.2\n       AND NumInsurancePolicies > 0\n       AND MaxCreditCardLimit IS NOT NULL\n)\nSELECT *\nFROM FinancialPortfolio\nORDER BY BalanceCoefficient ASC\nLIMIT 15;",
            "gpt-4o_response": "WITH CustomerPortfolio AS (\n    SELECT \n        c.CustomerID,\n        c.FirstName,\n        c.LastName,\n        COALESCE(SUM(d.Amount), 0) AS TotalDeposits,\n        COALESCE(SUM(l.PrincipalAmount), 0) AS TotalLoans,\n        COALESCE(SUM(d.Amount), 0) / NULLIF(SUM(l.PrincipalAmount), 0) AS BalanceRatio\n    FROM \n        Customers c\n    LEFT JOIN \n        Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\n    LEFT JOIN \n        Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\n    GROUP BY \n        c.CustomerID, c.FirstName, c.LastName\n    HAVING \n        BalanceRatio BETWEEN 0.8 AND 1.2\n),\nActiveInsurance AS (\n    SELECT \n        CustomerID, COUNT(*) AS ActivePolicies\n    FROM \n        InsurancePolicies\n    WHERE \n        Status = 'Активен'\n    GROUP BY \n        CustomerID\n),\nActiveCreditCards AS (\n    SELECT \n        CustomerID, SUM(CreditLimit) AS TotalCreditLimit\n    FROM \n        CreditCards\n    WHERE \n        Status = 'Активна'\n    GROUP BY \n        CustomerID\n)\nSELECT \n    cp.FirstName,\n    cp.LastName,\n    cp.TotalDeposits,\n    cp.TotalLoans,\n    cp.BalanceRatio,\n    COALESCE(ai.ActivePolicies, 0) AS ActivePolicies,\n    COALESCE(acc.TotalCreditLimit, 0) AS TotalCreditLimit\nFROM \n    CustomerPortfolio cp\nJOIN \n    ActiveInsurance ai ON cp.CustomerID = ai.CustomerID\nJOIN \n    ActiveCreditCards acc ON cp.CustomerID = acc.CustomerID\nORDER BY \n    cp.BalanceRatio ASC\nLIMIT 15;",
            "gpt-4o_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    COALESCE(SUM(d.Amount), 0) AS TotalDeposits, \n    COALESCE(SUM(l.PrincipalAmount), 0) AS TotalLoans, \n    COALESCE(SUM(d.Amount), 0) / NULLIF(SUM(l.PrincipalAmount), 0) AS BalanceRatio, \n    COUNT(DISTINCT ip.PolicyID) AS ActiveInsurancePolicies, \n    SUM(cc.CreditLimit) AS TotalCreditLimit\nFROM \n    Customers c\nLEFT JOIN \n    Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\nLEFT JOIN \n    Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\nLEFT JOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID AND ip.Status = 'Активен'\nLEFT JOIN \n    CreditCards cc ON c.CustomerID = cc.CustomerID AND cc.Status = 'Активна'\nGROUP BY \n    c.CustomerID, c.FirstName, c.LastName\nHAVING \n    COALESCE(SUM(d.Amount), 0) / NULLIF(SUM(l.PrincipalAmount), 0) BETWEEN 0.8 AND 1.2\n    AND COUNT(DISTINCT ip.PolicyID) > 0\n    AND SUM(cc.CreditLimit) > 0\nORDER BY \n    BalanceRatio ASC\nLIMIT 15;"
        },
        {
            "question": "Вывести топ-11 отделений по доходности от комиссий за услуги: для каждого отделения подсчитать общую сумму комиссий от всех активных услуг клиентов, среднюю комиссию на одного клиента и процент клиентов, пользующихся платными услугами. Показать название отделения, общую сумму комиссий, среднюю комиссию на клиента, процент клиентов с услугами и количество активных услуг.",
            "sql_query": "WITH BranchRevenue AS (SELECT b.BranchID, b.BranchName, SUM(s.Fee) as TotalFees, COUNT(DISTINCT c.CustomerID) as TotalCustomers, COUNT(DISTINCT cs.CustomerID) as CustomersWithServices, COUNT(DISTINCT s.ServiceID) as ActiveServices FROM Branches b LEFT JOIN Customers c ON b.BranchID = c.BranchID LEFT JOIN CustomerServices cs ON c.CustomerID = cs.CustomerID AND cs.Status = 'активен' LEFT JOIN Services s ON cs.ServiceID = s.ServiceID AND s.Status = 'Активен' AND s.Fee > 0 GROUP BY b.BranchID, b.BranchName HAVING TotalFees > 0) SELECT BranchName, TotalFees, (TotalFees / TotalCustomers) as AvgFeePerCustomer, (CustomersWithServices * 100.0 / TotalCustomers) as ServiceUsagePercent, ActiveServices FROM BranchRevenue ORDER BY TotalFees DESC LIMIT 11;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    b.BranchName,\n    SUM(s.Fee) AS TotalFees,\n    AVG(s.Fee) AS AverageFeePerCustomer,\n    (COUNT(DISTINCT cs.CustomerID) * 100.0 / (SELECT COUNT(DISTINCT CustomerID) FROM Customers)) AS PercentageCustomersWithServices,\n    COUNT(cs.CustomerServiceID) AS ActiveServicesCount\nFROM\n    Branches b\nJOIN\n    Customers c ON b.BranchID = c.BranchID\nJOIN\n    CustomerServices cs ON c.CustomerID = cs.CustomerID\nJOIN\n    Services s ON cs.ServiceID = s.ServiceID\nWHERE\n    cs.Status = 'активен' AND s.Status = 'Активен'\nGROUP BY\n    b.BranchName\nORDER BY\n    TotalFees DESC\nLIMIT 11;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    b.BranchName,\n    SUM(s.Fee) AS TotalFees,\n    AVG(s.Fee) AS AverageFeePerCustomer,\n    (COUNT(DISTINCT cs.CustomerID) * 100.0 / (SELECT COUNT(*) FROM Customers WHERE BranchID = b.BranchID)) AS PercentageCustomersWithServices,\n    COUNT(cs.CustomerServiceID) AS ActiveServicesCount\nFROM\n    Branches b\nJOIN\n    Customers c ON b.BranchID = c.BranchID\nJOIN\n    CustomerServices cs ON c.CustomerID = cs.CustomerID\nJOIN\n    Services s ON cs.ServiceID = s.ServiceID\nWHERE\n    cs.Status = 'активен' AND s.Status = 'Активен'\nGROUP BY\n    b.BranchName\nORDER BY\n    TotalFees DESC\nLIMIT 11;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH BranchServices AS (\n  SELECT \n    b.BranchID, \n    b.BranchName, \n    SUM(s.Fee) AS TotalFees, \n    COUNT(DISTINCT c.CustomerID) AS TotalCustomers, \n    COUNT(DISTINCT cs.CustomerServiceID) AS ActiveServices\n  FROM \n    Branches b\n  JOIN \n    Customers c ON b.BranchID = c.BranchID\n  JOIN \n    CustomerServices cs ON c.CustomerID = cs.CustomerID\n  JOIN \n    Services s ON cs.ServiceID = s.ServiceID\n  WHERE \n    cs.Status = 'активен' AND s.Status = 'Активен'\n  GROUP BY \n    b.BranchID, b.BranchName\n),\nServiceStats AS (\n  SELECT \n    BranchName, \n    TotalFees, \n    TotalFees / TotalCustomers AS AverageFeePerCustomer, \n    (ActiveServices * 1.0 / TotalCustomers) * 100 AS PercentageWithServices, \n    ActiveServices\n  FROM \n    BranchServices\n)\nSELECT \n  BranchName, \n  TotalFees, \n  AverageFeePerCustomer, \n  PercentageWithServices, \n  ActiveServices\nFROM \n  ServiceStats\nORDER BY \n  TotalFees DESC\nLIMIT 11;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH ServiceFees AS (\n  SELECT \n    b.BranchName, \n    cs.CustomerID, \n    s.Fee, \n    s.Status\n  FROM \n    CustomerServices cs\n  JOIN \n    Services s ON cs.ServiceID = s.ServiceID\n  JOIN \n    Customers c ON cs.CustomerID = c.CustomerID\n  JOIN \n    Branches b ON c.BranchID = b.BranchID\n),\nActiveServices AS (\n  SELECT \n    BranchName, \n    COUNT(DISTINCT CustomerID) AS ActiveCustomers, \n    SUM(CASE WHEN Status = 'Активен' THEN 1 ELSE 0 END) AS TotalActiveServices, \n    SUM(Fee) AS TotalFees\n  FROM \n    ServiceFees\n  GROUP BY \n    BranchName\n),\nCustomerCount AS (\n  SELECT \n    b.BranchName, \n    COUNT(DISTINCT c.CustomerID) AS TotalCustomers\n  FROM \n    Customers c\n  JOIN \n    Branches b ON c.BranchID = b.BranchID\n  GROUP BY \n    b.BranchName\n)\nSELECT \n  asv.BranchName, \n  asv.TotalFees, \n  asv.TotalFees / cc.TotalCustomers AS AvgFeePerCustomer, \n  (asv.ActiveCustomers * 1.0 / cc.TotalCustomers) * 100 AS PercentCustomersWithServices, \n  asv.TotalActiveServices\nFROM \n  ActiveServices asv\nJOIN \n  CustomerCount cc ON asv.BranchName = cc.BranchName\nORDER BY \n  TotalFees DESC\nLIMIT 11;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    b.BranchName,\n    SUM(s.Fee) AS TotalCommission,\n    AVG(s.Fee) AS AvgCommissionPerCustomer,\n    (COUNT(DISTINCT cs.CustomerID) * 100.0 / COUNT(DISTINCT c.CustomerID)) AS PercentageCustomersWithServices,\n    COUNT(DISTINCT cs.ServiceID) AS ActiveServicesCount\nFROM \n    Branches b\nJOIN \n    Customers c ON b.BranchID = c.BranchID\nLEFT JOIN \n    CustomerServices cs ON c.CustomerID = cs.CustomerID AND cs.Status = 'активен'\nLEFT JOIN \n    Services s ON cs.ServiceID = s.ServiceID AND s.Status = 'Активен' AND s.Fee > 0\nGROUP BY \n    b.BranchName\nORDER BY \n    TotalCommission DESC\nLIMIT 11;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    b.BranchName,\n    SUM(s.Fee) AS TotalCommission,\n    SUM(s.Fee) / COUNT(DISTINCT c.CustomerID) AS AvgCommissionPerCustomer,\n    COUNT(DISTINCT CASE WHEN cs.CustomerServiceID IS NOT NULL THEN c.CustomerID END) * 100.0 / COUNT(DISTINCT c.CustomerID) AS PercentageCustomersWithServices,\n    COUNT(DISTINCT cs.CustomerServiceID) AS ActiveServicesCount\nFROM \n    Branches b\nJOIN \n    Customers c ON b.BranchID = c.BranchID\nLEFT JOIN \n    CustomerServices cs ON c.CustomerID = cs.CustomerID AND cs.Status = 'активен'\nLEFT JOIN \n    Services s ON cs.ServiceID = s.ServiceID AND s.Status = 'Активен' AND s.Fee > 0\nGROUP BY \n    b.BranchName\nORDER BY \n    TotalCommission DESC\nLIMIT 11;",
            "gigachat_response": "WITH ActiveServices AS (\n    SELECT \n        s.ServiceID, \n        s.Fee, \n        s.Currency, \n        cs.CustomerID, \n        b.BranchID\n    FROM \n        Services s \n    INNER JOIN \n        CustomerServices cs ON s.ServiceID = cs.ServiceID \n    INNER JOIN \n        Customers c ON cs.CustomerID = c.CustomerID \n    INNER JOIN \n        Branches b ON c.BranchID = b.BranchID \n    WHERE \n        cs.Status = 'активен'\n), \nBranchMetrics AS (\n    SELECT \n        b.BranchID, \n        b.BranchName, \n        SUM(s.Fee) AS TotalFees, \n        COUNT(DISTINCT c.CustomerID) AS TotalCustomersWithServices, \n        COUNT(DISTINCT cs.CustomerID) AS TotalActiveCustomers, \n        COUNT(DISTINCT cs.ServiceID) AS TotalActiveServices\n    FROM \n        Branches b \n    LEFT JOIN \n        Customers c ON b.BranchID = c.BranchID \n    LEFT JOIN \n        ActiveServices cs ON c.CustomerID = cs.CustomerID \n    GROUP BY \n        b.BranchID, \n        b.BranchName\n), \nFinalResults AS (\n    SELECT \n        bm.BranchName, \n        bm.TotalFees, \n        CASE \n            WHEN bm.TotalActiveCustomers > 0 THEN ROUND(bm.TotalFees / bm.TotalActiveCustomers, 2) \n            ELSE 0 \n        END AS AverageFeePerCustomer, \n        CASE \n            WHEN bm.TotalCustomersWithServices > 0 THEN ROUND((bm.TotalActiveCustomers * 100.0 / bm.TotalCustomersWithServices), 2) \n            ELSE 0 \n        END AS PercentageOfCustomersUsingPaidServices, \n        bm.TotalActiveServices\n    FROM \n        BranchMetrics bm\n)\nSELECT *\nFROM FinalResults\nORDER BY TotalFees DESC\nLIMIT 11;",
            "gigachat_response_ru": "SELECT \n    b.BranchName,\n    SUM(s.Fee * cs.ServiceCount) AS TotalCommission,\n    CASE \n        WHEN COUNT(DISTINCT c.CustomerID) > 0 THEN SUM(s.Fee * cs.ServiceCount) / COUNT(DISTINCT c.CustomerID)\n        ELSE 0\n    END AS AverageCommissionPerClient,\n    ROUND((COUNT(DISTINCT cs.CustomerID) / COUNT(DISTINCT c.CustomerID)) * 100, 2) AS PercentClientsWithPaidServices,\n    SUM(cs.ServiceCount) AS TotalActiveServices\nFROM \n    Branches b\nLEFT JOIN \n    Customers c ON b.BranchID = c.BranchID\nLEFT JOIN \n    (SELECT \n         CustomerID, \n         COUNT(*) AS ServiceCount \n     FROM \n         CustomerServices \n     WHERE \n         Status = 'Активен'\n     GROUP BY \n         CustomerID) cs ON c.CustomerID = cs.CustomerID\nLEFT JOIN \n    Services s ON cs.ServiceID = s.ServiceID\nGROUP BY \n    b.BranchName\nORDER BY \n    TotalCommission DESC\nLIMIT 11;",
            "gpt-4o_response": "SELECT \n    b.BranchName,\n    SUM(s.Fee) AS TotalFees,\n    AVG(s.Fee) AS AvgFeePerCustomer,\n    (COUNT(DISTINCT cs.CustomerID) * 100.0 / COUNT(DISTINCT c.CustomerID)) AS PercentageCustomersWithServices,\n    COUNT(cs.CustomerServiceID) AS ActiveServicesCount\nFROM \n    Branches b\nJOIN \n    Customers c ON b.BranchID = c.BranchID\nJOIN \n    CustomerServices cs ON c.CustomerID = cs.CustomerID\nJOIN \n    Services s ON cs.ServiceID = s.ServiceID\nWHERE \n    cs.Status = 'активен' AND s.Status = 'Активен'\nGROUP BY \n    b.BranchName\nORDER BY \n    TotalFees DESC\nLIMIT 11;",
            "gpt-4o_response_ru": "SELECT \n    b.BranchName,\n    SUM(s.Fee) AS TotalFees,\n    AVG(s.Fee) AS AvgFeePerCustomer,\n    (COUNT(DISTINCT cs.CustomerID) * 100.0 / COUNT(DISTINCT c.CustomerID)) AS PercentCustomersWithServices,\n    COUNT(cs.CustomerServiceID) AS ActiveServicesCount\nFROM \n    Branches b\nJOIN \n    Customers c ON b.BranchID = c.BranchID\nJOIN \n    CustomerServices cs ON c.CustomerID = cs.CustomerID\nJOIN \n    Services s ON cs.ServiceID = s.ServiceID\nWHERE \n    cs.Status = 'активен' AND s.Status = 'Активен'\nGROUP BY \n    b.BranchName\nORDER BY \n    TotalFees DESC\nLIMIT 11;"
        },
        {
            "question": "Найти клиентов с аномальными паттернами транзакций: клиенты, у которых средняя сумма транзакций по кредитным картам в 3 раза превышает среднюю сумму транзакций по счетам, и при этом есть активные депозиты. Показать имя клиента, среднюю сумму транзакций по картам, среднюю сумму транзакций по счетам, коэффициент превышения, сумму депозитов и количество транзакций каждого типа. Результат отсортировать по коэффициенту превышения по убыванию и ограничить 13 записями.",
            "sql_query": "WITH CustomerTransactionPatterns AS (SELECT c.CustomerID, c.FirstName, c.LastName, AVG(ct.Amount) as AvgCardTransaction, COUNT(ct.CardTransactionID) as CardTransactionCount, AVG(t.Amount) as AvgAccountTransaction, COUNT(t.TransactionID) as AccountTransactionCount, SUM(d.Amount) as TotalDeposits FROM Customers c LEFT JOIN CreditCards cc ON c.CustomerID = cc.CustomerID LEFT JOIN CardTransactions ct ON cc.CardID = ct.CardID AND ct.Status = 'Завершена' LEFT JOIN Accounts a ON c.CustomerID = a.CustomerID LEFT JOIN Transactions t ON a.AccountID = t.AccountID AND t.Status = 'Завершено' LEFT JOIN Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен' GROUP BY c.CustomerID, c.FirstName, c.LastName HAVING AvgCardTransaction > 0 AND AvgAccountTransaction > 0 AND TotalDeposits > 0 AND (AvgCardTransaction / AvgAccountTransaction) >= 3) SELECT FirstName, LastName, AvgCardTransaction, AvgAccountTransaction, (AvgCardTransaction / AvgAccountTransaction) as ExcessRatio, TotalDeposits, CardTransactionCount, AccountTransactionCount FROM CustomerTransactionPatterns ORDER BY ExcessRatio DESC LIMIT 13;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    c.FirstName,\n    c.LastName,\n    AVG(ct.Amount) AS AvgCardTransactionAmount,\n    AVG(t.Amount) AS AvgAccountTransactionAmount,\n    AVG(ct.Amount) / AVG(t.Amount) AS ExceedRatio,\n    SUM(d.Amount) AS TotalDepositAmount,\n    SUM(CASE WHEN t.TransactionType = 'Пополнение' THEN 1 ELSE 0 END) AS TotalDepositTransactions,\n    SUM(CASE WHEN t.TransactionType = 'Оплата' THEN 1 ELSE 0 END) AS TotalPaymentTransactions,\n    SUM(CASE WHEN t.TransactionType = 'Перевод' THEN 1 ELSE 0 END) AS TotalTransferTransactions,\n    SUM(CASE WHEN t.TransactionType = 'Покупка' THEN 1 ELSE 0 END) AS TotalPurchaseTransactions\nFROM\n    Customers c\nJOIN\n    CreditCards cc ON c.CustomerID = cc.CustomerID\nJOIN\n    CardTransactions ct ON cc.CardID = ct.CardID\nJOIN\n    Accounts a ON c.CustomerID = a.CustomerID\nJOIN\n    Transactions t ON a.AccountID = t.AccountID\nJOIN\n    Deposits d ON c.CustomerID = d.CustomerID\nWHERE\n    d.Status = 'Активен'\nGROUP BY\n    c.CustomerID, c.FirstName, c.LastName\nHAVING\n    AVG(ct.Amount) > 3 * AVG(t.Amount)\nORDER BY\n    ExceedRatio DESC\nLIMIT 13;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    c.FirstName,\n    c.LastName,\n    AVG(ct.Amount) AS AvgCardTransactionAmount,\n    AVG(t.Amount) AS AvgAccountTransactionAmount,\n    AVG(ct.Amount) / AVG(t.Amount) AS ExceedRatio,\n    SUM(d.Amount) AS TotalDepositAmount,\n    COUNT(CASE WHEN t.TransactionType = 'Пополнение' THEN 1 END) AS TotalDepositTransactions,\n    COUNT(CASE WHEN t.TransactionType = 'Оплата' THEN 1 END) AS TotalPaymentTransactions,\n    COUNT(CASE WHEN t.TransactionType = 'Перевод' THEN 1 END) AS TotalTransferTransactions,\n    COUNT(CASE WHEN t.TransactionType = 'Покупка' THEN 1 END) AS TotalPurchaseTransactions\nFROM\n    Customers c\nJOIN\n    CreditCards cc ON c.CustomerID = cc.CustomerID\nJOIN\n    CardTransactions ct ON cc.CardID = ct.CardID\nJOIN\n    Accounts a ON c.CustomerID = a.CustomerID\nJOIN\n    Transactions t ON a.AccountID = t.AccountID\nJOIN\n    Deposits d ON c.CustomerID = d.CustomerID\nWHERE\n    d.Status = 'Активен'\nGROUP BY\n    c.CustomerID, c.FirstName, c.LastName\nHAVING\n    AVG(ct.Amount) / AVG(t.Amount) > 3\nORDER BY\n    ExceedRatio DESC\nLIMIT 13;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH CustomerTransactions AS (\n  SELECT \n    c.CustomerID, \n    c.FirstName, \n    c.LastName, \n    AVG(ct.Amount) AS AvgCardTransactionAmount,\n    COUNT(ct.CardTransactionID) AS CardTransactionsCount,\n    AVG(t.Amount) AS AvgAccountTransactionAmount,\n    COUNT(t.TransactionID) AS AccountTransactionsCount\n  FROM \n    Customers c\n  LEFT JOIN \n    CreditCards cc ON c.CustomerID = cc.CustomerID\n  LEFT JOIN \n    CardTransactions ct ON cc.CardID = ct.CardID\n  LEFT JOIN \n    Accounts a ON c.CustomerID = a.CustomerID\n  LEFT JOIN \n    Transactions t ON a.AccountID = t.AccountID\n  GROUP BY \n    c.CustomerID, \n    c.FirstName, \n    c.LastName\n),\nCustomerDeposits AS (\n  SELECT \n    c.CustomerID, \n    SUM(d.Amount) AS TotalDepositsAmount\n  FROM \n    Customers c\n  JOIN \n    Deposits d ON c.CustomerID = d.CustomerID\n  WHERE \n    d.Status = 'Активен'\n  GROUP BY \n    c.CustomerID\n)\nSELECT \n  ct.FirstName, \n  ct.LastName, \n  ct.AvgCardTransactionAmount, \n  ct.AvgAccountTransactionAmount, \n  ct.AvgCardTransactionAmount / ct.AvgAccountTransactionAmount AS ExceedanceRatio,\n  cd.TotalDepositsAmount,\n  ct.CardTransactionsCount,\n  ct.AccountTransactionsCount\nFROM \n  CustomerTransactions ct\nJOIN \n  CustomerDeposits cd ON ct.CustomerID = cd.CustomerID\nWHERE \n  ct.AvgCardTransactionAmount > 0 AND \n  ct.AvgAccountTransactionAmount > 0 AND \n  ct.AvgCardTransactionAmount / ct.AvgAccountTransactionAmount > 3\nORDER BY \n  ExceedanceRatio DESC\nLIMIT 13;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH CardTransactionsSummary AS (\n  SELECT c.CustomerID, AVG(ct.Amount) AS AvgCardTransactionAmount, COUNT(ct.CardTransactionID) AS TotalCardTransactions\n  FROM Customers c\n  JOIN CreditCards cc ON c.CustomerID = cc.CustomerID\n  JOIN CardTransactions ct ON cc.CardID = ct.CardID\n  WHERE ct.Status = 'Завершена'\n  GROUP BY c.CustomerID\n),\nAccountTransactionsSummary AS (\n  SELECT c.CustomerID, AVG(t.Amount) AS AvgAccountTransactionAmount, COUNT(t.TransactionID) AS TotalAccountTransactions\n  FROM Customers c\n  JOIN Accounts a ON c.CustomerID = a.CustomerID\n  JOIN Transactions t ON a.AccountID = t.AccountID\n  WHERE t.Status = 'Завершено'\n  GROUP BY c.CustomerID\n),\nDepositSummary AS (\n  SELECT c.CustomerID, SUM(d.Amount) AS TotalDepositAmount\n  FROM Customers c\n  JOIN Deposits d ON c.CustomerID = d.CustomerID\n  WHERE d.Status = 'Активен'\n  GROUP BY c.CustomerID\n)\nSELECT \n  c.FirstName, \n  c.LastName, \n  cs.AvgCardTransactionAmount, \n  ats.AvgAccountTransactionAmount, \n  cs.AvgCardTransactionAmount / ats.AvgAccountTransactionAmount AS ExcessRatio,\n  ds.TotalDepositAmount,\n  cs.TotalCardTransactions,\n  ats.TotalAccountTransactions\nFROM Customers c\nJOIN CardTransactionsSummary cs ON c.CustomerID = cs.CustomerID\nJOIN AccountTransactionsSummary ats ON c.CustomerID = ats.CustomerID\nJOIN DepositSummary ds ON c.CustomerID = ds.CustomerID\nWHERE cs.AvgCardTransactionAmount / ats.AvgAccountTransactionAmount > 3\nORDER BY ExcessRatio DESC\nLIMIT 13;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH CardTransactionsAvg AS (\n    SELECT \n        c.CustomerID,\n        AVG(ct.Amount) AS AvgCardTransactionAmount,\n        COUNT(ct.CardTransactionID) AS CardTransactionCount\n    FROM \n        Customers c\n    JOIN \n        CreditCards cc ON c.CustomerID = cc.CustomerID\n    JOIN \n        CardTransactions ct ON cc.CardID = ct.CardID\n    WHERE \n        ct.Status = 'Завершена'\n    GROUP BY \n        c.CustomerID\n),\nAccountTransactionsAvg AS (\n    SELECT \n        c.CustomerID,\n        AVG(t.Amount) AS AvgAccountTransactionAmount,\n        COUNT(t.TransactionID) AS AccountTransactionCount\n    FROM \n        Customers c\n    JOIN \n        Accounts a ON c.CustomerID = a.CustomerID\n    JOIN \n        Transactions t ON a.AccountID = t.AccountID\n    WHERE \n        t.Status = 'Завершено'\n    GROUP BY \n        c.CustomerID\n),\nActiveDeposits AS (\n    SELECT \n        c.CustomerID,\n        SUM(d.Amount) AS TotalDepositAmount\n    FROM \n        Customers c\n    JOIN \n        Deposits d ON c.CustomerID = d.CustomerID\n    WHERE \n        d.Status = 'Активен'\n    GROUP BY \n        c.CustomerID\n)\nSELECT \n    c.FirstName || ' ' || c.LastName AS CustomerName,\n    ca.AvgCardTransactionAmount,\n    aa.AvgAccountTransactionAmount,\n    (ca.AvgCardTransactionAmount / aa.AvgAccountTransactionAmount) AS Ratio,\n    ad.TotalDepositAmount,\n    ca.CardTransactionCount,\n    aa.AccountTransactionCount\nFROM \n    Customers c\nJOIN \n    CardTransactionsAvg ca ON c.CustomerID = ca.CustomerID\nJOIN \n    AccountTransactionsAvg aa ON c.CustomerID = aa.CustomerID\nJOIN \n    ActiveDeposits ad ON c.CustomerID = ad.CustomerID\nWHERE \n    (ca.AvgCardTransactionAmount / aa.AvgAccountTransactionAmount) >= 3\nORDER BY \n    Ratio DESC\nLIMIT 13;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    c.FirstName || ' ' || c.LastName AS CustomerName,\n    AVG(ct.Amount) AS AvgCardTransactionAmount,\n    AVG(t.Amount) AS AvgAccountTransactionAmount,\n    AVG(ct.Amount) / AVG(t.Amount) AS Ratio,\n    SUM(d.Amount) AS TotalDepositAmount,\n    COUNT(DISTINCT ct.CardTransactionID) AS CardTransactionsCount,\n    COUNT(DISTINCT t.TransactionID) AS AccountTransactionsCount\nFROM \n    Customers c\nJOIN \n    CreditCards cc ON c.CustomerID = cc.CustomerID\nJOIN \n    CardTransactions ct ON cc.CardID = ct.CardID AND ct.Status = 'Завершена'\nJOIN \n    Accounts a ON c.CustomerID = a.CustomerID\nJOIN \n    Transactions t ON a.AccountID = t.AccountID AND t.Status = 'Завершено'\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\nGROUP BY \n    c.CustomerID, c.FirstName, c.LastName\nHAVING \n    AVG(ct.Amount) > 3 * AVG(t.Amount)\nORDER BY \n    Ratio DESC\nLIMIT 13;",
            "gigachat_response": "WITH CardTransactionStats AS (\n    SELECT \n        c.CustomerID,\n        AVG(ct.Amount) AS AvgCardTransactionAmount,\n        COUNT(ct.CardTransactionID) AS NumCardTransactions\n    FROM \n        Customers c\n    INNER JOIN \n        CreditCards cc ON c.CustomerID = cc.CustomerID\n    INNER JOIN \n        CardTransactions ct ON cc.CardID = ct.CardID\n    WHERE \n        ct.Status = 'Завершена'\n    GROUP BY \n        c.CustomerID\n), \nAccountTransactionStats AS (\n    SELECT \n        c.CustomerID,\n        AVG(t.Amount) AS AvgAccountTransactionAmount,\n        COUNT(t.TransactionID) AS NumAccountTransactions\n    FROM \n        Customers c\n    INNER JOIN \n        Accounts a ON c.CustomerID = a.CustomerID\n    INNER JOIN \n        Transactions t ON a.AccountID = t.AccountID\n    WHERE \n        t.Status = 'Завершено'\n    GROUP BY \n        c.CustomerID\n), \nDepositInfo AS (\n    SELECT \n        c.CustomerID,\n        SUM(d.Amount) AS TotalDepositAmount\n    FROM \n        Customers c\n    INNER JOIN \n        Deposits d ON c.CustomerID = d.CustomerID\n    WHERE \n        d.Status = 'Активен'\n    GROUP BY \n        c.CustomerID\n)\nSELECT \n    c.FirstName || ' ' || c.LastName AS FullName,\n    CTS.AvgCardTransactionAmount,\n    ATS.AvgAccountTransactionAmount,\n    ROUND((CTS.AvgCardTransactionAmount / ATS.AvgAccountTransactionAmount)::numeric, 2) AS ExcessFactor,\n    DI.TotalDepositAmount,\n    CTS.NumCardTransactions,\n    ATS.NumAccountTransactions\nFROM \n    Customers c\nINNER JOIN \n    CardTransactionStats CTS ON c.CustomerID = CTS.CustomerID\nINNER JOIN \n    AccountTransactionStats ATS ON c.CustomerID = ATS.CustomerID\nINNER JOIN \n    DepositInfo DI ON c.CustomerID = DI.CustomerID\nWHERE \n    CTS.AvgCardTransactionAmount >= 3 * ATS.AvgAccountTransactionAmount\nORDER BY \n    ExcessFactor DESC\nLIMIT 13;",
            "gigachat_response_ru": "WITH CardStats AS (\n    SELECT \n        c.CustomerID,\n        AVG(ct.Amount) AS AvgCardTransactionAmount,\n        COUNT(ct.CardTransactionID) AS NumCardTransactions\n    FROM \n        Customers c\n    INNER JOIN \n        CreditCards cc ON c.CustomerID = cc.CustomerID\n    INNER JOIN \n        CardTransactions ct ON cc.CardID = ct.CardID\n    WHERE \n        ct.Status = 'Завершена'\n    GROUP BY \n        c.CustomerID\n), \nAccountStats AS (\n    SELECT \n        c.CustomerID,\n        AVG(t.Amount) AS AvgAccountTransactionAmount,\n        COUNT(t.TransactionID) AS NumAccountTransactions\n    FROM \n        Customers c\n    INNER JOIN \n        Accounts a ON c.CustomerID = a.CustomerID\n    INNER JOIN \n        Transactions t ON a.AccountID = t.AccountID\n    WHERE \n        t.Status = 'Завершено'\n    GROUP BY \n        c.CustomerID\n), \nDepositInfo AS (\n    SELECT \n        c.CustomerID,\n        SUM(d.Amount) AS TotalDepositAmount\n    FROM \n        Customers c\n    INNER JOIN \n        Deposits d ON c.CustomerID = d.CustomerID\n    WHERE \n        d.Status = 'Активен'\n    GROUP BY \n        c.CustomerID\n)\nSELECT \n    c.FirstName || ' ' || c.LastName AS FullName,\n    cs.AvgCardTransactionAmount,\n    as_.AvgAccountTransactionAmount,\n    ROUND((cs.AvgCardTransactionAmount / as_.AvgAccountTransactionAmount)::numeric, 2) AS ExceedFactor,\n    di.TotalDepositAmount,\n    cs.NumCardTransactions,\n    as_.NumAccountTransactions\nFROM \n    Customers c\nINNER JOIN \n    CardStats cs ON c.CustomerID = cs.CustomerID\nINNER JOIN \n    AccountStats as_ ON c.CustomerID = as_.CustomerID\nINNER JOIN \n    DepositInfo di ON c.CustomerID = di.CustomerID\nWHERE \n    cs.AvgCardTransactionAmount >= 3 * as_.AvgAccountTransactionAmount\nORDER BY \n    ExceedFactor DESC\nLIMIT 13;",
            "gpt-4o_response": "WITH AvgCardTransactions AS (\n    SELECT \n        c.CustomerID,\n        AVG(ct.Amount) AS AvgCardTransactionAmount,\n        COUNT(ct.CardTransactionID) AS CardTransactionCount\n    FROM \n        Customers c\n    JOIN \n        CreditCards cc ON c.CustomerID = cc.CustomerID\n    JOIN \n        CardTransactions ct ON cc.CardID = ct.CardID\n    WHERE \n        ct.Status = 'Завершена'\n    GROUP BY \n        c.CustomerID\n),\nAvgAccountTransactions AS (\n    SELECT \n        c.CustomerID,\n        AVG(t.Amount) AS AvgAccountTransactionAmount,\n        COUNT(t.TransactionID) AS AccountTransactionCount\n    FROM \n        Customers c\n    JOIN \n        Accounts a ON c.CustomerID = a.CustomerID\n    JOIN \n        Transactions t ON a.AccountID = t.AccountID\n    WHERE \n        t.Status = 'Завершено'\n    GROUP BY \n        c.CustomerID\n),\nActiveDeposits AS (\n    SELECT \n        d.CustomerID,\n        SUM(d.Amount) AS TotalDepositAmount\n    FROM \n        Deposits d\n    WHERE \n        d.Status = 'Активен'\n    GROUP BY \n        d.CustomerID\n)\nSELECT \n    c.FirstName,\n    c.LastName,\n    act.AvgCardTransactionAmount,\n    aat.AvgAccountTransactionAmount,\n    (act.AvgCardTransactionAmount / aat.AvgAccountTransactionAmount) AS ExceedRatio,\n    ad.TotalDepositAmount,\n    act.CardTransactionCount,\n    aat.AccountTransactionCount\nFROM \n    AvgCardTransactions act\nJOIN \n    AvgAccountTransactions aat ON act.CustomerID = aat.CustomerID\nJOIN \n    ActiveDeposits ad ON act.CustomerID = ad.CustomerID\nJOIN \n    Customers c ON act.CustomerID = c.CustomerID\nWHERE \n    act.AvgCardTransactionAmount > 3 * aat.AvgAccountTransactionAmount\nORDER BY \n    ExceedRatio DESC\nLIMIT 13;",
            "gpt-4o_response_ru": "SELECT \n    c.FirstName, \n    c.LastName,\n    AVG(ct.Amount) AS AvgCardTransactionAmount,\n    AVG(t.Amount) AS AvgAccountTransactionAmount,\n    (AVG(ct.Amount) / AVG(t.Amount)) AS ExceedRatio,\n    SUM(d.Amount) AS TotalDeposits,\n    COUNT(DISTINCT ct.CardTransactionID) AS CardTransactionCount,\n    COUNT(DISTINCT t.TransactionID) AS AccountTransactionCount\nFROM \n    Customers c\nJOIN \n    CreditCards cc ON c.CustomerID = cc.CustomerID\nJOIN \n    CardTransactions ct ON cc.CardID = ct.CardID AND ct.Status = 'Завершена'\nJOIN \n    Accounts a ON c.CustomerID = a.CustomerID\nJOIN \n    Transactions t ON a.AccountID = t.AccountID AND t.Status = 'Завершено'\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\nGROUP BY \n    c.CustomerID, c.FirstName, c.LastName\nHAVING \n    AVG(ct.Amount) > 3 * AVG(t.Amount)\nORDER BY \n    ExceedRatio DESC\nLIMIT 13;"
        },
        {
            "question": "Вывести анализ возрастных групп клиентов по их финансовой активности: разделить клиентов на возрастные группы (до 30, 30-45, 45-60, старше 60) и для каждой группы показать среднее количество активных продуктов, среднюю сумму кредитов, среднюю сумму депозитов и процент клиентов со страховыми полисами. Результат отсортировать по средней сумме депозитов по убыванию и ограничить 4 записями.",
            "sql_query": "WITH AgeGroups AS (SELECT c.CustomerID, c.FirstName, c.LastName, CASE WHEN YEAR(CURRENT_DATE) - YEAR(c.DateOfBirth) < 30 THEN 'до 30' WHEN YEAR(CURRENT_DATE) - YEAR(c.DateOfBirth) BETWEEN 30 AND 45 THEN '30-45' WHEN YEAR(CURRENT_DATE) - YEAR(c.DateOfBirth) BETWEEN 46 AND 60 THEN '46-60' ELSE 'старше 60' END as AgeGroup FROM Customers c), CustomerProducts AS (SELECT ag.AgeGroup, ag.CustomerID, COUNT(DISTINCT CASE WHEN l.Status = 'Активно' THEN l.LoanID END) + COUNT(DISTINCT CASE WHEN d.Status = 'Активен' THEN d.DepositID END) + COUNT(DISTINCT CASE WHEN cc.Status = 'Активна' THEN cc.CardID END) + COUNT(DISTINCT CASE WHEN ip.Status = 'Активен' THEN ip.PolicyID END) as ActiveProducts, SUM(CASE WHEN l.Status = 'Активно' THEN l.PrincipalAmount ELSE 0 END) as TotalLoans, SUM(CASE WHEN d.Status = 'Активен' THEN d.Amount ELSE 0 END) as TotalDeposits, COUNT(DISTINCT CASE WHEN ip.Status = 'Активен' THEN ip.PolicyID END) as InsurancePolicies FROM AgeGroups ag LEFT JOIN Loans l ON ag.CustomerID = l.CustomerID LEFT JOIN Deposits d ON ag.CustomerID = d.CustomerID LEFT JOIN CreditCards cc ON ag.CustomerID = cc.CustomerID LEFT JOIN InsurancePolicies ip ON ag.CustomerID = ip.CustomerID GROUP BY ag.AgeGroup, ag.CustomerID) SELECT AgeGroup, AVG(ActiveProducts) as AvgActiveProducts, AVG(TotalLoans) as AvgLoans, AVG(TotalDeposits) as AvgDeposits, (COUNT(CASE WHEN InsurancePolicies > 0 THEN 1 END) * 100.0 / COUNT(*)) as InsurancePercent FROM CustomerProducts GROUP BY AgeGroup ORDER BY AvgDeposits DESC LIMIT 4;",
            "google/gemini-2.0-flash-001_response": "WITH CustomerAge AS (\n    SELECT\n        CustomerID,\n        FirstName,\n        LastName,\n        DateOfBirth,\n        CASE\n            WHEN CAST(strftime('%J', 'now') AS INTEGER) - CAST(strftime('%J', DateOfBirth) AS INTEGER) < 30 THEN 'до 30'\n            WHEN CAST(strftime('%J', 'now') AS INTEGER) - CAST(strftime('%J', DateOfBirth) AS INTEGER) BETWEEN 30 AND 45 THEN '30-45'\n            WHEN CAST(strftime('%J', 'now') AS INTEGER) - CAST(strftime('%J', DateOfBirth) AS INTEGER) BETWEEN 45 AND 60 THEN '45-60'\n            ELSE 'старше 60'\n        END AS AgeGroup\n    FROM Customers\n),\nActiveProducts AS (\n    SELECT\n        CustomerID,\n        COUNT(DISTINCT AccountID) AS ActiveAccounts\n    FROM Accounts\n    WHERE Status = 'Active'\n    GROUP BY CustomerID\n),\nLoanAmounts AS (\n    SELECT\n        CustomerID,\n        SUM(PrincipalAmount) AS TotalLoanAmount\n    FROM Loans\n    WHERE Status = 'Активно'\n    GROUP BY CustomerID\n),\nDepositAmounts AS (\n    SELECT\n        CustomerID,\n        SUM(Amount) AS TotalDepositAmount\n    FROM Deposits\n    WHERE Status = 'Активен'\n    GROUP BY CustomerID\n),\nInsurancePoliciesFlag AS (\n    SELECT\n        CustomerID,\n        CASE\n            WHEN COUNT(PolicyID) > 0 THEN 1\n            ELSE 0\n        END AS HasInsurancePolicy\n    FROM InsurancePolicies\n    WHERE Status = 'Активен'\n    GROUP BY CustomerID\n)\nSELECT\n    ca.AgeGroup,\n    AVG(COALESCE(ap.ActiveAccounts, 0)) AS AvgActiveProducts,\n    AVG(COALESCE(la.TotalLoanAmount, 0)) AS AvgLoanAmount,\n    AVG(COALESCE(da.TotalDepositAmount, 0)) AS AvgDepositAmount,\n    CAST(SUM(ipf.HasInsurancePolicy) AS REAL) * 100 / COUNT(ca.CustomerID) AS PercentageWithInsurance\nFROM CustomerAge ca\nLEFT JOIN ActiveProducts ap ON ca.CustomerID = ap.CustomerID\nLEFT JOIN LoanAmounts la ON ca.CustomerID = la.CustomerID\nLEFT JOIN DepositAmounts da ON ca.CustomerID = da.CustomerID\nLEFT JOIN InsurancePoliciesFlag ipf ON ca.CustomerID = ipf.CustomerID\nGROUP BY ca.AgeGroup\nORDER BY AvgDepositAmount DESC\nLIMIT 4;",
            "google/gemini-2.0-flash-001_response_ru": "WITH CustomerAge AS (\n    SELECT\n        CustomerID,\n        FirstName,\n        LastName,\n        CASE\n            WHEN CAST(strftime('%J', 'now') - strftime('%J', DateOfBirth) AS INTEGER) / 365.25 < 30 THEN 'До 30'\n            WHEN CAST(strftime('%J', 'now') - strftime('%J', DateOfBirth) AS INTEGER) / 365.25 BETWEEN 30 AND 45 THEN '30-45'\n            WHEN CAST(strftime('%J', 'now') - strftime('%J', DateOfBirth) AS INTEGER) / 365.25 BETWEEN 45 AND 60 THEN '45-60'\n            ELSE 'Старше 60'\n        END AS AgeGroup\n    FROM Customers\n),\nActiveProducts AS (\n    SELECT\n        CustomerID,\n        COUNT(DISTINCT AccountID) AS ActiveAccounts,\n        COUNT(DISTINCT CardID) AS ActiveCards\n    FROM (\n        SELECT CustomerID, AccountID, NULL AS CardID FROM Accounts WHERE Status = 'Active'\n        UNION ALL\n        SELECT CustomerID, NULL AS AccountID, CardID FROM CreditCards WHERE Status = 'Активна'\n    ) AS ActiveItems\n    GROUP BY CustomerID\n),\nCustomerLoans AS (\n    SELECT\n        CustomerID,\n        SUM(PrincipalAmount) AS TotalLoanAmount\n    FROM Loans\n    WHERE Status = 'Активно'\n    GROUP BY CustomerID\n),\nCustomerDeposits AS (\n    SELECT\n        CustomerID,\n        SUM(Amount) AS TotalDepositAmount\n    FROM Deposits\n    WHERE Status = 'Активен'\n    GROUP BY CustomerID\n),\nInsuranceCustomers AS (\n    SELECT DISTINCT CustomerID\n    FROM InsurancePolicies\n    WHERE Status = 'Активен'\n)\nSELECT\n    ca.AgeGroup,\n    AVG(COALESCE(ap.ActiveAccounts, 0) + COALESCE(ap.ActiveCards, 0)) AS AvgActiveProducts,\n    COALESCE(AVG(cl.TotalLoanAmount), 0) AS AvgLoanAmount,\n    COALESCE(AVG(cd.TotalDepositAmount), 0) AS AvgDepositAmount,\n    CAST(SUM(CASE WHEN ic.CustomerID IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(ca.CustomerID) AS PercentageWithInsurance\nFROM CustomerAge ca\nLEFT JOIN ActiveProducts ap ON ca.CustomerID = ap.CustomerID\nLEFT JOIN CustomerLoans cl ON ca.CustomerID = cl.CustomerID\nLEFT JOIN CustomerDeposits cd ON ca.CustomerID = cd.CustomerID\nLEFT JOIN InsuranceCustomers ic ON ca.CustomerID = ic.CustomerID\nGROUP BY ca.AgeGroup\nORDER BY AvgDepositAmount DESC\nLIMIT 4;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH AgeGroups AS (\n    SELECT \n        c.CustomerID,\n        c.FirstName,\n        c.LastName,\n        c.DateOfBirth,\n        CASE \n            WHEN TIMESTAMPDIFF(YEAR, c.DateOfBirth, CURRENT_DATE) < 30 THEN 'До 30'\n            WHEN TIMESTAMPDIFF(YEAR, c.DateOfBirth, CURRENT_DATE) BETWEEN 30 AND 45 THEN '30-45'\n            WHEN TIMESTAMPDIFF(YEAR, c.DateOfBirth, CURRENT_DATE) BETWEEN 45 AND 60 THEN '45-60'\n            ELSE 'Старше 60'\n        END AS AgeGroup\n    FROM Customers c\n),\nCustomerProducts AS (\n    SELECT \n        c.CustomerID,\n        COUNT(DISTINCT a.AccountID) AS ActiveAccounts,\n        COUNT(DISTINCT l.LoanID) AS ActiveLoans,\n        COUNT(DISTINCT d.DepositID) AS ActiveDeposits,\n        COUNT(DISTINCT cc.CardID) AS ActiveCreditCards,\n        COUNT(DISTINCT ip.PolicyID) AS ActiveInsurancePolicies\n    FROM Customers c\n    LEFT JOIN Accounts a ON c.CustomerID = a.CustomerID AND a.Status = 'Active'\n    LEFT JOIN Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\n    LEFT JOIN Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\n    LEFT JOIN CreditCards cc ON c.CustomerID = cc.CustomerID AND cc.Status = 'Активна'\n    LEFT JOIN InsurancePolicies ip ON c.CustomerID = ip.CustomerID AND ip.Status = 'Активен'\n    GROUP BY c.CustomerID\n),\nCustomerFinancials AS (\n    SELECT \n        c.CustomerID,\n        SUM(l.PrincipalAmount) AS TotalLoans,\n        SUM(d.Amount) AS TotalDeposits\n    FROM Customers c\n    LEFT JOIN Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\n    LEFT JOIN Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\n    GROUP BY c.CustomerID\n)\nSELECT \n    ag.AgeGroup,\n    AVG(cp.ActiveAccounts) AS AverageActiveProducts,\n    AVG(cf.TotalLoans) AS AverageLoans,\n    AVG(cf.TotalDeposits) AS AverageDeposits,\n    AVG(CASE WHEN cp.ActiveInsurancePolicies > 0 THEN 1.0 ELSE 0 END) * 100 AS PercentageWithInsurance\nFROM AgeGroups ag\nJOIN CustomerProducts cp ON ag.CustomerID = cp.CustomerID\nJOIN CustomerFinancials cf ON ag.CustomerID = cf.CustomerID\nGROUP BY ag.AgeGroup\nORDER BY AverageDeposits DESC\nLIMIT 4;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH AgeGroups AS (\n  SELECT \n    c.CustomerID,\n    c.FirstName,\n    c.LastName,\n    CASE \n      WHEN TIMESTAMPDIFF(YEAR, c.DateOfBirth, CURDATE()) < 30 THEN 'до 30'\n      WHEN TIMESTAMPDIFF(YEAR, c.DateOfBirth, CURDATE()) BETWEEN 30 AND 45 THEN '30-45'\n      WHEN TIMESTAMPDIFF(YEAR, c.DateOfBirth, CURDATE()) BETWEEN 45 AND 60 THEN '45-60'\n      ELSE 'старше 60'\n    END AS AgeGroup\n  FROM Customers c\n),\nActiveProducts AS (\n  SELECT \n    c.CustomerID,\n    COUNT(DISTINCT a.AccountID) + COUNT(DISTINCT l.LoanID) + COUNT(DISTINCT cc.CardID) + COUNT(DISTINCT d.DepositID) AS TotalActiveProducts\n  FROM Customers c\n  LEFT JOIN Accounts a ON c.CustomerID = a.CustomerID AND a.Status = 'Active'\n  LEFT JOIN Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\n  LEFT JOIN CreditCards cc ON c.CustomerID = cc.CustomerID AND cc.Status = 'Активна'\n  LEFT JOIN Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\n  GROUP BY c.CustomerID\n),\nLoanAmounts AS (\n  SELECT \n    c.CustomerID,\n    SUM(l.PrincipalAmount) AS TotalLoanAmount\n  FROM Customers c\n  LEFT JOIN Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\n  GROUP BY c.CustomerID\n),\nDepositAmounts AS (\n  SELECT \n    c.CustomerID,\n    SUM(d.Amount) AS TotalDepositAmount\n  FROM Customers c\n  LEFT JOIN Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\n  GROUP BY c.CustomerID\n),\nInsurancePoliciesCount AS (\n  SELECT \n    c.CustomerID,\n    COUNT(ip.PolicyID) AS InsurancePoliciesCount\n  FROM Customers c\n  LEFT JOIN InsurancePolicies ip ON c.CustomerID = ip.CustomerID AND ip.Status = 'Активен'\n  GROUP BY c.CustomerID\n)\nSELECT \n  ag.AgeGroup,\n  AVG(ap.TotalActiveProducts) AS AvgActiveProducts,\n  AVG(la.TotalLoanAmount) AS AvgLoanAmount,\n  AVG(da.TotalDepositAmount) AS AvgDepositAmount,\n  AVG(ipc.InsurancePoliciesCount) / COUNT(ag.CustomerID) * 100 AS PercentWithInsurance\nFROM AgeGroups ag\nJOIN ActiveProducts ap ON ag.CustomerID = ap.CustomerID\nJOIN LoanAmounts la ON ag.CustomerID = la.CustomerID\nJOIN DepositAmounts da ON ag.CustomerID = da.CustomerID\nJOIN InsurancePoliciesCount ipc ON ag.CustomerID = ipc.CustomerID\nGROUP BY ag.AgeGroup\nORDER BY AvgDepositAmount DESC\nLIMIT 4;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH AgeGroups AS (\n    SELECT \n        CustomerID,\n        FirstName,\n        LastName,\n        CASE \n            WHEN TIMESTAMPDIFF(YEAR, DateOfBirth, CURRENT_DATE) < 30 THEN 'до 30'\n            WHEN TIMESTAMPDIFF(YEAR, DateOfBirth, CURRENT_DATE) BETWEEN 30 AND 45 THEN '30-45'\n            WHEN TIMESTAMPDIFF(YEAR, DateOfBirth, CURRENT_DATE) BETWEEN 45 AND 60 THEN '45-60'\n            ELSE 'старше 60'\n        END AS AgeGroup\n    FROM Customers\n),\nActiveProducts AS (\n    SELECT \n        c.CustomerID,\n        COUNT(DISTINCT CASE WHEN a.Status = 'Active' THEN a.AccountID END) +\n        COUNT(DISTINCT CASE WHEN l.Status = 'Активно' THEN l.LoanID END) +\n        COUNT(DISTINCT CASE WHEN cc.Status = 'Активна' THEN cc.CardID END) +\n        COUNT(DISTINCT CASE WHEN d.Status = 'Активен' THEN d.DepositID END) +\n        COUNT(DISTINCT CASE WHEN cs.Status = 'активен' THEN cs.CustomerServiceID END) AS TotalActiveProducts\n    FROM Customers c\n    LEFT JOIN Accounts a ON c.CustomerID = a.CustomerID\n    LEFT JOIN Loans l ON c.CustomerID = l.CustomerID\n    LEFT JOIN CreditCards cc ON c.CustomerID = cc.CustomerID\n    LEFT JOIN Deposits d ON c.CustomerID = d.CustomerID\n    LEFT JOIN CustomerServices cs ON c.CustomerID = cs.CustomerID\n    GROUP BY c.CustomerID\n),\nLoanAmounts AS (\n    SELECT \n        c.CustomerID,\n        COALESCE(SUM(l.PrincipalAmount), 0) AS TotalLoanAmount\n    FROM Customers c\n    LEFT JOIN Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\n    GROUP BY c.CustomerID\n),\nDepositAmounts AS (\n    SELECT \n        c.CustomerID,\n        COALESCE(SUM(d.Amount), 0) AS TotalDepositAmount\n    FROM Customers c\n    LEFT JOIN Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\n    GROUP BY c.CustomerID\n),\nInsuranceCustomers AS (\n    SELECT \n        c.CustomerID,\n        CASE WHEN COUNT(ip.PolicyID) > 0 THEN 1 ELSE 0 END AS HasInsurance\n    FROM Customers c\n    LEFT JOIN InsurancePolicies ip ON c.CustomerID = ip.CustomerID AND ip.Status = 'Активен'\n    GROUP BY c.CustomerID\n)\nSELECT \n    ag.AgeGroup,\n    ROUND(AVG(ap.TotalActiveProducts), 2) AS AvgActiveProducts,\n    ROUND(AVG(la.TotalLoanAmount), 2) AS AvgLoanAmount,\n    ROUND(AVG(da.TotalDepositAmount), 2) AS AvgDepositAmount,\n    ROUND(100.0 * SUM(ic.HasInsurance) / COUNT(ic.CustomerID), 2) AS InsurancePercentage\nFROM AgeGroups ag\nJOIN ActiveProducts ap ON ag.CustomerID = ap.CustomerID\nJOIN LoanAmounts la ON ag.CustomerID = la.CustomerID\nJOIN DepositAmounts da ON ag.CustomerID = da.CustomerID\nJOIN InsuranceCustomers ic ON ag.CustomerID = ic.CustomerID\nGROUP BY ag.AgeGroup\nORDER BY AvgDepositAmount DESC\nLIMIT 4;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "WITH AgeGroups AS (\n    SELECT \n        CustomerID,\n        FirstName,\n        LastName,\n        CASE \n            WHEN TIMESTAMPDIFF(YEAR, DateOfBirth, CURRENT_DATE) < 30 THEN 'до 30'\n            WHEN TIMESTAMPDIFF(YEAR, DateOfBirth, CURRENT_DATE) BETWEEN 30 AND 45 THEN '30-45'\n            WHEN TIMESTAMPDIFF(YEAR, DateOfBirth, CURRENT_DATE) BETWEEN 45 AND 60 THEN '45-60'\n            ELSE 'старше 60'\n        END AS AgeGroup\n    FROM Customers\n),\nActiveProducts AS (\n    SELECT \n        c.CustomerID,\n        COUNT(DISTINCT a.AccountID) + \n        COUNT(DISTINCT l.LoanID) + \n        COUNT(DISTINCT cc.CardID) + \n        COUNT(DISTINCT d.DepositID) + \n        COUNT(DISTINCT cs.CustomerServiceID) AS TotalActiveProducts\n    FROM Customers c\n    LEFT JOIN Accounts a ON c.CustomerID = a.CustomerID AND a.Status = 'Active'\n    LEFT JOIN Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\n    LEFT JOIN CreditCards cc ON c.CustomerID = cc.CustomerID AND cc.Status = 'Активна'\n    LEFT JOIN Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\n    LEFT JOIN CustomerServices cs ON c.CustomerID = cs.CustomerID AND cs.Status = 'активен'\n    GROUP BY c.CustomerID\n),\nLoanTotals AS (\n    SELECT \n        c.CustomerID,\n        SUM(l.PrincipalAmount) AS TotalLoans\n    FROM Customers c\n    LEFT JOIN Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\n    GROUP BY c.CustomerID\n),\nDepositTotals AS (\n    SELECT \n        c.CustomerID,\n        SUM(d.Amount) AS TotalDeposits\n    FROM Customers c\n    LEFT JOIN Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\n    GROUP BY c.CustomerID\n),\nInsuranceCustomers AS (\n    SELECT \n        c.CustomerID,\n        CASE WHEN COUNT(ip.PolicyID) > 0 THEN 1 ELSE 0 END AS HasInsurance\n    FROM Customers c\n    LEFT JOIN InsurancePolicies ip ON c.CustomerID = ip.CustomerID AND ip.Status = 'Активен'\n    GROUP BY c.CustomerID\n)\nSELECT \n    ag.AgeGroup,\n    AVG(ap.TotalActiveProducts) AS AvgActiveProducts,\n    AVG(lt.TotalLoans) AS AvgLoanAmount,\n    AVG(dt.TotalDeposits) AS AvgDepositAmount,\n    ROUND(100.0 * SUM(ic.HasInsurance) / COUNT(*), 2) AS InsurancePercentage\nFROM AgeGroups ag\nLEFT JOIN ActiveProducts ap ON ag.CustomerID = ap.CustomerID\nLEFT JOIN LoanTotals lt ON ag.CustomerID = lt.CustomerID\nLEFT JOIN DepositTotals dt ON ag.CustomerID = dt.CustomerID\nLEFT JOIN InsuranceCustomers ic ON ag.CustomerID = ic.CustomerID\nGROUP BY ag.AgeGroup\nORDER BY AvgDepositAmount DESC\nLIMIT 4;",
            "gigachat_response": "WITH AgeGroups AS (\n    SELECT \n        CASE \n            WHEN YEAR(CURRENT_DATE) - YEAR(DateOfBirth) <= 30 THEN 'До 30'\n            WHEN YEAR(CURRENT_DATE) - YEAR(DateOfBirth) BETWEEN 31 AND 45 THEN '30-45'\n            WHEN YEAR(CURRENT_DATE) - YEAR(DateOfBirth) BETWEEN 46 AND 60 THEN '45-60'\n            ELSE 'Старше 60'\n        END AS AgeGroup,\n        CustomerID\n    FROM Customers\n), \nActiveProducts AS (\n    SELECT \n        CustomerID, \n        COUNT(DISTINCT AccountID) + COUNT(DISTINCT CardID) + COUNT(DISTINCT LoanID) + COUNT(DISTINCT DepositID) AS NumActiveProducts\n    FROM Customers c\n    LEFT JOIN Accounts a ON c.CustomerID = a.CustomerID AND a.Status = 'Active'\n    LEFT JOIN CreditCards cc ON c.CustomerID = cc.CustomerID AND cc.Status = 'Активна'\n    LEFT JOIN Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\n    LEFT JOIN Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\n    GROUP BY CustomerID\n), \nAvgCredits AS (\n    SELECT \n        CustomerID, \n        COALESCE(AVG(PrincipalAmount), 0) AS AvgLoanAmount\n    FROM Customers c\n    LEFT JOIN Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\n    GROUP BY CustomerID\n), \nAvgDeposits AS (\n    SELECT \n        CustomerID, \n        COALESCE(AVG(Amount), 0) AS AvgDepositAmount\n    FROM Customers c\n    LEFT JOIN Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\n    GROUP BY CustomerID\n), \nInsuranceCoverage AS (\n    SELECT \n        CustomerID, \n        COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Customers) AS InsuredPercentage\n    FROM InsurancePolicies ip\n    INNER JOIN Customers c ON ip.CustomerID = c.CustomerID AND ip.Status = 'Активен'\n    GROUP BY CustomerID\n)\nSELECT \n    ag.AgeGroup,\n    ROUND(AVG(ap.NumActiveProducts), 2) AS AvgNumActiveProducts,\n    ROUND(AVG(ac.AvgLoanAmount), 2) AS AvgLoanAmount,\n    ROUND(AVG(ad.AvgDepositAmount), 2) AS AvgDepositAmount,\n    ROUND(MAX(ic.InsuredPercentage), 2) AS InsuredPercentage\nFROM AgeGroups ag\nLEFT JOIN ActiveProducts ap ON ag.CustomerID = ap.CustomerID\nLEFT JOIN AvgCredits ac ON ag.CustomerID = ac.CustomerID\nLEFT JOIN AvgDeposits ad ON ag.CustomerID = ad.CustomerID\nLEFT JOIN InsuranceCoverage ic ON ag.CustomerID = ic.CustomerID\nGROUP BY ag.AgeGroup\nORDER BY AvgDepositAmount DESC\nLIMIT 4;",
            "gigachat_response_ru": "WITH AgeGroups AS (\n    SELECT \n        CASE \n            WHEN YEAR(CURRENT_DATE) - YEAR(DateOfBirth) <= 30 THEN 'До 30'\n            WHEN YEAR(CURRENT_DATE) - YEAR(DateOfBirth) BETWEEN 31 AND 45 THEN '30-45'\n            WHEN YEAR(CURRENT_DATE) - YEAR(DateOfBirth) BETWEEN 46 AND 60 THEN '45-60'\n            ELSE 'Старше 60'\n        END AS AgeGroup,\n        CustomerID\n    FROM Customers\n), \nActiveProducts AS (\n    SELECT \n        CustomerID, \n        COUNT(DISTINCT AccountID) + COUNT(DISTINCT LoanID) + COUNT(DISTINCT CardID) + COUNT(DISTINCT DepositID) + COUNT(DISTINCT PolicyID) AS NumActiveProducts\n    FROM Customers c\n    LEFT JOIN Accounts a ON c.CustomerID = a.CustomerID AND a.Status = 'Active'\n    LEFT JOIN Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\n    LEFT JOIN CreditCards cc ON c.CustomerID = cc.CustomerID AND cc.Status = 'Активна'\n    LEFT JOIN Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\n    LEFT JOIN InsurancePolicies ip ON c.CustomerID = ip.CustomerID AND ip.Status = 'Активен'\n    GROUP BY CustomerID\n), \nAvgCredits AS (\n    SELECT \n        CustomerID, \n        COALESCE(AVG(PrincipalAmount), 0) AS AvgLoanAmount\n    FROM Customers c\n    LEFT JOIN Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\n    GROUP BY CustomerID\n), \nAvgDeposits AS (\n    SELECT \n        CustomerID, \n        COALESCE(AVG(Amount), 0) AS AvgDepositAmount\n    FROM Customers c\n    LEFT JOIN Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\n    GROUP BY CustomerID\n), \nInsuranceCoverage AS (\n    SELECT \n        CustomerID, \n        COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Customers) AS PercentWithInsurance\n    FROM Customers c\n    INNER JOIN InsurancePolicies ip ON c.CustomerID = ip.CustomerID AND ip.Status = 'Активен'\n    GROUP BY CustomerID\n)\nSELECT \n    ag.AgeGroup,\n    ROUND(AVG(ap.NumActiveProducts), 2) AS AvgNumActiveProducts,\n    ROUND(AVG(ac.AvgLoanAmount), 2) AS AvgLoanAmount,\n    ROUND(AVG(ad.AvgDepositAmount), 2) AS AvgDepositAmount,\n    ROUND(AVG(ic.PercentWithInsurance), 2) AS PercentWithInsurance\nFROM AgeGroups ag\nLEFT JOIN ActiveProducts ap ON ag.CustomerID = ap.CustomerID\nLEFT JOIN AvgCredits ac ON ag.CustomerID = ac.CustomerID\nLEFT JOIN AvgDeposits ad ON ag.CustomerID = ad.CustomerID\nLEFT JOIN InsuranceCoverage ic ON ag.CustomerID = ic.CustomerID\nGROUP BY ag.AgeGroup\nORDER BY AvgDepositAmount DESC\nLIMIT 4;",
            "gpt-4o_response": "WITH AgeGroups AS (\n    SELECT \n        CustomerID,\n        CASE \n            WHEN TIMESTAMPDIFF(YEAR, DateOfBirth, CURDATE()) < 30 THEN 'до 30'\n            WHEN TIMESTAMPDIFF(YEAR, DateOfBirth, CURDATE()) BETWEEN 30 AND 45 THEN '30-45'\n            WHEN TIMESTAMPDIFF(YEAR, DateOfBirth, CURDATE()) BETWEEN 46 AND 60 THEN '45-60'\n            ELSE 'старше 60'\n        END AS AgeGroup\n    FROM Customers\n),\nCustomerProducts AS (\n    SELECT \n        c.CustomerID,\n        COUNT(DISTINCT a.AccountID) + COUNT(DISTINCT l.LoanID) + COUNT(DISTINCT cc.CardID) + COUNT(DISTINCT d.DepositID) AS ActiveProducts\n    FROM Customers c\n    LEFT JOIN Accounts a ON c.CustomerID = a.CustomerID AND a.Status = 'Active'\n    LEFT JOIN Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\n    LEFT JOIN CreditCards cc ON c.CustomerID = cc.CustomerID AND cc.Status = 'Активна'\n    LEFT JOIN Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\n    GROUP BY c.CustomerID\n),\nCustomerLoans AS (\n    SELECT \n        c.CustomerID,\n        COALESCE(SUM(l.PrincipalAmount), 0) AS TotalLoanAmount\n    FROM Customers c\n    LEFT JOIN Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\n    GROUP BY c.CustomerID\n),\nCustomerDeposits AS (\n    SELECT \n        c.CustomerID,\n        COALESCE(SUM(d.Amount), 0) AS TotalDepositAmount\n    FROM Customers c\n    LEFT JOIN Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\n    GROUP BY c.CustomerID\n),\nCustomerInsurance AS (\n    SELECT \n        c.CustomerID,\n        COUNT(ip.PolicyID) > 0 AS HasInsurance\n    FROM Customers c\n    LEFT JOIN InsurancePolicies ip ON c.CustomerID = ip.CustomerID AND ip.Status = 'Активен'\n    GROUP BY c.CustomerID\n)\nSELECT \n    ag.AgeGroup,\n    AVG(cp.ActiveProducts) AS AvgActiveProducts,\n    AVG(cl.TotalLoanAmount) AS AvgLoanAmount,\n    AVG(cd.TotalDepositAmount) AS AvgDepositAmount,\n    100.0 * SUM(ci.HasInsurance) / COUNT(ci.CustomerID) AS InsurancePercentage\nFROM AgeGroups ag\nJOIN CustomerProducts cp ON ag.CustomerID = cp.CustomerID\nJOIN CustomerLoans cl ON ag.CustomerID = cl.CustomerID\nJOIN CustomerDeposits cd ON ag.CustomerID = cd.CustomerID\nJOIN CustomerInsurance ci ON ag.CustomerID = ci.CustomerID\nGROUP BY ag.AgeGroup\nORDER BY AvgDepositAmount DESC\nLIMIT 4;",
            "gpt-4o_response_ru": "WITH AgeGroups AS (\n    SELECT \n        CustomerID,\n        CASE \n            WHEN TIMESTAMPDIFF(YEAR, DateOfBirth, CURDATE()) < 30 THEN 'до 30'\n            WHEN TIMESTAMPDIFF(YEAR, DateOfBirth, CURDATE()) BETWEEN 30 AND 45 THEN '30-45'\n            WHEN TIMESTAMPDIFF(YEAR, DateOfBirth, CURDATE()) BETWEEN 45 AND 60 THEN '45-60'\n            ELSE 'старше 60'\n        END AS AgeGroup\n    FROM Customers\n),\nActiveProducts AS (\n    SELECT \n        c.CustomerID,\n        COUNT(DISTINCT a.AccountID) + COUNT(DISTINCT l.LoanID) + COUNT(DISTINCT d.DepositID) + COUNT(DISTINCT cc.CardID) AS ActiveProducts\n    FROM Customers c\n    LEFT JOIN Accounts a ON c.CustomerID = a.CustomerID AND a.Status = 'Active'\n    LEFT JOIN Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\n    LEFT JOIN Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\n    LEFT JOIN CreditCards cc ON c.CustomerID = cc.CustomerID AND cc.Status = 'Активна'\n    GROUP BY c.CustomerID\n),\nAverageLoans AS (\n    SELECT \n        CustomerID,\n        AVG(PrincipalAmount) AS AvgLoanAmount\n    FROM Loans\n    WHERE Status = 'Активно'\n    GROUP BY CustomerID\n),\nAverageDeposits AS (\n    SELECT \n        CustomerID,\n        AVG(Amount) AS AvgDepositAmount\n    FROM Deposits\n    WHERE Status = 'Активен'\n    GROUP BY CustomerID\n),\nInsuranceCoverage AS (\n    SELECT \n        CustomerID,\n        COUNT(PolicyID) > 0 AS HasInsurance\n    FROM InsurancePolicies\n    WHERE Status = 'Активен'\n    GROUP BY CustomerID\n)\nSELECT \n    ag.AgeGroup,\n    AVG(ap.ActiveProducts) AS AvgActiveProducts,\n    AVG(al.AvgLoanAmount) AS AvgLoanAmount,\n    AVG(ad.AvgDepositAmount) AS AvgDepositAmount,\n    100.0 * SUM(ic.HasInsurance) / COUNT(ag.CustomerID) AS InsurancePercentage\nFROM AgeGroups ag\nLEFT JOIN ActiveProducts ap ON ag.CustomerID = ap.CustomerID\nLEFT JOIN AverageLoans al ON ag.CustomerID = al.CustomerID\nLEFT JOIN AverageDeposits ad ON ag.CustomerID = ad.CustomerID\nLEFT JOIN InsuranceCoverage ic ON ag.CustomerID = ic.CustomerID\nGROUP BY ag.AgeGroup\nORDER BY AvgDepositAmount DESC\nLIMIT 4;"
        },
        {
            "question": "Найти отделения с наибольшим дисбалансом между входящими и исходящими транзакциями клиентов: для каждого отделения подсчитать сумму пополнений, сумму  списания, разность между ними и процент исходящих транзакций. Показать название отделения, сумму входящих, сумму исходящих, чистый поток и процент исходящих. Результат отсортировать по проценту исходящих транзакций по убыванию и ограничить 8 записями.",
            "sql_query": "WITH BranchTransactionFlow AS (SELECT b.BranchID, b.BranchName, SUM(CASE WHEN t.Amount > 0 THEN t.Amount ELSE 0 END) as IncomingTransactions, SUM(CASE WHEN t.Amount < 0 THEN ABS(t.Amount) ELSE 0 END) as OutgoingTransactions, COUNT(CASE WHEN t.Amount > 0 THEN 1 END) as IncomingCount, COUNT(CASE WHEN t.Amount < 0 THEN 1 END) as OutgoingCount FROM Branches b JOIN Customers c ON b.BranchID = c.BranchID JOIN Accounts a ON c.CustomerID = a.CustomerID JOIN Transactions t ON a.AccountID = t.AccountID WHERE t.Status = 'Завершено' GROUP BY b.BranchID, b.BranchName HAVING IncomingTransactions > 0 OR OutgoingTransactions > 0) SELECT BranchName, IncomingTransactions, OutgoingTransactions, (IncomingTransactions - OutgoingTransactions) as NetFlow, (OutgoingTransactions * 100.0 / (IncomingTransactions + OutgoingTransactions)) as OutgoingPercent FROM BranchTransactionFlow ORDER BY OutgoingPercent DESC LIMIT 8;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    b.BranchName,\n    SUM(CASE WHEN t.TransactionType = 'Пополнение' THEN t.Amount ELSE 0 END) AS TotalDeposits,\n    SUM(CASE WHEN t.TransactionType IN ('Оплата', 'Перевод', 'Покупка', 'Снятие') THEN t.Amount ELSE 0 END) AS TotalWithdrawals,\n    SUM(CASE WHEN t.TransactionType = 'Пополнение' THEN t.Amount ELSE 0 END) + SUM(CASE WHEN t.TransactionType IN ('Оплата', 'Перевод', 'Покупка', 'Снятие') THEN t.Amount ELSE 0 END) AS NetFlow,\n    (SUM(CASE WHEN t.TransactionType IN ('Оплата', 'Перевод', 'Покупка', 'Снятие') THEN t.Amount ELSE 0 END) / (SUM(CASE WHEN t.TransactionType = 'Пополнение' THEN t.Amount ELSE 0 END) + SUM(CASE WHEN t.TransactionType IN ('Оплата', 'Перевод', 'Покупка', 'Снятие') THEN t.Amount ELSE 0 END))) * 100 AS WithdrawalPercentage\nFROM\n    Branches b\nJOIN\n    Customers c ON b.BranchID = c.BranchID\nJOIN\n    Accounts a ON c.CustomerID = a.CustomerID\nJOIN\n    Transactions t ON a.AccountID = t.AccountID\nGROUP BY\n    b.BranchName\nORDER BY\n    WithdrawalPercentage DESC\nLIMIT 8;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    b.BranchName,\n    SUM(CASE WHEN t.TransactionType = 'Пополнение' THEN t.Amount ELSE 0 END) AS TotalDeposits,\n    SUM(CASE WHEN t.TransactionType IN ('Оплата', 'Перевод', 'Покупка', 'Снятие') THEN t.Amount ELSE 0 END) AS TotalWithdrawals,\n    SUM(CASE WHEN t.TransactionType = 'Пополнение' THEN t.Amount ELSE 0 END) - SUM(CASE WHEN t.TransactionType IN ('Оплата', 'Перевод', 'Покупка', 'Снятие') THEN t.Amount ELSE 0 END) AS NetFlow,\n    (SUM(CASE WHEN t.TransactionType IN ('Оплата', 'Перевод', 'Покупка', 'Снятие') THEN t.Amount ELSE 0 END) / SUM(t.Amount)) * 100 AS WithdrawalPercentage\nFROM\n    Branches b\nJOIN\n    Customers c ON b.BranchID = c.BranchID\nJOIN\n    Accounts a ON c.CustomerID = a.CustomerID\nJOIN\n    Transactions t ON a.AccountID = t.AccountID\nGROUP BY\n    b.BranchName\nORDER BY\n    WithdrawalPercentage DESC\nLIMIT 8;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH BranchTransactions AS (\n  SELECT \n    b.BranchName, \n    SUM(CASE WHEN t.TransactionType = 'Пополнение' THEN t.Amount ELSE 0 END) AS TotalIncoming,\n    SUM(CASE WHEN t.TransactionType = 'Оплата' OR t.TransactionType = 'Покупка' THEN t.Amount ELSE 0 END) AS TotalOutgoing,\n    SUM(CASE WHEN t.TransactionType = 'Оплата' OR t.TransactionType = 'Покупка' THEN t.Amount ELSE 0 END) - SUM(CASE WHEN t.TransactionType = 'Пополнение' THEN t.Amount ELSE 0 END) AS NetFlow,\n    (SUM(CASE WHEN t.TransactionType = 'Оплата' OR t.TransactionType = 'Покупка' THEN t.Amount ELSE 0 END) / (SUM(CASE WHEN t.TransactionType = 'Пополнение' THEN t.Amount ELSE 0 END) + SUM(CASE WHEN t.TransactionType = 'Оплата' OR t.TransactionType = 'Покупка' THEN t.Amount ELSE 0 END))) * 100 AS OutgoingPercentage\n  FROM \n    Branches b\n  JOIN \n    Customers c ON b.BranchID = c.BranchID\n  JOIN \n    Accounts a ON c.CustomerID = a.CustomerID\n  JOIN \n    Transactions t ON a.AccountID = t.AccountID\n  GROUP BY \n    b.BranchName\n)\nSELECT \n  BranchName, \n  TotalIncoming, \n  TotalOutgoing, \n  NetFlow, \n  OutgoingPercentage\nFROM \n  BranchTransactions\nORDER BY \n  OutgoingPercentage DESC\nLIMIT 8;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH BranchTransactions AS (\n  SELECT \n    b.BranchName,\n    SUM(CASE WHEN t.TransactionType = 'Пополнение' THEN t.Amount ELSE 0 END) AS IncomingAmount,\n    SUM(CASE WHEN t.TransactionType = 'Оплата' OR t.TransactionType = 'Перевод' OR t.TransactionType = 'Покупка' THEN t.Amount ELSE 0 END) AS OutgoingAmount,\n    SUM(CASE WHEN t.TransactionType = 'Пополнение' THEN t.Amount ELSE 0 END) - SUM(CASE WHEN t.TransactionType = 'Оплата' OR t.TransactionType = 'Перевод' OR t.TransactionType = 'Покупка' THEN t.Amount ELSE 0 END) AS NetFlow,\n    (SUM(CASE WHEN t.TransactionType = 'Оплата' OR t.TransactionType = 'Перевод' OR t.TransactionType = 'Покупка' THEN t.Amount ELSE 0 END) / \n     (SUM(CASE WHEN t.TransactionType = 'Пополнение' THEN t.Amount ELSE 0 END) + SUM(CASE WHEN t.TransactionType = 'Оплата' OR t.TransactionType = 'Перевод' OR t.TransactionType = 'Покупка' THEN t.Amount ELSE 0 END))) * 100 AS OutgoingPercentage\n  FROM \n    Branches b\n  JOIN \n    Customers c ON b.BranchID = c.BranchID\n  JOIN \n    Accounts a ON c.CustomerID = a.CustomerID\n  JOIN \n    Transactions t ON a.AccountID = t.AccountID\n  GROUP BY \n    b.BranchName\n)\nSELECT \n  BranchName,\n  IncomingAmount,\n  OutgoingAmount,\n  NetFlow,\n  OutgoingPercentage\nFROM \n  BranchTransactions\nORDER BY \n  OutgoingPercentage DESC\nLIMIT 8;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    b.BranchName,\n    SUM(CASE WHEN t.TransactionType = 'Пополнение' THEN t.Amount ELSE 0 END) AS IncomingAmount,\n    SUM(CASE WHEN t.TransactionType IN ('Оплата', 'Покупка', 'Снятие') THEN ABS(t.Amount) ELSE 0 END) AS OutgoingAmount,\n    SUM(CASE WHEN t.TransactionType = 'Пополнение' THEN t.Amount ELSE -ABS(t.Amount) END) AS NetFlow,\n    ROUND(SUM(CASE WHEN t.TransactionType IN ('Оплата', 'Покупка', 'Снятие') THEN ABS(t.Amount) ELSE 0 END) / \n          NULLIF(SUM(CASE WHEN t.TransactionType = 'Пополнение' THEN t.Amount ELSE 0 END) + \n                 SUM(CASE WHEN t.TransactionType IN ('Оплата', 'Покупка', 'Снятие') THEN ABS(t.Amount) ELSE 0 END), 0) * 100, 2) AS OutgoingPercentage\nFROM \n    Branches b\nJOIN \n    Customers c ON b.BranchID = c.BranchID\nJOIN \n    Accounts a ON c.CustomerID = a.CustomerID\nJOIN \n    Transactions t ON a.AccountID = t.AccountID\nWHERE \n    t.Status = 'Завершено'\nGROUP BY \n    b.BranchName\nORDER BY \n    OutgoingPercentage DESC\nLIMIT 8;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    b.BranchName,\n    SUM(CASE WHEN t.TransactionType = 'Пополнение' THEN t.Amount ELSE 0 END) AS IncomingAmount,\n    SUM(CASE WHEN t.TransactionType IN ('Оплата', 'Покупка', 'Снятие', 'Перевод') THEN ABS(t.Amount) ELSE 0 END) AS OutgoingAmount,\n    SUM(CASE WHEN t.TransactionType = 'Пополнение' THEN t.Amount ELSE -ABS(t.Amount) END) AS NetFlow,\n    ROUND(SUM(CASE WHEN t.TransactionType IN ('Оплата', 'Покупка', 'Снятие', 'Перевод') THEN ABS(t.Amount) ELSE 0 END) / \n          (SUM(CASE WHEN t.TransactionType = 'Пополнение' THEN t.Amount ELSE 0 END) + \n           SUM(CASE WHEN t.TransactionType IN ('Оплата', 'Покупка', 'Снятие', 'Перевод') THEN ABS(t.Amount) ELSE 0 END)) * 100, 2) AS OutgoingPercentage\nFROM \n    Branches b\nJOIN \n    Customers c ON b.BranchID = c.BranchID\nJOIN \n    Accounts a ON c.CustomerID = a.CustomerID\nJOIN \n    Transactions t ON a.AccountID = t.AccountID\nWHERE \n    t.Status = 'Завершено'\nGROUP BY \n    b.BranchName\nORDER BY \n    OutgoingPercentage DESC\nLIMIT 8;",
            "gigachat_response": "WITH BranchTransactions AS (\n    SELECT \n        b.BranchID,\n        b.BranchName,\n        COALESCE(SUM(CASE WHEN t.TransactionType = 'Пополнение' THEN t.Amount ELSE 0 END), 0) AS IncomingSum,\n        COALESCE(SUM(CASE WHEN t.TransactionType != 'Пополнение' THEN ABS(t.Amount) ELSE 0 END), 0) AS OutgoingSum\n    FROM \n        Branches b\n    INNER JOIN \n        Customers c ON b.BranchID = c.BranchID\n    INNER JOIN \n        Accounts a ON c.CustomerID = a.CustomerID\n    INNER JOIN \n        Transactions t ON a.AccountID = t.AccountID\n    GROUP BY \n        b.BranchID, b.BranchName\n)\nSELECT \n    bt.BranchName,\n    bt.IncomingSum,\n    bt.OutgoingSum,\n    (bt.IncomingSum - bt.OutgoingSum) AS NetFlow,\n    CASE \n        WHEN bt.IncomingSum <> 0 THEN ROUND((bt.OutgoingSum * 100.0 / bt.IncomingSum), 2)\n        ELSE 0\n    END AS PercentOutgoing\nFROM \n    BranchTransactions bt\nORDER BY \n    PercentOutgoing DESC\nLIMIT 8;",
            "gigachat_response_ru": "SELECT \n    b.BranchName,\n    COALESCE(SUM(CASE WHEN tr.TransactionType = 'Пополнение' THEN tr.Amount ELSE 0 END), 0) AS IncomingSum,\n    COALESCE(-SUM(CASE WHEN tr.TransactionType = 'Оплата' OR tr.TransactionType = 'Покупка' THEN tr.Amount ELSE 0 END), 0) AS OutgoingSum,\n    COALESCE(SUM(CASE WHEN tr.TransactionType = 'Пополнение' THEN tr.Amount ELSE 0 END), 0) +\n        COALESCE(-SUM(CASE WHEN tr.TransactionType = 'Оплата' OR tr.TransactionType = 'Покупка' THEN tr.Amount ELSE 0 END), 0) AS NetFlow,\n    CASE \n        WHEN ABS(COALESCE(SUM(CASE WHEN tr.TransactionType = 'Пополнение' THEN tr.Amount ELSE 0 END), 0)) = 0 THEN NULL\n        ELSE ROUND((ABS(COALESCE(-SUM(CASE WHEN tr.TransactionType = 'Оплата' OR tr.TransactionType = 'Покупка' THEN tr.Amount ELSE 0 END), 0))) * 100 /\n                  (COALESCE(SUM(CASE WHEN tr.TransactionType = 'Пополнение' THEN tr.Amount ELSE 0 END), 0)), 2)\n    END AS PercentOutgoing\nFROM \n    Branches b\nLEFT JOIN \n    Customers cu ON b.BranchID = cu.BranchID\nLEFT JOIN \n    Accounts ac ON cu.CustomerID = ac.CustomerID\nLEFT JOIN \n    Transactions tr ON ac.AccountID = tr.AccountID\nWHERE \n    tr.Status = 'Завершено'\nGROUP BY \n    b.BranchName\nORDER BY \n    PercentOutgoing DESC\nLIMIT 8;",
            "gpt-4o_response": "SELECT \n    b.BranchName,\n    COALESCE(SUM(CASE WHEN t.TransactionType = 'Пополнение' THEN t.Amount ELSE 0 END), 0) AS TotalIncoming,\n    COALESCE(SUM(CASE WHEN t.TransactionType IN ('Оплата', 'Перевод', 'Покупка') THEN t.Amount ELSE 0 END), 0) AS TotalOutgoing,\n    COALESCE(SUM(CASE WHEN t.TransactionType = 'Пополнение' THEN t.Amount ELSE 0 END), 0) - COALESCE(SUM(CASE WHEN t.TransactionType IN ('Оплата', 'Перевод', 'Покупка') THEN t.Amount ELSE 0 END), 0) AS NetFlow,\n    CASE \n        WHEN COALESCE(SUM(CASE WHEN t.TransactionType = 'Пополнение' THEN t.Amount ELSE 0 END), 0) = 0 THEN 0\n        ELSE (COALESCE(SUM(CASE WHEN t.TransactionType IN ('Оплата', 'Перевод', 'Покупка') THEN t.Amount ELSE 0 END), 0) / COALESCE(SUM(CASE WHEN t.TransactionType = 'Пополнение' THEN t.Amount ELSE 0 END), 0)) * 100\n    END AS OutgoingPercentage\nFROM \n    Branches b\nJOIN \n    Customers c ON b.BranchID = c.BranchID\nJOIN \n    Accounts a ON c.CustomerID = a.CustomerID\nJOIN \n    Transactions t ON a.AccountID = t.AccountID\nWHERE \n    t.Status = 'Завершено'\nGROUP BY \n    b.BranchName\nORDER BY \n    OutgoingPercentage DESC\nLIMIT 8;",
            "gpt-4o_response_ru": "SELECT \n    b.BranchName,\n    SUM(CASE WHEN t.TransactionType = 'Пополнение' THEN t.Amount ELSE 0 END) AS TotalIncoming,\n    SUM(CASE WHEN t.TransactionType IN ('Оплата', 'Перевод', 'Покупка') THEN t.Amount ELSE 0 END) AS TotalOutgoing,\n    SUM(CASE WHEN t.TransactionType = 'Пополнение' THEN t.Amount ELSE 0 END) - \n    SUM(CASE WHEN t.TransactionType IN ('Оплата', 'Перевод', 'Покупка') THEN t.Amount ELSE 0 END) AS NetFlow,\n    (SUM(CASE WHEN t.TransactionType IN ('Оплата', 'Перевод', 'Покупка') THEN t.Amount ELSE 0 END) / \n    NULLIF(SUM(t.Amount), 0)) * 100 AS OutgoingPercentage\nFROM \n    Branches b\nJOIN \n    Customers c ON b.BranchID = c.BranchID\nJOIN \n    Accounts a ON c.CustomerID = a.CustomerID\nJOIN \n    Transactions t ON a.AccountID = t.AccountID\nWHERE \n    t.Status = 'Завершено'\nGROUP BY \n    b.BranchName\nORDER BY \n    OutgoingPercentage DESC\nLIMIT 8;"
        },
        {
            "question": "Вывести анализ сезонности депозитных операций: для каждого месяца года показать количество открытых депозитов, среднюю сумму депозита, общую сумму привлеченных средств и процент от общего объема депозитов за год. Учитывать только депозиты, открытые в 2023 году. Результат отсортировать по общей сумме привлеченных средств по убыванию и ограничить 12 записями.",
            "sql_query": "WITH MonthlyDeposits AS (SELECT MONTH(d.StartDate) as DepositMonth, MONTHNAME(d.StartDate) as MonthName, COUNT(d.DepositID) as DepositsOpened, AVG(d.Amount) as AvgDepositAmount, SUM(d.Amount) as TotalAmount FROM Deposits d WHERE YEAR(d.StartDate) = 2023 GROUP BY MONTH(d.StartDate), MONTHNAME(d.StartDate)), TotalYearDeposits AS (SELECT SUM(Amount) as YearTotal FROM Deposits WHERE YEAR(StartDate) = 2023) SELECT md.MonthName, md.DepositsOpened, md.AvgDepositAmount, md.TotalAmount, (md.TotalAmount * 100.0 / tyd.YearTotal) as PercentOfYear FROM MonthlyDeposits md CROSS JOIN TotalYearDeposits tyd ORDER BY md.TotalAmount DESC LIMIT 12;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    strftime('%m', d.StartDate) AS Month,\n    COUNT(d.DepositID) AS NumberOfDeposits,\n    AVG(d.Amount) AS AverageDepositAmount,\n    SUM(d.Amount) AS TotalDepositAmount,\n    (SUM(d.Amount) * 100.0 / (SELECT SUM(Amount) FROM Deposits WHERE strftime('%Y', StartDate) = '2023')) AS PercentageOfYearTotal\nFROM\n    Deposits d\nWHERE\n    strftime('%Y', d.StartDate) = '2023'\nGROUP BY\n    Month\nORDER BY\n    TotalDepositAmount DESC\nLIMIT 12;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    strftime('%m', StartDate) AS Month,\n    COUNT(DepositID) AS NumberOfDeposits,\n    AVG(Amount) AS AverageDepositAmount,\n    SUM(Amount) AS TotalDepositAmount,\n    SUM(Amount) * 100.0 / (SELECT SUM(Amount) FROM Deposits WHERE strftime('%Y', StartDate) = '2023') AS PercentageOfYearTotal\nFROM\n    Deposits\nWHERE\n    strftime('%Y', StartDate) = '2023'\nGROUP BY\n    Month\nORDER BY\n    TotalDepositAmount DESC\nLIMIT 12;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    MONTH(d.StartDate) AS Month,\n    COUNT(d.DepositID) AS TotalDeposits,\n    AVG(d.Amount) AS AverageDepositAmount,\n    SUM(d.Amount) AS TotalDepositAmount,\n    (SUM(d.Amount) / (SELECT SUM(Amount) FROM Deposits WHERE YEAR(StartDate) = 2023)) * 100 AS PercentageOfTotalDeposits\nFROM \n    Deposits d\nWHERE \n    YEAR(d.StartDate) = 2023\nGROUP BY \n    MONTH(d.StartDate)\nORDER BY \n    TotalDepositAmount DESC\nLIMIT 12;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    MONTH(d.StartDate) AS Month,\n    COUNT(d.DepositID) AS TotalDeposits,\n    AVG(d.Amount) AS AverageDepositAmount,\n    SUM(d.Amount) AS TotalDepositAmount,\n    (SUM(d.Amount) / (SELECT SUM(Amount) FROM Deposits WHERE YEAR(StartDate) = 2023)) * 100 AS PercentageOfTotalDeposits\nFROM \n    Deposits d\nWHERE \n    YEAR(d.StartDate) = 2023\nGROUP BY \n    MONTH(d.StartDate)\nORDER BY \n    TotalDepositAmount DESC\nLIMIT 12;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    EXTRACT(MONTH FROM d.StartDate) AS Month,\n    COUNT(d.DepositID) AS DepositCount,\n    AVG(d.Amount) AS AverageDepositAmount,\n    SUM(d.Amount) AS TotalDepositAmount,\n    (SUM(d.Amount) / (SELECT SUM(Amount) FROM Deposits WHERE EXTRACT(YEAR FROM StartDate) = 2023) * 100) AS PercentageOfYearTotal\nFROM \n    Deposits d\nWHERE \n    EXTRACT(YEAR FROM d.StartDate) = 2023\nGROUP BY \n    EXTRACT(MONTH FROM d.StartDate)\nORDER BY \n    TotalDepositAmount DESC\nLIMIT 12;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    EXTRACT(MONTH FROM d.StartDate) AS Month,\n    COUNT(d.DepositID) AS DepositCount,\n    AVG(d.Amount) AS AverageDepositAmount,\n    SUM(d.Amount) AS TotalDepositAmount,\n    (SUM(d.Amount) / (SELECT SUM(Amount) FROM Deposits WHERE EXTRACT(YEAR FROM StartDate) = 2023) * 100) AS PercentageOfYearTotal\nFROM \n    Deposits d\nWHERE \n    EXTRACT(YEAR FROM d.StartDate) = 2023\nGROUP BY \n    EXTRACT(MONTH FROM d.StartDate)\nORDER BY \n    TotalDepositAmount DESC\nLIMIT 12;",
            "gigachat_response": "WITH MonthlyDeposits AS (\n    SELECT \n        EXTRACT(MONTH FROM d.StartDate) AS MonthNum,\n        TO_CHAR(d.StartDate, 'Month') AS MonthName,\n        COUNT(d.DepositID) AS NumDeposits,\n        AVG(d.Amount) AS AvgDepositAmount,\n        SUM(d.Amount) AS TotalDepositAmount\n    FROM Deposits d\n    WHERE EXTRACT(YEAR FROM d.StartDate) = 2023\n    GROUP BY EXTRACT(MONTH FROM d.StartDate), TO_CHAR(d.StartDate, 'Month')\n),\nYearlyTotals AS (\n    SELECT \n        SUM(TotalDepositAmount) AS YearlyTotalDepositAmount\n    FROM MonthlyDeposits\n)\nSELECT \n    md.MonthNum,\n    md.MonthName,\n    md.NumDeposits,\n    ROUND(md.AvgDepositAmount::NUMERIC, 2) AS AvgDepositAmount,\n    md.TotalDepositAmount,\n    ROUND((md.TotalDepositAmount * 100.0 / yt.YearlyTotalDepositAmount)::NUMERIC, 2) AS PercentageOfAnnualVolume\nFROM MonthlyDeposits md\nCROSS JOIN YearlyTotals yt\nORDER BY md.TotalDepositAmount DESC\nLIMIT 12;",
            "gigachat_response_ru": "SELECT \n    EXTRACT(MONTH FROM d.StartDate) AS Month,\n    COUNT(d.DepositID) AS NumberOfDeposits,\n    AVG(d.Amount) AS AverageDepositAmount,\n    SUM(d.Amount) AS TotalCollectedAmount,\n    ROUND((SUM(d.Amount) * 100.0 / (SELECT SUM(Amount) FROM Deposits WHERE EXTRACT(YEAR FROM StartDate) = 2023)), 2) AS PercentageOfYearlyVolume\nFROM \n    Deposits d\nWHERE \n    EXTRACT(YEAR FROM d.StartDate) = 2023\nGROUP BY \n    EXTRACT(MONTH FROM d.StartDate)\nORDER BY \n    TotalCollectedAmount DESC\nLIMIT 12;",
            "gpt-4o_response": "SELECT \n    MONTH(d.StartDate) AS Month,\n    COUNT(d.DepositID) AS OpenedDeposits,\n    AVG(d.Amount) AS AverageDepositAmount,\n    SUM(d.Amount) AS TotalFunds,\n    (SUM(d.Amount) / (SELECT SUM(Amount) FROM Deposits WHERE YEAR(StartDate) = 2023)) * 100 AS PercentageOfTotal\nFROM \n    Deposits d\nWHERE \n    YEAR(d.StartDate) = 2023\nGROUP BY \n    MONTH(d.StartDate)\nORDER BY \n    TotalFunds DESC\nLIMIT 12;",
            "gpt-4o_response_ru": "SELECT \n    MONTH(d.StartDate) AS Month,\n    COUNT(d.DepositID) AS OpenedDeposits,\n    AVG(d.Amount) AS AverageDepositAmount,\n    SUM(d.Amount) AS TotalAttractedFunds,\n    (SUM(d.Amount) / (SELECT SUM(Amount) FROM Deposits WHERE YEAR(StartDate) = 2023)) * 100 AS PercentageOfTotal\nFROM \n    Deposits d\nWHERE \n    YEAR(d.StartDate) = 2023\nGROUP BY \n    MONTH(d.StartDate)\nORDER BY \n    TotalAttractedFunds DESC\nLIMIT 12;"
        },
        {
            "question": "Найти клиентов с максимальной диверсификацией валютного портфеля: клиенты, у которых есть счета, депозиты или кредитные карты в разных валютах (минимум 2 валюты), и при этом есть активные кредиты. Показать имя клиента, список валют, количество валют, общую сумму в рублевом эквиваленте (курс доллара 75 рублей, курс евро 85 рублей), тип кредита и сумму кредита. Результат отсортировать по количеству валют по убыванию, затем по общей сумме по убыванию и ограничить 14 записями.",
            "sql_query": "WITH CustomerCurrencies AS (SELECT c.CustomerID, c.FirstName, c.LastName, a.Currency FROM Customers c JOIN Accounts a ON c.CustomerID = a.CustomerID WHERE a.Status = 'Active' UNION SELECT c.CustomerID, c.FirstName, c.LastName, 'RUB' as Currency FROM Customers c JOIN Deposits d ON c.CustomerID = d.CustomerID WHERE d.Status = 'Активен'), CurrencyStats AS (SELECT CustomerID, FirstName, LastName, GROUP_CONCAT(DISTINCT Currency ORDER BY Currency) as CurrencyList, COUNT(DISTINCT Currency) as CurrencyCount FROM CustomerCurrencies GROUP BY CustomerID, FirstName, LastName HAVING COUNT(DISTINCT Currency) >= 2), CustomerWithLoans AS (SELECT cs.CustomerID, cs.FirstName, cs.LastName, cs.CurrencyList, cs.CurrencyCount, SUM(a.Balance * CASE WHEN a.Currency = 'USD' THEN 75 WHEN a.Currency = 'EUR' THEN 85 ELSE 1 END) + SUM(d.Amount) as TotalRUBEquivalent, l.LoanType, l.PrincipalAmount FROM CurrencyStats cs LEFT JOIN Accounts a ON cs.CustomerID = a.CustomerID AND a.Status = 'Active' LEFT JOIN Deposits d ON cs.CustomerID = d.CustomerID AND d.Status = 'Активен' JOIN Loans l ON cs.CustomerID = l.CustomerID AND l.Status = 'Активно' GROUP BY cs.CustomerID, cs.FirstName, cs.LastName, cs.CurrencyList, cs.CurrencyCount, l.LoanType, l.PrincipalAmount) SELECT FirstName, LastName, CurrencyList, CurrencyCount, TotalRUBEquivalent, LoanType, PrincipalAmount FROM CustomerWithLoans ORDER BY CurrencyCount DESC, TotalRUBEquivalent DESC LIMIT 14;",
            "google/gemini-2.0-flash-001_response": "WITH CustomerCurrencies AS (\n    SELECT\n        c.CustomerID,\n        c.FirstName,\n        c.LastName,\n        l.LoanType,\n        l.PrincipalAmount,\n        a.Currency AS AccountCurrency,\n        d.Currency AS DepositCurrency,\n        cc.Currency AS CreditCardCurrency\n    FROM Customers c\n    LEFT JOIN Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\n    LEFT JOIN Accounts a ON c.CustomerID = a.CustomerID\n    LEFT JOIN Deposits d ON c.CustomerID = d.CustomerID\n    LEFT JOIN CreditCards cc ON c.CustomerID = cc.CustomerID\n),\nDistinctCurrencies AS (\n    SELECT\n        CustomerID,\n        FirstName,\n        LastName,\n        LoanType,\n        PrincipalAmount,\n        COUNT(DISTINCT Currency) AS NumberOfCurrencies,\n        GROUP_CONCAT(DISTINCT Currency) AS CurrencyList\n    FROM (\n        SELECT CustomerID, FirstName, LastName, LoanType, PrincipalAmount, AccountCurrency AS Currency FROM CustomerCurrencies WHERE AccountCurrency IS NOT NULL\n        UNION\n        SELECT CustomerID, FirstName, LastName, LoanType, PrincipalAmount, DepositCurrency AS Currency FROM CustomerCurrencies WHERE DepositCurrency IS NOT NULL\n        UNION\n        SELECT CustomerID, FirstName, LastName, LoanType, PrincipalAmount, CreditCardCurrency AS Currency FROM CustomerCurrencies WHERE CreditCardCurrency IS NOT NULL\n    ) AS AllCurrencies\n    GROUP BY CustomerID, FirstName, LastName, LoanType, PrincipalAmount\n    HAVING COUNT(DISTINCT Currency) >= 2\n)\nSELECT\n    dc.FirstName,\n    dc.LastName,\n    dc.CurrencyList,\n    dc.NumberOfCurrencies,\n    dc.PrincipalAmount +\n    SUM(CASE WHEN dc.CurrencyList LIKE '%USD%' THEN dc.PrincipalAmount * 75 ELSE 0 END) +\n    SUM(CASE WHEN dc.CurrencyList LIKE '%EUR%' THEN dc.PrincipalAmount * 85 ELSE 0 END) AS TotalAmountInRUB,\n    dc.LoanType,\n    dc.PrincipalAmount\nFROM DistinctCurrencies dc\nWHERE dc.CustomerID IN (SELECT DISTINCT CustomerID FROM Loans WHERE Status = 'Активно')\nGROUP BY dc.CustomerID, dc.FirstName, dc.LastName, dc.CurrencyList, dc.NumberOfCurrencies, dc.PrincipalAmount, dc.LoanType\nORDER BY dc.NumberOfCurrencies DESC, TotalAmountInRUB DESC\nLIMIT 14;",
            "google/gemini-2.0-flash-001_response_ru": "WITH CustomerCurrencies AS (\n    SELECT\n        c.CustomerID,\n        c.FirstName,\n        c.LastName,\n        CASE\n            WHEN a.Currency IS NOT NULL THEN a.Currency\n            WHEN d.Currency IS NOT NULL THEN d.Currency\n            WHEN cc.Currency IS NOT NULL THEN cc.Currency\n            ELSE NULL\n        END AS Currency,\n        l.LoanType,\n        l.PrincipalAmount\n    FROM Customers c\n    LEFT JOIN Accounts a ON c.CustomerID = a.CustomerID\n    LEFT JOIN Deposits d ON c.CustomerID = d.CustomerID\n    LEFT JOIN CreditCards cc ON c.CustomerID = cc.CustomerID\n    LEFT JOIN Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\n    WHERE a.Currency IS NOT NULL OR d.Currency IS NOT NULL OR cc.Currency IS NOT NULL\n),\nDistinctCustomerCurrencies AS (\n    SELECT\n        CustomerID,\n        FirstName,\n        LastName,\n        STRING_AGG(DISTINCT Currency, ', ') AS Currencies,\n        COUNT(DISTINCT Currency) AS CurrencyCount,\n        LoanType,\n        PrincipalAmount\n    FROM CustomerCurrencies\n    GROUP BY CustomerID, FirstName, LastName, LoanType, PrincipalAmount\n    HAVING COUNT(DISTINCT Currency) >= 2\n)\nSELECT\n    dcc.FirstName,\n    dcc.LastName,\n    dcc.Currencies,\n    dcc.CurrencyCount,\n    SUM(\n        CASE\n            WHEN dcc.Currency = 'RUB' THEN dcc.PrincipalAmount\n            WHEN dcc.Currency = 'USD' THEN dcc.PrincipalAmount * 75\n            WHEN dcc.Currency = 'EUR' THEN dcc.PrincipalAmount * 85\n            ELSE 0\n        END\n    ) AS TotalAmountInRUB,\n    dcc.LoanType,\n    dcc.PrincipalAmount\nFROM DistinctCustomerCurrencies dcc\nWHERE dcc.CustomerID IN (SELECT CustomerID FROM Loans WHERE Status = 'Активно')\nGROUP BY dcc.CustomerID, dcc.FirstName, dcc.LastName, dcc.Currencies, dcc.CurrencyCount, dcc.LoanType, dcc.PrincipalAmount\nORDER BY dcc.CurrencyCount DESC, TotalAmountInRUB DESC\nLIMIT 14;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH DiverseCustomers AS (\n  SELECT \n    c.CustomerID,\n    c.FirstName,\n    c.LastName,\n    COUNT(DISTINCT a.Currency) AS CurrencyCount,\n    COUNT(DISTINCT d.Currency) AS DepositCurrencyCount,\n    COUNT(DISTINCT cc.Currency) AS CardCurrencyCount,\n    SUM(CASE WHEN a.Currency = 'RUB' THEN a.Balance \n             WHEN a.Currency = 'USD' THEN a.Balance * 75 \n             WHEN a.Currency = 'EUR' THEN a.Balance * 85 END) AS TotalBalance,\n    SUM(CASE WHEN d.Currency = 'RUB' THEN d.Amount \n             WHEN d.Currency = 'USD' THEN d.Amount * 75 \n             WHEN d.Currency = 'EUR' THEN d.Amount * 85 END) AS TotalDeposit,\n    SUM(CASE WHEN cc.Currency = 'RUB' THEN cc.Balance \n             WHEN cc.Currency = 'USD' THEN cc.Balance * 75 \n             WHEN cc.Currency = 'EUR' THEN cc.Balance * 85 END) AS TotalCardBalance,\n    l.LoanType,\n    l.PrincipalAmount\n  FROM \n    Customers c\n  LEFT JOIN \n    Accounts a ON c.CustomerID = a.CustomerID AND a.Status = 'Active'\n  LEFT JOIN \n    Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\n  LEFT JOIN \n    CreditCards cc ON c.CustomerID = cc.CustomerID AND cc.Status = 'Активна'\n  LEFT JOIN \n    Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\n  GROUP BY \n    c.CustomerID, c.FirstName, c.LastName, l.LoanType, l.PrincipalAmount\n  HAVING \n    COUNT(DISTINCT a.Currency) + COUNT(DISTINCT d.Currency) + COUNT(DISTINCT cc.Currency) >= 2\n    AND l.LoanType IS NOT NULL\n),\nCombinedData AS (\n  SELECT \n    CustomerID,\n    FirstName,\n    LastName,\n    CurrencyCount + DepositCurrencyCount + CardCurrencyCount AS TotalCurrencyCount,\n    TotalBalance + TotalDeposit + TotalCardBalance AS TotalAmount,\n    LoanType,\n    PrincipalAmount\n  FROM \n    DiverseCustomers\n)\nSELECT \n  FirstName,\n  LastName,\n  STRING_AGG(CASE \n                WHEN CurrencyCount > 0 THEN 'RUB'\n                WHEN DepositCurrencyCount > 0 THEN 'RUB'\n                WHEN CardCurrencyCount > 0 THEN 'RUB'\n                ELSE NULL END, ', ') || \n  STRING_AGG(CASE \n                WHEN a.Currency = 'USD' THEN 'USD'\n                WHEN d.Currency = 'USD' THEN 'USD'\n                WHEN cc.Currency = 'USD' THEN 'USD'\n                ELSE NULL END, ', ') || \n  STRING_AGG(CASE \n                WHEN a.Currency = 'EUR' THEN 'EUR'\n                WHEN d.Currency = 'EUR' THEN 'EUR'\n                WHEN cc.Currency = 'EUR' THEN 'EUR'\n                ELSE NULL END, ', ') AS CurrencyList,\n  TotalCurrencyCount,\n  TotalAmount,\n  LoanType,\n  PrincipalAmount\nFROM \n  CombinedData\nLEFT JOIN \n  Accounts a ON CombinedData.CustomerID = a.CustomerID\nLEFT JOIN \n  Deposits d ON CombinedData.CustomerID = d.CustomerID\nLEFT JOIN \n  CreditCards cc ON CombinedData.CustomerID = cc.CustomerID\nGROUP BY \n  FirstName, LastName, TotalCurrencyCount, TotalAmount, LoanType, PrincipalAmount\nORDER BY \n  TotalCurrencyCount DESC, TotalAmount DESC\nLIMIT 14;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH CustomerCurrencies AS (\n    SELECT \n        c.CustomerID,\n        c.FirstName,\n        c.LastName,\n        a.Currency AS AccountCurrency,\n        d.Currency AS DepositCurrency,\n        cc.Currency AS CreditCardCurrency\n    FROM \n        Customers c\n    LEFT JOIN \n        Accounts a ON c.CustomerID = a.CustomerID\n    LEFT JOIN \n        Deposits d ON c.CustomerID = d.CustomerID\n    LEFT JOIN \n        CreditCards cc ON c.CustomerID = cc.CustomerID\n),\nCustomerCurrencyList AS (\n    SELECT \n        CustomerID,\n        FirstName,\n        LastName,\n        COUNT(DISTINCT COALESCE(AccountCurrency, DepositCurrency, CreditCardCurrency)) AS CurrencyCount,\n        SUM(\n            CASE \n                WHEN COALESCE(AccountCurrency, DepositCurrency, CreditCardCurrency) = 'RUB' THEN 1\n                WHEN COALESCE(AccountCurrency, DepositCurrency, CreditCardCurrency) = 'USD' THEN 75\n                WHEN COALESCE(AccountCurrency, DepositCurrency, CreditCardCurrency) = 'EUR' THEN 85\n            END\n        ) AS TotalAmountRub\n    FROM \n        CustomerCurrencies\n    GROUP BY \n        CustomerID, FirstName, LastName\n),\nCustomerLoanInfo AS (\n    SELECT \n        c.CustomerID,\n        c.FirstName,\n        c.LastName,\n        l.LoanType,\n        l.PrincipalAmount\n    FROM \n        Customers c\n    JOIN \n        Loans l ON c.CustomerID = l.CustomerID\n    WHERE \n        l.Status = 'Активно'\n)\nSELECT \n    ccl.FirstName,\n    ccl.LastName,\n    STRING_AGG(DISTINCT COALESCE(a.Currency, d.Currency, cc.Currency), ', ') AS CurrencyList,\n    ccl.CurrencyCount,\n    ccl.TotalAmountRub,\n    cli.LoanType,\n    cli.PrincipalAmount\nFROM \n    CustomerCurrencyList ccl\nJOIN \n    CustomerLoanInfo cli ON ccl.CustomerID = cli.CustomerID\nJOIN \n    Accounts a ON cli.CustomerID = a.CustomerID\nJOIN \n    Deposits d ON cli.CustomerID = d.CustomerID\nJOIN \n    CreditCards cc ON cli.CustomerID = cc.CustomerID\nWHERE \n    ccl.CurrencyCount >= 2\nGROUP BY \n    ccl.FirstName, \n    ccl.LastName, \n    ccl.CurrencyCount, \n    ccl.TotalAmountRub, \n    cli.LoanType, \n    cli.PrincipalAmount\nORDER BY \n    ccl.CurrencyCount DESC, \n    ccl.TotalAmountRub DESC\nLIMIT 14;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH CustomerCurrencies AS (\n    SELECT \n        c.CustomerID,\n        c.FirstName,\n        c.LastName,\n        COUNT(DISTINCT a.Currency) AS CurrencyCount,\n        GROUP_CONCAT(DISTINCT a.Currency ORDER BY a.Currency) AS CurrencyList,\n        SUM(CASE \n            WHEN a.Currency = 'RUB' THEN a.Balance\n            WHEN a.Currency = 'USD' THEN a.Balance * 75\n            WHEN a.Currency = 'EUR' THEN a.Balance * 85\n            ELSE 0\n        END) AS TotalBalanceRUB,\n        MAX(l.LoanType) AS LoanType,\n        MAX(l.PrincipalAmount) AS LoanAmount\n    FROM \n        Customers c\n    JOIN \n        Accounts a ON c.CustomerID = a.CustomerID\n    JOIN \n        Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\n    LEFT JOIN \n        Deposits d ON c.CustomerID = d.CustomerID\n    LEFT JOIN \n        CreditCards cc ON c.CustomerID = cc.CustomerID\n    GROUP BY \n        c.CustomerID, c.FirstName, c.LastName\n    HAVING \n        COUNT(DISTINCT a.Currency) >= 2\n)\nSELECT \n    FirstName,\n    LastName,\n    CurrencyList,\n    CurrencyCount,\n    TotalBalanceRUB,\n    LoanType,\n    LoanAmount\nFROM \n    CustomerCurrencies\nORDER BY \n    CurrencyCount DESC,\n    TotalBalanceRUB DESC\nLIMIT 14;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "WITH CustomerCurrencies AS (\n    SELECT \n        c.CustomerID,\n        c.FirstName,\n        c.LastName,\n        a.Currency\n    FROM \n        Customers c\n    JOIN \n        Accounts a ON c.CustomerID = a.CustomerID\n    WHERE \n        a.Status = 'Active'\n    \n    UNION\n    \n    SELECT \n        c.CustomerID,\n        c.FirstName,\n        c.LastName,\n        d.Currency\n    FROM \n        Customers c\n    JOIN \n        Deposits d ON c.CustomerID = d.CustomerID\n    WHERE \n        d.Status = 'Активен'\n    \n    UNION\n    \n    SELECT \n        c.CustomerID,\n        c.FirstName,\n        c.LastName,\n        cc.Currency\n    FROM \n        Customers c\n    JOIN \n        CreditCards cc ON c.CustomerID = cc.CustomerID\n    WHERE \n        cc.Status = 'Активна'\n),\n\nCustomerTotalAmount AS (\n    SELECT \n        c.CustomerID,\n        SUM(CASE \n            WHEN a.Currency = 'RUB' THEN a.Balance\n            WHEN a.Currency = 'USD' THEN a.Balance * 75\n            WHEN a.Currency = 'EUR' THEN a.Balance * 85\n            ELSE 0\n        END) AS TotalAmount\n    FROM \n        Customers c\n    JOIN \n        Accounts a ON c.CustomerID = a.CustomerID\n    WHERE \n        a.Status = 'Active'\n    GROUP BY \n        c.CustomerID\n)\n\nSELECT \n    cc.FirstName,\n    cc.LastName,\n    STRING_AGG(DISTINCT cc.Currency, ', ') AS Currencies,\n    COUNT(DISTINCT cc.Currency) AS CurrencyCount,\n    COALESCE(cta.TotalAmount, 0) AS TotalAmount,\n    l.LoanType,\n    l.PrincipalAmount AS LoanAmount\nFROM \n    CustomerCurrencies cc\nJOIN \n    Loans l ON cc.CustomerID = l.CustomerID AND l.Status = 'Активно'\nLEFT JOIN \n    CustomerTotalAmount cta ON cc.CustomerID = cta.CustomerID\nGROUP BY \n    cc.CustomerID, cc.FirstName, cc.LastName, cta.TotalAmount, l.LoanType, l.PrincipalAmount\nHAVING \n    COUNT(DISTINCT cc.Currency) >= 2\nORDER BY \n    CurrencyCount DESC, TotalAmount DESC\nLIMIT 14;",
            "gigachat_response": "WITH ClientCurrencyPortfolio AS (\n    SELECT \n        c.CustomerID,\n        c.FirstName || ' ' || c.MiddleName || ' ' || c.LastName AS FullName,\n        ARRAY_AGG(DISTINCT COALESCE(a.Currency, d.Currency, cc.Currency)) FILTER (WHERE COALESCE(a.Currency, d.Currency, cc.Currency) IS NOT NULL) AS CurrenciesList,\n        COUNT(DISTINCT COALESCE(a.Currency, d.Currency, cc.Currency)) FILTER (WHERE COALESCE(a.Currency, d.Currency, cc.Currency) IS NOT NULL) AS NumCurrencies,\n        SUM(\n            CASE \n                WHEN a.Currency = 'USD' THEN a.Balance * 75\n                WHEN a.Currency = 'EUR' THEN a.Balance * 85\n                ELSE a.Balance\n            END\n        ) +\n        SUM(\n            CASE \n                WHEN d.Currency = 'USD' THEN d.Amount * 75\n                WHEN d.Currency = 'EUR' THEN d.Amount * 85\n                ELSE d.Amount\n            END\n        ) +\n        SUM(\n            CASE \n                WHEN cc.Currency = 'USD' THEN cc.CreditLimit * 75\n                WHEN cc.Currency = 'EUR' THEN cc.CreditLimit * 85\n                ELSE cc.CreditLimit\n            END\n        ) AS TotalRublesEquivalent,\n        l.LoanType,\n        l.PrincipalAmount\n    FROM Customers c\n    LEFT JOIN Accounts a ON c.CustomerID = a.CustomerID\n    LEFT JOIN Deposits d ON c.CustomerID = d.CustomerID\n    LEFT JOIN CreditCards cc ON c.CustomerID = cc.CustomerID\n    INNER JOIN Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\n    GROUP BY c.CustomerID, c.FirstName, c.MiddleName, c.LastName, l.LoanType, l.PrincipalAmount\n    HAVING COUNT(DISTINCT COALESCE(a.Currency, d.Currency, cc.Currency)) >= 2\n)\nSELECT *\nFROM ClientCurrencyPortfolio\nORDER BY NumCurrencies DESC, TotalRublesEquivalent DESC\nLIMIT 14;",
            "gigachat_response_ru": "WITH ClientCurrencyPortfolio AS (\n    SELECT \n        c.CustomerID,\n        c.FirstName || ' ' || c.MiddleName || ' ' || c.LastName AS FullName,\n        ARRAY_AGG(DISTINCT COALESCE(a.Currency, d.Currency, cc.Currency)) FILTER (WHERE COALESCE(a.Currency, d.Currency, cc.Currency) IS NOT NULL) AS CurrenciesList,\n        COUNT(DISTINCT COALESCE(a.Currency, d.Currency, cc.Currency)) FILTER (WHERE COALESCE(a.Currency, d.Currency, cc.Currency) IS NOT NULL) AS NumCurrencies,\n        SUM(\n            CASE \n                WHEN a.Currency = 'USD' THEN a.Balance * 75\n                WHEN a.Currency = 'EUR' THEN a.Balance * 85\n                ELSE a.Balance\n            END\n        ) +\n        SUM(\n            CASE \n                WHEN d.Currency = 'USD' THEN d.Amount * 75\n                WHEN d.Currency = 'EUR' THEN d.Amount * 85\n                ELSE d.Amount\n            END\n        ) +\n        SUM(\n            CASE \n                WHEN cc.Currency = 'USD' THEN cc.Balance * 75\n                WHEN cc.Currency = 'EUR' THEN cc.Balance * 85\n                ELSE cc.Balance\n            END\n        ) AS TotalRublesEquivalent\n    FROM Customers c\n    LEFT JOIN Accounts a ON c.CustomerID = a.CustomerID\n    LEFT JOIN Deposits d ON c.CustomerID = d.CustomerID\n    LEFT JOIN CreditCards cc ON c.CustomerID = cc.CustomerID\n    WHERE a.Status = 'Active' OR d.Status = 'Активен' OR cc.Status = 'Активна'\n    GROUP BY c.CustomerID, FullName\n),\nClientLoans AS (\n    SELECT \n        l.CustomerID,\n        l.LoanType,\n        l.PrincipalAmount\n    FROM Loans l\n    WHERE l.Status = 'Активно'\n)\nSELECT \n    cp.FullName,\n    cp.CurrenciesList,\n    cp.NumCurrencies,\n    cp.TotalRublesEquivalent,\n    cl.LoanType,\n    cl.PrincipalAmount\nFROM ClientCurrencyPortfolio cp\nINNER JOIN ClientLoans cl ON cp.CustomerID = cl.CustomerID\nWHERE cp.NumCurrencies >= 2\nORDER BY cp.NumCurrencies DESC, cp.TotalRublesEquivalent DESC\nLIMIT 14;",
            "gpt-4o_response": "WITH CustomerCurrencies AS (\n    SELECT \n        c.CustomerID,\n        c.FirstName,\n        c.LastName,\n        a.Currency AS AccountCurrency,\n        d.Currency AS DepositCurrency,\n        cc.Currency AS CardCurrency\n    FROM Customers c\n    LEFT JOIN Accounts a ON c.CustomerID = a.CustomerID AND a.Status = 'Active'\n    LEFT JOIN Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\n    LEFT JOIN CreditCards cc ON c.CustomerID = cc.CustomerID AND cc.Status = 'Активна'\n),\nDistinctCurrencies AS (\n    SELECT \n        CustomerID,\n        FirstName,\n        LastName,\n        COUNT(DISTINCT Currency) AS CurrencyCount,\n        STRING_AGG(DISTINCT Currency, ', ') AS CurrencyList\n    FROM (\n        SELECT CustomerID, FirstName, LastName, AccountCurrency AS Currency FROM CustomerCurrencies WHERE AccountCurrency IS NOT NULL\n        UNION\n        SELECT CustomerID, FirstName, LastName, DepositCurrency AS Currency FROM CustomerCurrencies WHERE DepositCurrency IS NOT NULL\n        UNION\n        SELECT CustomerID, FirstName, LastName, CardCurrency AS Currency FROM CustomerCurrencies WHERE CardCurrency IS NOT NULL\n    ) AS Currencies\n    GROUP BY CustomerID, FirstName, LastName\n    HAVING COUNT(DISTINCT Currency) >= 2\n),\nLoanDetails AS (\n    SELECT \n        l.CustomerID,\n        l.LoanType,\n        l.PrincipalAmount,\n        SUM(CASE \n            WHEN a.Currency = 'USD' THEN a.Balance * 75\n            WHEN a.Currency = 'EUR' THEN a.Balance * 85\n            ELSE a.Balance\n        END) AS TotalBalanceRUB\n    FROM Loans l\n    JOIN Accounts a ON l.CustomerID = a.CustomerID AND a.Status = 'Active'\n    WHERE l.Status = 'Активно'\n    GROUP BY l.CustomerID, l.LoanType, l.PrincipalAmount\n)\nSELECT \n    dc.FirstName,\n    dc.LastName,\n    dc.CurrencyList,\n    dc.CurrencyCount,\n    ld.TotalBalanceRUB,\n    ld.LoanType,\n    ld.PrincipalAmount\nFROM DistinctCurrencies dc\nJOIN LoanDetails ld ON dc.CustomerID = ld.CustomerID\nORDER BY dc.CurrencyCount DESC, ld.TotalBalanceRUB DESC\nLIMIT 14;",
            "gpt-4o_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    GROUP_CONCAT(DISTINCT a.Currency, d.Currency, cc.Currency) AS Currencies,\n    COUNT(DISTINCT a.Currency) + COUNT(DISTINCT d.Currency) + COUNT(DISTINCT cc.Currency) AS CurrencyCount,\n    SUM(CASE \n        WHEN a.Currency = 'USD' THEN a.Balance * 75\n        WHEN a.Currency = 'EUR' THEN a.Balance * 85\n        ELSE a.Balance\n    END) + \n    SUM(CASE \n        WHEN d.Currency = 'USD' THEN d.Amount * 75\n        WHEN d.Currency = 'EUR' THEN d.Amount * 85\n        ELSE d.Amount\n    END) + \n    SUM(CASE \n        WHEN cc.Currency = 'USD' THEN cc.Balance * 75\n        WHEN cc.Currency = 'EUR' THEN cc.Balance * 85\n        ELSE cc.Balance\n    END) AS TotalInRUB,\n    l.LoanType, \n    l.PrincipalAmount\nFROM \n    Customers c\nJOIN \n    Accounts a ON c.CustomerID = a.CustomerID AND a.Status = 'Active'\nLEFT JOIN \n    Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\nLEFT JOIN \n    CreditCards cc ON c.CustomerID = cc.CustomerID AND cc.Status = 'Активна'\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\nWHERE \n    (SELECT COUNT(DISTINCT Currency) FROM (\n        SELECT a.Currency FROM Accounts a WHERE a.CustomerID = c.CustomerID AND a.Status = 'Active'\n        UNION\n        SELECT d.Currency FROM Deposits d WHERE d.CustomerID = c.CustomerID AND d.Status = 'Активен'\n        UNION\n        SELECT cc.Currency FROM CreditCards cc WHERE cc.CustomerID = c.CustomerID AND cc.Status = 'Активна'\n    ) AS Currencies) >= 2\nGROUP BY \n    c.CustomerID, l.LoanType, l.PrincipalAmount\nORDER BY \n    CurrencyCount DESC, TotalInRUB DESC\nLIMIT 14;"
        },
        {
            "question": "Вывести топ-10 менеджеров отделений по эффективности работы с клиентами: для каждого менеджера показать количество клиентов в отделении, среднюю сумму активных продуктов на клиента, количество успешных страховых выплат клиентам отделения и общий рейтинг эффективности. Рейтинг рассчитывается как произведение количества клиентов на среднюю сумму продуктов.",
            "sql_query": "WITH ManagerStats AS (SELECT b.ManagerName, b.BranchName, COUNT(DISTINCT c.CustomerID) as ClientCount, AVG(COALESCE(d.Amount, 0) + COALESCE(l.PrincipalAmount, 0) + COALESCE(cc.CreditLimit, 0)) as AvgProductValue, COUNT(CASE WHEN pc.Status = 'Выплачено' THEN 1 END) as SuccessfulClaims FROM Branches b LEFT JOIN Customers c ON b.BranchID = c.BranchID LEFT JOIN Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен' LEFT JOIN Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно' LEFT JOIN CreditCards cc ON c.CustomerID = cc.CustomerID AND cc.Status = 'Активна' LEFT JOIN InsurancePolicies ip ON c.CustomerID = ip.CustomerID AND ip.Status = 'Активен' LEFT JOIN PolicyClaims pc ON ip.PolicyID = pc.PolicyID GROUP BY b.ManagerName, b.BranchName HAVING ClientCount > 0) SELECT ManagerName, BranchName, ClientCount, AvgProductValue, SuccessfulClaims, (ClientCount * AvgProductValue) as EfficiencyRating FROM ManagerStats ORDER BY EfficiencyRating DESC LIMIT 10;",
            "google/gemini-2.0-flash-001_response": "WITH ManagerPerformance AS (\n  SELECT\n    b.ManagerName,\n    COUNT(DISTINCT c.CustomerID) AS CustomerCount,\n    AVG(\n      (\n        SELECT\n          SUM(a.Balance)\n        FROM Accounts AS a\n        WHERE\n          a.CustomerID = c.CustomerID AND a.Status = 'Active'\n      ) + (\n        SELECT\n          SUM(l.PrincipalAmount)\n        FROM Loans AS l\n        WHERE\n          l.CustomerID = c.CustomerID AND l.Status = 'Активно'\n      ) + (\n        SELECT\n          SUM(d.Amount)\n        FROM Deposits AS d\n        WHERE\n          d.CustomerID = c.CustomerID AND d.Status = 'Активен'\n      )\n    ) AS AverageActiveProductAmount,\n    COUNT(DISTINCT pc.ClaimID) AS SuccessfulClaimCount\n  FROM Branches AS b\n  JOIN Customers AS c\n    ON b.BranchID = c.BranchID\n  LEFT JOIN InsurancePolicies AS ip\n    ON c.CustomerID = ip.CustomerID\n  LEFT JOIN PolicyClaims AS pc\n    ON ip.PolicyID = pc.PolicyID AND pc.Status = 'Выплачено'\n  GROUP BY\n    b.ManagerName\n)\nSELECT\n  mp.ManagerName,\n  mp.CustomerCount,\n  mp.AverageActiveProductAmount,\n  mp.SuccessfulClaimCount,\n  mp.CustomerCount * mp.AverageActiveProductAmount AS EfficiencyRating\nFROM ManagerPerformance AS mp\nORDER BY\n  EfficiencyRating DESC\nLIMIT 10;",
            "google/gemini-2.0-flash-001_response_ru": "WITH BranchPerformance AS (\n    SELECT\n        b.BranchID,\n        b.BranchName,\n        b.ManagerName,\n        COUNT(DISTINCT c.CustomerID) AS CustomerCount,\n        AVG(COALESCE(a.Balance, 0) + COALESCE(d.Amount, 0) + COALESCE(l.PrincipalAmount, 0)) AS AvgActiveProductSum,\n        SUM(CASE WHEN pc.Status = 'Выплачено' OR pc.Status = 'Утверждено' THEN 1 ELSE 0 END) AS SuccessfulClaimCount\n    FROM Branches b\n    LEFT JOIN Customers c ON b.BranchID = c.BranchID\n    LEFT JOIN Accounts a ON c.CustomerID = a.CustomerID AND a.Status = 'Active'\n    LEFT JOIN Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\n    LEFT JOIN Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\n    LEFT JOIN InsurancePolicies ip ON c.CustomerID = ip.CustomerID\n    LEFT JOIN PolicyClaims pc ON ip.PolicyID = pc.PolicyID\n    GROUP BY b.BranchID, b.BranchName, b.ManagerName\n),\nRankedBranches AS (\n    SELECT\n        BranchID,\n        BranchName,\n        ManagerName,\n        CustomerCount,\n        AvgActiveProductSum,\n        SuccessfulClaimCount,\n        (CustomerCount * AvgActiveProductSum) AS EfficiencyRating,\n        ROW_NUMBER() OVER (ORDER BY (CustomerCount * AvgActiveProductSum) DESC) AS RatingRank\n    FROM BranchPerformance\n)\nSELECT\n    rb.BranchName,\n    rb.ManagerName,\n    rb.CustomerCount,\n    rb.AvgActiveProductSum,\n    rb.SuccessfulClaimCount,\n    rb.EfficiencyRating\nFROM RankedBranches rb\nWHERE rb.RatingRank <= 10\nORDER BY rb.EfficiencyRating DESC;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH ManagerEfficiency AS (\n  SELECT \n    b.ManagerName,\n    COUNT(c.CustomerID) AS TotalCustomers,\n    AVG(a.Balance) AS AverageProductBalance,\n    SUM(CASE WHEN pc.Status = 'Выплачено' THEN 1 ELSE 0 END) AS SuccessfulClaims,\n    COUNT(c.CustomerID) * AVG(a.Balance) AS EfficiencyRating\n  FROM \n    Branches b\n  JOIN \n    Customers c ON b.BranchID = c.BranchID\n  JOIN \n    Accounts a ON c.CustomerID = a.CustomerID AND a.Status = 'Active'\n  LEFT JOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\n  LEFT JOIN \n    PolicyClaims pc ON ip.PolicyID = pc.PolicyID\n  GROUP BY \n    b.ManagerName\n)\nSELECT \n  ManagerName,\n  TotalCustomers,\n  AverageProductBalance,\n  SuccessfulClaims,\n  EfficiencyRating\nFROM \n  ManagerEfficiency\nORDER BY \n  EfficiencyRating DESC\nLIMIT 10;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH ManagerPerformance AS (\n  SELECT \n    b.ManagerName, \n    COUNT(c.CustomerID) AS TotalCustomers,\n    AVG(a.Balance) AS AverageBalance,\n    SUM(CASE WHEN pc.Status = 'Выплачено' THEN 1 ELSE 0 END) AS SuccessfulClaims,\n    COUNT(c.CustomerID) * AVG(a.Balance) AS EfficiencyRating\n  FROM \n    Branches b\n  JOIN \n    Customers c ON b.BranchID = c.BranchID\n  JOIN \n    Accounts a ON c.CustomerID = a.CustomerID AND a.Status = 'Active'\n  LEFT JOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\n  LEFT JOIN \n    PolicyClaims pc ON ip.PolicyID = pc.PolicyID\n  GROUP BY \n    b.ManagerName\n)\nSELECT \n  ManagerName, \n  TotalCustomers, \n  AverageBalance, \n  SuccessfulClaims, \n  EfficiencyRating\nFROM \n  ManagerPerformance\nORDER BY \n  EfficiencyRating DESC\nLIMIT 10;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH BranchStats AS (\n    SELECT \n        b.BranchID,\n        b.ManagerName,\n        COUNT(DISTINCT c.CustomerID) AS TotalCustomers,\n        AVG(\n            COALESCE(a.Balance, 0) + \n            COALESCE(cc.CreditLimit, 0) + \n            COALESCE(d.Amount, 0) + \n            COALESCE(l.PrincipalAmount, 0)\n        ) AS AvgProductAmount,\n        COUNT(DISTINCT pc.ClaimID) AS SuccessfulClaims,\n        COUNT(DISTINCT c.CustomerID) * AVG(\n            COALESCE(a.Balance, 0) + \n            COALESCE(cc.CreditLimit, 0) + \n            COALESCE(d.Amount, 0) + \n            COALESCE(l.PrincipalAmount, 0)\n        ) AS EfficiencyRating\n    FROM \n        Branches b\n    LEFT JOIN \n        Customers c ON b.BranchID = c.BranchID\n    LEFT JOIN \n        Accounts a ON c.CustomerID = a.CustomerID AND a.Status = 'Active'\n    LEFT JOIN \n        CreditCards cc ON c.CustomerID = cc.CustomerID AND cc.Status = 'Активна'\n    LEFT JOIN \n        Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\n    LEFT JOIN \n        Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\n    LEFT JOIN \n        InsurancePolicies ip ON c.CustomerID = ip.CustomerID AND ip.Status = 'Активен'\n    LEFT JOIN \n        PolicyClaims pc ON ip.PolicyID = pc.PolicyID AND pc.Status = 'Выплачено'\n    GROUP BY \n        b.BranchID, b.ManagerName\n)\nSELECT \n    ManagerName,\n    TotalCustomers,\n    AvgProductAmount,\n    SuccessfulClaims,\n    EfficiencyRating\nFROM \n    BranchStats\nORDER BY \n    EfficiencyRating DESC\nLIMIT 10;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "WITH BranchStats AS (\n    SELECT \n        b.BranchID,\n        b.ManagerName,\n        COUNT(DISTINCT c.CustomerID) AS CustomerCount,\n        AVG(COALESCE(a.Balance, 0) + COALESCE(cc.CreditLimit, 0) + COALESCE(l.PrincipalAmount, 0) + COALESCE(d.Amount, 0)) AS AvgProductAmount,\n        COUNT(DISTINCT CASE WHEN pc.Status = 'Выплачено' THEN pc.ClaimID END) AS SuccessfulClaims\n    FROM \n        Branches b\n        LEFT JOIN Customers c ON b.BranchID = c.BranchID\n        LEFT JOIN Accounts a ON c.CustomerID = a.CustomerID AND a.Status = 'Active'\n        LEFT JOIN CreditCards cc ON c.CustomerID = cc.CustomerID AND cc.Status = 'Активна'\n        LEFT JOIN Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\n        LEFT JOIN Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\n        LEFT JOIN InsurancePolicies ip ON c.CustomerID = ip.CustomerID AND ip.Status = 'Активен'\n        LEFT JOIN PolicyClaims pc ON ip.PolicyID = pc.PolicyID\n    GROUP BY \n        b.BranchID, b.ManagerName\n)\nSELECT \n    ManagerName,\n    CustomerCount,\n    ROUND(AvgProductAmount, 2) AS AvgProductAmount,\n    SuccessfulClaims,\n    (CustomerCount * AvgProductAmount) AS EfficiencyRating\nFROM \n    BranchStats\nORDER BY \n    EfficiencyRating DESC\nLIMIT 10;",
            "gigachat_response": "WITH ManagerPerformance AS (\n    -- Calculate number of customers per branch manager\n    SELECT m.ManagerName, \n           COUNT(c.CustomerID) AS NumCustomers,\n           -- Sum active products balance per customer\n           AVG(\n               COALESCE(SUM(a.Balance), 0) +\n               COALESCE(SUM(cc.CreditLimit), 0) +\n               COALESCE(SUM(l.PrincipalAmount), 0) +\n               COALESCE(SUM(d.Amount), 0)\n           ) OVER (PARTITION BY m.ManagerName) AS AvgProductBalancePerCustomer,\n           -- Count successful insurance claims per branch\n           COUNT(pc.ClaimID) FILTER (WHERE pc.Status = 'Выплачено') AS SuccessfulInsuranceClaims,\n           -- Rating calculation\n           COUNT(c.CustomerID) * AVG(\n               COALESCE(SUM(a.Balance), 0) +\n               COALESCE(SUM(cc.CreditLimit), 0) +\n               COALESCE(SUM(l.PrincipalAmount), 0) +\n               COALESCE(SUM(d.Amount), 0)\n           ) OVER (PARTITION BY m.ManagerName) AS PerformanceRating\n    FROM Branches b\n    INNER JOIN Customers c ON b.BranchID = c.BranchID\n    LEFT JOIN Accounts a ON c.CustomerID = a.CustomerID AND a.Status = 'Active'\n    LEFT JOIN CreditCards cc ON c.CustomerID = cc.CustomerID AND cc.Status = 'Активна'\n    LEFT JOIN Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\n    LEFT JOIN Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\n    LEFT JOIN InsurancePolicies ip ON c.CustomerID = ip.CustomerID AND ip.Status = 'Активен'\n    LEFT JOIN PolicyClaims pc ON ip.PolicyID = pc.PolicyID\n    CROSS JOIN LATERAL (VALUES(b.ManagerName)) AS m(ManagerName)\n    GROUP BY m.ManagerName\n)\n-- Select top managers based on performance rating\nSELECT *\nFROM ManagerPerformance\nORDER BY PerformanceRating DESC\nLIMIT 10;",
            "gigachat_response_ru": "WITH ManagerPerformance AS (\n    SELECT \n        m.ManagerName,\n        b.BranchID,\n        COUNT(DISTINCT c.CustomerID) AS TotalClients,\n        COALESCE(AVG(a.Balance), 0) AS AvgProductBalancePerClient,\n        COUNT(pc.ClaimID) AS SuccessfulInsurancePayouts,\n        (COUNT(DISTINCT c.CustomerID) * COALESCE(AVG(a.Balance), 0)) AS EfficiencyRating\n    FROM \n        Branches b\n    INNER JOIN \n        Customers c ON b.BranchID = c.BranchID\n    LEFT JOIN \n        Accounts a ON c.CustomerID = a.CustomerID AND a.Status = 'Active'\n    LEFT JOIN \n        InsurancePolicies ip ON c.CustomerID = ip.CustomerID AND ip.Status = 'Активен'\n    LEFT JOIN \n        PolicyClaims pc ON ip.PolicyID = pc.PolicyID AND pc.Status = 'Выплачено'\n    CROSS JOIN \n        (SELECT ManagerName FROM Branches) m -- Для получения имени менеджера\n    WHERE \n        b.ManagerName = m.ManagerName\n    GROUP BY \n        m.ManagerName, b.BranchID\n)\nSELECT \n    ManagerName,\n    TotalClients,\n    ROUND(AvgProductBalancePerClient, 2) AS AvgProductBalancePerClient,\n    SuccessfulInsurancePayouts,\n    ROUND(EfficiencyRating, 2) AS EfficiencyRating\nFROM \n    ManagerPerformance\nORDER BY \n    EfficiencyRating DESC\nLIMIT 10;",
            "gpt-4o_response": "SELECT \n    b.ManagerName,\n    COUNT(c.CustomerID) AS TotalCustomers,\n    AVG(COALESCE(a.Balance, 0) + COALESCE(l.PrincipalAmount, 0) + COALESCE(d.Amount, 0)) AS AvgProductAmountPerCustomer,\n    COUNT(DISTINCT pc.ClaimID) AS SuccessfulInsuranceClaims,\n    COUNT(c.CustomerID) * AVG(COALESCE(a.Balance, 0) + COALESCE(l.PrincipalAmount, 0) + COALESCE(d.Amount, 0)) AS EfficiencyRating\nFROM \n    Branches b\nJOIN \n    Customers c ON b.BranchID = c.BranchID\nLEFT JOIN \n    Accounts a ON c.CustomerID = a.CustomerID AND a.Status = 'Active'\nLEFT JOIN \n    Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\nLEFT JOIN \n    Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\nLEFT JOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID AND ip.Status = 'Активен'\nLEFT JOIN \n    PolicyClaims pc ON ip.PolicyID = pc.PolicyID AND pc.Status = 'Выплачено'\nGROUP BY \n    b.ManagerName\nORDER BY \n    EfficiencyRating DESC\nLIMIT 10;",
            "gpt-4o_response_ru": "SELECT \n    b.ManagerName,\n    COUNT(c.CustomerID) AS CustomerCount,\n    AVG(COALESCE(a.Balance, 0) + COALESCE(l.PrincipalAmount, 0) + COALESCE(d.Amount, 0)) AS AvgProductAmountPerCustomer,\n    COUNT(DISTINCT pc.ClaimID) AS SuccessfulInsuranceClaims,\n    COUNT(c.CustomerID) * AVG(COALESCE(a.Balance, 0) + COALESCE(l.PrincipalAmount, 0) + COALESCE(d.Amount, 0)) AS EfficiencyRating\nFROM \n    Branches b\nJOIN \n    Customers c ON b.BranchID = c.BranchID\nLEFT JOIN \n    Accounts a ON c.CustomerID = a.CustomerID AND a.Status = 'Active'\nLEFT JOIN \n    Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\nLEFT JOIN \n    Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\nLEFT JOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID AND ip.Status = 'Активен'\nLEFT JOIN \n    PolicyClaims pc ON ip.PolicyID = pc.PolicyID AND pc.Status = 'Выплачено'\nGROUP BY \n    b.ManagerName\nORDER BY \n    EfficiencyRating DESC\nLIMIT 10;"
        },
        {
            "question": "Вывести анализ производительности банкоматов по времени установки за последние 6 лет: разделить банкоматы на группы по году установки и для каждой группы показать среднее количество доступных средств, количество активных банкоматов, процент активных банкоматов и среднее количество клиентов на банкомат в отделениях.",
            "sql_query": "WITH ATMGroups AS (SELECT YEAR(a.InstallationDate) as InstallationYear, COUNT(a.ATMID) as TotalATMs, COUNT(CASE WHEN a.Status = 'Active' THEN 1 END) as ActiveATMs, AVG(CASE WHEN a.Status = 'Active' THEN a.CashAvailable ELSE 0 END) as AvgCashAvailable FROM ATMs a GROUP BY YEAR(a.InstallationDate)), BranchClientStats AS (SELECT b.BranchID, COUNT(DISTINCT c.CustomerID) as ClientCount, COUNT(DISTINCT a.ATMID) as BranchATMs FROM Branches b LEFT JOIN Customers c ON b.BranchID = c.BranchID LEFT JOIN ATMs a ON b.BranchID = a.BranchID AND a.Status = 'Active' GROUP BY b.BranchID HAVING BranchATMs > 0), YearlyStats AS (SELECT ag.InstallationYear, ag.TotalATMs, ag.ActiveATMs, ag.AvgCashAvailable, (ag.ActiveATMs * 100.0 / ag.TotalATMs) as ActivePercent, AVG(bcs.ClientCount / bcs.BranchATMs) as AvgClientsPerATM FROM ATMGroups ag LEFT JOIN ATMs a ON YEAR(a.InstallationDate) = ag.InstallationYear LEFT JOIN BranchClientStats bcs ON a.BranchID = bcs.BranchID GROUP BY ag.InstallationYear, ag.TotalATMs, ag.ActiveATMs, ag.AvgCashAvailable) SELECT InstallationYear, TotalATMs, ActiveATMs, AvgCashAvailable, ActivePercent, AvgClientsPerATM FROM YearlyStats ORDER BY InstallationYear DESC LIMIT 6;",
            "google/gemini-2.0-flash-001_response": "WITH ATMInstallations AS (\n    SELECT\n        ATMID,\n        BranchID,\n        Location,\n        InstallationDate,\n        Status,\n        CashAvailable,\n        STRFTIME('%Y', InstallationDate) AS InstallationYear\n    FROM\n        ATMs\n    WHERE\n        InstallationDate >= DATE('now', '-6 years')\n),\nBranchCustomerCounts AS (\n    SELECT\n        b.BranchID,\n        COUNT(DISTINCT c.CustomerID) AS CustomerCount\n    FROM\n        Branches b\n    JOIN\n        Customers c ON b.BranchID = c.BranchID\n    GROUP BY\n        b.BranchID\n)\nSELECT\n    ai.InstallationYear,\n    AVG(ai.CashAvailable) AS AverageCashAvailable,\n    SUM(CASE WHEN ai.Status = 'Active' THEN 1 ELSE 0 END) AS ActiveATMsCount,\n    CAST(SUM(CASE WHEN ai.Status = 'Active' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(ai.ATMID) AS ActiveATMsPercentage,\n    AVG(bcc.CustomerCount) AS AverageCustomersPerATM\nFROM\n    ATMInstallations ai\nLEFT JOIN\n    BranchCustomerCounts bcc ON ai.BranchID = bcc.BranchID\nGROUP BY\n    ai.InstallationYear\nORDER BY\n    ai.InstallationYear;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    STRFTIME('%Y', A.InstallationDate) AS InstallationYear,\n    AVG(A.CashAvailable) AS AverageCashAvailable,\n    COUNT(CASE WHEN A.Status = 'Active' THEN 1 END) AS ActiveATMsCount,\n    CAST(COUNT(CASE WHEN A.Status = 'Active' THEN 1 END) AS REAL) * 100 / COUNT(A.ATMID) AS ActiveATMsPercentage,\n    CAST(COUNT(DISTINCT C.CustomerID) AS REAL) / COUNT(A.ATMID) AS AverageCustomersPerATM\nFROM\n    ATMs A\nJOIN\n    Branches B ON A.BranchID = B.BranchID\nJOIN\n    Customers C ON B.BranchID = C.BranchID\nWHERE\n    A.InstallationDate >= STRFTIME('%Y-%m-%d', DATE('now', '-6 years'))\nGROUP BY\n    InstallationYear\nORDER BY\n    InstallationYear;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH ATMPerformance AS (\n  SELECT \n    YEAR(a.InstallationDate) AS InstallationYear,\n    AVG(a.CashAvailable) AS AverageCashAvailable,\n    COUNT(CASE WHEN a.Status = 'Active' THEN 1 END) AS ActiveATMs,\n    COUNT(a.ATMID) AS TotalATMs,\n    COUNT(DISTINCT a.BranchID) AS BranchesWithATMs\n  FROM \n    ATMs a\n  WHERE \n    a.InstallationDate >= DATE_SUB(CURRENT_DATE, INTERVAL 6 YEAR)\n  GROUP BY \n    YEAR(a.InstallationDate)\n)\nSELECT \n  InstallationYear,\n  AverageCashAvailable,\n  ActiveATMs,\n  (ActiveATMs / TotalATMs) * 100 AS ActiveATMPercentage,\n  (ActiveATMs / BranchesWithATMs) AS AverageCustomersPerATM\nFROM \n  ATMPerformance\nORDER BY \n  InstallationYear;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH ATMPerformance AS (\n  SELECT \n    EXTRACT(YEAR FROM a.InstallationDate) AS InstallationYear,\n    AVG(a.CashAvailable) AS AverageCashAvailable,\n    COUNT(CASE WHEN a.Status = 'Active' THEN 1 END) AS ActiveATMs,\n    COUNT(a.ATMID) AS TotalATMs,\n    COUNT(DISTINCT a.BranchID) AS TotalBranches\n  FROM \n    ATMs a\n  WHERE \n    a.InstallationDate >= CURRENT_DATE - INTERVAL '6 year'\n  GROUP BY \n    EXTRACT(YEAR FROM a.InstallationDate)\n)\nSELECT \n  InstallationYear,\n  AverageCashAvailable,\n  ActiveATMs,\n  TotalATMs,\n  (ActiveATMs * 1.0 / TotalATMs) * 100 AS ActiveATMPercentage,\n  (TotalATMs * 1.0 / TotalBranches) AS AverageATMsPerBranch\nFROM \n  ATMPerformance\nORDER BY \n  InstallationYear;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    YEAR(a.InstallationDate) AS InstallationYear,\n    AVG(a.CashAvailable) AS AvgCashAvailable,\n    COUNT(CASE WHEN a.Status = 'Active' THEN 1 END) AS ActiveATMsCount,\n    ROUND(COUNT(CASE WHEN a.Status = 'Active' THEN 1 END) * 100.0 / COUNT(*), 2) AS ActiveATMsPercentage,\n    ROUND(COUNT(DISTINCT c.CustomerID) * 1.0 / COUNT(DISTINCT a.ATMID), 2) AS AvgCustomersPerATM\nFROM \n    ATMs a\nJOIN \n    Branches b ON a.BranchID = b.BranchID\nLEFT JOIN \n    Customers c ON b.BranchID = c.BranchID\nWHERE \n    a.InstallationDate >= DATE_SUB(CURRENT_DATE(), INTERVAL 6 YEAR)\nGROUP BY \n    YEAR(a.InstallationDate)\nORDER BY \n    InstallationYear;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    YEAR(a.InstallationDate) AS InstallationYear,\n    AVG(a.CashAvailable) AS AvgCashAvailable,\n    COUNT(CASE WHEN a.Status = 'Active' THEN 1 END) AS ActiveATMsCount,\n    COUNT(CASE WHEN a.Status = 'Active' THEN 1 END) * 100.0 / COUNT(*) AS ActiveATMsPercentage,\n    COUNT(DISTINCT c.CustomerID) * 1.0 / COUNT(DISTINCT a.ATMID) AS AvgCustomersPerATM\nFROM \n    ATMs a\nJOIN \n    Branches b ON a.BranchID = b.BranchID\nLEFT JOIN \n    Customers c ON b.BranchID = c.BranchID\nWHERE \n    a.InstallationDate >= DATE_SUB(CURRENT_DATE, INTERVAL 6 YEAR)\nGROUP BY \n    YEAR(a.InstallationDate)\nORDER BY \n    InstallationYear;",
            "gigachat_response": "WITH AtmPerformance AS (\n    SELECT \n        EXTRACT(YEAR FROM InstallationDate) AS InstallYear,\n        AVG(CashAvailable) AS AvgCashAvailable,\n        COUNT(ATMID) FILTER (WHERE Status = 'Active') AS NumActiveAtms,\n        COUNT(ATMID) AS TotalAtms,\n        COUNT(DISTINCT b.BranchID) AS NumBranches\n    FROM ATMs atm\n    JOIN Branches b ON atm.BranchID = b.BranchID\n    WHERE InstallationDate >= NOW() - INTERVAL '6 YEARS'\n    GROUP BY InstallYear\n)\nSELECT \n    InstallYear,\n    ROUND(AVG(AvgCashAvailable), 2) AS AvgCashPerYear,\n    SUM(NumActiveAtms) AS TotalActiveAtms,\n    ROUND((SUM(NumActiveAtms)::DECIMAL / SUM(TotalAtms)) * 100, 2) || '%' AS ActivePercentage,\n    ROUND(SUM(NumBranches::DECIMAL / NumActiveAtms), 2) AS ClientsPerAtm\nFROM AtmPerformance\nGROUP BY InstallYear\nORDER BY InstallYear ASC;",
            "gigachat_response_ru": "SELECT \n    YEAR(a.InstallationDate) AS YearInstalled,\n    AVG(a.CashAvailable) AS AverageCashAvailable,\n    COUNT(a.ATMID) AS TotalATMs,\n    COUNT(CASE WHEN a.Status = 'Active' THEN 1 ELSE NULL END) AS ActiveATMs,\n    ROUND((COUNT(CASE WHEN a.Status = 'Active' THEN 1 ELSE NULL END) * 100.0 / COUNT(a.ATMID)), 2) AS PercentageActive,\n    AVG(b.TotalCustomersPerATM) AS AverageCustomersPerATM\nFROM ATMs a\nLEFT JOIN (\n    SELECT \n        BranchID, \n        COUNT(DISTINCT CustomerID) / COUNT(DISTINCT ATMID) AS TotalCustomersPerATM\n    FROM Customers c\n    INNER JOIN ATMs atm ON c.BranchID = atm.BranchID\n    GROUP BY BranchID\n) b ON a.BranchID = b.BranchID\nWHERE YEAR(a.InstallationDate) >= YEAR(CURRENT_DATE()) - 6\nGROUP BY YEAR(a.InstallationDate)\nORDER BY YearInstalled ASC;",
            "gpt-4o_response": "SELECT \n    YEAR(a.InstallationDate) AS InstallationYear,\n    AVG(a.CashAvailable) AS AvgCashAvailable,\n    COUNT(CASE WHEN a.Status = 'Active' THEN 1 END) AS ActiveATMs,\n    (COUNT(CASE WHEN a.Status = 'Active' THEN 1 END) * 100.0 / COUNT(*)) AS ActiveATMsPercentage,\n    AVG(c.CustomerCount) AS AvgCustomersPerATM\nFROM \n    ATMs a\nLEFT JOIN (\n    SELECT \n        b.BranchID,\n        COUNT(c.CustomerID) AS CustomerCount\n    FROM \n        Branches b\n    LEFT JOIN \n        Customers c ON b.BranchID = c.BranchID\n    GROUP BY \n        b.BranchID\n) c ON a.BranchID = c.BranchID\nWHERE \n    a.InstallationDate >= DATEADD(YEAR, -6, CURRENT_DATE)\nGROUP BY \n    YEAR(a.InstallationDate)\nORDER BY \n    InstallationYear;",
            "gpt-4o_response_ru": "SELECT \n    YEAR(a.InstallationDate) AS InstallationYear,\n    AVG(a.CashAvailable) AS AvgCashAvailable,\n    COUNT(CASE WHEN a.Status = 'Active' THEN 1 END) AS ActiveATMs,\n    (COUNT(CASE WHEN a.Status = 'Active' THEN 1 END) * 100.0 / COUNT(*)) AS ActiveATMsPercentage,\n    AVG(c.CustomerCount) AS AvgCustomersPerATM\nFROM \n    ATMs a\nJOIN \n    (SELECT \n        b.BranchID, \n        COUNT(c.CustomerID) AS CustomerCount\n     FROM \n        Branches b\n     LEFT JOIN \n        Customers c ON b.BranchID = c.BranchID\n     GROUP BY \n        b.BranchID) c ON a.BranchID = c.BranchID\nWHERE \n    a.InstallationDate >= DATEADD(YEAR, -6, CURRENT_DATE)\nGROUP BY \n    YEAR(a.InstallationDate)\nORDER BY \n    InstallationYear;"
        },
        {
            "question": "Найти топ-18 клиентов с наиболее активным использованием депозитных операций: клиенты, у которых количество транзакций по депозитам превышает 3, и при этом есть депозиты разных типов. Показать имя клиента, количество депозитных транзакций, количество типов депозитов, общую сумму депозитных операций, среднюю процентную ставку по депозитам и список типов депозитов.",
            "sql_query": "WITH DepositActivity AS (SELECT c.CustomerID, c.FirstName, c.LastName, COUNT(dt.DepositTransactionID) as DepositTransactionCount, COUNT(DISTINCT d.DepositType) as DepositTypeCount, SUM(dt.Amount) as TotalDepositOperations, AVG(d.InterestRate) as AvgInterestRate, GROUP_CONCAT(DISTINCT d.DepositType ORDER BY d.DepositType) as DepositTypes FROM Customers c JOIN Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен' LEFT JOIN DepositTransactions dt ON d.DepositID = dt.DepositID WHERE dt.Status = 'Завершено' GROUP BY c.CustomerID, c.FirstName, c.LastName HAVING DepositTransactionCount > 3 AND DepositTypeCount > 1) SELECT FirstName, LastName, DepositTransactionCount, DepositTypeCount, TotalDepositOperations, AvgInterestRate, DepositTypes FROM DepositActivity ORDER BY DepositTransactionCount DESC LIMIT 18;",
            "google/gemini-2.0-flash-001_response": "WITH CustomerDepositTransactions AS (\n    SELECT\n        c.CustomerID,\n        c.FirstName,\n        c.LastName,\n        COUNT(dt.DepositTransactionID) AS TotalDepositTransactions,\n        COUNT(DISTINCT d.DepositType) AS TotalDepositTypes,\n        SUM(dt.Amount) AS TotalDepositAmount,\n        AVG(d.InterestRate) AS AverageInterestRate,\n        GROUP_CONCAT(DISTINCT d.DepositType) AS DepositTypes\n    FROM Customers c\n    JOIN Deposits d ON c.CustomerID = d.CustomerID\n    JOIN DepositTransactions dt ON d.DepositID = dt.DepositID\n    GROUP BY c.CustomerID, c.FirstName, c.LastName\n    HAVING COUNT(dt.DepositTransactionID) > 3 AND COUNT(DISTINCT d.DepositType) > 1\n)\nSELECT\n    cd.FirstName,\n    cd.LastName,\n    cd.TotalDepositTransactions,\n    cd.TotalDepositTypes,\n    cd.TotalDepositAmount,\n    cd.AverageInterestRate,\n    cd.DepositTypes\nFROM CustomerDepositTransactions cd\nORDER BY cd.TotalDepositTransactions DESC\nLIMIT 18;",
            "google/gemini-2.0-flash-001_response_ru": "WITH CustomerDepositInfo AS (\n    SELECT\n        c.CustomerID,\n        c.FirstName,\n        c.LastName,\n        COUNT(DISTINCT dt.DepositTransactionID) AS TotalDepositTransactions,\n        COUNT(DISTINCT d.DepositType) AS TotalDepositTypes,\n        SUM(dt.Amount) AS TotalDepositAmount,\n        AVG(d.InterestRate) AS AverageInterestRate,\n        GROUP_CONCAT(DISTINCT d.DepositType) AS DepositTypes\n    FROM Customers c\n    JOIN Deposits d ON c.CustomerID = d.CustomerID\n    JOIN DepositTransactions dt ON d.DepositID = dt.DepositID\n    GROUP BY c.CustomerID, c.FirstName, c.LastName\n    HAVING COUNT(DISTINCT dt.DepositTransactionID) > 3\n)\nSELECT\n    cdi.FirstName,\n    cdi.LastName,\n    cdi.TotalDepositTransactions,\n    cdi.TotalDepositTypes,\n    cdi.TotalDepositAmount,\n    cdi.AverageInterestRate,\n    cdi.DepositTypes\nFROM CustomerDepositInfo cdi\nWHERE cdi.TotalDepositTypes > 1\nORDER BY cdi.TotalDepositTransactions DESC\nLIMIT 18;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH ActiveDepositCustomers AS (\n  SELECT c.CustomerID, c.FirstName, c.LastName, \n         COUNT(dt.DepositTransactionID) as TotalDepositTransactions,\n         COUNT(DISTINCT d.DepositType) as TotalDepositTypes,\n         SUM(dt.Amount) as TotalDepositAmount,\n         AVG(d.InterestRate) as AverageInterestRate\n  FROM Customers c\n  JOIN Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\n  JOIN DepositTransactions dt ON d.DepositID = dt.DepositID AND dt.Status = 'Завершено'\n  GROUP BY c.CustomerID, c.FirstName, c.LastName\n  HAVING COUNT(dt.DepositTransactionID) > 3 AND COUNT(DISTINCT d.DepositType) > 1\n),\nDepositTypes AS (\n  SELECT c.CustomerID, STRING_AGG(DISTINCT d.DepositType, ', ') as DepositTypeList\n  FROM Customers c\n  JOIN Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\n  GROUP BY c.CustomerID\n)\nSELECT adc.FirstName, adc.LastName, \n       adc.TotalDepositTransactions, \n       adc.TotalDepositTypes, \n       adc.TotalDepositAmount, \n       adc.AverageInterestRate, \n       dt.DepositTypeList\nFROM ActiveDepositCustomers adc\nJOIN DepositTypes dt ON adc.CustomerID = dt.CustomerID\nORDER BY adc.TotalDepositTransactions DESC\nLIMIT 18;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH ActiveDeposits AS (\n  SELECT d.CustomerID, d.DepositID, d.DepositType, dt.TransactionDate, dt.Amount, dt.TransactionType\n  FROM Deposits d\n  JOIN DepositTransactions dt ON d.DepositID = dt.DepositID\n  WHERE d.Status = 'Активен' AND dt.Status = 'Завершено'\n),\nCustomerDepositInfo AS (\n  SELECT \n    c.CustomerID, \n    c.FirstName, \n    c.LastName, \n    COUNT(dt.DepositTransactionID) AS TotalDepositTransactions,\n    COUNT(DISTINCT d.DepositType) AS TotalDepositTypes,\n    SUM(dt.Amount) AS TotalDepositAmount,\n    AVG(d.InterestRate) AS AverageInterestRate,\n    STRING_AGG(DISTINCT d.DepositType, ', ') AS DepositTypes\n  FROM Customers c\n  JOIN ActiveDeposits d ON c.CustomerID = d.CustomerID\n  JOIN DepositTransactions dt ON d.DepositID = dt.DepositID\n  GROUP BY c.CustomerID, c.FirstName, c.LastName\n  HAVING COUNT(dt.DepositTransactionID) > 3 AND COUNT(DISTINCT d.DepositType) > 1\n)\nSELECT \n  FirstName, \n  LastName, \n  TotalDepositTransactions, \n  TotalDepositTypes, \n  TotalDepositAmount, \n  AverageInterestRate, \n  DepositTypes\nFROM CustomerDepositInfo\nORDER BY TotalDepositTransactions DESC\nLIMIT 18;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH DepositStats AS (\n    SELECT \n        c.CustomerID,\n        c.FirstName,\n        c.LastName,\n        COUNT(DISTINCT dt.DepositTransactionID) AS TransactionCount,\n        COUNT(DISTINCT d.DepositType) AS DepositTypeCount,\n        SUM(dt.Amount) AS TotalDepositAmount,\n        AVG(d.InterestRate) AS AvgInterestRate,\n        STRING_AGG(DISTINCT d.DepositType, ', ') AS DepositTypes\n    FROM \n        Customers c\n    JOIN \n        Deposits d ON c.CustomerID = d.CustomerID\n    JOIN \n        DepositTransactions dt ON d.DepositID = dt.DepositID\n    WHERE \n        dt.Status = 'Завершено'\n    GROUP BY \n        c.CustomerID, c.FirstName, c.LastName\n    HAVING \n        COUNT(DISTINCT dt.DepositTransactionID) > 3 \n        AND COUNT(DISTINCT d.DepositType) > 1\n)\nSELECT \n    FirstName || ' ' || LastName AS CustomerName,\n    TransactionCount,\n    DepositTypeCount,\n    TotalDepositAmount,\n    AvgInterestRate,\n    DepositTypes\nFROM \n    DepositStats\nORDER BY \n    TransactionCount DESC\nLIMIT 18;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    c.FirstName || ' ' || c.LastName AS CustomerName,\n    COUNT(dt.DepositTransactionID) AS TransactionCount,\n    COUNT(DISTINCT d.DepositType) AS DepositTypeCount,\n    SUM(dt.Amount) AS TotalDepositAmount,\n    AVG(d.InterestRate) AS AvgInterestRate,\n    STRING_AGG(DISTINCT d.DepositType, ', ') AS DepositTypes\nFROM \n    Customers c\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID\nJOIN \n    DepositTransactions dt ON d.DepositID = dt.DepositID\nGROUP BY \n    c.CustomerID, c.FirstName, c.LastName\nHAVING \n    COUNT(dt.DepositTransactionID) > 3 AND \n    COUNT(DISTINCT d.DepositType) > 1\nORDER BY \n    TransactionCount DESC\nLIMIT 18;",
            "gigachat_response": "WITH DepositActivity AS (\n    SELECT \n        dt.DepositID,\n        d.CustomerID,\n        COUNT(dt.DepositTransactionID) AS NumTransactions,\n        COUNT(DISTINCT d.DepositType) AS NumDepositTypes,\n        SUM(dt.Amount) AS TotalDepositAmount,\n        AVG(d.InterestRate) AS AvgInterestRate,\n        STRING_AGG(d.DepositType, ', ') WITHIN GROUP (ORDER BY d.DepositType) AS DepositTypesList\n    FROM \n        DepositTransactions dt\n    INNER JOIN \n        Deposits d ON dt.DepositID = d.DepositID\n    GROUP BY \n        dt.DepositID, d.CustomerID\n), \nEligibleCustomers AS (\n    SELECT \n        da.CustomerID,\n        c.FirstName || ' ' || c.LastName AS FullName,\n        da.NumTransactions,\n        da.NumDepositTypes,\n        da.TotalDepositAmount,\n        ROUND(da.AvgInterestRate::numeric, 2) AS AvgInterestRate,\n        da.DepositTypesList\n    FROM \n        DepositActivity da\n    INNER JOIN \n        Customers c ON da.CustomerID = c.CustomerID\n    WHERE \n        da.NumTransactions > 3 AND da.NumDepositTypes > 1\n)\nSELECT * FROM EligibleCustomers ORDER BY NumTransactions DESC LIMIT 18;",
            "gigachat_response_ru": "SELECT \n    c.FirstName || ' ' || c.LastName AS FullName,\n    COUNT(dt.DepositTransactionID) AS NumDepositTransactions,\n    COUNT(DISTINCT d.DepositType) AS NumDepositTypes,\n    SUM(dt.Amount) AS TotalDepositAmount,\n    ROUND(AVG(d.InterestRate), 2) AS AvgInterestRate,\n    STRING_AGG(DISTINCT d.DepositType, ', ') AS DepositTypesList\nFROM \n    Customers c\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID\nJOIN \n    DepositTransactions dt ON d.DepositID = dt.DepositID\nGROUP BY \n    c.FirstName, c.LastName\nHAVING \n    COUNT(dt.DepositTransactionID) > 3 \nAND \n    COUNT(DISTINCT d.DepositType) > 1\nORDER BY \n    NumDepositTransactions DESC\nLIMIT 18;",
            "gpt-4o_response": "SELECT \n    c.FirstName, \n    c.LastName, \n    COUNT(dt.DepositTransactionID) AS TotalDepositTransactions, \n    COUNT(DISTINCT d.DepositType) AS DepositTypeCount, \n    SUM(dt.Amount) AS TotalDepositAmount, \n    AVG(d.InterestRate) AS AverageInterestRate, \n    GROUP_CONCAT(DISTINCT d.DepositType ORDER BY d.DepositType ASC) AS DepositTypes\nFROM \n    Customers c\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID\nJOIN \n    DepositTransactions dt ON d.DepositID = dt.DepositID\nWHERE \n    dt.Status = 'Завершено'\nGROUP BY \n    c.CustomerID, c.FirstName, c.LastName\nHAVING \n    COUNT(dt.DepositTransactionID) > 3 \n    AND COUNT(DISTINCT d.DepositType) > 1\nORDER BY \n    TotalDepositTransactions DESC\nLIMIT 18;",
            "gpt-4o_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    COUNT(dt.DepositTransactionID) AS TotalDepositTransactions, \n    COUNT(DISTINCT d.DepositType) AS DepositTypeCount, \n    SUM(dt.Amount) AS TotalDepositAmount, \n    AVG(d.InterestRate) AS AverageInterestRate, \n    STRING_AGG(DISTINCT d.DepositType, ', ') AS DepositTypes\nFROM \n    Customers c\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID\nJOIN \n    DepositTransactions dt ON d.DepositID = dt.DepositID\nWHERE \n    dt.Status = 'Завершено'\nGROUP BY \n    c.CustomerID, c.FirstName, c.LastName\nHAVING \n    COUNT(dt.DepositTransactionID) > 3 \n    AND COUNT(DISTINCT d.DepositType) > 1\nORDER BY \n    TotalDepositTransactions DESC\nLIMIT 18;"
        },
        {
            "question": "Вывести анализ эффективности кредитных продуктов по типам: для каждого типа кредита показать количество активных кредитов, среднюю сумму кредита, среднюю процентную ставку, общую сумму выданных кредитов, процент кредитов с регулярными платежами и средний срок кредитования в годах. Результат отсортировать по общей сумме выданных кредитов по убыванию и ограничить 7 записями.",
            "sql_query": "WITH LoanStats AS (SELECT l.LoanType, COUNT(l.LoanID) as ActiveLoans, AVG(l.PrincipalAmount) as AvgLoanAmount, AVG(l.InterestRate) as AvgInterestRate, SUM(l.PrincipalAmount) as TotalLoanAmount, COUNT(CASE WHEN lp.LoanID IS NOT NULL THEN 1 END) as LoansWithPayments, AVG(DATEDIFF(l.EndDate, l.StartDate) / 365.0) as AvgLoanTermYears FROM Loans l LEFT JOIN (SELECT DISTINCT LoanID FROM LoanPayments WHERE Status = 'Завершено') lp ON l.LoanID = lp.LoanID WHERE l.Status = 'Активно' GROUP BY l.LoanType) SELECT LoanType, ActiveLoans, AvgLoanAmount, AvgInterestRate, TotalLoanAmount, (LoansWithPayments * 100.0 / ActiveLoans) as PaymentPercent, AvgLoanTermYears FROM LoanStats ORDER BY TotalLoanAmount DESC LIMIT 7;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    l.LoanType,\n    COUNT(CASE WHEN l.Status = 'Активно' THEN 1 END) AS ActiveLoansCount,\n    AVG(l.PrincipalAmount) AS AverageLoanAmount,\n    AVG(l.InterestRate) AS AverageInterestRate,\n    SUM(l.PrincipalAmount) AS TotalLoanAmount,\n    CAST(SUM(CASE WHEN lp.PaymentID IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(l.LoanID) AS LoansWithPaymentsPercentage,\n    AVG(JULIANDAY(l.EndDate) - JULIANDAY(l.StartDate)) / 365.25 AS AverageLoanTermYears\nFROM\n    Loans l\nLEFT JOIN\n    LoanPayments lp ON l.LoanID = lp.LoanID\nGROUP BY\n    l.LoanType\nORDER BY\n    TotalLoanAmount DESC\nLIMIT 7;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    l.LoanType,\n    COUNT(CASE WHEN l.Status = 'Активно' THEN 1 END) AS ActiveLoansCount,\n    AVG(l.PrincipalAmount) AS AverageLoanAmount,\n    AVG(l.InterestRate) AS AverageInterestRate,\n    SUM(l.PrincipalAmount) AS TotalLoanAmount,\n    (SUM(CASE WHEN lp.PaymentID IS NOT NULL THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS LoansWithPaymentsPercentage,\n    AVG(JULIANDAY(l.EndDate) - JULIANDAY(l.StartDate)) / 365.25 AS AverageLoanTermYears\nFROM\n    Loans l\nLEFT JOIN\n    LoanPayments lp ON l.LoanID = lp.LoanID\nGROUP BY\n    l.LoanType\nORDER BY\n    TotalLoanAmount DESC\nLIMIT 7;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    l.LoanType, \n    COUNT(l.LoanID) AS ActiveLoans, \n    AVG(l.PrincipalAmount) AS AverageLoanAmount, \n    AVG(l.InterestRate) AS AverageInterestRate, \n    SUM(l.PrincipalAmount) AS TotalLoanAmount, \n    (COUNT(CASE WHEN lp.PaymentID IS NOT NULL THEN 1 END) * 1.0 / COUNT(l.LoanID)) * 100 AS RegularPaymentPercentage, \n    AVG(DATEDIFF(l.EndDate, l.StartDate) / 365.0) AS AverageLoanTermInYears\nFROM \n    Loans l \n    LEFT JOIN LoanPayments lp ON l.LoanID = lp.LoanID AND lp.Status = 'Завершено'\nWHERE \n    l.Status = 'Активно'\nGROUP BY \n    l.LoanType\nORDER BY \n    TotalLoanAmount DESC\nLIMIT 7;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n  l.LoanType, \n  COUNT(CASE WHEN l.Status = 'Активно' THEN 1 END) AS ActiveLoans,\n  AVG(l.PrincipalAmount) AS AverageLoanAmount,\n  AVG(l.InterestRate) AS AverageInterestRate,\n  SUM(l.PrincipalAmount) AS TotalLoanAmount,\n  (COUNT(CASE WHEN lp.Status = 'Завершено' THEN 1 END) * 1.0 / COUNT(l.LoanID)) * 100 AS RegularPaymentPercentage,\n  AVG(DATEDIFF(l.EndDate, l.StartDate) / 365) AS AverageLoanTermInYears\nFROM \n  Loans l\n  LEFT JOIN LoanPayments lp ON l.LoanID = lp.LoanID\nGROUP BY \n  l.LoanType\nORDER BY \n  TotalLoanAmount DESC\nLIMIT 7;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    l.LoanType,\n    COUNT(l.LoanID) AS ActiveLoansCount,\n    AVG(l.PrincipalAmount) AS AverageLoanAmount,\n    AVG(l.InterestRate) AS AverageInterestRate,\n    SUM(l.PrincipalAmount) AS TotalLoanAmount,\n    (COUNT(DISTINCT lp.LoanID) * 100.0 / COUNT(l.LoanID)) AS RegularPaymentsPercentage,\n    AVG(JULIANDAY(l.EndDate) - JULIANDAY(l.StartDate)) / 365 AS AverageLoanTermYears\nFROM \n    Loans l\nLEFT JOIN \n    LoanPayments lp ON l.LoanID = lp.LoanID AND lp.Status = 'Завершено'\nWHERE \n    l.Status = 'Активно'\nGROUP BY \n    l.LoanType\nORDER BY \n    TotalLoanAmount DESC\nLIMIT 7;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    l.LoanType,\n    COUNT(l.LoanID) AS ActiveLoansCount,\n    AVG(l.PrincipalAmount) AS AvgLoanAmount,\n    AVG(l.InterestRate) AS AvgInterestRate,\n    SUM(l.PrincipalAmount) AS TotalLoansAmount,\n    (COUNT(DISTINCT lp.LoanID) * 100.0 / COUNT(l.LoanID)) AS RegularPaymentsPercentage,\n    AVG(DATEDIFF(YEAR, l.StartDate, l.EndDate)) AS AvgLoanTermYears\nFROM \n    Loans l\nLEFT JOIN \n    LoanPayments lp ON l.LoanID = lp.LoanID AND lp.Status = 'Завершено'\nWHERE \n    l.Status = 'Активно'\nGROUP BY \n    l.LoanType\nORDER BY \n    TotalLoansAmount DESC\nLIMIT 7;",
            "gigachat_response": "SELECT \n    LoanType,\n    COUNT(*) AS NumberOfActiveLoans,\n    AVG(PrincipalAmount) AS AverageLoanAmount,\n    AVG(InterestRate) AS AverageInterestRate,\n    SUM(PrincipalAmount) AS TotalDisbursedAmount,\n    ROUND(AVG(DATEDIFF(day, StartDate, EndDate)/365), 2) AS AverageTermInYears,\n    CAST(SUM(CASE WHEN lp.PaymentID IS NOT NULL THEN 1 ELSE 0 END)*100/COUNT(*) AS DECIMAL(5,2)) AS PercentageWithRegularPayments\nFROM Loans l\nLEFT JOIN LoanPayments lp ON l.LoanID = lp.LoanID\nWHERE l.Status = 'Активно'\nGROUP BY LoanType\nORDER BY TotalDisbursedAmount DESC\nLIMIT 7;",
            "gigachat_response_ru": "SELECT \n    LoanType,\n    COUNT(*) AS NumberOfActiveLoans,\n    AVG(PrincipalAmount) AS AverageLoanAmount,\n    AVG(InterestRate) AS AverageInterestRate,\n    SUM(PrincipalAmount) AS TotalDisbursedAmount,\n    ROUND(AVG(DATEDIFF(day, StartDate, EndDate)/365), 2) AS AverageTermInYears,\n    CAST(SUM(CASE WHEN lp.PaymentID IS NOT NULL THEN 1 ELSE 0 END)*100/COUNT(*) AS DECIMAL(5,2)) AS PercentageWithRegularPayments\nFROM Loans l\nLEFT JOIN LoanPayments lp ON l.LoanID = lp.LoanID\nWHERE l.Status = 'Активно'\nGROUP BY LoanType\nORDER BY TotalDisbursedAmount DESC\nLIMIT 7;",
            "gpt-4o_response": "SELECT \n    l.LoanType,\n    COUNT(l.LoanID) AS ActiveLoansCount,\n    AVG(l.PrincipalAmount) AS AverageLoanAmount,\n    AVG(l.InterestRate) AS AverageInterestRate,\n    SUM(l.PrincipalAmount) AS TotalLoanAmount,\n    (COUNT(lp.PaymentID) * 100.0 / COUNT(l.LoanID)) AS RegularPaymentPercentage,\n    AVG(DATEDIFF(l.EndDate, l.StartDate) / 365.0) AS AverageLoanTermYears\nFROM \n    Loans l\nLEFT JOIN \n    LoanPayments lp ON l.LoanID = lp.LoanID AND lp.Status = 'Завершено'\nWHERE \n    l.Status = 'Активно'\nGROUP BY \n    l.LoanType\nORDER BY \n    TotalLoanAmount DESC\nLIMIT 7;",
            "gpt-4o_response_ru": "SELECT \n    l.LoanType,\n    COUNT(l.LoanID) AS ActiveLoansCount,\n    AVG(l.PrincipalAmount) AS AverageLoanAmount,\n    AVG(l.InterestRate) AS AverageInterestRate,\n    SUM(l.PrincipalAmount) AS TotalLoanAmount,\n    (COUNT(lp.PaymentID) * 100.0 / COUNT(l.LoanID)) AS RegularPaymentPercentage,\n    AVG(DATEDIFF(l.EndDate, l.StartDate) / 365.0) AS AverageLoanTermYears\nFROM \n    Loans l\nLEFT JOIN \n    LoanPayments lp ON l.LoanID = lp.LoanID AND lp.Status = 'Завершено'\nWHERE \n    l.Status = 'Активно'\nGROUP BY \n    l.LoanType\nORDER BY \n    TotalLoanAmount DESC\nLIMIT 7;"
        },
        {
            "question": "Найти топ-19 клиентов с максимальным количеством различных банковских взаимодействий: клиенты, у которых есть транзакции по счетам, операции по кредитным картам, депозитные операции и обращения по страховым случаям. Показать для каждого клиента число каждого вида взаимодействия и общий индекс активности. Индекс рассчитывается как сумма всех операций.",
            "sql_query": "WITH CustomerActivity AS (SELECT c.CustomerID, c.FirstName, c.LastName, COUNT(DISTINCT t.TransactionID) as AccountTransactions, COUNT(DISTINCT ct.CardTransactionID) as CardTransactions, COUNT(DISTINCT dt.DepositTransactionID) as DepositTransactions, COUNT(DISTINCT pc.ClaimID) as InsuranceClaims FROM Customers c LEFT JOIN Accounts a ON c.CustomerID = a.CustomerID LEFT JOIN Transactions t ON a.AccountID = t.AccountID AND t.Status = 'Завершено' LEFT JOIN CreditCards cc ON c.CustomerID = cc.CustomerID LEFT JOIN CardTransactions ct ON cc.CardID = ct.CardID AND ct.Status = 'Завершена' LEFT JOIN Deposits d ON c.CustomerID = d.CustomerID LEFT JOIN DepositTransactions dt ON d.DepositID = dt.DepositID AND dt.Status = 'Завершено' LEFT JOIN InsurancePolicies ip ON c.CustomerID = ip.CustomerID LEFT JOIN PolicyClaims pc ON ip.PolicyID = pc.PolicyID GROUP BY c.CustomerID, c.FirstName, c.LastName HAVING AccountTransactions > 0 AND CardTransactions > 0 AND DepositTransactions > 0 AND InsuranceClaims > 0) SELECT FirstName, LastName, AccountTransactions, CardTransactions, DepositTransactions, InsuranceClaims, (AccountTransactions + CardTransactions + DepositTransactions + InsuranceClaims) as ActivityIndex FROM CustomerActivity ORDER BY ActivityIndex DESC LIMIT 19;",
            "google/gemini-2.0-flash-001_response": "WITH CustomerInteractions AS (\n    SELECT\n        c.CustomerID,\n        c.FirstName,\n        c.LastName,\n        COUNT(DISTINCT t.TransactionID) AS TransactionCount,\n        COUNT(DISTINCT ct.CardTransactionID) AS CardTransactionCount,\n        COUNT(DISTINCT dt.DepositTransactionID) AS DepositTransactionCount,\n        COUNT(DISTINCT pc.ClaimID) AS ClaimCount\n    FROM\n        Customers c\n    LEFT JOIN\n        Accounts a ON c.CustomerID = a.CustomerID\n    LEFT JOIN\n        Transactions t ON a.AccountID = t.AccountID\n    LEFT JOIN\n        CreditCards cc ON c.CustomerID = cc.CustomerID\n    LEFT JOIN\n        CardTransactions ct ON cc.CardID = ct.CardID\n    LEFT JOIN\n        Deposits d ON c.CustomerID = d.CustomerID\n    LEFT JOIN\n        DepositTransactions dt ON d.DepositID = dt.DepositID\n    LEFT JOIN\n        InsurancePolicies ip ON c.CustomerID = ip.CustomerID\n    LEFT JOIN\n        PolicyClaims pc ON ip.PolicyID = pc.PolicyID\n    GROUP BY\n        c.CustomerID, c.FirstName, c.LastName\n)\nSELECT\n    ci.FirstName,\n    ci.LastName,\n    ci.TransactionCount,\n    ci.CardTransactionCount,\n    ci.DepositTransactionCount,\n    ci.ClaimCount,\n    (ci.TransactionCount + ci.CardTransactionCount + ci.DepositTransactionCount + ci.ClaimCount) AS TotalInteractionIndex\nFROM\n    CustomerInteractions ci\nORDER BY\n    TotalInteractionIndex DESC\nLIMIT 19;",
            "google/gemini-2.0-flash-001_response_ru": "WITH CustomerActivity AS (\n    SELECT\n        c.CustomerID,\n        c.FirstName,\n        c.LastName,\n        COUNT(DISTINCT t.TransactionID) AS TransactionCount,\n        COUNT(DISTINCT ct.CardTransactionID) AS CardTransactionCount,\n        COUNT(DISTINCT dt.DepositTransactionID) AS DepositTransactionCount,\n        COUNT(DISTINCT pc.ClaimID) AS ClaimCount,\n        SUM(t.Amount) + SUM(ct.Amount) + SUM(dt.Amount) + SUM(pc.ClaimAmount) AS TotalActivityAmount\n    FROM Customers c\n    LEFT JOIN Accounts a ON c.CustomerID = a.CustomerID\n    LEFT JOIN Transactions t ON a.AccountID = t.AccountID\n    LEFT JOIN CreditCards cc ON c.CustomerID = cc.CustomerID\n    LEFT JOIN CardTransactions ct ON cc.CardID = ct.CardID\n    LEFT JOIN Deposits d ON c.CustomerID = d.CustomerID\n    LEFT JOIN DepositTransactions dt ON d.DepositID = dt.DepositID\n    LEFT JOIN InsurancePolicies ip ON c.CustomerID = ip.CustomerID\n    LEFT JOIN PolicyClaims pc ON ip.PolicyID = pc.PolicyID\n    GROUP BY c.CustomerID, c.FirstName, c.LastName\n),\nRankedCustomers AS (\n    SELECT\n        CustomerID,\n        FirstName,\n        LastName,\n        TransactionCount,\n        CardTransactionCount,\n        DepositTransactionCount,\n        ClaimCount,\n        TotalActivityAmount,\n        ROW_NUMBER() OVER (ORDER BY TotalActivityAmount DESC) AS ActivityRank\n    FROM CustomerActivity\n)\nSELECT\n    CustomerID,\n    FirstName,\n    LastName,\n    TransactionCount,\n    CardTransactionCount,\n    DepositTransactionCount,\n    ClaimCount,\n    TotalActivityAmount\nFROM RankedCustomers\nWHERE ActivityRank <= 19\nORDER BY TotalActivityAmount DESC;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH CustomerInteractions AS (\n  SELECT \n    c.CustomerID, \n    c.FirstName, \n    c.LastName, \n    COUNT(DISTINCT t.TransactionID) AS AccountTransactions,\n    COUNT(DISTINCT ct.CardTransactionID) AS CardTransactions,\n    COUNT(DISTINCT dt.DepositTransactionID) AS DepositTransactions,\n    COUNT(DISTINCT pc.ClaimID) AS PolicyClaims\n  FROM \n    Customers c\n  LEFT JOIN \n    Accounts a ON c.CustomerID = a.CustomerID\n  LEFT JOIN \n    Transactions t ON a.AccountID = t.AccountID\n  LEFT JOIN \n    CreditCards cc ON c.CustomerID = cc.CustomerID\n  LEFT JOIN \n    CardTransactions ct ON cc.CardID = ct.CardID\n  LEFT JOIN \n    Deposits d ON c.CustomerID = d.CustomerID\n  LEFT JOIN \n    DepositTransactions dt ON d.DepositID = dt.DepositID\n  LEFT JOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\n  LEFT JOIN \n    PolicyClaims pc ON ip.PolicyID = pc.PolicyID\n  GROUP BY \n    c.CustomerID, \n    c.FirstName, \n    c.LastName\n),\nCustomerActivityIndex AS (\n  SELECT \n    CustomerID, \n    FirstName, \n    LastName, \n    AccountTransactions, \n    CardTransactions, \n    DepositTransactions, \n    PolicyClaims,\n    (AccountTransactions + CardTransactions + DepositTransactions + PolicyClaims) AS ActivityIndex\n  FROM \n    CustomerInteractions\n)\nSELECT \n  FirstName, \n  LastName, \n  AccountTransactions, \n  CardTransactions, \n  DepositTransactions, \n  PolicyClaims, \n  ActivityIndex\nFROM \n  CustomerActivityIndex\nORDER BY \n  ActivityIndex DESC\nLIMIT 19;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH CustomerActivity AS (\n  SELECT \n    c.CustomerID,\n    c.FirstName,\n    c.LastName,\n    COUNT(DISTINCT t.TransactionID) AS TransactionCount,\n    COUNT(DISTINCT ct.CardTransactionID) AS CardTransactionCount,\n    COUNT(DISTINCT dt.DepositTransactionID) AS DepositTransactionCount,\n    COUNT(DISTINCT pc.ClaimID) AS PolicyClaimCount\n  FROM \n    Customers c\n  LEFT JOIN \n    Accounts a ON c.CustomerID = a.CustomerID\n  LEFT JOIN \n    Transactions t ON a.AccountID = t.AccountID\n  LEFT JOIN \n    CreditCards cc ON c.CustomerID = cc.CustomerID\n  LEFT JOIN \n    CardTransactions ct ON cc.CardID = ct.CardID\n  LEFT JOIN \n    Deposits d ON c.CustomerID = d.CustomerID\n  LEFT JOIN \n    DepositTransactions dt ON d.DepositID = dt.DepositID\n  LEFT JOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\n  LEFT JOIN \n    PolicyClaims pc ON ip.PolicyID = pc.PolicyID\n  GROUP BY \n    c.CustomerID, c.FirstName, c.LastName\n),\nActivityIndex AS (\n  SELECT \n    CustomerID,\n    FirstName,\n    LastName,\n    TransactionCount,\n    CardTransactionCount,\n    DepositTransactionCount,\n    PolicyClaimCount,\n    (TransactionCount + CardTransactionCount + DepositTransactionCount + PolicyClaimCount) AS ActivityIndex\n  FROM \n    CustomerActivity\n)\nSELECT \n  FirstName,\n  LastName,\n  TransactionCount,\n  CardTransactionCount,\n  DepositTransactionCount,\n  PolicyClaimCount,\n  ActivityIndex\nFROM \n  ActivityIndex\nORDER BY \n  ActivityIndex DESC\nLIMIT 19;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH CustomerInteractions AS (\n    SELECT \n        c.CustomerID,\n        c.FirstName,\n        c.LastName,\n        (SELECT COUNT(*) FROM Transactions t JOIN Accounts a ON t.AccountID = a.AccountID WHERE a.CustomerID = c.CustomerID) AS AccountTransactions,\n        (SELECT COUNT(*) FROM CardTransactions ct JOIN CreditCards cc ON ct.CardID = cc.CardID WHERE cc.CustomerID = c.CustomerID) AS CardTransactions,\n        (SELECT COUNT(*) FROM DepositTransactions dt JOIN Deposits d ON dt.DepositID = d.DepositID WHERE d.CustomerID = c.CustomerID) AS DepositTransactions,\n        (SELECT COUNT(*) FROM PolicyClaims pc JOIN InsurancePolicies ip ON pc.PolicyID = ip.PolicyID WHERE ip.CustomerID = c.CustomerID) AS PolicyClaims\n    FROM \n        Customers c\n)\nSELECT \n    CustomerID,\n    FirstName,\n    LastName,\n    AccountTransactions,\n    CardTransactions,\n    DepositTransactions,\n    PolicyClaims,\n    (AccountTransactions + CardTransactions + DepositTransactions + PolicyClaims) AS TotalActivityIndex\nFROM \n    CustomerInteractions\nWHERE \n    AccountTransactions > 0 \n    AND CardTransactions > 0 \n    AND DepositTransactions > 0 \n    AND PolicyClaims > 0\nORDER BY \n    TotalActivityIndex DESC\nLIMIT 19;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "WITH CustomerActivities AS (\n    SELECT \n        c.CustomerID,\n        c.FirstName,\n        c.LastName,\n        COUNT(DISTINCT t.TransactionID) AS AccountTransactions,\n        COUNT(DISTINCT ct.CardTransactionID) AS CardTransactions,\n        COUNT(DISTINCT dt.DepositTransactionID) AS DepositTransactions,\n        COUNT(DISTINCT pc.ClaimID) AS InsuranceClaims,\n        COUNT(DISTINCT t.TransactionID) + \n        COUNT(DISTINCT ct.CardTransactionID) + \n        COUNT(DISTINCT dt.DepositTransactionID) + \n        COUNT(DISTINCT pc.ClaimID) AS TotalActivityIndex\n    FROM \n        Customers c\n    LEFT JOIN \n        Accounts a ON c.CustomerID = a.CustomerID\n    LEFT JOIN \n        Transactions t ON a.AccountID = t.AccountID\n    LEFT JOIN \n        CreditCards cc ON c.CustomerID = cc.CustomerID\n    LEFT JOIN \n        CardTransactions ct ON cc.CardID = ct.CardID\n    LEFT JOIN \n        Deposits d ON c.CustomerID = d.CustomerID\n    LEFT JOIN \n        DepositTransactions dt ON d.DepositID = dt.DepositID\n    LEFT JOIN \n        InsurancePolicies ip ON c.CustomerID = ip.CustomerID\n    LEFT JOIN \n        PolicyClaims pc ON ip.PolicyID = pc.PolicyID\n    GROUP BY \n        c.CustomerID, c.FirstName, c.LastName\n)\nSELECT \n    FirstName,\n    LastName,\n    AccountTransactions,\n    CardTransactions,\n    DepositTransactions,\n    InsuranceClaims,\n    TotalActivityIndex\nFROM \n    CustomerActivities\nORDER BY \n    TotalActivityIndex DESC\nLIMIT 19;",
            "gigachat_response": "WITH ClientActivity AS (\n    SELECT \n        c.CustomerID,\n        c.FirstName || ' ' || c.MiddleName || ' ' || c.LastName AS FullName,\n        COALESCE((SELECT COUNT(DISTINCT t.TransactionID) FROM Transactions t WHERE t.AccountID IN (SELECT AccountID FROM Accounts ac WHERE ac.CustomerID = c.CustomerID)), 0) AS AccountTransactionsCount,\n        COALESCE((SELECT COUNT(DISTINCT ct.CardTransactionID) FROM CardTransactions ct INNER JOIN CreditCards cr ON ct.CardID = cr.CardID WHERE cr.CustomerID = c.CustomerID), 0) AS CardTransactionsCount,\n        COALESCE((SELECT COUNT(DISTINCT dt.DepositTransactionID) FROM DepositTransactions dt INNER JOIN Deposits dp ON dt.DepositID = dp.DepositID WHERE dp.CustomerID = c.CustomerID), 0) AS DepositTransactionsCount,\n        COALESCE((SELECT COUNT(DISTINCT pc.ClaimID) FROM PolicyClaims pc INNER JOIN InsurancePolicies ip ON pc.PolicyID = ip.PolicyID WHERE ip.CustomerID = c.CustomerID), 0) AS ClaimsCount\n    FROM Customers c\n)\nSELECT \n    FullName,\n    AccountTransactionsCount,\n    CardTransactionsCount,\n    DepositTransactionsCount,\n    ClaimsCount,\n    (AccountTransactionsCount + CardTransactionsCount + DepositTransactionsCount + ClaimsCount) AS ActivityIndex\nFROM ClientActivity\nORDER BY ActivityIndex DESC\nLIMIT 19;",
            "gigachat_response_ru": "WITH ActivityIndex AS (\n    SELECT \n        c.CustomerID,\n        c.FirstName || ' ' || c.LastName AS FullName,\n        COALESCE(SUM(CASE WHEN t.TransactionType IS NOT NULL THEN 1 ELSE 0 END), 0) AS AccountTransactionsCount,\n        COALESCE(SUM(CASE WHEN ct.CardTransactionID IS NOT NULL THEN 1 ELSE 0 END), 0) AS CardTransactionsCount,\n        COALESCE(SUM(CASE WHEN dt.DepositTransactionID IS NOT NULL THEN 1 ELSE 0 END), 0) AS DepositTransactionsCount,\n        COALESCE(SUM(CASE WHEN pc.ClaimID IS NOT NULL THEN 1 ELSE 0 END), 0) AS ClaimsCount,\n        COALESCE(SUM(CASE WHEN t.TransactionType IS NOT NULL THEN 1 ELSE 0 END), 0) +\n            COALESCE(SUM(CASE WHEN ct.CardTransactionID IS NOT NULL THEN 1 ELSE 0 END), 0) +\n            COALESCE(SUM(CASE WHEN dt.DepositTransactionID IS NOT NULL THEN 1 ELSE 0 END), 0) +\n            COALESCE(SUM(CASE WHEN pc.ClaimID IS NOT NULL THEN 1 ELSE 0 END), 0) AS TotalActivityIndex\n    FROM Customers c\n    LEFT JOIN Accounts a ON c.CustomerID = a.CustomerID\n    LEFT JOIN Transactions t ON a.AccountID = t.AccountID\n    LEFT JOIN CreditCards cc ON c.CustomerID = cc.CustomerID\n    LEFT JOIN CardTransactions ct ON cc.CardID = ct.CardID\n    LEFT JOIN Deposits d ON c.CustomerID = d.CustomerID\n    LEFT JOIN DepositTransactions dt ON d.DepositID = dt.DepositID\n    LEFT JOIN InsurancePolicies ip ON c.CustomerID = ip.CustomerID\n    LEFT JOIN PolicyClaims pc ON ip.PolicyID = pc.PolicyID\n    GROUP BY c.CustomerID, c.FirstName, c.LastName\n)\nSELECT *\nFROM ActivityIndex\nORDER BY TotalActivityIndex DESC\nLIMIT 19;",
            "gpt-4o_response": "WITH CustomerInteractions AS (\n    SELECT \n        c.CustomerID,\n        c.FirstName,\n        c.LastName,\n        COUNT(DISTINCT t.TransactionID) AS AccountTransactions,\n        COUNT(DISTINCT ct.CardTransactionID) AS CardTransactions,\n        COUNT(DISTINCT dt.DepositTransactionID) AS DepositTransactions,\n        COUNT(DISTINCT pc.ClaimID) AS PolicyClaims\n    FROM \n        Customers c\n    LEFT JOIN \n        Accounts a ON c.CustomerID = a.CustomerID\n    LEFT JOIN \n        Transactions t ON a.AccountID = t.AccountID\n    LEFT JOIN \n        CreditCards cc ON c.CustomerID = cc.CustomerID\n    LEFT JOIN \n        CardTransactions ct ON cc.CardID = ct.CardID\n    LEFT JOIN \n        Deposits d ON c.CustomerID = d.CustomerID\n    LEFT JOIN \n        DepositTransactions dt ON d.DepositID = dt.DepositID\n    LEFT JOIN \n        InsurancePolicies ip ON c.CustomerID = ip.CustomerID\n    LEFT JOIN \n        PolicyClaims pc ON ip.PolicyID = pc.PolicyID\n    GROUP BY \n        c.CustomerID, c.FirstName, c.LastName\n)\nSELECT \n    FirstName,\n    LastName,\n    AccountTransactions,\n    CardTransactions,\n    DepositTransactions,\n    PolicyClaims,\n    (AccountTransactions + CardTransactions + DepositTransactions + PolicyClaims) AS TotalInteractions\nFROM \n    CustomerInteractions\nORDER BY \n    TotalInteractions DESC\nLIMIT 19;",
            "gpt-4o_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    COALESCE(t.TransactionCount, 0) AS AccountTransactions,\n    COALESCE(ct.CardTransactionCount, 0) AS CardTransactions,\n    COALESCE(dt.DepositTransactionCount, 0) AS DepositTransactions,\n    COALESCE(pc.PolicyClaimCount, 0) AS PolicyClaims,\n    COALESCE(t.TransactionCount, 0) + COALESCE(ct.CardTransactionCount, 0) + COALESCE(dt.DepositTransactionCount, 0) + COALESCE(pc.PolicyClaimCount, 0) AS ActivityIndex\nFROM \n    Customers c\nLEFT JOIN \n    (SELECT \n        a.CustomerID, \n        COUNT(t.TransactionID) AS TransactionCount\n     FROM \n        Accounts a\n     JOIN \n        Transactions t ON a.AccountID = t.AccountID\n     GROUP BY \n        a.CustomerID) t ON c.CustomerID = t.CustomerID\nLEFT JOIN \n    (SELECT \n        cc.CustomerID, \n        COUNT(ct.CardTransactionID) AS CardTransactionCount\n     FROM \n        CreditCards cc\n     JOIN \n        CardTransactions ct ON cc.CardID = ct.CardID\n     GROUP BY \n        cc.CustomerID) ct ON c.CustomerID = ct.CustomerID\nLEFT JOIN \n    (SELECT \n        d.CustomerID, \n        COUNT(dt.DepositTransactionID) AS DepositTransactionCount\n     FROM \n        Deposits d\n     JOIN \n        DepositTransactions dt ON d.DepositID = dt.DepositID\n     GROUP BY \n        d.CustomerID) dt ON c.CustomerID = dt.CustomerID\nLEFT JOIN \n    (SELECT \n        ip.CustomerID, \n        COUNT(pc.ClaimID) AS PolicyClaimCount\n     FROM \n        InsurancePolicies ip\n     JOIN \n        PolicyClaims pc ON ip.PolicyID = pc.PolicyID\n     GROUP BY \n        ip.CustomerID) pc ON c.CustomerID = pc.CustomerID\nORDER BY \n    ActivityIndex DESC\nLIMIT 19;"
        },
        {
            "question": "Вывести анализ географического распределения клиентов по городам: для каждого города показать количество клиентов, количество отделений, среднюю сумму депозитов на клиента, среднюю сумму кредитов на клиента и коэффициент финансовой активности города. Коэффициент рассчитывается как отношение общей суммы депозитов к общей сумме кредитов. Результат отсортировать по количеству клиентов по убыванию и ограничить 20 записями.",
            "sql_query": "WITH CityStats AS (SELECT b.City, COUNT(DISTINCT c.CustomerID) as ClientCount, COUNT(DISTINCT b.BranchID) as BranchCount, SUM(d.Amount) as TotalDeposits, SUM(l.PrincipalAmount) as TotalLoans FROM Branches b LEFT JOIN Customers c ON b.BranchID = c.BranchID LEFT JOIN Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен' LEFT JOIN Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно' GROUP BY b.City HAVING ClientCount > 0) SELECT City, ClientCount, BranchCount, (TotalDeposits / ClientCount) as AvgDepositsPerClient, (TotalLoans / ClientCount) as AvgLoansPerClient, CASE WHEN TotalLoans > 0 THEN (TotalDeposits / TotalLoans) ELSE 0 END as FinancialActivityRatio FROM CityStats ORDER BY ClientCount DESC LIMIT 20;",
            "google/gemini-2.0-flash-001_response": "SELECT \n    b.City,\n    COUNT(DISTINCT c.CustomerID) AS CustomerCount,\n    COUNT(DISTINCT b.BranchID) AS BranchCount,\n    AVG(d.TotalDepositAmount) AS AverageDepositAmountPerCustomer,\n    AVG(l.TotalLoanAmount) AS AverageLoanAmountPerCustomer,\n    CASE \n        WHEN SUM(d.TotalDepositAmount) = 0 THEN 0\n        ELSE SUM(d.TotalDepositAmount) / SUM(l.TotalLoanAmount) \n    END AS FinancialActivityRatio\nFROM Branches b\nJOIN Customers c ON b.BranchID = c.BranchID\nLEFT JOIN (\n    SELECT \n        CustomerID,\n        SUM(Amount) AS TotalDepositAmount\n    FROM Deposits\n    GROUP BY CustomerID\n) d ON c.CustomerID = d.CustomerID\nLEFT JOIN (\n    SELECT \n        CustomerID,\n        SUM(PrincipalAmount) AS TotalLoanAmount\n    FROM Loans\n    GROUP BY CustomerID\n) l ON c.CustomerID = l.CustomerID\nGROUP BY b.City\nORDER BY CustomerCount DESC\nLIMIT 20;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    b.City,\n    COUNT(DISTINCT c.CustomerID) AS CustomerCount,\n    COUNT(DISTINCT b.BranchID) AS BranchCount,\n    AVG(d.TotalDepositAmount) AS AvgDepositAmountPerCustomer,\n    AVG(l.TotalLoanAmount) AS AvgLoanAmountPerCustomer,\n    CASE\n        WHEN SUM(d.TotalDepositAmount) = 0 THEN 0\n        ELSE SUM(d.TotalDepositAmount) / SUM(l.TotalLoanAmount)\n    END AS FinancialActivityRatio\nFROM\n    Branches b\nJOIN\n    Customers c ON b.BranchID = c.BranchID\nLEFT JOIN\n    (SELECT CustomerID, SUM(Amount) AS TotalDepositAmount FROM Deposits GROUP BY CustomerID) AS d\n    ON c.CustomerID = d.CustomerID\nLEFT JOIN\n    (SELECT CustomerID, SUM(PrincipalAmount) AS TotalLoanAmount FROM Loans GROUP BY CustomerID) AS l\n    ON c.CustomerID = l.CustomerID\nGROUP BY\n    b.City\nORDER BY\n    CustomerCount DESC\nLIMIT 20;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH CityData AS (\n  SELECT \n    c.City,\n    COUNT(DISTINCT c.CustomerID) AS TotalCustomers,\n    COUNT(DISTINCT b.BranchID) AS TotalBranches,\n    SUM(d.Amount) / COUNT(DISTINCT c.CustomerID) AS AvgDepositPerCustomer,\n    SUM(l.PrincipalAmount) / COUNT(DISTINCT c.CustomerID) AS AvgLoanPerCustomer,\n    SUM(d.Amount) / SUM(l.PrincipalAmount) AS FinancialActivityRatio\n  FROM \n    Customers c\n  JOIN \n    Branches b ON c.BranchID = b.BranchID\n  LEFT JOIN \n    Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\n  LEFT JOIN \n    Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\n  GROUP BY \n    c.City\n)\nSELECT \n  City,\n  TotalCustomers,\n  TotalBranches,\n  AvgDepositPerCustomer,\n  AvgLoanPerCustomer,\n  FinancialActivityRatio\nFROM \n  CityData\nORDER BY \n  TotalCustomers DESC\nLIMIT 20;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH CityCustomers AS (\n  SELECT \n    c.City, \n    COUNT(DISTINCT c.CustomerID) AS TotalCustomers,\n    SUM(d.Amount) AS TotalDeposits,\n    SUM(l.PrincipalAmount) AS TotalLoans\n  FROM \n    Customers c\n  LEFT JOIN \n    Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\n  LEFT JOIN \n    Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\n  GROUP BY \n    c.City\n),\nCityBranches AS (\n  SELECT \n    b.City, \n    COUNT(b.BranchID) AS TotalBranches\n  FROM \n    Branches b\n  GROUP BY \n    b.City\n)\nSELECT \n  cc.City, \n  cc.TotalCustomers, \n  cb.TotalBranches, \n  cc.TotalDeposits / cc.TotalCustomers AS AvgDepositPerCustomer,\n  cc.TotalLoans / cc.TotalCustomers AS AvgLoanPerCustomer,\n  cc.TotalDeposits / cc.TotalLoans AS FinancialActivityRatio\nFROM \n  CityCustomers cc\nJOIN \n  CityBranches cb ON cc.City = cb.City\nORDER BY \n  cc.TotalCustomers DESC\nLIMIT 20;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    b.City,\n    COUNT(DISTINCT c.CustomerID) AS CustomerCount,\n    COUNT(DISTINCT b.BranchID) AS BranchCount,\n    COALESCE(SUM(d.Amount) / NULLIF(COUNT(DISTINCT c.CustomerID), 0), 0) AS AvgDepositPerCustomer,\n    COALESCE(SUM(l.PrincipalAmount) / NULLIF(COUNT(DISTINCT c.CustomerID), 0), 0) AS AvgLoanPerCustomer,\n    CASE \n        WHEN SUM(l.PrincipalAmount) = 0 THEN NULL \n        ELSE COALESCE(SUM(d.Amount), 0) / NULLIF(SUM(l.PrincipalAmount), 0) \n    END AS FinancialActivityRatio\nFROM \n    Branches b\nLEFT JOIN \n    Customers c ON b.BranchID = c.BranchID\nLEFT JOIN \n    Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\nLEFT JOIN \n    Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\nGROUP BY \n    b.City\nORDER BY \n    CustomerCount DESC\nLIMIT 20;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    b.City,\n    COUNT(DISTINCT c.CustomerID) AS CustomerCount,\n    COUNT(DISTINCT b.BranchID) AS BranchCount,\n    COALESCE(SUM(d.Amount) / NULLIF(COUNT(DISTINCT d.CustomerID), 0), 0) AS AvgDepositPerCustomer,\n    COALESCE(SUM(l.PrincipalAmount) / NULLIF(COUNT(DISTINCT l.CustomerID), 0), 0) AS AvgLoanPerCustomer,\n    CASE \n        WHEN SUM(l.PrincipalAmount) = 0 THEN 0 \n        ELSE COALESCE(SUM(d.Amount), 0) / NULLIF(SUM(l.PrincipalAmount), 0) \n    END AS FinancialActivityRatio\nFROM \n    Branches b\nLEFT JOIN \n    Customers c ON b.BranchID = c.BranchID\nLEFT JOIN \n    Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\nLEFT JOIN \n    Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\nGROUP BY \n    b.City\nORDER BY \n    CustomerCount DESC\nLIMIT 20;",
            "gigachat_response": "SELECT \n    b.City,\n    COUNT(DISTINCT c.CustomerID) AS NumberOfClients,\n    COUNT(DISTINCT br.BranchID) AS NumberOfBranches,\n    COALESCE(AVG(d.Amount), 0) AS AverageDepositPerClient,\n    COALESCE(AVG(l.PrincipalAmount), 0) AS AverageLoanPerClient,\n    CASE \n        WHEN SUM(d.Amount) <> 0 AND SUM(l.PrincipalAmount) <> 0 THEN SUM(d.Amount)/SUM(l.PrincipalAmount)\n        ELSE 0\n    END AS FinancialActivityCoefficient\nFROM \n    Branches b\nLEFT JOIN \n    Customers c ON b.City = c.City\nLEFT JOIN \n    Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\nLEFT JOIN \n    Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\nGROUP BY \n    b.City\nORDER BY \n    NumberOfClients DESC\nLIMIT 20;",
            "gigachat_response_ru": "SELECT \n    b.City,\n    COUNT(DISTINCT cu.CustomerID) AS NumberOfClients,\n    COUNT(DISTINCT br.BranchID) AS NumberOfBranches,\n    COALESCE(AVG(de.Amount), 0) AS AverageDepositPerClient,\n    COALESCE(AVG(lo.PrincipalAmount), 0) AS AverageLoanPerClient,\n    CASE \n        WHEN SUM(de.Amount) = 0 THEN NULL\n        ELSE ROUND(SUM(de.Amount) / SUM(lo.PrincipalAmount), 2)\n    END AS FinancialActivityCoefficient\nFROM \n    Branches b\nLEFT JOIN \n    Customers cu ON b.City = cu.City\nLEFT JOIN \n    Deposits de ON cu.CustomerID = de.CustomerID AND de.Status = 'Активен'\nLEFT JOIN \n    Loans lo ON cu.CustomerID = lo.CustomerID AND lo.Status = 'Активно'\nGROUP BY \n    b.City\nORDER BY \n    NumberOfClients DESC\nLIMIT 20;",
            "gpt-4o_response": "SELECT \n    b.City,\n    COUNT(DISTINCT c.CustomerID) AS CustomerCount,\n    COUNT(DISTINCT b.BranchID) AS BranchCount,\n    COALESCE(SUM(d.Amount) / NULLIF(COUNT(DISTINCT c.CustomerID), 0), 0) AS AvgDepositPerCustomer,\n    COALESCE(SUM(l.PrincipalAmount) / NULLIF(COUNT(DISTINCT c.CustomerID), 0), 0) AS AvgLoanPerCustomer,\n    COALESCE(SUM(d.Amount) / NULLIF(SUM(l.PrincipalAmount), 0), 0) AS FinancialActivityRatio\nFROM \n    Branches b\nLEFT JOIN \n    Customers c ON b.BranchID = c.BranchID\nLEFT JOIN \n    Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\nLEFT JOIN \n    Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\nGROUP BY \n    b.City\nORDER BY \n    CustomerCount DESC\nLIMIT 20;",
            "gpt-4o_response_ru": "SELECT \n    b.City,\n    COUNT(DISTINCT c.CustomerID) AS CustomerCount,\n    COUNT(DISTINCT b.BranchID) AS BranchCount,\n    COALESCE(SUM(d.Amount) / NULLIF(COUNT(DISTINCT c.CustomerID), 0), 0) AS AvgDepositPerCustomer,\n    COALESCE(SUM(l.PrincipalAmount) / NULLIF(COUNT(DISTINCT c.CustomerID), 0), 0) AS AvgLoanPerCustomer,\n    COALESCE(SUM(d.Amount) / NULLIF(SUM(l.PrincipalAmount), 0), 0) AS FinancialActivityRatio\nFROM \n    Customers c\nJOIN \n    Branches b ON c.BranchID = b.BranchID\nLEFT JOIN \n    Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\nLEFT JOIN \n    Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\nGROUP BY \n    b.City\nORDER BY \n    CustomerCount DESC\nLIMIT 20;"
        }
    ]
}