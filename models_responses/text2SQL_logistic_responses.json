{
    "queries": [
        {
            "question": "Какие поставщики имеют более 5 активных продуктов в ассортименте?",
            "sql_query": "SELECT s.Name, COUNT(p.ProductID) AS ProductCount FROM Suppliers s JOIN Products p ON s.SupplierID = p.SupplierID WHERE p.Discontinued = FALSE GROUP BY s.Name HAVING COUNT(p.ProductID) > 5;",
            "gpt-4o_response": "SELECT s.Name, COUNT(p.ProductID) AS ActiveProductsCount\nFROM Suppliers s\nJOIN Products p ON s.SupplierID = p.SupplierID\nWHERE p.Discontinued = FALSE\nGROUP BY s.Name\nHAVING COUNT(p.ProductID) > 5;",
            "gpt-4o_response_ru": "SELECT s.Name, COUNT(p.ProductID) AS ActiveProductsCount\nFROM Suppliers s\nJOIN Products p ON s.SupplierID = p.SupplierID\nWHERE p.Discontinued = FALSE\nGROUP BY s.Name\nHAVING COUNT(p.ProductID) > 5;",
            "google/gemini-2.0-flash-001_response": "SELECT s.SupplierID, s.Name, COUNT(p.ProductID) AS ActiveProductsCount\nFROM Suppliers s\nJOIN Products p ON s.SupplierID = p.SupplierID\nWHERE p.Discontinued = FALSE\nGROUP BY s.SupplierID, s.Name\nHAVING COUNT(p.ProductID) > 5;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT s.Name\nFROM Suppliers s\nJOIN Products p ON s.SupplierID = p.SupplierID\nGROUP BY s.Name\nHAVING COUNT(DISTINCT p.ProductID) > 5;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT s.SupplierID, s.Name, COUNT(p.ProductID) AS ActiveProducts \nFROM Suppliers s \nJOIN Products p ON s.SupplierID = p.SupplierID \nWHERE p.Discontinued = FALSE \nGROUP BY s.SupplierID, s.Name \nHAVING COUNT(p.ProductID) > 5;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    s.SupplierID, \n    s.Name, \n    COUNT(p.ProductID) as ActiveProducts\nFROM \n    Suppliers s\nJOIN \n    Products p ON s.SupplierID = p.SupplierID\nWHERE \n    p.Discontinued = FALSE\nGROUP BY \n    s.SupplierID, s.Name\nHAVING \n    COUNT(p.ProductID) > 5",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT s.SupplierID, s.Name, COUNT(p.ProductID) AS ActiveProductsCount \nFROM Suppliers s \nJOIN Products p ON s.SupplierID = p.SupplierID \nWHERE p.Discontinued = FALSE \nGROUP BY s.SupplierID, s.Name \nHAVING COUNT(p.ProductID) > 5;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT s.SupplierID, s.Name, COUNT(p.ProductID) AS ActiveProductsCount\nFROM Suppliers s\nJOIN Products p ON s.SupplierID = p.SupplierID\nWHERE p.Discontinued = FALSE\nGROUP BY s.SupplierID, s.Name\nHAVING COUNT(p.ProductID) > 5;",
            "gigachat_response": "SELECT s.Name, COUNT(p.ProductID) AS ActiveProductsCount\nFROM Suppliers s\nJOIN Products p ON s.SupplierID = p.SupplierID\nWHERE p.Discontinued = FALSE\nGROUP BY s.Name\nHAVING COUNT(p.ProductID) > 5;",
            "gigachat_response_ru": "SELECT s.Name, COUNT(p.ProductID) AS ActiveProductsCount\nFROM Suppliers s\nJOIN Products p ON s.SupplierID = p.SupplierID\nWHERE p.Discontinued = FALSE\nGROUP BY s.Name\nHAVING COUNT(p.ProductID) > 5;"
        },
        {
            "question": "Какие сотрудники управляют более чем одним складом одновременно?",
            "sql_query": "SELECT e.FirstName, e.LastName, COUNT(w.WarehouseID) AS ManagedWarehouses FROM Employees e JOIN Warehouses w ON e.EmployeeID = w.ManagerID GROUP BY e.FirstName, e.LastName HAVING COUNT(w.WarehouseID) > 1;",
            "gpt-4o_response": "SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(w.WarehouseID) AS ManagedWarehouses\nFROM Employees e\nJOIN Warehouses w ON e.EmployeeID = w.ManagerID\nGROUP BY e.EmployeeID, e.FirstName, e.LastName\nHAVING COUNT(w.WarehouseID) > 1;",
            "gpt-4o_response_ru": "SELECT e.EmployeeID, CONCAT(e.FirstName, ' ', e.LastName) AS EmployeeName, e.Title\nFROM Employees e\nJOIN Warehouses w ON e.EmployeeID = w.ManagerID\nGROUP BY e.EmployeeID, EmployeeName, e.Title\nHAVING COUNT(DISTINCT w.WarehouseID) > 1;",
            "google/gemini-2.0-flash-001_response": "SELECT e.FirstName, e.LastName\nFROM Employees e\nJOIN Warehouses w ON e.EmployeeID = w.ManagerID\nGROUP BY e.EmployeeID, e.FirstName, e.LastName\nHAVING COUNT(DISTINCT w.WarehouseID) > 1;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT e.FirstName, e.LastName\nFROM Employees e\nJOIN Warehouses w ON e.EmployeeID = w.ManagerID\nGROUP BY e.EmployeeID, e.FirstName, e.LastName\nHAVING COUNT(DISTINCT w.WarehouseID) > 1;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(DISTINCT w.WarehouseID) AS ManagedWarehouses\nFROM Employees e\nJOIN Warehouses w ON e.EmployeeID = w.ManagerID\nGROUP BY e.EmployeeID, e.FirstName, e.LastName\nHAVING COUNT(DISTINCT w.WarehouseID) > 1;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT e.EmployeeID, CONCAT(e.FirstName, ' ', e.LastName) AS EmployeeName, e.Title, COUNT(DISTINCT w.WarehouseID) AS ManagedWarehouses\nFROM Employees e\nJOIN Warehouses w ON e.EmployeeID = w.ManagerID\nGROUP BY e.EmployeeID, e.FirstName, e.LastName, e.Title\nHAVING COUNT(DISTINCT w.WarehouseID) > 1\nORDER BY ManagedWarehouses DESC;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT e.EmployeeID, e.FirstName, e.LastName, e.Title, COUNT(w.WarehouseID) AS ManagedWarehousesCount \nFROM Employees e \nJOIN Warehouses w ON e.EmployeeID = w.ManagerID \nGROUP BY e.EmployeeID, e.FirstName, e.LastName, e.Title \nHAVING COUNT(w.WarehouseID) > 1;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT e.EmployeeID, CONCAT(e.FirstName, ' ', e.LastName) AS EmployeeName, e.Title, COUNT(w.WarehouseID) AS ManagedWarehousesCount\nFROM Employees e\nJOIN Warehouses w ON e.EmployeeID = w.ManagerID\nGROUP BY e.EmployeeID, EmployeeName, e.Title\nHAVING COUNT(w.WarehouseID) > 1\nORDER BY ManagedWarehousesCount DESC;",
            "gigachat_response": "SELECT e.FirstName, e.LastName, COUNT(*) AS NumberOfWarehouses\nFROM Employees e\nJOIN Warehouses w ON e.EmployeeID = w.ManagerID\nGROUP BY e.EmployeeID\nHAVING COUNT(*) > 1;",
            "gigachat_response_ru": "SELECT e.FirstName, e.LastName, COUNT(*) AS NumOfWarehouses\nFROM Employees e\nJOIN Warehouses w ON e.EmployeeID = w.ManagerID\nGROUP BY e.EmployeeID\nHAVING COUNT(*) > 1;"
        },
        {
            "question": "Какие продукты из категории 'Кухонная посуда' имеют среднее количество заказов более 10 единиц?",
            "sql_query": "SELECT p.Name, AVG(od.Quantity) AS AvgQuantity FROM Products p JOIN OrderDetails od ON p.ProductID = od.ProductID WHERE p.Category = 'Кухонная посуда' GROUP BY p.Name HAVING AVG(od.Quantity) > 10;",
            "gpt-4o_response": "SELECT p.Name, AVG(od.Quantity) AS AvgOrderQuantity\nFROM Products p\nJOIN OrderDetails od ON p.ProductID = od.ProductID\nWHERE p.Category = 'Кухонная посуда'\nGROUP BY p.Name\nHAVING AVG(od.Quantity) > 10;",
            "gpt-4o_response_ru": "SELECT p.Name, AVG(od.Quantity) AS AvgOrderQuantity\nFROM Products p\nJOIN OrderDetails od ON p.ProductID = od.ProductID\nWHERE p.Category = 'Кухонная посуда'\nGROUP BY p.Name\nHAVING AVG(od.Quantity) > 10;",
            "google/gemini-2.0-flash-001_response": "SELECT p.Name\nFROM Products p\nJOIN OrderDetails od ON p.ProductID = od.ProductID\nWHERE p.Category = 'Кухонная посуда'\nGROUP BY p.Name\nHAVING AVG(od.Quantity) > 10;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT p.Name\nFROM Products p\nJOIN OrderDetails od ON p.ProductID = od.ProductID\nWHERE p.Category = 'Кухонная посуда'\nGROUP BY p.Name\nHAVING AVG(od.Quantity) > 10;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT p.Name, AVG(od.Quantity) AS AvgOrderQuantity \nFROM Products p \nJOIN OrderDetails od ON p.ProductID = od.ProductID \nWHERE p.Category = 'Кухонная посуда' \nGROUP BY p.Name \nHAVING AVG(od.Quantity) > 10;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT p.Name, AVG(od.Quantity) AS AvgOrderQuantity \nFROM Products p \nJOIN OrderDetails od ON p.ProductID = od.ProductID \nWHERE p.Category = 'Кухонная посуда' \nGROUP BY p.Name \nHAVING AVG(od.Quantity) > 10;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT p.ProductID, p.Name, AVG(od.Quantity) AS AvgOrderQuantity\nFROM Products p\nJOIN OrderDetails od ON p.ProductID = od.ProductID\nWHERE p.Category = 'Кухонная техника'\nGROUP BY p.ProductID, p.Name\nHAVING AVG(od.Quantity) > 10;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT p.Name, AVG(od.Quantity) AS AvgOrderQuantity\nFROM Products p\nJOIN OrderDetails od ON p.ProductID = od.ProductID\nWHERE p.Category = 'Кухонная техника'\nGROUP BY p.Name\nHAVING AVG(od.Quantity) > 10;",
            "gigachat_response": "SELECT p.Name, AVG(od.Quantity) AS AverageOrderedQuantity\nFROM Products p\nJOIN OrderDetails od ON p.ProductID = od.ProductID\nWHERE p.Category = 'Кухонная посуда'\nGROUP BY p.Name\nHAVING AVG(od.Quantity) > 10;",
            "gigachat_response_ru": "SELECT p.Name, AVG(od.Quantity) AS AverageOrderedQuantity\nFROM Products p\nJOIN OrderDetails od ON p.ProductID = od.ProductID\nWHERE p.Category = 'Кухонная посуда'\nGROUP BY p.Name\nHAVING AVG(od.Quantity) > 10;"
        },
        {
            "question": "Какие сотрудники обработали более 5 заказов через управляемые ими склады?",
            "sql_query": "SELECT e.FirstName, e.LastName, COUNT(o.OrderID) AS OrdersHandled FROM Employees e JOIN Warehouses w ON e.EmployeeID = w.ManagerID JOIN Inventory i ON w.WarehouseID = i.WarehouseID JOIN OrderDetails od ON i.ProductID = od.ProductID JOIN Orders o ON od.OrderID = o.OrderID GROUP BY e.FirstName, e.LastName HAVING COUNT(o.OrderID) > 5;",
            "gpt-4o_response": "SELECT e.EmployeeID, CONCAT(e.FirstName, ' ', e.LastName) AS EmployeeName, COUNT(DISTINCT o.OrderID) AS ProcessedOrders\nFROM Employees e\nJOIN Warehouses w ON e.EmployeeID = w.ManagerID\nJOIN Inventory i ON w.WarehouseID = i.WarehouseID\nJOIN Products p ON i.ProductID = p.ProductID\nJOIN OrderDetails od ON p.ProductID = od.ProductID\nJOIN Orders o ON od.OrderID = o.OrderID\nGROUP BY e.EmployeeID, EmployeeName\nHAVING COUNT(DISTINCT o.OrderID) > 5;",
            "gpt-4o_response_ru": "SELECT \n    e.EmployeeID, \n    CONCAT(e.FirstName, ' ', e.LastName) AS EmployeeName, \n    COUNT(DISTINCT o.OrderID) AS ProcessedOrders\nFROM \n    Employees e\nJOIN \n    Warehouses w ON e.EmployeeID = w.ManagerID\nJOIN \n    Inventory i ON w.WarehouseID = i.WarehouseID\nJOIN \n    OrderDetails od ON i.ProductID = od.ProductID\nJOIN \n    Orders o ON od.OrderID = o.OrderID\nGROUP BY \n    e.EmployeeID, EmployeeName\nHAVING \n    COUNT(DISTINCT o.OrderID) > 5;",
            "google/gemini-2.0-flash-001_response": "SELECT e.FirstName, e.LastName, COUNT(DISTINCT o.OrderID) AS NumberOfOrders\nFROM Employees e\nJOIN Warehouses w ON e.EmployeeID = w.ManagerID\nJOIN Inventory i ON w.WarehouseID = i.WarehouseID\nJOIN Products p ON i.ProductID = p.ProductID\nJOIN OrderDetails od ON p.ProductID = od.ProductID\nJOIN Orders o ON od.OrderID = o.OrderID\nGROUP BY e.EmployeeID, e.FirstName, e.LastName\nHAVING COUNT(DISTINCT o.OrderID) > 5;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT e.FirstName, e.LastName\nFROM Employees e\nJOIN Warehouses w ON e.EmployeeID = w.ManagerID\nJOIN Inventory i ON w.WarehouseID = i.WarehouseID\nJOIN Products p ON i.ProductID = p.ProductID\nJOIN OrderDetails od ON p.ProductID = od.ProductID\nJOIN Orders o ON od.OrderID = o.OrderID\nGROUP BY e.EmployeeID, e.FirstName, e.LastName\nHAVING COUNT(DISTINCT o.OrderID) > 5;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT e.EmployeeID, e.FirstName, e.LastName, e.Title, COUNT(DISTINCT o.OrderID) AS TotalOrdersProcessed\nFROM Employees e\nJOIN Warehouses w ON e.EmployeeID = w.ManagerID\nJOIN Inventory i ON w.WarehouseID = i.WarehouseID\nJOIN Products p ON i.ProductID = p.ProductID\nJOIN OrderDetails od ON p.ProductID = od.ProductID\nJOIN Orders o ON od.OrderID = o.OrderID\nGROUP BY e.EmployeeID, e.FirstName, e.LastName, e.Title\nHAVING COUNT(DISTINCT o.OrderID) > 5;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    e.EmployeeID, \n    CONCAT(e.FirstName, ' ', e.LastName) AS EmployeeName, \n    e.Title, \n    COUNT(DISTINCT o.OrderID) AS OrdersProcessed\nFROM \n    Employees e\nJOIN \n    Warehouses w ON e.EmployeeID = w.ManagerID\nJOIN \n    Inventory i ON w.WarehouseID = i.WarehouseID\nJOIN \n    Products p ON i.ProductID = p.ProductID\nJOIN \n    OrderDetails od ON p.ProductID = od.ProductID\nJOIN \n    Orders o ON od.OrderID = o.OrderID\nGROUP BY \n    e.EmployeeID, EmployeeName, e.Title\nHAVING \n    COUNT(DISTINCT o.OrderID) > 5\nORDER BY \n    OrdersProcessed DESC;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT e.EmployeeID, e.FirstName, e.LastName, e.Title, COUNT(DISTINCT o.OrderID) AS ProcessedOrders\nFROM Employees e\nJOIN Warehouses w ON e.EmployeeID = w.ManagerID\nJOIN Inventory i ON w.WarehouseID = i.WarehouseID\nJOIN OrderDetails od ON i.ProductID = od.ProductID\nJOIN Orders o ON od.OrderID = o.OrderID\nGROUP BY e.EmployeeID, e.FirstName, e.LastName, e.Title\nHAVING COUNT(DISTINCT o.OrderID) > 5;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT e.EmployeeID, e.FirstName, e.LastName, e.Title, COUNT(DISTINCT o.OrderID) AS ProcessedOrders\nFROM Employees e\nJOIN Warehouses w ON e.EmployeeID = w.ManagerID\nJOIN Inventory i ON w.WarehouseID = i.WarehouseID\nJOIN OrderDetails od ON i.ProductID = od.ProductID\nJOIN Orders o ON od.OrderID = o.OrderID\nGROUP BY e.EmployeeID, e.FirstName, e.LastName, e.Title\nHAVING COUNT(DISTINCT o.OrderID) > 5\nORDER BY ProcessedOrders DESC;",
            "gigachat_response": "SELECT \n    e.FirstName, \n    e.LastName, \n    COUNT(o.OrderID) AS NumberOfOrders\nFROM \n    Employees e\nJOIN \n    Warehouses w ON e.EmployeeID = w.ManagerID\nJOIN \n    Inventory inv ON w.WarehouseID = inv.WarehouseID\nJOIN \n    Products p ON inv.ProductID = p.ProductID\nJOIN \n    OrderDetails od ON p.ProductID = od.ProductID\nJOIN \n    Orders o ON od.OrderID = o.OrderID\nGROUP BY \n    e.FirstName, e.LastName\nHAVING \n    COUNT(o.OrderID) > 5;",
            "gigachat_response_ru": "SELECT e.FirstName, e.LastName, COUNT(o.OrderID) AS ProcessedOrders\nFROM Employees e\nJOIN Warehouses w ON e.EmployeeID = w.ManagerID\nJOIN Inventory i ON w.WarehouseID = i.WarehouseID\nJOIN Products p ON i.ProductID = p.ProductID\nJOIN OrderDetails od ON p.ProductID = od.ProductID\nJOIN Orders o ON od.OrderID = o.OrderID\nGROUP BY e.EmployeeID, e.FirstName, e.LastName\nHAVING COUNT(o.OrderID) > 5;"
        },
        {
            "question": "Какие поставщики имеют максимальную цену на свои активные продукты более 200 единиц?",
            "sql_query": "SELECT s.Name, MAX(p.UnitPrice) AS MaxPrice FROM Suppliers s JOIN Products p ON s.SupplierID = p.SupplierID WHERE p.Discontinued = FALSE GROUP BY s.Name HAVING MAX(p.UnitPrice) > 200;",
            "gpt-4o_response": "SELECT s.Name, MAX(p.UnitPrice) AS MaxPrice\nFROM Suppliers s\nJOIN Products p ON s.SupplierID = p.SupplierID\nWHERE p.Discontinued = FALSE\nGROUP BY s.Name\nHAVING MAX(p.UnitPrice) > 200;",
            "gpt-4o_response_ru": "SELECT s.Name, MAX(p.UnitPrice) AS MaxPrice\nFROM Suppliers s\nJOIN Products p ON s.SupplierID = p.SupplierID\nWHERE p.Discontinued = FALSE\nGROUP BY s.Name\nHAVING MAX(p.UnitPrice) > 200;",
            "google/gemini-2.0-flash-001_response": "SELECT s.Name\nFROM Suppliers s\nJOIN Products p ON s.SupplierID = p.SupplierID\nWHERE p.Discontinued = FALSE\nGROUP BY s.SupplierID, s.Name\nHAVING MAX(p.UnitPrice) > 200;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT s.Name\nFROM Suppliers s\nJOIN Products p ON s.SupplierID = p.SupplierID\nWHERE p.Discontinued = FALSE\nGROUP BY s.Name\nHAVING MAX(p.UnitPrice) > 200;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT s.Name, MAX(p.UnitPrice) AS MaxPrice \nFROM Suppliers s \nJOIN Products p ON s.SupplierID = p.SupplierID \nWHERE p.Discontinued = FALSE \nGROUP BY s.Name \nHAVING MAX(p.UnitPrice) > 200;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT s.SupplierID, s.Name, MAX(p.UnitPrice) AS MaxPrice\nFROM Suppliers s\nJOIN Products p ON s.SupplierID = p.SupplierID\nWHERE p.Discontinued = FALSE\nGROUP BY s.SupplierID, s.Name\nHAVING MAX(p.UnitPrice) > 200;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT s.SupplierID, s.Name, MAX(p.UnitPrice) AS MaxPrice \nFROM Suppliers s \nJOIN Products p ON s.SupplierID = p.SupplierID \nWHERE p.Discontinued = FALSE AND p.StockQuantity > 200 \nGROUP BY s.SupplierID, s.Name \nHAVING MAX(p.UnitPrice) > 200;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT s.Name, MAX(p.UnitPrice) AS MaxPrice \nFROM Suppliers s \nJOIN Products p ON s.SupplierID = p.SupplierID \nWHERE p.Discontinued = FALSE \nGROUP BY s.Name \nHAVING MAX(p.UnitPrice) > 200;",
            "gigachat_response": "SELECT DISTINCT s.Name\nFROM Suppliers s\nJOIN Products p ON s.SupplierID = p.SupplierID\nWHERE p.Discontinued = FALSE AND p.UnitPrice > 200;",
            "gigachat_response_ru": "SELECT s.Name\nFROM Suppliers s\nJOIN Products p ON s.SupplierID = p.SupplierID\nWHERE p.Discontinued = FALSE AND p.UnitPrice > 200\nGROUP BY s.Name;"
        },
        {
            "question": "Какие сотрудники обработали более 3 успешных доставок через управляемые ими склады?",
            "sql_query": "SELECT e.FirstName, e.LastName, COUNT(d.DeliveryID) AS DeliveriesHandled FROM Employees e JOIN Warehouses w ON e.EmployeeID = w.ManagerID JOIN Inventory i ON w.WarehouseID = i.WarehouseID JOIN OrderDetails od ON i.ProductID = od.ProductID JOIN Orders o ON od.OrderID = o.OrderID JOIN Shipments s ON o.OrderID = s.OrderID JOIN Deliveries d ON s.ShipmentID = d.ShipmentID WHERE d.Status = 'Доставлено' GROUP BY e.FirstName, e.LastName HAVING COUNT(d.DeliveryID) > 3;",
            "gpt-4o_response": "SELECT e.EmployeeID, CONCAT(e.FirstName, ' ', e.LastName) AS EmployeeName, e.Title, COUNT(DISTINCT d.DeliveryID) AS SuccessfulDeliveries\nFROM Employees e\nJOIN Warehouses w ON e.EmployeeID = w.ManagerID\nJOIN Inventory i ON w.WarehouseID = i.WarehouseID\nJOIN Shipments s ON i.ProductID = s.OrderID\nJOIN Deliveries d ON s.ShipmentID = d.ShipmentID\nWHERE d.Status = 'Доставлено'\nGROUP BY e.EmployeeID, EmployeeName, e.Title\nHAVING COUNT(DISTINCT d.DeliveryID) > 3;",
            "gpt-4o_response_ru": "SELECT \n    e.EmployeeID, \n    CONCAT(e.FirstName, ' ', e.LastName) AS EmployeeName, \n    COUNT(DISTINCT d.DeliveryID) AS SuccessfulDeliveries\nFROM \n    Employees e\nJOIN \n    Warehouses w ON e.EmployeeID = w.ManagerID\nJOIN \n    Inventory i ON w.WarehouseID = i.WarehouseID\nJOIN \n    OrderDetails od ON i.ProductID = od.ProductID\nJOIN \n    Orders o ON od.OrderID = o.OrderID\nJOIN \n    Shipments s ON o.OrderID = s.OrderID\nJOIN \n    Deliveries d ON s.ShipmentID = d.ShipmentID\nWHERE \n    d.Status = 'Доставлено'\nGROUP BY \n    e.EmployeeID, EmployeeName\nHAVING \n    COUNT(DISTINCT d.DeliveryID) > 3;",
            "google/gemini-2.0-flash-001_response": "SELECT \n    e.EmployeeID,\n    e.FirstName,\n    e.LastName,\n    COUNT(DISTINCT d.DeliveryID) AS SuccessfulDeliveriesCount\nFROM Employees e\nJOIN Warehouses w ON e.EmployeeID = w.ManagerID\nJOIN Inventory i ON w.WarehouseID = i.WarehouseID\nJOIN Products p ON i.ProductID = p.ProductID\nJOIN OrderDetails od ON p.ProductID = od.ProductID\nJOIN Orders o ON od.OrderID = o.OrderID\nJOIN Shipments s ON o.OrderID = s.OrderID\nJOIN Deliveries d ON s.ShipmentID = d.ShipmentID\nWHERE d.Status = 'Доставлено'\nGROUP BY e.EmployeeID, e.FirstName, e.LastName\nHAVING COUNT(DISTINCT d.DeliveryID) > 3;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT e.FirstName, e.LastName\nFROM Employees e\nJOIN Warehouses w ON e.EmployeeID = w.ManagerID\nJOIN Inventory i ON w.WarehouseID = i.WarehouseID\nJOIN Products p ON i.ProductID = p.ProductID\nJOIN OrderDetails od ON p.ProductID = od.ProductID\nJOIN Orders o ON od.OrderID = o.OrderID\nJOIN Shipments s ON o.OrderID = s.OrderID\nJOIN Deliveries d ON s.ShipmentID = d.ShipmentID\nWHERE d.Status = 'Доставлено'\nGROUP BY e.EmployeeID, e.FirstName, e.LastName\nHAVING COUNT(DISTINCT d.DeliveryID) > 3;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    e.EmployeeID, \n    CONCAT(e.FirstName, ' ', e.LastName) AS EmployeeName, \n    e.Title, \n    COUNT(DISTINCT d.DeliveryID) AS SuccessfulDeliveries\nFROM \n    Employees e\nJOIN \n    Warehouses w ON e.EmployeeID = w.ManagerID\nJOIN \n    Inventory i ON w.WarehouseID = i.WarehouseID\nJOIN \n    Products p ON i.ProductID = p.ProductID\nJOIN \n    OrderDetails od ON p.ProductID = od.ProductID\nJOIN \n    Orders o ON od.OrderID = o.OrderID\nJOIN \n    Shipments s ON o.OrderID = s.OrderID\nJOIN \n    Deliveries d ON s.ShipmentID = d.ShipmentID\nWHERE \n    d.Status = 'Доставлено'\nGROUP BY \n    e.EmployeeID, EmployeeName, e.Title\nHAVING \n    COUNT(DISTINCT d.DeliveryID) > 3",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    e.EmployeeID, \n    CONCAT(e.FirstName, ' ', e.LastName) AS EmployeeName, \n    e.Title, \n    COUNT(DISTINCT d.DeliveryID) AS TotalDeliveries, \n    COUNT(DISTINCT CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID END) AS SuccessfulDeliveries\nFROM \n    Employees e\nJOIN \n    Warehouses w ON e.EmployeeID = w.ManagerID\nJOIN \n    Inventory i ON w.WarehouseID = i.WarehouseID\nJOIN \n    Products p ON i.ProductID = p.ProductID\nJOIN \n    OrderDetails od ON p.ProductID = od.ProductID\nJOIN \n    Orders o ON od.OrderID = o.OrderID\nJOIN \n    Shipments s ON o.OrderID = s.OrderID\nJOIN \n    Deliveries d ON s.ShipmentID = d.ShipmentID\nGROUP BY \n    e.EmployeeID, e.FirstName, e.LastName, e.Title\nHAVING \n    COUNT(DISTINCT CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID END) > 3\nORDER BY \n    SuccessfulDeliveries DESC;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT e.EmployeeID, e.FirstName, e.LastName, e.Title, COUNT(DISTINCT d.DeliveryID) AS SuccessfulDeliveries \nFROM Employees e \nJOIN Warehouses w ON e.EmployeeID = w.ManagerID \nJOIN Inventory i ON w.WarehouseID = i.WarehouseID \nJOIN OrderDetails od ON i.ProductID = od.ProductID \nJOIN Orders o ON od.OrderID = o.OrderID \nJOIN Shipments s ON o.OrderID = s.OrderID \nJOIN Deliveries d ON s.ShipmentID = d.ShipmentID \nWHERE d.Status = 'Доставлено' \nGROUP BY e.EmployeeID, e.FirstName, e.LastName, e.Title \nHAVING COUNT(DISTINCT d.DeliveryID) > 3;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT e.EmployeeID, e.FirstName, e.LastName, e.Title, COUNT(DISTINCT d.DeliveryID) AS SuccessfulDeliveries\nFROM Employees e\nJOIN Warehouses w ON e.EmployeeID = w.ManagerID\nJOIN Inventory i ON w.WarehouseID = i.WarehouseID\nJOIN Products p ON i.ProductID = p.ProductID\nJOIN OrderDetails od ON p.ProductID = od.ProductID\nJOIN Orders o ON od.OrderID = o.OrderID\nJOIN Shipments s ON o.OrderID = s.OrderID\nJOIN Deliveries d ON s.ShipmentID = d.ShipmentID\nWHERE d.Status = 'Доставлено'\nGROUP BY e.EmployeeID, e.FirstName, e.LastName, e.Title\nHAVING COUNT(DISTINCT d.DeliveryID) > 3\nORDER BY SuccessfulDeliveries DESC;",
            "gigachat_response": "SELECT \n    e.EmployeeID,\n    e.FirstName,\n    e.LastName,\n    COUNT(s.ShipmentID) AS SuccessfulDeliveriesCount\nFROM \n    Employees e\nJOIN \n    Warehouses w ON e.EmployeeID = w.ManagerID\nJOIN \n    Inventory i ON w.WarehouseID = i.WarehouseID\nJOIN \n    Products p ON i.ProductID = p.ProductID\nJOIN \n    OrderDetails od ON p.ProductID = od.ProductID\nJOIN \n    Orders o ON od.OrderID = o.OrderID\nJOIN \n    Shipments s ON o.OrderID = s.OrderID\nWHERE \n    s.Status = 'Доставлено'\nGROUP BY \n    e.EmployeeID, e.FirstName, e.LastName\nHAVING \n    COUNT(s.ShipmentID) > 3;",
            "gigachat_response_ru": "SELECT \n    e.EmployeeID,\n    e.FirstName || ' ' || e.LastName AS FullName,\n    COUNT(s.ShipmentID) AS SuccessfulDeliveriesCount\nFROM \n    Employees e\nJOIN \n    Warehouses w ON e.EmployeeID = w.ManagerID\nJOIN \n    Inventory i ON w.WarehouseID = i.WarehouseID\nJOIN \n    Products p ON i.ProductID = p.ProductID\nJOIN \n    OrderDetails od ON p.ProductID = od.ProductID\nJOIN \n    Orders o ON od.OrderID = o.OrderID\nJOIN \n    Shipments s ON o.OrderID = s.OrderID\nWHERE \n    s.Status = 'Доставлено'\nGROUP BY \n    e.EmployeeID, e.FirstName, e.LastName\nHAVING \n    COUNT(s.ShipmentID) > 3;"
        },
        {
            "question": "Какие города имеют средний платеж более 1000 единиц по завершенным платежам?",
            "sql_query": "SELECT c.City, AVG(p.Amount) AS AvgPayment FROM Clients c JOIN Orders o ON c.ClientID = o.ClientID JOIN Payments p ON o.OrderID = p.OrderID WHERE p.Status = 'Завершено' GROUP BY c.City HAVING AVG(p.Amount) > 1000;",
            "gpt-4o_response": "SELECT c.City, AVG(p.Amount) AS AvgPayment\nFROM Clients c\nJOIN Orders o ON c.ClientID = o.ClientID\nJOIN Payments p ON o.OrderID = p.OrderID\nWHERE p.Status = 'Завершено'\nGROUP BY c.City\nHAVING AVG(p.Amount) > 1000;",
            "gpt-4o_response_ru": "SELECT c.City, AVG(p.Amount) AS AvgPayment\nFROM Clients c\nJOIN Orders o ON c.ClientID = o.ClientID\nJOIN Payments p ON o.OrderID = p.OrderID\nWHERE p.Status = 'Завершено'\nGROUP BY c.City\nHAVING AVG(p.Amount) > 1000;",
            "google/gemini-2.0-flash-001_response": "SELECT c.City\nFROM Clients c\nJOIN Orders o ON c.ClientID = o.ClientID\nJOIN Payments p ON o.OrderID = p.OrderID\nWHERE p.Status = 'Завершено'\nGROUP BY c.City\nHAVING AVG(p.Amount) > 1000;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT c.City\nFROM Clients c\nJOIN Orders o ON c.ClientID = o.ClientID\nJOIN Payments p ON o.OrderID = p.OrderID\nWHERE p.Status = 'Завершено'\nGROUP BY c.City\nHAVING AVG(p.Amount) > 1000;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT c.City, AVG(p.Amount) AS AvgPayment \nFROM Clients c \nJOIN Orders o ON c.ClientID = o.ClientID \nJOIN Payments p ON o.OrderID = p.OrderID \nWHERE p.Status = 'Завершено' \nGROUP BY c.City \nHAVING AVG(p.Amount) > 1000;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT c.City, AVG(p.Amount) AS AvgPayment \nFROM Clients c \nJOIN Orders o ON c.ClientID = o.ClientID \nJOIN Payments p ON o.OrderID = p.OrderID \nWHERE p.Status = 'Завершено' \nGROUP BY c.City \nHAVING AVG(p.Amount) > 1000;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT c.City, AVG(p.Amount) AS AvgPayment \nFROM Clients c \nJOIN Orders o ON c.ClientID = o.ClientID \nJOIN Payments p ON o.OrderID = p.OrderID \nWHERE p.Status = 'Завершено' \nGROUP BY c.City \nHAVING AVG(p.Amount) > 1000;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT c.City, AVG(p.Amount) AS AvgPayment \nFROM Clients c \nJOIN Orders o ON c.ClientID = o.ClientID \nJOIN Payments p ON o.OrderID = p.OrderID \nWHERE p.Status = 'Завершено' \nGROUP BY c.City \nHAVING AVG(p.Amount) > 1000;",
            "gigachat_response": "SELECT \n    c.City,\n    AVG(p.Amount) AS AveragePayment\nFROM \n    Clients c\nJOIN \n    Orders o ON c.ClientID = o.ClientID\nJOIN \n    Payments p ON o.OrderID = p.OrderID\nWHERE \n    p.Status = 'Завершено'\nGROUP BY \n    c.City\nHAVING \n    AVG(p.Amount) > 1000;",
            "gigachat_response_ru": "SELECT c.City, AVG(p.Amount) AS AveragePayment\nFROM Clients c\nJOIN Orders o ON c.ClientID = o.ClientID\nJOIN Payments p ON o.OrderID = p.OrderID\nWHERE p.Status = 'Завершено'\nGROUP BY c.City\nHAVING AVG(p.Amount) > 1000;"
        },
        {
            "question": "Какие города имеют более 5 успешных доставок?",
            "sql_query": "SELECT c.City, COUNT(d.DeliveryID) AS DeliveriesCount FROM Clients c JOIN Orders o ON c.ClientID = o.ClientID JOIN Shipments s ON o.OrderID = s.OrderID JOIN Deliveries d ON s.ShipmentID = d.ShipmentID WHERE d.Status = 'Доставлено' GROUP BY c.City HAVING COUNT(d.DeliveryID) > 5;",
            "gpt-4o_response": "SELECT c.City, COUNT(d.DeliveryID) AS SuccessfulDeliveries\nFROM Deliveries d\nJOIN Shipments s ON d.ShipmentID = s.ShipmentID\nJOIN Orders o ON s.OrderID = o.OrderID\nJOIN Clients c ON o.ClientID = c.ClientID\nWHERE d.Status = 'Доставлено'\nGROUP BY c.City\nHAVING COUNT(d.DeliveryID) > 5;",
            "gpt-4o_response_ru": "SELECT s.City, COUNT(d.DeliveryID) AS SuccessfulDeliveries\nFROM Deliveries d\nJOIN Shipments s ON d.ShipmentID = s.ShipmentID\nJOIN Shippers sh ON s.ShipperID = sh.ShipperID\nWHERE d.Status = 'Доставлено'\nGROUP BY s.City\nHAVING COUNT(d.DeliveryID) > 5;",
            "google/gemini-2.0-flash-001_response": "SELECT w.City\nFROM Deliveries d\nJOIN Shipments s ON d.ShipmentID = s.ShipmentID\nJOIN Warehouses w ON w.WarehouseID IN (SELECT WarehouseID FROM Inventory i JOIN Products p ON i.ProductID = p.ProductID JOIN OrderDetails od ON p.ProductID = od.ProductID JOIN Orders o ON od.OrderID = o.OrderID JOIN Clients c ON o.ClientID = c.ClientID WHERE c.City = w.City)\nWHERE d.Status = 'Доставлено'\nGROUP BY w.City\nHAVING COUNT(d.DeliveryID) > 5;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n  s.City\nFROM Shipments AS sh\nJOIN Shippers AS s\n  ON sh.ShipperID = s.ShipperID\nWHERE\n  sh.Status = 'Доставлено'\nGROUP BY\n  s.City\nHAVING\n  COUNT(sh.ShipmentID) > 5;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT c.City, COUNT(DISTINCT d.DeliveryID) AS SuccessfulDeliveries \nFROM Clients c \nJOIN Orders o ON c.ClientID = o.ClientID \nJOIN Shipments s ON o.OrderID = s.OrderID \nJOIN Deliveries d ON s.ShipmentID = d.ShipmentID \nWHERE d.Status = 'Доставлено' \nGROUP BY c.City \nHAVING COUNT(DISTINCT d.DeliveryID) > 5;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT c.City, COUNT(DISTINCT s.ShipmentID) AS SuccessfulDeliveries\nFROM Clients c\nJOIN Orders o ON c.ClientID = o.ClientID\nJOIN Shipments s ON o.OrderID = s.OrderID\nWHERE s.Status = 'Доставлено'\nGROUP BY c.City\nHAVING COUNT(DISTINCT s.ShipmentID) > 5;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT c.City, COUNT(s.ShipmentID) AS SuccessfulDeliveries \nFROM Clients c \nJOIN Orders o ON c.ClientID = o.ClientID \nJOIN Shipments s ON o.OrderID = s.OrderID \nWHERE s.Status = 'Доставлено' \nGROUP BY c.City \nHAVING COUNT(s.ShipmentID) > 5;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT c.City, COUNT(*) AS SuccessfulDeliveries \nFROM Clients c \nJOIN Orders o ON c.ClientID = o.ClientID \nJOIN Shipments s ON o.OrderID = s.OrderID \nWHERE s.Status = 'Доставлено' \nGROUP BY c.City \nHAVING COUNT(*) > 5;",
            "gigachat_response": "SELECT \n    s.City, \n    COUNT(*) AS SuccessfulDeliveriesCount\nFROM \n    Shipments sh\nJOIN \n    Shippers s ON sh.ShipperID = s.ShipperID\nWHERE \n    sh.Status = 'Доставлено'\nGROUP BY \n    s.City\nHAVING \n    COUNT(*) > 5;",
            "gigachat_response_ru": "SELECT sh.City, COUNT(*) AS SuccessfulDeliveries\nFROM Shipments sm\nJOIN Shippers sh ON sm.ShipperID = sh.ShipperID\nWHERE sm.Status = 'Доставлено'\nGROUP BY sh.City\nHAVING COUNT(*) > 5;"
        },
        {
            "question": "Какие поставщики имеют общую стоимость инвентаря более 10000 единиц?",
            "sql_query": "SELECT s.Name, SUM(p.UnitPrice * i.Quantity) AS TotalInventoryValue FROM Suppliers s JOIN Products p ON s.SupplierID = p.SupplierID JOIN Inventory i ON p.ProductID = i.ProductID WHERE p.Discontinued = FALSE GROUP BY s.Name HAVING SUM(p.UnitPrice * i.Quantity) > 10000;",
            "gpt-4o_response": "SELECT s.Name, SUM(i.Quantity * p.UnitPrice) AS TotalInventoryValue\nFROM Suppliers s\nJOIN Products p ON s.SupplierID = p.SupplierID\nJOIN Inventory i ON p.ProductID = i.ProductID\nGROUP BY s.Name\nHAVING SUM(i.Quantity * p.UnitPrice) > 10000;",
            "gpt-4o_response_ru": "SELECT s.Name, SUM(i.Quantity * p.UnitPrice) AS TotalInventoryValue\nFROM Suppliers s\nJOIN Products p ON s.SupplierID = p.SupplierID\nJOIN Inventory i ON p.ProductID = i.ProductID\nGROUP BY s.Name\nHAVING SUM(i.Quantity * p.UnitPrice) > 10000;",
            "google/gemini-2.0-flash-001_response": "SELECT s.Name\nFROM Suppliers s\nJOIN Products p ON s.SupplierID = p.SupplierID\nJOIN Inventory i ON p.ProductID = i.ProductID\nGROUP BY s.Name\nHAVING SUM(i.Quantity) > 10000;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT s.Name\nFROM Suppliers s\nJOIN Products p ON s.SupplierID = p.SupplierID\nJOIN Inventory i ON p.ProductID = i.ProductID\nGROUP BY s.Name\nHAVING SUM(i.Quantity * p.UnitPrice) > 10000;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT s.Name, SUM(i.Quantity) AS TotalInventory\nFROM Suppliers s\nJOIN Products p ON s.SupplierID = p.SupplierID\nJOIN Inventory i ON p.ProductID = i.ProductID\nGROUP BY s.Name\nHAVING SUM(i.Quantity) > 10000;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT s.SupplierID, s.Name, SUM(i.Quantity) AS TotalInventoryQuantity\nFROM Suppliers s\nJOIN Products p ON s.SupplierID = p.SupplierID\nJOIN Inventory i ON p.ProductID = i.ProductID\nGROUP BY s.SupplierID, s.Name\nHAVING SUM(i.Quantity) > 10000;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT s.SupplierID, s.Name, SUM(p.UnitPrice * i.Quantity) AS TotalInventoryValue \nFROM Suppliers s \nJOIN Products p ON s.SupplierID = p.SupplierID \nJOIN Inventory i ON p.ProductID = i.ProductID \nGROUP BY s.SupplierID, s.Name \nHAVING SUM(p.UnitPrice * i.Quantity) > 10000;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT s.Name, SUM(p.UnitPrice * i.Quantity) AS TotalInventoryValue\nFROM Suppliers s\nJOIN Products p ON s.SupplierID = p.SupplierID\nJOIN Inventory i ON p.ProductID = i.ProductID\nGROUP BY s.Name\nHAVING SUM(p.UnitPrice * i.Quantity) > 10000;",
            "gigachat_response": "SELECT s.Name, SUM(i.Quantity * p.UnitPrice) AS TotalInventoryValue\nFROM Suppliers s\nJOIN Products p ON s.SupplierID = p.SupplierID\nJOIN Inventory i ON p.ProductID = i.ProductID\nGROUP BY s.Name\nHAVING SUM(i.Quantity * p.UnitPrice) > 10000;",
            "gigachat_response_ru": "SELECT s.Name, SUM(i.Quantity * p.UnitPrice) AS TotalInventoryValue\nFROM Suppliers s\nJOIN Products p ON s.SupplierID = p.SupplierID\nJOIN Inventory i ON p.ProductID = i.ProductID\nGROUP BY s.Name\nHAVING SUM(i.Quantity * p.UnitPrice) > 10000;"
        },
        {
            "question": "Какие сотрудники имеют средний платеж более 1000 единиц по завершенным платежам?",
            "sql_query": "SELECT e.FirstName, e.LastName, AVG(p.Amount) AS AvgPayment FROM Employees e JOIN Warehouses w ON e.EmployeeID = w.ManagerID JOIN Inventory i ON w.WarehouseID = i.WarehouseID JOIN OrderDetails od ON i.ProductID = od.ProductID JOIN Orders o ON od.OrderID = o.OrderID JOIN Payments p ON o.OrderID = p.OrderID WHERE p.Status = 'Завершено' GROUP BY e.FirstName, e.LastName HAVING AVG(p.Amount) > 1000;",
            "gpt-4o_response": "SELECT e.FirstName, e.LastName, AVG(p.Amount) AS AvgPayment\nFROM Employees e\nJOIN Warehouses w ON e.EmployeeID = w.ManagerID\nJOIN Inventory i ON w.WarehouseID = i.WarehouseID\nJOIN Products pr ON i.ProductID = pr.ProductID\nJOIN OrderDetails od ON pr.ProductID = od.ProductID\nJOIN Orders o ON od.OrderID = o.OrderID\nJOIN Payments p ON o.OrderID = p.OrderID\nWHERE p.Status = 'Завершено'\nGROUP BY e.FirstName, e.LastName\nHAVING AVG(p.Amount) > 1000;",
            "gpt-4o_response_ru": "SELECT e.EmployeeID, CONCAT(e.FirstName, ' ', e.LastName) AS EmployeeName, AVG(p.Amount) AS AvgPayment\nFROM Employees e\nJOIN Warehouses w ON e.EmployeeID = w.ManagerID\nJOIN Inventory i ON w.WarehouseID = i.WarehouseID\nJOIN Products pr ON i.ProductID = pr.ProductID\nJOIN OrderDetails od ON pr.ProductID = od.ProductID\nJOIN Orders o ON od.OrderID = o.OrderID\nJOIN Payments p ON o.OrderID = p.OrderID\nWHERE p.Status = 'Завершено'\nGROUP BY e.EmployeeID, EmployeeName\nHAVING AVG(p.Amount) > 1000;",
            "google/gemini-2.0-flash-001_response": "SELECT e.FirstName, e.LastName\nFROM Employees e\nJOIN Warehouses w ON e.EmployeeID = w.ManagerID\nJOIN Inventory i ON w.WarehouseID = i.WarehouseID\nJOIN Products p ON i.ProductID = p.ProductID\nJOIN OrderDetails od ON p.ProductID = od.ProductID\nJOIN Orders o ON od.OrderID = o.OrderID\nJOIN Payments pa ON o.OrderID = pa.OrderID\nWHERE pa.Status = 'Завершено'\nGROUP BY e.EmployeeID, e.FirstName, e.LastName\nHAVING AVG(pa.Amount) > 1000;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT e.FirstName, e.LastName\nFROM Employees e\nJOIN Warehouses w ON e.EmployeeID = w.ManagerID\nJOIN Inventory i ON w.WarehouseID = i.WarehouseID\nJOIN Products p ON i.ProductID = p.ProductID\nJOIN OrderDetails od ON p.ProductID = od.ProductID\nJOIN Orders o ON od.OrderID = o.OrderID\nJOIN Payments pa ON o.OrderID = pa.OrderID\nWHERE pa.Status = 'Завершено'\nGROUP BY e.EmployeeID, e.FirstName, e.LastName\nHAVING AVG(pa.Amount) > 1000;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT e.EmployeeID, e.FirstName, e.LastName, AVG(p.Amount) AS AvgPayment \nFROM Employees e \nJOIN Orders o ON e.EmployeeID = o.EmployeeID \nJOIN Payments p ON o.OrderID = p.OrderID \nWHERE p.Status = 'Завершено' \nGROUP BY e.EmployeeID, e.FirstName, e.LastName \nHAVING AVG(p.Amount) > 1000;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT e.EmployeeID, CONCAT(e.FirstName, ' ', e.LastName) AS EmployeeName, AVG(p.Amount) AS AvgPayment\nFROM Employees e\nJOIN Orders o ON e.EmployeeID = o.EmployeeID\nJOIN Payments p ON o.OrderID = p.OrderID\nWHERE p.Status = 'Завершено'\nGROUP BY e.EmployeeID, EmployeeName\nHAVING AVG(p.Amount) > 1000;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT e.EmployeeID, e.FirstName, e.LastName, AVG(p.Amount) AS AvgPayment\nFROM Employees e\nJOIN Warehouses w ON e.EmployeeID = w.ManagerID\nJOIN Inventory i ON w.WarehouseID = i.WarehouseID\nJOIN Products pr ON i.ProductID = pr.ProductID\nJOIN OrderDetails od ON pr.ProductID = od.ProductID\nJOIN Orders o ON od.OrderID = o.OrderID\nJOIN Payments p ON o.OrderID = p.OrderID\nWHERE p.Status = 'Завершено'\nGROUP BY e.EmployeeID, e.FirstName, e.LastName\nHAVING AVG(p.Amount) > 1000;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT e.EmployeeID, CONCAT(e.FirstName, ' ', e.LastName) AS EmployeeName, AVG(p.Amount) AS AvgPayment \nFROM Employees e \nJOIN Warehouses w ON e.EmployeeID = w.ManagerID \nJOIN Inventory i ON w.WarehouseID = i.WarehouseID \nJOIN Products pr ON i.ProductID = pr.ProductID \nJOIN OrderDetails od ON pr.ProductID = od.ProductID \nJOIN Orders o ON od.OrderID = o.OrderID \nJOIN Payments p ON o.OrderID = p.OrderID \nWHERE p.Status = 'Завершено' \nGROUP BY e.EmployeeID, EmployeeName \nHAVING AVG(p.Amount) > 1000;",
            "gigachat_response": "SELECT \n    e.FirstName, \n    e.LastName, \n    AVG(p.Amount) AS AveragePayment\nFROM \n    Employees e\nJOIN \n    Orders o ON e.EmployeeID = o.ClientID -- Assuming employees can also place orders directly\nJOIN \n    Payments p ON o.OrderID = p.OrderID\nWHERE \n    p.Status = 'Завершено'\nGROUP BY \n    e.FirstName, e.LastName\nHAVING \n    AVG(p.Amount) > 1000;",
            "gigachat_response_ru": "SELECT e.FirstName, e.LastName, AVG(p.Amount) AS AveragePayment\nFROM Employees e\nJOIN Orders o ON e.EmployeeID = o.ClientID -- Предположим, что сотрудник связан с клиентом через поле ClientID\nJOIN Payments p ON o.OrderID = p.OrderID\nWHERE p.Status = 'Завершено'\nGROUP BY e.FirstName, e.LastName\nHAVING AVG(p.Amount) > 1000;"
        },
        {
            "question": "Какие клиенты имеют более 3 успешных доставок?",
            "sql_query": "SELECT c.Name, COUNT(s.ShipmentID) AS ShipmentsCount FROM Clients c JOIN Orders o ON c.ClientID = o.ClientID JOIN Shipments s ON o.OrderID = s.OrderID WHERE s.Status = 'Доставлено' GROUP BY c.Name HAVING COUNT(s.ShipmentID) > 3;",
            "gpt-4o_response": "SELECT c.Name, COUNT(d.DeliveryID) AS SuccessfulDeliveries\nFROM Clients c\nJOIN Orders o ON c.ClientID = o.ClientID\nJOIN Shipments s ON o.OrderID = s.OrderID\nJOIN Deliveries d ON s.ShipmentID = d.ShipmentID\nWHERE d.Status = 'Доставлено'\nGROUP BY c.Name\nHAVING COUNT(d.DeliveryID) > 3;",
            "gpt-4o_response_ru": "SELECT c.Name, c.ContactName, COUNT(d.DeliveryID) AS SuccessfulDeliveries\nFROM Clients c\nJOIN Orders o ON c.ClientID = o.ClientID\nJOIN Shipments s ON o.OrderID = s.OrderID\nJOIN Deliveries d ON s.ShipmentID = d.ShipmentID\nWHERE d.Status = 'Доставлено'\nGROUP BY c.ClientID, c.Name, c.ContactName\nHAVING COUNT(d.DeliveryID) > 3;",
            "google/gemini-2.0-flash-001_response": "SELECT c.ClientID, c.Name, c.ContactName, c.Phone, c.Email, c.Address, c.City, c.PostalCode, c.Country, c.RegistrationDate\nFROM Clients c\nJOIN Orders o ON c.ClientID = o.ClientID\nJOIN Shipments s ON o.OrderID = s.OrderID\nWHERE s.Status = 'Доставлено'\nGROUP BY c.ClientID, c.Name, c.ContactName, c.Phone, c.Email, c.Address, c.City, c.PostalCode, c.Country, c.RegistrationDate\nHAVING COUNT(DISTINCT s.ShipmentID) > 3;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT c.Name\nFROM Clients c\nJOIN Orders o ON c.ClientID = o.ClientID\nJOIN Shipments s ON o.OrderID = s.OrderID\nWHERE s.Status = 'Доставлено'\nGROUP BY c.ClientID, c.Name\nHAVING COUNT(DISTINCT s.ShipmentID) > 3;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    c.ClientID, \n    c.Name, \n    COUNT(DISTINCT s.ShipmentID) AS TotalDeliveries, \n    COUNT(DISTINCT CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID END) AS SuccessfulDeliveries\nFROM \n    Clients c \nJOIN \n    Orders o ON c.ClientID = o.ClientID \nJOIN \n    Shipments s ON o.OrderID = s.OrderID \nJOIN \n    Deliveries d ON s.ShipmentID = d.ShipmentID \nGROUP BY \n    c.ClientID, \n    c.Name \nHAVING \n    COUNT(DISTINCT CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID END) > 3",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT c.Name, COUNT(DISTINCT s.ShipmentID) AS SuccessfulDeliveries\nFROM Clients c\nJOIN Orders o ON c.ClientID = o.ClientID\nJOIN Shipments s ON o.OrderID = s.OrderID\nWHERE s.Status = 'Доставлено'\nGROUP BY c.Name\nHAVING COUNT(DISTINCT s.ShipmentID) > 3",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT c.ClientID, c.Name, COUNT(s.ShipmentID) AS SuccessfulDeliveries \nFROM Clients c \nJOIN Orders o ON c.ClientID = o.ClientID \nJOIN Shipments s ON o.OrderID = s.OrderID \nWHERE s.Status = 'Доставлено' \nGROUP BY c.ClientID, c.Name \nHAVING COUNT(s.ShipmentID) > 3;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "",
            "gigachat_response": "SELECT c.Name, COUNT(s.ShipmentID) AS SuccessfulDeliveries\nFROM Clients c\nJOIN Orders o ON c.ClientID = o.ClientID\nJOIN Shipments s ON o.OrderID = s.OrderID\nWHERE s.Status = 'Доставлено'\nGROUP BY c.Name\nHAVING COUNT(s.ShipmentID) > 3;",
            "gigachat_response_ru": "SELECT c.Name, COUNT(s.ShipmentID) AS SuccessfulDeliveries\nFROM Clients c\nJOIN Orders o ON c.ClientID = o.ClientID\nJOIN Shipments s ON o.OrderID = s.OrderID\nWHERE s.Status = 'Доставлено'\nGROUP BY c.Name\nHAVING COUNT(s.ShipmentID) > 3;"
        },
        {
            "question": "Какие города имеют более 5 завершенных платежей?",
            "sql_query": "SELECT c.City, COUNT(p.PaymentID) AS PaymentsCount FROM Clients c JOIN Orders o ON c.ClientID = o.ClientID JOIN Payments p ON o.OrderID = p.OrderID WHERE p.Status = 'Завершено' GROUP BY c.City HAVING COUNT(p.PaymentID) > 5;",
            "gpt-4o_response": "SELECT c.City, COUNT(p.PaymentID) AS CompletedPayments\nFROM Clients c\nJOIN Orders o ON c.ClientID = o.ClientID\nJOIN Payments p ON o.OrderID = p.OrderID\nWHERE p.Status = 'Завершено'\nGROUP BY c.City\nHAVING COUNT(p.PaymentID) > 5;",
            "gpt-4o_response_ru": "SELECT c.City\nFROM Clients c\nJOIN Orders o ON c.ClientID = o.ClientID\nJOIN Payments p ON o.OrderID = p.OrderID\nWHERE p.Status = 'Завершено'\nGROUP BY c.City\nHAVING COUNT(p.PaymentID) > 5;",
            "google/gemini-2.0-flash-001_response": "SELECT c.City\nFROM Clients c\nJOIN Orders o ON c.ClientID = o.ClientID\nJOIN Payments p ON o.OrderID = p.OrderID\nWHERE p.Status = 'Завершено'\nGROUP BY c.City\nHAVING COUNT(p.PaymentID) > 5;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT c.City\nFROM Clients c\nJOIN Orders o ON c.ClientID = o.ClientID\nJOIN Payments p ON o.OrderID = p.OrderID\nWHERE p.Status = 'Завершено'\nGROUP BY c.City\nHAVING COUNT(p.PaymentID) > 5;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT c.City, COUNT(p.PaymentID) AS TotalPayments \nFROM Clients c \nJOIN Orders o ON c.ClientID = o.ClientID \nJOIN Payments p ON o.OrderID = p.OrderID \nWHERE p.Status = 'Завершено' \nGROUP BY c.City \nHAVING COUNT(p.PaymentID) > 5;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT c.City, COUNT(p.PaymentID) AS TotalPayments \nFROM Clients c \nJOIN Orders o ON c.ClientID = o.ClientID \nJOIN Payments p ON o.OrderID = p.OrderID \nWHERE p.Status = 'Завершено' \nGROUP BY c.City \nHAVING COUNT(p.PaymentID) > 5;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT c.City, COUNT(p.PaymentID) AS CompletedPayments \nFROM Clients c \nJOIN Orders o ON c.ClientID = o.ClientID \nJOIN Payments p ON o.OrderID = p.OrderID \nWHERE p.Status = 'Завершено' \nGROUP BY c.City \nHAVING COUNT(p.PaymentID) > 5;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT c.City, COUNT(p.PaymentID) AS CompletedPayments \nFROM Clients c \nJOIN Orders o ON c.ClientID = o.ClientID \nJOIN Payments p ON o.OrderID = p.OrderID \nWHERE p.Status = 'Завершено' \nGROUP BY c.City \nHAVING COUNT(p.PaymentID) > 5;",
            "gigachat_response": "SELECT c.City, COUNT(*) AS CompletedPaymentsCount\nFROM Clients c\nJOIN Orders o ON c.ClientID = o.ClientID\nJOIN Payments p ON o.OrderID = p.OrderID\nWHERE p.Status = 'Завершено'\nGROUP BY c.City\nHAVING COUNT(*) > 5;",
            "gigachat_response_ru": "SELECT c.City, COUNT(*) AS CompletedPaymentsCount\nFROM Clients c\nJOIN Orders o ON c.ClientID = o.ClientID\nJOIN Payments p ON o.OrderID = p.OrderID\nWHERE p.Status = 'Завершено'\nGROUP BY c.City\nHAVING COUNT(*) > 5;"
        },
        {
            "question": "Какие сотрудники обработали более 3 успешных доставок?",
            "sql_query": "SELECT e.FirstName, e.LastName, COUNT(s.ShipmentID) AS ShipmentsHandled FROM Employees e JOIN Warehouses w ON e.EmployeeID = w.ManagerID JOIN Inventory i ON w.WarehouseID = i.WarehouseID JOIN OrderDetails od ON i.ProductID = od.ProductID JOIN Orders o ON od.OrderID = o.OrderID JOIN Shipments s ON o.OrderID = s.OrderID WHERE s.Status = 'Доставлено' GROUP BY e.FirstName, e.LastName HAVING COUNT(s.ShipmentID) > 3;",
            "gpt-4o_response": "SELECT e.EmployeeID, CONCAT(e.FirstName, ' ', e.LastName) AS EmployeeName, e.Title, COUNT(DISTINCT d.DeliveryID) AS SuccessfulDeliveries\nFROM Employees e\nJOIN Warehouses w ON e.EmployeeID = w.ManagerID\nJOIN Shipments s ON w.WarehouseID = s.ShipmentID\nJOIN Deliveries d ON s.ShipmentID = d.ShipmentID\nWHERE d.Status = 'Доставлено'\nGROUP BY e.EmployeeID, EmployeeName, e.Title\nHAVING COUNT(DISTINCT d.DeliveryID) > 3;",
            "gpt-4o_response_ru": "SELECT e.EmployeeID, CONCAT(e.FirstName, ' ', e.LastName) AS EmployeeName, e.Title, COUNT(d.DeliveryID) AS SuccessfulDeliveries\nFROM Employees e\nJOIN Deliveries d ON e.EmployeeID = d.DeliveryID\nWHERE d.Status = 'Доставлено'\nGROUP BY e.EmployeeID, EmployeeName, e.Title\nHAVING COUNT(d.DeliveryID) > 3;",
            "google/gemini-2.0-flash-001_response": "SELECT e.FirstName, e.LastName, COUNT(d.DeliveryID) AS SuccessfulDeliveriesCount\nFROM Employees e\nJOIN Warehouses w ON e.EmployeeID = w.ManagerID\nJOIN Inventory i ON w.WarehouseID = i.WarehouseID\nJOIN Products p ON i.ProductID = p.ProductID\nJOIN OrderDetails od ON p.ProductID = od.ProductID\nJOIN Orders o ON od.OrderID = o.OrderID\nJOIN Shipments s ON o.OrderID = s.OrderID\nJOIN Deliveries d ON s.ShipmentID = d.ShipmentID\nWHERE d.Status = 'Доставлено'\nGROUP BY e.EmployeeID, e.FirstName, e.LastName\nHAVING COUNT(d.DeliveryID) > 3;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT e.FirstName, e.LastName\nFROM Employees e\nJOIN Warehouses w ON e.EmployeeID = w.ManagerID\nJOIN Inventory i ON w.WarehouseID = i.WarehouseID\nJOIN Shipments s ON i.ProductID = s.ShipmentID\nJOIN Deliveries d ON s.ShipmentID = d.ShipmentID\nWHERE d.Status = 'Доставлено'\nGROUP BY e.EmployeeID, e.FirstName, e.LastName\nHAVING COUNT(DISTINCT d.DeliveryID) > 3;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT e.EmployeeID, CONCAT(e.FirstName, ' ', e.LastName) AS EmployeeName, e.Title, COUNT(DISTINCT d.DeliveryID) AS DeliveriesProcessed, \n       SUM(CASE WHEN d.Status = 'Доставлено' THEN 1 ELSE 0 END) AS SuccessfulDeliveries\nFROM Employees e \nJOIN Warehouses w ON e.EmployeeID = w.ManagerID \nJOIN Inventory i ON w.WarehouseID = i.WarehouseID \nJOIN Products p ON i.ProductID = p.ProductID \nJOIN OrderDetails od ON p.ProductID = od.ProductID \nJOIN Orders o ON od.OrderID = o.OrderID \nJOIN Shipments s ON o.OrderID = s.OrderID \nJOIN Deliveries d ON s.ShipmentID = d.ShipmentID \nGROUP BY e.EmployeeID, EmployeeName, e.Title \nHAVING SUM(CASE WHEN d.Status = 'Доставлено' THEN 1 ELSE 0 END) > 3\nORDER BY SuccessfulDeliveries DESC;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT e.EmployeeID, CONCAT(e.FirstName, ' ', e.LastName) AS EmployeeName, e.Title, \n       COUNT(DISTINCT d.DeliveryID) AS TotalDeliveries, \n       COUNT(DISTINCT CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID END) AS SuccessfulDeliveries\nFROM Employees e\nJOIN Deliveries d ON e.EmployeeID = d.VehicleID\nJOIN Vehicles v ON d.VehicleID = v.VehicleID\nWHERE d.Status = 'Доставлено'\nGROUP BY e.EmployeeID, EmployeeName, e.Title\nHAVING COUNT(DISTINCT d.DeliveryID) > 3\nORDER BY SuccessfulDeliveries DESC;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT e.EmployeeID, e.FirstName, e.LastName, e.Title, COUNT(DISTINCT d.DeliveryID) AS SuccessfulDeliveries\nFROM Employees e\nJOIN Warehouses w ON e.EmployeeID = w.ManagerID\nJOIN Inventory i ON w.WarehouseID = i.WarehouseID\nJOIN Products p ON i.ProductID = p.ProductID\nJOIN OrderDetails od ON p.ProductID = od.ProductID\nJOIN Orders o ON od.OrderID = o.OrderID\nJOIN Shipments s ON o.OrderID = s.OrderID\nJOIN Deliveries d ON s.ShipmentID = d.ShipmentID\nWHERE d.Status = 'Доставлено'\nGROUP BY e.EmployeeID, e.FirstName, e.LastName, e.Title\nHAVING COUNT(DISTINCT d.DeliveryID) > 3;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(DISTINCT d.DeliveryID) AS SuccessfulDeliveries\nFROM Employees e\nJOIN Deliveries d ON e.EmployeeID = d.DeliveryID\nWHERE d.Status = 'Доставлено'\nGROUP BY e.EmployeeID, e.FirstName, e.LastName\nHAVING COUNT(DISTINCT d.DeliveryID) > 3;",
            "gigachat_response": "SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(*) AS SuccessfulDeliveries\nFROM Employees e\nJOIN Shipments sh ON e.EmployeeID = sh.ShipperID\nWHERE sh.Status = 'Доставлено'\nGROUP BY e.EmployeeID, e.FirstName, e.LastName\nHAVING COUNT(*) > 3;",
            "gigachat_response_ru": "SELECT e.FirstName, e.LastName, COUNT(*) AS SuccessfulDeliveriesCount\nFROM Employees e\nJOIN Shipments sh ON e.EmployeeID = sh.ShipperID\nWHERE sh.Status = 'Доставлено'\nGROUP BY e.EmployeeID, e.FirstName, e.LastName\nHAVING COUNT(*) > 3;"
        },
        {
            "question": "Какие клиенты потратили более 7000 единиц на завершенные платежи?",
            "sql_query": "SELECT c.Name, SUM(p.Amount) AS TotalPayments FROM Clients c JOIN Orders o ON c.ClientID = o.ClientID JOIN Payments p ON o.OrderID = p.OrderID WHERE p.Status = 'Завершено' GROUP BY c.Name HAVING SUM(p.Amount) > 7000;",
            "gpt-4o_response": "SELECT c.Name, SUM(p.Amount) AS TotalPayments \nFROM Clients c \nJOIN Orders o ON c.ClientID = o.ClientID \nJOIN Payments p ON o.OrderID = p.OrderID \nWHERE p.Status = 'Завершено' \nGROUP BY c.Name \nHAVING SUM(p.Amount) > 7000;",
            "gpt-4o_response_ru": "SELECT c.Name, SUM(p.Amount) AS TotalPayments\nFROM Clients c\nJOIN Orders o ON c.ClientID = o.ClientID\nJOIN Payments p ON o.OrderID = p.OrderID\nWHERE p.Status = 'Завершено'\nGROUP BY c.Name\nHAVING SUM(p.Amount) > 7000;",
            "google/gemini-2.0-flash-001_response": "SELECT c.Name, SUM(p.Amount) AS TotalPayments FROM Clients c JOIN Orders o ON c.ClientID = o.ClientID JOIN Payments p ON o.OrderID = p.OrderID WHERE p.Status = 'Завершено' GROUP BY c.Name HAVING SUM(p.Amount) > 7000;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT c.Name, SUM(p.Amount) AS TotalSpent\nFROM Clients c\nJOIN Orders o ON c.ClientID = o.ClientID\nJOIN Payments p ON o.OrderID = p.OrderID\nWHERE p.Status = 'Завершено'\nGROUP BY c.Name\nHAVING SUM(p.Amount) > 7000;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT c.Name, SUM(p.Amount) AS TotalPayments \nFROM Clients c \nJOIN Orders o ON c.ClientID = o.ClientID \nJOIN Payments p ON o.OrderID = p.OrderID \nWHERE p.Status = 'Завершено' \nGROUP BY c.Name \nHAVING SUM(p.Amount) > 7000;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT c.Name, SUM(p.Amount) AS TotalPayments \nFROM Clients c \nJOIN Orders o ON c.ClientID = o.ClientID \nJOIN Payments p ON o.OrderID = p.OrderID \nWHERE p.Status = 'Завершено' \nGROUP BY c.Name \nHAVING SUM(p.Amount) > 7000;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT c.Name, SUM(p.Amount) AS TotalPayments \nFROM Clients c \nJOIN Orders o ON c.ClientID = o.ClientID \nJOIN Payments p ON o.OrderID = p.OrderID \nWHERE p.Status = 'Завершено' \nGROUP BY c.Name \nHAVING SUM(p.Amount) > 7000;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT c.Name, SUM(p.Amount) AS TotalPayments \nFROM Clients c \nJOIN Orders o ON c.ClientID = o.ClientID \nJOIN Payments p ON o.OrderID = p.OrderID \nWHERE p.Status = 'Завершено' \nGROUP BY c.Name \nHAVING SUM(p.Amount) > 7000;",
            "gigachat_response": "SELECT c.Name, SUM(p.Amount) AS TotalSpent\nFROM Clients c\nJOIN Orders o ON c.ClientID = o.ClientID\nJOIN Payments p ON o.OrderID = p.OrderID\nWHERE p.Status = 'Завершено'\nGROUP BY c.Name\nHAVING SUM(p.Amount) > 7000;",
            "gigachat_response_ru": "SELECT c.Name, SUM(p.Amount) AS TotalSpent\nFROM Clients c\nJOIN Orders o ON c.ClientID = o.ClientID\nJOIN Payments p ON o.OrderID = p.OrderID\nWHERE p.Status = 'Завершено'\nGROUP BY c.Name\nHAVING SUM(p.Amount) > 7000;"
        },
        {
            "question": "Какие города имеют более 8 успешных доставок?.",
            "sql_query": "SELECT c.City, COUNT(d.DeliveryID) AS DeliveriesCount FROM Clients c JOIN Orders o ON c.ClientID = o.ClientID JOIN Shipments s ON o.OrderID = s.OrderID JOIN Deliveries d ON s.ShipmentID = d.ShipmentID WHERE d.Status = 'Доставлено' GROUP BY c.City HAVING COUNT(d.DeliveryID) > 8;",
            "gpt-4o_response": "SELECT s.City, COUNT(d.DeliveryID) AS SuccessfulDeliveries\nFROM Deliveries d\nJOIN Shipments s ON d.ShipmentID = s.ShipmentID\nJOIN Shippers sh ON s.ShipperID = sh.ShipperID\nWHERE d.Status = 'Доставлено'\nGROUP BY s.City\nHAVING COUNT(d.DeliveryID) > 8;",
            "gpt-4o_response_ru": "SELECT s.City, COUNT(d.DeliveryID) AS SuccessfulDeliveries\nFROM Deliveries d\nJOIN Shipments s ON d.ShipmentID = s.ShipmentID\nJOIN Shippers sh ON s.ShipperID = sh.ShipperID\nWHERE d.Status = 'Доставлено'\nGROUP BY s.City\nHAVING COUNT(d.DeliveryID) > 8;",
            "google/gemini-2.0-flash-001_response": "SELECT w.City\nFROM Warehouses w\nJOIN Inventory i ON w.WarehouseID = i.WarehouseID\nJOIN Products p ON i.ProductID = p.ProductID\nJOIN OrderDetails od ON p.ProductID = od.ProductID\nJOIN Orders o ON od.OrderID = o.OrderID\nJOIN Shipments s ON o.OrderID = s.OrderID\nJOIN Deliveries d ON s.ShipmentID = d.ShipmentID\nWHERE d.Status = 'Доставлено'\nGROUP BY w.City\nHAVING COUNT(DISTINCT d.DeliveryID) > 8;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT W.City\nFROM Deliveries D\nJOIN Shipments S ON D.ShipmentID = S.ShipmentID\nJOIN Shippers SH ON S.ShipperID = SH.ShipperID\nJOIN Routes R ON SH.ShipperID = R.ShipperID\nJOIN Warehouses W ON R.StartLocation = W.City\nWHERE D.Status = 'Доставлено'\nGROUP BY W.City\nHAVING COUNT(D.DeliveryID) > 8;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT c.City, COUNT(DISTINCT d.DeliveryID) AS SuccessfulDeliveries\nFROM Deliveries d\nJOIN Shipments s ON d.ShipmentID = s.ShipmentID\nJOIN Orders o ON s.OrderID = o.OrderID\nJOIN Clients c ON o.ClientID = c.ClientID\nWHERE d.Status = 'Доставлено'\nGROUP BY c.City\nHAVING COUNT(DISTINCT d.DeliveryID) > 8;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT c.City, COUNT(DISTINCT o.OrderID) AS SuccessfulDeliveries\nFROM Clients c\nJOIN Orders o ON c.ClientID = o.ClientID\nWHERE o.Status = 'Доставлено'\nGROUP BY c.City\nHAVING COUNT(DISTINCT o.OrderID) > 8;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT c.City, COUNT(*) AS SuccessfulDeliveries \nFROM Clients c \nJOIN Orders o ON c.ClientID = o.ClientID \nJOIN Shipments s ON o.OrderID = s.OrderID \nWHERE s.Status = 'Доставлено' \nGROUP BY c.City \nHAVING COUNT(*) > 8;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT c.City, COUNT(*) AS SuccessfulDeliveries \nFROM Clients c \nJOIN Orders o ON c.ClientID = o.ClientID \nJOIN Shipments s ON o.OrderID = s.OrderID \nWHERE s.Status = 'Доставлено' \nGROUP BY c.City \nHAVING COUNT(*) > 8;",
            "gigachat_response": "SELECT sh.City, COUNT(*) AS SuccessfulDeliveries\nFROM Shipments sh\nJOIN Deliveries de ON sh.ShipmentID = de.ShipmentID\nWHERE de.Status = 'Доставлено'\nGROUP BY sh.City\nHAVING COUNT(*) > 8;",
            "gigachat_response_ru": "SELECT sh.City, COUNT(*) AS SuccessfulDeliveries\nFROM Shipments sh\nWHERE sh.Status = 'Доставлено'\nGROUP BY sh.City\nHAVING COUNT(*) > 8;"
        },
        {
            "question": "Какие поставщики имеют общую стоимость инвентаря более 15000 единиц?",
            "sql_query": "SELECT s.Name, SUM(p.UnitPrice * i.Quantity) AS TotalInventoryValue FROM Suppliers s JOIN Products p ON s.SupplierID = p.SupplierID JOIN Inventory i ON p.ProductID = i.ProductID WHERE p.Discontinued = FALSE GROUP BY s.Name HAVING SUM(p.UnitPrice * i.Quantity) > 15000;",
            "gpt-4o_response": "SELECT s.Name, SUM(i.Quantity * p.UnitPrice) AS TotalInventoryValue\nFROM Suppliers s\nJOIN Products p ON s.SupplierID = p.SupplierID\nJOIN Inventory i ON p.ProductID = i.ProductID\nGROUP BY s.Name\nHAVING SUM(i.Quantity * p.UnitPrice) > 15000;",
            "gpt-4o_response_ru": "SELECT s.Name, SUM(i.Quantity * p.UnitPrice) AS TotalInventoryValue\nFROM Suppliers s\nJOIN Products p ON s.SupplierID = p.SupplierID\nJOIN Inventory i ON p.ProductID = i.ProductID\nGROUP BY s.Name\nHAVING SUM(i.Quantity * p.UnitPrice) > 15000;",
            "google/gemini-2.0-flash-001_response": "SELECT s.Name\nFROM Suppliers s\nJOIN Products p ON s.SupplierID = p.SupplierID\nJOIN Inventory i ON p.ProductID = i.ProductID\nGROUP BY s.Name\nHAVING SUM(i.Quantity) > 15000;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT s.Name AS SupplierName, SUM(i.Quantity) AS TotalInventoryQuantity\nFROM Suppliers s\nJOIN Products p ON s.SupplierID = p.SupplierID\nJOIN Inventory i ON p.ProductID = i.ProductID\nGROUP BY s.Name\nHAVING SUM(i.Quantity) > 15000;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT s.Name, SUM(i.Quantity * p.UnitPrice) AS TotalInventoryCost\nFROM Suppliers s\nJOIN Products p ON s.SupplierID = p.SupplierID\nJOIN Inventory i ON p.ProductID = i.ProductID\nGROUP BY s.Name\nHAVING SUM(i.Quantity * p.UnitPrice) > 15000;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT s.SupplierID, s.Name, SUM(i.Quantity * p.UnitPrice) AS TotalInventoryCost\nFROM Suppliers s\nJOIN Products p ON s.SupplierID = p.SupplierID\nJOIN Inventory i ON p.ProductID = i.ProductID\nGROUP BY s.SupplierID, s.Name\nHAVING SUM(i.Quantity * p.UnitPrice) > 15000\nORDER BY TotalInventoryCost DESC;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT s.SupplierID, s.Name, SUM(p.UnitPrice * i.Quantity) AS TotalInventoryValue \nFROM Suppliers s \nJOIN Products p ON s.SupplierID = p.SupplierID \nJOIN Inventory i ON p.ProductID = i.ProductID \nGROUP BY s.SupplierID, s.Name \nHAVING SUM(p.UnitPrice * i.Quantity) > 15000;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT s.SupplierID, s.Name, SUM(p.UnitPrice * i.Quantity) AS TotalInventoryValue\nFROM Suppliers s\nJOIN Products p ON s.SupplierID = p.SupplierID\nJOIN Inventory i ON p.ProductID = i.ProductID\nGROUP BY s.SupplierID, s.Name\nHAVING SUM(p.UnitPrice * i.Quantity) > 15000;",
            "gigachat_response": "SELECT s.Name, SUM(i.Quantity * p.UnitPrice) AS TotalInventoryValue\nFROM Suppliers s\nJOIN Products p ON s.SupplierID = p.SupplierID\nJOIN Inventory i ON p.ProductID = i.ProductID\nGROUP BY s.Name\nHAVING SUM(i.Quantity * p.UnitPrice) > 15000;",
            "gigachat_response_ru": "SELECT s.Name, SUM(i.Quantity * p.UnitPrice) AS TotalInventoryValue\nFROM Suppliers s\nJOIN Products p ON s.SupplierID = p.SupplierID\nJOIN Inventory i ON p.ProductID = i.ProductID\nGROUP BY s.Name\nHAVING SUM(i.Quantity * p.UnitPrice) > 15000;"
        },
        {
            "question": "Какие сотрудники имеют средний платеж более 1500 единиц по завершенным платежам?",
            "sql_query": "SELECT e.FirstName, e.LastName, AVG(p.Amount) AS AvgPayment FROM Employees e JOIN Warehouses w ON e.EmployeeID = w.ManagerID JOIN Inventory i ON w.WarehouseID = i.WarehouseID JOIN OrderDetails od ON i.ProductID = od.ProductID JOIN Orders o ON od.OrderID = o.OrderID JOIN Payments p ON o.OrderID = p.OrderID WHERE p.Status = 'Завершено' GROUP BY e.FirstName, e.LastName HAVING AVG(p.Amount) > 1500;",
            "gpt-4o_response": "SELECT e.FirstName, e.LastName, AVG(p.Amount) AS AvgPayment\nFROM Employees e\nJOIN Warehouses w ON e.EmployeeID = w.ManagerID\nJOIN Inventory i ON w.WarehouseID = i.WarehouseID\nJOIN Products pr ON i.ProductID = pr.ProductID\nJOIN OrderDetails od ON pr.ProductID = od.ProductID\nJOIN Orders o ON od.OrderID = o.OrderID\nJOIN Payments p ON o.OrderID = p.OrderID\nWHERE p.Status = 'Завершено'\nGROUP BY e.FirstName, e.LastName\nHAVING AVG(p.Amount) > 1500;",
            "gpt-4o_response_ru": "SELECT e.EmployeeID, CONCAT(e.FirstName, ' ', e.LastName) AS EmployeeName, AVG(p.Amount) AS AvgPayment\nFROM Employees e\nJOIN Warehouses w ON e.EmployeeID = w.ManagerID\nJOIN Inventory i ON w.WarehouseID = i.WarehouseID\nJOIN Products pr ON i.ProductID = pr.ProductID\nJOIN OrderDetails od ON pr.ProductID = od.ProductID\nJOIN Orders o ON od.OrderID = o.OrderID\nJOIN Payments p ON o.OrderID = p.OrderID\nWHERE p.Status = 'Завершено'\nGROUP BY e.EmployeeID, EmployeeName\nHAVING AVG(p.Amount) > 1500;",
            "google/gemini-2.0-flash-001_response": "SELECT \n    e.FirstName,\n    e.LastName,\n    AVG(p.Amount) AS AveragePayment\nFROM Employees e\nJOIN Warehouses w ON e.EmployeeID = w.ManagerID\nJOIN Inventory i ON w.WarehouseID = i.WarehouseID\nJOIN Products pr ON i.ProductID = pr.ProductID\nJOIN OrderDetails od ON pr.ProductID = od.ProductID\nJOIN Orders o ON od.OrderID = o.OrderID\nJOIN Payments p ON o.OrderID = p.OrderID\nWHERE p.Status = 'Завершено'\nGROUP BY e.EmployeeID, e.FirstName, e.LastName\nHAVING AVG(p.Amount) > 1500;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT e.FirstName, e.LastName, AVG(p.Amount) AS AveragePayment\nFROM Employees e\nJOIN Warehouses w ON e.EmployeeID = w.ManagerID\nJOIN Inventory i ON w.WarehouseID = i.WarehouseID\nJOIN Products pr ON i.ProductID = pr.ProductID\nJOIN OrderDetails od ON pr.ProductID = od.ProductID\nJOIN Orders o ON od.OrderID = o.OrderID\nJOIN Payments p ON o.OrderID = p.OrderID\nWHERE p.Status = 'Завершено'\nGROUP BY e.EmployeeID, e.FirstName, e.LastName\nHAVING AVG(p.Amount) > 1500;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT e.FirstName, e.LastName, AVG(p.Amount) AS AvgPayment \nFROM Employees e \nJOIN Orders o ON e.EmployeeID = o.ClientID \nJOIN Payments p ON o.OrderID = p.OrderID \nWHERE p.Status = 'Завершено' \nGROUP BY e.FirstName, e.LastName \nHAVING AVG(p.Amount) > 1500;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT e.EmployeeID, CONCAT(e.FirstName, ' ', e.LastName) AS EmployeeName, AVG(p.Amount) AS AvgPayment \nFROM Employees e \nJOIN Orders o ON e.EmployeeID = o.EmployeeID \nJOIN Payments p ON o.OrderID = p.OrderID \nWHERE p.Status = 'Завершено' \nGROUP BY e.EmployeeID, EmployeeName \nHAVING AVG(p.Amount) > 1500;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT e.EmployeeID, CONCAT(e.FirstName, ' ', e.LastName) AS EmployeeName, AVG(p.Amount) AS AvgPayment \nFROM Employees e \nJOIN Warehouses w ON e.EmployeeID = w.ManagerID \nJOIN Inventory i ON w.WarehouseID = i.WarehouseID \nJOIN Products pr ON i.ProductID = pr.ProductID \nJOIN OrderDetails od ON pr.ProductID = od.ProductID \nJOIN Orders o ON od.OrderID = o.OrderID \nJOIN Payments p ON o.OrderID = p.OrderID \nWHERE p.Status = 'Завершено' \nGROUP BY e.EmployeeID, EmployeeName \nHAVING AVG(p.Amount) > 1500;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT e.EmployeeID, CONCAT(e.FirstName, ' ', e.LastName) AS EmployeeName, AVG(p.Amount) AS AvgPayment \nFROM Employees e \nJOIN Orders o ON e.EmployeeID = o.ClientID \nJOIN Payments p ON o.OrderID = p.OrderID \nWHERE p.Status = 'Завершено' \nGROUP BY e.EmployeeID, EmployeeName \nHAVING AVG(p.Amount) > 1500;",
            "gigachat_response": "SELECT e.FirstName, e.LastName, AVG(p.Amount) AS AveragePayment\nFROM Employees e\nJOIN Orders o ON e.EmployeeID = o.ClientID -- Assuming employees can also act as clients\nJOIN Payments p ON o.OrderID = p.OrderID\nWHERE p.Status = 'Завершено'\nGROUP BY e.FirstName, e.LastName\nHAVING AVG(p.Amount) > 1500;",
            "gigachat_response_ru": "SELECT e.FirstName, e.LastName, AVG(p.Amount) AS AveragePayment\nFROM Employees e\nJOIN Orders o ON e.EmployeeID = o.ClientID -- Предположим, что сотрудник связан с клиентом через поле ClientID\nJOIN Payments p ON o.OrderID = p.OrderID\nWHERE p.Status = 'Завершено'\nGROUP BY e.FirstName, e.LastName\nHAVING AVG(p.Amount) > 1500;"
        },
        {
            "question": "Какие клиенты имеют более 5 доставок?",
            "sql_query": "SELECT c.Name, COUNT(s.ShipmentID) AS ShipmentsCount FROM Clients c JOIN Orders o ON c.ClientID = o.ClientID JOIN Shipments s ON o.OrderID = s.OrderID WHERE s.Status = 'Доставлено' GROUP BY c.Name HAVING COUNT(s.ShipmentID) > 5;",
            "gpt-4o_response": "SELECT c.Name, COUNT(d.DeliveryID) AS DeliveryCount\nFROM Clients c\nJOIN Orders o ON c.ClientID = o.ClientID\nJOIN Shipments s ON o.OrderID = s.OrderID\nJOIN Deliveries d ON s.ShipmentID = d.ShipmentID\nGROUP BY c.Name\nHAVING COUNT(d.DeliveryID) > 5;",
            "gpt-4o_response_ru": "SELECT c.ClientID, c.Name, COUNT(d.DeliveryID) AS DeliveryCount\nFROM Clients c\nJOIN Orders o ON c.ClientID = o.ClientID\nJOIN Shipments s ON o.OrderID = s.OrderID\nJOIN Deliveries d ON s.ShipmentID = d.ShipmentID\nGROUP BY c.ClientID, c.Name\nHAVING COUNT(d.DeliveryID) > 5;",
            "google/gemini-2.0-flash-001_response": "SELECT c.ClientID, c.Name, COUNT(DISTINCT d.DeliveryID) AS NumberOfDeliveries\nFROM Clients c\nJOIN Orders o ON c.ClientID = o.ClientID\nJOIN Shipments s ON o.OrderID = s.OrderID\nJOIN Deliveries d ON s.ShipmentID = d.ShipmentID\nGROUP BY c.ClientID, c.Name\nHAVING COUNT(DISTINCT d.DeliveryID) > 5;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT c.Name\nFROM Clients c\nJOIN Orders o ON c.ClientID = o.ClientID\nJOIN Shipments s ON o.OrderID = s.OrderID\nGROUP BY c.ClientID, c.Name\nHAVING COUNT(DISTINCT s.ShipmentID) > 5;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT c.ClientID, c.Name, COUNT(DISTINCT s.ShipmentID) AS TotalDeliveries \nFROM Clients c \nJOIN Orders o ON c.ClientID = o.ClientID \nJOIN Shipments s ON o.OrderID = s.OrderID \nGROUP BY c.ClientID, c.Name \nHAVING COUNT(DISTINCT s.ShipmentID) > 5;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT c.ClientID, c.Name, COUNT(DISTINCT d.DeliveryID) AS TotalDeliveries \nFROM Clients c \nJOIN Orders o ON c.ClientID = o.ClientID \nJOIN Shipments s ON o.OrderID = s.OrderID \nJOIN Deliveries d ON s.ShipmentID = d.ShipmentID \nGROUP BY c.ClientID, c.Name \nHAVING COUNT(DISTINCT d.DeliveryID) > 5",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT c.ClientID, c.Name, COUNT(s.ShipmentID) AS DeliveryCount \nFROM Clients c \nJOIN Orders o ON c.ClientID = o.ClientID \nJOIN Shipments s ON o.OrderID = s.OrderID \nGROUP BY c.ClientID, c.Name \nHAVING COUNT(s.ShipmentID) > 5;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT c.Name, COUNT(s.ShipmentID) AS DeliveryCount \nFROM Clients c \nJOIN Orders o ON c.ClientID = o.ClientID \nJOIN Shipments s ON o.OrderID = s.OrderID \nGROUP BY c.Name \nHAVING COUNT(s.ShipmentID) > 5;",
            "gigachat_response": "SELECT c.Name, COUNT(s.ShipmentID) AS NumberOfDeliveries\nFROM Clients c\nJOIN Orders o ON c.ClientID = o.ClientID\nJOIN Shipments s ON o.OrderID = s.OrderID\nGROUP BY c.Name\nHAVING COUNT(s.ShipmentID) > 5;",
            "gigachat_response_ru": "SELECT c.Name, COUNT(s.ShipmentID) AS NumberOfDeliveries\nFROM Clients c\nJOIN Orders o ON c.ClientID = o.ClientID\nJOIN Shipments s ON o.OrderID = s.OrderID\nGROUP BY c.Name\nHAVING COUNT(s.ShipmentID) > 5;"
        },
        {
            "question": "Какие продукты имеют высокий уровень возвратов и их поставщики? Покажите топ-5 продуктов с наибольшим количеством возвратов, включая название продукта, категорию, название поставщика, количество возвратов и общее количество возвращенных единиц.",
            "sql_query": "SELECT p.Name, p.Category, s.Name as SupplierName, COUNT(DISTINCT r.ReturnID) as ReturnCount, SUM(r.Quantity) as TotalReturnedQuantity FROM Products p JOIN Suppliers s ON p.SupplierID = s.SupplierID JOIN `Returns` r ON p.ProductID = r.ProductID WHERE r.Status = 'Возврат выполнен' GROUP BY p.Name, p.Category, s.Name HAVING COUNT(DISTINCT r.ReturnID) > 2 ORDER BY ReturnCount DESC LIMIT 5;",
            "gpt-4o_response": "SELECT \n    p.Name AS ProductName,\n    p.Category,\n    s.Name AS SupplierName,\n    COUNT(r.ReturnID) AS ReturnCount,\n    SUM(r.Quantity) AS TotalReturnedUnits\nFROM \n    Returns r\nJOIN \n    Products p ON r.ProductID = p.ProductID\nJOIN \n    Suppliers s ON p.SupplierID = s.SupplierID\nGROUP BY \n    p.Name, p.Category, s.Name\nORDER BY \n    ReturnCount DESC, TotalReturnedUnits DESC\nLIMIT 5;",
            "gpt-4o_response_ru": "SELECT \n    p.Name AS ProductName,\n    p.Category,\n    s.Name AS SupplierName,\n    COUNT(r.ReturnID) AS ReturnCount,\n    SUM(r.Quantity) AS TotalReturnedUnits\nFROM \n    Returns r\nJOIN \n    Products p ON r.ProductID = p.ProductID\nJOIN \n    Suppliers s ON p.SupplierID = s.SupplierID\nGROUP BY \n    p.ProductID, p.Name, p.Category, s.Name\nORDER BY \n    ReturnCount DESC, TotalReturnedUnits DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    p.Name AS ProductName,\n    p.Category AS ProductCategory,\n    s.Name AS SupplierName,\n    COUNT(r.ReturnID) AS ReturnCount,\n    SUM(r.Quantity) AS TotalReturnedQuantity\nFROM\n    `Returns` r\nJOIN\n    Products p ON r.ProductID = p.ProductID\nJOIN\n    Suppliers s ON p.SupplierID = s.SupplierID\nGROUP BY\n    p.ProductID, p.Name, p.Category, s.Name\nORDER BY\n    ReturnCount DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    p.Name AS ProductName,\n    p.Category AS ProductCategory,\n    s.Name AS SupplierName,\n    COUNT(r.ReturnID) AS TotalReturns,\n    SUM(r.Quantity) AS TotalReturnedQuantity\nFROM\n    `Returns` r\nJOIN\n    Products p ON r.ProductID = p.ProductID\nJOIN\n    Suppliers s ON p.SupplierID = s.SupplierID\nGROUP BY\n    p.ProductID, p.Name, p.Category, s.Name\nORDER BY\n    TotalReturns DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    p.Name AS ProductName, \n    p.Category, \n    s.Name AS SupplierName, \n    COUNT(r.ReturnID) AS ReturnCount, \n    SUM(r.Quantity) AS TotalReturnedUnits\nFROM \n    Returns r\nJOIN \n    Products p ON r.ProductID = p.ProductID\nJOIN \n    Suppliers s ON p.SupplierID = s.SupplierID\nGROUP BY \n    p.Name, p.Category, s.Name\nORDER BY \n    ReturnCount DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    p.Name AS ProductName, \n    p.Category, \n    s.Name AS SupplierName, \n    COUNT(r.ReturnID) AS NumberOfReturns, \n    SUM(r.Quantity) AS TotalReturnedUnits\nFROM \n    Products p\nJOIN \n    Suppliers s ON p.SupplierID = s.SupplierID\nJOIN \n    `Returns` r ON p.ProductID = r.ProductID\nGROUP BY \n    p.Name, p.Category, s.Name\nORDER BY \n    TotalReturnedUnits DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    p.Name AS ProductName, \n    p.Category, \n    s.Name AS SupplierName, \n    COUNT(r.ReturnID) AS ReturnCount, \n    SUM(r.Quantity) AS TotalReturnedUnits\nFROM \n    Products p\nJOIN \n    `Returns` r ON p.ProductID = r.ProductID\nJOIN \n    Suppliers s ON p.SupplierID = s.SupplierID\nGROUP BY \n    p.Name, p.Category, s.Name\nORDER BY \n    ReturnCount DESC, TotalReturnedUnits DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    p.Name AS ProductName,\n    p.Category,\n    s.Name AS SupplierName,\n    COUNT(r.ReturnID) AS ReturnCount,\n    SUM(r.Quantity) AS TotalReturnedUnits\nFROM \n    Products p\nJOIN \n    Suppliers s ON p.SupplierID = s.SupplierID\nJOIN \n    `Returns` r ON p.ProductID = r.ProductID\nGROUP BY \n    p.ProductID, p.Name, p.Category, s.Name\nORDER BY \n    ReturnCount DESC, TotalReturnedUnits DESC\nLIMIT 5;",
            "gigachat_response": "SELECT \n    p.Name AS ProductName,\n    p.Category AS ProductCategory,\n    s.Name AS SupplierName,\n    COUNT(r.ReturnID) AS NumberOfReturns,\n    SUM(r.Quantity) AS TotalReturnedUnits\nFROM \n    Products p\nJOIN \n    Suppliers s ON p.SupplierID = s.SupplierID\nJOIN \n    `Returns` r ON p.ProductID = r.ProductID\nGROUP BY \n    p.ProductID, p.Name, p.Category, s.Name\nORDER BY \n    NumberOfReturns DESC\nLIMIT 5;",
            "gigachat_response_ru": "SELECT \n    p.Name AS ProductName,\n    p.Category AS ProductCategory,\n    s.Name AS SupplierName,\n    COUNT(r.ReturnID) AS NumberOfReturns,\n    SUM(r.Quantity) AS TotalReturnedUnits\nFROM \n    Products p\nJOIN \n    Suppliers s ON p.SupplierID = s.SupplierID\nJOIN \n    `Returns` r ON p.ProductID = r.ProductID\nGROUP BY \n    p.ProductID, p.Name, p.Category, s.Name\nORDER BY \n    NumberOfReturns DESC\nLIMIT 5;"
        },
        {
            "question": "Какие маршруты доставки наиболее эффективны с точки зрения использования транспортных средств? Покажите топ-8 маршрутов с наибольшим количеством успешных доставок, включая начальную и конечную точку, расстояние, модель транспортного средства, количество доставок и количество успешных доставок.",
            "sql_query": "SELECT r.StartLocation, r.EndLocation, r.Distance, v.Model, COUNT(DISTINCT d.DeliveryID) as DeliveryCount, SUM(CASE WHEN d.Status = 'Доставлено' THEN 1 ELSE 0 END) as SuccessfulDeliveries FROM Routes r JOIN Vehicles v ON r.ShipperID = v.ShipperID JOIN Deliveries d ON v.VehicleID = d.VehicleID WHERE r.Status = 'Активен' GROUP BY r.StartLocation, r.EndLocation, r.Distance, v.Model HAVING COUNT(DISTINCT d.DeliveryID) > 3 ORDER BY SuccessfulDeliveries DESC LIMIT 8;",
            "gpt-4o_response": "SELECT \n    r.RouteID,\n    r.StartLocation,\n    r.EndLocation,\n    r.Distance,\n    v.Model AS VehicleModel,\n    COUNT(d.DeliveryID) AS TotalDeliveries,\n    COUNT(CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID END) AS SuccessfulDeliveries\nFROM \n    Routes r\nJOIN \n    Shippers s ON r.ShipperID = s.ShipperID\nJOIN \n    Vehicles v ON s.ShipperID = v.ShipperID\nJOIN \n    Deliveries d ON v.VehicleID = d.VehicleID\nGROUP BY \n    r.RouteID, r.StartLocation, r.EndLocation, r.Distance, v.Model\nORDER BY \n    SuccessfulDeliveries DESC\nLIMIT 8;",
            "gpt-4o_response_ru": "SELECT \n    r.RouteID,\n    r.StartLocation,\n    r.EndLocation,\n    r.Distance,\n    v.Model AS VehicleModel,\n    COUNT(d.DeliveryID) AS TotalDeliveries,\n    COUNT(CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID END) AS SuccessfulDeliveries\nFROM \n    Routes r\nJOIN \n    Shipments s ON r.ShipperID = s.ShipperID\nJOIN \n    Deliveries d ON s.ShipmentID = d.ShipmentID\nJOIN \n    Vehicles v ON d.VehicleID = v.VehicleID\nGROUP BY \n    r.RouteID, r.StartLocation, r.EndLocation, r.Distance, v.Model\nORDER BY \n    SuccessfulDeliveries DESC\nLIMIT 8;",
            "google/gemini-2.0-flash-001_response": "SELECT \n    r.StartLocation,\n    r.EndLocation,\n    r.Distance,\n    v.Model AS VehicleModel,\n    COUNT(d.DeliveryID) AS TotalDeliveries,\n    SUM(CASE WHEN d.Status = 'Доставлено' THEN 1 ELSE 0 END) AS SuccessfulDeliveries\nFROM Routes r\nJOIN Shipments s ON r.ShipperID = s.ShipperID\nJOIN Deliveries d ON s.ShipmentID = d.ShipmentID\nJOIN Vehicles v ON d.VehicleID = v.VehicleID\nWHERE r.Status = 'Активен' OR r.Status = 'Завершен'\nGROUP BY r.RouteID, r.StartLocation, r.EndLocation, r.Distance, v.Model\nORDER BY SuccessfulDeliveries DESC\nLIMIT 8;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    r.StartLocation,\n    r.EndLocation,\n    r.Distance,\n    v.Model AS VehicleModel,\n    COUNT(d.DeliveryID) AS TotalDeliveries,\n    SUM(CASE WHEN d.Status = 'Доставлено' THEN 1 ELSE 0 END) AS SuccessfulDeliveries\nFROM\n    Routes r\nJOIN\n    Shipments s ON r.ShipperID = s.ShipperID\nJOIN\n    Deliveries d ON s.ShipmentID = d.ShipmentID\nJOIN\n    Vehicles v ON d.VehicleID = v.VehicleID\nGROUP BY\n    r.RouteID, r.StartLocation, r.EndLocation, r.Distance, v.Model\nORDER BY\n    SuccessfulDeliveries DESC\nLIMIT 8;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    r.StartLocation, \n    r.EndLocation, \n    r.Distance, \n    v.Model, \n    COUNT(d.DeliveryID) AS TotalDeliveries, \n    COUNT(CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID END) AS SuccessfulDeliveries\nFROM \n    Routes r\nJOIN \n    Shippers s ON r.ShipperID = s.ShipperID\nJOIN \n    Vehicles v ON s.ShipperID = v.ShipperID\nJOIN \n    Deliveries d ON v.VehicleID = d.VehicleID\nGROUP BY \n    r.StartLocation, \n    r.EndLocation, \n    r.Distance, \n    v.Model\nORDER BY \n    SuccessfulDeliveries DESC\nLIMIT 8;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    r.StartLocation, \n    r.EndLocation, \n    r.Distance, \n    v.Model, \n    COUNT(d.DeliveryID) AS TotalDeliveries, \n    SUM(CASE WHEN d.Status = 'Доставлено' THEN 1 ELSE 0 END) AS SuccessfulDeliveries\nFROM \n    Routes r\nJOIN \n    Shippers s ON r.ShipperID = s.ShipperID\nJOIN \n    Shipments sh ON s.ShipperID = sh.ShipperID\nJOIN \n    Deliveries d ON sh.ShipmentID = d.ShipmentID\nJOIN \n    Vehicles v ON d.VehicleID = v.VehicleID\nGROUP BY \n    r.StartLocation, \n    r.EndLocation, \n    r.Distance, \n    v.Model\nORDER BY \n    SuccessfulDeliveries DESC\nLIMIT 8;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    r.RouteID,\n    r.StartLocation,\n    r.EndLocation,\n    r.Distance,\n    v.Model AS VehicleModel,\n    COUNT(d.DeliveryID) AS TotalDeliveries,\n    COUNT(CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID END) AS SuccessfulDeliveries\nFROM \n    Routes r\nJOIN \n    Deliveries d ON r.ShipperID = (SELECT ShipperID FROM Shipments WHERE ShipmentID = d.ShipmentID)\nJOIN \n    Vehicles v ON d.VehicleID = v.VehicleID\nGROUP BY \n    r.RouteID, r.StartLocation, r.EndLocation, r.Distance, v.Model\nORDER BY \n    SuccessfulDeliveries DESC, TotalDeliveries DESC\nLIMIT 8;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    r.RouteID,\n    r.StartLocation,\n    r.EndLocation,\n    r.Distance,\n    v.Model AS VehicleModel,\n    COUNT(d.DeliveryID) AS TotalDeliveries,\n    COUNT(CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID END) AS SuccessfulDeliveries\nFROM \n    Routes r\nJOIN \n    Shippers s ON r.ShipperID = s.ShipperID\nJOIN \n    Vehicles v ON s.ShipperID = v.ShipperID\nJOIN \n    Deliveries d ON v.VehicleID = d.VehicleID\nGROUP BY \n    r.RouteID, r.StartLocation, r.EndLocation, r.Distance, v.Model\nORDER BY \n    SuccessfulDeliveries DESC, TotalDeliveries DESC\nLIMIT 8;",
            "gigachat_response": "SELECT r.RouteID, r.StartLocation, r.EndLocation, r.Distance, v.Model AS VehicleModel, \n       COUNT(d.DeliveryID) AS TotalDeliveries, \n       COUNT(CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID END) AS SuccessfulDeliveries\nFROM Routes r\nJOIN Shipments s ON r.ShipperID = s.ShipperID\nJOIN Deliveries d ON s.ShipmentID = d.ShipmentID\nJOIN Vehicles v ON d.VehicleID = v.VehicleID\nGROUP BY r.RouteID, r.StartLocation, r.EndLocation, r.Distance, v.Model\nORDER BY SuccessfulDeliveries DESC\nLIMIT 8;",
            "gigachat_response_ru": "SELECT r.RouteID, r.StartLocation, r.EndLocation, r.Distance, v.Model AS VehicleModel, \n       COUNT(*) AS TotalDeliveries, \n       COUNT(CASE WHEN d.Status = 'Доставлено' THEN 1 ELSE NULL END) AS SuccessfulDeliveries\nFROM Routes r\nJOIN Shipments sh ON r.ShipperID = sh.ShipperID\nJOIN Deliveries d ON sh.ShipmentID = d.ShipmentID\nJOIN Vehicles v ON d.VehicleID = v.VehicleID\nWHERE d.Status IN ('Доставлено', 'В пути')\nGROUP BY r.RouteID, r.StartLocation, r.EndLocation, r.Distance, v.Model\nORDER BY SuccessfulDeliveries DESC\nLIMIT 8;"
        },
        {
            "question": "Как распределяется инвентарь по категориям продуктов на складах? Покажите топ-6 категорий с наибольшей стоимостью инвентаря, включая название склада, категорию продукта, количество уникальных продуктов, общее количество товаров и стоимость инвентаря.",
            "sql_query": "SELECT w.Name as WarehouseName, p.Category, COUNT(DISTINCT i.ProductID) as UniqueProducts, SUM(i.Quantity) as TotalStock, SUM(i.Quantity * p.UnitPrice) as InventoryValue FROM Warehouses w JOIN Inventory i ON w.WarehouseID = i.WarehouseID JOIN Products p ON i.ProductID = p.ProductID WHERE p.Discontinued = FALSE GROUP BY w.Name, p.Category HAVING SUM(i.Quantity) > 50 ORDER BY InventoryValue DESC LIMIT 6;",
            "gpt-4o_response": "SELECT \n    w.Name AS WarehouseName,\n    p.Category,\n    COUNT(DISTINCT p.ProductID) AS UniqueProductCount,\n    SUM(i.Quantity) AS TotalProductQuantity,\n    SUM(i.Quantity * p.UnitPrice) AS InventoryValue\nFROM \n    Inventory i\nJOIN \n    Products p ON i.ProductID = p.ProductID\nJOIN \n    Warehouses w ON i.WarehouseID = w.WarehouseID\nGROUP BY \n    w.Name, p.Category\nORDER BY \n    InventoryValue DESC\nLIMIT 6;",
            "gpt-4o_response_ru": "SELECT \n    w.Name AS WarehouseName,\n    p.Category,\n    COUNT(DISTINCT p.ProductID) AS UniqueProductCount,\n    SUM(i.Quantity) AS TotalProductQuantity,\n    SUM(i.Quantity * p.UnitPrice) AS InventoryValue\nFROM \n    Inventory i\nJOIN \n    Products p ON i.ProductID = p.ProductID\nJOIN \n    Warehouses w ON i.WarehouseID = w.WarehouseID\nGROUP BY \n    w.Name, p.Category\nORDER BY \n    InventoryValue DESC\nLIMIT 6;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    w.Name AS WarehouseName,\n    p.Category AS ProductCategory,\n    COUNT(DISTINCT p.ProductID) AS UniqueProducts,\n    SUM(i.Quantity) AS TotalQuantity,\n    SUM(i.Quantity * p.UnitPrice) AS InventoryValue\nFROM\n    Warehouses w\nJOIN\n    Inventory i ON w.WarehouseID = i.WarehouseID\nJOIN\n    Products p ON i.ProductID = p.ProductID\nGROUP BY\n    w.Name,\n    p.Category\nORDER BY\n    InventoryValue DESC\nLIMIT 6;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    w.Name AS WarehouseName,\n    p.Category AS ProductCategory,\n    COUNT(DISTINCT p.ProductID) AS UniqueProducts,\n    SUM(i.Quantity) AS TotalQuantity,\n    SUM(i.Quantity * p.UnitPrice) AS InventoryValue\nFROM\n    Warehouses w\nJOIN\n    Inventory i ON w.WarehouseID = i.WarehouseID\nJOIN\n    Products p ON i.ProductID = p.ProductID\nGROUP BY\n    w.Name,\n    p.Category\nORDER BY\n    InventoryValue DESC\nLIMIT 6;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    w.Name AS WarehouseName, \n    p.Category, \n    COUNT(DISTINCT p.ProductID) AS UniqueProducts, \n    SUM(i.Quantity) AS TotalQuantity, \n    SUM(i.Quantity * p.UnitPrice) AS InventoryValue\nFROM \n    Warehouses w\nJOIN \n    Inventory i ON w.WarehouseID = i.WarehouseID\nJOIN \n    Products p ON i.ProductID = p.ProductID\nGROUP BY \n    w.Name, \n    p.Category\nORDER BY \n    InventoryValue DESC\nLIMIT 6;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    w.Name AS WarehouseName, \n    p.Category, \n    COUNT(DISTINCT p.ProductID) AS UniqueProducts, \n    SUM(i.Quantity) AS TotalQuantity, \n    SUM(i.Quantity * p.UnitPrice) AS InventoryValue\nFROM \n    Warehouses w\nJOIN \n    Inventory i ON w.WarehouseID = i.WarehouseID\nJOIN \n    Products p ON i.ProductID = p.ProductID\nGROUP BY \n    w.Name, \n    p.Category\nORDER BY \n    InventoryValue DESC\nLIMIT 6;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    w.Name AS WarehouseName,\n    p.Category AS ProductCategory,\n    COUNT(DISTINCT i.ProductID) AS UniqueProductsCount,\n    SUM(i.Quantity) AS TotalQuantity,\n    SUM(i.Quantity * p.UnitPrice) AS InventoryValue\nFROM \n    Warehouses w\nJOIN \n    Inventory i ON w.WarehouseID = i.WarehouseID\nJOIN \n    Products p ON i.ProductID = p.ProductID\nGROUP BY \n    w.Name, p.Category\nORDER BY \n    InventoryValue DESC\nLIMIT 6;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    w.Name AS WarehouseName,\n    p.Category AS ProductCategory,\n    COUNT(DISTINCT p.ProductID) AS UniqueProductsCount,\n    SUM(i.Quantity) AS TotalItems,\n    SUM(i.Quantity * p.UnitPrice) AS InventoryValue\nFROM \n    Warehouses w\nJOIN \n    Inventory i ON w.WarehouseID = i.WarehouseID\nJOIN \n    Products p ON i.ProductID = p.ProductID\nGROUP BY \n    w.Name, p.Category\nORDER BY \n    InventoryValue DESC\nLIMIT 6;",
            "gigachat_response": "SELECT \n    w.Name AS WarehouseName,\n    p.Category AS ProductCategory,\n    COUNT(DISTINCT p.ProductID) AS UniqueProductsCount,\n    SUM(i.Quantity) AS TotalQuantity,\n    SUM(i.Quantity * p.UnitPrice) AS InventoryValue\nFROM \n    Inventory i\nJOIN \n    Warehouses w ON i.WarehouseID = w.WarehouseID\nJOIN \n    Products p ON i.ProductID = p.ProductID\nGROUP BY \n    w.Name, p.Category\nORDER BY \n    InventoryValue DESC\nLIMIT 6;",
            "gigachat_response_ru": "SELECT \n    w.Name AS WarehouseName,\n    p.Category AS ProductCategory,\n    COUNT(DISTINCT p.ProductID) AS UniqueProductsCount,\n    SUM(i.Quantity) AS TotalQuantity,\n    SUM(i.Quantity * p.UnitPrice) AS InventoryValue\nFROM \n    Inventory i\nJOIN \n    Warehouses w ON i.WarehouseID = w.WarehouseID\nJOIN \n    Products p ON i.ProductID = p.ProductID\nGROUP BY \n    w.Name, p.Category\nORDER BY \n    InventoryValue DESC\nLIMIT 6;"
        },
        {
            "question": "Какие перевозчики имеют высокий уровень успешных доставок? Покажите топ-9 перевозчиков с наибольшим количеством успешных доставок, включая название перевозчика, общее количество отправлений, количество успешных доставок и количество транспортных средств.",
            "sql_query": "SELECT s.Name as ShipperName, COUNT(DISTINCT sh.ShipmentID) as TotalShipments, COUNT(DISTINCT CASE WHEN sh.Status = 'Доставлено' THEN sh.ShipmentID END) as SuccessfulShipments, COUNT(DISTINCT v.VehicleID) as TotalVehicles FROM Shippers s JOIN Shipments sh ON s.ShipperID = sh.ShipperID JOIN Vehicles v ON s.ShipperID = v.ShipperID GROUP BY s.Name HAVING COUNT(DISTINCT sh.ShipmentID) > 3 ORDER BY SuccessfulShipments DESC LIMIT 9;",
            "gpt-4o_response": "SELECT \n    sh.Name AS ShipperName,\n    COUNT(DISTINCT s.ShipmentID) AS TotalShipments,\n    COUNT(DISTINCT CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID END) AS SuccessfulDeliveries,\n    COUNT(DISTINCT v.VehicleID) AS TotalVehicles\nFROM \n    Shippers sh\nJOIN \n    Shipments s ON sh.ShipperID = s.ShipperID\nJOIN \n    Deliveries d ON s.ShipmentID = d.ShipmentID\nLEFT JOIN \n    Vehicles v ON sh.ShipperID = v.ShipperID\nGROUP BY \n    sh.Name\nORDER BY \n    SuccessfulDeliveries DESC\nLIMIT 9;",
            "gpt-4o_response_ru": "SELECT \n    sh.Name AS ShipperName,\n    COUNT(DISTINCT s.ShipmentID) AS TotalShipments,\n    COUNT(DISTINCT CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID END) AS SuccessfulDeliveries,\n    COUNT(DISTINCT v.VehicleID) AS TotalVehicles\nFROM \n    Shippers sh\nJOIN \n    Shipments s ON sh.ShipperID = s.ShipperID\nJOIN \n    Deliveries d ON s.ShipmentID = d.ShipmentID\nLEFT JOIN \n    Vehicles v ON sh.ShipperID = v.ShipperID\nGROUP BY \n    sh.Name\nORDER BY \n    SuccessfulDeliveries DESC\nLIMIT 9;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    s.Name AS ShipperName,\n    COUNT(ship.ShipmentID) AS TotalShipments,\n    SUM(CASE WHEN ship.Status = 'Доставлено' THEN 1 ELSE 0 END) AS SuccessfulDeliveries,\n    COUNT(DISTINCT v.VehicleID) AS NumberOfVehicles\nFROM\n    Shippers s\nJOIN\n    Shipments ship ON s.ShipperID = ship.ShipperID\nLEFT JOIN\n    Deliveries d ON ship.ShipmentID = d.ShipmentID\nLEFT JOIN\n    Vehicles v ON d.VehicleID = v.VehicleID\nGROUP BY\n    s.Name\nORDER BY\n    SuccessfulDeliveries DESC\nLIMIT 9;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    s.Name AS ShipperName,\n    COUNT(sh.ShipmentID) AS TotalShipments,\n    SUM(CASE WHEN sh.Status = 'Доставлено' THEN 1 ELSE 0 END) AS SuccessfulDeliveries,\n    COUNT(DISTINCT v.VehicleID) AS TotalVehicles\nFROM\n    Shippers s\nLEFT JOIN\n    Shipments sh ON s.ShipperID = sh.ShipperID\nLEFT JOIN\n    Deliveries d ON sh.ShipmentID = d.ShipmentID\nLEFT JOIN\n    Vehicles v ON s.ShipperID = v.ShipperID\nGROUP BY\n    s.Name\nORDER BY\n    SuccessfulDeliveries DESC\nLIMIT 9;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    s.Name AS ShipperName, \n    COUNT(DISTINCT sh.ShipmentID) AS TotalShipments, \n    COUNT(DISTINCT CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID END) AS SuccessfulDeliveries, \n    COUNT(DISTINCT v.VehicleID) AS Vehicles\nFROM \n    Shippers s\nJOIN \n    Shipments sh ON s.ShipperID = sh.ShipperID\nJOIN \n    Deliveries d ON sh.ShipmentID = d.ShipmentID\nJOIN \n    Vehicles v ON d.VehicleID = v.VehicleID\nGROUP BY \n    s.Name\nORDER BY \n    SuccessfulDeliveries DESC\nLIMIT 9;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    s.Name, \n    COUNT(DISTINCT sh.ShipmentID) AS TotalShipments, \n    COUNT(DISTINCT CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID END) AS SuccessfulDeliveries, \n    COUNT(DISTINCT v.VehicleID) AS Vehicles\nFROM \n    Shippers s\nJOIN \n    Shipments sh ON s.ShipperID = sh.ShipperID\nJOIN \n    Deliveries d ON sh.ShipmentID = d.ShipmentID\nJOIN \n    Vehicles v ON d.VehicleID = v.VehicleID\nGROUP BY \n    s.Name\nORDER BY \n    SuccessfulDeliveries DESC\nLIMIT 9;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    s.Name AS ShipperName,\n    COUNT(sh.ShipmentID) AS TotalShipments,\n    COUNT(CASE WHEN sh.Status = 'Доставлено' THEN sh.ShipmentID END) AS SuccessfulDeliveries,\n    COUNT(DISTINCT v.VehicleID) AS VehicleCount\nFROM \n    Shippers s\nLEFT JOIN \n    Shipments sh ON s.ShipperID = sh.ShipperID\nLEFT JOIN \n    Vehicles v ON s.ShipperID = v.ShipperID\nGROUP BY \n    s.Name\nORDER BY \n    SuccessfulDeliveries DESC\nLIMIT 9;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    s.Name AS ShipperName,\n    COUNT(DISTINCT sh.ShipmentID) AS TotalShipments,\n    COUNT(DISTINCT CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID END) AS SuccessfulDeliveries,\n    COUNT(DISTINCT v.VehicleID) AS VehicleCount\nFROM \n    Shippers s\nLEFT JOIN \n    Shipments sh ON s.ShipperID = sh.ShipperID\nLEFT JOIN \n    Deliveries d ON sh.ShipmentID = d.ShipmentID\nLEFT JOIN \n    Vehicles v ON s.ShipperID = v.ShipperID\nGROUP BY \n    s.Name\nORDER BY \n    SuccessfulDeliveries DESC\nLIMIT 9;",
            "gigachat_response": "SELECT \n    sh.Name AS ShipperName,\n    COUNT(s.ShipmentID) AS TotalShipments,\n    COUNT(CASE WHEN s.Status = 'Доставлено' THEN s.ShipmentID END) AS SuccessfulDeliveries,\n    COUNT(v.VehicleID) AS NumberOfVehicles\nFROM \n    Shippers sh\nLEFT JOIN \n    Shipments s ON sh.ShipperID = s.ShipperID\nLEFT JOIN \n    Vehicles v ON sh.ShipperID = v.ShipperID\nGROUP BY \n    sh.ShipperID, sh.Name\nORDER BY \n    SuccessfulDeliveries DESC\nLIMIT 9;",
            "gigachat_response_ru": "SELECT \n    sh.Name AS ShipperName,\n    COUNT(s.ShipmentID) AS TotalShipments,\n    COUNT(CASE WHEN s.Status = 'Доставлено' THEN s.ShipmentID END) AS SuccessfulDeliveries,\n    COUNT(v.VehicleID) AS NumberOfVehicles\nFROM \n    Shippers sh\nLEFT JOIN \n    Shipments s ON sh.ShipperID = s.ShipperID\nLEFT JOIN \n    Vehicles v ON sh.ShipperID = v.ShipperID\nGROUP BY \n    sh.ShipperID, sh.Name\nORDER BY \n    SuccessfulDeliveries DESC\nLIMIT 9;"
        },
        {
            "question": "Какие клиенты имеют сложные паттерны заказов и анализ платежей? Покажите топ-7 клиентов с наибольшими суммами заказов, включая имя клиента, город, общее количество заказов, общую сумму потраченных средств, среднюю стоимость заказа, количество успешных и отмененных платежей.",
            "sql_query": "SELECT c.Name, c.City, COUNT(DISTINCT o.OrderID) as TotalOrders, SUM(p.Amount) as TotalSpent, AVG(p.Amount) as AvgOrderValue, COUNT(DISTINCT CASE WHEN p.Status = 'Завершено' THEN p.PaymentID END) as SuccessfulPayments, COUNT(DISTINCT CASE WHEN p.Status = 'Отменено' THEN p.PaymentID END) as FailedPayments FROM Clients c JOIN Orders o ON c.ClientID = o.ClientID JOIN Payments p ON o.OrderID = p.OrderID WHERE o.Status = 'Доставлено' GROUP BY c.Name, c.City HAVING COUNT(DISTINCT o.OrderID) > 2 ORDER BY TotalSpent DESC LIMIT 7;",
            "gpt-4o_response": "SELECT c.Name AS ClientName, c.City, COUNT(o.OrderID) AS TotalOrders, SUM(o.TotalAmount) AS TotalSpent, AVG(o.TotalAmount) AS AvgOrderValue, COUNT(DISTINCT CASE WHEN p.Status = 'Завершено' THEN p.PaymentID END) AS SuccessfulPayments, COUNT(DISTINCT CASE WHEN p.Status = 'Отменено' THEN p.PaymentID END) AS CancelledPayments FROM Clients c JOIN Orders o ON c.ClientID = o.ClientID LEFT JOIN Payments p ON o.OrderID = p.OrderID GROUP BY c.ClientID, c.Name, c.City ORDER BY TotalSpent DESC LIMIT 7;",
            "gpt-4o_response_ru": "SELECT \n    c.Name AS ClientName,\n    c.City,\n    COUNT(DISTINCT o.OrderID) AS TotalOrders,\n    SUM(o.TotalAmount) AS TotalSpent,\n    AVG(o.TotalAmount) AS AvgOrderValue,\n    COUNT(DISTINCT CASE WHEN p.Status = 'Завершено' THEN p.PaymentID END) AS SuccessfulPayments,\n    COUNT(DISTINCT CASE WHEN p.Status = 'Отменено' THEN p.PaymentID END) AS CancelledPayments\nFROM \n    Clients c\nJOIN \n    Orders o ON c.ClientID = o.ClientID\nLEFT JOIN \n    Payments p ON o.OrderID = p.OrderID\nGROUP BY \n    c.ClientID, c.Name, c.City\nORDER BY \n    TotalSpent DESC\nLIMIT 7;",
            "google/gemini-2.0-flash-001_response": "SELECT \n    c.Name AS ClientName,\n    c.City AS ClientCity,\n    COUNT(DISTINCT o.OrderID) AS TotalOrders,\n    SUM(o.TotalAmount) AS TotalSpent,\n    AVG(o.TotalAmount) AS AverageOrderValue,\n    SUM(CASE WHEN p.Status = 'Завершено' THEN 1 ELSE 0 END) AS SuccessfulPayments,\n    SUM(CASE WHEN p.Status = 'Отменено' THEN 1 ELSE 0 END) AS CancelledPayments\nFROM Clients c\nJOIN Orders o ON c.ClientID = o.ClientID\nLEFT JOIN Payments p ON o.OrderID = p.OrderID\nGROUP BY c.ClientID, c.Name, c.City\nORDER BY TotalSpent DESC\nLIMIT 7;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT \n    c.Name AS ClientName,\n    c.City,\n    COUNT(DISTINCT o.OrderID) AS TotalOrders,\n    SUM(o.TotalAmount) AS TotalSpent,\n    AVG(o.TotalAmount) AS AverageOrderValue,\n    SUM(CASE WHEN p.Status = 'Завершено' THEN 1 ELSE 0 END) AS SuccessfulPayments,\n    SUM(CASE WHEN p.Status = 'Отменено' THEN 1 ELSE 0 END) AS CancelledPayments\nFROM Clients c\nJOIN Orders o ON c.ClientID = o.ClientID\nLEFT JOIN Payments p ON o.OrderID = p.OrderID\nGROUP BY c.ClientID, c.Name, c.City\nORDER BY TotalSpent DESC\nLIMIT 7;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    c.Name, \n    c.City, \n    COUNT(DISTINCT o.OrderID) AS TotalOrders, \n    SUM(o.TotalAmount) AS TotalSpent, \n    AVG(o.TotalAmount) AS AvgOrderCost, \n    COUNT(DISTINCT CASE WHEN p.Status = 'Завершено' THEN p.PaymentID END) AS SuccessfulPayments, \n    COUNT(DISTINCT CASE WHEN p.Status = 'Отменено' THEN p.PaymentID END) AS CancelledPayments\nFROM \n    Clients c\nJOIN \n    Orders o ON c.ClientID = o.ClientID\nJOIN \n    Payments p ON o.OrderID = p.OrderID\nGROUP BY \n    c.Name, \n    c.City\nORDER BY \n    TotalSpent DESC\nLIMIT 7;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    c.Name, \n    c.City, \n    COUNT(DISTINCT o.OrderID) AS TotalOrders, \n    SUM(p.Amount) AS TotalSpent, \n    AVG(p.Amount) AS AvgOrderCost, \n    COUNT(DISTINCT CASE WHEN p.Status = 'Завершено' THEN p.PaymentID END) AS SuccessfulPayments, \n    COUNT(DISTINCT CASE WHEN p.Status = 'Отменено' THEN p.PaymentID END) AS CancelledPayments\nFROM \n    Clients c\nJOIN \n    Orders o ON c.ClientID = o.ClientID\nJOIN \n    Payments p ON o.OrderID = p.OrderID\nGROUP BY \n    c.Name, \n    c.City\nORDER BY \n    TotalSpent DESC\nLIMIT 7;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    c.Name AS ClientName,\n    c.City,\n    COUNT(DISTINCT o.OrderID) AS TotalOrders,\n    SUM(o.TotalAmount) AS TotalSpent,\n    AVG(o.TotalAmount) AS AvgOrderValue,\n    COUNT(DISTINCT CASE WHEN p.Status = 'Завершено' THEN p.PaymentID END) AS SuccessfulPayments,\n    COUNT(DISTINCT CASE WHEN p.Status = 'Отменено' THEN p.PaymentID END) AS CanceledPayments\nFROM \n    Clients c\nJOIN \n    Orders o ON c.ClientID = o.ClientID\nLEFT JOIN \n    Payments p ON o.OrderID = p.OrderID\nGROUP BY \n    c.ClientID, c.Name, c.City\nORDER BY \n    TotalSpent DESC\nLIMIT 7;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    c.Name AS ClientName,\n    c.City,\n    COUNT(DISTINCT o.OrderID) AS TotalOrders,\n    SUM(o.TotalAmount) AS TotalSpent,\n    AVG(o.TotalAmount) AS AvgOrderValue,\n    COUNT(DISTINCT CASE WHEN p.Status = 'Завершено' THEN p.PaymentID END) AS SuccessfulPayments,\n    COUNT(DISTINCT CASE WHEN p.Status = 'Отменено' THEN p.PaymentID END) AS CanceledPayments\nFROM \n    Clients c\nJOIN \n    Orders o ON c.ClientID = o.ClientID\nLEFT JOIN \n    Payments p ON o.OrderID = p.OrderID\nGROUP BY \n    c.ClientID, c.Name, c.City\nORDER BY \n    TotalSpent DESC\nLIMIT 7;",
            "gigachat_response": "SELECT \n    c.Name AS КлиентИмя,\n    c.City AS ГородКлиента,\n    COUNT(o.OrderID) AS ОбщееКоличествоЗаказов,\n    SUM(o.TotalAmount) AS ОбщаяСуммаЗаказа,\n    AVG(o.TotalAmount) AS СредняяСтоимостьЗаказа,\n    SUM(CASE WHEN p.Status = 'Завершено' THEN 1 ELSE 0 END) AS УспешныеПлатежи,\n    SUM(CASE WHEN p.Status = 'Отменено' THEN 1 ELSE 0 END) AS ОтмененныеПлатежи\nFROM \n    Clients c\nJOIN \n    Orders o ON c.ClientID = o.ClientID\nLEFT JOIN \n    Payments p ON o.OrderID = p.OrderID\nGROUP BY \n    c.Name, c.City\nORDER BY \n    ОбщаяСуммаЗаказа DESC\nLIMIT 7;",
            "gigachat_response_ru": "SELECT \n    c.Name AS КлиентИмя,\n    c.City AS ГородКлиента,\n    COUNT(o.OrderID) AS ОбщееКоличествоЗаказов,\n    SUM(o.TotalAmount) AS ОбщаяСуммаЗаказа,\n    AVG(o.TotalAmount) AS СредняяСтоимостьЗаказа,\n    SUM(CASE WHEN p.Status = 'Завершено' THEN 1 ELSE 0 END) AS КоличествоУспешныхПлатежей,\n    SUM(CASE WHEN p.Status = 'Отменено' THEN 1 ELSE 0 END) AS КоличествоОтменённыхПлатежей\nFROM \n    Clients c\nLEFT JOIN \n    Orders o ON c.ClientID = o.ClientID\nLEFT JOIN \n    Payments p ON o.OrderID = p.OrderID\nGROUP BY \n    c.Name, c.City\nORDER BY \n    ОбщаяСуммаЗаказа DESC\nLIMIT 7;"
        },
        {
            "question": "Какова производительность поставщиков с учетом возвратов продуктов и инвентаря? Покажите топ-4 поставщиков с наибольшим количеством возвратов, включая название поставщика, общее количество продуктов, общее количество инвентаря, количество возвратов, среднюю цену продукта и количество успешно возвращенных единиц.",
            "sql_query": "SELECT s.Name as SupplierName, COUNT(DISTINCT p.ProductID) as TotalProducts, SUM(i.Quantity) as TotalInventory, COUNT(DISTINCT r.ReturnID) as TotalReturns, AVG(p.UnitPrice) as AvgProductPrice, SUM(CASE WHEN r.Status = 'Возврат выполнен' THEN r.Quantity ELSE 0 END) as SuccessfullyReturned FROM Suppliers s JOIN Products p ON s.SupplierID = p.SupplierID JOIN Inventory i ON p.ProductID = i.ProductID LEFT JOIN `Returns` r ON p.ProductID = r.ProductID WHERE p.Discontinued = FALSE GROUP BY s.Name HAVING COUNT(DISTINCT p.ProductID) > 1 ORDER BY TotalReturns DESC LIMIT 4;",
            "gpt-4o_response": "SELECT \n    s.Name AS SupplierName,\n    COUNT(DISTINCT p.ProductID) AS TotalProducts,\n    SUM(i.Quantity) AS TotalInventory,\n    COUNT(r.ReturnID) AS TotalReturns,\n    AVG(p.UnitPrice) AS AvgProductPrice,\n    SUM(r.Quantity) AS TotalReturnedUnits\nFROM \n    Suppliers s\nJOIN \n    Products p ON s.SupplierID = p.SupplierID\nLEFT JOIN \n    Inventory i ON p.ProductID = i.ProductID\nLEFT JOIN \n    Returns r ON p.ProductID = r.ProductID\nGROUP BY \n    s.SupplierID, s.Name\nORDER BY \n    TotalReturns DESC\nLIMIT 4;",
            "gpt-4o_response_ru": "SELECT \n    s.Name AS SupplierName,\n    COUNT(DISTINCT p.ProductID) AS TotalProducts,\n    SUM(i.Quantity) AS TotalInventory,\n    COUNT(r.ReturnID) AS TotalReturns,\n    AVG(p.UnitPrice) AS AvgProductPrice,\n    SUM(CASE WHEN r.Status = 'Возврат выполнен' THEN r.Quantity ELSE 0 END) AS SuccessfulReturns\nFROM \n    Suppliers s\nJOIN \n    Products p ON s.SupplierID = p.SupplierID\nLEFT JOIN \n    Inventory i ON p.ProductID = i.ProductID\nLEFT JOIN \n    `Returns` r ON p.ProductID = r.ProductID\nGROUP BY \n    s.SupplierID, s.Name\nORDER BY \n    TotalReturns DESC\nLIMIT 4;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    s.Name AS SupplierName,\n    COUNT(DISTINCT p.ProductID) AS TotalProducts,\n    SUM(p.StockQuantity) AS TotalInventory,\n    COUNT(DISTINCT r.ReturnID) AS TotalReturns,\n    AVG(p.UnitPrice) AS AverageProductPrice,\n    SUM(r.Quantity) AS TotalReturnedQuantity\nFROM Suppliers s\nJOIN Products p ON s.SupplierID = p.SupplierID\nLEFT JOIN `Returns` r ON p.ProductID = r.ProductID\nGROUP BY s.Name\nORDER BY TotalReturns DESC\nLIMIT 4;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    s.Name AS SupplierName,\n    COUNT(DISTINCT p.ProductID) AS TotalProducts,\n    SUM(p.StockQuantity) AS TotalInventory,\n    COUNT(DISTINCT r.ReturnID) AS TotalReturns,\n    AVG(p.UnitPrice) AS AvgProductPrice,\n    SUM(r.Quantity) AS TotalReturnedQuantity\nFROM Suppliers s\nJOIN Products p ON s.SupplierID = p.SupplierID\nLEFT JOIN `Returns` r ON p.ProductID = r.ProductID\nGROUP BY s.Name\nORDER BY TotalReturns DESC\nLIMIT 4;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    s.Name AS SupplierName, \n    COUNT(DISTINCT p.ProductID) AS TotalProducts, \n    SUM(i.Quantity) AS TotalInventory, \n    COUNT(r.ReturnID) AS TotalReturns, \n    AVG(p.UnitPrice) AS AvgProductPrice, \n    SUM(r.Quantity) AS SuccessfulReturns\nFROM \n    Suppliers s\nJOIN \n    Products p ON s.SupplierID = p.SupplierID\nJOIN \n    Inventory i ON p.ProductID = i.ProductID\nJOIN \n    `Returns` r ON p.ProductID = r.ProductID\nGROUP BY \n    s.Name\nORDER BY \n    TotalReturns DESC\nLIMIT 4;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    s.Name AS SupplierName, \n    COUNT(DISTINCT p.ProductID) AS TotalProducts, \n    SUM(i.Quantity) AS TotalInventory, \n    COUNT(DISTINCT r.ReturnID) AS TotalReturns, \n    AVG(p.UnitPrice) AS AvgProductPrice, \n    COUNT(DISTINCT CASE WHEN r.Status = 'Возврат выполнен' THEN r.ReturnID END) AS SuccessfulReturns\nFROM \n    Suppliers s\nJOIN \n    Products p ON s.SupplierID = p.SupplierID\nJOIN \n    Inventory i ON p.ProductID = i.ProductID\nJOIN \n    `Returns` r ON p.ProductID = r.ProductID\nGROUP BY \n    s.Name\nORDER BY \n    TotalReturns DESC\nLIMIT 4;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    s.SupplierID,\n    s.Name AS SupplierName,\n    COUNT(DISTINCT p.ProductID) AS TotalProducts,\n    SUM(i.Quantity) AS TotalInventory,\n    COUNT(r.ReturnID) AS TotalReturns,\n    AVG(p.UnitPrice) AS AvgProductPrice,\n    SUM(CASE WHEN r.Status = 'Возврат выполнен' THEN r.Quantity ELSE 0 END) AS SuccessfulReturns\nFROM \n    Suppliers s\nJOIN \n    Products p ON s.SupplierID = p.SupplierID\nLEFT JOIN \n    Inventory i ON p.ProductID = i.ProductID\nLEFT JOIN \n    `Returns` r ON p.ProductID = r.ProductID\nGROUP BY \n    s.SupplierID, s.Name\nORDER BY \n    TotalReturns DESC\nLIMIT 4;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    s.Name AS SupplierName,\n    COUNT(DISTINCT p.ProductID) AS TotalProducts,\n    SUM(i.Quantity) AS TotalInventory,\n    COUNT(r.ReturnID) AS TotalReturns,\n    AVG(p.UnitPrice) AS AvgProductPrice,\n    SUM(CASE WHEN r.Status = 'Возврат выполнен' THEN r.Quantity ELSE 0 END) AS SuccessfulReturns\nFROM \n    Suppliers s\nJOIN \n    Products p ON s.SupplierID = p.SupplierID\nLEFT JOIN \n    Inventory i ON p.ProductID = i.ProductID\nLEFT JOIN \n    `Returns` r ON p.ProductID = r.ProductID\nGROUP BY \n    s.Name\nORDER BY \n    TotalReturns DESC\nLIMIT 4;",
            "gigachat_response": "SELECT \n    s.Name AS SupplierName,\n    COUNT(DISTINCT p.ProductID) AS TotalProducts,\n    SUM(i.Quantity) AS TotalInventory,\n    COUNT(r.ReturnID) AS TotalReturns,\n    AVG(p.UnitPrice) AS AverageUnitPrice,\n    COUNT(CASE WHEN r.Status IN ('Возврат выполнен', 'Принято') THEN r.ReturnID END) AS SuccessfulReturns\nFROM \n    Suppliers s\nJOIN \n    Products p ON s.SupplierID = p.SupplierID\nLEFT JOIN \n    Inventory i ON p.ProductID = i.ProductID\nLEFT JOIN \n    `Returns` r ON p.ProductID = r.ProductID\nGROUP BY \n    s.SupplierID, s.Name\nORDER BY \n    TotalReturns DESC\nLIMIT 4;",
            "gigachat_response_ru": "SELECT \n    s.Name AS SupplierName,\n    COUNT(DISTINCT p.ProductID) AS TotalProducts,\n    SUM(i.Quantity) AS TotalInventory,\n    COUNT(r.ReturnID) AS TotalReturns,\n    AVG(p.UnitPrice) AS AverageUnitPrice,\n    COUNT(CASE WHEN r.Status IN ('Возврат выполнен', 'Принято') THEN r.ReturnID END) AS SuccessfulReturns\nFROM \n    Suppliers s\nLEFT JOIN \n    Products p ON s.SupplierID = p.SupplierID\nLEFT JOIN \n    Inventory i ON p.ProductID = i.ProductID\nLEFT JOIN \n    `Returns` r ON p.ProductID = r.ProductID\nGROUP BY \n    s.SupplierID, s.Name\nORDER BY \n    TotalReturns DESC\nLIMIT 4;"
        },
        {
            "question": "Какова производительность складов с учетом различных категорий продуктов? Покажите топ-6 складов с наибольшим количеством товаров, включая название склада, количество уникальных продуктов, общее количество товаров, количество товаров категории 'Бытовая техника', количество товаров категории 'Одежда' и среднюю цену продукта.",
            "sql_query": "SELECT w.Name as WarehouseName, COUNT(DISTINCT i.ProductID) as UniqueProducts, SUM(i.Quantity) as TotalStock, COUNT(DISTINCT CASE WHEN p.Category = 'Бытовая техника' THEN p.ProductID END) as ElectronicsCount, COUNT(DISTINCT CASE WHEN p.Category = 'Одежда' THEN p.ProductID END) as ClothingCount, AVG(p.UnitPrice) as AvgProductPrice FROM Warehouses w JOIN Inventory i ON w.WarehouseID = i.WarehouseID JOIN Products p ON i.ProductID = p.ProductID WHERE p.Discontinued = FALSE GROUP BY w.Name HAVING SUM(i.Quantity) > 30 ORDER BY TotalStock DESC LIMIT 6;",
            "gpt-4o_response": "SELECT \n    w.Name AS WarehouseName,\n    COUNT(DISTINCT i.ProductID) AS UniqueProducts,\n    SUM(i.Quantity) AS TotalQuantity,\n    SUM(CASE WHEN p.Category = 'Бытовая техника' THEN i.Quantity ELSE 0 END) AS HouseholdAppliancesQuantity,\n    SUM(CASE WHEN p.Category = 'Одежда' THEN i.Quantity ELSE 0 END) AS ClothingQuantity,\n    AVG(p.UnitPrice) AS AvgProductPrice\nFROM \n    Warehouses w\nJOIN \n    Inventory i ON w.WarehouseID = i.WarehouseID\nJOIN \n    Products p ON i.ProductID = p.ProductID\nGROUP BY \n    w.WarehouseID, w.Name\nORDER BY \n    TotalQuantity DESC\nLIMIT 6;",
            "gpt-4o_response_ru": "SELECT \n    w.Name AS WarehouseName,\n    COUNT(DISTINCT i.ProductID) AS UniqueProducts,\n    SUM(i.Quantity) AS TotalQuantity,\n    SUM(CASE WHEN p.Category = 'Бытовая техника' THEN i.Quantity ELSE 0 END) AS HouseholdAppliancesQuantity,\n    SUM(CASE WHEN p.Category = 'Одежда' THEN i.Quantity ELSE 0 END) AS ClothingQuantity,\n    AVG(p.UnitPrice) AS AvgProductPrice\nFROM \n    Warehouses w\nJOIN \n    Inventory i ON w.WarehouseID = i.WarehouseID\nJOIN \n    Products p ON i.ProductID = p.ProductID\nGROUP BY \n    w.WarehouseID, w.Name\nORDER BY \n    TotalQuantity DESC\nLIMIT 6;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    w.Name AS WarehouseName,\n    COUNT(DISTINCT i.ProductID) AS UniqueProducts,\n    SUM(i.Quantity) AS TotalQuantity,\n    SUM(CASE WHEN p.Category = 'Бытовая техника' THEN i.Quantity ELSE 0 END) AS HomeAppliancesQuantity,\n    SUM(CASE WHEN p.Category = 'Одежда' THEN i.Quantity ELSE 0 END) AS ClothesQuantity,\n    AVG(p.UnitPrice) AS AverageProductPrice\nFROM\n    Warehouses w\nJOIN\n    Inventory i ON w.WarehouseID = i.WarehouseID\nJOIN\n    Products p ON i.ProductID = p.ProductID\nGROUP BY\n    w.Name\nORDER BY\n    TotalQuantity DESC\nLIMIT 6;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    w.Name AS WarehouseName,\n    COUNT(DISTINCT i.ProductID) AS UniqueProducts,\n    SUM(i.Quantity) AS TotalQuantity,\n    SUM(CASE WHEN p.Category = 'Бытовая техника' THEN i.Quantity ELSE 0 END) AS HomeAppliancesQuantity,\n    SUM(CASE WHEN p.Category = 'Одежда' THEN i.Quantity ELSE 0 END) AS ClothingQuantity,\n    AVG(p.UnitPrice) AS AveragePrice\nFROM Warehouses w\nJOIN Inventory i ON w.WarehouseID = i.WarehouseID\nJOIN Products p ON i.ProductID = p.ProductID\nGROUP BY w.Name\nORDER BY TotalQuantity DESC\nLIMIT 6;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    w.Name AS WarehouseName, \n    COUNT(DISTINCT p.ProductID) AS UniqueProducts, \n    SUM(i.Quantity) AS TotalQuantity, \n    SUM(CASE WHEN p.Category = 'Бытовая техника' THEN i.Quantity ELSE 0 END) AS HouseholdAppliances, \n    SUM(CASE WHEN p.Category = 'Одежда' THEN i.Quantity ELSE 0 END) AS Clothing, \n    AVG(p.UnitPrice) AS AverageProductPrice\nFROM \n    Warehouses w\nJOIN \n    Inventory i ON w.WarehouseID = i.WarehouseID\nJOIN \n    Products p ON i.ProductID = p.ProductID\nGROUP BY \n    w.Name\nORDER BY \n    TotalQuantity DESC\nLIMIT 6;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    w.Name AS WarehouseName, \n    COUNT(DISTINCT p.ProductID) AS UniqueProducts, \n    SUM(i.Quantity) AS TotalQuantity, \n    SUM(CASE WHEN p.Category = 'Бытовая техника' THEN i.Quantity ELSE 0 END) AS HouseholdAppliances, \n    SUM(CASE WHEN p.Category = 'Одежда' THEN i.Quantity ELSE 0 END) AS Clothing, \n    AVG(p.UnitPrice) AS AverageProductPrice\nFROM \n    Warehouses w\nJOIN \n    Inventory i ON w.WarehouseID = i.WarehouseID\nJOIN \n    Products p ON i.ProductID = p.ProductID\nGROUP BY \n    w.Name\nORDER BY \n    TotalQuantity DESC\nLIMIT 6;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    w.Name AS WarehouseName,\n    COUNT(DISTINCT i.ProductID) AS UniqueProducts,\n    SUM(i.Quantity) AS TotalItems,\n    SUM(CASE WHEN p.Category = 'Бытовая техника' THEN i.Quantity ELSE 0 END) AS HouseholdAppliances,\n    SUM(CASE WHEN p.Category = 'Одежда' THEN i.Quantity ELSE 0 END) AS Clothing,\n    AVG(p.UnitPrice) AS AvgProductPrice\nFROM \n    Warehouses w\nJOIN \n    Inventory i ON w.WarehouseID = i.WarehouseID\nJOIN \n    Products p ON i.ProductID = p.ProductID\nGROUP BY \n    w.Name\nORDER BY \n    TotalItems DESC\nLIMIT 6;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    w.Name AS WarehouseName,\n    COUNT(DISTINCT i.ProductID) AS UniqueProducts,\n    SUM(i.Quantity) AS TotalItems,\n    SUM(CASE WHEN p.Category = 'Бытовая техника' THEN i.Quantity ELSE 0 END) AS HouseholdAppliances,\n    SUM(CASE WHEN p.Category = 'Одежда' THEN i.Quantity ELSE 0 END) AS Clothing,\n    AVG(p.UnitPrice) AS AvgProductPrice\nFROM \n    Warehouses w\nJOIN \n    Inventory i ON w.WarehouseID = i.WarehouseID\nJOIN \n    Products p ON i.ProductID = p.ProductID\nGROUP BY \n    w.Name\nORDER BY \n    TotalItems DESC\nLIMIT 6;",
            "gigachat_response": "SELECT \n    w.Name AS WarehouseName,\n    COUNT(DISTINCT inv.ProductID) AS UniqueProductsCount,\n    SUM(inv.Quantity) AS TotalGoodsCount,\n    SUM(CASE WHEN p.Category = 'Бытовая техника' THEN inv.Quantity ELSE 0 END) AS HouseholdAppliancesCount,\n    SUM(CASE WHEN p.Category = 'Одежда' THEN inv.Quantity ELSE 0 END) AS ClothingCount,\n    AVG(p.UnitPrice) AS AverageUnitPrice\nFROM \n    Warehouses w\nJOIN \n    Inventory inv ON w.WarehouseID = inv.WarehouseID\nJOIN \n    Products p ON inv.ProductID = p.ProductID\nGROUP BY \n    w.Name\nORDER BY \n    TotalGoodsCount DESC\nLIMIT 6;",
            "gigachat_response_ru": "SELECT \n    w.Name AS Склад,\n    COUNT(DISTINCT inv.ProductID) AS Количество_уникальных_продуктов,\n    SUM(inv.Quantity) AS Общее_количество_товаров,\n    SUM(CASE WHEN p.Category = 'Бытовая техника' THEN inv.Quantity ELSE 0 END) AS Товары_бытовой_техники,\n    SUM(CASE WHEN p.Category = 'Одежда' THEN inv.Quantity ELSE 0 END) AS Товары_одежды,\n    AVG(p.UnitPrice) AS Средняя_цена_продукта\nFROM \n    Warehouses w\nJOIN \n    Inventory inv ON w.WarehouseID = inv.WarehouseID\nJOIN \n    Products p ON inv.ProductID = p.ProductID\nGROUP BY \n    w.Name\nORDER BY \n    Общее_количество_товаров DESC\nLIMIT 6;"
        },
        {
            "question": "Какова производительность маршрутов доставки с учетом эффективности транспортных средств? Покажите топ-5 маршрутов с наибольшим количеством успешных доставок, включая начальную и конечную точку, общее количество доставок, количество успешных доставок, количество использованных транспортных средств, среднее расстояние маршрута и количество задержанных доставок.",
            "sql_query": "SELECT r.StartLocation, r.EndLocation, COUNT(DISTINCT d.DeliveryID) as TotalDeliveries, COUNT(DISTINCT CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID END) as SuccessfulDeliveries, COUNT(DISTINCT v.VehicleID) as VehiclesUsed, AVG(r.Distance) as AvgRouteDistance, SUM(CASE WHEN d.Status = 'Задержка' THEN 1 ELSE 0 END) as DelayedDeliveries FROM Routes r JOIN Vehicles v ON r.ShipperID = v.ShipperID JOIN Deliveries d ON v.VehicleID = d.VehicleID WHERE r.Status = 'Активен' GROUP BY r.StartLocation, r.EndLocation HAVING COUNT(DISTINCT d.DeliveryID) > 2 ORDER BY SuccessfulDeliveries DESC LIMIT 5;",
            "gpt-4o_response": "SELECT \n    r.RouteID,\n    r.StartLocation,\n    r.EndLocation,\n    COUNT(d.DeliveryID) AS TotalDeliveries,\n    COUNT(CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID END) AS SuccessfulDeliveries,\n    COUNT(DISTINCT v.VehicleID) AS VehiclesUsed,\n    AVG(r.Distance) AS AverageRouteDistance,\n    COUNT(CASE WHEN d.Status = 'Задержка' THEN d.DeliveryID END) AS DelayedDeliveries\nFROM \n    Routes r\nJOIN \n    Shippers s ON r.ShipperID = s.ShipperID\nJOIN \n    Shipments sh ON s.ShipperID = sh.ShipperID\nJOIN \n    Deliveries d ON sh.ShipmentID = d.ShipmentID\nJOIN \n    Vehicles v ON d.VehicleID = v.VehicleID\nGROUP BY \n    r.RouteID, r.StartLocation, r.EndLocation\nORDER BY \n    SuccessfulDeliveries DESC\nLIMIT 5;",
            "gpt-4o_response_ru": "SELECT \n    r.RouteID,\n    r.StartLocation,\n    r.EndLocation,\n    COUNT(d.DeliveryID) AS TotalDeliveries,\n    COUNT(CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID END) AS SuccessfulDeliveries,\n    COUNT(DISTINCT d.VehicleID) AS VehiclesUsed,\n    AVG(r.Distance) AS AvgRouteDistance,\n    COUNT(CASE WHEN d.Status = 'Задержка' THEN d.DeliveryID END) AS DelayedDeliveries\nFROM \n    Routes r\nJOIN \n    Shipments s ON r.ShipperID = s.ShipperID\nJOIN \n    Deliveries d ON s.ShipmentID = d.ShipmentID\nGROUP BY \n    r.RouteID, r.StartLocation, r.EndLocation\nORDER BY \n    SuccessfulDeliveries DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    r.StartLocation,\n    r.EndLocation,\n    COUNT(DISTINCT d.DeliveryID) AS TotalDeliveries,\n    SUM(CASE WHEN d.Status = 'Доставлено' THEN 1 ELSE 0 END) AS SuccessfulDeliveries,\n    COUNT(DISTINCT d.VehicleID) AS NumberOfVehiclesUsed,\n    AVG(r.Distance) AS AverageRouteDistance,\n    SUM(CASE WHEN d.Status = 'Задержка' THEN 1 ELSE 0 END) AS DelayedDeliveries\nFROM\n    Routes r\nJOIN\n    Shipments s ON r.ShipperID = s.ShipperID\nJOIN\n    Deliveries d ON s.ShipmentID = d.ShipmentID\nGROUP BY\n    r.StartLocation,\n    r.EndLocation\nORDER BY\n    SuccessfulDeliveries DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    r.StartLocation,\n    r.EndLocation,\n    COUNT(DISTINCT d.DeliveryID) AS TotalDeliveries,\n    SUM(CASE WHEN d.Status = 'Доставлено' THEN 1 ELSE 0 END) AS SuccessfulDeliveries,\n    COUNT(DISTINCT v.VehicleID) AS NumberOfVehiclesUsed,\n    AVG(r.Distance) AS AverageRouteDistance,\n    SUM(CASE WHEN d.Status = 'Задержка' THEN 1 ELSE 0 END) AS DelayedDeliveries\nFROM\n    Routes r\nJOIN\n    Shipments s ON r.ShipperID = s.ShipperID\nJOIN\n    Deliveries d ON s.ShipmentID = d.ShipmentID\nJOIN\n    Vehicles v ON d.VehicleID = v.VehicleID\nGROUP BY\n    r.StartLocation,\n    r.EndLocation\nORDER BY\n    SuccessfulDeliveries DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    r.StartLocation, \n    r.EndLocation, \n    COUNT(DISTINCT d.DeliveryID) AS TotalDeliveries, \n    COUNT(DISTINCT CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID END) AS SuccessfulDeliveries, \n    COUNT(DISTINCT d.VehicleID) AS VehiclesUsed, \n    AVG(r.Distance) AS AverageDistance, \n    COUNT(DISTINCT CASE WHEN d.Status = 'Задержка' THEN d.DeliveryID END) AS DelayedDeliveries\nFROM \n    Routes r\nJOIN \n    Shipments s ON r.ShipperID = s.ShipperID\nJOIN \n    Deliveries d ON s.ShipmentID = d.ShipmentID\nGROUP BY \n    r.StartLocation, \n    r.EndLocation\nORDER BY \n    SuccessfulDeliveries DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    r.StartLocation, \n    r.EndLocation, \n    COUNT(DISTINCT d.DeliveryID) AS TotalDeliveries, \n    COUNT(DISTINCT CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID END) AS SuccessfulDeliveries, \n    COUNT(DISTINCT d.VehicleID) AS VehiclesUsed, \n    AVG(r.Distance) AS AverageDistance, \n    COUNT(DISTINCT CASE WHEN d.Status = 'Задержка' THEN d.DeliveryID END) AS DelayedDeliveries\nFROM \n    Routes r\nJOIN \n    Shippers s ON r.ShipperID = s.ShipperID\nJOIN \n    Deliveries d ON r.RouteID = d.RouteID\nGROUP BY \n    r.StartLocation, \n    r.EndLocation\nORDER BY \n    SuccessfulDeliveries DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    r.RouteID,\n    r.StartLocation,\n    r.EndLocation,\n    COUNT(DISTINCT d.DeliveryID) AS TotalDeliveries,\n    COUNT(DISTINCT CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID END) AS SuccessfulDeliveries,\n    COUNT(DISTINCT d.VehicleID) AS VehiclesUsed,\n    AVG(r.Distance) AS AvgDistance,\n    COUNT(DISTINCT CASE WHEN d.Status = 'Задержка' THEN d.DeliveryID END) AS DelayedDeliveries\nFROM \n    Routes r\nJOIN \n    Shippers s ON r.ShipperID = s.ShipperID\nJOIN \n    Shipments sh ON s.ShipperID = sh.ShipperID\nJOIN \n    Deliveries d ON sh.ShipmentID = d.ShipmentID\nGROUP BY \n    r.RouteID, r.StartLocation, r.EndLocation\nORDER BY \n    SuccessfulDeliveries DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    r.RouteID,\n    r.StartLocation,\n    r.EndLocation,\n    COUNT(d.DeliveryID) AS TotalDeliveries,\n    COUNT(CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID END) AS SuccessfulDeliveries,\n    COUNT(DISTINCT d.VehicleID) AS UsedVehicles,\n    AVG(r.Distance) AS AvgDistance,\n    COUNT(CASE WHEN d.Status = 'Задержка' THEN d.DeliveryID END) AS DelayedDeliveries\nFROM \n    Routes r\nLEFT JOIN \n    Shipments s ON r.ShipperID = s.ShipperID\nLEFT JOIN \n    Deliveries d ON s.ShipmentID = d.ShipmentID\nGROUP BY \n    r.RouteID, r.StartLocation, r.EndLocation\nORDER BY \n    SuccessfulDeliveries DESC\nLIMIT 5;",
            "gigachat_response": "WITH SuccessfulDeliveries AS (\n    SELECT r.RouteID, COUNT(*) AS NumSuccessfulDeliveries\n    FROM Routes r\n    INNER JOIN Shipments sh ON r.ShipperID = sh.ShipperID\n    INNER JOIN Deliveries d ON sh.ShipmentID = d.ShipmentID\n    WHERE d.Status IN ('Доставлено')\n    GROUP BY r.RouteID\n), AllDeliveries AS (\n    SELECT r.RouteID, COUNT(*) AS NumAllDeliveries\n    FROM Routes r\n    INNER JOIN Shipments sh ON r.ShipperID = sh.ShipperID\n    INNER JOIN Deliveries d ON sh.ShipmentID = d.ShipmentID\n    GROUP BY r.RouteID\n), DelayedDeliveries AS (\n    SELECT r.RouteID, COUNT(*) AS NumDelayedDeliveries\n    FROM Routes r\n    INNER JOIN Shipments sh ON r.ShipperID = sh.ShipperID\n    INNER JOIN Deliveries d ON sh.ShipmentID = d.ShipmentID\n    WHERE d.Status IN ('Задержка')\n    GROUP BY r.RouteID\n), UsedVehicles AS (\n    SELECT r.RouteID, COUNT(DISTINCT v.VehicleID) AS NumUsedVehicles\n    FROM Routes r\n    INNER JOIN Shipments sh ON r.ShipperID = sh.ShipperID\n    INNER JOIN Deliveries d ON sh.ShipmentID = d.ShipmentID\n    INNER JOIN Vehicles v ON d.VehicleID = v.VehicleID\n    GROUP BY r.RouteID\n)\nSELECT \n    r.StartLocation, \n    r.EndLocation, \n    COALESCE(sd.NumSuccessfulDeliveries, 0) AS NumSuccessfulDeliveries,\n    COALESCE(ad.NumAllDeliveries, 0) AS NumTotalDeliveries,\n    COALESCE(uv.NumUsedVehicles, 0) AS NumUsedVehicles,\n    ROUND(AVG(r.Distance), 2) AS AverageDistance,\n    COALESCE(dd.NumDelayedDeliveries, 0) AS NumDelayedDeliveries\nFROM Routes r\nLEFT JOIN SuccessfulDeliveries sd ON r.RouteID = sd.RouteID\nLEFT JOIN AllDeliveries ad ON r.RouteID = ad.RouteID\nLEFT JOIN UsedVehicles uv ON r.RouteID = uv.RouteID\nLEFT JOIN DelayedDeliveries dd ON r.RouteID = dd.RouteID\nGROUP BY r.RouteID, r.StartLocation, r.EndLocation\nORDER BY NumSuccessfulDeliveries DESC\nLIMIT 5;",
            "gigachat_response_ru": "SELECT r.RouteID,\n       r.StartLocation,\n       r.EndLocation,\n       COUNT(s.ShipmentID) AS TotalDeliveries,\n       COUNT(CASE WHEN d.Status = 'Доставлено' THEN 1 ELSE NULL END) AS SuccessfulDeliveries,\n       COUNT(DISTINCT v.VehicleID) AS UniqueVehiclesUsed,\n       AVG(r.Distance) AS AverageDistance,\n       COUNT(CASE WHEN d.Status = 'Задержка' THEN 1 ELSE NULL END) AS DelayedDeliveries\nFROM Routes r\nLEFT JOIN Shipments s ON r.RouteID = s.RouteID\nLEFT JOIN Deliveries d ON s.ShipmentID = d.ShipmentID\nLEFT JOIN Vehicles v ON d.VehicleID = v.VehicleID\nGROUP BY r.RouteID, r.StartLocation, r.EndLocation\nORDER BY SuccessfulDeliveries DESC\nLIMIT 5;"
        },
        {
            "question": "Каков комплексный анализ заказов с учетом деталей доставки и платежей? Покажите топ-8 заказов с наибольшей стоимостью, включая номер заказа, имя клиента, количество заказанных продуктов, общее количество единиц, стоимость заказа, количество отправлений, количество платежей и максимальную сумму платежа.",
            "sql_query": "SELECT o.OrderID, c.Name as ClientName, COUNT(DISTINCT od.ProductID) as ProductsOrdered, SUM(od.Quantity) as TotalItems, SUM(od.Quantity * od.UnitPrice) as OrderValue, COUNT(DISTINCT s.ShipmentID) as ShipmentsCount, COUNT(DISTINCT p.PaymentID) as PaymentsCount, MAX(CASE WHEN p.Status = 'Завершено' THEN p.Amount ELSE 0 END) as MaxPayment FROM Orders o JOIN Clients c ON o.ClientID = c.ClientID JOIN OrderDetails od ON o.OrderID = od.OrderID JOIN Shipments s ON o.OrderID = s.OrderID JOIN Payments p ON o.OrderID = p.OrderID WHERE o.Status = 'Доставлено' GROUP BY o.OrderID, c.Name HAVING COUNT(DISTINCT od.ProductID) > 1 ORDER BY OrderValue DESC LIMIT 8;",
            "gpt-4o_response": "SELECT \n    o.OrderID,\n    c.Name AS ClientName,\n    COUNT(DISTINCT od.ProductID) AS NumberOfProducts,\n    SUM(od.Quantity) AS TotalUnits,\n    o.TotalAmount AS OrderAmount,\n    COUNT(DISTINCT s.ShipmentID) AS NumberOfShipments,\n    COUNT(DISTINCT p.PaymentID) AS NumberOfPayments,\n    MAX(p.Amount) AS MaxPaymentAmount\nFROM \n    Orders o\nJOIN \n    Clients c ON o.ClientID = c.ClientID\nLEFT JOIN \n    OrderDetails od ON o.OrderID = od.OrderID\nLEFT JOIN \n    Shipments s ON o.OrderID = s.OrderID\nLEFT JOIN \n    Payments p ON o.OrderID = p.OrderID\nGROUP BY \n    o.OrderID, c.Name, o.TotalAmount\nORDER BY \n    o.TotalAmount DESC\nLIMIT 8;",
            "gpt-4o_response_ru": "SELECT \n    o.OrderID,\n    c.Name AS ClientName,\n    COUNT(DISTINCT od.ProductID) AS ProductCount,\n    SUM(od.Quantity) AS TotalUnits,\n    o.TotalAmount AS OrderAmount,\n    COUNT(DISTINCT s.ShipmentID) AS ShipmentCount,\n    COUNT(DISTINCT p.PaymentID) AS PaymentCount,\n    MAX(p.Amount) AS MaxPaymentAmount\nFROM \n    Orders o\nJOIN \n    Clients c ON o.ClientID = c.ClientID\nJOIN \n    OrderDetails od ON o.OrderID = od.OrderID\nLEFT JOIN \n    Shipments s ON o.OrderID = s.OrderID\nLEFT JOIN \n    Payments p ON o.OrderID = p.OrderID\nGROUP BY \n    o.OrderID, c.Name, o.TotalAmount\nORDER BY \n    o.TotalAmount DESC\nLIMIT 8;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    o.OrderID,\n    c.Name AS ClientName,\n    COUNT(DISTINCT od.ProductID) AS NumberOfProducts,\n    SUM(od.Quantity) AS TotalQuantity,\n    o.TotalAmount AS OrderCost,\n    COUNT(DISTINCT s.ShipmentID) AS NumberOfShipments,\n    COUNT(DISTINCT p.PaymentID) AS NumberOfPayments,\n    MAX(p.Amount) AS MaxPaymentAmount\nFROM Orders o\nJOIN Clients c ON o.ClientID = c.ClientID\nLEFT JOIN OrderDetails od ON o.OrderID = od.OrderID\nLEFT JOIN Shipments s ON o.OrderID = s.OrderID\nLEFT JOIN Payments p ON o.OrderID = p.OrderID\nGROUP BY o.OrderID, c.Name, o.TotalAmount\nORDER BY o.TotalAmount DESC\nLIMIT 8;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    o.OrderID,\n    c.Name AS ClientName,\n    COUNT(DISTINCT od.ProductID) AS NumberOfProducts,\n    SUM(od.Quantity) AS TotalUnits,\n    o.TotalAmount AS OrderCost,\n    COUNT(DISTINCT s.ShipmentID) AS NumberOfShipments,\n    COUNT(DISTINCT p.PaymentID) AS NumberOfPayments,\n    MAX(p.Amount) AS MaxPaymentAmount\nFROM Orders o\nJOIN Clients c ON o.ClientID = c.ClientID\nLEFT JOIN OrderDetails od ON o.OrderID = od.OrderID\nLEFT JOIN Shipments s ON o.OrderID = s.OrderID\nLEFT JOIN Payments p ON o.OrderID = p.OrderID\nGROUP BY o.OrderID, c.Name, o.TotalAmount\nORDER BY o.TotalAmount DESC\nLIMIT 8;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    o.OrderID, \n    c.Name AS ClientName, \n    COUNT(DISTINCT od.ProductID) AS NumberOfProducts, \n    SUM(od.Quantity) AS TotalQuantity, \n    o.TotalAmount AS OrderValue, \n    COUNT(DISTINCT s.ShipmentID) AS NumberOfShipments, \n    COUNT(DISTINCT p.PaymentID) AS NumberOfPayments, \n    MAX(p.Amount) AS MaxPaymentAmount\nFROM \n    Orders o\nJOIN \n    Clients c ON o.ClientID = c.ClientID\nJOIN \n    OrderDetails od ON o.OrderID = od.OrderID\nLEFT JOIN \n    Shipments s ON o.OrderID = s.OrderID\nLEFT JOIN \n    Payments p ON o.OrderID = p.OrderID\nGROUP BY \n    o.OrderID, c.Name, o.TotalAmount\nORDER BY \n    o.TotalAmount DESC\nLIMIT 8;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    o.OrderID, \n    c.Name AS ClientName, \n    COUNT(DISTINCT od.ProductID) AS NumberOfProducts, \n    SUM(od.Quantity) AS TotalQuantity, \n    o.TotalAmount AS OrderValue, \n    COUNT(DISTINCT s.ShipmentID) AS NumberOfShipments, \n    COUNT(DISTINCT p.PaymentID) AS NumberOfPayments, \n    MAX(p.Amount) AS MaxPaymentAmount\nFROM \n    Orders o\nJOIN \n    Clients c ON o.ClientID = c.ClientID\nJOIN \n    OrderDetails od ON o.OrderID = od.OrderID\nLEFT JOIN \n    Shipments s ON o.OrderID = s.OrderID\nLEFT JOIN \n    Payments p ON o.OrderID = p.OrderID\nGROUP BY \n    o.OrderID, c.Name, o.TotalAmount\nORDER BY \n    o.TotalAmount DESC\nLIMIT 8;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    o.OrderID AS 'Номер заказа',\n    c.Name AS 'Имя клиента',\n    COUNT(DISTINCT od.ProductID) AS 'Количество заказанных продуктов',\n    SUM(od.Quantity) AS 'Общее количество единиц',\n    o.TotalAmount AS 'Стоимость заказа',\n    COUNT(DISTINCT s.ShipmentID) AS 'Количество отправлений',\n    COUNT(DISTINCT p.PaymentID) AS 'Количество платежей',\n    MAX(p.Amount) AS 'Максимальная сумма платежа'\nFROM Orders o\nJOIN Clients c ON o.ClientID = c.ClientID\nJOIN OrderDetails od ON o.OrderID = od.OrderID\nLEFT JOIN Shipments s ON o.OrderID = s.OrderID\nLEFT JOIN Payments p ON o.OrderID = p.OrderID\nGROUP BY o.OrderID, c.Name, o.TotalAmount\nORDER BY o.TotalAmount DESC\nLIMIT 8;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    o.OrderID,\n    c.Name AS ClientName,\n    COUNT(DISTINCT od.ProductID) AS OrderedProductsCount,\n    SUM(od.Quantity) AS TotalUnits,\n    o.TotalAmount AS OrderTotal,\n    COUNT(DISTINCT s.ShipmentID) AS ShipmentsCount,\n    COUNT(DISTINCT p.PaymentID) AS PaymentsCount,\n    MAX(p.Amount) AS MaxPaymentAmount\nFROM \n    Orders o\nJOIN \n    Clients c ON o.ClientID = c.ClientID\nLEFT JOIN \n    OrderDetails od ON o.OrderID = od.OrderID\nLEFT JOIN \n    Shipments s ON o.OrderID = s.OrderID\nLEFT JOIN \n    Payments p ON o.OrderID = p.OrderID\nGROUP BY \n    o.OrderID, c.Name, o.TotalAmount\nORDER BY \n    o.TotalAmount DESC\nLIMIT 8;",
            "gigachat_response": "SELECT \n    o.OrderID,\n    c.Name AS ClientName,\n    COUNT(DISTINCT od.ProductID) AS NumberOfProducts,\n    SUM(od.Quantity) AS TotalUnitsOrdered,\n    o.TotalAmount AS OrderTotalCost,\n    COUNT(DISTINCT sh.ShipmentID) AS NumberOfShipments,\n    COUNT(DISTINCT p.PaymentID) AS NumberOfPayments,\n    MAX(p.Amount) AS MaximumPaymentAmount\nFROM \n    Orders o\nJOIN \n    Clients c ON o.ClientID = c.ClientID\nJOIN \n    OrderDetails od ON o.OrderID = od.OrderID\nLEFT JOIN \n    Shipments sh ON o.OrderID = sh.OrderID\nLEFT JOIN \n    Payments p ON o.OrderID = p.OrderID\nGROUP BY \n    o.OrderID, c.Name, o.TotalAmount\nORDER BY \n    o.TotalAmount DESC\nLIMIT 8;",
            "gigachat_response_ru": "SELECT \n    o.OrderID,\n    c.Name AS ClientName,\n    COUNT(DISTINCT od.ProductID) AS NumOfProducts,\n    SUM(od.Quantity) AS TotalUnitsOrdered,\n    o.TotalAmount AS OrderTotalCost,\n    COUNT(DISTINCT sh.ShipmentID) AS NumberOfShipments,\n    COUNT(DISTINCT p.PaymentID) AS NumberOfPayments,\n    MAX(p.Amount) AS MaxPaymentAmount\nFROM \n    Orders o\nJOIN \n    Clients c ON o.ClientID = c.ClientID\nLEFT JOIN \n    OrderDetails od ON o.OrderID = od.OrderID\nLEFT JOIN \n    Shipments sh ON o.OrderID = sh.OrderID\nLEFT JOIN \n    Payments p ON o.OrderID = p.OrderID\nGROUP BY \n    o.OrderID, c.Name, o.TotalAmount\nORDER BY \n    o.TotalAmount DESC\nLIMIT 8;"
        },
        {
            "question": "Каков комплексный анализ производительности поставщиков с учетом метрик продуктов и платежей? Покажите топ-7 поставщиков с наибольшей выручкой, включая идентификатор и название поставщика, общее количество продуктов, количество активного инвентаря, общее количество заказов, общую выручку, среднюю сумму платежа и количество завершенных платежей.",
            "sql_query": "SELECT s.SupplierID, s.Name as SupplierName, COUNT(DISTINCT p.ProductID) as TotalProducts, SUM(CASE WHEN p.Discontinued = FALSE THEN i.Quantity ELSE 0 END) as ActiveStock, COUNT(DISTINCT o.OrderID) as TotalOrders, SUM(od.Quantity * od.UnitPrice) as TotalRevenue, AVG(pm.Amount) as AvgPaymentAmount, COUNT(DISTINCT CASE WHEN pm.Status = 'Завершено' THEN pm.PaymentID END) as CompletedPayments FROM Suppliers s JOIN Products p ON s.SupplierID = p.SupplierID JOIN Inventory i ON p.ProductID = i.ProductID JOIN OrderDetails od ON p.ProductID = od.ProductID JOIN Orders o ON od.OrderID = o.OrderID JOIN Payments pm ON o.OrderID = pm.OrderID WHERE p.StockQuantity > 0 GROUP BY s.SupplierID, s.Name HAVING COUNT(DISTINCT p.ProductID) > 2 ORDER BY TotalRevenue DESC LIMIT 7;",
            "gpt-4o_response": "SELECT \n    s.SupplierID, \n    s.Name AS SupplierName, \n    COUNT(DISTINCT p.ProductID) AS TotalProducts, \n    SUM(i.Quantity) AS ActiveInventoryQuantity, \n    COUNT(DISTINCT o.OrderID) AS TotalOrders, \n    SUM(od.Quantity * od.UnitPrice * (1 - od.Discount / 100)) AS TotalRevenue, \n    AVG(pmt.Amount) AS AvgPaymentAmount, \n    COUNT(DISTINCT CASE WHEN pmt.Status = 'Завершено' THEN pmt.PaymentID END) AS CompletedPayments\nFROM \n    Suppliers s\nJOIN \n    Products p ON s.SupplierID = p.SupplierID\nLEFT JOIN \n    Inventory i ON p.ProductID = i.ProductID\nLEFT JOIN \n    OrderDetails od ON p.ProductID = od.ProductID\nLEFT JOIN \n    Orders o ON od.OrderID = o.OrderID\nLEFT JOIN \n    Payments pmt ON o.OrderID = pmt.OrderID\nGROUP BY \n    s.SupplierID, s.Name\nORDER BY \n    TotalRevenue DESC\nLIMIT 7;",
            "gpt-4o_response_ru": "SELECT \n    s.SupplierID, \n    s.Name AS SupplierName, \n    COUNT(DISTINCT p.ProductID) AS TotalProducts, \n    SUM(i.Quantity) AS ActiveInventoryQuantity, \n    COUNT(DISTINCT o.OrderID) AS TotalOrders, \n    SUM(p.UnitPrice * od.Quantity * (1 - od.Discount / 100)) AS TotalRevenue, \n    AVG(pmt.Amount) AS AvgPaymentAmount, \n    COUNT(DISTINCT CASE WHEN pmt.Status = 'Завершено' THEN pmt.PaymentID END) AS CompletedPayments\nFROM \n    Suppliers s\nJOIN \n    Products p ON s.SupplierID = p.SupplierID\nLEFT JOIN \n    Inventory i ON p.ProductID = i.ProductID\nLEFT JOIN \n    OrderDetails od ON p.ProductID = od.ProductID\nLEFT JOIN \n    Orders o ON od.OrderID = o.OrderID\nLEFT JOIN \n    Payments pmt ON o.OrderID = pmt.OrderID\nGROUP BY \n    s.SupplierID, s.Name\nORDER BY \n    TotalRevenue DESC\nLIMIT 7;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    s.SupplierID,\n    s.Name AS SupplierName,\n    COUNT(DISTINCT p.ProductID) AS TotalProducts,\n    SUM(CASE WHEN p.StockQuantity > 0 THEN 1 ELSE 0 END) AS ActiveInventoryCount,\n    COUNT(DISTINCT o.OrderID) AS TotalOrders,\n    SUM(p.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue,\n    AVG(pm.Amount) AS AveragePaymentAmount,\n    SUM(CASE WHEN pm.Status = 'Завершено' THEN 1 ELSE 0 END) AS CompletedPaymentsCount\nFROM Suppliers s\nJOIN Products p ON s.SupplierID = p.SupplierID\nLEFT JOIN OrderDetails od ON p.ProductID = od.ProductID\nLEFT JOIN Orders o ON od.OrderID = o.OrderID\nLEFT JOIN Payments pm ON o.OrderID = pm.OrderID\nGROUP BY s.SupplierID, s.Name\nORDER BY TotalRevenue DESC\nLIMIT 7;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    s.SupplierID,\n    s.Name AS SupplierName,\n    COUNT(DISTINCT p.ProductID) AS TotalProducts,\n    SUM(CASE WHEN i.Quantity > 0 THEN 1 ELSE 0 END) AS ActiveInventoryCount,\n    COUNT(DISTINCT o.OrderID) AS TotalOrders,\n    SUM(p.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue,\n    AVG(pay.Amount) AS AveragePaymentAmount,\n    SUM(CASE WHEN pay.Status = 'Завершено' THEN 1 ELSE 0 END) AS CompletedPaymentsCount\nFROM Suppliers s\nJOIN Products p ON s.SupplierID = p.SupplierID\nLEFT JOIN Inventory i ON p.ProductID = i.ProductID\nLEFT JOIN OrderDetails od ON p.ProductID = od.ProductID\nLEFT JOIN Orders o ON od.OrderID = o.OrderID\nLEFT JOIN Payments pay ON o.OrderID = pay.OrderID\nGROUP BY s.SupplierID, s.Name\nORDER BY TotalRevenue DESC\nLIMIT 7;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    s.SupplierID, \n    s.Name AS SupplierName, \n    COUNT(DISTINCT p.ProductID) AS TotalProducts, \n    SUM(i.Quantity) AS ActiveInventory, \n    COUNT(DISTINCT o.OrderID) AS TotalOrders, \n    SUM(p.UnitPrice * od.Quantity * (1 - od.Discount/100)) AS TotalRevenue, \n    AVG(p.UnitPrice * od.Quantity * (1 - od.Discount/100)) AS AvgPayment, \n    COUNT(DISTINCT CASE WHEN p.Status = 'Завершено' THEN p.PaymentID END) AS CompletedPayments\nFROM \n    Suppliers s \nJOIN \n    Products p ON s.SupplierID = p.SupplierID \nJOIN \n    OrderDetails od ON p.ProductID = od.ProductID \nJOIN \n    Orders o ON od.OrderID = o.OrderID \nJOIN \n    Payments p ON o.OrderID = p.OrderID \nJOIN \n    Inventory i ON p.ProductID = i.ProductID \nGROUP BY \n    s.SupplierID, s.Name \nORDER BY \n    TotalRevenue DESC \nLIMIT 7;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    s.SupplierID, \n    s.Name AS SupplierName, \n    COUNT(DISTINCT p.ProductID) AS TotalProducts, \n    SUM(i.Quantity) AS ActiveInventory, \n    COUNT(DISTINCT o.OrderID) AS TotalOrders, \n    SUM(p.UnitPrice * od.Quantity * (1 - od.Discount / 100)) AS TotalRevenue, \n    AVG(pay.Amount) AS AvgPaymentAmount, \n    COUNT(DISTINCT CASE WHEN pay.Status = 'Завершено' THEN pay.PaymentID END) AS CompletedPayments\nFROM \n    Suppliers s\nJOIN \n    Products p ON s.SupplierID = p.SupplierID\nJOIN \n    OrderDetails od ON p.ProductID = od.ProductID\nJOIN \n    Orders o ON od.OrderID = o.OrderID\nJOIN \n    Payments pay ON o.OrderID = pay.OrderID\nLEFT JOIN \n    Inventory i ON p.ProductID = i.ProductID\nGROUP BY \n    s.SupplierID, s.Name\nORDER BY \n    TotalRevenue DESC\nLIMIT 7;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    s.SupplierID,\n    s.Name AS SupplierName,\n    COUNT(DISTINCT p.ProductID) AS TotalProducts,\n    SUM(i.Quantity) AS ActiveInventory,\n    COUNT(DISTINCT o.OrderID) AS TotalOrders,\n    SUM(od.Quantity * od.UnitPrice * (1 - od.Discount/100)) AS TotalRevenue,\n    AVG(py.Amount) AS AvgPaymentAmount,\n    COUNT(DISTINCT CASE WHEN py.Status = 'Завершено' THEN py.PaymentID END) AS CompletedPayments\nFROM \n    Suppliers s\nJOIN \n    Products p ON s.SupplierID = p.SupplierID\nLEFT JOIN \n    OrderDetails od ON p.ProductID = od.ProductID\nLEFT JOIN \n    Orders o ON od.OrderID = o.OrderID\nLEFT JOIN \n    Inventory i ON p.ProductID = i.ProductID\nLEFT JOIN \n    Payments py ON o.OrderID = py.OrderID\nGROUP BY \n    s.SupplierID, s.Name\nORDER BY \n    TotalRevenue DESC\nLIMIT 7;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    s.SupplierID,\n    s.Name AS SupplierName,\n    COUNT(DISTINCT p.ProductID) AS TotalProducts,\n    SUM(i.Quantity) AS ActiveInventory,\n    COUNT(DISTINCT o.OrderID) AS TotalOrders,\n    SUM(od.Quantity * od.UnitPrice * (1 - od.Discount/100)) AS TotalRevenue,\n    AVG(py.Amount) AS AvgPaymentAmount,\n    COUNT(DISTINCT CASE WHEN py.Status = 'Завершено' THEN py.PaymentID END) AS CompletedPayments\nFROM \n    Suppliers s\nJOIN \n    Products p ON s.SupplierID = p.SupplierID\nLEFT JOIN \n    Inventory i ON p.ProductID = i.ProductID\nLEFT JOIN \n    OrderDetails od ON p.ProductID = od.ProductID\nLEFT JOIN \n    Orders o ON od.OrderID = o.OrderID\nLEFT JOIN \n    Payments py ON o.OrderID = py.OrderID\nGROUP BY \n    s.SupplierID, s.Name\nORDER BY \n    TotalRevenue DESC\nLIMIT 7;",
            "gigachat_response": "SELECT \n    s.SupplierID,\n    s.Name AS SupplierName,\n    COUNT(DISTINCT p.ProductID) AS TotalProducts,\n    SUM(i.Quantity) AS ActiveInventoryCount,\n    COUNT(DISTINCT o.OrderID) AS TotalOrders,\n    SUM(od.Quantity * od.UnitPrice * (1 - od.Discount/100)) AS TotalRevenue,\n    AVG(pm.Amount) AS AveragePaymentAmount,\n    COUNT(CASE WHEN pm.Status = 'Завершено' THEN pm.PaymentID END) AS CompletedPaymentsCount\nFROM \n    Suppliers s\nJOIN \n    Products p ON s.SupplierID = p.SupplierID\nLEFT JOIN \n    Inventory i ON p.ProductID = i.ProductID\nJOIN \n    OrderDetails od ON p.ProductID = od.ProductID\nJOIN \n    Orders o ON od.OrderID = o.OrderID\nJOIN \n    Payments pm ON o.OrderID = pm.OrderID\nGROUP BY \n    s.SupplierID, s.Name\nORDER BY \n    TotalRevenue DESC\nLIMIT 7;",
            "gigachat_response_ru": "SELECT \n    s.SupplierID,\n    s.Name AS SupplierName,\n    COUNT(DISTINCT p.ProductID) AS TotalProducts,\n    SUM(i.Quantity) AS ActiveInventory,\n    COUNT(DISTINCT o.OrderID) AS TotalOrders,\n    SUM(od.Quantity * od.UnitPrice * (1 - od.Discount/100)) AS TotalRevenue,\n    AVG(pm.Amount) AS AveragePaymentAmount,\n    COUNT(CASE WHEN pm.Status = 'Завершено' THEN pm.PaymentID END) AS CompletedPaymentsCount\nFROM \n    Suppliers s\nLEFT JOIN \n    Products p ON s.SupplierID = p.SupplierID\nLEFT JOIN \n    Inventory i ON p.ProductID = i.ProductID\nLEFT JOIN \n    OrderDetails od ON p.ProductID = od.ProductID\nLEFT JOIN \n    Orders o ON od.OrderID = o.OrderID\nLEFT JOIN \n    Payments pm ON o.OrderID = pm.OrderID\nGROUP BY \n    s.SupplierID, s.Name\nORDER BY \n    TotalRevenue DESC\nLIMIT 7;"
        },
        {
            "question": "Каков многомерный анализ производительности складов? Покажите топ-4 склада с наибольшим количеством товаров, включая идентификатор и название склада, город, вместимость, имя менеджера, количество уникальных продуктов, общее количество товаров, количество товаров категории 'Бытовая техника', количество товаров категории 'Кухонная техника', среднюю цену продукта, общее количество отправлений и количество успешных отправлений.",
            "sql_query": "SELECT w.WarehouseID, w.Name as WarehouseName, w.City, w.Capacity, COUNT(DISTINCT i.ProductID) as UniqueProducts, SUM(i.Quantity) as TotalInventory, COUNT(DISTINCT CASE WHEN p.Category = 'Бытовая техника' THEN p.ProductID END) as AppliancesCount, COUNT(DISTINCT CASE WHEN p.Category = 'Кухонная техника' THEN p.ProductID END) as KitchenwareCount, AVG(p.UnitPrice) as AvgProductPrice, COUNT(DISTINCT s.ShipmentID) as TotalShipments, COUNT(DISTINCT CASE WHEN s.Status = 'Доставлено' THEN s.ShipmentID END) as SuccessfulShipments FROM Warehouses w JOIN Inventory i ON w.WarehouseID = i.WarehouseID JOIN Products p ON i.ProductID = p.ProductID JOIN Shipments s ON w.WarehouseID = s.ShipmentID GROUP BY w.WarehouseID, w.Name, w.City, w.Capacity HAVING SUM(i.Quantity) > 50 ORDER BY TotalInventory DESC LIMIT 4;",
            "gpt-4o_response": "SELECT \n    w.WarehouseID,\n    w.Name AS WarehouseName,\n    w.City,\n    w.Capacity,\n    CONCAT(e.FirstName, ' ', e.LastName) AS ManagerName,\n    COUNT(DISTINCT i.ProductID) AS UniqueProducts,\n    SUM(i.Quantity) AS TotalItems,\n    SUM(CASE WHEN p.Category = 'Бытовая техника' THEN i.Quantity ELSE 0 END) AS HouseholdItems,\n    SUM(CASE WHEN p.Category = 'Кухонная техника' THEN i.Quantity ELSE 0 END) AS KitchenItems,\n    AVG(p.UnitPrice) AS AvgProductPrice,\n    COUNT(DISTINCT s.ShipmentID) AS TotalShipments,\n    COUNT(DISTINCT CASE WHEN s.Status = 'Доставлено' THEN s.ShipmentID END) AS SuccessfulShipments\nFROM \n    Warehouses w\nJOIN \n    Employees e ON w.ManagerID = e.EmployeeID\nJOIN \n    Inventory i ON w.WarehouseID = i.WarehouseID\nJOIN \n    Products p ON i.ProductID = p.ProductID\nLEFT JOIN \n    Shipments s ON w.WarehouseID = s.ShipmentID\nGROUP BY \n    w.WarehouseID, w.Name, w.City, w.Capacity, ManagerName\nORDER BY \n    TotalItems DESC\nLIMIT 4;",
            "gpt-4o_response_ru": "SELECT \n    w.WarehouseID,\n    w.Name AS WarehouseName,\n    w.City,\n    w.Capacity,\n    CONCAT(e.FirstName, ' ', e.LastName) AS ManagerName,\n    COUNT(DISTINCT i.ProductID) AS UniqueProducts,\n    SUM(i.Quantity) AS TotalProducts,\n    SUM(CASE WHEN p.Category = 'Бытовая техника' THEN i.Quantity ELSE 0 END) AS HouseholdAppliances,\n    SUM(CASE WHEN p.Category = 'Кухонная техника' THEN i.Quantity ELSE 0 END) AS KitchenAppliances,\n    AVG(p.UnitPrice) AS AvgProductPrice,\n    COUNT(DISTINCT s.ShipmentID) AS TotalShipments,\n    COUNT(DISTINCT CASE WHEN s.Status = 'Доставлено' THEN s.ShipmentID END) AS SuccessfulShipments\nFROM \n    Warehouses w\nJOIN \n    Employees e ON w.ManagerID = e.EmployeeID\nJOIN \n    Inventory i ON w.WarehouseID = i.WarehouseID\nJOIN \n    Products p ON i.ProductID = p.ProductID\nLEFT JOIN \n    Shipments s ON w.WarehouseID = s.OrderID\nGROUP BY \n    w.WarehouseID, w.Name, w.City, w.Capacity, ManagerName\nORDER BY \n    TotalProducts DESC\nLIMIT 4;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    w.WarehouseID,\n    w.Name AS WarehouseName,\n    w.City,\n    w.Capacity,\n    e.FirstName || ' ' || e.LastName AS ManagerName,\n    COUNT(DISTINCT i.ProductID) AS UniqueProducts,\n    SUM(i.Quantity) AS TotalQuantity,\n    SUM(CASE WHEN p.Category = 'Бытовая техника' THEN i.Quantity ELSE 0 END) AS HomeAppliancesQuantity,\n    SUM(CASE WHEN p.Category = 'Кухонная техника' THEN i.Quantity ELSE 0 END) AS KitchenAppliancesQuantity,\n    AVG(p.UnitPrice) AS AverageProductPrice,\n    COUNT(DISTINCT s.ShipmentID) AS TotalShipments,\n    SUM(CASE WHEN s.Status = 'Доставлено' THEN 1 ELSE 0 END) AS SuccessfulShipments\nFROM\n    Warehouses w\nJOIN\n    Inventory i ON w.WarehouseID = i.WarehouseID\nJOIN\n    Products p ON i.ProductID = p.ProductID\nLEFT JOIN\n    Employees e ON w.ManagerID = e.EmployeeID\nLEFT JOIN\n    Shipments s ON w.WarehouseID = (SELECT WarehouseID FROM Inventory WHERE ProductID = p.ProductID LIMIT 1)\nGROUP BY\n    w.WarehouseID,\n    w.Name,\n    w.City,\n    w.Capacity,\n    e.FirstName,\n    e.LastName\nORDER BY\n    TotalQuantity DESC\nLIMIT 4;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    w.WarehouseID,\n    w.Name AS WarehouseName,\n    w.City,\n    w.Capacity,\n    e.FirstName || ' ' || e.LastName AS ManagerName,\n    COUNT(DISTINCT i.ProductID) AS UniqueProducts,\n    SUM(i.Quantity) AS TotalQuantity,\n    SUM(CASE WHEN p.Category = 'Бытовая техника' THEN i.Quantity ELSE 0 END) AS HomeAppliancesQuantity,\n    SUM(CASE WHEN p.Category = 'Кухонная техника' THEN i.Quantity ELSE 0 END) AS KitchenAppliancesQuantity,\n    AVG(p.UnitPrice) AS AverageProductPrice,\n    COUNT(DISTINCT s.ShipmentID) AS TotalShipments,\n    SUM(CASE WHEN s.Status = 'Доставлено' THEN 1 ELSE 0 END) AS SuccessfulShipments\nFROM Warehouses w\nJOIN Employees e ON w.ManagerID = e.EmployeeID\nJOIN Inventory i ON w.WarehouseID = i.WarehouseID\nJOIN Products p ON i.ProductID = p.ProductID\nLEFT JOIN Shipments s ON w.WarehouseID = (SELECT WarehouseID FROM Inventory WHERE ProductID = p.ProductID LIMIT 1)\nGROUP BY w.WarehouseID, w.Name, w.City, w.Capacity, e.FirstName, e.LastName\nORDER BY TotalQuantity DESC\nLIMIT 4;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    w.WarehouseID, \n    w.Name AS WarehouseName, \n    w.City, \n    w.Capacity, \n    CONCAT(e.FirstName, ' ', e.LastName) AS ManagerName, \n    COUNT(DISTINCT i.ProductID) AS UniqueProducts, \n    SUM(i.Quantity) AS TotalProducts, \n    SUM(CASE WHEN p.Category = 'Бытовая техника' THEN i.Quantity ELSE 0 END) AS HouseholdProducts, \n    SUM(CASE WHEN p.Category = 'Кухонная техника' THEN i.Quantity ELSE 0 END) AS KitchenProducts, \n    AVG(p.UnitPrice) AS AvgProductPrice, \n    COUNT(DISTINCT s.ShipmentID) AS TotalShipments, \n    COUNT(DISTINCT CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID END) AS SuccessfulDeliveries\nFROM \n    Warehouses w \nJOIN \n    Employees e ON w.ManagerID = e.EmployeeID \nJOIN \n    Inventory i ON w.WarehouseID = i.WarehouseID \nJOIN \n    Products p ON i.ProductID = p.ProductID \nLEFT JOIN \n    Shipments s ON w.WarehouseID = s.WarehouseID \nLEFT JOIN \n    Deliveries d ON s.ShipmentID = d.ShipmentID \nGROUP BY \n    w.WarehouseID, w.Name, w.City, w.Capacity, e.FirstName, e.LastName \nORDER BY \n    TotalProducts DESC \nLIMIT 4;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    w.WarehouseID, \n    w.Name AS WarehouseName, \n    w.City, \n    w.Capacity, \n    CONCAT(e.FirstName, ' ', e.LastName) AS ManagerName, \n    COUNT(DISTINCT i.ProductID) AS UniqueProducts, \n    SUM(i.Quantity) AS TotalProducts, \n    SUM(CASE WHEN p.Category = 'Бытовая техника' THEN i.Quantity ELSE 0 END) AS HouseholdProducts, \n    SUM(CASE WHEN p.Category = 'Кухонная техника' THEN i.Quantity ELSE 0 END) AS KitchenProducts, \n    AVG(p.UnitPrice) AS AvgProductPrice, \n    COUNT(DISTINCT s.ShipmentID) AS TotalShipments, \n    COUNT(DISTINCT CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID END) AS SuccessfulDeliveries\nFROM \n    Warehouses w\nJOIN \n    Employees e ON w.ManagerID = e.EmployeeID\nJOIN \n    Inventory i ON w.WarehouseID = i.WarehouseID\nJOIN \n    Products p ON i.ProductID = p.ProductID\nLEFT JOIN \n    Shipments s ON w.WarehouseID = s.WarehouseID\nLEFT JOIN \n    Deliveries d ON s.ShipmentID = d.ShipmentID\nGROUP BY \n    w.WarehouseID, w.Name, w.City, w.Capacity, e.FirstName, e.LastName\nORDER BY \n    TotalProducts DESC\nLIMIT 4;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    w.WarehouseID,\n    w.Name AS WarehouseName,\n    w.City,\n    w.Capacity,\n    CONCAT(e.FirstName, ' ', e.LastName) AS ManagerName,\n    COUNT(DISTINCT i.ProductID) AS UniqueProducts,\n    SUM(i.Quantity) AS TotalItems,\n    SUM(CASE WHEN p.Category = 'Бытовая техника' THEN i.Quantity ELSE 0 END) AS HouseholdAppliances,\n    SUM(CASE WHEN p.Category = 'Кухонная техника' THEN i.Quantity ELSE 0 END) AS KitchenAppliances,\n    AVG(p.UnitPrice) AS AvgProductPrice,\n    COUNT(DISTINCT s.ShipmentID) AS TotalShipments,\n    COUNT(DISTINCT CASE WHEN s.Status = 'Доставлено' THEN s.ShipmentID END) AS SuccessfulShipments\nFROM \n    Warehouses w\nLEFT JOIN \n    Employees e ON w.ManagerID = e.EmployeeID\nLEFT JOIN \n    Inventory i ON w.WarehouseID = i.WarehouseID\nLEFT JOIN \n    Products p ON i.ProductID = p.ProductID\nLEFT JOIN \n    Shipments s ON w.WarehouseID = s.ShipmentID\nGROUP BY \n    w.WarehouseID, w.Name, w.City, w.Capacity, ManagerName\nORDER BY \n    TotalItems DESC\nLIMIT 4;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    w.WarehouseID,\n    w.Name AS WarehouseName,\n    w.City,\n    w.Capacity,\n    CONCAT(e.FirstName, ' ', e.LastName) AS ManagerName,\n    COUNT(DISTINCT i.ProductID) AS UniqueProducts,\n    SUM(i.Quantity) AS TotalItems,\n    SUM(CASE WHEN p.Category = 'Бытовая техника' THEN i.Quantity ELSE 0 END) AS HouseholdAppliances,\n    SUM(CASE WHEN p.Category = 'Кухонная техника' THEN i.Quantity ELSE 0 END) AS KitchenAppliances,\n    AVG(p.UnitPrice) AS AvgProductPrice,\n    COUNT(DISTINCT s.ShipmentID) AS TotalShipments,\n    COUNT(DISTINCT CASE WHEN s.Status = 'Доставлено' THEN s.ShipmentID END) AS SuccessfulShipments\nFROM \n    Warehouses w\nJOIN \n    Employees e ON w.ManagerID = e.EmployeeID\nJOIN \n    Inventory i ON w.WarehouseID = i.WarehouseID\nJOIN \n    Products p ON i.ProductID = p.ProductID\nLEFT JOIN \n    Shipments s ON w.WarehouseID = s.ShipmentID\nGROUP BY \n    w.WarehouseID, w.Name, w.City, w.Capacity, ManagerName\nORDER BY \n    TotalItems DESC\nLIMIT 4;",
            "gigachat_response": "SELECT \n    w.WarehouseID,\n    w.Name AS WarehouseName,\n    w.City,\n    w.Capacity,\n    emp.FirstName || ' ' || emp.LastName AS ManagerName,\n    COUNT(DISTINCT inv.ProductID) AS UniqueProductsCount,\n    SUM(inv.Quantity) AS TotalGoodsCount,\n    SUM(CASE WHEN pr.Category = 'Бытовая техника' THEN inv.Quantity ELSE 0 END) AS HouseholdAppliancesCount,\n    SUM(CASE WHEN pr.Category = 'Кухонная техника' THEN inv.Quantity ELSE 0 END) AS KitchenAppliancesCount,\n    AVG(pr.UnitPrice) AS AverageProductPrice,\n    COUNT(sh.ShipmentID) AS TotalShipments,\n    COUNT(CASE WHEN sh.Status = 'Доставлено' THEN sh.ShipmentID END) AS SuccessfulDeliveries\nFROM \n    Warehouses w\nJOIN \n    Inventory inv ON w.WarehouseID = inv.WarehouseID\nJOIN \n    Products pr ON inv.ProductID = pr.ProductID\nLEFT JOIN \n    Employees emp ON w.ManagerID = emp.EmployeeID\nLEFT JOIN \n    Shipments sh ON w.WarehouseID = sh.ShipperID -- Assuming shipments can relate directly to warehouses\nGROUP BY \n    w.WarehouseID, w.Name, w.City, w.Capacity, emp.FirstName, emp.LastName\nORDER BY \n    TotalGoodsCount DESC\nLIMIT 4;",
            "gigachat_response_ru": "SELECT \n    w.WarehouseID,\n    w.Name AS WarehouseName,\n    w.City,\n    w.Capacity,\n    emp.FirstName || ' ' || emp.LastName AS ManagerName,\n    COUNT(DISTINCT inv.ProductID) AS UniqueProductsCount,\n    SUM(inv.Quantity) AS TotalGoodsCount,\n    SUM(CASE WHEN pr.Category = 'Бытовая техника' THEN inv.Quantity ELSE 0 END) AS HouseholdAppliancesCount,\n    SUM(CASE WHEN pr.Category = 'Кухонная техника' THEN inv.Quantity ELSE 0 END) AS KitchenAppliancesCount,\n    AVG(pr.UnitPrice) AS AverageUnitPrice,\n    COUNT(sh.ShipmentID) AS TotalShipments,\n    COUNT(CASE WHEN sh.Status = 'Доставлено' THEN sh.ShipmentID END) AS SuccessfulDeliveries\nFROM \n    Warehouses w\nLEFT JOIN \n    Inventory inv ON w.WarehouseID = inv.WarehouseID\nLEFT JOIN \n    Products pr ON inv.ProductID = pr.ProductID\nLEFT JOIN \n    Shipments sh ON w.WarehouseID = sh.ShipmentID\nLEFT JOIN \n    Employees emp ON w.ManagerID = emp.EmployeeID\nGROUP BY \n    w.WarehouseID, w.Name, w.City, w.Capacity, emp.FirstName, emp.LastName\nORDER BY \n    TotalGoodsCount DESC\nLIMIT 4;"
        },
        {
            "question": "Каков продвинутый анализ производительности сотрудников с учетом метрик доставки? Покажите топ-6 сотрудников с наибольшим количеством успешных доставок, включая идентификатор сотрудника, полное имя, должность, количество управляемых складов, общее количество отправлений, количество успешных доставок, количество управляемых транспортных средств, количество контролируемых маршрутов и среднее расстояние маршрута.",
            "sql_query": "SELECT e.EmployeeID, CONCAT(e.FirstName, ' ', e.LastName) as EmployeeName, e.Title, COUNT(DISTINCT w.WarehouseID) as ManagedWarehouses, COUNT(DISTINCT s.ShipmentID) as TotalShipments, COUNT(DISTINCT CASE WHEN s.Status = 'Доставлено' THEN s.ShipmentID END) as SuccessfulDeliveries, COUNT(DISTINCT v.VehicleID) as VehiclesManaged, COUNT(DISTINCT r.RouteID) as RoutesSupervised, AVG(r.Distance) as AvgRouteDistance FROM Employees e JOIN Warehouses w ON e.EmployeeID = w.ManagerID JOIN Shipments s ON w.WarehouseID = s.ShipmentID JOIN Routes r ON s.ShipperID = r.ShipperID JOIN Vehicles v ON r.ShipperID = v.ShipperID WHERE e.Title LIKE '%Менеджер%' OR e.Title LIKE '%Координатор%' GROUP BY e.EmployeeID, e.FirstName, e.LastName, e.Title HAVING COUNT(DISTINCT s.ShipmentID) > 3 ORDER BY SuccessfulDeliveries DESC LIMIT 6;",
            "gpt-4o_response": "SELECT \n    e.EmployeeID, \n    CONCAT(e.FirstName, ' ', e.LastName) AS EmployeeName, \n    e.Title, \n    COUNT(DISTINCT w.WarehouseID) AS ManagedWarehouses, \n    COUNT(DISTINCT s.ShipmentID) AS TotalShipments, \n    COUNT(DISTINCT CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID END) AS SuccessfulDeliveries, \n    COUNT(DISTINCT v.VehicleID) AS ManagedVehicles, \n    COUNT(DISTINCT r.RouteID) AS ControlledRoutes, \n    AVG(r.Distance) AS AvgRouteDistance\nFROM \n    Employees e\nLEFT JOIN \n    Warehouses w ON e.EmployeeID = w.ManagerID\nLEFT JOIN \n    Shipments s ON e.EmployeeID = s.ShipmentID\nLEFT JOIN \n    Deliveries d ON s.ShipmentID = d.ShipmentID\nLEFT JOIN \n    Vehicles v ON e.EmployeeID = v.ShipperID\nLEFT JOIN \n    Routes r ON e.EmployeeID = r.ShipperID\nGROUP BY \n    e.EmployeeID, EmployeeName, e.Title\nORDER BY \n    SuccessfulDeliveries DESC\nLIMIT 6;",
            "gpt-4o_response_ru": "SELECT \n    e.EmployeeID, \n    CONCAT(e.FirstName, ' ', e.LastName) AS EmployeeName, \n    e.Title, \n    COUNT(DISTINCT w.WarehouseID) AS ManagedWarehouses, \n    COUNT(DISTINCT s.ShipmentID) AS TotalShipments, \n    COUNT(DISTINCT CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID END) AS SuccessfulDeliveries, \n    COUNT(DISTINCT v.VehicleID) AS ManagedVehicles, \n    COUNT(DISTINCT r.RouteID) AS ManagedRoutes, \n    AVG(r.Distance) AS AvgRouteDistance\nFROM \n    Employees e\nLEFT JOIN \n    Warehouses w ON e.EmployeeID = w.ManagerID\nLEFT JOIN \n    Shipments s ON e.EmployeeID = s.ShipmentID\nLEFT JOIN \n    Deliveries d ON s.ShipmentID = d.ShipmentID\nLEFT JOIN \n    Vehicles v ON e.EmployeeID = v.ShipperID\nLEFT JOIN \n    Routes r ON e.EmployeeID = r.ShipperID\nGROUP BY \n    e.EmployeeID, EmployeeName, e.Title\nORDER BY \n    SuccessfulDeliveries DESC\nLIMIT 6;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    e.EmployeeID,\n    e.FirstName || ' ' || e.LastName AS FullName,\n    e.Title,\n    COUNT(DISTINCT w.WarehouseID) AS ManagedWarehousesCount,\n    COUNT(DISTINCT s.ShipmentID) AS TotalShipments,\n    SUM(CASE WHEN d.Status = 'Доставлено' THEN 1 ELSE 0 END) AS SuccessfulDeliveriesCount,\n    COUNT(DISTINCT v.VehicleID) AS ManagedVehiclesCount,\n    COUNT(DISTINCT r.RouteID) AS ControlledRoutesCount,\n    AVG(r.Distance) AS AverageRouteDistance\nFROM\n    Employees e\nLEFT JOIN\n    Warehouses w ON e.EmployeeID = w.ManagerID\nLEFT JOIN\n    Shipments s ON s.ShipmentID IN (SELECT ShipmentID FROM Deliveries WHERE VehicleID IN (SELECT VehicleID FROM Vehicles WHERE ShipperID IN (SELECT ShipperID FROM Routes WHERE ShipperID = s.ShipperID)))\nLEFT JOIN\n    Deliveries d ON s.ShipmentID = d.ShipmentID\nLEFT JOIN\n    Vehicles v ON v.ShipperID IN (SELECT ShipperID FROM Routes WHERE ShipperID = v.ShipperID)\nLEFT JOIN\n    Routes r ON r.ShipperID = v.ShipperID\nGROUP BY\n    e.EmployeeID, FullName, e.Title\nORDER BY\n    SuccessfulDeliveriesCount DESC\nLIMIT 6;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    e.EmployeeID,\n    e.FirstName || ' ' || e.LastName AS FullName,\n    e.Title,\n    COUNT(DISTINCT w.WarehouseID) AS ManagedWarehousesCount,\n    COUNT(DISTINCT s.ShipmentID) AS TotalShipments,\n    SUM(CASE WHEN d.Status = 'Доставлено' THEN 1 ELSE 0 END) AS SuccessfulDeliveries,\n    COUNT(DISTINCT v.VehicleID) AS ManagedVehiclesCount,\n    COUNT(DISTINCT r.RouteID) AS ControlledRoutesCount,\n    AVG(r.Distance) AS AverageRouteDistance\nFROM Employees e\nLEFT JOIN Warehouses w ON e.EmployeeID = w.ManagerID\nLEFT JOIN Shipments s ON e.EmployeeID = s.ShipperID\nLEFT JOIN Deliveries d ON s.ShipmentID = d.ShipmentID\nLEFT JOIN Vehicles v ON s.ShipperID = v.ShipperID\nLEFT JOIN Routes r ON s.ShipperID = r.ShipperID\nGROUP BY e.EmployeeID, FullName, e.Title\nORDER BY SuccessfulDeliveries DESC\nLIMIT 6;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    e.EmployeeID, \n    CONCAT(e.FirstName, ' ', e.LastName) AS EmployeeName, \n    e.Title, \n    COUNT(DISTINCT w.WarehouseID) AS ManagedWarehouses, \n    COUNT(DISTINCT v.VehicleID) AS ManagedVehicles, \n    COUNT(DISTINCT r.RouteID) AS ManagedRoutes, \n    AVG(r.Distance) AS AvgRouteDistance, \n    COUNT(DISTINCT d.DeliveryID) AS TotalDeliveries, \n    COUNT(DISTINCT CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID END) AS SuccessfulDeliveries\nFROM \n    Employees e\nLEFT JOIN \n    Warehouses w ON e.EmployeeID = w.ManagerID\nLEFT JOIN \n    Vehicles v ON e.EmployeeID = v.ShipperID\nLEFT JOIN \n    Routes r ON e.EmployeeID = r.ShipperID\nLEFT JOIN \n    Shipments s ON e.EmployeeID = s.ShipperID\nLEFT JOIN \n    Deliveries d ON s.ShipmentID = d.ShipmentID\nGROUP BY \n    e.EmployeeID, \n    EmployeeName, \n    e.Title\nORDER BY \n    SuccessfulDeliveries DESC\nLIMIT 6;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    e.EmployeeID, \n    CONCAT(e.FirstName, ' ', e.LastName) AS EmployeeName, \n    e.Title, \n    COUNT(DISTINCT w.WarehouseID) AS ManagedWarehouses, \n    SUM(w.Capacity) AS TotalCapacityManaged, \n    COUNT(DISTINCT s.ShipmentID) AS TotalShipments, \n    COUNT(DISTINCT CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID END) AS SuccessfulDeliveries, \n    COUNT(DISTINCT v.VehicleID) AS ManagedVehicles, \n    COUNT(DISTINCT r.RouteID) AS ManagedRoutes, \n    AVG(r.Distance) AS AverageRouteDistance\nFROM \n    Employees e\nLEFT JOIN \n    Warehouses w ON e.EmployeeID = w.ManagerID\nLEFT JOIN \n    Shipments s ON e.EmployeeID = s.EmployeeID\nLEFT JOIN \n    Deliveries d ON s.ShipmentID = d.ShipmentID\nLEFT JOIN \n    Vehicles v ON e.EmployeeID = v.EmployeeID\nLEFT JOIN \n    Routes r ON e.EmployeeID = r.EmployeeID\nGROUP BY \n    e.EmployeeID, EmployeeName, e.Title\nORDER BY \n    SuccessfulDeliveries DESC\nLIMIT 6;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    e.EmployeeID,\n    CONCAT(e.FirstName, ' ', e.LastName) AS FullName,\n    e.Title,\n    COUNT(DISTINCT w.WarehouseID) AS ManagedWarehouses,\n    COUNT(DISTINCT s.ShipmentID) AS TotalShipments,\n    COUNT(DISTINCT CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID END) AS SuccessfulDeliveries,\n    COUNT(DISTINCT v.VehicleID) AS ManagedVehicles,\n    COUNT(DISTINCT r.RouteID) AS ManagedRoutes,\n    AVG(r.Distance) AS AvgRouteDistance\nFROM \n    Employees e\nLEFT JOIN \n    Warehouses w ON e.EmployeeID = w.ManagerID\nLEFT JOIN \n    Shipments s ON e.EmployeeID = s.ShipmentID\nLEFT JOIN \n    Deliveries d ON s.ShipmentID = d.ShipmentID\nLEFT JOIN \n    Vehicles v ON e.EmployeeID = v.ShipperID\nLEFT JOIN \n    Routes r ON e.EmployeeID = r.ShipperID\nGROUP BY \n    e.EmployeeID, FullName, e.Title\nORDER BY \n    SuccessfulDeliveries DESC\nLIMIT 6;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    e.EmployeeID,\n    CONCAT(e.FirstName, ' ', e.LastName) AS FullName,\n    e.Title,\n    COUNT(DISTINCT w.WarehouseID) AS ManagedWarehouses,\n    COUNT(DISTINCT s.ShipmentID) AS TotalShipments,\n    COUNT(DISTINCT CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID END) AS SuccessfulDeliveries,\n    COUNT(DISTINCT v.VehicleID) AS ManagedVehicles,\n    COUNT(DISTINCT r.RouteID) AS ControlledRoutes,\n    AVG(r.Distance) AS AvgRouteDistance\nFROM \n    Employees e\nLEFT JOIN \n    Warehouses w ON e.EmployeeID = w.ManagerID\nLEFT JOIN \n    Shipments s ON w.WarehouseID = (SELECT WarehouseID FROM Inventory WHERE ProductID IN (SELECT ProductID FROM OrderDetails WHERE OrderID = s.OrderID) LIMIT 1)\nLEFT JOIN \n    Deliveries d ON s.ShipmentID = d.ShipmentID\nLEFT JOIN \n    Vehicles v ON e.EmployeeID = (SELECT ShipperID FROM Shippers WHERE ShipperID = v.ShipperID)\nLEFT JOIN \n    Routes r ON e.EmployeeID = (SELECT ShipperID FROM Shippers WHERE ShipperID = r.ShipperID)\nGROUP BY \n    e.EmployeeID, FullName, e.Title\nORDER BY \n    SuccessfulDeliveries DESC\nLIMIT 6;",
            "gigachat_response": "SELECT \n    e.EmployeeID,\n    CONCAT(e.FirstName, ' ', e.LastName) AS FullName,\n    e.Title,\n    COUNT(DISTINCT w.WarehouseID) AS ManagedWarehouses,\n    COUNT(DISTINCT s.ShipmentID) AS TotalShipments,\n    COUNT(CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID ELSE NULL END) AS SuccessfulDeliveries,\n    COUNT(DISTINCT v.VehicleID) AS ManagedVehicles,\n    COUNT(DISTINCT r.RouteID) AS ControlledRoutes,\n    COALESCE(AVG(r.Distance), 0) AS AverageRouteDistance\nFROM Employees e\nLEFT JOIN Warehouses w ON e.EmployeeID = w.ManagerID\nLEFT JOIN Shipments s ON e.EmployeeID = s.ShipperID\nLEFT JOIN Deliveries d ON s.ShipmentID = d.ShipmentID\nLEFT JOIN Vehicles v ON e.EmployeeID = v.ShipperID\nLEFT JOIN Routes r ON e.EmployeeID = r.ShipperID\nGROUP BY e.EmployeeID, FullName, e.Title\nORDER BY SuccessfulDeliveries DESC\nLIMIT 6;",
            "gigachat_response_ru": "SELECT \n    e.EmployeeID,\n    CONCAT(e.FirstName, ' ', e.LastName) AS FullName,\n    e.Title,\n    COUNT(DISTINCT w.WarehouseID) AS ManagedWarehouses,\n    COUNT(DISTINCT s.ShipmentID) AS TotalShipments,\n    COUNT(CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID ELSE NULL END) AS SuccessfulDeliveries,\n    COUNT(DISTINCT v.VehicleID) AS ManagedVehicles,\n    COUNT(DISTINCT r.RouteID) AS ControlledRoutes,\n    AVG(r.Distance) AS AverageDistance\nFROM Employees e\nLEFT JOIN Warehouses w ON e.EmployeeID = w.ManagerID\nLEFT JOIN Shipments s ON e.EmployeeID = s.ShipperID\nLEFT JOIN Deliveries d ON s.ShipmentID = d.ShipmentID\nLEFT JOIN Vehicles v ON e.EmployeeID = v.ShipperID\nLEFT JOIN Routes r ON e.EmployeeID = r.ShipperID\nGROUP BY e.EmployeeID, FullName, e.Title\nORDER BY SuccessfulDeliveries DESC\nLIMIT 6;"
        },
        {
            "question": "Каков продвинутый анализ использования и производительности транспортных средств? Покажите топ-3 транспортных средства с наибольшим пройденным расстоянием, включая идентификатор транспортного средства, номерной знак, модель, общее количество доставок, количество успешных доставок, количество пройденных маршрутов, общее пройденное расстояние, количество обработанных отправлений, количество успешных отправлений и среднее расстояние маршрута.",
            "sql_query": "SELECT v.VehicleID, v.LicensePlate, v.Model, COUNT(DISTINCT d.DeliveryID) as TotalDeliveries, COUNT(DISTINCT CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID END) as CompletedDeliveries, COUNT(DISTINCT r.RouteID) as RoutesCovered, SUM(r.Distance) as TotalDistance, COUNT(DISTINCT s.ShipmentID) as ShipmentsHandled, COUNT(DISTINCT CASE WHEN s.Status = 'Доставлено' THEN s.ShipmentID END) as SuccessfulShipments, AVG(r.Distance) as AvgRouteDistance FROM Vehicles v JOIN Deliveries d ON v.VehicleID = d.VehicleID JOIN Shipments s ON d.ShipmentID = s.ShipmentID JOIN Routes r ON s.ShipperID = r.ShipperID WHERE v.Status = 'В Работе' GROUP BY v.VehicleID, v.LicensePlate, v.Model HAVING COUNT(DISTINCT d.DeliveryID) > 2 ORDER BY TotalDistance DESC LIMIT 3;",
            "gpt-4o_response": "SELECT \n    v.VehicleID,\n    v.LicensePlate,\n    v.Model,\n    COUNT(DISTINCT d.DeliveryID) AS TotalDeliveries,\n    COUNT(DISTINCT CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID END) AS SuccessfulDeliveries,\n    COUNT(DISTINCT r.RouteID) AS RoutesTaken,\n    SUM(r.Distance) AS TotalDistanceTraveled,\n    COUNT(DISTINCT s.ShipmentID) AS ShipmentsProcessed,\n    COUNT(DISTINCT CASE WHEN s.Status = 'Доставлено' THEN s.ShipmentID END) AS SuccessfulShipments,\n    AVG(r.Distance) AS AvgRouteDistance\nFROM \n    Vehicles v\nJOIN \n    Deliveries d ON v.VehicleID = d.VehicleID\nJOIN \n    Shipments s ON d.ShipmentID = s.ShipmentID\nJOIN \n    Routes r ON s.ShipperID = r.ShipperID\nGROUP BY \n    v.VehicleID, v.LicensePlate, v.Model\nORDER BY \n    TotalDistanceTraveled DESC\nLIMIT 3;",
            "gpt-4o_response_ru": "SELECT \n    v.VehicleID,\n    v.LicensePlate,\n    v.Model,\n    COUNT(DISTINCT d.DeliveryID) AS TotalDeliveries,\n    COUNT(DISTINCT CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID END) AS SuccessfulDeliveries,\n    COUNT(DISTINCT r.RouteID) AS RoutesCovered,\n    SUM(r.Distance) AS TotalDistanceCovered,\n    COUNT(DISTINCT s.ShipmentID) AS ShipmentsProcessed,\n    COUNT(DISTINCT CASE WHEN s.Status = 'Доставлено' THEN s.ShipmentID END) AS SuccessfulShipments,\n    AVG(r.Distance) AS AvgRouteDistance\nFROM \n    Vehicles v\nJOIN \n    Deliveries d ON v.VehicleID = d.VehicleID\nJOIN \n    Shipments s ON d.ShipmentID = s.ShipmentID\nJOIN \n    Routes r ON s.ShipperID = r.ShipperID\nGROUP BY \n    v.VehicleID, v.LicensePlate, v.Model\nORDER BY \n    TotalDistanceCovered DESC\nLIMIT 3;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    v.VehicleID,\n    v.LicensePlate,\n    v.Model,\n    COUNT(DISTINCT d.DeliveryID) AS TotalDeliveries,\n    SUM(CASE WHEN d.Status = 'Доставлено' THEN 1 ELSE 0 END) AS SuccessfulDeliveries,\n    COUNT(DISTINCT r.RouteID) AS RoutesTaken,\n    SUM(r.Distance) AS TotalDistance,\n    COUNT(DISTINCT s.ShipmentID) AS ShipmentsHandled,\n    SUM(CASE WHEN s.Status = 'Доставлено' THEN 1 ELSE 0 END) AS SuccessfulShipments,\n    AVG(r.Distance) AS AverageRouteDistance\nFROM\n    Vehicles v\nLEFT JOIN\n    Deliveries d ON v.VehicleID = d.VehicleID\nLEFT JOIN\n    Shipments s ON d.ShipmentID = s.ShipmentID\nLEFT JOIN\n    Routes r ON s.ShipperID = r.ShipperID\nWHERE r.Status = 'Активен' OR r.Status = 'Завершен'\nGROUP BY\n    v.VehicleID, v.LicensePlate, v.Model\nORDER BY\n    TotalDistance DESC\nLIMIT 3;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    v.VehicleID,\n    v.LicensePlate,\n    v.Model,\n    COUNT(DISTINCT d.DeliveryID) AS TotalDeliveries,\n    SUM(CASE WHEN d.Status = 'Доставлено' THEN 1 ELSE 0 END) AS SuccessfulDeliveries,\n    COUNT(DISTINCT r.RouteID) AS RoutesCount,\n    SUM(r.Distance) AS TotalDistance,\n    COUNT(DISTINCT s.ShipmentID) AS TotalShipments,\n    SUM(CASE WHEN s.Status = 'Доставлено' THEN 1 ELSE 0 END) AS SuccessfulShipments,\n    AVG(r.Distance) AS AverageRouteDistance\nFROM\n    Vehicles v\nLEFT JOIN\n    Deliveries d ON v.VehicleID = d.VehicleID\nLEFT JOIN\n    Shipments s ON d.ShipmentID = s.ShipmentID\nLEFT JOIN\n    Routes r ON v.ShipperID = r.ShipperID\nGROUP BY\n    v.VehicleID, v.LicensePlate, v.Model\nORDER BY\n    TotalDistance DESC\nLIMIT 3;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    v.VehicleID, \n    v.LicensePlate, \n    v.Model, \n    COUNT(DISTINCT d.DeliveryID) AS TotalDeliveries, \n    COUNT(DISTINCT CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID END) AS SuccessfulDeliveries, \n    COUNT(DISTINCT r.RouteID) AS TotalRoutes, \n    SUM(r.Distance) AS TotalDistance, \n    COUNT(DISTINCT s.ShipmentID) AS TotalShipments, \n    COUNT(DISTINCT CASE WHEN s.Status = 'Доставлено' THEN s.ShipmentID END) AS SuccessfulShipments, \n    AVG(r.Distance) AS AverageRouteDistance\nFROM \n    Vehicles v\nJOIN \n    Deliveries d ON v.VehicleID = d.VehicleID\nJOIN \n    Shipments s ON d.ShipmentID = s.ShipmentID\nJOIN \n    Routes r ON s.ShipperID = r.ShipperID\nGROUP BY \n    v.VehicleID, v.LicensePlate, v.Model\nORDER BY \n    TotalDistance DESC\nLIMIT 3;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    v.VehicleID, \n    v.LicensePlate, \n    v.Model, \n    COUNT(DISTINCT d.DeliveryID) AS TotalDeliveries, \n    COUNT(DISTINCT CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID END) AS SuccessfulDeliveries, \n    COUNT(DISTINCT r.RouteID) AS TotalRoutes, \n    SUM(r.Distance) AS TotalDistance, \n    COUNT(DISTINCT s.ShipmentID) AS TotalShipments, \n    COUNT(DISTINCT CASE WHEN d.Status = 'Доставлено' THEN s.ShipmentID END) AS SuccessfulShipments, \n    AVG(r.Distance) AS AverageRouteDistance\nFROM \n    Vehicles v \nJOIN \n    Deliveries d ON v.VehicleID = d.VehicleID \nJOIN \n    Shipments s ON d.ShipmentID = s.ShipmentID \nJOIN \n    Routes r ON s.ShipperID = r.ShipperID \nGROUP BY \n    v.VehicleID, v.LicensePlate, v.Model \nORDER BY \n    TotalDistance DESC \nLIMIT 3;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    v.VehicleID,\n    v.LicensePlate,\n    v.Model,\n    COUNT(DISTINCT d.DeliveryID) AS TotalDeliveries,\n    COUNT(DISTINCT CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID END) AS SuccessfulDeliveries,\n    COUNT(DISTINCT r.RouteID) AS TotalRoutes,\n    SUM(r.Distance) AS TotalDistance,\n    COUNT(DISTINCT s.ShipmentID) AS TotalShipments,\n    COUNT(DISTINCT CASE WHEN s.Status = 'Доставлено' THEN s.ShipmentID END) AS SuccessfulShipments,\n    AVG(r.Distance) AS AvgRouteDistance\nFROM \n    Vehicles v\nLEFT JOIN \n    Deliveries d ON v.VehicleID = d.VehicleID\nLEFT JOIN \n    Shipments s ON d.ShipmentID = s.ShipmentID\nLEFT JOIN \n    Routes r ON v.ShipperID = r.ShipperID\nGROUP BY \n    v.VehicleID, v.LicensePlate, v.Model\nORDER BY \n    TotalDistance DESC\nLIMIT 3;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    v.VehicleID,\n    v.LicensePlate,\n    v.Model,\n    COUNT(DISTINCT d.DeliveryID) AS TotalDeliveries,\n    COUNT(DISTINCT CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID END) AS SuccessfulDeliveries,\n    COUNT(DISTINCT r.RouteID) AS TotalRoutes,\n    SUM(r.Distance) AS TotalDistance,\n    COUNT(DISTINCT s.ShipmentID) AS TotalShipments,\n    COUNT(DISTINCT CASE WHEN s.Status = 'Доставлено' THEN s.ShipmentID END) AS SuccessfulShipments,\n    AVG(r.Distance) AS AvgRouteDistance\nFROM \n    Vehicles v\nLEFT JOIN \n    Deliveries d ON v.VehicleID = d.VehicleID\nLEFT JOIN \n    Shipments s ON d.ShipmentID = s.ShipmentID\nLEFT JOIN \n    Routes r ON v.ShipperID = r.ShipperID\nGROUP BY \n    v.VehicleID, v.LicensePlate, v.Model\nORDER BY \n    TotalDistance DESC\nLIMIT 3;",
            "gigachat_response": "WITH VehiclePerformance AS (\n    -- Calculate total deliveries per vehicle\n    SELECT v.VehicleID, v.LicensePlate, v.Model, COUNT(*) AS TotalDeliveries,\n           SUM(CASE WHEN d.Status = 'Доставлено' THEN 1 ELSE 0 END) AS SuccessfulDeliveries\n    FROM Vehicles v\n    LEFT JOIN Deliveries d ON v.VehicleID = d.VehicleID\n    GROUP BY v.VehicleID, v.LicensePlate, v.Model\n), \nRoutesTraveled AS (\n    -- Calculate routes traveled per vehicle\n    SELECT r.RouteID, r.Distance, r.ShipperID, v.VehicleID\n    FROM Routes r\n    INNER JOIN Shipments sh ON r.ShipperID = sh.ShipperID\n    INNER JOIN Deliveries d ON sh.ShipmentID = d.ShipmentID\n    INNER JOIN Vehicles v ON d.VehicleID = v.VehicleID\n), \nTotalDistancePerVehicle AS (\n    -- Sum up distances traveled per vehicle\n    SELECT rt.VehicleID, SUM(rt.Distance) AS TotalDistance\n    FROM RoutesTraveled rt\n    GROUP BY rt.VehicleID\n), \nAverageDistancePerRoute AS (\n    -- Average distance per route per vehicle\n    SELECT rt.VehicleID, AVG(rt.Distance) AS AverageDistance\n    FROM RoutesTraveled rt\n    GROUP BY rt.VehicleID\n), \nFinalResults AS (\n    -- Combine results into one table\n    SELECT vp.VehicleID, vp.LicensePlate, vp.Model, vp.TotalDeliveries, vp.SuccessfulDeliveries,\n           COALESCE(td.TotalDistance, 0) AS TotalDistanceTravelled,\n           COALESCE(ad.AverageDistance, 0) AS AverageDistancePerRoute\n    FROM VehiclePerformance vp\n    LEFT JOIN TotalDistancePerVehicle td ON vp.VehicleID = td.VehicleID\n    LEFT JOIN AverageDistancePerRoute ad ON vp.VehicleID = ad.VehicleID\n)\n-- Final output: top 3 vehicles based on total distance travelled\nSELECT *\nFROM FinalResults\nORDER BY TotalDistanceTravelled DESC\nLIMIT 3;",
            "gigachat_response_ru": "SELECT v.VehicleID, v.LicensePlate, v.Model, \n       COUNT(DISTINCT d.DeliveryID) AS TotalDeliveries,\n       COUNT(CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID END) AS SuccessfulDeliveries,\n       COUNT(r.RouteID) AS TotalRoutes,\n       ROUND(SUM(r.Distance), 2) AS TotalDistanceTraveled,\n       COUNT(o.OrderID) AS TotalShipmentsHandled,\n       COUNT(CASE WHEN o.Status IN ('Доставлено') THEN o.OrderID END) AS SuccessfulShipments,\n       ROUND(AVG(r.Distance), 2) AS AverageRouteDistance\nFROM Vehicles v\nLEFT JOIN Deliveries d ON v.VehicleID = d.VehicleID\nLEFT JOIN Shipments s ON d.ShipmentID = s.ShipmentID\nLEFT JOIN Orders o ON s.OrderID = o.OrderID\nLEFT JOIN Routes r ON v.VehicleID = r.ShipperID AND r.StartLocation <> r.EndLocation -- Исключаем маршруты нулевой длины\nGROUP BY v.VehicleID, v.LicensePlate, v.Model\nORDER BY TotalDistanceTraveled DESC\nLIMIT 3;"
        },
        {
            "question": "Каков продвинутый анализ инвентаря складов с учетом категорий продуктов? Покажите топ-5 складов с наибольшим количеством товаров, включая идентификатор и название склада, категорию продукта, количество уникальных продуктов, общее количество товаров, среднюю цену продукта, количество обработанных заказов и количество обработанных отправлений.",
            "sql_query": "SELECT w.WarehouseID, w.Name as WarehouseName, p.Category, COUNT(DISTINCT i.ProductID) as UniqueProducts, SUM(i.Quantity) as TotalQuantity, AVG(p.UnitPrice) as AvgProductPrice, COUNT(DISTINCT o.OrderID) as OrdersProcessed, COUNT(DISTINCT s.ShipmentID) as ShipmentsHandled FROM Warehouses w JOIN Inventory i ON w.WarehouseID = i.WarehouseID JOIN Products p ON i.ProductID = p.ProductID JOIN Orders o ON w.WarehouseID = o.OrderID JOIN Shipments s ON o.OrderID = s.OrderID GROUP BY w.WarehouseID, w.Name, p.Category HAVING SUM(i.Quantity) > 20 ORDER BY TotalQuantity DESC LIMIT 5;",
            "gpt-4o_response": "SELECT \n    w.WarehouseID, \n    w.Name AS WarehouseName, \n    p.Category, \n    COUNT(DISTINCT i.ProductID) AS UniqueProducts, \n    SUM(i.Quantity) AS TotalQuantity, \n    AVG(p.UnitPrice) AS AvgProductPrice, \n    COUNT(DISTINCT o.OrderID) AS ProcessedOrders, \n    COUNT(DISTINCT s.ShipmentID) AS ProcessedShipments\nFROM \n    Warehouses w\nJOIN \n    Inventory i ON w.WarehouseID = i.WarehouseID\nJOIN \n    Products p ON i.ProductID = p.ProductID\nLEFT JOIN \n    OrderDetails od ON p.ProductID = od.ProductID\nLEFT JOIN \n    Orders o ON od.OrderID = o.OrderID\nLEFT JOIN \n    Shipments s ON o.OrderID = s.OrderID\nGROUP BY \n    w.WarehouseID, w.Name, p.Category\nORDER BY \n    TotalQuantity DESC\nLIMIT 5;",
            "gpt-4o_response_ru": "SELECT \n    w.WarehouseID,\n    w.Name AS WarehouseName,\n    p.Category,\n    COUNT(DISTINCT p.ProductID) AS UniqueProducts,\n    SUM(i.Quantity) AS TotalQuantity,\n    AVG(p.UnitPrice) AS AvgProductPrice,\n    COUNT(DISTINCT o.OrderID) AS ProcessedOrders,\n    COUNT(DISTINCT s.ShipmentID) AS ProcessedShipments\nFROM \n    Warehouses w\nJOIN \n    Inventory i ON w.WarehouseID = i.WarehouseID\nJOIN \n    Products p ON i.ProductID = p.ProductID\nLEFT JOIN \n    OrderDetails od ON p.ProductID = od.ProductID\nLEFT JOIN \n    Orders o ON od.OrderID = o.OrderID\nLEFT JOIN \n    Shipments s ON o.OrderID = s.OrderID\nGROUP BY \n    w.WarehouseID, w.Name, p.Category\nORDER BY \n    TotalQuantity DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    w.WarehouseID,\n    w.Name AS WarehouseName,\n    p.Category AS ProductCategory,\n    COUNT(DISTINCT p.ProductID) AS UniqueProducts,\n    SUM(i.Quantity) AS TotalQuantity,\n    AVG(p.UnitPrice) AS AveragePrice,\n    COUNT(DISTINCT o.OrderID) AS TotalOrders,\n    COUNT(DISTINCT s.ShipmentID) AS TotalShipments\nFROM Warehouses w\nJOIN Inventory i ON w.WarehouseID = i.WarehouseID\nJOIN Products p ON i.ProductID = p.ProductID\nLEFT JOIN OrderDetails od ON p.ProductID = od.ProductID\nLEFT JOIN Orders o ON od.OrderID = o.OrderID\nLEFT JOIN Shipments s ON o.OrderID = s.OrderID\nGROUP BY w.WarehouseID, w.Name, p.Category\nORDER BY TotalQuantity DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    w.WarehouseID,\n    w.Name AS WarehouseName,\n    p.Category AS ProductCategory,\n    COUNT(DISTINCT p.ProductID) AS UniqueProducts,\n    SUM(i.Quantity) AS TotalQuantity,\n    AVG(p.UnitPrice) AS AveragePrice,\n    COUNT(DISTINCT o.OrderID) AS OrdersProcessed,\n    COUNT(DISTINCT s.ShipmentID) AS ShipmentsProcessed\nFROM Warehouses w\nJOIN Inventory i ON w.WarehouseID = i.WarehouseID\nJOIN Products p ON i.ProductID = p.ProductID\nLEFT JOIN OrderDetails od ON p.ProductID = od.ProductID\nLEFT JOIN Orders o ON od.OrderID = o.OrderID\nLEFT JOIN Shipments s ON o.OrderID = s.OrderID\nGROUP BY w.WarehouseID, w.Name, p.Category\nORDER BY TotalQuantity DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n  w.WarehouseID, \n  w.Name AS WarehouseName, \n  p.Category, \n  COUNT(DISTINCT p.ProductID) AS UniqueProducts, \n  SUM(i.Quantity) AS TotalQuantity, \n  AVG(p.UnitPrice) AS AvgProductPrice, \n  COUNT(DISTINCT o.OrderID) AS TotalOrders, \n  COUNT(DISTINCT d.DeliveryID) AS TotalDeliveries\nFROM \n  Warehouses w \n  JOIN Inventory i ON w.WarehouseID = i.WarehouseID \n  JOIN Products p ON i.ProductID = p.ProductID \n  JOIN OrderDetails od ON p.ProductID = od.ProductID \n  JOIN Orders o ON od.OrderID = o.OrderID \n  JOIN Shipments s ON o.OrderID = s.OrderID \n  JOIN Deliveries d ON s.ShipmentID = d.ShipmentID\nGROUP BY \n  w.WarehouseID, \n  w.Name, \n  p.Category\nORDER BY \n  TotalQuantity DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    w.WarehouseID, \n    w.Name AS WarehouseName, \n    p.Category, \n    COUNT(DISTINCT p.ProductID) AS UniqueProducts, \n    SUM(i.Quantity) AS TotalQuantity, \n    AVG(p.UnitPrice) AS AvgProductPrice, \n    COUNT(DISTINCT o.OrderID) AS OrdersProcessed, \n    COUNT(DISTINCT d.DeliveryID) AS DeliveriesProcessed\nFROM \n    Warehouses w\nJOIN \n    Inventory i ON w.WarehouseID = i.WarehouseID\nJOIN \n    Products p ON i.ProductID = p.ProductID\nJOIN \n    OrderDetails od ON p.ProductID = od.ProductID\nJOIN \n    Orders o ON od.OrderID = o.OrderID\nJOIN \n    Shipments s ON o.OrderID = s.OrderID\nJOIN \n    Deliveries d ON s.ShipmentID = d.ShipmentID\nGROUP BY \n    w.WarehouseID, w.Name, p.Category\nORDER BY \n    TotalQuantity DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    w.WarehouseID,\n    w.Name AS WarehouseName,\n    p.Category AS ProductCategory,\n    COUNT(DISTINCT i.ProductID) AS UniqueProductsCount,\n    SUM(i.Quantity) AS TotalItems,\n    AVG(p.UnitPrice) AS AvgProductPrice,\n    COUNT(DISTINCT o.OrderID) AS ProcessedOrders,\n    COUNT(DISTINCT s.ShipmentID) AS ProcessedShipments\nFROM \n    Warehouses w\nJOIN \n    Inventory i ON w.WarehouseID = i.WarehouseID\nJOIN \n    Products p ON i.ProductID = p.ProductID\nLEFT JOIN \n    OrderDetails od ON p.ProductID = od.ProductID\nLEFT JOIN \n    Orders o ON od.OrderID = o.OrderID\nLEFT JOIN \n    Shipments s ON o.OrderID = s.OrderID\nGROUP BY \n    w.WarehouseID, w.Name, p.Category\nORDER BY \n    TotalItems DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    w.WarehouseID,\n    w.Name AS WarehouseName,\n    p.Category AS ProductCategory,\n    COUNT(DISTINCT i.ProductID) AS UniqueProductsCount,\n    SUM(i.Quantity) AS TotalProductsQuantity,\n    AVG(p.UnitPrice) AS AvgProductPrice,\n    COUNT(DISTINCT o.OrderID) AS ProcessedOrdersCount,\n    COUNT(DISTINCT s.ShipmentID) AS ProcessedShipmentsCount\nFROM \n    Warehouses w\nJOIN \n    Inventory i ON w.WarehouseID = i.WarehouseID\nJOIN \n    Products p ON i.ProductID = p.ProductID\nLEFT JOIN \n    OrderDetails od ON p.ProductID = od.ProductID\nLEFT JOIN \n    Orders o ON od.OrderID = o.OrderID\nLEFT JOIN \n    Shipments s ON o.OrderID = s.OrderID\nGROUP BY \n    w.WarehouseID, w.Name, p.Category\nORDER BY \n    TotalProductsQuantity DESC\nLIMIT 5;",
            "gigachat_response": "SELECT \n    w.WarehouseID,\n    w.Name AS WarehouseName,\n    p.Category AS ProductCategory,\n    COUNT(DISTINCT inv.ProductID) AS UniqueProductsCount,\n    SUM(inv.Quantity) AS TotalGoodsQuantity,\n    AVG(p.UnitPrice) AS AverageProductPrice,\n    COUNT(DISTINCT o.OrderID) AS ProcessedOrdersCount,\n    COUNT(DISTINCT sh.ShipmentID) AS ProcessedShipmentsCount\nFROM \n    Warehouses w\nJOIN \n    Inventory inv ON w.WarehouseID = inv.WarehouseID\nJOIN \n    Products p ON inv.ProductID = p.ProductID\nLEFT JOIN \n    OrderDetails od ON inv.ProductID = od.ProductID\nLEFT JOIN \n    Orders o ON od.OrderID = o.OrderID\nLEFT JOIN \n    Shipments sh ON o.OrderID = sh.OrderID\nGROUP BY \n    w.WarehouseID, w.Name, p.Category\nORDER BY \n    TotalGoodsQuantity DESC\nLIMIT 5;",
            "gigachat_response_ru": "SELECT \n    w.WarehouseID,\n    w.Name AS WarehouseName,\n    p.Category AS ProductCategory,\n    COUNT(DISTINCT inv.ProductID) AS UniqueProductsCount,\n    SUM(inv.Quantity) AS TotalGoodsQuantity,\n    AVG(p.UnitPrice) AS AverageUnitPrice,\n    COUNT(DISTINCT o.OrderID) AS ProcessedOrdersCount,\n    COUNT(DISTINCT sh.ShipmentID) AS ProcessedShipmentsCount\nFROM \n    Warehouses w\nLEFT JOIN \n    Inventory inv ON w.WarehouseID = inv.WarehouseID\nLEFT JOIN \n    Products p ON inv.ProductID = p.ProductID\nLEFT JOIN \n    OrderDetails od ON inv.ProductID = od.ProductID\nLEFT JOIN \n    Orders o ON od.OrderID = o.OrderID\nLEFT JOIN \n    Shipments sh ON o.OrderID = sh.OrderID\nGROUP BY \n    w.WarehouseID, w.Name, p.Category\nORDER BY \n    TotalGoodsQuantity DESC\nLIMIT 5;"
        },
        {
            "question": "Каков комплексный анализ выполнения заказов с учетом метрик доставки? Покажите топ-7 заказов с наименьшим временем доставки за период с 1 января 2023 по 30 июня 2023, включая номер заказа, имя клиента, дату заказа, статус заказа, количество различных продуктов, общее количество единиц, стоимость заказа с учетом скидок, дату отправления, дату доставки, количество дней до доставки, название перевозчика, модель транспортного средства, расстояние маршрута и статус платежа.",
            "sql_query": "SELECT o.OrderID, c.Name AS ClientName, o.OrderDate, o.Status AS OrderStatus, COUNT(DISTINCT od.ProductID) AS ProductCount, SUM(od.Quantity) AS TotalItems, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount/100)) AS OrderValue, s.ShipmentDate, d.DeliveryDate, DATEDIFF(d.DeliveryDate, o.OrderDate) AS DaysToDeliver, sh.Name AS ShipperName, v.Model AS VehicleModel, r.Distance AS RouteDistance, p.Status AS PaymentStatus FROM Orders o JOIN Clients c ON o.ClientID = c.ClientID JOIN OrderDetails od ON o.OrderID = od.OrderID JOIN Shipments s ON o.OrderID = s.OrderID JOIN Deliveries d ON s.ShipmentID = d.ShipmentID JOIN Shippers sh ON s.ShipperID = sh.ShipperID JOIN Vehicles v ON d.VehicleID = v.VehicleID JOIN Routes r ON sh.ShipperID = r.ShipperID JOIN Payments p ON o.OrderID = p.OrderID WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-06-30' GROUP BY o.OrderID, c.Name, o.OrderDate, o.Status, s.ShipmentDate, d.DeliveryDate, sh.Name, v.Model, r.Distance, p.Status HAVING SUM(od.Quantity) > 5 ORDER BY DaysToDeliver ASC LIMIT 7;",
            "gpt-4o_response": "SELECT \n    o.OrderID,\n    c.Name AS ClientName,\n    o.OrderDate,\n    o.Status AS OrderStatus,\n    COUNT(DISTINCT od.ProductID) AS ProductVariety,\n    SUM(od.Quantity) AS TotalUnits,\n    SUM(od.Quantity * od.UnitPrice * (1 - od.Discount / 100)) AS DiscountedOrderCost,\n    s.ShipmentDate,\n    s.DeliveryDate,\n    DATEDIFF(s.DeliveryDate, s.ShipmentDate) AS DaysToDeliver,\n    sh.Name AS ShipperName,\n    v.Model AS VehicleModel,\n    r.Distance AS RouteDistance,\n    p.Status AS PaymentStatus\nFROM \n    Orders o\nJOIN \n    Clients c ON o.ClientID = c.ClientID\nJOIN \n    OrderDetails od ON o.OrderID = od.OrderID\nJOIN \n    Shipments s ON o.OrderID = s.OrderID\nJOIN \n    Shippers sh ON s.ShipperID = sh.ShipperID\nJOIN \n    Deliveries d ON s.ShipmentID = d.ShipmentID\nJOIN \n    Vehicles v ON d.VehicleID = v.VehicleID\nJOIN \n    Routes r ON sh.ShipperID = r.ShipperID\nJOIN \n    Payments p ON o.OrderID = p.OrderID\nWHERE \n    o.OrderDate BETWEEN '2023-01-01' AND '2023-06-30'\n    AND s.DeliveryDate IS NOT NULL\nGROUP BY \n    o.OrderID, c.Name, o.OrderDate, o.Status, s.ShipmentDate, s.DeliveryDate, sh.Name, v.Model, r.Distance, p.Status\nORDER BY \n    DaysToDeliver ASC\nLIMIT 7;",
            "gpt-4o_response_ru": "SELECT \n    o.OrderID,\n    c.Name AS ClientName,\n    o.OrderDate,\n    o.Status AS OrderStatus,\n    COUNT(DISTINCT od.ProductID) AS ProductVariety,\n    SUM(od.Quantity) AS TotalUnits,\n    SUM(od.Quantity * od.UnitPrice * (1 - od.Discount / 100)) AS DiscountedTotalAmount,\n    s.ShipmentDate,\n    s.DeliveryDate,\n    DATEDIFF(s.DeliveryDate, s.ShipmentDate) AS DeliveryDays,\n    sh.Name AS ShipperName,\n    v.Model AS VehicleModel,\n    r.Distance AS RouteDistance,\n    p.Status AS PaymentStatus\nFROM \n    Orders o\nJOIN \n    Clients c ON o.ClientID = c.ClientID\nJOIN \n    OrderDetails od ON o.OrderID = od.OrderID\nJOIN \n    Shipments s ON o.OrderID = s.OrderID\nJOIN \n    Shippers sh ON s.ShipperID = sh.ShipperID\nJOIN \n    Deliveries d ON s.ShipmentID = d.ShipmentID\nJOIN \n    Vehicles v ON d.VehicleID = v.VehicleID\nJOIN \n    Routes r ON sh.ShipperID = r.ShipperID\nJOIN \n    Payments p ON o.OrderID = p.OrderID\nWHERE \n    o.OrderDate BETWEEN '2023-01-01' AND '2023-06-30'\n    AND s.DeliveryDate IS NOT NULL\nORDER BY \n    DeliveryDays ASC\nLIMIT 7;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    o.OrderID,\n    c.Name AS ClientName,\n    o.OrderDate,\n    o.Status AS OrderStatus,\n    COUNT(DISTINCT od.ProductID) AS DistinctProductsCount,\n    SUM(od.Quantity) AS TotalQuantity,\n    SUM(od.Quantity * od.UnitPrice * (1 - od.Discount / 100)) AS OrderCost,\n    s.ShipmentDate,\n    s.DeliveryDate,\n    DATEDIFF(s.DeliveryDate, s.ShipmentDate) AS DeliveryDays,\n    sh.Name AS ShipperName,\n    v.Model AS VehicleModel,\n    r.Distance AS RouteDistance,\n    p.Status AS PaymentStatus\nFROM\n    Orders o\nJOIN\n    Clients c ON o.ClientID = c.ClientID\nJOIN\n    OrderDetails od ON o.OrderID = od.OrderID\nJOIN\n    Shipments s ON o.OrderID = s.OrderID\nJOIN\n    Shippers sh ON s.ShipperID = sh.ShipperID\nLEFT JOIN\n    Deliveries d ON s.ShipmentID = d.ShipmentID\nLEFT JOIN\n    Vehicles v ON d.VehicleID = v.VehicleID\nLEFT JOIN\n    Routes r ON sh.ShipperID = r.ShipperID\nJOIN\n    Payments p ON o.OrderID = p.OrderID\nWHERE\n    o.OrderDate BETWEEN '2023-01-01' AND '2023-06-30'\nGROUP BY\n    o.OrderID,\n    c.Name,\n    o.OrderDate,\n    o.Status,\n    s.ShipmentDate,\n    s.DeliveryDate,\n    sh.Name,\n    v.Model,\n    r.Distance,\n    p.Status\nORDER BY\n    DeliveryDays\nLIMIT 7;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    o.OrderID,\n    c.Name AS ClientName,\n    o.OrderDate,\n    o.Status AS OrderStatus,\n    COUNT(DISTINCT od.ProductID) AS DistinctProductsCount,\n    SUM(od.Quantity) AS TotalQuantity,\n    SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS OrderCost,\n    s.ShipmentDate,\n    s.DeliveryDate,\n    JULIANDAY(s.DeliveryDate) - JULIANDAY(s.ShipmentDate) AS DeliveryDays,\n    sh.Name AS ShipperName,\n    v.Model AS VehicleModel,\n    r.Distance AS RouteDistance,\n    p.Status AS PaymentStatus\nFROM Orders o\nJOIN Clients c ON o.ClientID = c.ClientID\nJOIN OrderDetails od ON o.OrderID = od.OrderID\nJOIN Shipments s ON o.OrderID = s.OrderID\nJOIN Shippers sh ON s.ShipperID = sh.ShipperID\nLEFT JOIN Deliveries d ON s.ShipmentID = d.ShipmentID\nLEFT JOIN Vehicles v ON d.VehicleID = v.VehicleID\nLEFT JOIN Routes r ON sh.ShipperID = r.ShipperID\nLEFT JOIN Payments p ON o.OrderID = p.OrderID\nWHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-06-30'\nGROUP BY o.OrderID, c.Name, o.OrderDate, o.Status, s.ShipmentDate, s.DeliveryDate, sh.Name, v.Model, r.Distance, p.Status\nORDER BY DeliveryDays ASC\nLIMIT 7;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    o.OrderID,\n    c.Name AS ClientName,\n    o.OrderDate,\n    o.Status AS OrderStatus,\n    COUNT(DISTINCT od.ProductID) AS NumberOfProducts,\n    SUM(od.Quantity) AS TotalQuantity,\n    SUM(od.Quantity * od.UnitPrice * (1 - od.Discount/100)) AS TotalAmountWithDiscount,\n    s.ShipmentDate,\n    d.DeliveryDate,\n    DATEDIFF(d.DeliveryDate, s.ShipmentDate) AS DeliveryDays,\n    sh.Name AS ShipperName,\n    v.Model AS VehicleModel,\n    r.Distance,\n    p.Status AS PaymentStatus\nFROM \n    Orders o\nJOIN \n    Clients c ON o.ClientID = c.ClientID\nJOIN \n    OrderDetails od ON o.OrderID = od.OrderID\nJOIN \n    Shipments s ON o.OrderID = s.OrderID\nJOIN \n    Deliveries d ON s.ShipmentID = d.ShipmentID\nJOIN \n    Shippers sh ON s.ShipperID = sh.ShipperID\nJOIN \n    Vehicles v ON d.VehicleID = v.VehicleID\nJOIN \n    Routes r ON sh.ShipperID = r.ShipperID\nJOIN \n    Payments p ON o.OrderID = p.OrderID\nWHERE \n    o.OrderDate BETWEEN '2023-01-01' AND '2023-06-30'\nORDER BY \n    DeliveryDays\nLIMIT 7;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    o.OrderID, \n    c.Name AS ClientName, \n    o.OrderDate, \n    o.Status, \n    COUNT(DISTINCT od.ProductID) AS NumberOfProducts, \n    SUM(od.Quantity) AS TotalQuantity, \n    SUM(od.Quantity * od.UnitPrice * (1 - od.Discount/100)) AS TotalCost, \n    s.ShipmentDate, \n    d.DeliveryDate, \n    DATEDIFF(d.DeliveryDate, s.ShipmentDate) AS DeliveryDays, \n    sh.Name AS ShipperName, \n    v.Model AS VehicleModel, \n    r.Distance, \n    p.Status AS PaymentStatus\nFROM \n    Orders o\nJOIN \n    Clients c ON o.ClientID = c.ClientID\nJOIN \n    OrderDetails od ON o.OrderID = od.OrderID\nJOIN \n    Shipments s ON o.OrderID = s.OrderID\nJOIN \n    Deliveries d ON s.ShipmentID = d.ShipmentID\nJOIN \n    Shippers sh ON s.ShipperID = sh.ShipperID\nJOIN \n    Vehicles v ON d.VehicleID = v.VehicleID\nJOIN \n    Routes r ON sh.ShipperID = r.ShipperID\nJOIN \n    Payments p ON o.OrderID = p.OrderID\nWHERE \n    o.OrderDate BETWEEN '2023-01-01' AND '2023-06-30'\nGROUP BY \n    o.OrderID, c.Name, o.OrderDate, o.Status, s.ShipmentDate, d.DeliveryDate, sh.Name, v.Model, r.Distance, p.Status\nORDER BY \n    DeliveryDays ASC\nLIMIT 7;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    o.OrderID AS 'Номер заказа',\n    c.Name AS 'Имя клиента',\n    o.OrderDate AS 'Дата заказа',\n    o.Status AS 'Статус заказа',\n    COUNT(DISTINCT od.ProductID) AS 'Количество различных продуктов',\n    SUM(od.Quantity) AS 'Общее количество единиц',\n    SUM(od.Quantity * od.UnitPrice * (1 - od.Discount/100)) AS 'Стоимость заказа с учетом скидок',\n    sh.ShipmentDate AS 'Дата отправления',\n    sh.DeliveryDate AS 'Дата доставки',\n    DATEDIFF(sh.DeliveryDate, sh.ShipmentDate) AS 'Количество дней до доставки',\n    sp.Name AS 'Название перевозчика',\n    v.Model AS 'Модель транспортного средства',\n    r.Distance AS 'Расстояние маршрута',\n    p.Status AS 'Статус платежа'\nFROM \n    Orders o\nJOIN \n    Clients c ON o.ClientID = c.ClientID\nJOIN \n    OrderDetails od ON o.OrderID = od.OrderID\nJOIN \n    Shipments sh ON o.OrderID = sh.OrderID\nJOIN \n    Shippers sp ON sh.ShipperID = sp.ShipperID\nJOIN \n    Deliveries d ON sh.ShipmentID = d.ShipmentID\nJOIN \n    Vehicles v ON d.VehicleID = v.VehicleID\nLEFT JOIN \n    Routes r ON sp.ShipperID = r.ShipperID\nLEFT JOIN \n    Payments p ON o.OrderID = p.OrderID\nWHERE \n    o.OrderDate BETWEEN '2023-01-01' AND '2023-06-30'\n    AND sh.DeliveryDate IS NOT NULL\nGROUP BY \n    o.OrderID, c.Name, o.OrderDate, o.Status, sh.ShipmentDate, sh.DeliveryDate, sp.Name, v.Model, r.Distance, p.Status\nORDER BY \n    DATEDIFF(sh.DeliveryDate, sh.ShipmentDate) ASC\nLIMIT 7;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    o.OrderID AS 'Номер заказа',\n    c.Name AS 'Имя клиента',\n    o.OrderDate AS 'Дата заказа',\n    o.Status AS 'Статус заказа',\n    COUNT(DISTINCT od.ProductID) AS 'Количество различных продуктов',\n    SUM(od.Quantity) AS 'Общее количество единиц',\n    SUM(od.Quantity * od.UnitPrice * (1 - od.Discount/100)) AS 'Стоимость заказа с учетом скидок',\n    sh.ShipmentDate AS 'Дата отправления',\n    sh.DeliveryDate AS 'Дата доставки',\n    DATEDIFF(sh.DeliveryDate, sh.ShipmentDate) AS 'Количество дней до доставки',\n    sp.Name AS 'Название перевозчика',\n    v.Model AS 'Модель транспортного средства',\n    r.Distance AS 'Расстояние маршрута',\n    p.Status AS 'Статус платежа'\nFROM \n    Orders o\nJOIN \n    Clients c ON o.ClientID = c.ClientID\nJOIN \n    OrderDetails od ON o.OrderID = od.OrderID\nJOIN \n    Shipments sh ON o.OrderID = sh.OrderID\nJOIN \n    Shippers sp ON sh.ShipperID = sp.ShipperID\nJOIN \n    Deliveries d ON sh.ShipmentID = d.ShipmentID\nJOIN \n    Vehicles v ON d.VehicleID = v.VehicleID\nLEFT JOIN \n    Routes r ON sp.ShipperID = r.ShipperID\nLEFT JOIN \n    Payments p ON o.OrderID = p.OrderID\nWHERE \n    o.OrderDate BETWEEN '2023-01-01' AND '2023-06-30'\n    AND sh.DeliveryDate IS NOT NULL\nGROUP BY \n    o.OrderID, c.Name, o.OrderDate, o.Status, sh.ShipmentDate, sh.DeliveryDate, sp.Name, v.Model, r.Distance, p.Status\nORDER BY \n    DATEDIFF(sh.DeliveryDate, sh.ShipmentDate) ASC\nLIMIT 7;",
            "gigachat_response": "WITH OrderMetrics AS (\n    SELECT \n        o.OrderID,\n        c.Name AS ClientName,\n        o.OrderDate,\n        o.Status AS OrderStatus,\n        COUNT(DISTINCT od.ProductID) AS NumDistinctProducts,\n        SUM(od.Quantity) AS TotalUnitsOrdered,\n        SUM(od.Quantity * od.UnitPrice * (1 - od.Discount/100)) AS TotalDiscountedCost,\n        sh.ShipmentDate,\n        sh.DeliveryDate,\n        DATEDIFF(sh.DeliveryDate, sh.ShipmentDate) AS DaysToDeliver,\n        s.Name AS ShipperName,\n        v.Model AS VehicleModel,\n        r.Distance AS RouteDistance,\n        p.PaymentMethod,\n        p.Status AS PaymentStatus\n    FROM Orders o\n    INNER JOIN Clients c ON o.ClientID = c.ClientID\n    INNER JOIN OrderDetails od ON o.OrderID = od.OrderID\n    INNER JOIN Shipments sh ON o.OrderID = sh.OrderID\n    INNER JOIN Shippers s ON sh.ShipperID = s.ShipperID\n    INNER JOIN Vehicles v ON sh.ShipperID = v.ShipperID\n    INNER JOIN Routes r ON s.ShipperID = r.ShipperID AND r.StartLocation = s.City AND r.EndLocation = c.City\n    INNER JOIN Payments p ON o.OrderID = p.OrderID\n    WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-06-30'\n    GROUP BY o.OrderID, c.Name, o.OrderDate, o.Status, sh.ShipmentDate, sh.DeliveryDate, s.Name, v.Model, r.Distance, p.PaymentMethod, p.Status\n)\nSELECT *\nFROM OrderMetrics\nORDER BY DaysToDeliver ASC\nLIMIT 7;",
            "gigachat_response_ru": "SELECT \n    o.OrderID AS Заказ_номер,\n    c.Name AS Имя_клиента,\n    o.OrderDate AS Дата_заказа,\n    o.Status AS Статус_заказа,\n    COUNT(DISTINCT od.ProductID) AS Количество_разных_продуктов,\n    SUM(od.Quantity) AS Общее_количество_единиц,\n    ROUND(SUM(od.Quantity * od.UnitPrice * (1 - od.Discount/100)), 2) AS Стоимость_заказа_со_скидкой,\n    sh.ShippedDate AS Дата_отправления,\n    sh.DeliveryDate AS Дата_доставки,\n    DATEDIFF(sh.DeliveryDate, sh.ShippedDate) AS Количествово_дней_до_доставки,\n    sp.Name AS Название_перевозчик,\n    v.Model AS Модель_транспортного_средства,\n    r.Distance AS Расстояние_маршрута,\n    p.Status AS Статус_платежа\nFROM \n    Orders o\nJOIN \n    Clients c ON o.ClientID = c.ClientID\nJOIN \n    OrderDetails od ON o.OrderID = od.OrderID\nLEFT JOIN \n    Shipments sh ON o.OrderID = sh.OrderID\nLEFT JOIN \n    Shippers sp ON sh.ShipperID = sp.ShipperID\nLEFT JOIN \n    Deliveries d ON sh.ShipmentID = d.ShipmentID\nLEFT JOIN \n    Vehicles v ON d.VehicleID = v.VehicleID\nLEFT JOIN \n    Routes r ON sp.ShipperID = r.ShipperID AND r.StartLocation = sh.ShippedFromCity AND r.EndLocation = sh.DeliveredToCity\nLEFT JOIN \n    Payments p ON o.OrderID = p.OrderID\nWHERE \n    o.OrderDate BETWEEN '2023-01-01' AND '2023-06-30'\nGROUP BY \n    o.OrderID, c.Name, o.OrderDate, o.Status, sh.ShippedDate, sh.DeliveryDate, sp.Name, v.Model, r.Distance, p.Status\nORDER BY \n    Количествово_дней_до_доставки ASC\nLIMIT 7;"
        },
        {
            "question": "Каков многоуровневый анализ логистической производительности по регионам? Покажите топ-6 регионов с наибольшей выручкой, включая страну, город, количество клиентов, количество заказов, среднее время доставки, количество складов в городе, общую выручку, количество успешных доставок, количество проблемных доставок и процент успешных доставок.",
            "sql_query": "SELECT c.Country, c.City, COUNT(DISTINCT c.ClientID) AS ClientCount, COUNT(DISTINCT o.OrderID) AS OrderCount, AVG(DATEDIFF(s.DeliveryDate, o.OrderDate)) AS AvgDeliveryTime, (SELECT COUNT(DISTINCT w.WarehouseID) FROM Warehouses w WHERE w.City = c.City) AS WarehouseCount, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount/100)) AS TotalRevenue, COUNT(DISTINCT CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID END) AS SuccessfulDeliveries, COUNT(DISTINCT CASE WHEN d.Status = 'Задержка' OR d.Status = 'Отменено' THEN d.DeliveryID END) AS ProblemDeliveries, (COUNT(DISTINCT CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID END) / COUNT(DISTINCT d.DeliveryID) * 100) AS DeliverySuccessRate FROM Clients c JOIN Orders o ON c.ClientID = o.ClientID JOIN OrderDetails od ON o.OrderID = od.OrderID JOIN Shipments s ON o.OrderID = s.OrderID JOIN Deliveries d ON s.ShipmentID = d.ShipmentID GROUP BY c.Country, c.City HAVING OrderCount > 3 ORDER BY TotalRevenue DESC, DeliverySuccessRate DESC LIMIT 6;",
            "gpt-4o_response": "SELECT \n    c.Country,\n    c.City,\n    COUNT(DISTINCT c.ClientID) AS NumberOfClients,\n    COUNT(DISTINCT o.OrderID) AS NumberOfOrders,\n    AVG(DATEDIFF(s.DeliveryDate, s.ShipmentDate)) AS AvgDeliveryTime,\n    COUNT(DISTINCT w.WarehouseID) AS NumberOfWarehouses,\n    SUM(o.TotalAmount) AS TotalRevenue,\n    COUNT(DISTINCT CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID END) AS SuccessfulDeliveries,\n    COUNT(DISTINCT CASE WHEN d.Status != 'Доставлено' THEN d.DeliveryID END) AS ProblematicDeliveries,\n    COUNT(DISTINCT CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID END) / COUNT(DISTINCT d.DeliveryID) * 100 AS SuccessRate\nFROM \n    Clients c\nJOIN \n    Orders o ON c.ClientID = o.ClientID\nLEFT JOIN \n    Shipments s ON o.OrderID = s.OrderID\nLEFT JOIN \n    Deliveries d ON s.ShipmentID = d.ShipmentID\nLEFT JOIN \n    Warehouses w ON c.City = w.City\nGROUP BY \n    c.Country, c.City\nORDER BY \n    TotalRevenue DESC\nLIMIT 6;",
            "gpt-4o_response_ru": "SELECT \n    c.Country,\n    c.City,\n    COUNT(DISTINCT c.ClientID) AS NumberOfClients,\n    COUNT(DISTINCT o.OrderID) AS NumberOfOrders,\n    AVG(DATEDIFF(s.DeliveryDate, s.ShipmentDate)) AS AvgDeliveryTime,\n    COUNT(DISTINCT w.WarehouseID) AS NumberOfWarehouses,\n    SUM(o.TotalAmount) AS TotalRevenue,\n    COUNT(DISTINCT CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID END) AS SuccessfulDeliveries,\n    COUNT(DISTINCT CASE WHEN d.Status != 'Доставлено' THEN d.DeliveryID END) AS ProblematicDeliveries,\n    COUNT(DISTINCT CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID END) / COUNT(DISTINCT d.DeliveryID) * 100 AS SuccessRate\nFROM \n    Clients c\nJOIN \n    Orders o ON c.ClientID = o.ClientID\nLEFT JOIN \n    Shipments s ON o.OrderID = s.OrderID\nLEFT JOIN \n    Deliveries d ON s.ShipmentID = d.ShipmentID\nLEFT JOIN \n    Warehouses w ON c.City = w.City\nGROUP BY \n    c.Country, c.City\nORDER BY \n    TotalRevenue DESC\nLIMIT 6;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    c.Country,\n    c.City,\n    COUNT(DISTINCT c.ClientID) AS NumberOfClients,\n    COUNT(DISTINCT o.OrderID) AS NumberOfOrders,\n    AVG(JULIANDAY(s.DeliveryDate) - JULIANDAY(s.ShipmentDate)) AS AverageDeliveryTime,\n    COUNT(DISTINCT w.WarehouseID) AS NumberOfWarehouses,\n    SUM(o.TotalAmount) AS TotalRevenue,\n    SUM(CASE WHEN d.Status = 'Доставлено' THEN 1 ELSE 0 END) AS SuccessfulDeliveries,\n    SUM(CASE WHEN d.Status != 'Доставлено' THEN 1 ELSE 0 END) AS ProblematicDeliveries,\n    CAST(SUM(CASE WHEN d.Status = 'Доставлено' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(DISTINCT d.DeliveryID) AS DeliverySuccessRate\nFROM Clients c\nJOIN Orders o ON c.ClientID = o.ClientID\nLEFT JOIN Shipments s ON o.OrderID = s.OrderID\nLEFT JOIN Deliveries d ON s.ShipmentID = d.ShipmentID\nLEFT JOIN Warehouses w ON c.City = w.City AND c.Country = w.Country\nGROUP BY c.Country, c.City\nORDER BY TotalRevenue DESC\nLIMIT 6;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    c.Country,\n    c.City,\n    COUNT(DISTINCT c.ClientID) AS NumberOfClients,\n    COUNT(DISTINCT o.OrderID) AS NumberOfOrders,\n    AVG(JULIANDAY(s.DeliveryDate) - JULIANDAY(s.ShipmentDate)) AS AverageDeliveryTime,\n    COUNT(DISTINCT w.WarehouseID) AS NumberOfWarehouses,\n    SUM(o.TotalAmount) AS TotalRevenue,\n    SUM(CASE WHEN d.Status = 'Доставлено' THEN 1 ELSE 0 END) AS SuccessfulDeliveries,\n    SUM(CASE WHEN d.Status != 'Доставлено' THEN 1 ELSE 0 END) AS ProblematicDeliveries,\n    CAST(SUM(CASE WHEN d.Status = 'Доставлено' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(DISTINCT d.DeliveryID) AS DeliverySuccessRate\nFROM\n    Clients c\nLEFT JOIN\n    Orders o ON c.ClientID = o.ClientID\nLEFT JOIN\n    Shipments s ON o.OrderID = s.OrderID\nLEFT JOIN\n    Deliveries d ON s.ShipmentID = d.ShipmentID\nLEFT JOIN\n    Warehouses w ON c.City = w.City AND c.Country = w.Country\nGROUP BY\n    c.Country,\n    c.City\nORDER BY\n    TotalRevenue DESC\nLIMIT 6;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    c.Country, \n    c.City, \n    COUNT(DISTINCT c.ClientID) AS NumberOfClients, \n    COUNT(DISTINCT o.OrderID) AS NumberOfOrders, \n    AVG(DATEDIFF(s.DeliveryDate, s.ShipmentDate)) AS AverageDeliveryTime, \n    COUNT(DISTINCT w.WarehouseID) AS NumberOfWarehouses, \n    SUM(o.TotalAmount) AS TotalRevenue, \n    COUNT(DISTINCT CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID END) AS SuccessfulDeliveries, \n    COUNT(DISTINCT CASE WHEN d.Status!= 'Доставлено' THEN d.DeliveryID END) AS ProblematicDeliveries, \n    COUNT(DISTINCT CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID END) / COUNT(DISTINCT d.DeliveryID) * 100 AS DeliverySuccessRate\nFROM \n    Clients c \nJOIN \n    Orders o ON c.ClientID = o.ClientID \nJOIN \n    Shipments s ON o.OrderID = s.OrderID \nJOIN \n    Deliveries d ON s.ShipmentID = d.ShipmentID \nJOIN \n    Vehicles v ON d.VehicleID = v.VehicleID \nJOIN \n    Shippers sh ON v.ShipperID = sh.ShipperID \nJOIN \n    Routes r ON sh.ShipperID = r.ShipperID \nJOIN \n    Warehouses w ON r.StartLocation = w.City \nGROUP BY \n    c.Country, \n    c.City \nORDER BY \n    TotalRevenue DESC \nLIMIT 6;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    c.Country, \n    c.City, \n    COUNT(DISTINCT c.ClientID) AS ClientCount, \n    COUNT(DISTINCT o.OrderID) AS OrderCount, \n    AVG(DATEDIFF(s.DeliveryDate, s.ShipmentDate)) AS AvgDeliveryTime, \n    COUNT(DISTINCT w.WarehouseID) AS WarehouseCount, \n    SUM(o.TotalAmount) AS TotalRevenue, \n    COUNT(DISTINCT CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID END) AS SuccessfulDeliveries, \n    COUNT(DISTINCT CASE WHEN d.Status!= 'Доставлено' THEN d.DeliveryID END) AS ProblematicDeliveries, \n    COUNT(DISTINCT CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID END) / COUNT(DISTINCT d.DeliveryID) * 100 AS SuccessRate\nFROM \n    Clients c\nJOIN \n    Orders o ON c.ClientID = o.ClientID\nJOIN \n    Shipments s ON o.OrderID = s.OrderID\nJOIN \n    Deliveries d ON s.ShipmentID = d.ShipmentID\nJOIN \n    Warehouses w ON c.City = w.City\nGROUP BY \n    c.Country, \n    c.City\nORDER BY \n    TotalRevenue DESC\nLIMIT 6;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    c.Country,\n    c.City,\n    COUNT(DISTINCT c.ClientID) AS ClientCount,\n    COUNT(DISTINCT o.OrderID) AS OrderCount,\n    AVG(DATEDIFF(s.DeliveryDate, s.ShipmentDate)) AS AvgDeliveryTime,\n    COUNT(DISTINCT w.WarehouseID) AS WarehouseCount,\n    SUM(p.Amount) AS TotalRevenue,\n    COUNT(DISTINCT CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID END) AS SuccessfulDeliveries,\n    COUNT(DISTINCT CASE WHEN d.Status NOT IN ('Доставлено', 'В пути') THEN d.DeliveryID END) AS ProblemDeliveries,\n    COUNT(DISTINCT CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID END) / COUNT(DISTINCT d.DeliveryID) * 100 AS DeliverySuccessRate\nFROM \n    Clients c\nJOIN \n    Orders o ON c.ClientID = o.ClientID\nJOIN \n    Payments p ON o.OrderID = p.OrderID\nLEFT JOIN \n    Shipments s ON o.OrderID = s.OrderID\nLEFT JOIN \n    Deliveries d ON s.ShipmentID = d.ShipmentID\nLEFT JOIN \n    Warehouses w ON c.City = w.City AND c.Country = w.Country\nGROUP BY \n    c.Country, c.City\nORDER BY \n    TotalRevenue DESC\nLIMIT 6;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    c.Country,\n    c.City,\n    COUNT(DISTINCT c.ClientID) AS ClientCount,\n    COUNT(DISTINCT o.OrderID) AS OrderCount,\n    AVG(DATEDIFF(s.DeliveryDate, s.ShipmentDate)) AS AvgDeliveryTime,\n    COUNT(DISTINCT w.WarehouseID) AS WarehouseCount,\n    SUM(p.Amount) AS TotalRevenue,\n    COUNT(DISTINCT CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID END) AS SuccessfulDeliveries,\n    COUNT(DISTINCT CASE WHEN d.Status != 'Доставлено' AND d.Status != 'Завершено' THEN d.DeliveryID END) AS ProblemDeliveries,\n    COUNT(DISTINCT CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID END) / COUNT(DISTINCT d.DeliveryID) * 100 AS SuccessRate\nFROM \n    Clients c\nJOIN \n    Orders o ON c.ClientID = o.ClientID\nJOIN \n    Payments p ON o.OrderID = p.OrderID\nJOIN \n    Shipments s ON o.OrderID = s.OrderID\nJOIN \n    Deliveries d ON s.ShipmentID = d.ShipmentID\nLEFT JOIN \n    Warehouses w ON c.City = w.City AND c.Country = w.Country\nWHERE \n    p.Status = 'Завершено'\nGROUP BY \n    c.Country, c.City\nORDER BY \n    TotalRevenue DESC\nLIMIT 6;",
            "gigachat_response": "WITH RegionPerformance AS (\n    SELECT \n        c.Country,\n        c.City,\n        COUNT(DISTINCT c.ClientID) AS NumClients,\n        COUNT(DISTINCT o.OrderID) AS NumOrders,\n        AVG(DATEDIFF(s.DeliveryDate, s.ShipmentDate)) AS AverageDeliveryTime,\n        COUNT(DISTINCT w.WarehouseID) AS NumWarehousesInCity,\n        SUM(p.TotalAmount) AS TotalRevenue,\n        COUNT(CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID ELSE NULL END) AS SuccessfulDeliveries,\n        COUNT(CASE WHEN d.Status != 'Доставлено' THEN d.DeliveryID ELSE NULL END) AS ProblematicDeliveries,\n        ROUND((COUNT(CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID ELSE NULL END)::FLOAT / COUNT(DISTINCT d.DeliveryID)), 2) AS SuccessRate\n    FROM \n        Clients c\n    INNER JOIN \n        Orders o ON c.ClientID = o.ClientID\n    INNER JOIN \n        Shipments s ON o.OrderID = s.OrderID\n    INNER JOIN \n        Deliveries d ON s.ShipmentID = d.ShipmentID\n    INNER JOIN \n        Payments p ON o.OrderID = p.OrderID\n    INNER JOIN \n        Warehouses w ON c.City = w.City\n    GROUP BY \n        c.Country, c.City\n)\nSELECT *\nFROM RegionPerformance\nORDER BY TotalRevenue DESC\nLIMIT 6;",
            "gigachat_response_ru": "WITH RegionPerformance AS (\n    SELECT \n        c.Country,\n        c.City,\n        COUNT(DISTINCT c.ClientID) AS NumClients,\n        COUNT(DISTINCT o.OrderID) AS NumOrders,\n        AVG(DATEDIFF(s.DeliveryDate, s.ShipmentDate)) AS AverageDeliveryTime,\n        COUNT(DISTINCT w.WarehouseID) AS NumWarehousesInCity,\n        SUM(o.TotalAmount) AS TotalRevenue,\n        COUNT(CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID ELSE NULL END) AS SuccessfulDeliveries,\n        COUNT(CASE WHEN d.Status != 'Доставлено' THEN d.DeliveryID ELSE NULL END) AS ProblematicDeliveries,\n        ROUND((COUNT(CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID ELSE NULL END)::FLOAT / COUNT(DISTINCT d.DeliveryID)), 2) AS SuccessRate\n    FROM \n        Clients c\n    INNER JOIN \n        Orders o ON c.ClientID = o.ClientID\n    INNER JOIN \n        Shipments s ON o.OrderID = s.OrderID\n    INNER JOIN \n        Deliveries d ON s.ShipmentID = d.ShipmentID\n    INNER JOIN \n        Warehouses w ON c.City = w.City\n    GROUP BY \n        c.Country, c.City\n)\nSELECT *\nFROM RegionPerformance\nORDER BY TotalRevenue DESC\nLIMIT 6;"
        },
        {
            "question": "Каков комплексный анализ цепочки поставок с многоуровневыми метриками? Покажите топ-5 активных маршрутов с наибольшей стоимостью перевозимых товаров, включая идентификатор маршрута, начальную и конечную точку, расстояние, расчетное время в минутах, количество назначенных транспортных средств, общую вместимость транспортных средств, количество выполненных доставок, количество перевезенных отправлений, количество выполненных заказов, общее количество доставленных единиц, общую стоимость перевезенных товаров и среднее время транзита.",
            "sql_query": "SELECT r.RouteID, r.StartLocation, r.EndLocation, r.Distance, TIME_TO_SEC(r.EstimatedTime)/60 AS EstimatedMinutes, COUNT(DISTINCT v.VehicleID) AS VehiclesAssigned, SUM(v.Capacity) AS TotalVehicleCapacity, COUNT(DISTINCT d.DeliveryID) AS DeliveriesCompleted, COUNT(DISTINCT s.ShipmentID) AS ShipmentsTransported, COUNT(DISTINCT o.OrderID) AS OrdersFulfilled, SUM(od.Quantity) AS TotalItemsDelivered, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount/100)) AS TotalValueTransported, (SELECT AVG(DATEDIFF(d2.DeliveryDate, s2.ShipmentDate)) FROM Deliveries d2 JOIN Shipments s2 ON d2.ShipmentID = s2.ShipmentID JOIN Shippers sh2 ON s2.ShipperID = sh2.ShipperID JOIN Routes r2 ON sh2.ShipperID = r2.ShipperID WHERE r2.RouteID = r.RouteID) AS AvgTransitDays FROM Routes r JOIN Shippers sh ON r.ShipperID = sh.ShipperID JOIN Vehicles v ON sh.ShipperID = v.ShipperID JOIN Deliveries d ON v.VehicleID = d.VehicleID JOIN Shipments s ON d.ShipmentID = s.ShipmentID JOIN Orders o ON s.OrderID = o.OrderID JOIN OrderDetails od ON o.OrderID = od.OrderID WHERE r.Status = 'Активен' GROUP BY r.RouteID, r.StartLocation, r.EndLocation, r.Distance, r.EstimatedTime HAVING DeliveriesCompleted > 2 ORDER BY TotalValueTransported DESC, Distance ASC LIMIT 5;",
            "gpt-4o_response": "SELECT \n    r.RouteID,\n    r.StartLocation,\n    r.EndLocation,\n    r.Distance,\n    TIME_TO_SEC(r.EstimatedTime) / 60 AS EstimatedTimeInMinutes,\n    COUNT(DISTINCT v.VehicleID) AS AssignedVehicles,\n    SUM(v.Capacity) AS TotalVehicleCapacity,\n    COUNT(DISTINCT d.DeliveryID) AS CompletedDeliveries,\n    COUNT(DISTINCT s.ShipmentID) AS ShipmentsTransported,\n    COUNT(DISTINCT o.OrderID) AS OrdersCompleted,\n    SUM(od.Quantity) AS TotalUnitsDelivered,\n    SUM(od.Quantity * od.UnitPrice * (1 - od.Discount / 100)) AS TotalValueOfGoods,\n    AVG(TIMESTAMPDIFF(MINUTE, s.ShipmentDate, s.DeliveryDate)) AS AvgTransitTime\nFROM \n    Routes r\nJOIN \n    Shippers sh ON r.ShipperID = sh.ShipperID\nJOIN \n    Shipments s ON sh.ShipperID = s.ShipperID\nJOIN \n    Deliveries d ON s.ShipmentID = d.ShipmentID\nJOIN \n    Vehicles v ON d.VehicleID = v.VehicleID\nJOIN \n    Orders o ON s.OrderID = o.OrderID\nJOIN \n    OrderDetails od ON o.OrderID = od.OrderID\nWHERE \n    r.Status = 'Активен'\nGROUP BY \n    r.RouteID, r.StartLocation, r.EndLocation, r.Distance, r.EstimatedTime\nORDER BY \n    TotalValueOfGoods DESC\nLIMIT 5;",
            "gpt-4o_response_ru": "SELECT \n    r.RouteID,\n    r.StartLocation,\n    r.EndLocation,\n    r.Distance,\n    TIME_TO_SEC(r.EstimatedTime) / 60 AS EstimatedTimeInMinutes,\n    COUNT(DISTINCT v.VehicleID) AS AssignedVehicles,\n    SUM(v.Capacity) AS TotalVehicleCapacity,\n    COUNT(DISTINCT d.DeliveryID) AS CompletedDeliveries,\n    COUNT(DISTINCT s.ShipmentID) AS TransportedShipments,\n    COUNT(DISTINCT o.OrderID) AS CompletedOrders,\n    SUM(od.Quantity) AS TotalDeliveredUnits,\n    SUM(od.Quantity * od.UnitPrice * (1 - od.Discount / 100)) AS TotalValueOfTransportedGoods,\n    AVG(TIMESTAMPDIFF(MINUTE, s.ShipmentDate, s.DeliveryDate)) AS AvgTransitTime\nFROM \n    Routes r\nJOIN \n    Shippers sh ON r.ShipperID = sh.ShipperID\nJOIN \n    Shipments s ON sh.ShipperID = s.ShipperID\nJOIN \n    Deliveries d ON s.ShipmentID = d.ShipmentID\nJOIN \n    Vehicles v ON d.VehicleID = v.VehicleID\nJOIN \n    Orders o ON s.OrderID = o.OrderID\nJOIN \n    OrderDetails od ON o.OrderID = od.OrderID\nWHERE \n    r.Status = 'Активен'\nGROUP BY \n    r.RouteID, r.StartLocation, r.EndLocation, r.Distance, r.EstimatedTime\nORDER BY \n    TotalValueOfTransportedGoods DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    r.RouteID,\n    r.StartLocation,\n    r.EndLocation,\n    r.Distance,\n    CAST(STRFTIME('%M', r.EstimatedTime) AS INTEGER) + CAST(STRFTIME('%H', r.EstimatedTime) AS INTEGER) * 60 AS EstimatedTimeMinutes,\n    COUNT(DISTINCT v.VehicleID) AS NumberOfVehiclesAssigned,\n    SUM(v.Capacity) AS TotalVehiclesCapacity,\n    COUNT(DISTINCT d.DeliveryID) AS NumberOfDeliveriesMade,\n    COUNT(DISTINCT s.ShipmentID) AS NumberOfShipments,\n    COUNT(DISTINCT o.OrderID) AS NumberOfOrders,\n    SUM(od.Quantity) AS TotalQuantityDelivered,\n    SUM(od.Quantity * od.UnitPrice * (1 - od.Discount / 100)) AS TotalGoodsValue,\n    AVG(JULIANDAY(s.DeliveryDate) - JULIANDAY(s.ShipmentDate)) * 24 * 60 AS AverageTransitTimeMinutes\nFROM\n    Routes r\nLEFT JOIN\n    Vehicles v ON r.ShipperID = v.ShipperID\nLEFT JOIN\n    Deliveries d ON v.VehicleID = d.VehicleID\nLEFT JOIN\n    Shipments s ON d.ShipmentID = s.ShipmentID\nLEFT JOIN\n    Orders o ON s.OrderID = o.OrderID\nLEFT JOIN\n    OrderDetails od ON o.OrderID = od.OrderID\nWHERE\n    r.Status = 'Активен'\nGROUP BY\n    r.RouteID,\n    r.StartLocation,\n    r.EndLocation,\n    r.Distance,\n    r.EstimatedTime\nORDER BY\n    TotalGoodsValue DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    r.RouteID,\n    r.StartLocation,\n    r.EndLocation,\n    r.Distance,\n    TIME_TO_SEC(r.EstimatedTime) / 60 AS EstimatedTimeMinutes,\n    COUNT(DISTINCT v.VehicleID) AS AssignedVehiclesCount,\n    SUM(v.Capacity) AS TotalVehiclesCapacity,\n    COUNT(DISTINCT d.DeliveryID) AS CompletedDeliveriesCount,\n    COUNT(DISTINCT s.ShipmentID) AS ShippedShipmentsCount,\n    COUNT(DISTINCT o.OrderID) AS CompletedOrdersCount,\n    SUM(od.Quantity) AS TotalUnitsDelivered,\n    SUM(od.Quantity * od.UnitPrice * (1 - od.Discount / 100)) AS TotalGoodsValue,\n    AVG(TIMESTAMPDIFF(MINUTE, s.ShipmentDate, s.DeliveryDate)) AS AverageTransitTimeMinutes\nFROM Routes r\nJOIN Shippers sh ON r.ShipperID = sh.ShipperID\nLEFT JOIN Vehicles v ON r.ShipperID = v.ShipperID\nLEFT JOIN Shipments s ON sh.ShipperID = s.ShipperID\nLEFT JOIN Deliveries d ON s.ShipmentID = d.ShipmentID\nLEFT JOIN Orders o ON s.OrderID = o.OrderID\nLEFT JOIN OrderDetails od ON o.OrderID = od.OrderID\nWHERE r.Status = 'Активен'\nGROUP BY\n    r.RouteID,\n    r.StartLocation,\n    r.EndLocation,\n    r.Distance,\n    r.EstimatedTime\nORDER BY\n    TotalGoodsValue DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    r.RouteID,\n    r.StartLocation,\n    r.EndLocation,\n    r.Distance,\n    r.EstimatedTime / 60 AS EstimatedTimeMinutes,\n    COUNT(DISTINCT v.VehicleID) AS AssignedVehicles,\n    SUM(v.Capacity) AS TotalVehicleCapacity,\n    COUNT(DISTINCT d.DeliveryID) AS CompletedDeliveries,\n    COUNT(DISTINCT s.ShipmentID) AS ShippedShipments,\n    COUNT(DISTINCT o.OrderID) AS CompletedOrders,\n    SUM(od.Quantity) AS TotalDeliveredUnits,\n    SUM(od.Quantity * od.UnitPrice * (1 - od.Discount/100)) AS TotalShipmentValue,\n    AVG(DATEDIFF(d.DeliveryDate, s.ShipmentDate)) AS AverageTransitTime\nFROM \n    Routes r\nJOIN \n    Shippers sh ON r.ShipperID = sh.ShipperID\nJOIN \n    Vehicles v ON sh.ShipperID = v.ShipperID\nJOIN \n    Deliveries d ON v.VehicleID = d.VehicleID\nJOIN \n    Shipments s ON d.ShipmentID = s.ShipmentID\nJOIN \n    Orders o ON s.OrderID = o.OrderID\nJOIN \n    OrderDetails od ON o.OrderID = od.OrderID\nWHERE \n    r.Status = 'Активен'\nGROUP BY \n    r.RouteID, r.StartLocation, r.EndLocation, r.Distance, r.EstimatedTime\nORDER BY \n    TotalShipmentValue DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    r.RouteID,\n    r.StartLocation,\n    r.EndLocation,\n    r.Distance,\n    TIMESTAMPDIFF(MINUTE, '00:00:00', r.EstimatedTime) AS EstimatedTimeInMinutes,\n    COUNT(DISTINCT v.VehicleID) AS AssignedVehicles,\n    SUM(v.Capacity) AS TotalVehicleCapacity,\n    COUNT(DISTINCT d.DeliveryID) AS CompletedDeliveries,\n    COUNT(DISTINCT s.ShipmentID) AS ShippedShipments,\n    COUNT(DISTINCT o.OrderID) AS CompletedOrders,\n    SUM(od.Quantity) AS TotalDeliveredUnits,\n    SUM(od.Quantity * od.UnitPrice * (1 - od.Discount/100)) AS TotalShipmentValue,\n    AVG(DATEDIFF(d.DeliveryDate, s.ShipmentDate)) AS AverageTransitTime\nFROM \n    Routes r\nJOIN \n    Shippers sh ON r.ShipperID = sh.ShipperID\nJOIN \n    Vehicles v ON sh.ShipperID = v.ShipperID\nJOIN \n    Deliveries d ON v.VehicleID = d.VehicleID\nJOIN \n    Shipments s ON d.ShipmentID = s.ShipmentID\nJOIN \n    Orders o ON s.OrderID = o.OrderID\nJOIN \n    OrderDetails od ON o.OrderID = od.OrderID\nWHERE \n    r.Status = 'Активен'\nGROUP BY \n    r.RouteID, r.StartLocation, r.EndLocation, r.Distance, r.EstimatedTime\nORDER BY \n    TotalShipmentValue DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    r.RouteID,\n    r.StartLocation,\n    r.EndLocation,\n    r.Distance,\n    TIME_TO_SEC(r.EstimatedTime) / 60 AS EstimatedTimeMinutes,\n    COUNT(DISTINCT v.VehicleID) AS AssignedVehiclesCount,\n    SUM(v.Capacity) AS TotalVehiclesCapacity,\n    COUNT(DISTINCT CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID END) AS CompletedDeliveries,\n    COUNT(DISTINCT s.ShipmentID) AS ShipmentsCount,\n    COUNT(DISTINCT o.OrderID) AS OrdersCount,\n    SUM(od.Quantity) AS TotalUnitsDelivered,\n    SUM(od.Quantity * od.UnitPrice * (1 - od.Discount/100)) AS TotalGoodsValue,\n    AVG(DATEDIFF(d.DeliveryDate, s.ShipmentDate)) AS AvgTransitTimeDays\nFROM \n    Routes r\nLEFT JOIN \n    Vehicles v ON r.ShipperID = v.ShipperID\nLEFT JOIN \n    Deliveries d ON v.VehicleID = d.VehicleID\nLEFT JOIN \n    Shipments s ON d.ShipmentID = s.ShipmentID\nLEFT JOIN \n    Orders o ON s.OrderID = o.OrderID\nLEFT JOIN \n    OrderDetails od ON o.OrderID = od.OrderID\nWHERE \n    r.Status = 'Активен'\nGROUP BY \n    r.RouteID, r.StartLocation, r.EndLocation, r.Distance, r.EstimatedTime\nORDER BY \n    TotalGoodsValue DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    r.RouteID,\n    r.StartLocation,\n    r.EndLocation,\n    r.Distance,\n    TIME_TO_SEC(r.EstimatedTime)/60 AS EstimatedTimeMinutes,\n    COUNT(DISTINCT v.VehicleID) AS AssignedVehiclesCount,\n    SUM(v.Capacity) AS TotalVehiclesCapacity,\n    COUNT(DISTINCT CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID END) AS CompletedDeliveries,\n    COUNT(DISTINCT s.ShipmentID) AS ShipmentsCount,\n    COUNT(DISTINCT o.OrderID) AS CompletedOrders,\n    SUM(od.Quantity) AS TotalUnitsDelivered,\n    SUM(od.Quantity * od.UnitPrice * (1 - od.Discount/100)) AS TotalGoodsValue,\n    AVG(DATEDIFF(d.DeliveryDate, s.ShipmentDate)) AS AvgTransitTimeDays\nFROM \n    Routes r\nJOIN \n    Shippers sh ON r.ShipperID = sh.ShipperID\nLEFT JOIN \n    Vehicles v ON sh.ShipperID = v.ShipperID\nLEFT JOIN \n    Deliveries d ON v.VehicleID = d.VehicleID\nLEFT JOIN \n    Shipments s ON d.ShipmentID = s.ShipmentID\nLEFT JOIN \n    Orders o ON s.OrderID = o.OrderID\nLEFT JOIN \n    OrderDetails od ON o.OrderID = od.OrderID\nWHERE \n    r.Status = 'Активен'\nGROUP BY \n    r.RouteID, r.StartLocation, r.EndLocation, r.Distance, r.EstimatedTime\nORDER BY \n    TotalGoodsValue DESC\nLIMIT 5;",
            "gigachat_response": "WITH ActiveRoutes AS (\n    -- Select active routes with their details\n    SELECT r.RouteID, r.StartLocation, r.EndLocation, r.Distance, TIME_TO_SEC(r.EstimatedTime)/60 AS EstimatedMinutes\n    FROM Routes r\n    WHERE r.Status = 'Активен'\n), \nAssignedVehicles AS (\n    -- Count vehicles assigned per route\n    SELECT r.RouteID, COUNT(v.VehicleID) AS NumVehicles, SUM(v.Capacity) AS TotalVehicleCapacity\n    FROM ActiveRoutes r\n    INNER JOIN Vehicles v ON r.RouteID = v.ShipperID\n    GROUP BY r.RouteID\n), \nDeliveredShipments AS (\n    -- Calculate deliveries completed per route\n    SELECT r.RouteID, COUNT(s.ShipmentID) AS CompletedDeliveries\n    FROM ActiveRoutes r\n    INNER JOIN Shipments s ON r.RouteID = s.ShipperID AND s.Status IN ('Доставлено')\n    GROUP BY r.RouteID\n), \nShippedOrders AS (\n    -- Calculate shipped orders per route\n    SELECT r.RouteID, COUNT(o.OrderID) AS ShippedOrders\n    FROM ActiveRoutes r\n    INNER JOIN Shipments s ON r.RouteID = s.ShipperID\n    INNER JOIN Orders o ON s.OrderID = o.OrderID\n    GROUP BY r.RouteID\n), \nTotalUnitsShipped AS (\n    -- Calculate total units shipped per route\n    SELECT r.RouteID, SUM(od.Quantity) AS TotalUnitsShipped\n    FROM ActiveRoutes r\n    INNER JOIN Shipments s ON r.RouteID = s.ShipperID\n    INNER JOIN Orders o ON s.OrderID = o.OrderID\n    INNER JOIN OrderDetails od ON o.OrderID = od.OrderID\n    GROUP BY r.RouteID\n), \nTotalValueShipped AS (\n    -- Calculate total value of goods shipped per route\n    SELECT r.RouteID, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount/100)) AS TotalValueShipped\n    FROM ActiveRoutes r\n    INNER JOIN Shipments s ON r.RouteID = s.ShipperID\n    INNER JOIN Orders o ON s.OrderID = o.OrderID\n    INNER JOIN OrderDetails od ON o.OrderID = od.OrderID\n    GROUP BY r.RouteID\n), \nAverageTransitTime AS (\n    -- Calculate average transit time per route\n    SELECT r.RouteID, AVG(TIMESTAMPDIFF(MINUTE, s.ShipmentDate, s.DeliveryDate)) AS AverageTransitTimeInMinutes\n    FROM ActiveRoutes r\n    INNER JOIN Shipments s ON r.RouteID = s.ShipperID\n    WHERE s.DeliveryDate IS NOT NULL\n    GROUP BY r.RouteID\n)\n-- Final result set combining all metrics\nSELECT ar.RouteID, ar.StartLocation, ar.EndLocation, ar.Distance, ar.EstimatedMinutes, av.NumVehicles, av.TotalVehicleCapacity, ds.CompletedDeliveries, so.ShippedOrders, tus.TotalUnitsShipped, tvs.TotalValueShipped, att.AverageTransitTimeInMinutes\nFROM ActiveRoutes ar\nINNER JOIN AssignedVehicles av ON ar.RouteID = av.RouteID\nLEFT JOIN DeliveredShipments ds ON ar.RouteID = ds.RouteID\nLEFT JOIN ShippedOrders so ON ar.RouteID = so.RouteID\nLEFT JOIN TotalUnitsShipped tus ON ar.RouteID = tus.RouteID\nLEFT JOIN TotalValueShipped tvs ON ar.RouteID = tvs.RouteID\nLEFT JOIN AverageTransitTime att ON ar.RouteID = att.RouteID\nORDER BY tvs.TotalValueShipped DESC\nLIMIT 5;",
            "gigachat_response_ru": "WITH RouteMetrics AS (\n    SELECT r.RouteID, r.StartLocation, r.EndLocation, r.Distance, TIME_TO_SEC(r.EstimatedTime)/60 AS EstimatedMinutes,\n           COUNT(v.VehicleID) AS AssignedVehiclesCount,\n           SUM(v.Capacity) AS TotalVehicleCapacity,\n           COUNT(DISTINCT d.DeliveryID) AS CompletedDeliveries,\n           COUNT(DISTINCT sh.ShipmentID) AS TransportedShipments,\n           COUNT(DISTINCT o.OrderID) AS FulfilledOrders,\n           SUM(od.Quantity) AS TotalUnitsDelivered,\n           SUM(od.Quantity * od.UnitPrice * (1 - od.Discount/100)) AS TotalGoodsValue,\n           AVG(TIMESTAMPDIFF(MINUTE, sh.ShipmentDate, sh.DeliveryDate)) AS AverageTransitTimeInMinutes\n    FROM Routes r\n    INNER JOIN Shipments sh ON r.ShipperID = sh.ShipperID\n    INNER JOIN Deliveries d ON sh.ShipmentID = d.ShipmentID\n    INNER JOIN Vehicles v ON sh.ShipperID = v.ShipperID\n    INNER JOIN Orders o ON sh.OrderID = o.OrderID\n    INNER JOIN OrderDetails od ON o.OrderID = od.OrderID\n    GROUP BY r.RouteID, r.StartLocation, r.EndLocation, r.Distance, r.EstimatedTime\n)\nSELECT *\nFROM RouteMetrics\nORDER BY TotalGoodsValue DESC\nLIMIT 5;"
        },
        {
            "question": "Какова производительность поставщиков с учетом метрик доставки и статистики продуктов? Покажите топ-7 российских поставщиков с наибольшей чистой выручкой, включая идентификатор и название поставщика, рейтинг поставщика, количество поставляемых продуктов, среднюю цену продукта, общее количество инвентаря, количество заказов с продуктами поставщика, общее количество заказанных единиц, общее количество возвратов, среднее время доставки в днях и чистую выручку с учетом возвратов.",
            "sql_query": "SELECT s.SupplierID, s.Name AS SupplierName, s.Rating AS SupplierRating, COUNT(DISTINCT p.ProductID) AS ProductsSupplied, AVG(p.UnitPrice) AS AvgProductPrice, SUM(i.Quantity) AS TotalInventoryStock, COUNT(DISTINCT o.OrderID) AS OrdersWithSupplierProducts, SUM(od.Quantity) AS TotalItemsOrdered, (SELECT COUNT(DISTINCT r.ReturnID) FROM `Returns` r JOIN Products p2 ON r.ProductID = p2.ProductID WHERE p2.SupplierID = s.SupplierID) AS TotalReturns, (SELECT AVG(DATEDIFF(d.DeliveryDate, sh.ShipmentDate)) FROM Deliveries d JOIN Shipments sh ON d.ShipmentID = sh.ShipmentID JOIN Orders o2 ON sh.OrderID = o2.OrderID JOIN OrderDetails od2 ON o2.OrderID = od2.OrderID JOIN Products p3 ON od2.ProductID = p3.ProductID WHERE p3.SupplierID = s.SupplierID AND d.Status = 'Доставлено') AS AvgDeliveryDays, (SUM(od.Quantity * od.UnitPrice) - (SELECT COALESCE(SUM(r2.Quantity * od3.UnitPrice), 0) FROM `Returns` r2 JOIN OrderDetails od3 ON r2.OrderID = od3.OrderID AND r2.ProductID = od3.ProductID JOIN Products p4 ON od3.ProductID = p4.ProductID WHERE p4.SupplierID = s.SupplierID)) AS NetRevenue FROM Suppliers s JOIN Products p ON s.SupplierID = p.SupplierID LEFT JOIN Inventory i ON p.ProductID = i.ProductID LEFT JOIN OrderDetails od ON p.ProductID = od.ProductID LEFT JOIN Orders o ON od.OrderID = o.OrderID WHERE s.Country = 'Россия' AND p.Discontinued = FALSE GROUP BY s.SupplierID, s.Name, s.Rating HAVING ProductsSupplied >= 3 ORDER BY NetRevenue DESC, SupplierRating DESC LIMIT 7;",
            "gpt-4o_response": "SELECT \n    s.SupplierID,\n    s.Name AS SupplierName,\n    s.Rating AS SupplierRating,\n    COUNT(DISTINCT p.ProductID) AS TotalProductsSupplied,\n    AVG(p.UnitPrice) AS AvgProductPrice,\n    SUM(i.Quantity) AS TotalInventoryQuantity,\n    COUNT(DISTINCT o.OrderID) AS TotalOrdersWithSupplierProducts,\n    SUM(od.Quantity) AS TotalUnitsOrdered,\n    COUNT(DISTINCT r.ReturnID) AS TotalReturns,\n    AVG(DATEDIFF(sh.DeliveryDate, sh.ShipmentDate)) AS AvgDeliveryTimeDays,\n    SUM(od.Quantity * od.UnitPrice * (1 - od.Discount/100)) - \n    COALESCE(SUM(r.Quantity * od.UnitPrice * (1 - od.Discount/100)), 0) AS NetRevenue\nFROM \n    Suppliers s\nJOIN \n    Products p ON s.SupplierID = p.SupplierID\nLEFT JOIN \n    Inventory i ON p.ProductID = i.ProductID\nLEFT JOIN \n    OrderDetails od ON p.ProductID = od.ProductID\nLEFT JOIN \n    Orders o ON od.OrderID = o.OrderID\nLEFT JOIN \n    Shipments sh ON o.OrderID = sh.OrderID\nLEFT JOIN \n    `Returns` r ON od.OrderID = r.OrderID AND od.ProductID = r.ProductID\nWHERE \n    s.Country = 'Россия'\nGROUP BY \n    s.SupplierID, s.Name, s.Rating\nORDER BY \n    NetRevenue DESC\nLIMIT 7;",
            "gpt-4o_response_ru": "SELECT \n    s.SupplierID,\n    s.Name AS SupplierName,\n    s.Rating AS SupplierRating,\n    COUNT(DISTINCT p.ProductID) AS TotalProducts,\n    AVG(p.UnitPrice) AS AvgProductPrice,\n    SUM(i.Quantity) AS TotalInventory,\n    COUNT(DISTINCT o.OrderID) AS TotalOrders,\n    SUM(od.Quantity) AS TotalUnitsOrdered,\n    COUNT(DISTINCT r.ReturnID) AS TotalReturns,\n    AVG(DATEDIFF(sh.DeliveryDate, sh.ShipmentDate)) AS AvgDeliveryTimeDays,\n    SUM(od.Quantity * od.UnitPrice * (1 - od.Discount / 100)) - \n    COALESCE(SUM(r.Quantity * od.UnitPrice * (1 - od.Discount / 100)), 0) AS NetRevenue\nFROM \n    Suppliers s\nJOIN \n    Products p ON s.SupplierID = p.SupplierID\nLEFT JOIN \n    Inventory i ON p.ProductID = i.ProductID\nLEFT JOIN \n    OrderDetails od ON p.ProductID = od.ProductID\nLEFT JOIN \n    Orders o ON od.OrderID = o.OrderID\nLEFT JOIN \n    Shipments sh ON o.OrderID = sh.OrderID\nLEFT JOIN \n    `Returns` r ON od.OrderID = r.OrderID AND od.ProductID = r.ProductID\nWHERE \n    s.Country = 'Россия'\nGROUP BY \n    s.SupplierID, s.Name, s.Rating\nORDER BY \n    NetRevenue DESC\nLIMIT 7;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    s.SupplierID,\n    s.Name AS SupplierName,\n    s.Rating AS SupplierRating,\n    COUNT(DISTINCT p.ProductID) AS TotalProductsSupplied,\n    AVG(p.UnitPrice) AS AverageProductPrice,\n    SUM(p.StockQuantity) AS TotalInventory,\n    COUNT(DISTINCT o.OrderID) AS TotalOrdersWithSupplierProducts,\n    SUM(od.Quantity) AS TotalUnitsOrdered,\n    COUNT(DISTINCT r.ReturnID) AS TotalReturns,\n    AVG(JULIANDAY(ship.DeliveryDate) - JULIANDAY(ship.ShipmentDate)) AS AverageDeliveryTimeInDays,\n    SUM(od.Quantity * od.UnitPrice * (1 - od.Discount / 100.0)) - SUM(CASE WHEN r.ReturnID IS NOT NULL THEN r.Quantity * od.UnitPrice ELSE 0 END) AS NetRevenue\nFROM Suppliers s\nJOIN Products p ON s.SupplierID = p.SupplierID\nJOIN OrderDetails od ON p.ProductID = od.ProductID\nJOIN Orders o ON od.OrderID = o.OrderID\nLEFT JOIN `Returns` r ON o.OrderID = r.OrderID AND p.ProductID = r.ProductID\nLEFT JOIN Shipments ship ON o.OrderID = ship.OrderID\nWHERE s.Country = 'Россия'\nGROUP BY s.SupplierID, s.Name, s.Rating\nORDER BY NetRevenue DESC\nLIMIT 7;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    s.SupplierID,\n    s.Name AS SupplierName,\n    s.Rating AS SupplierRating,\n    COUNT(DISTINCT p.ProductID) AS TotalProductsSupplied,\n    AVG(p.UnitPrice) AS AverageProductPrice,\n    SUM(p.StockQuantity) AS TotalInventory,\n    COUNT(DISTINCT o.OrderID) AS TotalOrdersWithSupplierProducts,\n    SUM(od.Quantity) AS TotalUnitsOrdered,\n    COUNT(DISTINCT r.ReturnID) AS TotalReturns,\n    AVG(JULIANDAY(ship.DeliveryDate) - JULIANDAY(ship.ShipmentDate)) AS AverageDeliveryTimeDays,\n    SUM(od.Quantity * od.UnitPrice * (1 - od.Discount / 100.0)) - SUM(CASE WHEN r.ReturnID IS NOT NULL THEN r.Quantity * p.UnitPrice ELSE 0 END) AS NetRevenue\nFROM Suppliers s\nJOIN Products p ON s.SupplierID = p.SupplierID\nJOIN OrderDetails od ON p.ProductID = od.ProductID\nJOIN Orders o ON od.OrderID = o.OrderID\nLEFT JOIN `Returns` r ON o.OrderID = r.OrderID AND p.ProductID = r.ProductID\nLEFT JOIN Shipments ship ON o.OrderID = ship.OrderID\nWHERE s.Country = 'Россия'\nGROUP BY s.SupplierID, s.Name, s.Rating\nORDER BY NetRevenue DESC\nLIMIT 7;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n  s.SupplierID, \n  s.Name AS SupplierName, \n  s.Rating, \n  COUNT(DISTINCT p.ProductID) AS TotalProducts, \n  AVG(p.UnitPrice) AS AvgProductPrice, \n  SUM(i.Quantity) AS TotalInventory, \n  COUNT(DISTINCT o.OrderID) AS TotalOrders, \n  SUM(od.Quantity) AS TotalQuantityOrdered, \n  SUM(r.Quantity) AS TotalReturns, \n  AVG(DATEDIFF(sh.DeliveryDate, sh.ShipmentDate)) AS AvgDeliveryTime, \n  SUM(od.Quantity * od.UnitPrice * (1 - od.Discount/100)) - SUM(r.Quantity * p.UnitPrice) AS NetRevenue\nFROM \n  Suppliers s\n  JOIN Products p ON s.SupplierID = p.SupplierID\n  JOIN OrderDetails od ON p.ProductID = od.ProductID\n  JOIN Orders o ON od.OrderID = o.OrderID\n  JOIN Shipments sh ON o.OrderID = sh.OrderID\n  LEFT JOIN Inventory i ON p.ProductID = i.ProductID\n  LEFT JOIN `Returns` r ON od.OrderID = r.OrderID AND p.ProductID = r.ProductID\nWHERE \n  s.Country = 'Россия'\nGROUP BY \n  s.SupplierID, s.Name, s.Rating\nORDER BY \n  NetRevenue DESC\nLIMIT 7;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    s.SupplierID, \n    s.Name AS SupplierName, \n    s.Rating, \n    COUNT(DISTINCT p.ProductID) AS TotalProducts, \n    AVG(p.UnitPrice) AS AvgProductPrice, \n    SUM(i.Quantity) AS TotalInventory, \n    COUNT(DISTINCT o.OrderID) AS TotalOrdersWithProducts, \n    SUM(od.Quantity) AS TotalQuantityOrdered, \n    COUNT(DISTINCT r.ReturnID) AS TotalReturns, \n    AVG(DATEDIFF(sh.DeliveryDate, sh.ShipmentDate)) AS AvgDeliveryTimeDays, \n    SUM(od.Quantity * od.UnitPrice * (1 - od.Discount/100)) - SUM(r.Quantity * p.UnitPrice) AS NetRevenue\nFROM \n    Suppliers s\nJOIN \n    Products p ON s.SupplierID = p.SupplierID\nJOIN \n    OrderDetails od ON p.ProductID = od.ProductID\nJOIN \n    Orders o ON od.OrderID = o.OrderID\nJOIN \n    Shipments sh ON o.OrderID = sh.OrderID\nJOIN \n    Inventory i ON p.ProductID = i.ProductID\nLEFT JOIN \n    `Returns` r ON o.OrderID = r.OrderID AND p.ProductID = r.ProductID\nWHERE \n    s.Country = 'Россия'\nGROUP BY \n    s.SupplierID, s.Name, s.Rating\nORDER BY \n    NetRevenue DESC\nLIMIT 7;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    s.SupplierID,\n    s.Name AS SupplierName,\n    s.Rating,\n    COUNT(DISTINCT p.ProductID) AS TotalProducts,\n    AVG(p.UnitPrice) AS AvgProductPrice,\n    SUM(i.Quantity) AS TotalInventory,\n    COUNT(DISTINCT o.OrderID) AS TotalOrders,\n    SUM(od.Quantity) AS TotalUnitsOrdered,\n    COUNT(DISTINCT r.ReturnID) AS TotalReturns,\n    AVG(DATEDIFF(s.DeliveryDate, s.ShipmentDate)) AS AvgDeliveryDays,\n    SUM(od.Quantity * od.UnitPrice * (1 - od.Discount/100)) - \n    COALESCE(SUM(r.Quantity * od.UnitPrice), 0) AS NetRevenue\nFROM \n    Suppliers s\nJOIN \n    Products p ON s.SupplierID = p.SupplierID\nLEFT JOIN \n    OrderDetails od ON p.ProductID = od.ProductID\nLEFT JOIN \n    Orders o ON od.OrderID = o.OrderID\nLEFT JOIN \n    Shipments s ON o.OrderID = s.OrderID\nLEFT JOIN \n    Inventory i ON p.ProductID = i.ProductID\nLEFT JOIN \n    `Returns` r ON p.ProductID = r.ProductID AND o.OrderID = r.OrderID\nWHERE \n    s.Country = 'Россия'\nGROUP BY \n    s.SupplierID, s.Name, s.Rating\nORDER BY \n    NetRevenue DESC\nLIMIT 7;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    s.SupplierID,\n    s.Name AS SupplierName,\n    s.Rating,\n    COUNT(DISTINCT p.ProductID) AS ProductsCount,\n    AVG(p.UnitPrice) AS AvgProductPrice,\n    SUM(i.Quantity) AS TotalInventory,\n    COUNT(DISTINCT o.OrderID) AS OrdersCount,\n    SUM(od.Quantity) AS TotalUnitsOrdered,\n    COUNT(DISTINCT r.ReturnID) AS ReturnsCount,\n    AVG(DATEDIFF(ship.DeliveryDate, ship.ShipmentDate)) AS AvgDeliveryDays,\n    SUM(od.Quantity * od.UnitPrice * (1 - od.Discount/100)) - \n    COALESCE(SUM(r.Quantity * od.UnitPrice), 0) AS NetRevenue\nFROM \n    Suppliers s\nJOIN \n    Products p ON s.SupplierID = p.SupplierID\nLEFT JOIN \n    Inventory i ON p.ProductID = i.ProductID\nLEFT JOIN \n    OrderDetails od ON p.ProductID = od.ProductID\nLEFT JOIN \n    Orders o ON od.OrderID = o.OrderID\nLEFT JOIN \n    Shipments ship ON o.OrderID = ship.OrderID\nLEFT JOIN \n    `Returns` r ON o.OrderID = r.OrderID AND p.ProductID = r.ProductID\nWHERE \n    s.Country = 'Россия'\nGROUP BY \n    s.SupplierID, s.Name, s.Rating\nORDER BY \n    NetRevenue DESC\nLIMIT 7;",
            "gigachat_response": "WITH SupplierMetrics AS (\n    -- Calculate supplier metrics including total revenue, returns, delivery time etc.\n    SELECT \n        s.SupplierID,\n        s.Name AS SupplierName,\n        s.Rating AS SupplierRating,\n        COUNT(DISTINCT p.ProductID) AS NumProducts,\n        AVG(p.UnitPrice) AS AverageUnitPrice,\n        SUM(i.Quantity) AS TotalInventory,\n        COUNT(DISTINCT o.OrderID) AS NumOrders,\n        SUM(od.Quantity) AS TotalUnitsOrdered,\n        SUM(r.Quantity) AS TotalReturns,\n        AVG(DATEDIFF(sh.DeliveryDate, sh.ShipmentDate)) AS AvgDeliveryDays,\n        SUM((od.Quantity * od.UnitPrice * (1 - od.Discount/100))) - SUM(r.Quantity * r.UnitPrice) AS NetRevenue\n    FROM \n        Suppliers s\n    INNER JOIN \n        Products p ON s.SupplierID = p.SupplierID\n    INNER JOIN \n        Inventory i ON p.ProductID = i.ProductID\n    INNER JOIN \n        OrderDetails od ON p.ProductID = od.ProductID\n    INNER JOIN \n        Orders o ON od.OrderID = o.OrderID\n    INNER JOIN \n        Shipments sh ON o.OrderID = sh.OrderID\n    LEFT JOIN \n        `Returns` r ON od.OrderID = r.OrderID AND od.ProductID = r.ProductID\n    WHERE \n        s.Country = 'Россия'\n    GROUP BY \n        s.SupplierID, s.Name, s.Rating\n)\n-- Select top suppliers based on net revenue\nSELECT *\nFROM SupplierMetrics\nORDER BY NetRevenue DESC\nLIMIT 7;",
            "gigachat_response_ru": "SELECT \n    s.SupplierID,\n    s.Name AS SupplierName,\n    s.Rating AS SupplierRating,\n    COUNT(DISTINCT p.ProductID) AS NumberOfProducts,\n    ROUND(AVG(p.UnitPrice), 2) AS AverageUnitPrice,\n    SUM(i.Quantity) AS TotalInventory,\n    COUNT(DISTINCT o.OrderID) AS NumberOfOrders,\n    SUM(od.Quantity) AS TotalOrderedUnits,\n    COALESCE(SUM(r.Quantity), 0) AS TotalReturns,\n    ROUND(AVG(DATEDIFF(s.DeliveryDate, sh.ShipmentDate)), 2) AS AverageDeliveryDays,\n    SUM((od.Quantity * od.UnitPrice * (1 - od.Discount/100))) - COALESCE(SUM(r.Quantity * r.UnitPrice), 0) AS NetRevenue\nFROM \n    Suppliers s\nLEFT JOIN \n    Products p ON s.SupplierID = p.SupplierID\nLEFT JOIN \n    Inventory i ON p.ProductID = i.ProductID\nLEFT JOIN \n    OrderDetails od ON p.ProductID = od.ProductID\nLEFT JOIN \n    Orders o ON od.OrderID = o.OrderID\nLEFT JOIN \n    Shipments sh ON o.OrderID = sh.OrderID\nLEFT JOIN \n    Shipments s ON sh.ShipmentID = s.ShipmentID\nLEFT JOIN \n    `Returns` r ON o.OrderID = r.OrderID AND p.ProductID = r.ProductID\nWHERE \n    s.Country = 'Россия'\nGROUP BY \n    s.SupplierID, s.Name, s.Rating\nORDER BY \n    NetRevenue DESC\nLIMIT 7;"
        },
        {
            "question": "Каков анализ покупательского поведения клиентов с учетом сезонных паттернов? Покажите топ-12 клиентов с наибольшими суммами заказов за период с 2022 по 2023 год, сгруппированных по году и кварталу, включая идентификатор клиента, имя клиента, город, год и квартал заказа, количество заказов, общую сумму потраченных средств, среднюю стоимость заказа, разнообразие категорий заказанных продуктов, стоимость самого крупного единичного заказа, среднее время обработки заказа в днях, общее количество возвратов и сумму подтвержденных платежей.",
            "sql_query": "SELECT c.ClientID, c.Name AS ClientName, c.City, YEAR(o.OrderDate) AS OrderYear, QUARTER(o.OrderDate) AS OrderQuarter, COUNT(DISTINCT o.OrderID) AS OrderCount, SUM(o.TotalAmount) AS TotalSpent, (SUM(o.TotalAmount) / COUNT(DISTINCT o.OrderID)) AS AvgOrderValue, (SELECT COUNT(DISTINCT p2.Category) FROM OrderDetails od2 JOIN Products p2 ON od2.ProductID = p2.ProductID JOIN Orders o2 ON od2.OrderID = o2.OrderID WHERE o2.ClientID = c.ClientID) AS CategoryDiversity, (SELECT MAX(od3.Quantity * od3.UnitPrice) FROM OrderDetails od3 JOIN Orders o3 ON od3.OrderID = o3.OrderID WHERE o3.ClientID = c.ClientID) AS LargestSinglePurchase, (SELECT AVG(DATEDIFF(o4.ShippedDate, o4.OrderDate)) FROM Orders o4 WHERE o4.ClientID = c.ClientID AND o4.ShippedDate IS NOT NULL) AS AvgProcessingDays, (SELECT COUNT(DISTINCT r.ReturnID) FROM `Returns` r JOIN Orders o5 ON r.OrderID = o5.OrderID WHERE o5.ClientID = c.ClientID) AS TotalReturns, (SELECT SUM(p.Amount) FROM Payments p JOIN Orders o6 ON p.OrderID = o6.OrderID WHERE o6.ClientID = c.ClientID AND p.Status = 'Завершено') AS ConfirmedPayments FROM Clients c JOIN Orders o ON c.ClientID = o.ClientID WHERE o.OrderDate BETWEEN '2022-01-01' AND '2023-12-31' GROUP BY c.ClientID, c.Name, c.City, OrderYear, OrderQuarter HAVING OrderCount > 2 ORDER BY OrderYear, OrderQuarter, TotalSpent DESC LIMIT 12;",
            "gpt-4o_response": "SELECT \n    c.ClientID,\n    c.Name AS ClientName,\n    c.City,\n    YEAR(o.OrderDate) AS OrderYear,\n    QUARTER(o.OrderDate) AS OrderQuarter,\n    COUNT(DISTINCT o.OrderID) AS OrderCount,\n    SUM(o.TotalAmount) AS TotalSpent,\n    AVG(o.TotalAmount) AS AvgOrderValue,\n    COUNT(DISTINCT p.Category) AS ProductCategoryVariety,\n    MAX(o.TotalAmount) AS LargestSingleOrder,\n    AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgProcessingTimeDays,\n    COUNT(DISTINCT r.ReturnID) AS TotalReturns,\n    SUM(CASE WHEN pmt.Status = 'Завершено' THEN pmt.Amount ELSE 0 END) AS ConfirmedPayments\nFROM \n    Clients c\nJOIN \n    Orders o ON c.ClientID = o.ClientID\nLEFT JOIN \n    OrderDetails od ON o.OrderID = od.OrderID\nLEFT JOIN \n    Products p ON od.ProductID = p.ProductID\nLEFT JOIN \n    Returns r ON o.OrderID = r.OrderID\nLEFT JOIN \n    Payments pmt ON o.OrderID = pmt.OrderID\nWHERE \n    o.OrderDate BETWEEN '2022-01-01' AND '2023-12-31'\nGROUP BY \n    c.ClientID, c.Name, c.City, OrderYear, OrderQuarter\nORDER BY \n    TotalSpent DESC\nLIMIT 12;",
            "gpt-4o_response_ru": "SELECT \n    c.ClientID,\n    c.Name AS ClientName,\n    c.City,\n    YEAR(o.OrderDate) AS OrderYear,\n    QUARTER(o.OrderDate) AS OrderQuarter,\n    COUNT(DISTINCT o.OrderID) AS OrderCount,\n    SUM(o.TotalAmount) AS TotalSpent,\n    AVG(o.TotalAmount) AS AvgOrderValue,\n    COUNT(DISTINCT p.Category) AS CategoryVariety,\n    MAX(o.TotalAmount) AS MaxSingleOrderValue,\n    AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgProcessingTimeDays,\n    COUNT(DISTINCT r.ReturnID) AS TotalReturns,\n    SUM(CASE WHEN pmt.Status = 'Завершено' THEN pmt.Amount ELSE 0 END) AS ConfirmedPayments\nFROM \n    Clients c\nJOIN \n    Orders o ON c.ClientID = o.ClientID\nLEFT JOIN \n    OrderDetails od ON o.OrderID = od.OrderID\nLEFT JOIN \n    Products p ON od.ProductID = p.ProductID\nLEFT JOIN \n    Returns r ON o.OrderID = r.OrderID\nLEFT JOIN \n    Payments pmt ON o.OrderID = pmt.OrderID\nWHERE \n    o.OrderDate BETWEEN '2022-01-01' AND '2023-12-31'\nGROUP BY \n    c.ClientID, c.Name, c.City, OrderYear, OrderQuarter\nORDER BY \n    TotalSpent DESC\nLIMIT 12;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    c.ClientID,\n    c.Name AS ClientName,\n    c.City AS ClientCity,\n    YEAR(o.OrderDate) AS OrderYear,\n    QUARTER(o.OrderDate) AS OrderQuarter,\n    COUNT(DISTINCT o.OrderID) AS TotalOrders,\n    SUM(o.TotalAmount) AS TotalSpent,\n    AVG(o.TotalAmount) AS AverageOrderValue,\n    COUNT(DISTINCT od.ProductID) AS UniqueProductsOrdered,\n    MAX(o.TotalAmount) AS LargestOrderValue,\n    AVG(JULIANDAY(o.ShippedDate) - JULIANDAY(o.OrderDate)) AS AverageProcessingTime,\n    COUNT(DISTINCT r.ReturnID) AS TotalReturns,\n    SUM(CASE WHEN p.Status = 'Завершено' THEN p.Amount ELSE 0 END) AS TotalPayments\nFROM\n    Clients c\nJOIN\n    Orders o ON c.ClientID = o.ClientID\nJOIN\n    OrderDetails od ON o.OrderID = od.OrderID\nLEFT JOIN\n    `Returns` r ON o.OrderID = r.OrderID\nLEFT JOIN\n    Payments p ON o.OrderID = p.OrderID\nWHERE\n    YEAR(o.OrderDate) BETWEEN 2022 AND 2023\nGROUP BY\n    c.ClientID,\n    c.Name,\n    c.City,\n    YEAR(o.OrderDate),\n    QUARTER(o.OrderDate)\nORDER BY\n    TotalSpent DESC\nLIMIT 12;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    c.ClientID,\n    c.Name AS ClientName,\n    c.City,\n    YEAR(o.OrderDate) AS OrderYear,\n    QUARTER(o.OrderDate) AS OrderQuarter,\n    COUNT(DISTINCT o.OrderID) AS TotalOrders,\n    SUM(o.TotalAmount) AS TotalSpent,\n    AVG(o.TotalAmount) AS AvgOrderValue,\n    COUNT(DISTINCT p.Category) AS CategoryDiversity,\n    MAX(o.TotalAmount) AS LargestOrderValue,\n    AVG(JULIANDAY(o.ShippedDate) - JULIANDAY(o.OrderDate)) AS AvgProcessingTime,\n    SUM(CASE WHEN r.ReturnID IS NOT NULL THEN 1 ELSE 0 END) AS TotalReturns,\n    SUM(CASE WHEN p2.Status = 'Завершено' THEN p2.Amount ELSE 0 END) AS TotalPayments\nFROM Clients c\nJOIN Orders o ON c.ClientID = o.ClientID\nJOIN OrderDetails od ON o.OrderID = od.OrderID\nJOIN Products p ON od.ProductID = p.ProductID\nLEFT JOIN `Returns` r ON o.OrderID = r.OrderID\nLEFT JOIN Payments p2 ON o.OrderID = p2.OrderID\nWHERE YEAR(o.OrderDate) BETWEEN 2022 AND 2023\nGROUP BY c.ClientID, c.Name, c.City, OrderYear, OrderQuarter\nORDER BY TotalSpent DESC\nLIMIT 12;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    c.ClientID,\n    c.Name AS ClientName,\n    c.City,\n    YEAR(o.OrderDate) AS OrderYear,\n    QUARTER(o.OrderDate) AS OrderQuarter,\n    COUNT(DISTINCT o.OrderID) AS TotalOrders,\n    SUM(o.TotalAmount) AS TotalSpent,\n    AVG(o.TotalAmount) AS AvgOrderCost,\n    COUNT(DISTINCT p.Category) AS ProductCategoryDiversity,\n    MAX(o.TotalAmount) AS LargestOrderValue,\n    AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgOrderProcessingTime,\n    COUNT(DISTINCT r.ReturnID) AS TotalReturns,\n    SUM(p.Amount) AS TotalConfirmedPayments\nFROM \n    Clients c\nJOIN \n    Orders o ON c.ClientID = o.ClientID\nJOIN \n    OrderDetails od ON o.OrderID = od.OrderID\nJOIN \n    Products p ON od.ProductID = p.ProductID\nJOIN \n    Payments p2 ON o.OrderID = p2.OrderID\nLEFT JOIN \n    Returns r ON o.OrderID = r.OrderID\nWHERE \n    o.OrderDate BETWEEN '2022-01-01' AND '2023-12-31'\n    AND p2.Status = 'Завершено'\nGROUP BY \n    c.ClientID, c.Name, c.City, YEAR(o.OrderDate), QUARTER(o.OrderDate)\nORDER BY \n    TotalSpent DESC\nLIMIT 12;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    c.ClientID,\n    c.Name AS ClientName,\n    c.City,\n    YEAR(o.OrderDate) AS OrderYear,\n    QUARTER(o.OrderDate) AS OrderQuarter,\n    COUNT(o.OrderID) AS NumberOfOrders,\n    SUM(o.TotalAmount) AS TotalSpent,\n    AVG(o.TotalAmount) AS AverageOrderCost,\n    COUNT(DISTINCT p.Category) AS ProductCategoryDiversity,\n    MAX(o.TotalAmount) AS LargestOrderValue,\n    AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageOrderProcessingTime,\n    COUNT(r.ReturnID) AS TotalReturns,\n    SUM(p.Amount) AS TotalConfirmedPayments\nFROM \n    Clients c\nJOIN \n    Orders o ON c.ClientID = o.ClientID\nJOIN \n    OrderDetails od ON o.OrderID = od.OrderID\nJOIN \n    Products p ON od.ProductID = p.ProductID\nLEFT JOIN \n    Returns r ON o.OrderID = r.OrderID\nLEFT JOIN \n    Payments p ON o.OrderID = p.OrderID\nWHERE \n    o.OrderDate BETWEEN '2022-01-01' AND '2023-12-31'\nGROUP BY \n    c.ClientID, c.Name, c.City, YEAR(o.OrderDate), QUARTER(o.OrderDate)\nORDER BY \n    TotalSpent DESC\nLIMIT 12;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    c.ClientID,\n    c.Name AS ClientName,\n    c.City,\n    YEAR(o.OrderDate) AS Year,\n    QUARTER(o.OrderDate) AS Quarter,\n    COUNT(DISTINCT o.OrderID) AS OrderCount,\n    SUM(o.TotalAmount) AS TotalSpent,\n    AVG(o.TotalAmount) AS AvgOrderValue,\n    COUNT(DISTINCT p.Category) AS CategoryDiversity,\n    MAX(o.TotalAmount) AS MaxSingleOrderValue,\n    AVG(DATEDIFF(IFNULL(o.ShippedDate, CURRENT_DATE), o.OrderDate)) AS AvgProcessingDays,\n    COUNT(DISTINCT r.ReturnID) AS TotalReturns,\n    SUM(CASE WHEN pm.Status = 'Завершено' THEN pm.Amount ELSE 0 END) AS ConfirmedPayments\nFROM \n    Clients c\nJOIN \n    Orders o ON c.ClientID = o.ClientID\nJOIN \n    OrderDetails od ON o.OrderID = od.OrderID\nJOIN \n    Products p ON od.ProductID = p.ProductID\nLEFT JOIN \n    `Returns` r ON o.OrderID = r.OrderID\nLEFT JOIN \n    Payments pm ON o.OrderID = pm.OrderID\nWHERE \n    o.OrderDate BETWEEN '2022-01-01' AND '2023-12-31'\nGROUP BY \n    c.ClientID, c.Name, c.City, YEAR(o.OrderDate), QUARTER(o.OrderDate)\nORDER BY \n    TotalSpent DESC\nLIMIT 12;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    c.ClientID,\n    c.Name AS ClientName,\n    c.City,\n    YEAR(o.OrderDate) AS Year,\n    QUARTER(o.OrderDate) AS Quarter,\n    COUNT(DISTINCT o.OrderID) AS OrderCount,\n    SUM(o.TotalAmount) AS TotalSpent,\n    AVG(o.TotalAmount) AS AvgOrderValue,\n    COUNT(DISTINCT p.Category) AS CategoryDiversity,\n    MAX(o.TotalAmount) AS MaxOrderValue,\n    AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgProcessingDays,\n    COUNT(DISTINCT r.ReturnID) AS TotalReturns,\n    SUM(COALESCE(py.Amount, 0)) AS ConfirmedPayments\nFROM \n    Clients c\nJOIN \n    Orders o ON c.ClientID = o.ClientID\nLEFT JOIN \n    OrderDetails od ON o.OrderID = od.OrderID\nLEFT JOIN \n    Products p ON od.ProductID = p.ProductID\nLEFT JOIN \n    Returns r ON o.OrderID = r.OrderID\nLEFT JOIN \n    Payments py ON o.OrderID = py.OrderID AND py.Status = 'Завершено'\nWHERE \n    o.OrderDate BETWEEN '2022-01-01' AND '2023-12-31'\n    AND o.Status != 'Отменено'\nGROUP BY \n    c.ClientID, c.Name, c.City, YEAR(o.OrderDate), QUARTER(o.OrderDate)\nORDER BY \n    TotalSpent DESC, OrderCount DESC\nLIMIT 12;",
            "gigachat_response": "WITH QuarterlyData AS (\n    SELECT \n        c.ClientID,\n        c.Name AS ClientName,\n        c.City,\n        YEAR(o.OrderDate) AS Year,\n        QUARTER(o.OrderDate) AS Quarter,\n        COUNT(*) AS NumOrders,\n        SUM(o.TotalAmount) AS TotalSpent,\n        AVG(o.TotalAmount) AS AverageOrderValue,\n        COUNT(DISTINCT p.Category) AS CategoriesDiversity,\n        MAX(o.TotalAmount) AS LargestSingleOrder,\n        AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgProcessingDays,\n        COALESCE(SUM(r.Quantity), 0) AS TotalReturns,\n        COALESCE(SUM(p.Amount), 0) AS ConfirmedPayments\n    FROM \n        Clients c\n    INNER JOIN \n        Orders o ON c.ClientID = o.ClientID\n    INNER JOIN \n        OrderDetails od ON o.OrderID = od.OrderID\n    INNER JOIN \n        Products p ON od.ProductID = p.ProductID\n    LEFT JOIN \n        Returns r ON o.OrderID = r.OrderID AND r.Status IN ('Принято', 'Возврат выполнен')\n    LEFT JOIN \n        Payments p ON o.OrderID = p.OrderID AND p.Status = 'Завершено'\n    WHERE \n        o.OrderDate BETWEEN '2022-01-01' AND '2023-12-31'\n    GROUP BY \n        c.ClientID, c.Name, c.City, YEAR(o.OrderDate), QUARTER(o.OrderDate)\n)\nSELECT *\nFROM QuarterlyData\nORDER BY TotalSpent DESC\nLIMIT 12;",
            "gigachat_response_ru": "WITH ClientOrders AS (\n    SELECT \n        o.ClientID,\n        YEAR(o.OrderDate) AS Year,\n        QUARTER(o.OrderDate) AS Quarter,\n        COUNT(*) AS NumOrders,\n        SUM(o.TotalAmount) AS TotalSpent,\n        AVG(o.TotalAmount) AS AverageOrderValue,\n        MAX(o.TotalAmount) AS LargestSingleOrder,\n        COUNT(DISTINCT p.Category) AS UniqueCategoriesOrdered,\n        AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageProcessingDays,\n        COUNT(r.ReturnID) AS NumberOfReturns,\n        SUM(CASE WHEN p.Status = 'Завершено' THEN p.Amount ELSE 0 END) AS ConfirmedPaymentsSum\n    FROM Orders o\n    INNER JOIN OrderDetails od ON o.OrderID = od.OrderID\n    INNER JOIN Products p ON od.ProductID = p.ProductID\n    LEFT JOIN `Returns` r ON o.OrderID = r.OrderID\n    LEFT JOIN Payments p ON o.OrderID = p.OrderID\n    WHERE o.OrderDate BETWEEN '2022-01-01' AND '2023-12-31'\n    GROUP BY o.ClientID, Year, Quarter\n), TopClients AS (\n    SELECT \n        co.ClientID,\n        cl.Name AS ClientName,\n        cl.City,\n        co.Year,\n        co.Quarter,\n        co.NumOrders,\n        co.TotalSpent,\n        co.AverageOrderValue,\n        co.UniqueCategoriesOrdered,\n        co.LargestSingleOrder,\n        co.AverageProcessingDays,\n        co.NumberOfReturns,\n        co.ConfirmedPaymentsSum\n    FROM ClientOrders co\n    INNER JOIN Clients cl ON co.ClientID = cl.ClientID\n)\nSELECT *\nFROM TopClients\nORDER BY TotalSpent DESC\nLIMIT 12;"
        },
        {
            "question": "Каков анализ эффективности складов и оборачиваемости инвентаря? Покажите топ-3 склада с наивысшим коэффициентом оборачиваемости инвентаря, включая идентификатор и название склада, город, вместимость, имя менеджера, количество уникальных продуктов, общее количество инвентаря, процент использования вместимости, общее количество отгруженных единиц, количество обработанных отправлений, среднее время выполнения заказа в днях и коэффициент оборачиваемости инвентаря.",
            "sql_query": "SELECT w.WarehouseID, w.Name AS WarehouseName, w.City, w.Capacity, e.FirstName || ' ' || e.LastName AS ManagerName, COUNT(DISTINCT i.ProductID) AS UniqueProducts, SUM(i.Quantity) AS TotalInventory, (SUM(i.Quantity) / w.Capacity * 100) AS CapacityUtilizationPercent, (SELECT SUM(od.Quantity) FROM OrderDetails od JOIN Products p ON od.ProductID = p.ProductID JOIN Inventory i2 ON p.ProductID = i2.ProductID WHERE i2.WarehouseID = w.WarehouseID) AS TotalItemsShipped, (SELECT COUNT(DISTINCT s.ShipmentID) FROM Shipments s JOIN Orders o ON s.OrderID = o.OrderID JOIN OrderDetails od2 ON o.OrderID = od2.OrderID JOIN Products p2 ON od2.ProductID = p2.ProductID JOIN Inventory i3 ON p2.ProductID = i3.ProductID WHERE i3.WarehouseID = w.WarehouseID) AS ShipmentsProcessed, (SELECT AVG(DATEDIFF(s2.ShipmentDate, o2.OrderDate)) FROM Shipments s2 JOIN Orders o2 ON s2.OrderID = o2.OrderID JOIN OrderDetails od3 ON o2.OrderID = od3.OrderID JOIN Products p3 ON od3.ProductID = p3.ProductID JOIN Inventory i4 ON p3.ProductID = i4.ProductID WHERE i4.WarehouseID = w.WarehouseID) AS AvgOrderFulfillmentDays, (SELECT SUM(od4.Quantity * od4.UnitPrice) / SUM(i5.Quantity * p4.UnitPrice) FROM Inventory i5 JOIN Products p4 ON i5.ProductID = p4.ProductID JOIN OrderDetails od4 ON p4.ProductID = od4.ProductID WHERE i5.WarehouseID = w.WarehouseID) AS InventoryTurnoverRatio FROM Warehouses w JOIN Employees e ON w.ManagerID = e.EmployeeID JOIN Inventory i ON w.WarehouseID = i.WarehouseID GROUP BY w.WarehouseID, w.Name, w.City, w.Capacity, ManagerName HAVING UniqueProducts > 5 ORDER BY InventoryTurnoverRatio DESC, CapacityUtilizationPercent DESC LIMIT 3;",
            "gpt-4o_response": "SELECT \n    w.WarehouseID,\n    w.Name AS WarehouseName,\n    w.City,\n    w.Capacity,\n    CONCAT(e.FirstName, ' ', e.LastName) AS ManagerName,\n    COUNT(DISTINCT i.ProductID) AS UniqueProducts,\n    SUM(i.Quantity) AS TotalInventory,\n    (SUM(i.Quantity) / w.Capacity) * 100 AS CapacityUsagePercentage,\n    COALESCE(SUM(od.Quantity), 0) AS TotalUnitsShipped,\n    COUNT(DISTINCT s.ShipmentID) AS ShipmentsProcessed,\n    AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgOrderFulfillmentTime,\n    COALESCE(SUM(od.Quantity), 0) / NULLIF(SUM(i.Quantity), 0) AS InventoryTurnoverRatio\nFROM \n    Warehouses w\nJOIN \n    Employees e ON w.ManagerID = e.EmployeeID\nLEFT JOIN \n    Inventory i ON w.WarehouseID = i.WarehouseID\nLEFT JOIN \n    Products p ON i.ProductID = p.ProductID\nLEFT JOIN \n    OrderDetails od ON p.ProductID = od.ProductID\nLEFT JOIN \n    Orders o ON od.OrderID = o.OrderID\nLEFT JOIN \n    Shipments s ON o.OrderID = s.OrderID\nWHERE \n    o.Status = 'Доставлено'\nGROUP BY \n    w.WarehouseID, w.Name, w.City, w.Capacity, ManagerName\nORDER BY \n    InventoryTurnoverRatio DESC\nLIMIT 3;",
            "gpt-4o_response_ru": "SELECT \n    w.WarehouseID,\n    w.Name AS WarehouseName,\n    w.City,\n    w.Capacity,\n    CONCAT(e.FirstName, ' ', e.LastName) AS ManagerName,\n    COUNT(DISTINCT i.ProductID) AS UniqueProducts,\n    SUM(i.Quantity) AS TotalInventory,\n    (SUM(i.Quantity) / w.Capacity) * 100 AS CapacityUsagePercent,\n    COALESCE(SUM(od.Quantity), 0) AS TotalUnitsShipped,\n    COUNT(DISTINCT s.ShipmentID) AS ShipmentsProcessed,\n    AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgOrderProcessingTime,\n    COALESCE(SUM(od.Quantity), 0) / NULLIF(SUM(i.Quantity), 0) AS InventoryTurnoverRatio\nFROM \n    Warehouses w\nJOIN \n    Employees e ON w.ManagerID = e.EmployeeID\nLEFT JOIN \n    Inventory i ON w.WarehouseID = i.WarehouseID\nLEFT JOIN \n    Products p ON i.ProductID = p.ProductID\nLEFT JOIN \n    OrderDetails od ON p.ProductID = od.ProductID\nLEFT JOIN \n    Orders o ON od.OrderID = o.OrderID\nLEFT JOIN \n    Shipments s ON o.OrderID = s.OrderID\nWHERE \n    o.Status = 'Доставлено'\nGROUP BY \n    w.WarehouseID, w.Name, w.City, w.Capacity, ManagerName\nORDER BY \n    InventoryTurnoverRatio DESC\nLIMIT 3;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    w.WarehouseID,\n    w.Name AS WarehouseName,\n    w.City,\n    w.Capacity,\n    e.FirstName || ' ' || e.LastName AS ManagerName,\n    COUNT(DISTINCT i.ProductID) AS UniqueProducts,\n    SUM(i.Quantity) AS TotalInventory,\n    CAST(SUM(i.Quantity) AS REAL) * 100 / w.Capacity AS CapacityUsagePercentage,\n    SUM(od.Quantity) AS TotalShippedUnits,\n    COUNT(DISTINCT s.ShipmentID) AS ShipmentsProcessed,\n    AVG(JULIANDAY(s.DeliveryDate) - JULIANDAY(o.OrderDate)) AS AvgLeadTimeDays,\n    CAST(SUM(od.Quantity) AS REAL) / SUM(i.Quantity) AS InventoryTurnoverRatio\nFROM Warehouses w\nJOIN Employees e ON w.ManagerID = e.EmployeeID\nLEFT JOIN Inventory i ON w.WarehouseID = i.WarehouseID\nLEFT JOIN Products p ON i.ProductID = p.ProductID\nLEFT JOIN OrderDetails od ON p.ProductID = od.ProductID\nLEFT JOIN Orders o ON od.OrderID = o.OrderID\nLEFT JOIN Shipments s ON o.OrderID = s.OrderID\nGROUP BY w.WarehouseID, w.Name, w.City, w.Capacity, ManagerName\nORDER BY InventoryTurnoverRatio DESC\nLIMIT 3;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    w.WarehouseID,\n    w.Name AS WarehouseName,\n    w.City,\n    w.Capacity,\n    e.FirstName || ' ' || e.LastName AS ManagerName,\n    COUNT(DISTINCT i.ProductID) AS UniqueProducts,\n    SUM(i.Quantity) AS TotalInventory,\n    CAST(SUM(i.Quantity) AS REAL) / w.Capacity * 100 AS CapacityUsagePercentage,\n    SUM(od.Quantity) AS TotalShippedUnits,\n    COUNT(DISTINCT s.ShipmentID) AS ProcessedShipments,\n    AVG(JULIANDAY(s.DeliveryDate) - JULIANDAY(o.OrderDate)) AS AvgLeadTimeDays,\n    SUM(od.Quantity * p.UnitPrice) / SUM(i.Quantity) AS InventoryTurnoverRatio\nFROM Warehouses w\nJOIN Employees e ON w.ManagerID = e.EmployeeID\nLEFT JOIN Inventory i ON w.WarehouseID = i.WarehouseID\nLEFT JOIN Products p ON i.ProductID = p.ProductID\nLEFT JOIN OrderDetails od ON p.ProductID = od.ProductID\nLEFT JOIN Orders o ON od.OrderID = o.OrderID\nLEFT JOIN Shipments s ON o.OrderID = s.OrderID\nGROUP BY w.WarehouseID, w.Name, w.City, w.Capacity, ManagerName\nORDER BY InventoryTurnoverRatio DESC\nLIMIT 3;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    w.WarehouseID, \n    w.Name AS WarehouseName, \n    w.City, \n    w.Capacity, \n    CONCAT(e.FirstName, ' ', e.LastName) AS ManagerName, \n    COUNT(DISTINCT i.ProductID) AS UniqueProducts, \n    SUM(i.Quantity) AS TotalInventory, \n    (SUM(i.Quantity) / w.Capacity) * 100 AS CapacityUtilization, \n    SUM(od.Quantity) AS TotalShippedUnits, \n    COUNT(DISTINCT d.DeliveryID) AS TotalDeliveriesProcessed, \n    AVG(DATEDIFF(d.DeliveryDate, s.ShipmentDate)) AS AvgOrderFulfillmentTime, \n    SUM(od.Quantity) / SUM(i.Quantity) AS InventoryTurnover\nFROM \n    Warehouses w\nJOIN \n    Employees e ON w.ManagerID = e.EmployeeID\nJOIN \n    Inventory i ON w.WarehouseID = i.WarehouseID\nJOIN \n    Products p ON i.ProductID = p.ProductID\nJOIN \n    OrderDetails od ON p.ProductID = od.ProductID\nJOIN \n    Orders o ON od.OrderID = o.OrderID\nJOIN \n    Shipments s ON o.OrderID = s.OrderID\nJOIN \n    Deliveries d ON s.ShipmentID = d.ShipmentID\nGROUP BY \n    w.WarehouseID, w.Name, w.City, w.Capacity, e.FirstName, e.LastName\nORDER BY \n    InventoryTurnover DESC\nLIMIT 3;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    w.WarehouseID, \n    w.Name AS WarehouseName, \n    w.City, \n    w.Capacity, \n    CONCAT(e.FirstName, ' ', e.LastName) AS ManagerName, \n    COUNT(DISTINCT i.ProductID) AS UniqueProducts, \n    SUM(i.Quantity) AS TotalInventory, \n    (SUM(i.Quantity) / w.Capacity) * 100 AS CapacityUtilization, \n    COALESCE(SUM(d.Quantity), 0) AS TotalShippedUnits, \n    COUNT(DISTINCT s.ShipmentID) AS TotalShipments, \n    AVG(DATEDIFF(s.DeliveryDate, s.ShipmentDate)) AS AverageOrderFulfillmentDays, \n    (COALESCE(SUM(d.Quantity), 0) / SUM(i.Quantity)) AS InventoryTurnover\nFROM \n    Warehouses w\nJOIN \n    Employees e ON w.ManagerID = e.EmployeeID\nJOIN \n    Inventory i ON w.WarehouseID = i.WarehouseID\nLEFT JOIN \n    Shipments s ON w.WarehouseID = s.WarehouseID\nLEFT JOIN \n    Deliveries d ON s.ShipmentID = d.ShipmentID\nGROUP BY \n    w.WarehouseID, w.Name, w.City, w.Capacity, e.FirstName, e.LastName\nORDER BY \n    InventoryTurnover DESC\nLIMIT 3;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    w.WarehouseID,\n    w.Name AS WarehouseName,\n    w.City,\n    w.Capacity,\n    CONCAT(e.FirstName, ' ', e.LastName) AS ManagerName,\n    COUNT(DISTINCT i.ProductID) AS UniqueProducts,\n    SUM(i.Quantity) AS TotalInventory,\n    ROUND(SUM(i.Quantity) * 100.0 / w.Capacity, 2) AS CapacityUsagePercentage,\n    COALESCE(SUM(od.Quantity), 0) AS TotalUnitsShipped,\n    COUNT(DISTINCT s.ShipmentID) AS ShipmentsProcessed,\n    COALESCE(AVG(DATEDIFF(s.DeliveryDate, s.ShipmentDate)), 0) AS AvgOrderFulfillmentDays,\n    CASE \n        WHEN SUM(i.Quantity) > 0 THEN ROUND(COALESCE(SUM(od.Quantity), 0) * 1.0 / SUM(i.Quantity), 2)\n        ELSE 0 \n    END AS InventoryTurnoverRatio\nFROM \n    Warehouses w\nJOIN \n    Employees e ON w.ManagerID = e.EmployeeID\nLEFT JOIN \n    Inventory i ON w.WarehouseID = i.WarehouseID\nLEFT JOIN \n    OrderDetails od ON i.ProductID = od.ProductID\nLEFT JOIN \n    Orders o ON od.OrderID = o.OrderID\nLEFT JOIN \n    Shipments s ON o.OrderID = s.OrderID\nGROUP BY \n    w.WarehouseID, w.Name, w.City, w.Capacity, e.FirstName, e.LastName\nORDER BY \n    InventoryTurnoverRatio DESC\nLIMIT 3;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    w.WarehouseID,\n    w.Name AS WarehouseName,\n    w.City,\n    w.Capacity,\n    CONCAT(e.FirstName, ' ', e.LastName) AS ManagerName,\n    COUNT(DISTINCT i.ProductID) AS UniqueProducts,\n    SUM(i.Quantity) AS TotalInventory,\n    ROUND(SUM(i.Quantity) / w.Capacity * 100, 2) AS CapacityUsagePercentage,\n    (SELECT SUM(od.Quantity) \n     FROM OrderDetails od \n     JOIN Orders o ON od.OrderID = o.OrderID \n     JOIN Shipments s ON o.OrderID = s.OrderID \n     WHERE s.Status = 'Доставлено' AND o.Status = 'Доставлено') AS TotalShippedUnits,\n    COUNT(DISTINCT s.ShipmentID) AS ShipmentsProcessed,\n    AVG(DATEDIFF(s.DeliveryDate, s.ShipmentDate)) AS AvgOrderFulfillmentDays,\n    ROUND((SELECT SUM(od.Quantity) \n           FROM OrderDetails od \n           JOIN Orders o ON od.OrderID = o.OrderID \n           JOIN Shipments s ON o.OrderID = s.OrderID \n           WHERE s.Status = 'Доставлено' AND o.Status = 'Доставлено') / NULLIF(SUM(i.Quantity), 0), 2) AS InventoryTurnoverRatio\nFROM \n    Warehouses w\nJOIN \n    Employees e ON w.ManagerID = e.EmployeeID\nJOIN \n    Inventory i ON w.WarehouseID = i.WarehouseID\nLEFT JOIN \n    Shipments s ON w.WarehouseID = s.ShipmentID\nGROUP BY \n    w.WarehouseID, w.Name, w.City, w.Capacity, ManagerName\nORDER BY \n    InventoryTurnoverRatio DESC\nLIMIT 3;",
            "gigachat_response": "WITH WarehouseMetrics AS (\n    -- Calculate warehouse metrics including inventory turnover rate\n    SELECT \n        w.WarehouseID,\n        w.Name AS WarehouseName,\n        w.City,\n        w.Capacity,\n        e.FirstName || ' ' || e.LastName AS ManagerName,\n        COUNT(DISTINCT inv.ProductID) AS UniqueProductsCount,\n        SUM(inv.Quantity) AS TotalInventoryQty,\n        ROUND((SUM(inv.Quantity)::DECIMAL / w.Capacity), 2) * 100 AS CapacityUsagePercentage,\n        COALESCE(SUM(od.Quantity), 0) AS TotalShippedUnits,\n        COUNT(DISTINCT sh.ShipmentID) AS ProcessedShipments,\n        AVG(DATE_PART('day', sh.DeliveryDate::timestamp - sh.ShipmentDate::timestamp)) AS AverageOrderFulfillmentDays,\n        ROUND(COALESCE(SUM(od.Quantity), 0)::DECIMAL / SUM(inv.Quantity), 2) AS InventoryTurnoverRatio\n    FROM \n        Warehouses w\n    INNER JOIN \n        Inventory inv ON w.WarehouseID = inv.WarehouseID\n    LEFT JOIN \n        Employees e ON w.ManagerID = e.EmployeeID\n    LEFT JOIN \n        OrderDetails od ON inv.ProductID = od.ProductID\n    LEFT JOIN \n        Orders o ON od.OrderID = o.OrderID\n    LEFT JOIN \n        Shipments sh ON o.OrderID = sh.OrderID\n    GROUP BY \n        w.WarehouseID, w.Name, w.City, w.Capacity, e.FirstName, e.LastName\n)\n-- Select top 3 warehouses based on inventory turnover ratio\nSELECT *\nFROM WarehouseMetrics\nORDER BY InventoryTurnoverRatio DESC\nLIMIT 3;",
            "gigachat_response_ru": "WITH WarehouseStats AS (\n    SELECT \n        w.WarehouseID,\n        w.Name AS WarehouseName,\n        w.City,\n        w.Capacity,\n        e.FirstName || ' ' || e.LastName AS ManagerName,\n        COUNT(DISTINCT inv.ProductID) AS UniqueProductsCount,\n        SUM(inv.Quantity) AS TotalInventoryQty,\n        ROUND(SUM(inv.Quantity)::NUMERIC / w.Capacity::NUMERIC * 100, 2) AS CapacityUsagePercentage,\n        COALESCE(SUM(od.Quantity), 0) AS TotalShippedUnits,\n        COUNT(DISTINCT sh.ShipmentID) AS ProcessedShipmentsCount,\n        AVG(DATE_PART('day', sh.DeliveryDate - sh.ShipmentDate)) AS AverageOrderFulfillmentDays\n    FROM Warehouses w\n    INNER JOIN Inventory inv ON w.WarehouseID = inv.WarehouseID\n    LEFT JOIN Employees e ON w.ManagerID = e.EmployeeID\n    LEFT JOIN OrderDetails od ON inv.ProductID = od.ProductID\n    LEFT JOIN Shipments sh ON od.OrderID = sh.OrderID\n    GROUP BY w.WarehouseID, w.Name, w.City, w.Capacity, e.FirstName, e.LastName\n),\nTurnoverRatio AS (\n    SELECT \n        ws.*,\n        ROUND((ws.TotalShippedUnits::NUMERIC / ws.TotalInventoryQty::NUMERIC), 2) AS TurnoverRatio\n    FROM WarehouseStats ws\n)\nSELECT *\nFROM TurnoverRatio\nORDER BY TurnoverRatio DESC\nLIMIT 3;"
        },
        {
            "question": "Какова производительность автопарка и эффективность доставки? Покажите топ-6 транспортных средств с наивысшим процентом успешных доставок и вместимостью более 1000 единиц, включая идентификатор транспортного средства, номерной знак, модель, вместимость, статус, название перевозчика, общее количество доставок, количество успешных доставок, процент успешных доставок, среднее время доставки в днях, общую стоимость доставленных товаров, общее количество доставленных единиц и количество обслуживаемых маршрутов.",
            "sql_query": "SELECT v.VehicleID, v.LicensePlate, v.Model, v.Capacity, v.Status, sh.Name AS ShipperName, COUNT(DISTINCT d.DeliveryID) AS TotalDeliveries, COUNT(DISTINCT CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID END) AS CompletedDeliveries, (COUNT(DISTINCT CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID END) / COUNT(DISTINCT d.DeliveryID) * 100) AS SuccessRate, (SELECT AVG(DATEDIFF(d2.DeliveryDate, s.ShipmentDate)) FROM Deliveries d2 JOIN Shipments s ON d2.ShipmentID = s.ShipmentID WHERE d2.VehicleID = v.VehicleID AND d2.Status = 'Доставлено') AS AvgDeliveryDays, (SELECT SUM(od.Quantity * p.UnitPrice) FROM OrderDetails od JOIN Products p ON od.ProductID = p.ProductID JOIN Orders o ON od.OrderID = o.OrderID JOIN Shipments s2 ON o.OrderID = s2.OrderID JOIN Deliveries d3 ON s2.ShipmentID = d3.ShipmentID WHERE d3.VehicleID = v.VehicleID) AS TotalValueDelivered, (SELECT SUM(od2.Quantity) FROM OrderDetails od2 JOIN Orders o2 ON od2.OrderID = o2.OrderID JOIN Shipments s3 ON o2.OrderID = s3.OrderID JOIN Deliveries d4 ON s3.ShipmentID = d4.ShipmentID WHERE d4.VehicleID = v.VehicleID) AS TotalItemsDelivered, (SELECT COUNT(DISTINCT r.RouteID) FROM Routes r JOIN Shippers sh2 ON r.ShipperID = sh2.ShipperID WHERE sh2.ShipperID = v.ShipperID) AS RoutesServiced FROM Vehicles v JOIN Shippers sh ON v.ShipperID = sh.ShipperID LEFT JOIN Deliveries d ON v.VehicleID = d.VehicleID WHERE v.Capacity > 1000 GROUP BY v.VehicleID, v.LicensePlate, v.Model, v.Capacity, v.Status, sh.Name HAVING TotalDeliveries > 0 ORDER BY SuccessRate DESC, TotalValueDelivered DESC LIMIT 6;",
            "gpt-4o_response": "SELECT \n    v.VehicleID,\n    v.LicensePlate,\n    v.Model,\n    v.Capacity,\n    v.Status,\n    s.Name AS ShipperName,\n    COUNT(d.DeliveryID) AS TotalDeliveries,\n    COUNT(CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID END) AS SuccessfulDeliveries,\n    COUNT(CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID END) / COUNT(d.DeliveryID) * 100 AS SuccessRate,\n    AVG(DATEDIFF(d.DeliveryDate, sh.ShipmentDate)) AS AvgDeliveryTimeDays,\n    SUM(od.Quantity * od.UnitPrice * (1 - od.Discount / 100)) AS TotalDeliveredValue,\n    SUM(od.Quantity) AS TotalDeliveredUnits,\n    COUNT(DISTINCT r.RouteID) AS RoutesServed\nFROM \n    Vehicles v\nJOIN \n    Deliveries d ON v.VehicleID = d.VehicleID\nJOIN \n    Shipments sh ON d.ShipmentID = sh.ShipmentID\nJOIN \n    Orders o ON sh.OrderID = o.OrderID\nJOIN \n    OrderDetails od ON o.OrderID = od.OrderID\nJOIN \n    Shippers s ON v.ShipperID = s.ShipperID\nLEFT JOIN \n    Routes r ON s.ShipperID = r.ShipperID\nWHERE \n    v.Capacity > 1000\nGROUP BY \n    v.VehicleID, v.LicensePlate, v.Model, v.Capacity, v.Status, s.Name\nORDER BY \n    SuccessRate DESC, TotalDeliveries DESC\nLIMIT 6;",
            "gpt-4o_response_ru": "SELECT \n    v.VehicleID,\n    v.LicensePlate,\n    v.Model,\n    v.Capacity,\n    v.Status,\n    s.Name AS ShipperName,\n    COUNT(d.DeliveryID) AS TotalDeliveries,\n    COUNT(CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID END) AS SuccessfulDeliveries,\n    COUNT(CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID END) / COUNT(d.DeliveryID) * 100 AS SuccessRate,\n    AVG(DATEDIFF(d.DeliveryDate, s.ShipmentDate)) AS AvgDeliveryTimeDays,\n    SUM(od.Quantity * od.UnitPrice * (1 - od.Discount / 100)) AS TotalDeliveredValue,\n    SUM(od.Quantity) AS TotalDeliveredUnits,\n    COUNT(DISTINCT r.RouteID) AS RoutesServed\nFROM \n    Vehicles v\nJOIN \n    Deliveries d ON v.VehicleID = d.VehicleID\nJOIN \n    Shipments s ON d.ShipmentID = s.ShipmentID\nJOIN \n    Orders o ON s.OrderID = o.OrderID\nJOIN \n    OrderDetails od ON o.OrderID = od.OrderID\nJOIN \n    Routes r ON s.ShipperID = r.ShipperID\nWHERE \n    v.Capacity > 1000\nGROUP BY \n    v.VehicleID, v.LicensePlate, v.Model, v.Capacity, v.Status, s.Name\nORDER BY \n    SuccessRate DESC, TotalDeliveries DESC\nLIMIT 6;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    v.VehicleID,\n    v.LicensePlate,\n    v.Model,\n    v.Capacity,\n    v.Status,\n    s.Name AS ShipperName,\n    COUNT(DISTINCT d.DeliveryID) AS TotalDeliveries,\n    SUM(CASE WHEN d.Status = 'Доставлено' THEN 1 ELSE 0 END) AS SuccessfulDeliveries,\n    CAST(SUM(CASE WHEN d.Status = 'Доставлено' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(DISTINCT d.DeliveryID) AS DeliverySuccessRate,\n    AVG(JULIANDAY(d.DeliveryDate) - JULIANDAY(sh.ShipmentDate)) AS AvgDeliveryTimeDays,\n    SUM(od.Quantity * od.UnitPrice * (1 - od.Discount / 100)) AS TotalDeliveredValue,\n    SUM(od.Quantity) AS TotalDeliveredQuantity,\n    COUNT(DISTINCT r.RouteID) AS RoutesServed\nFROM\n    Vehicles v\nJOIN\n    Shippers s ON v.ShipperID = s.ShipperID\nLEFT JOIN\n    Deliveries d ON v.VehicleID = d.VehicleID\nLEFT JOIN\n    Shipments sh ON d.ShipmentID = sh.ShipmentID\nLEFT JOIN\n    OrderDetails od ON sh.OrderID = od.OrderID\nLEFT JOIN\n    Routes r ON s.ShipperID = r.ShipperID\nWHERE\n    v.Capacity > 1000\nGROUP BY\n    v.VehicleID, v.LicensePlate, v.Model, v.Capacity, v.Status, s.Name\nHAVING COUNT(DISTINCT d.DeliveryID) > 0\nORDER BY\n    DeliverySuccessRate DESC\nLIMIT 6;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    v.VehicleID,\n    v.LicensePlate,\n    v.Model,\n    v.Capacity,\n    v.Status AS VehicleStatus,\n    s.Name AS ShipperName,\n    COUNT(DISTINCT d.DeliveryID) AS TotalDeliveries,\n    SUM(CASE WHEN d.Status = 'Доставлено' THEN 1 ELSE 0 END) AS SuccessfulDeliveries,\n    CAST(SUM(CASE WHEN d.Status = 'Доставлено' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(DISTINCT d.DeliveryID) AS SuccessDeliveryPercentage,\n    AVG(JULIANDAY(d.DeliveryDate) - JULIANDAY(sh.ShipmentDate)) AS AvgDeliveryTimeDays,\n    SUM(od.Quantity * od.UnitPrice * (1 - od.Discount / 100)) AS TotalDeliveredValue,\n    SUM(od.Quantity) AS TotalDeliveredQuantity,\n    COUNT(DISTINCT r.RouteID) AS RoutesServed\nFROM\n    Vehicles v\nJOIN\n    Shippers s ON v.ShipperID = s.ShipperID\nLEFT JOIN\n    Deliveries d ON v.VehicleID = d.VehicleID\nLEFT JOIN\n    Shipments sh ON d.ShipmentID = sh.ShipmentID\nLEFT JOIN\n    OrderDetails od ON sh.OrderID = od.OrderID\nLEFT JOIN\n    Routes r ON s.ShipperID = r.ShipperID\nWHERE\n    v.Capacity > 1000\nGROUP BY\n    v.VehicleID, v.LicensePlate, v.Model, v.Capacity, v.Status, s.Name\nHAVING\n    COUNT(DISTINCT d.DeliveryID) > 0\nORDER BY\n    SuccessDeliveryPercentage DESC\nLIMIT 6;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    v.VehicleID,\n    v.LicensePlate,\n    v.Model,\n    v.Capacity,\n    v.Status,\n    s.Name AS ShipperName,\n    COUNT(d.DeliveryID) AS TotalDeliveries,\n    SUM(CASE WHEN d.Status = 'Доставлено' THEN 1 ELSE 0 END) AS SuccessfulDeliveries,\n    (SUM(CASE WHEN d.Status = 'Доставлено' THEN 1 ELSE 0 END) / COUNT(d.DeliveryID)) * 100 AS DeliverySuccessRate,\n    AVG(DATEDIFF(d.DeliveryDate, s.ShipmentDate)) AS AvgDeliveryTimeInDays,\n    SUM(od.Quantity * od.UnitPrice) AS TotalDeliveredCost,\n    SUM(od.Quantity) AS TotalDeliveredUnits,\n    COUNT(DISTINCT r.RouteID) AS ManagedRoutes\nFROM \n    Vehicles v\nJOIN \n    Deliveries d ON v.VehicleID = d.VehicleID\nJOIN \n    Shipments s ON d.ShipmentID = s.ShipmentID\nJOIN \n    Shippers sh ON s.ShipperID = sh.ShipperID\nJOIN \n    OrderDetails od ON s.OrderID = od.OrderID\nJOIN \n    Routes r ON sh.ShipperID = r.ShipperID\nWHERE \n    v.Capacity > 1000\nGROUP BY \n    v.VehicleID, v.LicensePlate, v.Model, v.Capacity, v.Status, s.Name\nORDER BY \n    DeliverySuccessRate DESC\nLIMIT 6;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    v.VehicleID, \n    v.LicensePlate, \n    v.Model, \n    v.Capacity, \n    v.Status, \n    sh.Name AS ShipperName, \n    COUNT(d.DeliveryID) AS TotalDeliveries, \n    COUNT(CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID END) AS SuccessfulDeliveries, \n    COUNT(CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID END) / COUNT(d.DeliveryID) * 100 AS SuccessRate, \n    AVG(DATEDIFF(d.DeliveryDate, s.ShipmentDate)) AS AvgDeliveryTime, \n    SUM(od.Quantity * od.UnitPrice) AS TotalDeliveredValue, \n    SUM(od.Quantity) AS TotalDeliveredUnits, \n    COUNT(DISTINCT r.RouteID) AS RoutesServiced\nFROM \n    Vehicles v\nJOIN \n    Shippers sh ON v.ShipperID = sh.ShipperID\nJOIN \n    Deliveries d ON v.VehicleID = d.VehicleID\nJOIN \n    Shipments s ON d.ShipmentID = s.ShipmentID\nJOIN \n    OrderDetails od ON s.OrderID = od.OrderID\nJOIN \n    Routes r ON sh.ShipperID = r.ShipperID\nWHERE \n    v.Capacity > 1000\nGROUP BY \n    v.VehicleID, v.LicensePlate, v.Model, v.Capacity, v.Status, sh.Name\nORDER BY \n    SuccessRate DESC\nLIMIT 6;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    v.VehicleID,\n    v.LicensePlate,\n    v.Model,\n    v.Capacity,\n    v.Status,\n    s.Name AS ShipperName,\n    COUNT(d.DeliveryID) AS TotalDeliveries,\n    COUNT(DISTINCT CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID END) AS SuccessfulDeliveries,\n    COUNT(DISTINCT CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID END) / COUNT(d.DeliveryID) * 100 AS SuccessRate,\n    AVG(DATEDIFF(d.DeliveryDate, sm.ShipmentDate)) AS AvgDeliveryTimeDays,\n    SUM(od.Quantity * od.UnitPrice) AS TotalDeliveredValue,\n    SUM(od.Quantity) AS TotalDeliveredUnits,\n    COUNT(DISTINCT sm.ShipperID) AS RoutesServed\nFROM \n    Vehicles v\nJOIN \n    Shippers s ON v.ShipperID = s.ShipperID\nJOIN \n    Deliveries d ON v.VehicleID = d.VehicleID\nJOIN \n    Shipments sm ON d.ShipmentID = sm.ShipmentID\nJOIN \n    Orders o ON sm.OrderID = o.OrderID\nJOIN \n    OrderDetails od ON o.OrderID = od.OrderID\nWHERE \n    v.Capacity > 1000\nGROUP BY \n    v.VehicleID, v.LicensePlate, v.Model, v.Capacity, v.Status, s.Name\nHAVING \n    TotalDeliveries > 0\nORDER BY \n    SuccessRate DESC, TotalDeliveries DESC\nLIMIT 6;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    v.VehicleID,\n    v.LicensePlate,\n    v.Model,\n    v.Capacity,\n    v.Status,\n    sh.Name AS ShipperName,\n    COUNT(d.DeliveryID) AS TotalDeliveries,\n    COUNT(CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID END) AS SuccessfulDeliveries,\n    COUNT(CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID END) / COUNT(d.DeliveryID) * 100 AS SuccessRate,\n    AVG(DATEDIFF(d.DeliveryDate, s.ShipmentDate)) AS AvgDeliveryTimeDays,\n    SUM(od.Quantity * od.UnitPrice * (1 - od.Discount/100)) AS TotalDeliveredValue,\n    SUM(od.Quantity) AS TotalDeliveredUnits,\n    COUNT(DISTINCT r.RouteID) AS RoutesServed\nFROM \n    Vehicles v\nJOIN \n    Shippers sh ON v.ShipperID = sh.ShipperID\nJOIN \n    Deliveries d ON v.VehicleID = d.VehicleID\nJOIN \n    Shipments s ON d.ShipmentID = s.ShipmentID\nJOIN \n    Orders o ON s.OrderID = o.OrderID\nJOIN \n    OrderDetails od ON o.OrderID = od.OrderID\nLEFT JOIN \n    Routes r ON sh.ShipperID = r.ShipperID\nWHERE \n    v.Capacity > 1000\nGROUP BY \n    v.VehicleID, v.LicensePlate, v.Model, v.Capacity, v.Status, sh.Name\nORDER BY \n    SuccessRate DESC\nLIMIT 6;",
            "gigachat_response": "WITH SuccessfulDeliveries AS (\n    SELECT \n        v.VehicleID,\n        v.LicensePlate,\n        v.Model,\n        v.Capacity,\n        v.Status,\n        sh.Name AS ShipperName,\n        COUNT(*) AS TotalDeliveries,\n        COUNT(CASE WHEN d.Status = 'Доставлено' THEN 1 ELSE NULL END) AS SuccessDeliveries,\n        ROUND((COUNT(CASE WHEN d.Status = 'Доставлено' THEN 1 ELSE NULL END)::DECIMAL / COUNT(*)) * 100, 2) AS SuccessPercentage,\n        AVG(DATE_PART('day', AGE(d.DeliveryDate, s.ShipmentDate)))::NUMERIC(10,2) AS AverageDeliveryDays,\n        COALESCE(SUM(od.Quantity), 0) AS TotalUnitsDelivered,\n        COALESCE(SUM(od.Quantity * od.UnitPrice * (1 - od.Discount/100)), 0) AS TotalValueOfGoods,\n        COUNT(DISTINCT r.RouteID) AS ServicedRoutesCount\n    FROM Vehicles v\n    INNER JOIN Deliveries d ON v.VehicleID = d.VehicleID\n    INNER JOIN Shipments s ON d.ShipmentID = s.ShipmentID\n    INNER JOIN Shippers sh ON s.ShipperID = sh.ShipperID\n    INNER JOIN OrderDetails od ON s.OrderID = od.OrderID\n    LEFT JOIN Routes r ON sh.ShipperID = r.ShipperID\n    WHERE v.Capacity > 1000 AND d.Status IN ('Доставлено', 'В пути')\n    GROUP BY v.VehicleID, v.LicensePlate, v.Model, v.Capacity, v.Status, sh.Name\n)\nSELECT *\nFROM SuccessfulDeliveries\nORDER BY SuccessPercentage DESC, TotalDeliveries DESC\nLIMIT 6;",
            "gigachat_response_ru": "SELECT v.VehicleID, v.LicensePlate, v.Model, v.Capacity, v.Status, sh.Name AS ShipperName,\n       COUNT(d.DeliveryID) AS TotalDeliveries,\n       COUNT(CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID END) AS SuccessfulDeliveries,\n       ROUND((COUNT(CASE WHEN d.Status = 'Доставлено' THEN d.DeliveryID END) / COUNT(d.DeliveryID)) * 100, 2) AS SuccessRate,\n       AVG(DATEDIFF(d.DeliveryDate, s.ShipmentDate)) AS AverageDeliveryDays,\n       SUM(od.Quantity * od.UnitPrice * (1 - od.Discount/100)) AS TotalGoodsValue,\n       SUM(od.Quantity) AS TotalUnitsDelivered,\n       COUNT(r.RouteID) AS ServicedRoutesCount\nFROM Vehicles v\nLEFT JOIN Deliveries d ON v.VehicleID = d.VehicleID\nLEFT JOIN Shipments s ON d.ShipmentID = s.ShipmentID\nLEFT JOIN Shippers sh ON s.ShipperID = sh.ShipperID\nLEFT JOIN OrderDetails od ON s.OrderID = od.OrderID\nLEFT JOIN Routes r ON sh.ShipperID = r.ShipperID\nWHERE v.Capacity > 1000 AND d.DeliveryDate IS NOT NULL\nGROUP BY v.VehicleID, v.LicensePlate, v.Model, v.Capacity, v.Status, sh.Name\nORDER BY SuccessRate DESC, TotalDeliveries DESC\nLIMIT 6;"
        },
        {
            "question": "Каков комплексный анализ платежей и возвратов с учетом метрик прибыльности клиентов? Покажите топ-8 клиентов с наибольшей чистой выручкой, зарегистрированных до 2023 года и имеющих более 3 заказов, включая идентификатор клиента, имя клиента, город, страну, количество дней как клиент, общее количество заказов, общую стоимость заказов, сумму подтвержденных платежей, сумму отмененных платежей, общее количество возвратов, стоимость возвращенных товаров, чистую выручку с учетом возвратов и среднее время от заказа до доставки в днях.",
            "sql_query": "SELECT c.ClientID, c.Name AS ClientName, c.City, c.Country, DATEDIFF(CURRENT_DATE, c.RegistrationDate) AS DaysAsCustomer, COUNT(DISTINCT o.OrderID) AS TotalOrders, SUM(o.TotalAmount) AS GrossOrderValue, (SELECT SUM(p.Amount) FROM Payments p JOIN Orders o2 ON p.OrderID = o2.OrderID WHERE o2.ClientID = c.ClientID AND p.Status = 'Завершено') AS ConfirmedPayments, (SELECT SUM(p2.Amount) FROM Payments p2 JOIN Orders o3 ON p2.OrderID = o3.OrderID WHERE o3.ClientID = c.ClientID AND p2.Status = 'Отменено') AS CanceledPayments, (SELECT COUNT(DISTINCT r.ReturnID) FROM `Returns` r JOIN Orders o4 ON r.OrderID = o4.OrderID WHERE o4.ClientID = c.ClientID) AS TotalReturns, (SELECT SUM(r2.Quantity * od.UnitPrice) FROM `Returns` r2 JOIN OrderDetails od ON r2.OrderID = od.OrderID AND r2.ProductID = od.ProductID JOIN Orders o5 ON r2.OrderID = o5.OrderID WHERE o5.ClientID = c.ClientID) AS ReturnValue, (SUM(o.TotalAmount) - (SELECT COALESCE(SUM(r3.Quantity * od2.UnitPrice), 0) FROM `Returns` r3 JOIN OrderDetails od2 ON r3.OrderID = od2.OrderID AND r3.ProductID = od2.ProductID JOIN Orders o6 ON r3.OrderID = o6.OrderID WHERE o6.ClientID = c.ClientID)) AS NetRevenue, (SELECT AVG(DATEDIFF(s.DeliveryDate, o7.OrderDate)) FROM Shipments s JOIN Orders o7 ON s.OrderID = o7.OrderID WHERE o7.ClientID = c.ClientID AND s.Status = 'Доставлено') AS AvgOrderToDeliveryDays FROM Clients c JOIN Orders o ON c.ClientID = o.ClientID WHERE c.RegistrationDate < '2023-01-01' GROUP BY c.ClientID, c.Name, c.City, c.Country, c.RegistrationDate HAVING TotalOrders >= 3 ORDER BY NetRevenue DESC, TotalReturns ASC LIMIT 8;",
            "gpt-4o_response": "SELECT \n    c.ClientID,\n    c.Name AS ClientName,\n    c.City,\n    c.Country,\n    DATEDIFF(CURDATE(), c.RegistrationDate) AS DaysAsClient,\n    COUNT(DISTINCT o.OrderID) AS TotalOrders,\n    SUM(o.TotalAmount) AS TotalOrderValue,\n    SUM(CASE WHEN p.Status = 'Завершено' THEN p.Amount ELSE 0 END) AS ConfirmedPayments,\n    SUM(CASE WHEN p.Status = 'Отменено' THEN p.Amount ELSE 0 END) AS CanceledPayments,\n    COUNT(DISTINCT r.ReturnID) AS TotalReturns,\n    SUM(r.Quantity * od.UnitPrice * (1 - od.Discount / 100)) AS ReturnedValue,\n    SUM(o.TotalAmount) - SUM(r.Quantity * od.UnitPrice * (1 - od.Discount / 100)) AS NetRevenue,\n    AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgOrderToDeliveryDays\nFROM \n    Clients c\nJOIN \n    Orders o ON c.ClientID = o.ClientID\nLEFT JOIN \n    Payments p ON o.OrderID = p.OrderID\nLEFT JOIN \n    `Returns` r ON o.OrderID = r.OrderID\nLEFT JOIN \n    OrderDetails od ON r.OrderID = od.OrderID AND r.ProductID = od.ProductID\nWHERE \n    c.RegistrationDate < '2023-01-01'\nGROUP BY \n    c.ClientID, c.Name, c.City, c.Country\nHAVING \n    COUNT(DISTINCT o.OrderID) > 3\nORDER BY \n    NetRevenue DESC\nLIMIT 8;",
            "gpt-4o_response_ru": "SELECT \n    c.ClientID,\n    c.Name AS ClientName,\n    c.City,\n    c.Country,\n    DATEDIFF(CURDATE(), c.RegistrationDate) AS DaysAsClient,\n    COUNT(DISTINCT o.OrderID) AS TotalOrders,\n    SUM(o.TotalAmount) AS TotalOrderValue,\n    SUM(CASE WHEN p.Status = 'Завершено' THEN p.Amount ELSE 0 END) AS ConfirmedPayments,\n    SUM(CASE WHEN p.Status = 'Отменено' THEN p.Amount ELSE 0 END) AS CancelledPayments,\n    COUNT(DISTINCT r.ReturnID) AS TotalReturns,\n    SUM(r.Quantity * od.UnitPrice * (1 - od.Discount / 100)) AS ReturnedValue,\n    SUM(o.TotalAmount) - SUM(r.Quantity * od.UnitPrice * (1 - od.Discount / 100)) AS NetRevenue,\n    AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgOrderToDeliveryDays\nFROM \n    Clients c\nJOIN \n    Orders o ON c.ClientID = o.ClientID\nLEFT JOIN \n    Payments p ON o.OrderID = p.OrderID\nLEFT JOIN \n    `Returns` r ON o.OrderID = r.OrderID\nLEFT JOIN \n    OrderDetails od ON r.OrderID = od.OrderID AND r.ProductID = od.ProductID\nWHERE \n    c.RegistrationDate < '2023-01-01'\nGROUP BY \n    c.ClientID, c.Name, c.City, c.Country\nHAVING \n    COUNT(DISTINCT o.OrderID) > 3\nORDER BY \n    NetRevenue DESC\nLIMIT 8;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    c.ClientID,\n    c.Name AS ClientName,\n    c.City,\n    c.Country,\n    JULIANDAY(DATE('now')) - JULIANDAY(c.RegistrationDate) AS DaysAsClient,\n    COUNT(DISTINCT o.OrderID) AS TotalOrders,\n    SUM(o.TotalAmount) AS TotalOrderValue,\n    SUM(CASE WHEN p.Status = 'Завершено' THEN p.Amount ELSE 0 END) AS TotalPaymentsCompleted,\n    SUM(CASE WHEN p.Status = 'Отменено' THEN p.Amount ELSE 0 END) AS TotalPaymentsCancelled,\n    COUNT(DISTINCT r.ReturnID) AS TotalReturns,\n    SUM(r.Quantity * od.UnitPrice) AS TotalReturnedValue,\n    (SUM(o.TotalAmount) - SUM(CASE WHEN p.Status = 'Отменено' THEN p.Amount ELSE 0 END) - SUM(r.Quantity * od.UnitPrice)) AS NetRevenue,\n    AVG(JULIANDAY(s.DeliveryDate) - JULIANDAY(o.OrderDate)) AS AvgDeliveryTime\nFROM\n    Clients c\nJOIN\n    Orders o ON c.ClientID = o.ClientID\nLEFT JOIN\n    Payments p ON o.OrderID = p.OrderID\nLEFT JOIN\n    `Returns` r ON o.OrderID = r.OrderID\nLEFT JOIN\n    OrderDetails od ON r.ProductID = od.ProductID AND o.OrderID = od.OrderID\nLEFT JOIN\n    Shipments s ON o.OrderID = s.OrderID\nWHERE\n    c.RegistrationDate < '2023-01-01'\nGROUP BY\n    c.ClientID, c.Name, c.City, c.Country\nHAVING\n    COUNT(DISTINCT o.OrderID) > 3\nORDER BY\n    NetRevenue DESC\nLIMIT 8;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT \n    c.ClientID,\n    c.Name AS ClientName,\n    c.City,\n    c.Country,\n    DATEDIFF(CURDATE(), c.RegistrationDate) AS DaysAsClient,\n    COUNT(DISTINCT o.OrderID) AS TotalOrders,\n    SUM(o.TotalAmount) AS TotalOrderValue,\n    SUM(CASE WHEN p.Status = 'Завершено' THEN p.Amount ELSE 0 END) AS TotalPaymentsCompleted,\n    SUM(CASE WHEN p.Status = 'Отменено' THEN p.Amount ELSE 0 END) AS TotalPaymentsCancelled,\n    COUNT(DISTINCT r.ReturnID) AS TotalReturns,\n    SUM(r.Quantity * pr.UnitPrice) AS TotalReturnedValue,\n    (SUM(o.TotalAmount) - SUM(r.Quantity * pr.UnitPrice)) AS NetRevenue,\n    AVG(DATEDIFF(s.DeliveryDate, o.OrderDate)) AS AvgDeliveryTime\nFROM Clients c\nJOIN Orders o ON c.ClientID = o.ClientID\nLEFT JOIN Payments p ON o.OrderID = p.OrderID\nLEFT JOIN `Returns` r ON o.OrderID = r.OrderID\nLEFT JOIN Products pr ON r.ProductID = pr.ProductID\nLEFT JOIN Shipments s ON o.OrderID = s.OrderID\nWHERE c.RegistrationDate < '2023-01-01'\nGROUP BY c.ClientID, c.Name, c.City, c.Country\nHAVING COUNT(DISTINCT o.OrderID) > 3\nORDER BY NetRevenue DESC\nLIMIT 8;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    c.ClientID, \n    c.Name AS ClientName, \n    c.City, \n    c.Country, \n    DATEDIFF(COALESCE(MAX(o.ShippedDate), MAX(o.OrderDate)), c.RegistrationDate) AS DaysAsClient, \n    COUNT(DISTINCT o.OrderID) AS TotalOrders, \n    SUM(od.Quantity * od.UnitPrice * (1 - od.Discount/100)) AS TotalOrderValue, \n    SUM(CASE WHEN p.Status = 'Завершено' THEN p.Amount ELSE 0 END) AS ConfirmedPayments, \n    SUM(CASE WHEN p.Status = 'Отменено' THEN p.Amount ELSE 0 END) AS CancelledPayments, \n    COUNT(DISTINCT r.ReturnID) AS TotalReturns, \n    SUM(r.Quantity * (SELECT p.UnitPrice FROM Products p WHERE p.ProductID = r.ProductID)) AS ReturnedValue, \n    SUM(od.Quantity * od.UnitPrice * (1 - od.Discount/100)) - SUM(r.Quantity * (SELECT p.UnitPrice FROM Products p WHERE p.ProductID = r.ProductID)) AS NetRevenue, \n    AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgDeliveryTime\nFROM \n    Clients c \nJOIN \n    Orders o ON c.ClientID = o.ClientID \nJOIN \n    OrderDetails od ON o.OrderID = od.OrderID \nJOIN \n    Payments p ON o.OrderID = p.OrderID \nLEFT JOIN \n    Returns r ON o.OrderID = r.OrderID \nWHERE \n    c.RegistrationDate < '2023-01-01' \nGROUP BY \n    c.ClientID, c.Name, c.City, c.Country \nHAVING \n    COUNT(DISTINCT o.OrderID) > 3 \nORDER BY \n    NetRevenue DESC \nLIMIT 8;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    c.ClientID, \n    c.Name, \n    c.City, \n    c.Country, \n    DATEDIFF(COALESCE(MAX(o.OrderDate), '2022-01-01'), c.RegistrationDate) AS DaysAsClient,\n    COUNT(DISTINCT o.OrderID) AS TotalOrders,\n    SUM(od.Quantity * od.UnitPrice * (1 - od.Discount / 100)) AS TotalOrderValue,\n    SUM(CASE WHEN p.Status = 'Завершено' THEN p.Amount ELSE 0 END) AS ConfirmedPayments,\n    SUM(CASE WHEN p.Status = 'Отменено' THEN p.Amount ELSE 0 END) AS CancelledPayments,\n    COUNT(DISTINCT r.ReturnID) AS TotalReturns,\n    SUM(r.Quantity * (SELECT UnitPrice FROM Products WHERE ProductID = r.ProductID)) AS ReturnedValue,\n    SUM(od.Quantity * od.UnitPrice * (1 - od.Discount / 100)) - SUM(r.Quantity * (SELECT UnitPrice FROM Products WHERE ProductID = r.ProductID)) AS NetRevenue,\n    AVG(DATEDIFF(s.DeliveryDate, o.OrderDate)) AS AvgDeliveryTime\nFROM \n    Clients c\nLEFT JOIN \n    Orders o ON c.ClientID = o.ClientID\nLEFT JOIN \n    OrderDetails od ON o.OrderID = od.OrderID\nLEFT JOIN \n    Payments p ON o.OrderID = p.OrderID\nLEFT JOIN \n    Shipments s ON o.OrderID = s.OrderID\nLEFT JOIN \n    Deliveries d ON s.ShipmentID = d.ShipmentID\nLEFT JOIN \n    `Returns` r ON o.OrderID = r.OrderID\nWHERE \n    c.RegistrationDate < '2023-01-01'\n    AND c.ClientID IN (SELECT ClientID FROM Orders GROUP BY ClientID HAVING COUNT(OrderID) > 3)\nGROUP BY \n    c.ClientID, c.Name, c.City, c.Country\nORDER BY \n    NetRevenue DESC\nLIMIT 8;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    c.ClientID,\n    c.Name AS ClientName,\n    c.City,\n    c.Country,\n    DATEDIFF(CURRENT_DATE, c.RegistrationDate) AS DaysAsClient,\n    COUNT(DISTINCT o.OrderID) AS TotalOrders,\n    SUM(o.TotalAmount) AS TotalOrderValue,\n    SUM(CASE WHEN p.Status = 'Завершено' THEN p.Amount ELSE 0 END) AS CompletedPayments,\n    SUM(CASE WHEN p.Status = 'Отменено' THEN p.Amount ELSE 0 END) AS CancelledPayments,\n    COUNT(DISTINCT r.ReturnID) AS TotalReturns,\n    SUM(CASE WHEN r.Status = 'Возврат выполнен' THEN r.Quantity * od.UnitPrice ELSE 0 END) AS ReturnedProductsValue,\n    SUM(o.TotalAmount) - SUM(CASE WHEN r.Status = 'Возврат выполнен' THEN r.Quantity * od.UnitPrice ELSE 0 END) AS NetRevenue,\n    AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgDeliveryTimeDays\nFROM \n    Clients c\nJOIN \n    Orders o ON c.ClientID = o.ClientID\nLEFT JOIN \n    Payments p ON o.OrderID = p.OrderID\nLEFT JOIN \n    `Returns` r ON o.OrderID = r.OrderID\nLEFT JOIN \n    OrderDetails od ON o.OrderID = od.OrderID AND r.ProductID = od.ProductID\nWHERE \n    c.RegistrationDate < '2023-01-01'\nGROUP BY \n    c.ClientID, c.Name, c.City, c.Country, c.RegistrationDate\nHAVING \n    COUNT(DISTINCT o.OrderID) > 3\nORDER BY \n    NetRevenue DESC\nLIMIT 8;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    c.ClientID,\n    c.Name AS ClientName,\n    c.City,\n    c.Country,\n    DATEDIFF(CURRENT_DATE, c.RegistrationDate) AS DaysAsClient,\n    COUNT(DISTINCT o.OrderID) AS TotalOrders,\n    SUM(o.TotalAmount) AS TotalOrderAmount,\n    SUM(CASE WHEN p.Status = 'Завершено' THEN p.Amount ELSE 0 END) AS ConfirmedPayments,\n    SUM(CASE WHEN p.Status = 'Отменено' THEN p.Amount ELSE 0 END) AS CanceledPayments,\n    COUNT(DISTINCT r.ReturnID) AS TotalReturns,\n    SUM(r.Quantity * od.UnitPrice) AS ReturnedAmount,\n    SUM(o.TotalAmount) - SUM(r.Quantity * od.UnitPrice) AS NetRevenue,\n    AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgDeliveryTimeDays\nFROM \n    Clients c\nJOIN \n    Orders o ON c.ClientID = o.ClientID\nLEFT JOIN \n    Payments p ON o.OrderID = p.OrderID\nLEFT JOIN \n    `Returns` r ON o.OrderID = r.OrderID\nLEFT JOIN \n    OrderDetails od ON o.OrderID = od.OrderID AND r.ProductID = od.ProductID\nWHERE \n    c.RegistrationDate < '2023-01-01'\nGROUP BY \n    c.ClientID, c.Name, c.City, c.Country, c.RegistrationDate\nHAVING \n    COUNT(DISTINCT o.OrderID) > 3\nORDER BY \n    NetRevenue DESC\nLIMIT 8;",
            "gigachat_response": "WITH ClientMetrics AS (\n    SELECT \n        c.ClientID,\n        c.Name AS ClientName,\n        c.City,\n        c.Country,\n        TIMESTAMPDIFF(DAY, c.RegistrationDate, CURDATE()) AS DaysAsCustomer,\n        COUNT(o.OrderID) AS TotalOrders,\n        SUM(o.TotalAmount) AS TotalOrderValue,\n        COALESCE(SUM(CASE WHEN p.Status = 'Завершено' THEN p.Amount ELSE 0 END), 0) AS ConfirmedPayments,\n        COALESCE(SUM(CASE WHEN p.Status = 'Отменено' THEN p.Amount ELSE 0 END), 0) AS CancelledPayments,\n        COUNT(r.ReturnID) AS TotalReturns,\n        COALESCE(SUM(r.Quantity * od.UnitPrice), 0) AS ReturnedGoodsValue,\n        SUM(o.TotalAmount) - COALESCE(SUM(r.Quantity * od.UnitPrice), 0) AS NetRevenue,\n        AVG(DATEDIFF(s.DeliveryDate, o.OrderDate)) AS AverageDaysToDelivery\n    FROM \n        Clients c\n    LEFT JOIN \n        Orders o ON c.ClientID = o.ClientID\n    LEFT JOIN \n        Payments p ON o.OrderID = p.OrderID\n    LEFT JOIN \n        OrderDetails od ON o.OrderID = od.OrderID\n    LEFT JOIN \n        Returns r ON o.OrderID = r.OrderID AND od.ProductID = r.ProductID\n    LEFT JOIN \n        Shipments s ON o.OrderID = s.OrderID\n    WHERE \n        c.RegistrationDate < '2023-01-01'\n    GROUP BY \n        c.ClientID, c.Name, c.City, c.Country, c.RegistrationDate\n    HAVING \n        TotalOrders > 3\n)\nSELECT *\nFROM ClientMetrics\nORDER BY NetRevenue DESC\nLIMIT 8;",
            "gigachat_response_ru": "WITH ClientMetrics AS (\n    SELECT\n        c.ClientID,\n        c.Name AS ClientName,\n        c.City,\n        c.Country,\n        TIMESTAMPDIFF(DAY, c.RegistrationDate, CURDATE()) AS DaysAsCustomer,\n        COUNT(o.OrderID) AS TotalOrders,\n        SUM(o.TotalAmount) AS TotalOrderValue,\n        COALESCE(SUM(CASE WHEN p.Status = 'Завершено' THEN p.Amount ELSE 0 END), 0) AS ConfirmedPayments,\n        COALESCE(SUM(CASE WHEN p.Status = 'Отменено' THEN p.Amount ELSE 0 END), 0) AS CancelledPayments,\n        COUNT(r.ReturnID) AS TotalReturns,\n        COALESCE(SUM(r.Quantity * od.UnitPrice), 0) AS ReturnedGoodsCost,\n        SUM(o.TotalAmount) - COALESCE(SUM(r.Quantity * od.UnitPrice), 0) AS NetRevenue,\n        AVG(DATEDIFF(s.DeliveryDate, o.OrderDate)) AS AverageDaysToDelivery\n    FROM\n        Clients c\n    INNER JOIN\n        Orders o ON c.ClientID = o.ClientID\n    LEFT JOIN\n        Payments p ON o.OrderID = p.OrderID\n    LEFT JOIN\n        Returns r ON o.OrderID = r.OrderID AND r.ProductID = od.ProductID\n    LEFT JOIN\n        OrderDetails od ON o.OrderID = od.OrderID\n    LEFT JOIN\n        Shipments s ON o.OrderID = s.OrderID\n    WHERE\n        c.RegistrationDate < '2023-01-01'\n    GROUP BY\n        c.ClientID, c.Name, c.City, c.Country\n    HAVING\n        TotalOrders > 3\n)\nSELECT *\nFROM ClientMetrics\nORDER BY NetRevenue DESC\nLIMIT 8;"
        },
        {
            "question": "Какие топ-4 транспортные компании имеют наименьший средний срок задержки доставки за последние 6 месяцев при не менее 5 отправлениях, отсортированные по средней задержке в днях (восходящий порядок)?",
            "sql_query": "SELECT sh.ShipperID, sh.Name, COUNT(s.ShipmentID) AS TotalShipments, ROUND(AVG(DATEDIFF(s.DeliveryDate, s.ShipmentDate)),1) AS AvgDelayDays FROM Shippers sh JOIN Shipments s ON sh.ShipperID = s.ShipperID WHERE s.ShipmentDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH) GROUP BY sh.ShipperID, sh.Name HAVING COUNT(s.ShipmentID) >= 5 ORDER BY AvgDelayDays ASC LIMIT 4;",
            "gpt-4o_response": "SELECT \n    sh.Name AS ShipperName,\n    AVG(DATEDIFF(s.DeliveryDate, s.ShipmentDate)) AS AvgDelayDays\nFROM \n    Shipments s\nJOIN \n    Shippers sh ON s.ShipperID = sh.ShipperID\nWHERE \n    s.Status = 'Доставлено' \n    AND s.DeliveryDate > DATE_SUB(CURDATE(), INTERVAL 6 MONTH)\nGROUP BY \n    sh.ShipperID, sh.Name\nHAVING \n    COUNT(s.ShipmentID) >= 5\nORDER BY \n    AvgDelayDays ASC\nLIMIT 4;",
            "gpt-4o_response_ru": "SELECT \n    sh.Name AS ShipperName,\n    AVG(DATEDIFF(d.DeliveryDate, s.ShipmentDate)) AS AvgDelayDays\nFROM \n    Shippers sh\nJOIN \n    Shipments s ON sh.ShipperID = s.ShipperID\nJOIN \n    Deliveries d ON s.ShipmentID = d.ShipmentID\nWHERE \n    d.Status = 'Доставлено'\n    AND s.ShipmentDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH)\nGROUP BY \n    sh.ShipperID, sh.Name\nHAVING \n    COUNT(s.ShipmentID) >= 5\nORDER BY \n    AvgDelayDays ASC\nLIMIT 4;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    s.ShipperID,\n    s.Name AS ShipperName,\n    AVG(JULIANDAY(ship.DeliveryDate) - JULIANDAY(ship.ShipmentDate)) AS AverageDelayDays\nFROM\n    Shippers s\nJOIN\n    Shipments ship ON s.ShipperID = ship.ShipperID\nWHERE\n    ship.ShipmentDate >= DATE('now', '-6 months')\nGROUP BY\n    s.ShipperID, s.Name\nHAVING\n    COUNT(ship.ShipmentID) >= 5\nORDER BY\n    AverageDelayDays ASC\nLIMIT 4;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    s.ShipperID,\n    s.Name AS ShipperName,\n    AVG(JULIANDAY(ship.DeliveryDate) - JULIANDAY(ship.ShipmentDate)) AS AvgDelayDays\nFROM\n    Shippers s\nJOIN\n    Shipments ship ON s.ShipperID = ship.ShipperID\nWHERE\n    ship.ShipmentDate >= DATE('now', '-6 months')\nGROUP BY\n    s.ShipperID, s.Name\nHAVING\n    COUNT(ship.ShipmentID) >= 5\nORDER BY\n    AvgDelayDays ASC\nLIMIT 4;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    sh.Name, \n    COUNT(DISTINCT s.ShipmentID) AS TotalShipments, \n    AVG(DATEDIFF(s.DeliveryDate, s.ShipmentDate)) AS AvgDelayDays\nFROM \n    Shippers sh\nJOIN \n    Shipments s ON sh.ShipperID = s.ShipperID\nWHERE \n    s.ShipmentDate >= NOW() - INTERVAL 6 MONTH\nGROUP BY \n    sh.Name\nHAVING \n    COUNT(DISTINCT s.ShipmentID) >= 5\nORDER BY \n    AvgDelayDays ASC\nLIMIT 4;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    sh.Name, \n    AVG(DATEDIFF(d.DeliveryDate, s.ShipmentDate)) AS AvgDelayDays\nFROM \n    Shippers sh\nJOIN \n    Shipments s ON sh.ShipperID = s.ShipperID\nJOIN \n    Deliveries d ON s.ShipmentID = d.ShipmentID\nWHERE \n    s.ShipmentDate >= NOW() - INTERVAL 6 MONTH\nGROUP BY \n    sh.Name\nHAVING \n    COUNT(s.ShipmentID) >= 5\nORDER BY \n    AvgDelayDays ASC\nLIMIT 4;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT s.Name AS ShipperName, \n       AVG(DATEDIFF(s.DeliveryDate, s.ShipmentDate)) AS AvgDelayDays,\n       COUNT(*) AS TotalShipments\nFROM Shippers s\nJOIN Shipments sh ON s.ShipperID = sh.ShipperID\nJOIN Orders o ON sh.OrderID = o.OrderID\nWHERE sh.Status = 'Доставлено'\n  AND sh.ShipmentDate >= DATE_SUB(CURRENT_DATE(), INTERVAL 6 MONTH)\nGROUP BY s.Name\nHAVING COUNT(*) >= 5\nORDER BY AvgDelayDays ASC\nLIMIT 4;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    s.Name AS ShipperName,\n    AVG(DATEDIFF(s.DeliveryDate, s.ShipmentDate)) AS AvgDelayDays\nFROM \n    Shippers s\nJOIN \n    Shipments sh ON s.ShipperID = sh.ShipperID\nWHERE \n    sh.ShipmentDate >= DATE_SUB(CURRENT_DATE(), INTERVAL 6 MONTH)\n    AND sh.DeliveryDate IS NOT NULL\n    AND sh.Status = 'Доставлено'\nGROUP BY \n    s.Name\nHAVING \n    COUNT(sh.ShipmentID) >= 5\nORDER BY \n    AvgDelayDays ASC\nLIMIT 4;",
            "gigachat_response": "WITH DelayedDeliveries AS (\n    SELECT \n        s.ShipperID,\n        TIMESTAMPDIFF(DAY, sh.ShippedDate, sh.DeliveryDate) AS DelayDays\n    FROM Shipments sh\n    JOIN Orders o ON sh.OrderID = o.OrderID\n    JOIN Shippers s ON sh.ShipperID = s.ShipperID\n    WHERE sh.DeliveryDate >= NOW() - INTERVAL 6 MONTH AND sh.DeliveryDate IS NOT NULL AND sh.DeliveryDate > sh.ShippedDate\n), AverageDelays AS (\n    SELECT \n        ShipperID,\n        AVG(DelayDays) AS AverageDelay\n    FROM DelayedDeliveries\n    GROUP BY ShipperID\n    HAVING COUNT(*) >= 5\n)\nSELECT \n    s.Name AS ShipperName,\n    ad.AverageDelay\nFROM AverageDelays ad\nJOIN Shippers s ON ad.ShipperID = s.ShipperID\nORDER BY ad.AverageDelay ASC\nLIMIT 4;",
            "gigachat_response_ru": "SELECT \n    sh.Name AS ShipperName,\n    AVG(DATEDIFF(s.DeliveryDate, s.ShipmentDate)) AS AverageDelayInDays\nFROM \n    Shipments s\nJOIN \n    Shippers sh ON s.ShipperID = sh.ShipperID\nWHERE \n    s.ShipmentDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH)\nGROUP BY \n    sh.Name\nHAVING \n    COUNT(*) >= 5\nORDER BY \n    AverageDelayInDays ASC\nLIMIT 4;"
        },
        {
            "question": "Какие топ-6 продуктов имеют наивысший коэффициент оборачиваемости, вычисляемый как отношение проданных единиц за 2023 год к суммарному складскому запасу, при продаже не менее 100 единиц, отсортированные по коэффициенту оборачиваемости (убывающий порядок)?",
            "sql_query": "SELECT p.ProductID, p.Name, SUM(od.Quantity) AS SoldUnits, SUM(i.Quantity) AS StockUnits, ROUND(SUM(od.Quantity)/NULLIF(SUM(i.Quantity),0),2) AS TurnoverRatio FROM Products p JOIN OrderDetails od ON p.ProductID = od.ProductID JOIN Orders o ON od.OrderID = o.OrderID JOIN Inventory i ON p.ProductID = i.ProductID WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY p.ProductID, p.Name HAVING SUM(od.Quantity) >= 100 ORDER BY TurnoverRatio DESC LIMIT 6;",
            "gpt-4o_response": "SELECT \n    p.ProductID, \n    p.Name AS ProductName, \n    SUM(od.Quantity) AS TotalSoldUnits, \n    SUM(i.Quantity) AS TotalStock, \n    (SUM(od.Quantity) / SUM(i.Quantity)) AS TurnoverRatio\nFROM \n    Products p\nJOIN \n    OrderDetails od ON p.ProductID = od.ProductID\nJOIN \n    Orders o ON od.OrderID = o.OrderID\nJOIN \n    Inventory i ON p.ProductID = i.ProductID\nWHERE \n    o.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'\nGROUP BY \n    p.ProductID, p.Name\nHAVING \n    SUM(od.Quantity) >= 100\nORDER BY \n    TurnoverRatio DESC\nLIMIT 6;",
            "gpt-4o_response_ru": "SELECT \n    p.ProductID, \n    p.Name, \n    SUM(od.Quantity) / NULLIF(SUM(i.Quantity), 0) AS TurnoverRatio\nFROM \n    Products p\nJOIN \n    OrderDetails od ON p.ProductID = od.ProductID\nJOIN \n    Orders o ON od.OrderID = o.OrderID\nJOIN \n    Inventory i ON p.ProductID = i.ProductID\nWHERE \n    o.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'\nGROUP BY \n    p.ProductID, p.Name\nHAVING \n    SUM(od.Quantity) >= 100\nORDER BY \n    TurnoverRatio DESC\nLIMIT 6;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    p.ProductID,\n    p.Name AS ProductName,\n    SUM(CASE WHEN strftime('%Y', o.OrderDate) = '2023' THEN od.Quantity ELSE 0 END) AS TotalUnitsSold2023,\n    SUM(p.StockQuantity) AS TotalStockQuantity,\n    CAST(SUM(CASE WHEN strftime('%Y', o.OrderDate) = '2023' THEN od.Quantity ELSE 0 END) AS REAL) / SUM(p.StockQuantity) AS TurnoverRate\nFROM Products p\nJOIN OrderDetails od ON p.ProductID = od.ProductID\nJOIN Orders o ON od.OrderID = o.OrderID\nGROUP BY p.ProductID, p.Name\nHAVING SUM(CASE WHEN strftime('%Y', o.OrderDate) = '2023' THEN od.Quantity ELSE 0 END) >= 100\nORDER BY TurnoverRate DESC\nLIMIT 6;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    p.ProductID,\n    p.Name AS ProductName,\n    SUM(od.Quantity) AS TotalUnitsSold,\n    p.StockQuantity AS TotalStockQuantity,\n    (SUM(od.Quantity) * 1.0 / p.StockQuantity) AS TurnoverRate\nFROM Products p\nJOIN OrderDetails od ON p.ProductID = od.ProductID\nJOIN Orders o ON od.OrderID = o.OrderID\nWHERE STRFTIME('%Y', o.OrderDate) = '2023'\nGROUP BY p.ProductID, p.Name, p.StockQuantity\nHAVING SUM(od.Quantity) >= 100\nORDER BY TurnoverRate DESC\nLIMIT 6;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    p.ProductID, \n    p.Name, \n    SUM(od.Quantity) AS TotalQuantitySold, \n    SUM(i.Quantity) AS TotalInventory, \n    SUM(od.Quantity) / SUM(i.Quantity) AS TurnoverRate\nFROM \n    Products p\nJOIN \n    OrderDetails od ON p.ProductID = od.ProductID\nJOIN \n    Orders o ON od.OrderID = o.OrderID\nJOIN \n    Inventory i ON p.ProductID = i.ProductID\nWHERE \n    o.OrderDate >= '2023-01-01' AND o.OrderDate <= '2023-12-31'\nGROUP BY \n    p.ProductID, p.Name\nHAVING \n    SUM(od.Quantity) > 100\nORDER BY \n    TurnoverRate DESC\nLIMIT 6;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    p.ProductID, \n    p.Name, \n    SUM(od.Quantity) AS TotalQuantitySold, \n    SUM(i.Quantity) AS TotalInventory, \n    SUM(od.Quantity) / SUM(i.Quantity) AS TurnoverRate\nFROM \n    Products p\nJOIN \n    OrderDetails od ON p.ProductID = od.ProductID\nJOIN \n    Orders o ON od.OrderID = o.OrderID\nJOIN \n    Inventory i ON p.ProductID = i.ProductID\nWHERE \n    o.OrderDate >= '2023-01-01' AND o.OrderDate <= '2023-12-31'\n    AND SUM(od.Quantity) >= 100\nGROUP BY \n    p.ProductID, p.Name\nORDER BY \n    TurnoverRate DESC\nLIMIT 6;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    p.ProductID,\n    p.Name AS ProductName,\n    SUM(od.Quantity) AS TotalSold,\n    SUM(i.Quantity) AS TotalInventory,\n    SUM(od.Quantity) / SUM(i.Quantity) AS TurnoverRatio\nFROM \n    Products p\nJOIN \n    OrderDetails od ON p.ProductID = od.ProductID\nJOIN \n    Orders o ON od.OrderID = o.OrderID\nJOIN \n    Inventory i ON p.ProductID = i.ProductID\nWHERE \n    YEAR(o.OrderDate) = 2023\nGROUP BY \n    p.ProductID, p.Name\nHAVING \n    SUM(od.Quantity) >= 100\nORDER BY \n    TurnoverRatio DESC\nLIMIT 6;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    p.ProductID,\n    p.Name AS ProductName,\n    SUM(od.Quantity) AS TotalSold,\n    SUM(i.Quantity) AS TotalStock,\n    SUM(od.Quantity) / SUM(i.Quantity) AS TurnoverRatio\nFROM \n    Products p\nJOIN \n    OrderDetails od ON p.ProductID = od.ProductID\nJOIN \n    Orders o ON od.OrderID = o.OrderID\nJOIN \n    Inventory i ON p.ProductID = i.ProductID\nWHERE \n    YEAR(o.OrderDate) = 2023\nGROUP BY \n    p.ProductID, p.Name\nHAVING \n    SUM(od.Quantity) >= 100\nORDER BY \n    TurnoverRatio DESC\nLIMIT 6;",
            "gigachat_response": "WITH SoldUnits AS (\n    SELECT \n        od.ProductID,\n        SUM(od.Quantity) AS UnitsSold\n    FROM \n        OrderDetails od\n    JOIN \n        Orders o ON od.OrderID = o.OrderID\n    WHERE \n        YEAR(o.OrderDate) = 2023\n    GROUP BY \n        od.ProductID\n), \nTotalInventory AS (\n    SELECT \n        i.ProductID,\n        SUM(i.Quantity) AS TotalStock\n    FROM \n        Inventory i\n    GROUP BY \n        i.ProductID\n)\nSELECT \n    p.ProductID,\n    p.Name,\n    su.UnitsSold,\n    ti.TotalStock,\n    ROUND(su.UnitsSold / ti.TotalStock, 2) AS TurnoverRatio\nFROM \n    Products p\nJOIN \n    SoldUnits su ON p.ProductID = su.ProductID\nJOIN \n    TotalInventory ti ON p.ProductID = ti.ProductID\nWHERE \n    su.UnitsSold >= 100\nORDER BY \n    TurnoverRatio DESC\nLIMIT 6;",
            "gigachat_response_ru": "SELECT \n    p.ProductID,\n    p.Name,\n    SUM(od.Quantity) AS UnitsSoldIn2023,\n    inv.TotalStock,\n    ROUND(SUM(od.Quantity) / inv.TotalStock, 2) AS TurnoverRatio\nFROM \n    Products p\nJOIN \n    OrderDetails od ON p.ProductID = od.ProductID\nJOIN \n    Orders o ON od.OrderID = o.OrderID\nCROSS JOIN (\n    SELECT \n        ProductID, \n        SUM(Quantity) AS TotalStock \n    FROM \n        Inventory \n    GROUP BY \n        ProductID\n) inv ON p.ProductID = inv.ProductID\nWHERE \n    YEAR(o.OrderDate) = 2023 AND SUM(od.Quantity) >= 100\nGROUP BY \n    p.ProductID, p.Name, inv.TotalStock\nORDER BY \n    TurnoverRatio DESC\nLIMIT 6;"
        },
        {
            "question": "Какие топ-5 клиентов по проценту возвращенных товаров за последние 6 месяцев, включая общее количество заказанных единиц, количество возвращенных единиц и процент возвратов, отсортированные по проценту возвратов (убывающий порядок)?",
            "sql_query": "SELECT cl.ClientID, cl.Name, SUM(od.Quantity) AS OrderedUnits, SUM(ret.Quantity) AS ReturnedUnits, ROUND(SUM(ret.Quantity)/NULLIF(SUM(od.Quantity),0)*100,2) AS ReturnRate FROM Clients cl JOIN Orders o ON cl.ClientID = o.ClientID JOIN OrderDetails od ON o.OrderID = od.OrderID LEFT JOIN Returns ret ON o.OrderID = ret.OrderID AND ret.ReturnDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH) WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH) GROUP BY cl.ClientID, cl.Name HAVING SUM(od.Quantity) > 0 ORDER BY ReturnRate DESC LIMIT 5;",
            "gpt-4o_response": "SELECT \n    c.Name AS ClientName,\n    SUM(od.Quantity) AS TotalOrderedUnits,\n    SUM(r.Quantity) AS TotalReturnedUnits,\n    (SUM(r.Quantity) / SUM(od.Quantity)) * 100 AS ReturnPercentage\nFROM \n    Clients c\nJOIN \n    Orders o ON c.ClientID = o.ClientID\nJOIN \n    OrderDetails od ON o.OrderID = od.OrderID\nJOIN \n    Returns r ON o.OrderID = r.OrderID AND od.ProductID = r.ProductID\nWHERE \n    r.ReturnDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH)\nGROUP BY \n    c.ClientID, c.Name\nORDER BY \n    ReturnPercentage DESC\nLIMIT 5;",
            "gpt-4o_response_ru": "SELECT \n    c.Name AS ClientName,\n    SUM(od.Quantity) AS TotalOrderedUnits,\n    SUM(r.Quantity) AS TotalReturnedUnits,\n    (SUM(r.Quantity) / SUM(od.Quantity)) * 100 AS ReturnPercentage\nFROM \n    Clients c\nJOIN \n    Orders o ON c.ClientID = o.ClientID\nJOIN \n    OrderDetails od ON o.OrderID = od.OrderID\nJOIN \n    `Returns` r ON o.OrderID = r.OrderID AND od.ProductID = r.ProductID\nWHERE \n    r.ReturnDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH)\nGROUP BY \n    c.ClientID, c.Name\nORDER BY \n    ReturnPercentage DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    c.Name AS ClientName,\n    SUM(od.Quantity) AS TotalOrderedQuantity,\n    SUM(CASE WHEN r.ReturnID IS NOT NULL THEN r.Quantity ELSE 0 END) AS TotalReturnedQuantity,\n    CASE\n        WHEN SUM(od.Quantity) > 0 THEN (SUM(CASE WHEN r.ReturnID IS NOT NULL THEN r.Quantity ELSE 0 END) * 100.0 / SUM(od.Quantity))\n        ELSE 0\n    END AS ReturnPercentage\nFROM\n    Clients c\nJOIN\n    Orders o ON c.ClientID = o.ClientID\nJOIN\n    OrderDetails od ON o.OrderID = od.OrderID\nLEFT JOIN\n    `Returns` r ON o.OrderID = r.OrderID AND od.ProductID = r.ProductID\nWHERE\n    o.OrderDate >= DATE('now', '-6 months')\nGROUP BY\n    c.Name\nORDER BY\n    ReturnPercentage DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    c.ClientID,\n    c.Name AS ClientName,\n    SUM(od.Quantity) AS TotalOrderedQuantity,\n    SUM(r.Quantity) AS TotalReturnedQuantity,\n    (SUM(r.Quantity) * 1.0 / SUM(od.Quantity)) * 100 AS ReturnPercentage\nFROM\n    Clients c\nJOIN\n    Orders o ON c.ClientID = o.ClientID\nJOIN\n    OrderDetails od ON o.OrderID = od.OrderID\nLEFT JOIN\n    Returns r ON o.OrderID = r.OrderID AND od.ProductID = r.ProductID\nWHERE\n    r.ReturnDate >= DATE('now', '-6 months')\nGROUP BY\n    c.ClientID, c.Name\nHAVING\n    SUM(od.Quantity) > 0\nORDER BY\n    ReturnPercentage DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    c.Name, \n    SUM(od.Quantity) AS TotalOrderedUnits, \n    SUM(r.Quantity) AS TotalReturnedUnits, \n    (SUM(r.Quantity) / SUM(od.Quantity)) * 100 AS ReturnPercentage\nFROM \n    Clients c\nJOIN \n    Orders o ON c.ClientID = o.ClientID\nJOIN \n    OrderDetails od ON o.OrderID = od.OrderID\nLEFT JOIN \n    `Returns` r ON o.OrderID = r.OrderID AND od.ProductID = r.ProductID\nWHERE \n    o.OrderDate >= NOW() - INTERVAL 6 MONTH\nGROUP BY \n    c.Name\nORDER BY \n    ReturnPercentage DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    c.Name, \n    SUM(od.Quantity) AS TotalOrdered, \n    SUM(r.Quantity) AS TotalReturned, \n    (SUM(r.Quantity) / SUM(od.Quantity)) * 100 AS ReturnPercentage\nFROM \n    Clients c\nJOIN \n    Orders o ON c.ClientID = o.ClientID\nJOIN \n    OrderDetails od ON o.OrderID = od.OrderID\nJOIN \n    `Returns` r ON o.OrderID = r.OrderID AND od.ProductID = r.ProductID\nWHERE \n    r.ReturnDate >= NOW() - INTERVAL 6 MONTH\nGROUP BY \n    c.Name\nORDER BY \n    ReturnPercentage DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    c.ClientID,\n    c.Name AS ClientName,\n    SUM(od.Quantity) AS TotalOrdered,\n    SUM(r.Quantity) AS TotalReturned,\n    (SUM(r.Quantity) / SUM(od.Quantity)) * 100 AS ReturnPercentage\nFROM \n    Clients c\nJOIN \n    Orders o ON c.ClientID = o.ClientID\nJOIN \n    OrderDetails od ON o.OrderID = od.OrderID\nLEFT JOIN \n    `Returns` r ON o.OrderID = r.OrderID AND od.ProductID = r.ProductID\nWHERE \n    o.OrderDate >= DATE_SUB(CURRENT_DATE(), INTERVAL 6 MONTH)\nGROUP BY \n    c.ClientID, c.Name\nHAVING \n    TotalOrdered > 0\nORDER BY \n    ReturnPercentage DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    c.Name AS ClientName,\n    SUM(od.Quantity) AS TotalOrdered,\n    SUM(r.Quantity) AS TotalReturned,\n    (SUM(r.Quantity) / SUM(od.Quantity) * 100) AS ReturnPercentage\nFROM \n    Clients c\nJOIN \n    Orders o ON c.ClientID = o.ClientID\nJOIN \n    OrderDetails od ON o.OrderID = od.OrderID\nLEFT JOIN \n    `Returns` r ON o.OrderID = r.OrderID AND od.ProductID = r.ProductID\nWHERE \n    o.OrderDate >= DATE_SUB(CURRENT_DATE(), INTERVAL 6 MONTH)\nGROUP BY \n    c.Name\nHAVING \n    TotalOrdered > 0\nORDER BY \n    ReturnPercentage DESC\nLIMIT 5;",
            "gigachat_response": "WITH OrderedUnits AS (\n    SELECT \n        r.OrderID,\n        r.ProductID,\n        SUM(od.Quantity) AS OrderedQty\n    FROM \n        Orders o\n    INNER JOIN \n        OrderDetails od ON o.OrderID = od.OrderID\n    WHERE \n        o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH)\n    GROUP BY \n        r.OrderID, r.ProductID\n), ReturnedUnits AS (\n    SELECT \n        r.OrderID,\n        r.ProductID,\n        SUM(r.Quantity) AS ReturnedQty\n    FROM \n        `Returns` r\n    WHERE \n        r.ReturnDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH)\n    GROUP BY \n        r.OrderID, r.ProductID\n), ClientReturnRates AS (\n    SELECT \n        c.ClientID,\n        c.Name AS ClientName,\n        COALESCE(SUM(ReturnedUnits.ReturnedQty), 0) AS TotalReturnedUnits,\n        COALESCE(SUM(OrderedUnits.OrderedQty), 0) AS TotalOrderedUnits,\n        ROUND(COALESCE(SUM(ReturnedUnits.ReturnedQty), 0) / COALESCE(NULLIF(SUM(OrderedUnits.OrderedQty), 0), 1) * 100, 2) AS ReturnPercentage\n    FROM \n        Clients c\n    LEFT JOIN \n        Orders o ON c.ClientID = o.ClientID\n    LEFT JOIN \n        OrderedUnits ON o.OrderID = OrderedUnits.OrderID\n    LEFT JOIN \n        ReturnedUnits ON o.OrderID = ReturnedUnits.OrderID AND OrderedUnits.ProductID = ReturnedUnits.ProductID\n    WHERE \n        o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH)\n    GROUP BY \n        c.ClientID, c.Name\n)\nSELECT *\nFROM \n    ClientReturnRates\nWHERE \n    TotalOrderedUnits > 0\nORDER BY \n    ReturnPercentage DESC\nLIMIT 5;",
            "gigachat_response_ru": "SELECT \n    c.Name AS Клиент,\n    SUM(od.Quantity) AS Всего_заказано,\n    COALESCE(SUM(r.Quantity), 0) AS Возвращено,\n    ROUND(COALESCE(SUM(r.Quantity), 0) * 100.0 / SUM(od.Quantity), 2) AS Процент_возвратов\nFROM \n    Clients c\nLEFT JOIN \n    Orders o ON c.ClientID = o.ClientID\nLEFT JOIN \n    OrderDetails od ON o.OrderID = od.OrderID\nLEFT JOIN \n    `Returns` r ON o.OrderID = r.OrderID AND od.ProductID = r.ProductID\nWHERE \n    o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH)\nGROUP BY \n    c.Name\nHAVING \n    SUM(od.Quantity) > 0\nORDER BY \n    Процент_возвратов DESC\nLIMIT 5;"
        },
        {
            "question": "Какие топ-4 транспортные средства по коэффициенту использования за последний год, вычисляемому как количество доставок к количеству дней между первой и последней доставкой, при не менее 3 доставках, отсортированные по коэффициенту использования (убывающий порядок)?",
            "sql_query": "SELECT v.VehicleID, v.LicensePlate, v.Model, COUNT(d.DeliveryID) AS TotalDeliveries, DATEDIFF(MAX(d.DeliveryDate), MIN(d.DeliveryDate)) AS OperDays, ROUND(COUNT(d.DeliveryID)/NULLIF(DATEDIFF(MAX(d.DeliveryDate), MIN(d.DeliveryDate)),0),2) AS UtilizationRate FROM Vehicles v JOIN Deliveries d ON v.VehicleID = d.VehicleID WHERE d.DeliveryDate >= DATE_SUB(CURDATE(), INTERVAL 12 MONTH) GROUP BY v.VehicleID, v.LicensePlate, v.Model HAVING COUNT(d.DeliveryID) >= 3 ORDER BY UtilizationRate DESC LIMIT 4;",
            "gpt-4o_response": "SELECT \n    v.VehicleID, \n    v.LicensePlate, \n    v.Model, \n    COUNT(d.DeliveryID) AS TotalDeliveries, \n    DATEDIFF(MAX(d.DeliveryDate), MIN(d.DeliveryDate)) + 1 AS DaysActive, \n    COUNT(d.DeliveryID) / (DATEDIFF(MAX(d.DeliveryDate), MIN(d.DeliveryDate)) + 1) AS UtilizationRate\nFROM \n    Vehicles v\nJOIN \n    Deliveries d ON v.VehicleID = d.VehicleID\nWHERE \n    d.DeliveryDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 YEAR) AND CURDATE()\nGROUP BY \n    v.VehicleID, v.LicensePlate, v.Model\nHAVING \n    COUNT(d.DeliveryID) >= 3\nORDER BY \n    UtilizationRate DESC\nLIMIT 4;",
            "gpt-4o_response_ru": "SELECT \n    v.VehicleID, \n    v.LicensePlate, \n    v.Model, \n    COUNT(d.DeliveryID) AS TotalDeliveries, \n    DATEDIFF(MAX(d.DeliveryDate), MIN(d.DeliveryDate)) AS DaysBetweenFirstAndLastDelivery,\n    COUNT(d.DeliveryID) / DATEDIFF(MAX(d.DeliveryDate), MIN(d.DeliveryDate)) AS UtilizationRate\nFROM \n    Vehicles v\nJOIN \n    Deliveries d ON v.VehicleID = d.VehicleID\nWHERE \n    d.DeliveryDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)\nGROUP BY \n    v.VehicleID, v.LicensePlate, v.Model\nHAVING \n    COUNT(d.DeliveryID) >= 3\nORDER BY \n    UtilizationRate DESC\nLIMIT 4;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    v.VehicleID,\n    v.LicensePlate,\n    v.Model,\n    COUNT(d.DeliveryID) AS TotalDeliveries,\n    JULIANDAY(MAX(d.DeliveryDate)) - JULIANDAY(MIN(d.DeliveryDate)) AS DaysBetweenFirstAndLastDelivery,\n    CAST(COUNT(d.DeliveryID) AS REAL) / (JULIANDAY(MAX(d.DeliveryDate)) - JULIANDAY(MIN(d.DeliveryDate))) AS UtilizationRate\nFROM\n    Vehicles v\nJOIN\n    Deliveries d ON v.VehicleID = d.VehicleID\nWHERE\n    d.DeliveryDate BETWEEN DATE('now', '-1 year') AND DATE('now')\nGROUP BY\n    v.VehicleID, v.LicensePlate, v.Model\nHAVING\n    COUNT(d.DeliveryID) >= 3\nORDER BY\n    UtilizationRate DESC\nLIMIT 4;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    v.VehicleID,\n    v.LicensePlate,\n    COUNT(d.DeliveryID) AS TotalDeliveries,\n    JULIANDAY(MAX(d.DeliveryDate)) - JULIANDAY(MIN(d.DeliveryDate)) AS DaysBetween,\n    CAST(COUNT(d.DeliveryID) AS REAL) / (JULIANDAY(MAX(d.DeliveryDate)) - JULIANDAY(MIN(d.DeliveryDate))) AS UtilizationRate\nFROM\n    Vehicles v\nJOIN\n    Deliveries d ON v.VehicleID = d.VehicleID\nWHERE\n    d.DeliveryDate BETWEEN DATE('now', '-1 year') AND DATE('now')\nGROUP BY\n    v.VehicleID, v.LicensePlate\nHAVING\n    COUNT(d.DeliveryID) >= 3\nORDER BY\n    UtilizationRate DESC\nLIMIT 4;",
            "meta-llama/llama-3.3-70b-instruct_response": "```sql\nSELECT \n    v.VehicleID, \n    v.LicensePlate, \n    v.Model, \n    COUNT(d.DeliveryID) AS TotalDeliveries, \n    DATEDIFF(MAX(d.DeliveryDate), MIN(d.DeliveryDate)) + 1 AS TotalDays, \n    COUNT(d.DeliveryID) / (DATEDIFF(MAX(d.DeliveryDate), MIN(d.DeliveryDate)) + 1) AS UtilizationRate\nFROM \n    Vehicles v\nJOIN \n    Deliveries d ON v.VehicleID = d.VehicleID\nWHERE",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    v.VehicleID, \n    v.LicensePlate, \n    v.Model, \n    COUNT(d.DeliveryID) AS TotalDeliveries,\n    DATEDIFF(MAX(d.DeliveryDate), MIN(d.DeliveryDate)) + 1 AS TotalDays,\n    COUNT(d.DeliveryID) / (DATEDIFF(MAX(d.DeliveryDate), MIN(d.DeliveryDate)) + 1) AS UtilizationRate\nFROM \n    Vehicles v\nJOIN \n    Deliveries d ON v.VehicleID = d.VehicleID\nWHERE \n    d.DeliveryDate >= NOW() - INTERVAL 1 YEAR\nGROUP BY \n    v.VehicleID, v.LicensePlate, v.Model\nHAVING \n    COUNT(d.DeliveryID) >= 3\nORDER BY \n    UtilizationRate DESC\nLIMIT 4;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    v.VehicleID,\n    v.LicensePlate,\n    v.Model,\n    COUNT(d.DeliveryID) AS DeliveryCount,\n    DATEDIFF(MAX(d.DeliveryDate), MIN(d.DeliveryDate)) + 1 AS DaysActive,\n    COUNT(d.DeliveryID) / (DATEDIFF(MAX(d.DeliveryDate), MIN(d.DeliveryDate)) + 1) AS UtilizationRate\nFROM \n    Vehicles v\nJOIN \n    Deliveries d ON v.VehicleID = d.VehicleID\nWHERE \n    d.DeliveryDate >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)\nGROUP BY \n    v.VehicleID, v.LicensePlate, v.Model\nHAVING \n    COUNT(d.DeliveryID) >= 3\nORDER BY \n    UtilizationRate DESC\nLIMIT 4;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    v.VehicleID,\n    v.LicensePlate,\n    v.Model,\n    COUNT(d.DeliveryID) AS DeliveryCount,\n    DATEDIFF(MAX(d.DeliveryDate), MIN(d.DeliveryDate)) + 1 AS DaysActive,\n    COUNT(d.DeliveryID) / (DATEDIFF(MAX(d.DeliveryDate), MIN(d.DeliveryDate)) + 1) AS UtilizationRate\nFROM \n    Vehicles v\nJOIN \n    Deliveries d ON v.VehicleID = d.VehicleID\nWHERE \n    d.DeliveryDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\nGROUP BY \n    v.VehicleID, v.LicensePlate, v.Model\nHAVING \n    COUNT(d.DeliveryID) >= 3\nORDER BY \n    UtilizationRate DESC\nLIMIT 4;",
            "gigachat_response": "WITH DeliveryStats AS (\n    SELECT \n        v.VehicleID,\n        COUNT(*) AS NumDeliveries,\n        MIN(d.DeliveryDate) AS MinDeliveryDate,\n        MAX(d.DeliveryDate) AS MaxDeliveryDate\n    FROM Vehicles v\n    INNER JOIN Deliveries d ON v.VehicleID = d.VehicleID\n    WHERE d.DeliveryDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)\n    GROUP BY v.VehicleID\n    HAVING COUNT(*) >= 3\n), UsageCoefficient AS (\n    SELECT \n        ds.VehicleID,\n        ds.NumDeliveries,\n        TIMESTAMPDIFF(DAY, ds.MinDeliveryDate, ds.MaxDeliveryDate) + 1 AS DaysBetweenFirstAndLastDelivery,\n        ROUND(ds.NumDeliveries / (TIMESTAMPDIFF(DAY, ds.MinDeliveryDate, ds.MaxDeliveryDate) + 1), 2) AS UsageCoefficient\n    FROM DeliveryStats ds\n)\nSELECT \n    vc.LicensePlate,\n    vc.Model,\n    uc.UsageCoefficient\nFROM UsageCoefficient uc\nINNER JOIN Vehicles vc ON uc.VehicleID = vc.VehicleID\nORDER BY uc.UsageCoefficient DESC\nLIMIT 4;",
            "gigachat_response_ru": "SELECT v.VehicleID, v.Model, \n       COUNT(d.DeliveryID) AS NumberOfDeliveries,\n       TIMESTAMPDIFF(DAY, MIN(d.DeliveryDate), MAX(d.DeliveryDate)) + 1 AS DaysBetweenFirstAndLastDelivery,\n       COUNT(d.DeliveryID) / (TIMESTAMPDIFF(DAY, MIN(d.DeliveryDate), MAX(d.DeliveryDate)) + 1) AS UtilizationCoefficient\nFROM Vehicles v\nJOIN Deliveries d ON v.VehicleID = d.VehicleID\nWHERE d.DeliveryDate >= CURDATE() - INTERVAL 1 YEAR\nGROUP BY v.VehicleID, v.Model\nHAVING COUNT(d.DeliveryID) >= 3\nORDER BY UtilizationCoefficient DESC\nLIMIT 4;"
        },
        {
            "question": "Какие топ-7 маршрутов со статусом 'Активен' или 'Завершен' имеют наибольшую среднюю скорость доставки (км/ч), вычисленную как расстояние, деленное на оценочное время в часах, отсортированные по средней скорости (убывающий порядок)?",
            "sql_query": "SELECT r.RouteID, r.StartLocation, r.EndLocation, r.Distance, ROUND(r.Distance/(TIME_TO_SEC(r.EstimatedTime)/3600),2) AS AvgSpeed FROM Routes r WHERE r.Status IN ('Активен', 'Завершен') GROUP BY r.RouteID, r.StartLocation, r.EndLocation, r.Distance, r.EstimatedTime ORDER BY AvgSpeed DESC LIMIT 7;",
            "gpt-4o_response": "SELECT r.RouteID, r.StartLocation, r.EndLocation, r.Distance, r.EstimatedTime, \n       (r.Distance / (HOUR(r.EstimatedTime) + MINUTE(r.EstimatedTime) / 60.0)) AS AvgSpeed\nFROM Routes r\nWHERE r.Status IN ('Активен', 'Завершен')\nORDER BY AvgSpeed DESC\nLIMIT 7;",
            "gpt-4o_response_ru": "SELECT \n    r.RouteID, \n    r.StartLocation, \n    r.EndLocation, \n    r.Distance, \n    r.EstimatedTime, \n    (r.Distance / (HOUR(r.EstimatedTime) + MINUTE(r.EstimatedTime) / 60.0)) AS AverageSpeed\nFROM \n    Routes r\nWHERE \n    r.Status IN ('Активен', 'Завершен')\nORDER BY \n    AverageSpeed DESC\nLIMIT 7;",
            "google/gemini-2.0-flash-001_response": "SELECT \n    RouteID,\n    StartLocation,\n    EndLocation,\n    Distance,\n    EstimatedTime,\n    Status,\n    Distance / (CAST(SUBSTR(EstimatedTime, 1, 2) AS DECIMAL(10, 2)) + CAST(SUBSTR(EstimatedTime, 4, 2) AS DECIMAL(10, 2)) / 60) AS AverageSpeedKmh\nFROM Routes\nWHERE Status IN ('Активен', 'Завершен')\nORDER BY AverageSpeedKmh DESC\nLIMIT 7;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    r.RouteID,\n    r.StartLocation,\n    r.EndLocation,\n    r.Distance,\n    r.EstimatedTime,\n    r.Status,\n    (r.Distance / (TIME_TO_SEC(r.EstimatedTime) / 3600)) AS AverageSpeedKmh\nFROM\n    Routes r\nWHERE\n    r.Status IN ('Активен', 'Завершен')\nORDER BY\n    AverageSpeedKmh DESC\nLIMIT 7;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    r.RouteID, \n    r.StartLocation, \n    r.EndLocation, \n    r.Distance, \n    r.EstimatedTime, \n    r.Status, \n    (r.Distance / (TIME_TO_SEC(r.EstimatedTime) / 3600)) AS AverageSpeed\nFROM \n    Routes r\nWHERE \n    r.Status IN ('Активен', 'Завершен')\nORDER BY \n    AverageSpeed DESC\nLIMIT 7;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    r.RouteID, \n    r.StartLocation, \n    r.EndLocation, \n    r.Distance, \n    TIME_TO_SEC(r.EstimatedTime) / 3600 AS EstimatedTimeInHours, \n    r.Status, \n    r.Distance / (TIME_TO_SEC(r.EstimatedTime) / 3600) AS AverageSpeed\nFROM \n    Routes r\nWHERE \n    r.Status IN ('Активен', 'Завершен')\nORDER BY \n    AverageSpeed DESC\nLIMIT 7;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    r.RouteID,\n    r.StartLocation,\n    r.EndLocation,\n    r.Distance,\n    r.EstimatedTime,\n    r.Status,\n    r.Distance / (TIME_TO_SEC(r.EstimatedTime) / 3600) AS AvgSpeedKmh\nFROM \n    Routes r\nWHERE \n    r.Status IN ('Активен', 'Завершен')\nORDER BY \n    AvgSpeedKmh DESC\nLIMIT 7;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    r.RouteID,\n    r.StartLocation,\n    r.EndLocation,\n    r.Distance,\n    r.EstimatedTime,\n    r.Status,\n    r.Distance / (TIME_TO_SEC(r.EstimatedTime) / 3600) AS AvgSpeedKmh\nFROM \n    Routes r\nWHERE \n    r.Status IN ('Активен', 'Завершен')\nORDER BY \n    AvgSpeedKmh DESC\nLIMIT 7;",
            "gigachat_response": "SELECT r.RouteID, r.StartLocation, r.EndLocation, r.Distance, r.EstimatedTime, \n       ROUND(r.Distance / TIME_TO_SEC(TIME_FORMAT(r.EstimatedTime,'%H:%i:%s')) * 3600, 2) AS AverageSpeedKMPerHour\nFROM Routes r\nWHERE r.Status IN ('Активен', 'Завершен')\nORDER BY AverageSpeedKMPerHour DESC\nLIMIT 7;",
            "gigachat_response_ru": "SELECT r.RouteID, r.StartLocation, r.EndLocation, r.Distance, r.EstimatedTime, \n       ROUND(r.Distance / TIME_TO_SEC(TIME_FORMAT(r.EstimatedTime,'%H:%i:%s')) * 3600, 2) AS AverageSpeedKMPerHour\nFROM Routes r\nWHERE r.Status IN ('Активен', 'Завершен')\nORDER BY AverageSpeedKMPerHour DESC\nLIMIT 7;"
        },
        {
            "question": "Какие топ-5 категорий товаров имеют наивысший уровень возвратов за последние 3 месяца, включая общее количество проданных единиц, вернувшихся единиц и процент возвратов (убывающий порядок)?",
            "sql_query": "SELECT p.Category, SUM(od.Quantity) AS SoldUnits, SUM(ret.Quantity) AS ReturnedUnits, ROUND(SUM(ret.Quantity)/NULLIF(SUM(od.Quantity),0)*100,2) AS ReturnRate FROM Products p JOIN OrderDetails od ON p.ProductID = od.ProductID JOIN Orders o ON od.OrderID = o.OrderID LEFT JOIN Returns ret ON o.OrderID = ret.OrderID AND ret.ReturnDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) GROUP BY p.Category HAVING SUM(od.Quantity) > 0 ORDER BY ReturnRate DESC LIMIT 5;",
            "gpt-4o_response": "SELECT \n    p.Category,\n    SUM(od.Quantity) AS TotalSoldUnits,\n    SUM(r.Quantity) AS ReturnedUnits,\n    (SUM(r.Quantity) / SUM(od.Quantity) * 100) AS ReturnPercentage\nFROM \n    Returns r\nJOIN \n    OrderDetails od ON r.OrderID = od.OrderID AND r.ProductID = od.ProductID\nJOIN \n    Products p ON r.ProductID = p.ProductID\nWHERE \n    r.ReturnDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH)\nGROUP BY \n    p.Category\nORDER BY \n    ReturnPercentage DESC\nLIMIT 5;",
            "gpt-4o_response_ru": "SELECT \n    p.Category,\n    SUM(od.Quantity) AS TotalSoldUnits,\n    SUM(r.Quantity) AS TotalReturnedUnits,\n    (SUM(r.Quantity) / SUM(od.Quantity) * 100) AS ReturnPercentage\nFROM \n    Returns r\nJOIN \n    OrderDetails od ON r.OrderID = od.OrderID AND r.ProductID = od.ProductID\nJOIN \n    Products p ON r.ProductID = p.ProductID\nWHERE \n    r.ReturnDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH)\nGROUP BY \n    p.Category\nORDER BY \n    ReturnPercentage DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    p.Category,\n    SUM(od.Quantity) AS TotalUnitsSold,\n    SUM(r.Quantity) AS TotalUnitsReturned,\n    (SUM(r.Quantity) * 1.0 / SUM(od.Quantity)) * 100 AS ReturnPercentage\nFROM\n    `Returns` r\nJOIN\n    Orders o ON r.OrderID = o.OrderID\nJOIN\n    OrderDetails od ON r.OrderID = od.OrderID AND r.ProductID = od.ProductID\nJOIN\n    Products p ON r.ProductID = p.ProductID\nWHERE\n    r.ReturnDate >= DATE('now', '-3 months')\nGROUP BY\n    p.Category\nORDER BY\n    ReturnPercentage DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    p.Category,\n    SUM(od.Quantity) AS TotalUnitsSold,\n    SUM(r.Quantity) AS TotalUnitsReturned,\n    CASE\n        WHEN SUM(od.Quantity) > 0 THEN (SUM(r.Quantity) * 100.0 / SUM(od.Quantity))\n        ELSE 0\n    END AS ReturnPercentage\nFROM\n    `Returns` r\nJOIN\n    Orders o ON r.OrderID = o.OrderID\nJOIN\n    OrderDetails od ON r.OrderID = od.OrderID AND r.ProductID = od.ProductID\nJOIN\n    Products p ON r.ProductID = p.ProductID\nWHERE\n    r.ReturnDate >= DATE('now', '-3 months')\nGROUP BY\n    p.Category\nORDER BY\n    ReturnPercentage DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    p.Category, \n    SUM(od.Quantity) AS TotalQuantitySold, \n    SUM(r.Quantity) AS TotalQuantityReturned, \n    (SUM(r.Quantity) / SUM(od.Quantity)) * 100 AS ReturnRate\nFROM \n    Products p\nJOIN \n    OrderDetails od ON p.ProductID = od.ProductID\nJOIN \n    Orders o ON od.OrderID = o.OrderID\nJOIN \n    `Returns` r ON o.OrderID = r.OrderID AND p.ProductID = r.ProductID\nWHERE \n    r.ReturnDate >= NOW() - INTERVAL 3 MONTH\nGROUP BY \n    p.Category\nORDER BY \n    ReturnRate DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    p.Category, \n    SUM(od.Quantity) AS TotalQuantitySold, \n    SUM(r.Quantity) AS TotalQuantityReturned, \n    (SUM(r.Quantity) / SUM(od.Quantity)) * 100 AS ReturnRate\nFROM \n    Products p\nJOIN \n    OrderDetails od ON p.ProductID = od.ProductID\nJOIN \n    Orders o ON od.OrderID = o.OrderID\nJOIN \n    `Returns` r ON o.OrderID = r.OrderID AND p.ProductID = r.ProductID\nWHERE \n    r.ReturnDate >= NOW() - INTERVAL 3 MONTH\nGROUP BY \n    p.Category\nORDER BY \n    ReturnRate DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    p.Category,\n    SUM(od.Quantity) AS TotalSold,\n    SUM(r.Quantity) AS TotalReturned,\n    ROUND(SUM(r.Quantity) * 100.0 / SUM(od.Quantity), 2) AS ReturnPercentage\nFROM \n    Products p\nJOIN \n    OrderDetails od ON p.ProductID = od.ProductID\nJOIN \n    Orders o ON od.OrderID = o.OrderID\nLEFT JOIN \n    `Returns` r ON od.OrderID = r.OrderID AND od.ProductID = r.ProductID AND r.ReturnDate >= DATE_SUB(CURRENT_DATE(), INTERVAL 3 MONTH)\nWHERE \n    o.OrderDate >= DATE_SUB(CURRENT_DATE(), INTERVAL 3 MONTH)\nGROUP BY \n    p.Category\nHAVING \n    TotalSold > 0\nORDER BY \n    ReturnPercentage DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    p.Category,\n    SUM(od.Quantity) AS TotalSold,\n    SUM(r.Quantity) AS TotalReturned,\n    (SUM(r.Quantity) / SUM(od.Quantity)) * 100 AS ReturnPercentage\nFROM \n    Products p\nJOIN \n    OrderDetails od ON p.ProductID = od.ProductID\nJOIN \n    Orders o ON od.OrderID = o.OrderID\nJOIN \n    `Returns` r ON o.OrderID = r.OrderID AND p.ProductID = r.ProductID\nWHERE \n    r.ReturnDate >= DATE_SUB(CURRENT_DATE(), INTERVAL 3 MONTH)\nGROUP BY \n    p.Category\nORDER BY \n    ReturnPercentage DESC\nLIMIT 5;",
            "gigachat_response": "WITH ReturnedUnits AS (\n    SELECT r.Category, SUM(r.ReturnedQty) AS TotalReturnedQty\n    FROM (\n        SELECT p.Category, SUM(r.Quantity) AS ReturnedQty\n        FROM `Returns` r\n        JOIN Products p ON r.ProductID = p.ProductID\n        WHERE r.ReturnDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH)\n        GROUP BY p.Category\n    ) r\n), SoldUnits AS (\n    SELECT p.Category, SUM(od.Quantity) AS TotalSoldQty\n    FROM OrderDetails od\n    JOIN Products p ON od.ProductID = p.ProductID\n    JOIN Orders o ON od.OrderID = o.OrderID\n    WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH)\n    GROUP BY p.Category\n)\nSELECT ru.Category, su.TotalSoldQty, ru.TotalReturnedQty, ROUND((ru.TotalReturnedQty / su.TotalSoldQty) * 100, 2) AS ReturnPercentage\nFROM ReturnedUnits ru\nJOIN SoldUnits su ON ru.Category = su.Category\nORDER BY ReturnPercentage DESC\nLIMIT 5;",
            "gigachat_response_ru": "SELECT \n    p.Category,\n    SUM(od.Quantity) AS UnitsSold,\n    SUM(r.Quantity) AS UnitsReturned,\n    ROUND(SUM(r.Quantity)/SUM(od.Quantity)*100, 2) AS ReturnPercentage\nFROM \n    Products p\nJOIN \n    OrderDetails od ON p.ProductID = od.ProductID\nLEFT JOIN \n    `Returns` r ON p.ProductID = r.ProductID AND r.ReturnDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH)\nGROUP BY \n    p.Category\nORDER BY \n    ReturnPercentage DESC\nLIMIT 5;"
        },
        {
            "question": "Какие топ-6 городов клиентов имеют наибольшую среднюю сумму заказа и среднее время доставки (в днях) за последние 12 месяцев при не менее 4 доставленных заказах, отсортированные по средней сумме заказа (убывающий порядок)?",
            "sql_query": "SELECT cl.City, COUNT(o.OrderID) AS DeliveredOrders, ROUND(AVG(o.TotalAmount),2) AS AvgOrderAmount, ROUND(AVG(DATEDIFF(s.DeliveryDate, s.ShipmentDate)),1) AS AvgDeliveryDays FROM Clients cl JOIN Orders o ON cl.ClientID = o.ClientID JOIN Shipments s ON o.OrderID = s.OrderID WHERE o.Status = 'Доставлено' AND s.DeliveryDate >= DATE_SUB(CURDATE(), INTERVAL 12 MONTH) GROUP BY cl.City HAVING COUNT(o.OrderID) >= 4 ORDER BY AvgOrderAmount DESC LIMIT 6;",
            "gpt-4o_response": "SELECT c.City, \n       AVG(o.TotalAmount) AS AvgOrderAmount, \n       AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgDeliveryTimeDays\nFROM Clients c\nJOIN Orders o ON c.ClientID = o.ClientID\nJOIN Shipments s ON o.OrderID = s.OrderID\nWHERE o.Status = 'Доставлено'\n  AND o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 12 MONTH)\nGROUP BY c.City\nHAVING COUNT(o.OrderID) >= 4\nORDER BY AvgOrderAmount DESC\nLIMIT 6;",
            "gpt-4o_response_ru": "SELECT \n    c.City,\n    AVG(o.TotalAmount) AS AvgOrderAmount,\n    AVG(DATEDIFF(s.DeliveryDate, o.ShippedDate)) AS AvgDeliveryTimeDays\nFROM \n    Clients c\nJOIN \n    Orders o ON c.ClientID = o.ClientID\nJOIN \n    Shipments s ON o.OrderID = s.OrderID\nWHERE \n    o.Status = 'Доставлено' \n    AND s.Status = 'Доставлено'\n    AND o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 12 MONTH)\nGROUP BY \n    c.City\nHAVING \n    COUNT(o.OrderID) >= 4\nORDER BY \n    AvgOrderAmount DESC\nLIMIT 6;",
            "google/gemini-2.0-flash-001_response": "SELECT \n    c.City,\n    AVG(o.TotalAmount) AS AverageOrderAmount,\n    AVG(JULIANDAY(s.DeliveryDate) - JULIANDAY(s.ShipmentDate)) AS AverageDeliveryTimeInDays\nFROM Clients c\nJOIN Orders o ON c.ClientID = o.ClientID\nJOIN Shipments s ON o.OrderID = s.OrderID\nWHERE s.Status = 'Доставлено'\n  AND o.OrderDate >= DATE('now', '-12 months')\nGROUP BY c.City\nHAVING COUNT(o.OrderID) >= 4\nORDER BY AverageOrderAmount DESC\nLIMIT 6;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT \n    c.City,\n    AVG(o.TotalAmount) AS AvgOrderAmount,\n    AVG(JULIANDAY(s.DeliveryDate) - JULIANDAY(s.ShipmentDate)) AS AvgDeliveryTimeDays\nFROM Clients c\nJOIN Orders o ON c.ClientID = o.ClientID\nJOIN Shipments s ON o.OrderID = s.OrderID\nWHERE s.Status = 'Доставлено'\n  AND s.ShipmentDate >= date('now', '-12 months')\nGROUP BY c.City\nHAVING COUNT(DISTINCT o.OrderID) >= 4\nORDER BY AvgOrderAmount DESC\nLIMIT 6;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    c.City, \n    AVG(o.TotalAmount) AS AvgOrderAmount, \n    AVG(DATEDIFF(s.DeliveryDate, s.ShipmentDate)) AS AvgDeliveryTime\nFROM \n    Clients c\nJOIN \n    Orders o ON c.ClientID = o.ClientID\nJOIN \n    Shipments s ON o.OrderID = s.OrderID\nWHERE \n    s.DeliveryDate IS NOT NULL \n    AND s.ShipmentDate >= NOW() - INTERVAL 1 YEAR\nGROUP BY \n    c.City\nHAVING \n    COUNT(DISTINCT o.OrderID) >= 4\nORDER BY \n    AvgOrderAmount DESC\nLIMIT 6;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    c.City, \n    AVG(o.TotalAmount) AS AvgOrderAmount, \n    AVG(DATEDIFF(COALESCE(o.ShippedDate, CURDATE()), o.OrderDate)) AS AvgDeliveryTime\nFROM \n    Clients c\nJOIN \n    Orders o ON c.ClientID = o.ClientID\nWHERE \n    o.OrderDate >= NOW() - INTERVAL 1 YEAR\n    AND o.Status = 'Доставлено'\nGROUP BY \n    c.City\nHAVING \n    COUNT(o.OrderID) >= 4\nORDER BY \n    AvgOrderAmount DESC\nLIMIT 6;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    c.City,\n    AVG(o.TotalAmount) AS AvgOrderAmount,\n    AVG(DATEDIFF(s.DeliveryDate, s.ShipmentDate)) AS AvgDeliveryDays\nFROM \n    Clients c\nJOIN \n    Orders o ON c.ClientID = o.ClientID\nJOIN \n    Shipments s ON o.OrderID = s.OrderID\nWHERE \n    o.Status = 'Доставлено'\n    AND s.Status = 'Доставлено'\n    AND o.OrderDate >= DATE_SUB(CURRENT_DATE(), INTERVAL 12 MONTH)\nGROUP BY \n    c.City\nHAVING \n    COUNT(o.OrderID) >= 4\nORDER BY \n    AvgOrderAmount DESC\nLIMIT 6;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    c.City,\n    AVG(o.TotalAmount) AS AvgOrderAmount,\n    AVG(DATEDIFF(s.DeliveryDate, s.ShipmentDate)) AS AvgDeliveryDays\nFROM \n    Clients c\nJOIN \n    Orders o ON c.ClientID = o.ClientID\nJOIN \n    Shipments s ON o.OrderID = s.OrderID\nWHERE \n    o.Status = 'Доставлено'\n    AND o.OrderDate >= DATE_SUB(CURRENT_DATE(), INTERVAL 12 MONTH)\nGROUP BY \n    c.City\nHAVING \n    COUNT(o.OrderID) >= 4\nORDER BY \n    AvgOrderAmount DESC\nLIMIT 6;",
            "gigachat_response": "WITH OrderStats AS (\n    SELECT \n        c.City,\n        AVG(o.TotalAmount) AS AverageOrderValue,\n        AVG(DATEDIFF(s.DeliveryDate, o.OrderDate)) AS AverageDeliveryDays,\n        COUNT(*) AS NumDeliveredOrders\n    FROM \n        Orders o\n    INNER JOIN \n        Clients c ON o.ClientID = c.ClientID\n    INNER JOIN \n        Shipments s ON o.OrderID = s.OrderID\n    WHERE \n        o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 12 MONTH) AND \n        s.Status = 'Доставлено'\n    GROUP BY \n        c.City\n    HAVING \n        NumDeliveredOrders >= 4\n)\nSELECT *\nFROM OrderStats\nORDER BY AverageOrderValue DESC\nLIMIT 6;",
            "gigachat_response_ru": "SELECT \n    c.City,\n    AVG(o.TotalAmount) AS AverageOrderAmount,\n    AVG(DATEDIFF(s.DeliveryDate, o.OrderDate)) AS AverageDeliveryDays\nFROM \n    Clients c\nJOIN \n    Orders o ON c.ClientID = o.ClientID\nJOIN \n    Shipments s ON o.OrderID = s.OrderID\nWHERE \n    o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 12 MONTH)\n    AND s.Status = 'Доставлено'\nGROUP BY \n    c.City\nHAVING \n    COUNT(*) >= 4\nORDER BY \n    AverageOrderAmount DESC\nLIMIT 6;"
        }
    ]
}