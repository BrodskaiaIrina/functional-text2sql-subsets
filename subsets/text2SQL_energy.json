{
    "queries": [
        {
            "question": "Найти топ-5 компаний-владельцев электростанций, у которых средняя стоимость обслуживания превышает среднюю по отрасли за последний год, и показать для каждой компании количество инцидентов высокой и критической важности, а также общую сумму затрат на обслуживание.",
            "sql_query": "WITH CompanyMaintenance AS (\n    SELECT \n        oc.CompanyID,\n        oc.Name AS CompanyName,\n        AVG(m.Cost) AS AvgMaintenanceCost,\n        SUM(m.Cost) AS TotalMaintenanceCost\n    FROM OwnerCompany oc\n    JOIN PowerPlant p ON oc.CompanyID = p.OwnerCompanyID\n    JOIN Maintenance m ON p.PlantID = m.PlantID\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY oc.CompanyID, oc.Name\n),\nIndustryAverage AS (\n    SELECT AVG(AvgMaintenanceCost) AS IndustryAvgCost\n    FROM CompanyMaintenance\n),\nCompanyIncidents AS (\n    SELECT \n        oc.CompanyID,\n        COUNT(CASE WHEN i.Severity IN ('Высокая', 'Критическая') THEN 1 END) AS CriticalIncidentsCount\n    FROM OwnerCompany oc\n    JOIN PowerPlant p ON oc.CompanyID = p.OwnerCompanyID\n    JOIN Incident i ON p.PlantID = i.PlantID\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY oc.CompanyID\n)\nSELECT \n    cm.CompanyName,\n    ROUND(cm.AvgMaintenanceCost, 2) AS AvgMaintenanceCost,\n    ROUND(cm.TotalMaintenanceCost, 2) AS TotalMaintenanceCost,\n    ci.CriticalIncidentsCount,\n    ROUND((cm.AvgMaintenanceCost - ia.IndustryAvgCost) / ia.IndustryAvgCost * 100, 2) AS CostDeviationPercent\nFROM CompanyMaintenance cm\nCROSS JOIN IndustryAverage ia\nJOIN CompanyIncidents ci ON cm.CompanyID = ci.CompanyID\nWHERE cm.AvgMaintenanceCost > ia.IndustryAvgCost\nORDER BY CostDeviationPercent DESC\nLIMIT 5;"
        },
        {
            "question": "Найти топ-7 потребителей с наибольшим среднемесячным потреблением энергии за последний год, у которых есть действующие контракты с поставщиками, и показать для каждого потребителя информацию о типе тарифа, стоимости контракта и количестве установленных счетчиков.",
            "sql_query": "WITH ConsumerContracts AS (\n    SELECT \n        c.ConsumerID,\n        c.Name AS ConsumerName,\n        c.Type AS ConsumerType,\n        c.AverageMonthlyConsumption,\n        COUNT(DISTINCT m.MeterID) AS MetersCount,\n        AVG(ct.PricePerUnit) AS AvgContractPrice,\n        MAX(t.Name) AS TariffName\n    FROM Consumer c\n    JOIN `Contract` ct ON c.ConsumerID = ct.ConsumerID\n    JOIN Meter m ON c.ConsumerID = m.ConsumerID\n    JOIN Tariff t ON t.ConsumerType = c.Type\n    WHERE ct.Status = 'active'\n    GROUP BY c.ConsumerID, c.Name, c.Type, c.AverageMonthlyConsumption\n)\nSELECT \n    cc.ConsumerName,\n    cc.ConsumerType,\n    ROUND(cc.AverageMonthlyConsumption, 2) AS MonthlyConsumption,\n    cc.MetersCount,\n    ROUND(cc.AvgContractPrice, 2) AS AvgPricePerUnit,\n    cc.TariffName,\n    ROUND(cc.AverageMonthlyConsumption * cc.AvgContractPrice, 2) AS EstimatedMonthlyCost\nFROM ConsumerContracts cc\nORDER BY cc.AverageMonthlyConsumption DESC\nLIMIT 7;"
        },
        {
            "question": "Найти топ-6 поставщиков энергоресурсов с наивысшим рейтингом за последний год, которые работают с возобновляемыми источниками энергии, и показать для каждого поставщика информацию о среднем объеме поставок, стоимости единицы ресурса и количестве действующих контрактов.",
            "sql_query": "WITH RenewableSuppliers AS (\n    SELECT \n        s.SupplierID,\n        s.Name AS SupplierName,\n        s.Rating,\n        es.Name AS EnergySourceName,\n        es.Renewable,\n        AVG(s.AnnualSupplyVolume) AS AvgAnnualSupply,\n        AVG(es.CostPerUnit) AS AvgCostPerUnit\n    FROM Supplier s\n    JOIN EnergySource es ON s.SourceID = es.SourceID\n    WHERE es.Renewable = TRUE\n    GROUP BY s.SupplierID, s.Name, s.Rating, es.Name, es.Renewable\n),\nActiveContracts AS (\n    SELECT \n        SupplierID,\n        COUNT(*) AS ActiveContractsCount\n    FROM `Contract`\n    WHERE Status = 'active'\n    GROUP BY SupplierID\n)\nSELECT \n    rs.SupplierName,\n    rs.EnergySourceName,\n    rs.Rating,\n    ROUND(rs.AvgAnnualSupply, 2) AS AvgAnnualSupply,\n    ROUND(rs.AvgCostPerUnit, 2) AS AvgCostPerUnit,\n    ac.ActiveContractsCount,\n    ROUND(rs.AvgAnnualSupply * rs.AvgCostPerUnit, 2) AS EstimatedAnnualRevenue\nFROM RenewableSuppliers rs\nJOIN ActiveContracts ac ON rs.SupplierID = ac.SupplierID\nORDER BY rs.Rating DESC, EstimatedAnnualRevenue DESC\nLIMIT 6;"
        },
        {
            "question": "Найти топ-5 электростанций с наибольшим количеством инцидентов и нарушений нормативов выбросов за последний год, и показать для каждой станции информацию о последнем аудите, стоимости последнего обслуживания и статусе соответствия экологическим нормам.",
            "sql_query": "WITH PlantIncidents AS (\n    SELECT \n        p.PlantID,\n        p.Name AS PlantName,\n        COUNT(i.IncidentID) AS IncidentsCount,\n        MAX(i.Date) AS LastIncidentDate\n    FROM PowerPlant p\n    JOIN Incident i ON p.PlantID = i.PlantID\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY p.PlantID, p.Name\n),\nPlantEmissions AS (\n    SELECT \n        p.PlantID,\n        COUNT(CASE WHEN e.ComplianceStatus = 'Не соответствует' THEN 1 END) AS NonComplianceCount\n    FROM PowerPlant p\n    JOIN Emission e ON p.PlantID = e.PlantID\n    WHERE e.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY p.PlantID\n),\nPlantAudits AS (\n    SELECT \n        p.PlantID,\n        a.Auditor,\n        a.ComplianceStatus,\n        a.FollowUpDate,\n        ROW_NUMBER() OVER (PARTITION BY p.PlantID ORDER BY a.Date DESC) AS rn\n    FROM PowerPlant p\n    JOIN `Audit` a ON p.PlantID = a.PlantID\n),\nPlantMaintenance AS (\n    SELECT \n        p.PlantID,\n        m.Cost AS LastMaintenanceCost,\n        m.Date AS LastMaintenanceDate,\n        ROW_NUMBER() OVER (PARTITION BY p.PlantID ORDER BY m.Date DESC) AS rn\n    FROM PowerPlant p\n    JOIN Maintenance m ON p.PlantID = m.PlantID\n)\nSELECT \n    pi.PlantName,\n    pi.IncidentsCount,\n    pe.NonComplianceCount,\n    pa.Auditor AS LastAuditor,\n    pa.ComplianceStatus AS AuditStatus,\n    pa.FollowUpDate,\n    ROUND(pm.LastMaintenanceCost, 2) AS LastMaintenanceCost,\n    pm.LastMaintenanceDate\nFROM PlantIncidents pi\nJOIN PlantEmissions pe ON pi.PlantID = pe.PlantID\nJOIN PlantAudits pa ON pi.PlantID = pa.PlantID AND pa.rn = 1\nJOIN PlantMaintenance pm ON pi.PlantID = pm.PlantID AND pm.rn = 1\nORDER BY (pi.IncidentsCount + pe.NonComplianceCount) DESC\nLIMIT 5;"
        },
        {
            "question": "Найти топ-10 подстанций с наибольшим количеством подключенных линий электропередачи и высокой нагрузкой за последний год, которые обслуживают промышленных потребителей, и показать для каждой подстанции информацию о типе потребителей, среднем потреблении и стоимости обслуживания.",
            "sql_query": "WITH SubstationLoad AS (\n    SELECT \n        s.SubstationID,\n        s.Name AS SubstationName,\n        s.CapacityMW,\n        COUNT(DISTINCT tl.LineID) AS ConnectedLinesCount,\n        SUM(tl.CapacityMW) AS TotalLineCapacity\n    FROM Substation s\n    JOIN TransmissionLine tl ON s.SubstationID = tl.LineID\n    GROUP BY s.SubstationID, s.Name, s.CapacityMW\n),\nIndustrialConsumers AS (\n    SELECT \n        c.ConsumerID,\n        c.Name AS ConsumerName,\n        c.Type AS ConsumerType,\n        c.AverageMonthlyConsumption,\n        COUNT(DISTINCT m.MeterID) AS MetersCount\n    FROM Consumer c\n    JOIN Meter m ON c.ConsumerID = m.ConsumerID\n    WHERE c.Type = 'Промышленность'\n    GROUP BY c.ConsumerID, c.Name, c.Type, c.AverageMonthlyConsumption\n),\nSubstationMaintenance AS (\n    SELECT \n        s.SubstationID,\n        AVG(m.Cost) AS AvgMaintenanceCost,\n        COUNT(m.MaintenanceID) AS MaintenanceCount\n    FROM Substation s\n    JOIN Maintenance m ON 1=1\n    GROUP BY s.SubstationID\n)\nSELECT \n    sl.SubstationName,\n    sl.CapacityMW,\n    sl.ConnectedLinesCount,\n    ROUND(sl.TotalLineCapacity, 2) AS TotalLineCapacity,\n    COUNT(DISTINCT ic.ConsumerID) AS IndustrialConsumersCount,\n    ROUND(AVG(ic.AverageMonthlyConsumption), 2) AS AvgConsumerConsumption,\n    ROUND(sm.AvgMaintenanceCost, 2) AS AvgMaintenanceCost,\n    sm.MaintenanceCount\nFROM SubstationLoad sl\nCROSS JOIN IndustrialConsumers ic\nJOIN SubstationMaintenance sm ON sl.SubstationID = sm.SubstationID\nGROUP BY sl.SubstationID, sl.SubstationName, sl.CapacityMW, sl.ConnectedLinesCount, sl.TotalLineCapacity, sm.AvgMaintenanceCost, sm.MaintenanceCount\nORDER BY sl.ConnectedLinesCount DESC, sl.CapacityMW DESC\nLIMIT 10;"
        },
        {
            "question": "Найти топ-11 электростанций с наибольшим количеством нарушений экологических норм и высоким уровнем выбросов за последние 6 месяцев, которые требуют срочного обслуживания, и показать для каждой станции информацию о последних инцидентах, стоимости ремонтов и рекомендациях аудиторов.",
            "sql_query": "WITH ProblematicPlants AS (\n    SELECT \n        p.PlantID,\n        p.Name AS PlantName,\n        p.Type AS PlantType,\n        COUNT(CASE WHEN e.ComplianceStatus = 'Не соответствует' THEN 1 END) AS ViolationsCount,\n        AVG(e.CO2Emissions) AS AvgEmissions,\n        MAX(e.Date) AS LastEmissionDate\n    FROM PowerPlant p\n    JOIN Emission e ON p.PlantID = e.PlantID\n    WHERE e.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH)\n    GROUP BY p.PlantID, p.Name, p.Type\n    HAVING COUNT(CASE WHEN e.ComplianceStatus = 'Не соответствует' THEN 1 END) > 1\n),\nRecentIncidents AS (\n    SELECT \n        p.PlantID,\n        COUNT(i.IncidentID) AS IncidentsCount,\n        MAX(i.Date) AS LastIncidentDate,\n        MAX(i.Severity) AS LastIncidentSeverity\n    FROM PowerPlant p\n    JOIN Incident i ON p.PlantID = i.PlantID\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    GROUP BY p.PlantID\n),\nMaintenanceCosts AS (\n    SELECT \n        p.PlantID,\n        SUM(m.Cost) AS TotalMaintenanceCost,\n        MAX(m.Date) AS LastMaintenanceDate,\n        COUNT(m.MaintenanceID) AS MaintenanceCount\n    FROM PowerPlant p\n    JOIN Maintenance m ON p.PlantID = m.PlantID\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY p.PlantID\n),\nLatestAudit AS (\n    SELECT \n        p.PlantID,\n        a.Auditor,\n        a.Recommendations,\n        a.ComplianceStatus,\n        ROW_NUMBER() OVER (PARTITION BY p.PlantID ORDER BY a.Date DESC) AS rn\n    FROM PowerPlant p\n    JOIN `Audit` a ON p.PlantID = a.PlantID\n)\nSELECT \n    pp.PlantName,\n    pp.PlantType,\n    pp.ViolationsCount,\n    ROUND(pp.AvgEmissions, 2) AS AvgEmissions,\n    ri.IncidentsCount,\n    ri.LastIncidentSeverity,\n    ROUND(mc.TotalMaintenanceCost, 2) AS TotalMaintenanceCost,\n    mc.MaintenanceCount,\n    la.Recommendations AS LatestAuditRecommendations,\n    la.ComplianceStatus AS LatestAuditStatus\nFROM ProblematicPlants pp\nJOIN RecentIncidents ri ON pp.PlantID = ri.PlantID\nJOIN MaintenanceCosts mc ON pp.PlantID = mc.PlantID\nJOIN LatestAudit la ON pp.PlantID = la.PlantID AND la.rn = 1\nORDER BY pp.ViolationsCount DESC, pp.AvgEmissions DESC\nLIMIT 11;"
        },
        {
            "question": "Найти топ-12 потребителей с нестабильным потреблением энергии и высокими затратами за последний год, которые используют несколько типов счетчиков, и показать для каждого потребителя информацию о паттернах потребления, стоимости контрактов и рекомендациях по оптимизации.",
            "sql_query": "WITH ConsumerPatterns AS (\n    SELECT \n        c.ConsumerID,\n        c.Name AS ConsumerName,\n        c.Type AS ConsumerType,\n        c.ConsumptionPattern,\n        c.AverageMonthlyConsumption,\n        COUNT(DISTINCT m.Type) AS MeterTypesCount,\n        MAX(m.LastReadingDate) AS LastReadingDate,\n        AVG(m.LastReading) AS AvgReading\n    FROM Consumer c\n    JOIN Meter m ON c.ConsumerID = m.ConsumerID\n    WHERE m.LastReadingDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY c.ConsumerID, c.Name, c.Type, c.ConsumptionPattern, c.AverageMonthlyConsumption\n),\nContractAnalysis AS (\n    SELECT \n        c.ConsumerID,\n        AVG(ct.PricePerUnit) AS AvgPricePerUnit,\n        SUM(ct.Volume) AS TotalContractVolume,\n        COUNT(DISTINCT ct.ContractID) AS ActiveContractsCount\n    FROM Consumer c\n    JOIN `Contract` ct ON c.ConsumerID = ct.ConsumerID\n    WHERE ct.Status = 'active'\n    GROUP BY c.ConsumerID\n),\nConsumptionVariability AS (\n    SELECT \n        c.ConsumerID,\n        STDDEV(m.LastReading) AS ConsumptionStdDev,\n        MAX(m.LastReading) - MIN(m.LastReading) AS ConsumptionRange\n    FROM Consumer c\n    JOIN Meter m ON c.ConsumerID = m.ConsumerID\n    WHERE m.LastReadingDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY c.ConsumerID\n)\nSELECT \n    cp.ConsumerName,\n    cp.ConsumerType,\n    cp.ConsumptionPattern,\n    ROUND(cp.AverageMonthlyConsumption, 2) AS AvgMonthlyConsumption,\n    cp.MeterTypesCount,\n    ROUND(ca.AvgPricePerUnit, 2) AS AvgPricePerUnit,\n    ROUND(ca.TotalContractVolume, 2) AS TotalContractVolume,\n    ca.ActiveContractsCount,\n    ROUND(cv.ConsumptionStdDev, 2) AS ConsumptionVariability,\n    ROUND(cv.ConsumptionRange, 2) AS ConsumptionRange,\n    CASE \n        WHEN cv.ConsumptionStdDev > cp.AverageMonthlyConsumption * 0.3 THEN 'Высокая нестабильность потребления'\n        WHEN cv.ConsumptionStdDev > cp.AverageMonthlyConsumption * 0.15 THEN 'Средняя нестабильность потребления'\n        ELSE 'Низкая нестабильность потребления'\n    END AS ConsumptionStability\nFROM ConsumerPatterns cp\nJOIN ContractAnalysis ca ON cp.ConsumerID = ca.ConsumerID\nJOIN ConsumptionVariability cv ON cp.ConsumerID = cv.ConsumerID\nORDER BY cv.ConsumptionStdDev DESC, cp.AverageMonthlyConsumption DESC\nLIMIT 12;"
        },
        {
            "question": "Найти топ-46 компаний-владельцев электростанций с наиболее сложной экологической историей за последний год, анализируя выбросы, инциденты, аудиторские проверки и потенциальные экологические риски, с оценкой стратегий устойчивого развития.",
            "sql_query": "WITH CompanyEmissionAnalysis AS (\n    SELECT \n        oc.CompanyID,\n        oc.Name AS CompanyName,\n        COUNT(DISTINCT e.EmissionID) AS EmissionReportsCount,\n        AVG(e.CO2Emissions) AS AvgCO2Emissions,\n        COUNT(CASE WHEN e.ComplianceStatus = 'Не соответствует' THEN 1 END) AS NonComplianceCount\n    FROM OwnerCompany oc\n    JOIN PowerPlant p ON oc.CompanyID = p.OwnerCompanyID\n    JOIN Emission e ON p.PlantID = e.PlantID\n    WHERE e.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY oc.CompanyID, oc.Name\n),\nCompanyIncidentAnalysis AS (\n    SELECT \n        oc.CompanyID,\n        COUNT(DISTINCT i.IncidentID) AS TotalIncidentsCount,\n        COUNT(CASE WHEN i.Severity = 'Критическая' THEN 1 END) AS CriticalIncidentsCount,\n        MAX(i.Date) AS LastIncidentDate\n    FROM OwnerCompany oc\n    JOIN PowerPlant p ON oc.CompanyID = p.OwnerCompanyID\n    JOIN Incident i ON p.PlantID = i.PlantID\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY oc.CompanyID\n),\nCompanyAuditAnalysis AS (\n    SELECT \n        oc.CompanyID,\n        COUNT(DISTINCT a.AuditID) AS AuditCount,\n        COUNT(CASE WHEN a.ComplianceStatus = 'Не соблюдено' THEN 1 END) AS NonComplianceAudits,\n        MAX(a.Date) AS LastAuditDate\n    FROM OwnerCompany oc\n    JOIN PowerPlant p ON oc.CompanyID = p.OwnerCompanyID\n    JOIN `Audit` a ON p.PlantID = a.PlantID\n    WHERE a.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY oc.CompanyID\n)\nSELECT \n    cea.CompanyName,\n    ROUND(cea.AvgCO2Emissions, 2) AS AvgCO2Emissions,\n    cea.EmissionReportsCount,\n    cea.NonComplianceCount,\n    cia.TotalIncidentsCount,\n    cia.CriticalIncidentsCount,\n    caa.AuditCount,\n    caa.NonComplianceAudits,\n    CASE \n        WHEN cea.NonComplianceCount > 3 OR cia.CriticalIncidentsCount > 2 THEN 'Критический экологический риск'\n        WHEN cea.NonComplianceCount > 1 OR cia.CriticalIncidentsCount > 0 THEN 'Высокий экологический риск'\n        ELSE 'Средний экологический риск'\n    END AS EnvironmentalRiskLevel\nFROM CompanyEmissionAnalysis cea\nJOIN CompanyIncidentAnalysis cia ON cea.CompanyID = cia.CompanyID\nJOIN CompanyAuditAnalysis caa ON cea.CompanyID = caa.CompanyID\nORDER BY cea.NonComplianceCount DESC, cia.CriticalIncidentsCount DESC\nLIMIT 46;"
        },
        {
            "question": "Найти топ-47 электростанций с наиболее сложной системой технического обслуживания за последний год, анализируя затраты, длительность ремонтов, влияние на производительность и стратегические возможности модернизации.",
            "sql_query": "WITH PlantMaintenanceAnalysis AS (\n    SELECT \n        p.PlantID,\n        p.Name AS PlantName,\n        p.Type AS PlantType,\n        COUNT(m.MaintenanceID) AS MaintenanceCount,\n        SUM(m.Cost) AS TotalMaintenanceCost,\n        AVG(m.Cost) AS AvgMaintenanceCost,\n        AVG(m.DurationHours) AS AvgMaintenanceDuration,\n        MAX(m.Date) AS LastMaintenanceDate\n    FROM PowerPlant p\n    JOIN Maintenance m ON p.PlantID = m.PlantID\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY p.PlantID, p.Name, p.Type\n),\nPlantPerformanceImpact AS (\n    SELECT \n        p.PlantID,\n        COUNT(DISTINCT i.IncidentID) AS MaintenanceRelatedIncidents,\n        AVG(i.DurationHours) AS AvgIncidentDuration\n    FROM PowerPlant p\n    JOIN Maintenance m ON p.PlantID = m.PlantID\n    JOIN Incident i ON p.PlantID = i.PlantID\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    AND i.Date >= m.Date\n    GROUP BY p.PlantID\n),\nPlantAuditRecommendations AS (\n    SELECT \n        p.PlantID,\n        GROUP_CONCAT(DISTINCT a.Recommendations) AS MaintenanceRecommendations,\n        MAX(a.Date) AS LastAuditDate\n    FROM PowerPlant p\n    JOIN `Audit` a ON p.PlantID = a.PlantID\n    WHERE a.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY p.PlantID\n)\nSELECT \n    pma.PlantName,\n    pma.PlantType,\n    pma.MaintenanceCount,\n    ROUND(pma.TotalMaintenanceCost, 2) AS TotalMaintenanceCost,\n    ROUND(pma.AvgMaintenanceCost, 2) AS AvgMaintenanceCost,\n    ROUND(pma.AvgMaintenanceDuration, 2) AS AvgMaintenanceDuration,\n    ppi.MaintenanceRelatedIncidents,\n    ROUND(ppi.AvgIncidentDuration, 2) AS AvgIncidentDuration,\n    pra.MaintenanceRecommendations,\n    CASE \n        WHEN pma.MaintenanceCount > 10 OR ppi.MaintenanceRelatedIncidents > 5 THEN 'Высокая сложность обслуживания'\n        WHEN pma.MaintenanceCount > 5 OR ppi.MaintenanceRelatedIncidents > 2 THEN 'Средняя сложность обслуживания'\n        ELSE 'Низкая сложность обслуживания'\n    END AS MaintenanceComplexity\nFROM PlantMaintenanceAnalysis pma\nJOIN PlantPerformanceImpact ppi ON pma.PlantID = ppi.PlantID\nJOIN PlantAuditRecommendations pra ON pma.PlantID = pra.PlantID\nORDER BY pma.TotalMaintenanceCost DESC, ppi.MaintenanceRelatedIncidents DESC\nLIMIT 47;"
        },
        {
            "question": "Найти топ-48 потребителей с наиболее сложными финансово-энергетическими профилями за последний год, анализируя паттерны потребления, тарифные планы, контракты и потенциал для оптимизации энергозатрат.",
            "sql_query": "WITH ConsumerConsumptionAnalysis AS (\n    SELECT \n        c.ConsumerID,\n        c.Name AS ConsumerName,\n        c.Type AS ConsumerType,\n        c.ConsumptionPattern,\n        COUNT(DISTINCT m.MeterID) AS TotalMetersCount,\n        COUNT(DISTINCT m.Type) AS MeterTypesCount,\n        AVG(m.LastReading) AS AvgConsumption,\n        STDDEV(m.LastReading) AS ConsumptionVariability\n    FROM Consumer c\n    JOIN Meter m ON c.ConsumerID = m.ConsumerID\n    WHERE m.LastReadingDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY c.ConsumerID, c.Name, c.Type, c.ConsumptionPattern\n),\nConsumerContractAnalysis AS (\n    SELECT \n        c.ConsumerID,\n        COUNT(DISTINCT ct.ContractID) AS ActiveContractsCount,\n        SUM(ct.Volume) AS TotalContractVolume,\n        AVG(ct.PricePerUnit) AS AvgPricePerUnit,\n        GROUP_CONCAT(DISTINCT t.Name) AS TariffNames\n    FROM Consumer c\n    JOIN `Contract` ct ON c.ConsumerID = ct.ConsumerID\n    JOIN Tariff t ON t.ConsumerType = c.Type\n    WHERE ct.Status = 'active'\n    GROUP BY c.ConsumerID\n),\nConsumerFinancialImpact AS (\n    SELECT \n        c.ConsumerID,\n        SUM(ct.Volume * ct.PricePerUnit) AS EstimatedAnnualCost,\n        AVG(t.PricePerUnit) AS AvgTariffPrice\n    FROM Consumer c\n    JOIN `Contract` ct ON c.ConsumerID = ct.ConsumerID\n    JOIN Tariff t ON t.ConsumerType = c.Type\n    WHERE ct.Status = 'active'\n    GROUP BY c.ConsumerID\n)\nSELECT \n    cca.ConsumerName,\n    cca.ConsumerType,\n    cca.ConsumptionPattern,\n    cca.TotalMetersCount,\n    cca.MeterTypesCount,\n    ROUND(cca.AvgConsumption, 2) AS AvgConsumption,\n    ROUND(cca.ConsumptionVariability, 2) AS ConsumptionVariability,\n    cct.TariffNames,\n    cct.ActiveContractsCount,\n    ROUND(cct.TotalContractVolume, 2) AS TotalContractVolume,\n    ROUND(cfi.EstimatedAnnualCost, 2) AS EstimatedAnnualCost,\n    ROUND(cfi.AvgTariffPrice, 2) AS AvgTariffPrice,\n    CASE \n        WHEN cca.ConsumptionVariability > cca.AvgConsumption * 0.5 THEN 'Критическая финансовая нестабильность'\n        WHEN cca.ConsumptionVariability > cca.AvgConsumption * 0.3 THEN 'Высокая финансовая нестабильность'\n        WHEN cca.ConsumptionVariability > cca.AvgConsumption * 0.2 THEN 'Средняя финансовая нестабильность'\n        ELSE 'Низкая финансовая нестабильность'\n    END AS FinancialStability\nFROM ConsumerConsumptionAnalysis cca\nJOIN ConsumerContractAnalysis cct ON cca.ConsumerID = cct.ConsumerID\nJOIN ConsumerFinancialImpact cfi ON cca.ConsumerID = cfi.ConsumerID\nORDER BY cca.ConsumptionVariability DESC, cfi.EstimatedAnnualCost DESC\nLIMIT 48;"
        },
        {
            "question": "Найти топ-49 линий электропередачи с наиболее сложной системой управления за последние 3 месяца, анализируя инциденты, нагрузку, обслуживание и подключенные подстанции, с оценкой потенциальных рисков и эффективности инфраструктуры.",
            "sql_query": "WITH TransmissionLineIncidentAnalysis AS (\n    SELECT \n        tl.LineID,\n        tl.Name AS LineName,\n        tl.VoltageLevel,\n        tl.LengthKM,\n        tl.CapacityMW,\n        COUNT(i.IncidentID) AS TotalIncidentsCount,\n        COUNT(CASE WHEN i.Severity = 'Критическая' THEN 1 END) AS CriticalIncidentsCount,\n        AVG(i.DurationHours) AS AvgIncidentDuration,\n        MAX(i.Date) AS LastIncidentDate\n    FROM TransmissionLine tl\n    JOIN Incident i ON 1=1\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    GROUP BY tl.LineID, tl.Name, tl.VoltageLevel, tl.LengthKM, tl.CapacityMW\n),\nTransmissionLineMaintenanceAnalysis AS (\n    SELECT \n        tl.LineID,\n        SUM(m.Cost) AS TotalMaintenanceCost,\n        COUNT(m.MaintenanceID) AS MaintenanceCount,\n        AVG(m.DurationHours) AS AvgMaintenanceDuration\n    FROM TransmissionLine tl\n    JOIN Maintenance m ON 1=1\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY tl.LineID\n),\nTransmissionLineConnectionAnalysis AS (\n    SELECT \n        tl.LineID,\n        COUNT(DISTINCT s.SubstationID) AS ConnectedSubstationsCount,\n        SUM(s.CapacityMW) AS TotalSubstationCapacity,\n        COUNT(DISTINCT c.ConsumerID) AS IndustrialConsumersCount,\n        SUM(c.AverageMonthlyConsumption) AS TotalIndustrialConsumption\n    FROM TransmissionLine tl\n    JOIN Substation s ON tl.LineID = s.SubstationID\n    JOIN Consumer c ON 1=1\n    WHERE c.Type = 'Промышленность'\n    GROUP BY tl.LineID\n)\nSELECT \n    tli.LineName,\n    tli.VoltageLevel,\n    ROUND(tli.LengthKM, 2) AS LengthKM,\n    ROUND(tli.CapacityMW, 2) AS CapacityMW,\n    tli.TotalIncidentsCount,\n    tli.CriticalIncidentsCount,\n    ROUND(tli.AvgIncidentDuration, 2) AS AvgIncidentDuration,\n    tlma.TotalMaintenanceCost,\n    tlma.MaintenanceCount,\n    ROUND(tlma.AvgMaintenanceDuration, 2) AS AvgMaintenanceDuration,\n    tlca.ConnectedSubstationsCount,\n    ROUND(tlca.TotalSubstationCapacity, 2) AS TotalSubstationCapacity,\n    tlca.IndustrialConsumersCount,\n    ROUND(tlca.TotalIndustrialConsumption, 2) AS TotalIndustrialConsumption,\n    CASE \n        WHEN tli.CriticalIncidentsCount > 3 THEN 'Критический уровень сложности управления'\n        WHEN tli.CriticalIncidentsCount > 1 THEN 'Высокий уровень сложности управления'\n        ELSE 'Средний уровень сложности управления'\n    END AS ManagementComplexityLevel\nFROM TransmissionLineIncidentAnalysis tli\nJOIN TransmissionLineMaintenanceAnalysis tlma ON tli.LineID = tlma.LineID\nJOIN TransmissionLineConnectionAnalysis tlca ON tli.LineID = tlca.LineID\nORDER BY tli.CriticalIncidentsCount DESC, tlma.TotalMaintenanceCost DESC\nLIMIT 49;"
        },
        {
            "question": "Найти топ-17 подстанций с наибольшим количеством подключенных промышленных потребителей и высокой нагрузкой за последний квартал, и показать для каждой подстанции информацию о типе потребителей, среднем потреблении, стоимости обслуживания и количестве инцидентов.",
            "sql_query": "WITH SubstationLoad AS (\n    SELECT \n        s.SubstationID,\n        s.Name AS SubstationName,\n        s.CapacityMW,\n        COUNT(DISTINCT tl.LineID) AS ConnectedLinesCount,\n        SUM(tl.CapacityMW) AS TotalLineCapacity\n    FROM Substation s\n    JOIN TransmissionLine tl ON s.SubstationID = tl.LineID\n    GROUP BY s.SubstationID, s.Name, s.CapacityMW\n),\nIndustrialConsumers AS (\n    SELECT \n        s.SubstationID,\n        COUNT(DISTINCT c.ConsumerID) AS IndustrialConsumersCount,\n        AVG(c.AverageMonthlyConsumption) AS AvgConsumption,\n        SUM(c.AverageMonthlyConsumption) AS TotalConsumption\n    FROM Substation s\n    JOIN Consumer c ON 1=1\n    WHERE c.Type = 'Промышленность'\n    GROUP BY s.SubstationID\n),\nSubstationIncidents AS (\n    SELECT \n        s.SubstationID,\n        COUNT(i.IncidentID) AS IncidentsCount,\n        MAX(i.Date) AS LastIncidentDate,\n        MAX(i.Severity) AS LastIncidentSeverity\n    FROM Substation s\n    JOIN Incident i ON 1=1\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    GROUP BY s.SubstationID\n),\nSubstationMaintenance AS (\n    SELECT \n        s.SubstationID,\n        AVG(m.Cost) AS AvgMaintenanceCost,\n        SUM(m.Cost) AS TotalMaintenanceCost,\n        COUNT(m.MaintenanceID) AS MaintenanceCount\n    FROM Substation s\n    JOIN Maintenance m ON 1=1\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY s.SubstationID\n)\nSELECT \n    sl.SubstationName,\n    ROUND(sl.CapacityMW, 2) AS CapacityMW,\n    sl.ConnectedLinesCount,\n    ROUND(sl.TotalLineCapacity, 2) AS TotalLineCapacity,\n    ic.IndustrialConsumersCount,\n    ROUND(ic.AvgConsumption, 2) AS AvgConsumption,\n    ROUND(ic.TotalConsumption, 2) AS TotalConsumption,\n    si.IncidentsCount,\n    si.LastIncidentSeverity,\n    ROUND(sm.AvgMaintenanceCost, 2) AS AvgMaintenanceCost,\n    ROUND(sm.TotalMaintenanceCost, 2) AS TotalMaintenanceCost,\n    sm.MaintenanceCount,\n    CASE \n        WHEN ic.TotalConsumption > sl.CapacityMW * 0.8 THEN 'Высокая нагрузка'\n        WHEN ic.TotalConsumption > sl.CapacityMW * 0.5 THEN 'Средняя нагрузка'\n        ELSE 'Низкая нагрузка'\n    END AS LoadLevel\nFROM SubstationLoad sl\nJOIN IndustrialConsumers ic ON sl.SubstationID = ic.SubstationID\nJOIN SubstationIncidents si ON sl.SubstationID = si.SubstationID\nJOIN SubstationMaintenance sm ON sl.SubstationID = sm.SubstationID\nORDER BY ic.IndustrialConsumersCount DESC, ic.TotalConsumption DESC\nLIMIT 17;"
        },
        {
            "question": "Найти топ-26 электростанций с наибольшим количеством критических инцидентов за последние 3 месяца, которые имеют проблемы с экологическими нормами, и показать для каждой станции информацию о последних аудиторских проверках, затратах на обслуживание и количестве действующих контрактов.",
            "sql_query": "WITH PlantIncidents AS (\n    SELECT \n        p.PlantID,\n        p.Name AS PlantName,\n        p.Type AS PlantType,\n        COUNT(CASE WHEN i.Severity IN ('Высокая', 'Критическая') THEN 1 END) AS CriticalIncidentsCount,\n        MAX(i.Date) AS LastIncidentDate\n    FROM PowerPlant p\n    JOIN Incident i ON p.PlantID = i.PlantID\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    GROUP BY p.PlantID, p.Name, p.Type\n),\nPlantCompliance AS (\n    SELECT \n        p.PlantID,\n        COUNT(CASE WHEN e.ComplianceStatus = 'Не соответствует' THEN 1 END) AS NonComplianceCount,\n        AVG(e.CO2Emissions) AS AvgEmissions\n    FROM PowerPlant p\n    JOIN Emission e ON p.PlantID = e.PlantID\n    WHERE e.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH)\n    GROUP BY p.PlantID\n),\nPlantAudits AS (\n    SELECT \n        p.PlantID,\n        a.Auditor,\n        a.Recommendations,\n        a.ComplianceStatus,\n        ROW_NUMBER() OVER (PARTITION BY p.PlantID ORDER BY a.Date DESC) AS rn\n    FROM PowerPlant p\n    JOIN `Audit` a ON p.PlantID = a.PlantID\n),\nPlantMaintenance AS (\n    SELECT \n        p.PlantID,\n        SUM(m.Cost) AS TotalMaintenanceCost,\n        COUNT(m.MaintenanceID) AS MaintenanceCount\n    FROM PowerPlant p\n    JOIN Maintenance m ON p.PlantID = m.PlantID\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY p.PlantID\n),\nPlantContracts AS (\n    SELECT \n        p.PlantID,\n        COUNT(DISTINCT ct.ContractID) AS ActiveContractsCount,\n        SUM(ct.Volume) AS TotalContractVolume\n    FROM PowerPlant p\n    JOIN `Contract` ct ON 1=1\n    WHERE ct.Status = 'active'\n    GROUP BY p.PlantID\n)\nSELECT \n    pi.PlantName,\n    pi.PlantType,\n    pi.CriticalIncidentsCount,\n    pc.NonComplianceCount,\n    ROUND(pc.AvgEmissions, 2) AS AvgEmissions,\n    pa.Auditor AS LastAuditor,\n    pa.Recommendations AS LastAuditRecommendations,\n    ROUND(pm.TotalMaintenanceCost, 2) AS TotalMaintenanceCost,\n    pm.MaintenanceCount,\n    pct.ActiveContractsCount,\n    ROUND(pct.TotalContractVolume, 2) AS TotalContractVolume,\n    CASE \n        WHEN pi.CriticalIncidentsCount > 3 THEN 'Критический уровень инцидентов'\n        WHEN pi.CriticalIncidentsCount > 1 THEN 'Высокий уровень инцидентов'\n        ELSE 'Средний уровень инцидентов'\n    END AS IncidentLevel\nFROM PlantIncidents pi\nJOIN PlantCompliance pc ON pi.PlantID = pc.PlantID\nJOIN PlantAudits pa ON pi.PlantID = pa.PlantID AND pa.rn = 1\nJOIN PlantMaintenance pm ON pi.PlantID = pm.PlantID\nJOIN PlantContracts pct ON pi.PlantID = pct.PlantID\nORDER BY pi.CriticalIncidentsCount DESC, pc.NonComplianceCount DESC\nLIMIT 26;"
        },
        {
            "question": "Найти топ-37 электростанций с наиболее сложной историей инцидентов за последний год, включая анализ типов инцидентов, их влияние на производственные показатели, стоимость обслуживания и рекомендации аудиторов.",
            "sql_query": "WITH PlantIncidentHistory AS (\n    SELECT \n        p.PlantID,\n        p.Name AS PlantName,\n        p.Type AS PlantType,\n        COUNT(i.IncidentID) AS TotalIncidentsCount,\n        COUNT(CASE WHEN i.Severity = 'Критическая' THEN 1 END) AS CriticalIncidentsCount,\n        COUNT(CASE WHEN i.Severity = 'Высокая' THEN 1 END) AS HighIncidentsCount,\n        MAX(i.Date) AS LastIncidentDate,\n        AVG(i.DurationHours) AS AvgIncidentDuration\n    FROM PowerPlant p\n    JOIN Incident i ON p.PlantID = i.PlantID\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY p.PlantID, p.Name, p.Type\n),\nPlantMaintenanceImpact AS (\n    SELECT \n        p.PlantID,\n        SUM(m.Cost) AS TotalMaintenanceCost,\n        COUNT(m.MaintenanceID) AS MaintenanceCount,\n        AVG(m.DurationHours) AS AvgMaintenanceDuration\n    FROM PowerPlant p\n    JOIN Maintenance m ON p.PlantID = m.PlantID\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY p.PlantID\n),\nLatestAudits AS (\n    SELECT \n        p.PlantID,\n        a.Recommendations,\n        a.ComplianceStatus,\n        ROW_NUMBER() OVER (PARTITION BY p.PlantID ORDER BY a.Date DESC) AS rn\n    FROM PowerPlant p\n    JOIN `Audit` a ON p.PlantID = a.PlantID\n)\nSELECT \n    pih.PlantName,\n    pih.PlantType,\n    pih.TotalIncidentsCount,\n    pih.CriticalIncidentsCount,\n    pih.HighIncidentsCount,\n    ROUND(pih.AvgIncidentDuration, 2) AS AvgIncidentDuration,\n    ROUND(pmi.TotalMaintenanceCost, 2) AS TotalMaintenanceCost,\n    pmi.MaintenanceCount,\n    ROUND(pmi.AvgMaintenanceDuration, 2) AS AvgMaintenanceDuration,\n    la.Recommendations,\n    la.ComplianceStatus,\n    CASE \n        WHEN pih.CriticalIncidentsCount > 3 THEN 'Критический уровень рисков'\n        WHEN pih.CriticalIncidentsCount > 1 THEN 'Высокий уровень рисков'\n        ELSE 'Средний уровень рисков'\n    END AS RiskLevel\nFROM PlantIncidentHistory pih\nJOIN PlantMaintenanceImpact pmi ON pih.PlantID = pmi.PlantID\nJOIN LatestAudits la ON pih.PlantID = la.PlantID AND la.rn = 1\nORDER BY pih.CriticalIncidentsCount DESC, pih.TotalIncidentsCount DESC\nLIMIT 37;"
        },
        {
            "question": "Найти топ-38 потребителей с наиболее сложными паттернами потребления за последний год, анализируя количество и типы счетчиков, вариативность потребления, стоимость контрактов и потенциал для оптимизации энергопотребления.",
            "sql_query": "WITH ConsumerMeterAnalysis AS (\n    SELECT \n        c.ConsumerID,\n        c.Name AS ConsumerName,\n        c.Type AS ConsumerType,\n        c.ConsumptionPattern,\n        COUNT(DISTINCT m.MeterID) AS TotalMetersCount,\n        COUNT(DISTINCT m.Type) AS MeterTypesCount,\n        MAX(m.LastReadingDate) AS LastReadingDate\n    FROM Consumer c\n    JOIN Meter m ON c.ConsumerID = m.ConsumerID\n    WHERE m.LastReadingDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY c.ConsumerID, c.Name, c.Type, c.ConsumptionPattern\n),\nConsumptionVariability AS (\n    SELECT \n        c.ConsumerID,\n        STDDEV(m.LastReading) AS ConsumptionStdDev,\n        MAX(m.LastReading) - MIN(m.LastReading) AS ConsumptionRange,\n        AVG(m.LastReading) AS AvgConsumption\n    FROM Consumer c\n    JOIN Meter m ON c.ConsumerID = m.ConsumerID\n    WHERE m.LastReadingDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY c.ConsumerID\n),\nContractAnalysis AS (\n    SELECT \n        c.ConsumerID,\n        AVG(ct.PricePerUnit) AS AvgPricePerUnit,\n        SUM(ct.Volume) AS TotalContractVolume,\n        COUNT(DISTINCT ct.ContractID) AS ActiveContractsCount\n    FROM Consumer c\n    JOIN `Contract` ct ON c.ConsumerID = ct.ConsumerID\n    WHERE ct.Status = 'active'\n    GROUP BY c.ConsumerID\n)\nSELECT \n    cma.ConsumerName,\n    cma.ConsumerType,\n    cma.ConsumptionPattern,\n    cma.TotalMetersCount,\n    cma.MeterTypesCount,\n    ROUND(cv.AvgConsumption, 2) AS AvgConsumption,\n    ROUND(cv.ConsumptionStdDev, 2) AS ConsumptionVariability,\n    ROUND(cv.ConsumptionRange, 2) AS ConsumptionRange,\n    ROUND(ca.AvgPricePerUnit, 2) AS AvgPricePerUnit,\n    ROUND(ca.TotalContractVolume, 2) AS TotalContractVolume,\n    ca.ActiveContractsCount,\n    CASE \n        WHEN cv.ConsumptionStdDev > cv.AvgConsumption * 0.4 THEN 'Высокая нестабильность'\n        WHEN cv.ConsumptionStdDev > cv.AvgConsumption * 0.2 THEN 'Средняя нестабильность'\n        ELSE 'Низкая нестабильность'\n    END AS ConsumptionStability\nFROM ConsumerMeterAnalysis cma\nJOIN ConsumptionVariability cv ON cma.ConsumerID = cv.ConsumerID\nJOIN ContractAnalysis ca ON cma.ConsumerID = ca.ConsumerID\nORDER BY ConsumptionVariability DESC, TotalMetersCount DESC\nLIMIT 38;"
        },
        {
            "question": "Найти топ-40 подстанций с наиболее сложной системой управления за последний год, анализируя количество инцидентов, нагрузку, обслуживание и подключенные линии электропередачи, с оценкой потенциальных рисков и эффективности.",
            "sql_query": "WITH SubstationIncidents AS (\n    SELECT \n        s.SubstationID,\n        s.Name AS SubstationName,\n        s.CapacityMW,\n        s.VoltageLevel,\n        COUNT(i.IncidentID) AS TotalIncidentsCount,\n        COUNT(CASE WHEN i.Severity = 'Критическая' THEN 1 END) AS CriticalIncidentsCount,\n        MAX(i.Date) AS LastIncidentDate,\n        AVG(i.DurationHours) AS AvgIncidentDuration\n    FROM Substation s\n    JOIN Incident i ON 1=1\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY s.SubstationID, s.Name, s.CapacityMW, s.VoltageLevel\n),\nSubstationMaintenance AS (\n    SELECT \n        s.SubstationID,\n        SUM(m.Cost) AS TotalMaintenanceCost,\n        COUNT(m.MaintenanceID) AS MaintenanceCount,\n        AVG(m.DurationHours) AS AvgMaintenanceDuration\n    FROM Substation s\n    JOIN Maintenance m ON 1=1\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY s.SubstationID\n),\nSubstationConnections AS (\n    SELECT \n        s.SubstationID,\n        COUNT(DISTINCT tl.LineID) AS ConnectedLinesCount,\n        SUM(tl.CapacityMW) AS TotalLineCapacity,\n        COUNT(DISTINCT c.ConsumerID) AS IndustrialConsumersCount,\n        SUM(c.AverageMonthlyConsumption) AS TotalIndustrialConsumption\n    FROM Substation s\n    JOIN TransmissionLine tl ON s.SubstationID = tl.LineID\n    JOIN Consumer c ON 1=1\n    WHERE c.Type = 'Промышленность'\n    GROUP BY s.SubstationID\n)\nSELECT \n    si.SubstationName,\n    ROUND(si.CapacityMW, 2) AS CapacityMW,\n    si.VoltageLevel,\n    si.TotalIncidentsCount,\n    si.CriticalIncidentsCount,\n    ROUND(si.AvgIncidentDuration, 2) AS AvgIncidentDuration,\n    ROUND(sm.TotalMaintenanceCost, 2) AS TotalMaintenanceCost,\n    sm.MaintenanceCount,\n    ROUND(sm.AvgMaintenanceDuration, 2) AS AvgMaintenanceDuration,\n    sc.ConnectedLinesCount,\n    ROUND(sc.TotalLineCapacity, 2) AS TotalLineCapacity,\n    sc.IndustrialConsumersCount,\n    ROUND(sc.TotalIndustrialConsumption, 2) AS TotalIndustrialConsumption,\n    CASE \n        WHEN si.CriticalIncidentsCount > 2 THEN 'Критический уровень сложности'\n        WHEN si.CriticalIncidentsCount > 0 THEN 'Высокий уровень сложности'\n        ELSE 'Средний уровень сложности'\n    END AS ComplexityLevel\nFROM SubstationIncidents si\nJOIN SubstationMaintenance sm ON si.SubstationID = sm.SubstationID\nJOIN SubstationConnections sc ON si.SubstationID = sc.SubstationID\nORDER BY si.CriticalIncidentsCount DESC, si.TotalIncidentsCount DESC\nLIMIT 40;"
        },
        {
            "question": "Найти топ-36 поставщиков энергоресурсов с наиболее диверсифицированным портфелем и высоким рейтингом за последние 2 года, которые работают с различными типами энергоисточников и имеют значительный объем поставок, показав детали их контрактов и географию поставок.",
            "sql_query": "WITH SupplierDiversity AS (\n    SELECT \n        s.SupplierID,\n        s.Name AS SupplierName,\n        s.Rating,\n        COUNT(DISTINCT es.Type) AS EnergySourceTypeCount,\n        GROUP_CONCAT(DISTINCT es.Type) AS EnergySourceTypes,\n        AVG(s.AnnualSupplyVolume) AS AvgAnnualSupply\n    FROM Supplier s\n    JOIN EnergySource es ON s.SourceID = es.SourceID\n    GROUP BY s.SupplierID, s.Name, s.Rating\n    HAVING EnergySourceTypeCount > 1\n),\nSupplierContracts AS (\n    SELECT \n        sd.SupplierID,\n        sd.SupplierName,\n        COUNT(DISTINCT ct.ContractID) AS ActiveContractsCount,\n        SUM(ct.Volume) AS TotalContractVolume,\n        ROUND(AVG(ct.PricePerUnit), 2) AS AvgContractPrice,\n        GROUP_CONCAT(DISTINCT ct.ConsumerID) AS ConsumerIDs\n    FROM SupplierDiversity sd\n    JOIN `Contract` ct ON sd.SupplierID = ct.SupplierID\n    WHERE ct.Status = 'active'\n    GROUP BY sd.SupplierID, sd.SupplierName\n)\nSELECT \n    sd.SupplierName,\n    sd.Rating,\n    sd.EnergySourceTypeCount,\n    sd.EnergySourceTypes,\n    ROUND(sd.AvgAnnualSupply, 2) AS AvgAnnualSupply,\n    sc.ActiveContractsCount,\n    ROUND(sc.TotalContractVolume, 2) AS TotalContractVolume,\n    sc.AvgContractPrice,\n    CASE \n        WHEN sd.Rating > 4.5 THEN 'Высокий рейтинг'\n        WHEN sd.Rating > 4.0 THEN 'Средний рейтинг'\n        ELSE 'Низкий рейтинг'\n    END AS RatingCategory\nFROM SupplierDiversity sd\nJOIN SupplierContracts sc ON sd.SupplierID = sc.SupplierID\nORDER BY sd.EnergySourceTypeCount DESC, sd.AvgAnnualSupply DESC\nLIMIT 36;"
        },
        {
            "question": "Какие электростанции и их владельцы выбросили более 1000 тонн CO2 в 2023 году?",
            "sql_query": "SELECT pp.Name AS PlantName, oc.Name AS OwnerName, SUM(e.CO2Emissions) AS TotalCO2Emissions FROM PowerPlant pp JOIN OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID JOIN Emission e ON pp.PlantID = e.PlantID WHERE e.Date BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY pp.Name, oc.Name HAVING SUM(e.CO2Emissions) > 1000;"
        },
        {
            "question": "Какие подстанции и их владельцы имеют максимальную мощность более 200 и находятся в эксплуатации?",
            "sql_query": "SELECT s.Name AS SubstationName, oc.Name AS OwnerName, MAX(s.CapacityMW) AS MaxCapacity FROM Substation s JOIN OwnerCompany oc ON s.OwnerCompanyID = oc.CompanyID WHERE s.Status = 'Активна' GROUP BY s.Name, oc.Name HAVING MAX(s.CapacityMW) > 200;"
        },
        {
            "question": "Какие потребители имеют более одного счетчика и общие показания счетчиков?",
            "sql_query": "SELECT c.Name AS ConsumerName, COUNT(m.MeterID) AS MeterCount, SUM(m.LastReading) AS TotalReading FROM Consumer c JOIN Meter m ON c.ConsumerID = m.ConsumerID WHERE m.Status = 'Активен' GROUP BY c.Name HAVING COUNT(m.MeterID) > 1;"
        },
        {
            "question": "Какие инциденты с высокой серьезностью произошли более одного раза и их средняя продолжительность?",
            "sql_query": "SELECT i.Description AS IncidentDescription, COUNT(i.IncidentID) AS IncidentCount, AVG(i.DurationHours) AS AvgDuration FROM Incident i WHERE i.Severity = 'Высокая' GROUP BY i.Description HAVING COUNT(i.IncidentID) > 1;"
        },
        {
            "question": "Какие электростанции и их владельцы имеют более двух несоответствующих выбросов?",
            "sql_query": "SELECT pp.Name AS PlantName, oc.Name AS OwnerName, COUNT(e.EmissionID) AS EmissionCount FROM PowerPlant pp JOIN OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID JOIN Emission e ON pp.PlantID = e.PlantID WHERE e.ComplianceStatus = 'Не соответствует' GROUP BY pp.Name, oc.Name HAVING COUNT(e.EmissionID) > 2;"
        },
        {
            "question": "Какие топ-3 электростанции имеют наибольшую мощность и их текущий статус, отсортированные по убыванию мощности?",
            "sql_query": "SELECT pp.Name AS PlantName, pp.CapacityMW, pp.Status FROM PowerPlant pp ORDER BY pp.CapacityMW DESC LIMIT 3;"
        },
        {
            "question": "Какие топ-4 поставщики имеют рейтинг выше среднего и их годовой объем поставок?",
            "sql_query": "SELECT s.Name AS SupplierName, s.AnnualSupplyVolume, s.Rating FROM Supplier s WHERE s.Rating > (SELECT AVG(Rating) FROM Supplier) ORDER BY s.Rating DESC LIMIT 4;"
        },
        {
            "question": "Какие топ-3 тарифы имеют наибольшую разницу между пиковыми и непиковыми часами и их текущий статус?",
            "sql_query": "SELECT t.Name AS TariffName, t.PeakHours, t.OffPeakHours, t.Status FROM Tariff t WHERE t.Status = 'Активный' ORDER BY t.PricePerUnit DESC LIMIT 3;"
        },
        {
            "question": "Какие топ-4 электростанции имеют наибольшие выбросы CO2 в текущем квартале?",
            "sql_query": "SELECT pp.Name AS PlantName, e.CO2Emissions, e.ReportingPeriod FROM PowerPlant pp JOIN Emission e ON pp.PlantID = e.PlantID WHERE e.ReportingPeriod = 'Q1 2023' ORDER BY e.CO2Emissions DESC LIMIT 4;"
        },
        {
            "question": "Какие топ-5 электростанции имеют наибольшее количество инцидентов высокой серьезности и их средняя продолжительность простоя, сгруппированные по типу электростанции?",
            "sql_query": "SELECT pp.Name AS PlantName, pp.Type, COUNT(i.IncidentID) AS IncidentCount, AVG(i.DurationHours) AS AvgDowntime FROM PowerPlant pp JOIN Incident i ON pp.PlantID = i.PlantID WHERE i.Severity = 'Высокая' GROUP BY pp.Name, pp.Type HAVING COUNT(i.IncidentID) > 1 ORDER BY IncidentCount DESC LIMIT 5;"
        },
        {
            "question": "Какие топ-5 электростанций имеют наибольшее количество несоответствующих выбросов и их текущий статус обслуживания, сгруппированные по владельцу?",
            "sql_query": "SELECT oc.Name AS OwnerName, pp.Name AS PlantName, COUNT(e.EmissionID) AS NonCompliantEmissions, m.Status AS MaintenanceStatus FROM OwnerCompany oc JOIN PowerPlant pp ON oc.CompanyID = pp.OwnerCompanyID JOIN Emission e ON pp.PlantID = e.PlantID JOIN Maintenance m ON pp.PlantID = m.PlantID WHERE e.ComplianceStatus = 'Не соответствует' GROUP BY oc.Name, pp.Name, m.Status HAVING COUNT(e.EmissionID) > 1 ORDER BY NonCompliantEmissions DESC LIMIT 5;"
        },
        {
            "question": "Какие топ-4 подстанции имеют наибольшее количество подключенных линий электропередачи и их общая пропускная способность, сгруппированные по уровню напряжения?",
            "sql_query": "SELECT s.Name AS SubstationName, s.VoltageLevel, COUNT(tl.LineID) AS LineCount, SUM(tl.CapacityMW) AS TotalCapacity FROM Substation s JOIN TransmissionLine tl ON s.SubstationID = tl.OwnerCompanyID GROUP BY s.Name, s.VoltageLevel HAVING COUNT(tl.LineID) > 1 ORDER BY TotalCapacity DESC LIMIT 4;"
        },
        {
            "question": "Какие топ-5 электростанции имеют наибольшую эффективность использования топлива (отношение мощности к выбросам CO2) и их текущий статус, сгруппированные по типу электростанции?",
            "sql_query": "SELECT pp.Name AS PlantName, pp.Type, pp.Status, (pp.CapacityMW / e.CO2Emissions) AS EfficiencyRatio FROM PowerPlant pp JOIN Emission e ON pp.PlantID = e.PlantID WHERE e.ReportingPeriod = 'Q1 2023' AND e.CO2Emissions > 0 GROUP BY pp.Name, pp.Type, pp.Status, e.CO2Emissions, pp.CapacityMW ORDER BY EfficiencyRatio DESC LIMIT 5;"
        },
        {
            "question": "Какие топ-6 электростанции имеют наибольшее количество инцидентов в течение последних 3 месяцев и их средняя стоимость обслуживания, сгруппированные по владельцу?",
            "sql_query": "SELECT oc.Name AS OwnerName, pp.Name AS PlantName, COUNT(i.IncidentID) AS RecentIncidents, AVG(m.Cost) AS AvgMaintenanceCost FROM OwnerCompany oc JOIN PowerPlant pp ON oc.CompanyID = pp.OwnerCompanyID JOIN Incident i ON pp.PlantID = i.PlantID JOIN Maintenance m ON pp.PlantID = m.PlantID WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) GROUP BY oc.Name, pp.Name HAVING COUNT(i.IncidentID) > 1 ORDER BY RecentIncidents DESC LIMIT 6;"
        },
        {
            "question": "Какие топ-7 электростанций имеют наибольшую разницу между плановым и фактическим объемом выбросов CO2 за последний квартал, сгруппированные по типу электростанции и владельцу?",
            "sql_query": "SELECT pp.Name AS PlantName, pp.Type, oc.Name AS OwnerName, (e.CO2Emissions - (pp.CapacityMW * 0.8)) AS EmissionDeviation FROM PowerPlant pp JOIN OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID JOIN Emission e ON pp.PlantID = e.PlantID WHERE e.ReportingPeriod = 'Q1 2023' AND e.ComplianceStatus = 'Соответствует' GROUP BY pp.Name, pp.Type, oc.Name, e.CO2Emissions, pp.CapacityMW ORDER BY EmissionDeviation DESC LIMIT 7;"
        },
        {
            "question": "Какие топ-8 поставщиков имеют наибольшую среднюю стоимость обслуживания контрактов с потребителями, у которых потребление превышает среднее по отрасли, сгруппированные по типу продукта?",
            "sql_query": "SELECT s.Name AS SupplierName, s.ProductRange, AVG(c.PricePerUnit * c.Volume) AS AvgContractValue FROM Supplier s JOIN `Contract` c ON s.SupplierID = c.SupplierID JOIN Consumer co ON c.ConsumerID = co.ConsumerID WHERE co.AverageMonthlyConsumption > (SELECT AVG(AverageMonthlyConsumption) FROM Consumer) AND c.Status = 'active' GROUP BY s.Name, s.ProductRange ORDER BY AvgContractValue DESC LIMIT 8;"
        },
        {
            "question": "Какие топ-6 подстанций имеют наибольшее количество подключенных линий электропередачи с разными уровнями напряжения, сгруппированные по региону и владельцу?",
            "sql_query": "SELECT s.Name AS SubstationName, s.Location, oc.Name AS OwnerName, COUNT(DISTINCT tl.VoltageLevel) AS DifferentVoltageLevels, COUNT(tl.LineID) AS TotalLines FROM Substation s JOIN OwnerCompany oc ON s.OwnerCompanyID = oc.CompanyID JOIN TransmissionLine tl ON s.SubstationID = tl.OwnerCompanyID WHERE s.Status = 'Активна' GROUP BY s.Name, s.Location, oc.Name HAVING COUNT(DISTINCT tl.VoltageLevel) > 1 ORDER BY DifferentVoltageLevels DESC, TotalLines DESC LIMIT 6;"
        },
        {
            "question": "Какие топ-9 электростанций имеют наибольшее количество инцидентов высокой и критической важности за последние 6 месяцев, сгруппированные по типу и владельцу, с указанием средней продолжительности инцидентов?",
            "sql_query": "SELECT pp.Name AS PlantName, pp.Type, oc.Name AS OwnerName, COUNT(i.IncidentID) AS CriticalIncidents, AVG(i.DurationHours) AS AvgDuration FROM PowerPlant pp JOIN OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID JOIN Incident i ON pp.PlantID = i.PlantID WHERE i.Severity IN ('Высокая', 'Критическая') AND i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH) GROUP BY pp.Name, pp.Type, oc.Name ORDER BY CriticalIncidents DESC, AvgDuration DESC LIMIT 9;"
        },
        {
            "question": "Какие топ-5 тарифов имеют наибольшую разницу между пиковыми и непиковыми часами, сгруппированные по типу потребителя и периоду действия, с учетом только активных тарифов?",
            "sql_query": "SELECT t.Name AS TariffName, t.ConsumerType, t.ValidFrom, t.ValidTo, (MAX(t.PricePerUnit) - MIN(t.PricePerUnit)) AS PriceDifference FROM Tariff t WHERE t.Status = 'Активный' AND t.ValidTo >= CURRENT_DATE GROUP BY t.Name, t.ConsumerType, t.ValidFrom, t.ValidTo HAVING PriceDifference > 0 ORDER BY PriceDifference DESC LIMIT 5;"
        },
        {
            "question": "Какие топ-8 электростанций имеют наибольшее количество плановых обслуживаний в течение последнего года, сгруппированные по типу и владельцу, с указанием средней стоимости и продолжительности обслуживания?",
            "sql_query": "SELECT pp.Name AS PlantName, pp.Type, oc.Name AS OwnerName, COUNT(m.MaintenanceID) AS MaintenanceCount, AVG(m.Cost) AS AvgCost, AVG(m.DurationHours) AS AvgDuration FROM PowerPlant pp JOIN OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID JOIN Maintenance m ON pp.PlantID = m.PlantID WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) AND m.Status = 'Завершено' GROUP BY pp.Name, pp.Type, oc.Name HAVING COUNT(m.MaintenanceID) > 1 ORDER BY MaintenanceCount DESC, AvgCost DESC LIMIT 8;"
        },
        {
            "question": "Какие топ-7 поставщиков имеют наибольшую разницу между максимальной и минимальной ценой в контрактах с промышленными потребителями, сгруппированные по типу продукта и стране происхождения?",
            "sql_query": "SELECT s.Name AS SupplierName, s.ProductRange, s.Country, (MAX(c.PricePerUnit) - MIN(c.PricePerUnit)) AS PriceRange FROM Supplier s JOIN `Contract` c ON s.SupplierID = c.SupplierID JOIN Consumer co ON c.ConsumerID = co.ConsumerID WHERE co.Type = 'Промышленность' AND c.Status = 'active' GROUP BY s.Name, s.ProductRange, s.Country HAVING PriceRange > 0 ORDER BY PriceRange DESC LIMIT 7;"
        },
        {
            "question": "Какие топ-7 электростанций имеют наибольшее количество аудитов с несоответствиями за последние 2 года, сгруппированные по типу и владельцу, с указанием среднего количества рекомендаций на аудит?",
            "sql_query": "SELECT pp.Name AS PlantName, pp.Type, oc.Name AS OwnerName, COUNT(a.AuditID) AS AuditCount, AVG(LENGTH(a.Recommendations) - LENGTH(REPLACE(a.Recommendations, '.', ''))) AS AvgRecommendations FROM PowerPlant pp JOIN OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID JOIN `Audit` a ON pp.PlantID = a.PlantID WHERE a.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 2 YEAR) AND a.ComplianceStatus = 'Не соблюдено' GROUP BY pp.Name, pp.Type, oc.Name HAVING COUNT(a.AuditID) > 1 ORDER BY AuditCount DESC, AvgRecommendations DESC LIMIT 7;"
        },
        {
            "question": "Какие топ-8 поставщиков имеют наибольшую разницу между рейтингом и средней ценой контрактов, сгруппированные по типу продукта и стране, с учетом только активных контрактов?",
            "sql_query": "SELECT s.Name AS SupplierName, s.ProductRange, s.Country, (s.Rating - AVG(c.PricePerUnit)) AS RatingPriceDiff FROM Supplier s JOIN `Contract` c ON s.SupplierID = c.SupplierID WHERE c.Status = 'active' GROUP BY s.Name, s.ProductRange, s.Country, s.Rating HAVING RatingPriceDiff > 0 ORDER BY RatingPriceDiff DESC LIMIT 8;"
        },
        {
            "question": "Какие электростанции и их владельцы выбросили более 1000 тонн CO2 в 2023 году?",
            "sql_query": "SELECT pp.Name AS PlantName, oc.Name AS OwnerName, SUM(e.CO2Emissions) AS TotalCO2Emissions FROM PowerPlant pp JOIN OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID JOIN Emission e ON pp.PlantID = e.PlantID WHERE e.Date BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY pp.Name, oc.Name HAVING SUM(e.CO2Emissions) > 1000;"
        },
        {
            "question": "Какие линии электропередач напряжением 500kV и их владельцы имеют более одной линии?",
            "sql_query": "SELECT tl.Name AS TransmissionLineName, oc.Name AS OwnerName, COUNT(tl.LineID) AS LineCount FROM TransmissionLine tl JOIN OwnerCompany oc ON tl.OwnerCompanyID = oc.CompanyID WHERE tl.VoltageLevel = 500 GROUP BY tl.Name, oc.Name HAVING COUNT(tl.LineID) > 1;"
        },
        {
            "question": "Какие подстанции и их владельцы имеют максимальную мощность более 200 МВт и находятся в эксплуатации?",
            "sql_query": "SELECT s.Name AS SubstationName, oc.Name AS OwnerName, MAX(s.CapacityMW) AS MaxCapacity FROM Substation s JOIN OwnerCompany oc ON s.OwnerCompanyID = oc.CompanyID WHERE s.Status = 'Активна' GROUP BY s.Name, oc.Name HAVING MAX(s.CapacityMW) > 200;"
        },
        {
            "question": "Какие потребители имеют более одного счетчика и общие показания счетчиков?",
            "sql_query": "SELECT c.Name AS ConsumerName, COUNT(m.MeterID) AS MeterCount, SUM(m.LastReading) AS TotalReading FROM Consumer c JOIN Meter m ON c.ConsumerID = m.ConsumerID WHERE m.Status = 'Активен' GROUP BY c.Name HAVING COUNT(m.MeterID) > 1;"
        },
        {
            "question": "Какие инциденты с высокой серьезностью произошли более одного раза и их средняя продолжительность?",
            "sql_query": "SELECT i.Description AS IncidentDescription, COUNT(i.IncidentID) AS IncidentCount, AVG(i.DurationHours) AS AvgDuration FROM Incident i WHERE i.Severity = 'Высокая' GROUP BY i.Description HAVING COUNT(i.IncidentID) > 1;"
        },
        {
            "question": "Какие подстанции напряжением 220 кВ и их владельцы имеют более одной подстанции?",
            "sql_query": "SELECT s.Name AS SubstationName, oc.Name AS OwnerName, COUNT(s.SubstationID) AS SubstationCount FROM Substation s JOIN OwnerCompany oc ON s.OwnerCompanyID = oc.CompanyID WHERE s.VoltageLevel = 200 GROUP BY s.Name, oc.Name HAVING COUNT(s.SubstationID) > 1;"
        },
        {
            "question": "Какие электростанции имеют среднюю продолжительность обслуживания более 4.0 часов?",
            "sql_query": "SELECT pp.Name AS PlantName, COUNT(m.MaintenanceID) AS MaintenanceCount, AVG(m.DurationHours) AS AvgDuration FROM PowerPlant pp JOIN Maintenance m ON pp.PlantID = m.PlantID WHERE m.Status = 'Завершено' GROUP BY pp.Name HAVING AVG(m.DurationHours) > 4.0;"
        }
    ]
}
