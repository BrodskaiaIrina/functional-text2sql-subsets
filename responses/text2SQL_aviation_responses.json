{
    "queries": [
        {
            "question": "Какие пассажиры имеют более 2 подтвержденных бронирований?",
            "sql_query": "SELECT p.FirstName, p.LastName, COUNT(b.BookingID) AS TotalBookings\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nWHERE b.Status = 'Подтверждено'\nGROUP BY p.FirstName, p.LastName\nHAVING COUNT(b.BookingID) > 2;",
            "gpt-4o_response": "SELECT p.FirstName, p.LastName, COUNT(b.BookingID) AS ConfirmedBookings\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nWHERE b.Status = 'Подтверждено'\nGROUP BY p.FirstName, p.LastName\nHAVING COUNT(b.BookingID) > 2;",
            "gpt-4o_response_ru": "SELECT p.FirstName, p.LastName, COUNT(b.BookingID) AS ConfirmedBookings\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nWHERE b.Status = 'Подтверждено'\nGROUP BY p.FirstName, p.LastName\nHAVING COUNT(b.BookingID) > 2;",
            "google/gemini-2.0-flash-001_response": "SELECT p.FirstName, p.LastName, COUNT(b.BookingID) AS NumberOfBookings\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nWHERE b.Status = 'Подтверждено'\nGROUP BY p.PassengerID, p.FirstName, p.LastName\nHAVING COUNT(b.BookingID) > 2;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT p.FirstName, p.LastName, COUNT(b.BookingID) AS NumberOfBookings\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nWHERE b.Status = 'Подтверждено'\nGROUP BY p.PassengerID, p.FirstName, p.LastName\nHAVING COUNT(b.BookingID) > 2;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT p.FirstName, p.LastName, COUNT(b.BookingID) AS TotalBookings\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nWHERE b.Status = 'Подтверждено'\nGROUP BY p.FirstName, p.LastName\nHAVING COUNT(b.BookingID) > 2;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT p.FirstName, p.LastName, COUNT(b.BookingID) AS TotalBookings\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nWHERE b.Status = 'Подтверждено'\nGROUP BY p.FirstName, p.LastName\nHAVING COUNT(b.BookingID) > 2;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT p.FirstName, p.LastName, COUNT(b.BookingID) AS ConfirmedBookings\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nWHERE b.Status = 'Подтверждено'\nGROUP BY p.FirstName, p.LastName\nHAVING COUNT(b.BookingID) > 2;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT p.FirstName, p.LastName, COUNT(b.BookingID) AS ConfirmedBookings\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nWHERE b.Status = 'Подтверждено'\nGROUP BY p.PassengerID, p.FirstName, p.LastName\nHAVING COUNT(b.BookingID) > 2;",
            "gigachat_response": "SELECT p.FirstName, p.LastName, COUNT(b.BookingID) AS ConfirmedBookingsCount\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nWHERE b.Status = 'Подтверждено'\nGROUP BY p.FirstName, p.LastName\nHAVING COUNT(b.BookingID) > 2;",
            "gigachat_response_ru": "SELECT p.FirstName, p.LastName, COUNT(b.BookingID) AS ConfirmedBookingsCount\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nWHERE b.Status = 'Подтверждено'\nGROUP BY p.FirstName, p.LastName\nHAVING COUNT(b.BookingID) > 2;"
        },
        {
            "question": "Какие модели самолетов имеют среднюю стоимость технического обслуживания более 20000?",
            "sql_query": "SELECT a.Model, AVG(m.Cost) AS AvgMaintenanceCost\nFROM Aircraft a\nJOIN Maintenance m ON a.AircraftID = m.AircraftID\nWHERE m.Status = 'Завершено'\nGROUP BY a.Model\nHAVING AVG(m.Cost) > 20000;",
            "gpt-4o_response": "SELECT ac.Model, AVG(m.Cost) AS AvgMaintenanceCost\nFROM Aircraft ac\nJOIN Maintenance m ON ac.AircraftID = m.AircraftID\nGROUP BY ac.Model\nHAVING AVG(m.Cost) > 20000;",
            "gpt-4o_response_ru": "SELECT ac.Model, AVG(m.Cost) AS AvgMaintenanceCost\nFROM Aircraft ac\nJOIN Maintenance m ON ac.AircraftID = m.AircraftID\nGROUP BY ac.Model\nHAVING AVG(m.Cost) > 20000;",
            "google/gemini-2.0-flash-001_response": "SELECT a.Model AS AircraftModel, AVG(m.Cost) AS AverageMaintenanceCost\nFROM Aircraft a\nJOIN Maintenance m ON a.AircraftID = m.AircraftID\nGROUP BY a.Model\nHAVING AVG(m.Cost) > 20000;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT a.Model\nFROM Aircraft a\nJOIN Maintenance m ON a.AircraftID = m.AircraftID\nGROUP BY a.Model\nHAVING AVG(m.Cost) > 20000;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT a.Model AS AircraftModel, AVG(m.Cost) AS AvgMaintenanceCost\nFROM Aircraft a\nJOIN Maintenance m ON a.AircraftID = m.AircraftID\nGROUP BY a.Model\nHAVING AVG(m.Cost) > 20000;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT a.Model AS AircraftModel, AVG(m.Cost) AS AvgMaintenanceCost\nFROM Aircraft a\nJOIN Maintenance m ON a.AircraftID = m.AircraftID\nGROUP BY a.Model\nHAVING AVG(m.Cost) > 20000;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT a.Model, AVG(m.Cost) AS AvgMaintenanceCost\nFROM Aircraft a\nJOIN Maintenance m ON a.AircraftID = m.AircraftID\nGROUP BY a.Model\nHAVING AVG(m.Cost) > 20000;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT a.Model, AVG(m.Cost) AS AvgMaintenanceCost\nFROM Aircraft a\nJOIN Maintenance m ON a.AircraftID = m.AircraftID\nGROUP BY a.Model\nHAVING AVG(m.Cost) > 20000;",
            "gigachat_response": "SELECT ac.Model, AVG(m.Cost) AS AverageCost\nFROM Aircraft ac\nJOIN Maintenance m ON ac.AircraftID = m.AircraftID\nGROUP BY ac.Model\nHAVING AVG(m.Cost) > 20000;",
            "gigachat_response_ru": "SELECT ac.Model, AVG(m.Cost) AS AverageCost\nFROM Aircraft ac\nJOIN Maintenance m ON ac.AircraftID = m.AircraftID\nGROUP BY ac.Model\nHAVING AVG(m.Cost) > 20000;"
        },
        {
            "question": "Какие аэропорты имеют более 3 запланированных вылетов?",
            "sql_query": "SELECT ap.Name AS AirportName, COUNT(f.FlightID) AS TotalDepartures\nFROM Airport ap\nJOIN Flight f ON ap.AirportID = f.DepartureAirportID\nWHERE f.Status = 'Запланирован'\nGROUP BY ap.Name\nHAVING COUNT(f.FlightID) > 3;",
            "gpt-4o_response": "SELECT ap.Name AS AirportName, COUNT(f.FlightID) AS ScheduledDepartures\nFROM Airport ap\nJOIN Flight f ON ap.AirportID = f.DepartureAirportID\nWHERE f.Status = 'Scheduled'\nGROUP BY ap.Name\nHAVING COUNT(f.FlightID) > 3;",
            "gpt-4o_response_ru": "SELECT ap.Name AS AirportName, COUNT(f.FlightID) AS ScheduledDepartures\nFROM Airport ap\nJOIN Flight f ON ap.AirportID = f.DepartureAirportID\nWHERE f.Status = 'Scheduled'\nGROUP BY ap.Name\nHAVING COUNT(f.FlightID) > 3;",
            "google/gemini-2.0-flash-001_response": "SELECT a.Name AS AirportName, COUNT(f.FlightID) AS TotalScheduledFlights\nFROM Airport a\nJOIN Flight f ON a.AirportID = f.DepartureAirportID\nWHERE f.Status = 'Scheduled'\nGROUP BY a.Name\nHAVING COUNT(f.FlightID) > 3;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT a.Name AS AirportName, COUNT(f.FlightID) AS TotalScheduledFlights\nFROM Airport a\nJOIN Flight f ON a.AirportID = f.DepartureAirportID\nWHERE f.Status = 'Scheduled'\nGROUP BY a.Name\nHAVING COUNT(f.FlightID) > 3;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT a.Name AS AirportName, COUNT(f.FlightID) AS TotalFlights\nFROM Airport a\nJOIN Flight f ON a.AirportID = f.DepartureAirportID\nWHERE f.Status = 'Scheduled'\nGROUP BY a.Name\nHAVING COUNT(f.FlightID) > 3;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT a.Name AS AirportName, COUNT(f.FlightID) AS TotalFlights\nFROM Airport a\nJOIN Flight f ON a.AirportID = f.DepartureAirportID\nWHERE f.Status = 'Scheduled'\nGROUP BY a.Name\nHAVING COUNT(f.FlightID) > 3;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT a.Name AS AirportName, COUNT(f.FlightID) AS ScheduledDepartures\nFROM Airport a\nJOIN Flight f ON a.AirportID = f.DepartureAirportID\nWHERE f.Status = 'Scheduled' \nGROUP BY a.Name\nHAVING COUNT(f.FlightID) > 3;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT a.Name AS AirportName, COUNT(f.FlightID) AS ScheduledDepartures\nFROM Airport a\nJOIN Flight f ON a.AirportID = f.DepartureAirportID\nWHERE f.Status = 'Scheduled'\nGROUP BY a.Name\nHAVING COUNT(f.FlightID) > 3;",
            "gigachat_response": "SELECT a.Name AS AirportName, COUNT(f.FlightID) AS TotalDepartures\nFROM Airport a\nJOIN Flight f ON a.AirportID = f.DepartureAirportID\nWHERE f.Status = 'Scheduled'\nGROUP BY a.Name\nHAVING COUNT(f.FlightID) > 3;",
            "gigachat_response_ru": "SELECT a.Name AS AirportName, COUNT(f.FlightID) AS PlannedDepartures\nFROM Airport a\nJOIN Flight f ON a.AirportID = f.DepartureAirportID\nWHERE f.Status = 'Scheduled'\nGROUP BY a.Name\nHAVING COUNT(f.FlightID) > 3;"
        },
        {
            "question": "Какие авиакомпании имеют общую выручку от подтвержденных бронирований более 5000?",
            "sql_query": "SELECT al.Name AS AirlineName, SUM(b.Price) AS TotalRevenue\nFROM Airline al\nJOIN Flight f ON al.AirlineID = f.AirlineID\nJOIN Booking b ON f.FlightID = b.FlightID\nWHERE b.Status = 'Подтверждено'\nGROUP BY al.Name\nHAVING SUM(b.Price) > 5000;",
            "gpt-4o_response": "SELECT al.Name AS AirlineName, SUM(b.Price) AS TotalRevenue\nFROM Airline al\nJOIN Flight f ON al.AirlineID = f.AirlineID\nJOIN Booking b ON f.FlightID = b.FlightID\nWHERE b.Status = 'Подтверждено'\nGROUP BY al.Name\nHAVING SUM(b.Price) > 5000;",
            "gpt-4o_response_ru": "SELECT al.Name AS AirlineName, SUM(b.Price) AS TotalRevenue\nFROM Airline al\nJOIN Flight f ON al.AirlineID = f.AirlineID\nJOIN Booking b ON f.FlightID = b.FlightID\nWHERE b.Status = 'Подтверждено'\nGROUP BY al.Name\nHAVING SUM(b.Price) > 5000;",
            "google/gemini-2.0-flash-001_response": "SELECT \n    a.Name AS AirlineName, \n    SUM(b.Price) AS TotalRevenue\nFROM \n    Airline a\nJOIN \n    Flight f ON a.AirlineID = f.AirlineID\nJOIN \n    Booking b ON f.FlightID = b.FlightID\nWHERE \n    b.Status = 'Подтверждено'\nGROUP BY \n    a.Name\nHAVING \n    SUM(b.Price) > 5000;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT a.Name AS AirlineName, SUM(b.Price) AS TotalRevenue\nFROM Airline a\nJOIN Flight f ON a.AirlineID = f.AirlineID\nJOIN Booking b ON f.FlightID = b.FlightID\nWHERE b.Status = 'Подтверждено'\nGROUP BY a.Name\nHAVING SUM(b.Price) > 5000;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT a.Name AS AirlineName, SUM(b.Price) AS TotalRevenue\nFROM Airline a\nJOIN Flight f ON a.AirlineID = f.AirlineID\nJOIN Booking b ON f.FlightID = b.FlightID\nWHERE b.Status = 'Подтверждено'\nGROUP BY a.Name\nHAVING SUM(b.Price) > 5000;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT a.Name AS AirlineName, SUM(b.Price) AS TotalRevenue\nFROM Airline a\nJOIN Flight f ON a.AirlineID = f.AirlineID\nJOIN Booking b ON f.FlightID = b.FlightID\nWHERE b.Status = 'Подтверждено'\nGROUP BY a.Name\nHAVING SUM(b.Price) > 5000\nORDER BY TotalRevenue DESC;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT a.Name AS AirlineName, SUM(b.Price) AS TotalRevenue\nFROM Airline a\nJOIN Flight f ON a.AirlineID = f.AirlineID\nJOIN Booking b ON f.FlightID = b.FlightID\nWHERE b.Status = 'Подтверждено'\nGROUP BY a.Name\nHAVING SUM(b.Price) > 5000;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT a.Name AS AirlineName, SUM(b.Price) AS TotalRevenue\nFROM Airline a\nJOIN Flight f ON a.AirlineID = f.AirlineID\nJOIN Booking b ON f.FlightID = b.FlightID\nWHERE b.Status = 'Подтверждено'\nGROUP BY a.Name\nHAVING SUM(b.Price) > 5000;",
            "gigachat_response": "SELECT \n    al.Name AS AirlineName,\n    SUM(b.Price) AS TotalRevenue\nFROM \n    Airline al\nJOIN \n    Flight f ON al.AirlineID = f.AirlineID\nJOIN \n    Booking b ON f.FlightID = b.FlightID\nWHERE \n    b.Status = 'Подтверждено'\nGROUP BY \n    al.Name\nHAVING \n    SUM(b.Price) > 5000;",
            "gigachat_response_ru": "SELECT a.Name AS AirlineName, SUM(b.Price) AS TotalRevenue\nFROM Airline a\nJOIN Flight f ON a.AirlineID = f.AirlineID\nJOIN Booking b ON f.FlightID = b.FlightID\nWHERE b.Status = 'Подтверждено'\nGROUP BY a.Name\nHAVING SUM(b.Price) > 5000;"
        },
        {
            "question": "Какие модели самолетов имеют более 2 запланированных рейсов?",
            "sql_query": "SELECT a.Model, COUNT(f.FlightID) AS TotalFlights\nFROM Aircraft a\nJOIN Flight f ON a.AircraftID = f.AircraftID\nWHERE f.Status = 'Запланирован'\nGROUP BY a.Model\nHAVING COUNT(f.FlightID) > 2;",
            "gpt-4o_response": "SELECT ac.Model, COUNT(f.FlightID) AS ScheduledFlights\nFROM Aircraft ac\nJOIN Flight f ON ac.AircraftID = f.AircraftID\nWHERE f.Status = 'Scheduled'\nGROUP BY ac.Model\nHAVING COUNT(f.FlightID) > 2;",
            "gpt-4o_response_ru": "SELECT ac.Model, COUNT(f.FlightID) AS ScheduledFlights\nFROM Aircraft ac\nJOIN Flight f ON ac.AircraftID = f.AircraftID\nWHERE f.Status = 'Scheduled'\nGROUP BY ac.Model\nHAVING COUNT(f.FlightID) > 2;",
            "google/gemini-2.0-flash-001_response": "SELECT a.Model AS AircraftModel, COUNT(f.FlightID) AS TotalScheduledFlights\nFROM Aircraft a\nJOIN Flight f ON a.AircraftID = f.AircraftID\nWHERE f.Status = 'Scheduled'\nGROUP BY a.Model\nHAVING COUNT(f.FlightID) > 2;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT a.Model AS AircraftModel, COUNT(f.FlightID) AS TotalScheduledFlights\nFROM Aircraft a\nJOIN Flight f ON a.AircraftID = f.AircraftID\nWHERE f.Status = 'Scheduled'\nGROUP BY a.Model\nHAVING COUNT(f.FlightID) > 2;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT a.Model AS AircraftModel, COUNT(f.FlightID) AS TotalFlights\nFROM Aircraft a\nJOIN Flight f ON a.AircraftID = f.AircraftID\nWHERE f.Status = 'Scheduled'\nGROUP BY a.Model\nHAVING COUNT(f.FlightID) > 2;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT a.Model AS AircraftModel, COUNT(f.FlightID) AS TotalFlights\nFROM Aircraft a\nJOIN Flight f ON a.AircraftID = f.AircraftID\nWHERE f.Status = 'Scheduled'\nGROUP BY a.Model\nHAVING COUNT(f.FlightID) > 2;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT a.Model, COUNT(f.FlightID) AS TotalFlights\nFROM Aircraft a\nJOIN Flight f ON a.AircraftID = f.AircraftID\nWHERE f.Status = 'Scheduled'\nGROUP BY a.Model\nHAVING COUNT(f.FlightID) > 2;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT a.Model, COUNT(f.FlightID) AS TotalFlights\nFROM Aircraft a\nJOIN Flight f ON a.AircraftID = f.AircraftID\nWHERE f.Status = 'Scheduled'\nGROUP BY a.Model\nHAVING COUNT(f.FlightID) > 2;",
            "gigachat_response": "SELECT ac.Model, COUNT(f.FlightID) AS NumberOfFlights\nFROM Aircraft ac\nJOIN Flight f ON ac.AircraftID = f.AircraftID\nWHERE f.Status = 'Scheduled'\nGROUP BY ac.Model\nHAVING COUNT(f.FlightID) > 2;",
            "gigachat_response_ru": "SELECT ac.Model, COUNT(f.FlightID) AS NumberOfFlights\nFROM Aircraft ac\nJOIN Flight f ON ac.AircraftID = f.AircraftID\nWHERE f.Status = 'Scheduled'\nGROUP BY ac.Model\nHAVING COUNT(f.FlightID) > 2;"
        },
        {
            "question": "Какие авиакомпании имеют более 3 пилотов с опытом работы более 10 лет?",
            "sql_query": "SELECT al.Name AS AirlineName, COUNT(p.PilotID) AS TotalPilots\nFROM Airline al\nJOIN Pilot p ON al.AirlineID = p.AirlineID\nWHERE p.ExperienceYears > 10\nGROUP BY al.Name\nHAVING COUNT(p.PilotID) > 3;",
            "gpt-4o_response": "SELECT al.Name AS AirlineName, COUNT(p.PilotID) AS TotalExperiencedPilots\nFROM Airline al\nJOIN Pilot p ON al.AirlineID = p.AirlineID\nWHERE p.ExperienceYears > 10\nGROUP BY al.Name\nHAVING COUNT(p.PilotID) > 3;",
            "gpt-4o_response_ru": "SELECT al.Name AS AirlineName, COUNT(p.PilotID) AS ExperiencedPilots\nFROM Airline al\nJOIN Pilot p ON al.AirlineID = p.AirlineID\nWHERE p.ExperienceYears > 10\nGROUP BY al.Name\nHAVING COUNT(p.PilotID) > 3;",
            "google/gemini-2.0-flash-001_response": "SELECT a.Name AS AirlineName, COUNT(p.PilotID) AS NumberOfPilots\nFROM Airline a\nJOIN Pilot p ON a.AirlineID = p.AirlineID\nWHERE p.ExperienceYears > 10\nGROUP BY a.Name\nHAVING COUNT(p.PilotID) > 3;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT a.Name AS AirlineName\nFROM Airline a\nJOIN Pilot p ON a.AirlineID = p.AirlineID\nWHERE p.ExperienceYears > 10\nGROUP BY a.Name\nHAVING COUNT(p.PilotID) > 3;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT a.Name AS AirlineName, COUNT(p.PilotID) AS TotalPilots\nFROM Airline a\nJOIN Pilot p ON a.AirlineID = p.AirlineID\nWHERE p.ExperienceYears > 10\nGROUP BY a.Name\nHAVING COUNT(p.PilotID) > 3;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT al.Name AS AirlineName, COUNT(p.PilotID) AS TotalPilots\nFROM Airline al\nJOIN Pilot p ON al.AirlineID = p.AirlineID\nWHERE p.ExperienceYears > 10\nGROUP BY al.Name\nHAVING COUNT(p.PilotID) > 3;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT a.Name AS AirlineName, COUNT(p.PilotID) AS ExperiencedPilots\nFROM Airline a\nJOIN Pilot p ON a.AirlineID = p.AirlineID\nWHERE p.ExperienceYears > 10\nGROUP BY a.Name\nHAVING COUNT(p.PilotID) > 3;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT a.Name AS AirlineName, COUNT(p.PilotID) AS ExperiencedPilots\nFROM Airline a\nJOIN Pilot p ON a.AirlineID = p.AirlineID\nWHERE p.ExperienceYears > 10\nGROUP BY a.Name\nHAVING COUNT(p.PilotID) > 3;",
            "gigachat_response": "SELECT a.Name AS AirlineName, COUNT(p.PilotID) AS ExperiencedPilotsCount\nFROM Airline a\nJOIN Pilot p ON a.AirlineID = p.AirlineID\nWHERE p.ExperienceYears > 10\nGROUP BY a.Name\nHAVING COUNT(p.PilotID) > 3;",
            "gigachat_response_ru": "SELECT a.Name AS AirlineName\nFROM Airline a\nJOIN Pilot p ON a.AirlineID = p.AirlineID\nWHERE p.ExperienceYears > 10\nGROUP BY a.Name\nHAVING COUNT(p.PilotID) > 3;"
        },
        {
            "question": "Какие аэропорты имеют более 5 успешных проверок безопасности?",
            "sql_query": "SELECT ap.Name AS AirportName, COUNT(sc.SecurityCheckID) AS TotalSecurityChecks\nFROM Airport ap\nJOIN Flight f ON ap.AirportID = f.DepartureAirportID\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN SecurityCheck sc ON b.PassengerID = sc.PassengerID\nWHERE sc.Status = 'Прошел'\nGROUP BY ap.Name\nHAVING COUNT(sc.SecurityCheckID) > 5;",
            "gpt-4o_response": "SELECT ap.Name AS AirportName, COUNT(sc.SecurityCheckID) AS SuccessfulChecks\nFROM Airport ap\nJOIN Flight f ON ap.AirportID = f.DepartureAirportID\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN SecurityCheck sc ON b.PassengerID = sc.PassengerID\nWHERE sc.Status = 'Прошел'\nGROUP BY ap.Name\nHAVING COUNT(sc.SecurityCheckID) > 5;",
            "gpt-4o_response_ru": "SELECT ap.Name AS AirportName, COUNT(sc.SecurityCheckID) AS SuccessfulChecks\nFROM Airport ap\nJOIN Flight f ON ap.AirportID = f.DepartureAirportID\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN SecurityCheck sc ON b.PassengerID = sc.PassengerID\nWHERE sc.Status = 'Прошел'\nGROUP BY ap.Name\nHAVING COUNT(sc.SecurityCheckID) > 5;",
            "google/gemini-2.0-flash-001_response": "SELECT a.Name AS AirportName, COUNT(sc.SecurityCheckID) AS SuccessfulSecurityChecks\nFROM Airport a\nJOIN Flight f ON a.AirportID = f.DepartureAirportID\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN Passenger p ON b.PassengerID = p.PassengerID\nJOIN SecurityCheck sc ON p.PassengerID = sc.PassengerID\nWHERE sc.Status = 'Прошел'\nGROUP BY a.Name\nHAVING COUNT(sc.SecurityCheckID) > 5;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT a.Name AS AirportName, COUNT(sc.SecurityCheckID) AS SuccessfulChecks\nFROM Airport a\nJOIN Flight f ON a.AirportID = f.DepartureAirportID\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN Passenger p ON b.PassengerID = p.PassengerID\nJOIN SecurityCheck sc ON p.PassengerID = sc.PassengerID\nWHERE sc.Status = 'Прошел'\nGROUP BY a.AirportID, a.Name\nHAVING COUNT(sc.SecurityCheckID) > 5;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT ap.Name AS AirportName, COUNT(sc.SecurityCheckID) AS TotalSecurityChecks\nFROM Airport ap\nJOIN Passenger p ON ap.AirportID = (SELECT a.AirportID FROM Airport a WHERE a.IATA_Code = p.PassportNumber)\nJOIN SecurityCheck sc ON p.PassengerID = sc.PassengerID\nWHERE sc.Status = 'Прошел'\nGROUP BY ap.Name\nHAVING COUNT(sc.SecurityCheckID) > 5;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT a.Name AS AirportName, COUNT(sc.SecurityCheckID) AS TotalSecurityChecks\nFROM Airport a\nJOIN Flight f ON a.AirportID = f.DepartureAirportID\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN Passenger p ON b.PassengerID = p.PassengerID\nJOIN SecurityCheck sc ON p.PassengerID = sc.PassengerID\nWHERE sc.Status = 'Прошел'\nGROUP BY a.Name\nHAVING COUNT(sc.SecurityCheckID) > 5;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT a.Name AS AirportName, COUNT(sc.SecurityCheckID) AS SuccessfulSecurityChecks\nFROM Airport a\nJOIN SecurityCheck sc ON a.AirportID = (\n    SELECT f.DepartureAirportID \n    FROM Flight f \n    JOIN Booking b ON f.FlightID = b.FlightID \n    JOIN Passenger p ON b.PassengerID = p.PassengerID \n    WHERE p.PassengerID = sc.PassengerID\n)\nWHERE sc.Status = 'Прошел'\nGROUP BY a.Name\nHAVING COUNT(sc.SecurityCheckID) > 5;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT a.Name AS AirportName, COUNT(sc.SecurityCheckID) AS SuccessfulSecurityChecks\nFROM Airport a\nJOIN Passenger p ON a.AirportID = p.PassengerID\nJOIN SecurityCheck sc ON p.PassengerID = sc.PassengerID\nWHERE sc.Status = 'Прошел'\nGROUP BY a.Name\nHAVING COUNT(sc.SecurityCheckID) > 5;",
            "gigachat_response": "SELECT a.Name AS AirportName, COUNT(sc.SecurityCheckID) AS SuccessfulSecurityChecks\nFROM Airport a\nJOIN SecurityCheck sc ON a.AirportID = sc.PassengerID -- Assuming passenger's airport can be inferred from security check location\nWHERE sc.Status = 'Прошел'\nGROUP BY a.Name\nHAVING COUNT(sc.SecurityCheckID) > 5;",
            "gigachat_response_ru": "SELECT a.Name AS AirportName, COUNT(sc.SecurityCheckID) AS SuccessfulSecurityChecks\nFROM Airport a\nJOIN SecurityCheck sc ON a.AirportID = sc.PassengerID % 100 + 100 -- Предположим, что аэропорт ID пассажира определяется последним двузначным числом паспорта плюс 100\nWHERE sc.Status = 'Прошел'\nGROUP BY a.Name\nHAVING COUNT(sc.SecurityCheckID) > 5;"
        },
        {
            "question": "Какие пассажиры имеют более 1 неуспешной проверки безопасности?",
            "sql_query": "SELECT p.FirstName, p.LastName, COUNT(sc.SecurityCheckID) AS TotalSecurityChecks\nFROM Passenger p\nJOIN SecurityCheck sc ON p.PassengerID = sc.PassengerID\nWHERE sc.Status = 'Не прошел'\nGROUP BY p.FirstName, p.LastName\nHAVING COUNT(sc.SecurityCheckID) > 1;",
            "gpt-4o_response": "SELECT p.FirstName, p.LastName, COUNT(sc.SecurityCheckID) AS FailedChecks\nFROM Passenger p\nJOIN SecurityCheck sc ON p.PassengerID = sc.PassengerID\nWHERE sc.Status = 'Не прошел'\nGROUP BY p.FirstName, p.LastName\nHAVING COUNT(sc.SecurityCheckID) > 1;",
            "gpt-4o_response_ru": "SELECT p.FirstName, p.LastName, COUNT(sc.SecurityCheckID) AS FailedChecks\nFROM Passenger p\nJOIN SecurityCheck sc ON p.PassengerID = sc.PassengerID\nWHERE sc.Status = 'Не прошел'\nGROUP BY p.FirstName, p.LastName\nHAVING COUNT(sc.SecurityCheckID) > 1;",
            "google/gemini-2.0-flash-001_response": "SELECT p.FirstName, p.LastName\nFROM Passenger p\nJOIN SecurityCheck sc ON p.PassengerID = sc.PassengerID\nWHERE sc.Status = 'Не прошел'\nGROUP BY p.PassengerID, p.FirstName, p.LastName\nHAVING COUNT(sc.SecurityCheckID) > 1;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT p.FirstName, p.LastName\nFROM Passenger p\nJOIN SecurityCheck sc ON p.PassengerID = sc.PassengerID\nWHERE sc.Status = 'Не прошел'\nGROUP BY p.PassengerID, p.FirstName, p.LastName\nHAVING COUNT(sc.SecurityCheckID) > 1;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT p.FirstName, p.LastName, COUNT(sc.SecurityCheckID) AS TotalSecurityChecks\nFROM Passenger p\nJOIN SecurityCheck sc ON p.PassengerID = sc.PassengerID\nWHERE sc.Status = 'Не прошел'\nGROUP BY p.FirstName, p.LastName\nHAVING COUNT(sc.SecurityCheckID) > 1;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT p.FirstName, p.LastName, COUNT(sc.SecurityCheckID) AS TotalFailedSecurityChecks\nFROM Passenger p\nJOIN SecurityCheck sc ON p.PassengerID = sc.PassengerID\nWHERE sc.Status = 'Не прошел'\nGROUP BY p.FirstName, p.LastName\nHAVING COUNT(sc.SecurityCheckID) > 1;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT p.FirstName, p.LastName, COUNT(sc.SecurityCheckID) AS FailedSecurityChecks\nFROM Passenger p\nJOIN SecurityCheck sc ON p.PassengerID = sc.PassengerID\nWHERE sc.Status = 'Не прошел'\nGROUP BY p.FirstName, p.LastName\nHAVING COUNT(sc.SecurityCheckID) > 1;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT p.FirstName, p.LastName, COUNT(sc.SecurityCheckID) AS FailedSecurityChecks\nFROM Passenger p\nJOIN SecurityCheck sc ON p.PassengerID = sc.PassengerID\nWHERE sc.Status = 'Не прошел'\nGROUP BY p.FirstName, p.LastName\nHAVING COUNT(sc.SecurityCheckID) > 1;",
            "gigachat_response": "SELECT p.FirstName, p.LastName, COUNT(sc.SecurityCheckID) AS FailedSecurityChecks\nFROM Passenger p\nJOIN SecurityCheck sc ON p.PassengerID = sc.PassengerID\nWHERE sc.Status <> 'Прошел'\nGROUP BY p.FirstName, p.LastName\nHAVING COUNT(sc.SecurityCheckID) > 1;",
            "gigachat_response_ru": "SELECT p.FirstName, p.LastName, COUNT(sc.SecurityCheckID) AS FailedSecurityChecks\nFROM Passenger p\nJOIN SecurityCheck sc ON p.PassengerID = sc.PassengerID\nWHERE sc.Status <> 'Прошел'\nGROUP BY p.FirstName, p.LastName\nHAVING COUNT(sc.SecurityCheckID) > 1;"
        },
        {
            "question": "Какие модели самолетов имеют более 2 завершенных технических обслуживаний?",
            "sql_query": "SELECT a.Model, COUNT(m.MaintenanceID) AS TotalMaintenances\nFROM Aircraft a\nJOIN Maintenance m ON a.AircraftID = m.AircraftID\nWHERE m.Status = 'Завершено'\nGROUP BY a.Model\nHAVING COUNT(m.MaintenanceID) > 2;",
            "gpt-4o_response": "SELECT ac.Model, COUNT(m.MaintenanceID) AS CompletedMaintenances\nFROM Aircraft ac\nJOIN Maintenance m ON ac.AircraftID = m.AircraftID\nWHERE m.Status = 'Завершено'\nGROUP BY ac.Model\nHAVING COUNT(m.MaintenanceID) > 2;",
            "gpt-4o_response_ru": "SELECT ac.Model, COUNT(m.MaintenanceID) AS CompletedMaintenances\nFROM Aircraft ac\nJOIN Maintenance m ON ac.AircraftID = m.AircraftID\nWHERE m.Status = 'Завершено'\nGROUP BY ac.Model\nHAVING COUNT(m.MaintenanceID) > 2;",
            "google/gemini-2.0-flash-001_response": "SELECT a.Model\nFROM Aircraft a\nJOIN Maintenance m ON a.AircraftID = m.AircraftID\nWHERE m.Status = 'Завершено'\nGROUP BY a.Model\nHAVING COUNT(m.MaintenanceID) > 2;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT a.Model\nFROM Aircraft a\nJOIN Maintenance m ON a.AircraftID = m.AircraftID\nWHERE m.Status = 'Завершено'\nGROUP BY a.Model\nHAVING COUNT(m.MaintenanceID) > 2;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT a.Model AS AircraftModel, COUNT(m.MaintenanceID) AS TotalMaintenances\nFROM Aircraft a\nJOIN Maintenance m ON a.AircraftID = m.AircraftID\nWHERE m.Status = 'Завершено'\nGROUP BY a.Model\nHAVING COUNT(m.MaintenanceID) > 2;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT a.Model AS AircraftModel, COUNT(m.MaintenanceID) AS TotalMaintenances\nFROM Aircraft a\nJOIN Maintenance m ON a.AircraftID = m.AircraftID\nWHERE m.Status = 'Завершено'\nGROUP BY a.Model\nHAVING COUNT(m.MaintenanceID) > 2;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT a.Model, COUNT(m.MaintenanceID) AS CompletedMaintenances\nFROM Aircraft a\nJOIN Maintenance m ON a.AircraftID = m.AircraftID\nWHERE m.Status = 'Завершено'\nGROUP BY a.Model\nHAVING COUNT(m.MaintenanceID) > 2;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT a.Model, COUNT(m.MaintenanceID) AS CompletedMaintenances\nFROM Aircraft a\nJOIN Maintenance m ON a.AircraftID = m.AircraftID\nWHERE m.Status = 'Завершено'\nGROUP BY a.Model\nHAVING COUNT(m.MaintenanceID) > 2;",
            "gigachat_response": "SELECT ac.Model, COUNT(m.MaintenanceID) AS CompletedMaintenanceCount\nFROM Aircraft ac\nJOIN Maintenance m ON ac.AircraftID = m.AircraftID\nWHERE m.Status = 'Завершено'\nGROUP BY ac.Model\nHAVING COUNT(m.MaintenanceID) > 2;",
            "gigachat_response_ru": "SELECT ac.Model, COUNT(*) AS CompletedMaintenanceCount\nFROM Aircraft ac\nJOIN Maintenance m ON ac.AircraftID = m.AircraftID\nWHERE m.Status = 'Завершено'\nGROUP BY ac.Model\nHAVING COUNT(*) > 2;"
        },
        {
            "question": "Какие авиакомпании имеют более 10 принятых единиц багажа?",
            "sql_query": "SELECT al.Name AS AirlineName, COUNT(bg.BaggageID) AS TotalBaggage\nFROM Airline al\nJOIN Flight f ON al.AirlineID = f.AirlineID\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN Baggage bg ON b.BookingID = bg.BookingID\nWHERE bg.Status = 'Принято'\nGROUP BY al.Name\nHAVING COUNT(bg.BaggageID) > 10;",
            "gpt-4o_response": "SELECT al.Name AS AirlineName, COUNT(b.BaggageID) AS AcceptedBaggageCount\nFROM Airline al\nJOIN Flight f ON al.AirlineID = f.AirlineID\nJOIN Booking bk ON f.FlightID = bk.FlightID\nJOIN Baggage b ON bk.BookingID = b.BookingID\nWHERE b.Status = 'Принято'\nGROUP BY al.Name\nHAVING COUNT(b.BaggageID) > 10;",
            "gpt-4o_response_ru": "SELECT al.Name AS AirlineName, COUNT(b.BaggageID) AS AcceptedBaggageCount\nFROM Airline al\nJOIN Flight f ON al.AirlineID = f.AirlineID\nJOIN Booking bk ON f.FlightID = bk.FlightID\nJOIN Baggage b ON bk.BookingID = b.BookingID\nWHERE b.Status = 'Принято'\nGROUP BY al.Name\nHAVING COUNT(b.BaggageID) > 10;",
            "google/gemini-2.0-flash-001_response": "SELECT a.Name AS AirlineName, COUNT(bg.BaggageID) AS AcceptedBaggageCount\nFROM Airline a\nJOIN Flight f ON a.AirlineID = f.AirlineID\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN Baggage bg ON b.BookingID = bg.BookingID\nWHERE bg.Status = 'Принято'\nGROUP BY a.Name\nHAVING COUNT(bg.BaggageID) > 10;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT a.Name AS AirlineName, COUNT(bg.BaggageID) AS AcceptedBaggageCount\nFROM Airline a\nJOIN Flight f ON a.AirlineID = f.AirlineID\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN Baggage bg ON b.BookingID = bg.BookingID\nWHERE bg.Status = 'Принято'\nGROUP BY a.Name\nHAVING COUNT(bg.BaggageID) > 10;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT a.Name AS AirlineName, COUNT(bg.BaggageID) AS TotalBaggage\nFROM Airline a\nJOIN Flight f ON a.AirlineID = f.AirlineID\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN Baggage bg ON b.BookingID = bg.BookingID\nWHERE bg.Status = 'Принято'\nGROUP BY a.Name\nHAVING COUNT(bg.BaggageID) > 10;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT a.Name AS AirlineName, COUNT(bg.BaggageID) AS TotalBaggage\nFROM Airline a\nJOIN Flight f ON a.AirlineID = f.AirlineID\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN Baggage bg ON b.BookingID = bg.BookingID\nWHERE bg.Status = 'Принято'\nGROUP BY a.Name\nHAVING COUNT(bg.BaggageID) > 10;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT a.Name AS AirlineName, COUNT(bg.BaggageID) AS AcceptedBaggageCount\nFROM Airline a\nJOIN Flight f ON a.AirlineID = f.AirlineID\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN Baggage bg ON b.BookingID = bg.BookingID\nWHERE bg.Status = 'Принято'\nGROUP BY a.Name\nHAVING COUNT(bg.BaggageID) > 10;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT a.Name AS AirlineName, COUNT(bg.BaggageID) AS AcceptedBaggageCount\nFROM Airline a\nJOIN Flight f ON a.AirlineID = f.AirlineID\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN Baggage bg ON b.BookingID = bg.BookingID\nWHERE bg.Status = 'Принято'\nGROUP BY a.Name\nHAVING COUNT(bg.BaggageID) > 10;",
            "gigachat_response": "SELECT al.Name AS AirlineName, COUNT(bg.BaggageID) AS AcceptedBaggageCount\nFROM Airline al\nJOIN Flight fl ON al.AirlineID = fl.AirlineID\nJOIN Booking bk ON fl.FlightID = bk.FlightID\nJOIN Baggage bg ON bk.BookingID = bg.BookingID\nWHERE bg.Status = 'Принято'\nGROUP BY al.Name\nHAVING COUNT(bg.BaggageID) > 10;",
            "gigachat_response_ru": "SELECT a.Name AS AirlineName, COUNT(bg.BaggageID) AS AcceptedBaggageCount\nFROM Airline a\nJOIN Flight f ON a.AirlineID = f.AirlineID\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN Baggage bg ON b.BookingID = bg.BookingID\nWHERE bg.Status = 'Принято'\nGROUP BY a.Name\nHAVING COUNT(bg.BaggageID) > 10;"
        },
        {
            "question": "Какие пассажиры потратили более 3000 на подтвержденные бронирования?",
            "sql_query": "SELECT p.FirstName, p.LastName, SUM(b.Price) AS TotalSpent\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nWHERE b.Status = 'Подтверждено'\nGROUP BY p.FirstName, p.LastName\nHAVING SUM(b.Price) > 3000;",
            "gpt-4o_response": "SELECT p.FirstName, p.LastName, SUM(b.Price) AS TotalSpent\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nWHERE b.Status = 'Подтверждено'\nGROUP BY p.FirstName, p.LastName\nHAVING SUM(b.Price) > 3000;",
            "gpt-4o_response_ru": "SELECT p.FirstName, p.LastName, SUM(b.Price) AS TotalSpent\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nWHERE b.Status = 'Подтверждено'\nGROUP BY p.FirstName, p.LastName\nHAVING SUM(b.Price) > 3000;",
            "google/gemini-2.0-flash-001_response": "SELECT p.FirstName, p.LastName\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nWHERE b.Status = 'Подтверждено' AND b.Price > 3000;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT p.FirstName, p.LastName\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nWHERE b.Status = 'Подтверждено'\nGROUP BY p.PassengerID, p.FirstName, p.LastName\nHAVING SUM(b.Price) > 3000;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT p.FirstName, p.LastName, SUM(b.Price) AS TotalSpent\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nWHERE b.Status = 'Подтверждено'\nGROUP BY p.FirstName, p.LastName\nHAVING SUM(b.Price) > 3000;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT p.FirstName, p.LastName, SUM(b.Price) AS TotalSpent\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nWHERE b.Status = 'Подтверждено'\nGROUP BY p.FirstName, p.LastName\nHAVING SUM(b.Price) > 3000;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT p.FirstName, p.LastName, SUM(b.Price) AS TotalSpent\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nWHERE b.Status = 'Подтверждено'\nGROUP BY p.FirstName, p.LastName\nHAVING SUM(b.Price) > 3000;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT p.FirstName, p.LastName, SUM(b.Price) AS TotalSpent\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nWHERE b.Status = 'Подтверждено'\nGROUP BY p.FirstName, p.LastName\nHAVING SUM(b.Price) > 3000;",
            "gigachat_response": "SELECT p.FirstName, p.LastName, SUM(b.Price) AS TotalSpent\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nWHERE b.Status = 'Подтверждено'\nGROUP BY p.FirstName, p.LastName\nHAVING SUM(b.Price) > 3000;",
            "gigachat_response_ru": "SELECT p.FirstName, p.LastName, SUM(b.Price) AS TotalSpent\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nWHERE b.Status = 'Подтверждено'\nGROUP BY p.FirstName, p.LastName\nHAVING SUM(b.Price) > 3000;"
        },
        {
            "question": "Какие модели самолетов имеют среднюю продолжительность рейса более 120 минут?",
            "sql_query": "SELECT a.Model, AVG(f.DurationMinutes) AS AvgFlightDuration\nFROM Aircraft a\nJOIN Flight f ON a.AircraftID = f.AircraftID\nGROUP BY a.Model\nHAVING AVG(f.DurationMinutes) > 120;",
            "gpt-4o_response": "SELECT ac.Model, AVG(f.DurationMinutes) AS AvgFlightDuration\nFROM Aircraft ac\nJOIN Flight f ON ac.AircraftID = f.AircraftID\nGROUP BY ac.Model\nHAVING AVG(f.DurationMinutes) > 120;",
            "gpt-4o_response_ru": "SELECT ac.Model\nFROM Aircraft ac\nJOIN Flight f ON ac.AircraftID = f.AircraftID\nGROUP BY ac.Model\nHAVING AVG(f.DurationMinutes) > 120;",
            "google/gemini-2.0-flash-001_response": "SELECT a.Model AS AircraftModel, AVG(f.DurationMinutes) AS AverageFlightDuration\nFROM Aircraft a\nJOIN Flight f ON a.AircraftID = f.AircraftID\nGROUP BY a.Model\nHAVING AVG(f.DurationMinutes) > 120;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT a.Model\nFROM Aircraft a\nJOIN Flight f ON a.AircraftID = f.AircraftID\nGROUP BY a.Model\nHAVING AVG(f.DurationMinutes) > 120;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT a.Model AS AircraftModel, AVG(f.DurationMinutes) AS AvgFlightDuration\nFROM Aircraft a\nJOIN Flight f ON a.AircraftID = f.AircraftID\nGROUP BY a.Model\nHAVING AVG(f.DurationMinutes) > 120;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT a.Model AS AircraftModel, AVG(f.DurationMinutes) AS AvgFlightDuration\nFROM Aircraft a\nJOIN Flight f ON a.AircraftID = f.AircraftID\nGROUP BY a.Model\nHAVING AVG(f.DurationMinutes) > 120;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT a.Model, AVG(f.DurationMinutes) AS AvgFlightDuration\nFROM Aircraft a\nJOIN Flight f ON a.AircraftID = f.AircraftID\nGROUP BY a.Model\nHAVING AVG(f.DurationMinutes) > 120;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT a.Model, AVG(f.DurationMinutes) AS AvgFlightDuration\nFROM Aircraft a\nJOIN Flight f ON a.AircraftID = f.AircraftID\nGROUP BY a.Model\nHAVING AVG(f.DurationMinutes) > 120;",
            "gigachat_response": "SELECT ac.Model, AVG(fl.DurationMinutes) AS AverageDuration\nFROM Aircraft ac\nJOIN Flight fl ON ac.AircraftID = fl.AircraftID\nGROUP BY ac.Model\nHAVING AVG(fl.DurationMinutes) > 120;",
            "gigachat_response_ru": "SELECT ac.Model, AVG(fl.DurationMinutes) AS AverageDuration\nFROM Aircraft ac\nJOIN Flight fl ON ac.AircraftID = fl.AircraftID\nGROUP BY ac.Model\nHAVING AVG(fl.DurationMinutes) > 120;"
        },
        {
            "question": "Какие авиакомпании имеют среднюю стоимость технического обслуживания более 15000?",
            "sql_query": "SELECT al.Name AS AirlineName, AVG(m.Cost) AS AvgMaintenanceCost\nFROM Airline al\nJOIN Flight f ON al.AirlineID = f.AirlineID\nJOIN Aircraft a ON f.AircraftID = a.AircraftID\nJOIN Maintenance m ON a.AircraftID = m.AircraftID\nGROUP BY al.Name\nHAVING AVG(m.Cost) > 15000;",
            "gpt-4o_response": "SELECT al.Name AS AirlineName, AVG(m.Cost) AS AvgMaintenanceCost\nFROM Airline al\nJOIN Flight f ON al.AirlineID = f.AirlineID\nJOIN Aircraft a ON f.AircraftID = a.AircraftID\nJOIN Maintenance m ON a.AircraftID = m.AircraftID\nGROUP BY al.Name\nHAVING AVG(m.Cost) > 15000;",
            "gpt-4o_response_ru": "SELECT al.Name AS AirlineName, AVG(m.Cost) AS AvgMaintenanceCost\nFROM Airline al\nJOIN Flight f ON al.AirlineID = f.AirlineID\nJOIN Aircraft a ON f.AircraftID = a.AircraftID\nJOIN Maintenance m ON a.AircraftID = m.AircraftID\nGROUP BY al.Name\nHAVING AVG(m.Cost) > 15000;",
            "google/gemini-2.0-flash-001_response": "SELECT a.Name AS AirlineName, AVG(m.Cost) AS AverageMaintenanceCost\nFROM Airline a\nJOIN Flight f ON a.AirlineID = f.AirlineID\nJOIN Aircraft ac ON f.AircraftID = ac.AircraftID\nJOIN Maintenance m ON ac.AircraftID = m.AircraftID\nGROUP BY a.Name\nHAVING AVG(m.Cost) > 15000;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT a.Name AS AirlineName, AVG(m.Cost) AS AverageMaintenanceCost\nFROM Airline a\nJOIN Flight f ON a.AirlineID = f.AirlineID\nJOIN Aircraft ac ON f.AircraftID = ac.AircraftID\nJOIN Maintenance m ON ac.AircraftID = m.AircraftID\nGROUP BY a.Name\nHAVING AVG(m.Cost) > 15000;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT a.Name AS AirlineName, AVG(m.Cost) AS AvgMaintenanceCost\nFROM Airline a\nJOIN Flight f ON a.AirlineID = f.AirlineID\nJOIN Aircraft ac ON f.AircraftID = ac.AircraftID\nJOIN Maintenance m ON ac.AircraftID = m.AircraftID\nGROUP BY a.Name\nHAVING AVG(m.Cost) > 15000;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT al.Name AS AirlineName, AVG(m.Cost) AS AvgMaintenanceCost\nFROM Airline al\nJOIN Flight f ON al.AirlineID = f.AirlineID\nJOIN Aircraft a ON f.AircraftID = a.AircraftID\nJOIN Maintenance m ON a.AircraftID = m.AircraftID\nGROUP BY al.Name\nHAVING AVG(m.Cost) > 15000;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT al.Name AS AirlineName, AVG(m.Cost) AS AvgMaintenanceCost\nFROM Airline al\nJOIN Flight f ON al.AirlineID = f.AirlineID\nJOIN Aircraft a ON f.AircraftID = a.AircraftID\nJOIN Maintenance m ON a.AircraftID = m.AircraftID\nGROUP BY al.Name\nHAVING AVG(m.Cost) > 15000;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT a.Name AS AirlineName, AVG(m.Cost) AS AvgMaintenanceCost\nFROM Airline a\nJOIN Flight f ON a.AirlineID = f.AirlineID\nJOIN Aircraft ac ON f.AircraftID = ac.AircraftID\nJOIN Maintenance m ON ac.AircraftID = m.AircraftID\nGROUP BY a.Name\nHAVING AVG(m.Cost) > 15000;",
            "gigachat_response": "SELECT al.Name AS AirlineName, AVG(m.Cost) AS AverageMaintenanceCost\nFROM Airline al\nJOIN Aircraft ac ON al.AirlineID = ac.Manufacturer -- Assuming aircrafts belong to airlines based on manufacturer\nJOIN Maintenance m ON ac.AircraftID = m.AircraftID\nGROUP BY al.Name\nHAVING AVG(m.Cost) > 15000;",
            "gigachat_response_ru": "SELECT a.Name AS AirlineName, AVG(m.Cost) AS AverageCost\nFROM Airline a\nJOIN Aircraft ac ON a.AirlineID = ac.Manufacturer -- Предположим, что производитель совпадает с авиакомпанией\nJOIN Maintenance m ON ac.AircraftID = m.AircraftID\nGROUP BY a.Name\nHAVING AVG(m.Cost) > 15000;"
        },
        {
            "question": "Какие пилоты были командирами экипажа более чем в 2 рейсах?",
            "sql_query": "SELECT p.FirstName, p.LastName, COUNT(c.CrewID) AS TotalFlightsAsCaptain\nFROM Pilot p\nJOIN Crew c ON p.PilotID = c.PilotID\nWHERE c.Role = 'Командир экипажа'\nGROUP BY p.FirstName, p.LastName\nHAVING COUNT(c.CrewID) > 2;",
            "gpt-4o_response": "SELECT p.FirstName, p.LastName, COUNT(c.CrewID) AS TotalFlightsAsCommander\nFROM Pilot p\nJOIN Crew c ON p.PilotID = c.PilotID\nWHERE c.Role = 'Командир экипажа'\nGROUP BY p.FirstName, p.LastName\nHAVING COUNT(c.CrewID) > 2;",
            "gpt-4o_response_ru": "SELECT p.FirstName, p.LastName, COUNT(c.FlightID) AS TotalFlights\nFROM Pilot p\nJOIN Crew c ON p.PilotID = c.PilotID\nWHERE c.Role = 'Командир экипажа'\nGROUP BY p.FirstName, p.LastName\nHAVING COUNT(c.FlightID) > 2;",
            "google/gemini-2.0-flash-001_response": "SELECT p.FirstName, p.LastName, COUNT(c.FlightID) AS NumberOfFlights\nFROM Pilot p\nJOIN Crew c ON p.PilotID = c.PilotID\nWHERE c.Role = 'Командир экипажа'\nGROUP BY p.PilotID, p.FirstName, p.LastName\nHAVING COUNT(c.FlightID) > 2;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT p.FirstName, p.LastName\nFROM Pilot p\nJOIN Crew c ON p.PilotID = c.PilotID\nWHERE c.Role = 'Командир экипажа'\nGROUP BY p.PilotID, p.FirstName, p.LastName\nHAVING COUNT(DISTINCT c.FlightID) > 2;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT p.FirstName, p.LastName, COUNT(c.CrewID) AS TotalFlightsAsCommander\nFROM Pilot p\nJOIN Crew c ON p.PilotID = c.PilotID\nWHERE c.Role = 'Командир экипажа'\nGROUP BY p.FirstName, p.LastName\nHAVING COUNT(c.CrewID) > 2;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT p.FirstName, p.LastName, COUNT(c.CrewID) AS TotalFlightsAsCommander\nFROM Pilot p\nJOIN Crew c ON p.PilotID = c.PilotID\nWHERE c.Role = 'Командир экипажа'\nGROUP BY p.FirstName, p.LastName\nHAVING COUNT(c.CrewID) > 2",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT p.PilotID, p.FirstName, p.LastName, COUNT(c.FlightID) AS TotalFlightsAsCommander\nFROM Pilot p\nJOIN Crew c ON p.PilotID = c.PilotID\nWHERE c.Role = 'Командир экипажа'\nGROUP BY p.PilotID, p.FirstName, p.LastName\nHAVING COUNT(c.FlightID) > 2;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT p.FirstName, p.LastName, COUNT(c.FlightID) AS TotalFlightsAsCommander\nFROM Pilot p\nJOIN Crew c ON p.PilotID = c.PilotID\nWHERE c.Role = 'Командир экипажа'\nGROUP BY p.PilotID, p.FirstName, p.LastName\nHAVING COUNT(c.FlightID) > 2;",
            "gigachat_response": "SELECT p.PilotID, p.FirstName, p.LastName, COUNT(c.CrewID) AS NumberOfFlights\nFROM Pilot p\nJOIN Crew c ON p.PilotID = c.PilotID\nWHERE c.Role = 'Командир экипажа'\nGROUP BY p.PilotID, p.FirstName, p.LastName\nHAVING COUNT(c.CrewID) > 2;",
            "gigachat_response_ru": "SELECT p.FirstName, p.LastName, COUNT(c.CrewID) AS FlightsAsCaptain\nFROM Pilot p\nJOIN Crew c ON p.PilotID = c.PilotID\nWHERE c.Role = 'Командир экипажа'\nGROUP BY p.FirstName, p.LastName\nHAVING COUNT(c.CrewID) > 2;"
        },
        {
            "question": "Какие модели самолетов имеют более 3 подтвержденных бронирований?",
            "sql_query": "SELECT a.Model, COUNT(b.BookingID) AS TotalBookings\nFROM Aircraft a\nJOIN Flight f ON a.AircraftID = f.AircraftID\nJOIN Booking b ON f.FlightID = b.FlightID\nWHERE b.Status = 'Подтверждено'\nGROUP BY a.Model\nHAVING COUNT(b.BookingID) > 3;",
            "gpt-4o_response": "SELECT ac.Model, COUNT(b.BookingID) AS ConfirmedBookings\nFROM Aircraft ac\nJOIN Flight f ON ac.AircraftID = f.AircraftID\nJOIN Booking b ON f.FlightID = b.FlightID\nWHERE b.Status = 'Подтверждено'\nGROUP BY ac.Model\nHAVING COUNT(b.BookingID) > 3;",
            "gpt-4o_response_ru": "SELECT ac.Model, COUNT(b.BookingID) AS ConfirmedBookings\nFROM Aircraft ac\nJOIN Flight f ON ac.AircraftID = f.AircraftID\nJOIN Booking b ON f.FlightID = b.FlightID\nWHERE b.Status = 'Подтверждено'\nGROUP BY ac.Model\nHAVING COUNT(b.BookingID) > 3;",
            "google/gemini-2.0-flash-001_response": "SELECT a.Model AS AircraftModel, COUNT(b.BookingID) AS TotalBookings\nFROM Aircraft a\nJOIN Flight f ON a.AircraftID = f.AircraftID\nJOIN Booking b ON f.FlightID = b.FlightID\nWHERE b.Status = 'Подтверждено'\nGROUP BY a.Model\nHAVING COUNT(b.BookingID) > 3;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT a.Model\nFROM Aircraft a\nJOIN Flight f ON a.AircraftID = f.AircraftID\nJOIN Booking b ON f.FlightID = b.FlightID\nWHERE b.Status = 'Подтверждено'\nGROUP BY a.Model\nHAVING COUNT(DISTINCT b.BookingID) > 3;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT a.Model AS AircraftModel, COUNT(DISTINCT b.BookingID) AS TotalBookings\nFROM Aircraft a\nJOIN Flight f ON a.AircraftID = f.AircraftID\nJOIN Booking b ON f.FlightID = b.FlightID\nWHERE b.Status = 'Подтверждено'\nGROUP BY a.Model\nHAVING COUNT(DISTINCT b.BookingID) > 3;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT a.Model AS AircraftModel, COUNT(b.BookingID) AS TotalBookings\nFROM Aircraft a\nJOIN Flight f ON a.AircraftID = f.AircraftID\nJOIN Booking b ON f.FlightID = b.FlightID\nWHERE b.Status = 'Подтверждено'\nGROUP BY a.Model\nHAVING COUNT(b.BookingID) > 3;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT a.Model AS AircraftModel, COUNT(b.BookingID) AS ConfirmedBookings\nFROM Aircraft a\nJOIN Flight f ON a.AircraftID = f.AircraftID\nJOIN Booking b ON f.FlightID = b.FlightID\nWHERE b.Status = 'Подтверждено'\nGROUP BY a.Model\nHAVING COUNT(b.BookingID) > 3;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT a.Model AS AircraftModel, COUNT(b.BookingID) AS ConfirmedBookings\nFROM Aircraft a\nJOIN Flight f ON a.AircraftID = f.AircraftID\nJOIN Booking b ON f.FlightID = b.FlightID\nWHERE b.Status = 'Подтверждено'\nGROUP BY a.Model\nHAVING COUNT(b.BookingID) > 3;",
            "gigachat_response": "SELECT ac.Model, COUNT(b.BookingID) AS ConfirmedBookingsCount\nFROM Aircraft ac\nJOIN Flight fl ON ac.AircraftID = fl.AircraftID\nJOIN Booking b ON fl.FlightID = b.FlightID\nWHERE b.Status = 'Подтверждено'\nGROUP BY ac.Model\nHAVING COUNT(b.BookingID) > 3;",
            "gigachat_response_ru": "SELECT ac.Model, COUNT(b.BookingID) AS ConfirmedBookingsCount\nFROM Aircraft ac\nJOIN Flight fl ON ac.AircraftID = fl.AircraftID\nJOIN Booking b ON fl.FlightID = b.FlightID\nWHERE b.Status = 'Подтверждено'\nGROUP BY ac.Model\nHAVING COUNT(b.BookingID) > 3;"
        },
        {
            "question": "Какие аэропорты имеют среднее время проверки безопасности менее 12:00 и более 2 проверок?",
            "sql_query": "SELECT ap.Name AS AirportName, AVG(sc.CheckTime) AS AvgSecurityCheckTime\nFROM Airport ap\nJOIN Flight f ON ap.AirportID = f.DepartureAirportID\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN SecurityCheck sc ON b.PassengerID = sc.PassengerID\nGROUP BY ap.Name\nHAVING COUNT(sc.SecurityCheckID) > 2 AND AVG(CAST(sc.CheckTime AS TIME)) < '12:00:00';",
            "gpt-4o_response": "SELECT ap.Name AS AirportName, AVG(TIMESTAMPDIFF(MINUTE, sc.CheckTime, '12:00:00')) AS AvgSecurityCheckTime, COUNT(sc.SecurityCheckID) AS TotalChecks\nFROM Airport ap\nJOIN Flight f ON ap.AirportID = f.DepartureAirportID\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN SecurityCheck sc ON b.PassengerID = sc.PassengerID\nGROUP BY ap.Name\nHAVING AVG(TIMESTAMPDIFF(MINUTE, sc.CheckTime, '12:00:00')) < 720 AND COUNT(sc.SecurityCheckID) > 2;",
            "gpt-4o_response_ru": "SELECT ap.Name AS AirportName, AVG(TIMESTAMPDIFF(MINUTE, sc.CheckTime, sc.CheckTime)) AS AvgSecurityCheckTime, COUNT(sc.SecurityCheckID) AS TotalChecks\nFROM Airport ap\nJOIN Flight f ON ap.AirportID = f.DepartureAirportID\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN SecurityCheck sc ON b.PassengerID = sc.PassengerID\nGROUP BY ap.Name\nHAVING AVG(TIMESTAMPDIFF(MINUTE, sc.CheckTime, sc.CheckTime)) < 720 AND COUNT(sc.SecurityCheckID) > 2;",
            "google/gemini-2.0-flash-001_response": "SELECT \n    ap.Name AS AirportName,\n    AVG(STRFTIME('%H', sc.CheckTime) + STRFTIME('%M', sc.CheckTime)/60.0) AS AvgCheckInHour,\n    COUNT(sc.SecurityCheckID) AS NumberOfChecks\nFROM Airport ap\nJOIN Flight f ON ap.AirportID = f.DepartureAirportID\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN Passenger p ON b.PassengerID = p.PassengerID\nJOIN SecurityCheck sc ON p.PassengerID = sc.PassengerID\nGROUP BY ap.Name\nHAVING AVG(STRFTIME('%H', sc.CheckTime) + STRFTIME('%M', sc.CheckTime)/60.0) < 12 AND COUNT(sc.SecurityCheckID) > 2;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    a.Name AS AirportName,\n    COUNT(sc.SecurityCheckID) AS NumberOfSecurityChecks,\n    AVG(STRFTIME('%H', sc.CheckTime) + STRFTIME('%M', sc.CheckTime)/60.0) AS AverageCheckTime\nFROM Airport a\nJOIN Flight f ON a.AirportID = f.DepartureAirportID\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN Passenger p ON b.PassengerID = p.PassengerID\nJOIN SecurityCheck sc ON p.PassengerID = sc.PassengerID\nGROUP BY a.Name\nHAVING AverageCheckTime < 12 AND COUNT(sc.SecurityCheckID) > 2;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT a.Name AS AirportName, AVG(sc.CheckTime) AS AvgSecurityCheckTime, COUNT(sc.SecurityCheckID) AS TotalSecurityChecks\nFROM Airport a\nJOIN SecurityCheck sc ON a.AirportID = (SELECT ap.AirportID FROM Passenger p JOIN Booking b ON p.PassengerID = b.PassengerID JOIN Flight f ON b.FlightID = f.FlightID JOIN Airport ap ON f.DepartureAirportID = ap.AirportID WHERE p.PassengerID = sc.PassengerID)\nGROUP BY a.Name\nHAVING AVG(sc.CheckTime) < '12:00:00' AND COUNT(sc.SecurityCheckID) > 2;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT a.Name AS AirportName, AVG(TIME(s.CheckTime)) AS AvgSecurityCheckTime, COUNT(s.SecurityCheckID) AS TotalSecurityChecks\nFROM Airport a\nJOIN Flight f ON a.AirportID = f.DepartureAirportID\nJOIN Passenger p ON f.FlightID = p.PassengerID\nJOIN SecurityCheck s ON p.PassengerID = s.PassengerID\nWHERE s.Status = 'Прошел'\nGROUP BY a.Name\nHAVING AVG(TIME(s.CheckTime)) < '12:00:00' AND COUNT(s.SecurityCheckID) > 2;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT a.Name AS AirportName, \n       AVG(TIME_TO_SEC(TIME(sc.CheckTime))) / 3600 AS AvgCheckTimeHour,\n       COUNT(sc.SecurityCheckID) AS TotalChecks\nFROM Airport a\nJOIN SecurityCheck sc ON 1=1\nJOIN Passenger p ON sc.PassengerID = p.PassengerID\nJOIN Booking b ON p.PassengerID = b.PassengerID\nJOIN Flight f ON b.FlightID = f.FlightID\nWHERE (f.DepartureAirportID = a.AirportID OR f.ArrivalAirportID = a.AirportID)\nGROUP BY a.Name\nHAVING AvgCheckTimeHour < 12 AND TotalChecks > 2;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT a.Name AS AirportName, \n       AVG(TIME_TO_SEC(TIME(sc.CheckTime))) / 3600 AS AvgCheckTimeHours,\n       COUNT(sc.SecurityCheckID) AS TotalChecks\nFROM Airport a\nJOIN Passenger p ON 1=1\nJOIN SecurityCheck sc ON p.PassengerID = sc.PassengerID\nWHERE sc.Status = 'Прошел'\nGROUP BY a.Name\nHAVING AVG(TIME_TO_SEC(TIME(sc.CheckTime))) / 3600 < 12 \n   AND COUNT(sc.SecurityCheckID) > 2;",
            "gigachat_response": "SELECT \n    a.Name AS AirportName,\n    COUNT(sc.SecurityCheckID) AS NumberOfSecurityChecks,\n    TIME(AVG(TIMEDIFF(sc.CheckTime, '00:00:00'))) AS AverageSecurityCheckTime\nFROM \n    Airport a\nJOIN \n    SecurityCheck sc ON a.AirportID = sc.PassengerID % 10 + 100 -- Assuming passenger ID modulo operation maps back to airport ID\nGROUP BY \n    a.Name\nHAVING \n    HOUR(AverageSecurityCheckTime) < 12 AND NumberOfSecurityChecks > 2;",
            "gigachat_response_ru": "SELECT \n    a.Name AS AirportName,\n    AVG(TIME_TO_SEC(TIMEDIFF(sc.CheckTime, MINUTE('00:00'))) / 60) AS AverageSecurityCheckTime,\n    COUNT(*) AS NumberOfChecks\nFROM \n    Airport a\nJOIN \n    SecurityCheck sc ON a.AirportID = sc.PassengerID % 100 + 100 -- Предположим, что аэропорт ID связан с пассажирским ID через остаток от деления\nGROUP BY \n    a.Name\nHAVING \n    AverageSecurityCheckTime < 12 AND NumberOfChecks > 2;"
        },
        {
            "question": "Какие авиакомпании имеют более 2 неуспешных проверок безопасности?",
            "sql_query": "SELECT al.Name AS AirlineName, COUNT(sc.SecurityCheckID) AS TotalSecurityChecks\nFROM Airline al\nJOIN Flight f ON al.AirlineID = f.AirlineID\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN SecurityCheck sc ON b.PassengerID = sc.PassengerID\nWHERE sc.Status = 'Не прошел'\nGROUP BY al.Name\nHAVING COUNT(sc.SecurityCheckID) > 2;",
            "gpt-4o_response": "SELECT al.Name AS AirlineName, COUNT(sc.SecurityCheckID) AS FailedSecurityChecks\nFROM Airline al\nJOIN Flight f ON al.AirlineID = f.AirlineID\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN SecurityCheck sc ON b.PassengerID = sc.PassengerID\nWHERE sc.Status = 'Не прошел'\nGROUP BY al.Name\nHAVING COUNT(sc.SecurityCheckID) > 2;",
            "gpt-4o_response_ru": "SELECT al.Name AS AirlineName, COUNT(sc.SecurityCheckID) AS FailedSecurityChecks\nFROM Airline al\nJOIN Flight f ON al.AirlineID = f.AirlineID\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN SecurityCheck sc ON b.PassengerID = sc.PassengerID\nWHERE sc.Status = 'Не прошел'\nGROUP BY al.Name\nHAVING COUNT(sc.SecurityCheckID) > 2;",
            "google/gemini-2.0-flash-001_response": "SELECT a.Name AS AirlineName\nFROM Airline a\nJOIN Pilot p ON a.AirlineID = p.AirlineID\nJOIN Crew c ON p.PilotID = c.PilotID\nJOIN Flight f ON c.FlightID = f.FlightID\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN Passenger pa ON b.PassengerID = pa.PassengerID\nJOIN SecurityCheck sc ON pa.PassengerID = sc.PassengerID\nWHERE sc.Status = 'Не прошел'\nGROUP BY a.Name\nHAVING COUNT(DISTINCT sc.PassengerID) > 2;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT a.Name AS AirlineName, COUNT(DISTINCT sc.SecurityCheckID) AS FailedSecurityChecks\nFROM Airline a\nJOIN Flight f ON a.AirlineID = f.AirlineID\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN Passenger p ON b.PassengerID = p.PassengerID\nJOIN SecurityCheck sc ON p.PassengerID = sc.PassengerID\nWHERE sc.Status = 'Не прошел'\nGROUP BY a.Name\nHAVING COUNT(DISTINCT sc.SecurityCheckID) > 2;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT a.Name AS AirlineName, COUNT(sc.SecurityCheckID) AS TotalSecurityChecks\nFROM Airline a\nJOIN Flight f ON a.AirlineID = f.AirlineID\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN Passenger p ON b.PassengerID = p.PassengerID\nJOIN SecurityCheck sc ON p.PassengerID = sc.PassengerID\nWHERE sc.Status = 'Не прошел'\nGROUP BY a.Name\nHAVING COUNT(sc.SecurityCheckID) > 2;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT a.Name AS AirlineName, COUNT(sc.SecurityCheckID) AS TotalSecurityChecks\nFROM Airline a\nJOIN Flight f ON a.AirlineID = f.AirlineID\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN Passenger p ON b.PassengerID = p.PassengerID\nJOIN SecurityCheck sc ON p.PassengerID = sc.PassengerID\nWHERE sc.Status = 'Не прошел'\nGROUP BY a.Name\nHAVING COUNT(sc.SecurityCheckID) > 2;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT a.Name AS AirlineName, COUNT(sc.SecurityCheckID) AS FailedSecurityChecks\nFROM Airline a\nJOIN Flight f ON a.AirlineID = f.AirlineID\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN Passenger p ON b.PassengerID = p.PassengerID\nJOIN SecurityCheck sc ON p.PassengerID = sc.PassengerID\nWHERE sc.Status = 'Не прошел'\nGROUP BY a.Name\nHAVING COUNT(sc.SecurityCheckID) > 2;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT a.Name AS AirlineName, COUNT(sc.SecurityCheckID) AS FailedSecurityChecks\nFROM Airline a\nJOIN Flight f ON a.AirlineID = f.AirlineID\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN Passenger p ON b.PassengerID = p.PassengerID\nJOIN SecurityCheck sc ON p.PassengerID = sc.PassengerID\nWHERE sc.Status = 'Не прошел'\nGROUP BY a.Name\nHAVING COUNT(sc.SecurityCheckID) > 2;",
            "gigachat_response": "SELECT a.Name AS AirlineName, COUNT(sc.SecurityCheckID) AS FailedSecurityChecks\nFROM Airline a\nJOIN Flight f ON a.AirlineID = f.AirlineID\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN Passenger p ON b.PassengerID = p.PassengerID\nJOIN SecurityCheck sc ON p.PassengerID = sc.PassengerID\nWHERE sc.Status <> 'Прошел'\nGROUP BY a.Name\nHAVING COUNT(sc.SecurityCheckID) > 2;",
            "gigachat_response_ru": "SELECT a.Name AS AirlineName, COUNT(sc.SecurityCheckID) AS FailedSecurityChecks\nFROM Airline a\nJOIN Flight f ON a.AirlineID = f.AirlineID\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN Passenger p ON b.PassengerID = p.PassengerID\nJOIN SecurityCheck sc ON p.PassengerID = sc.PassengerID\nWHERE sc.Status <> 'Прошел'\nGROUP BY a.Name\nHAVING COUNT(sc.SecurityCheckID) > 2;"
        },
        {
            "question": "Какие пассажиры имеют средний вес принятого багажа более 15 кг?",
            "sql_query": "SELECT p.FirstName, p.LastName, AVG(bg.WeightKG) AS AvgBaggageWeight\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nJOIN Baggage bg ON b.BookingID = bg.BookingID\nWHERE bg.Status = 'Принято'\nGROUP BY p.FirstName, p.LastName\nHAVING AVG(bg.WeightKG) > 15;",
            "gpt-4o_response": "SELECT p.FirstName, p.LastName, AVG(b.WeightKG) AS AvgBaggageWeight\nFROM Passenger p\nJOIN Booking bk ON p.PassengerID = bk.PassengerID\nJOIN Baggage b ON bk.BookingID = b.BookingID\nWHERE b.Status = 'Принято'\nGROUP BY p.FirstName, p.LastName\nHAVING AVG(b.WeightKG) > 15;",
            "gpt-4o_response_ru": "SELECT p.FirstName, p.LastName, AVG(b.WeightKG) AS AvgBaggageWeight\nFROM Passenger p\nJOIN Booking bk ON p.PassengerID = bk.PassengerID\nJOIN Baggage b ON bk.BookingID = b.BookingID\nWHERE b.Status = 'Принято'\nGROUP BY p.FirstName, p.LastName\nHAVING AVG(b.WeightKG) > 15;",
            "google/gemini-2.0-flash-001_response": "SELECT p.FirstName, p.LastName, AVG(b.WeightKG) AS AverageBaggageWeight\nFROM Passenger p\nJOIN Booking bo ON p.PassengerID = bo.PassengerID\nJOIN Baggage b ON bo.BookingID = b.BookingID\nWHERE b.Status = 'Принято'\nGROUP BY p.PassengerID, p.FirstName, p.LastName\nHAVING AVG(b.WeightKG) > 15;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT p.FirstName, p.LastName, AVG(b.WeightKG) AS AverageBaggageWeight\nFROM Passenger p\nJOIN Booking bk ON p.PassengerID = bk.PassengerID\nJOIN Baggage b ON bk.BookingID = b.BookingID\nWHERE b.Status = 'Принято'\nGROUP BY p.PassengerID, p.FirstName, p.LastName\nHAVING AVG(b.WeightKG) > 15;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT p.FirstName, p.LastName, AVG(bg.WeightKG) AS AvgBaggageWeight\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nJOIN Baggage bg ON b.BookingID = bg.BookingID\nWHERE bg.Status = 'Принято'\nGROUP BY p.FirstName, p.LastName\nHAVING AVG(bg.WeightKG) > 15;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT p.FirstName, p.LastName, AVG(bg.WeightKG) AS AvgBaggageWeight\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nJOIN Baggage bg ON b.BookingID = bg.BookingID\nWHERE bg.Status = 'Принято'\nGROUP BY p.FirstName, p.LastName\nHAVING AVG(bg.WeightKG) > 15;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT p.FirstName, p.LastName, AVG(bg.WeightKG) AS AvgBaggageWeight\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nJOIN Baggage bg ON b.BookingID = bg.BookingID\nWHERE bg.Status = 'Принято'\nGROUP BY p.FirstName, p.LastName\nHAVING AVG(bg.WeightKG) > 15;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT p.FirstName, p.LastName, AVG(bg.WeightKG) AS AvgBaggageWeight\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nJOIN Baggage bg ON b.BookingID = bg.BookingID\nWHERE bg.Status = 'Принято'\nGROUP BY p.FirstName, p.LastName\nHAVING AVG(bg.WeightKG) > 15;",
            "gigachat_response": "SELECT p.FirstName, p.LastName, AVG(bg.WeightKG) AS AverageBaggageWeight\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nJOIN Baggage bg ON b.BookingID = bg.BookingID\nWHERE bg.Status = 'Принято'\nGROUP BY p.FirstName, p.LastName\nHAVING AVG(bg.WeightKG) > 15;",
            "gigachat_response_ru": "SELECT p.FirstName, p.LastName, AVG(bg.WeightKG) AS AverageBaggageWeight\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nJOIN Baggage bg ON b.BookingID = bg.BookingID\nWHERE bg.Status = 'Принято'\nGROUP BY p.FirstName, p.LastName\nHAVING AVG(bg.WeightKG) > 15;"
        },
        {
            "question": "Какие модели самолетов потеряли более 500 выручки от отмененных бронирований?",
            "sql_query": "SELECT a.Model, SUM(b.Price) AS TotalRevenue\nFROM Aircraft a\nJOIN Flight f ON a.AircraftID = f.AircraftID\nJOIN Booking b ON f.FlightID = b.FlightID\nWHERE b.Status = 'Отменено'\nGROUP BY a.Model\nHAVING SUM(b.Price) > 500;",
            "gpt-4o_response": "SELECT ac.Model AS AircraftModel, SUM(b.Price) AS TotalLostRevenue\nFROM Aircraft ac\nJOIN Flight f ON ac.AircraftID = f.AircraftID\nJOIN Booking b ON f.FlightID = b.FlightID\nWHERE b.Status = 'Отменено'\nGROUP BY ac.Model\nHAVING SUM(b.Price) > 500;",
            "gpt-4o_response_ru": "SELECT ac.Model, SUM(b.Price) AS TotalLostRevenue\nFROM Aircraft ac\nJOIN Flight f ON ac.AircraftID = f.AircraftID\nJOIN Booking b ON f.FlightID = b.FlightID\nWHERE b.Status = 'Отменено'\nGROUP BY ac.Model\nHAVING SUM(b.Price) > 500;",
            "google/gemini-2.0-flash-001_response": "SELECT \n    A.Model AS AircraftModel,\n    SUM(B.Price) AS TotalRevenueLost\nFROM Aircraft A\nJOIN Flight F ON A.AircraftID = F.AircraftID\nJOIN Booking B ON F.FlightID = B.FlightID\nWHERE B.Status = 'Отменено'\nGROUP BY A.Model\nHAVING SUM(B.Price) > 500;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT a.Model AS AircraftModel, SUM(b.Price) AS TotalRevenueLoss\nFROM Aircraft a\nJOIN Flight f ON a.AircraftID = f.AircraftID\nJOIN Booking b ON f.FlightID = b.FlightID\nWHERE b.Status = 'Отменено'\nGROUP BY a.Model\nHAVING SUM(b.Price) > 500;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT a.Model AS AircraftModel, SUM(b.Price) AS TotalRevenueLost\nFROM Aircraft a\nJOIN Flight f ON a.AircraftID = f.AircraftID\nJOIN Booking b ON f.FlightID = b.FlightID\nWHERE b.Status = 'Отменено'\nGROUP BY a.Model\nHAVING SUM(b.Price) > 500;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT ac.Model AS AircraftModel, SUM(b.Price) AS TotalRevenueLost\nFROM Aircraft ac\nJOIN Flight f ON ac.AircraftID = f.AircraftID\nJOIN Booking b ON f.FlightID = b.FlightID\nWHERE b.Status = 'Отменено'\nGROUP BY ac.Model\nHAVING SUM(b.Price) > 500",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT a.Model AS AircraftModel, SUM(b.Price) AS TotalLostRevenue\nFROM Aircraft a\nJOIN Flight f ON a.AircraftID = f.AircraftID\nJOIN Booking b ON f.FlightID = b.FlightID\nWHERE b.Status = 'Отменено'\nGROUP BY a.Model\nHAVING SUM(b.Price) > 500;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT ac.Model AS AircraftModel, SUM(b.Price) AS LostRevenue\nFROM Aircraft ac\nJOIN Flight f ON ac.AircraftID = f.AircraftID\nJOIN Booking b ON f.FlightID = b.FlightID\nWHERE b.Status = 'Отменено'\nGROUP BY ac.Model\nHAVING SUM(b.Price) > 500;",
            "gigachat_response": "SELECT ac.Model, SUM(b.Price) AS LostRevenue\nFROM Aircraft ac\nJOIN Flight fl ON ac.AircraftID = fl.AircraftID\nJOIN Booking b ON fl.FlightID = b.FlightID\nWHERE b.Status = 'Отменено'\nGROUP BY ac.Model\nHAVING SUM(b.Price) > 500;",
            "gigachat_response_ru": "SELECT ac.Model, SUM(b.Price) AS LostRevenue\nFROM Aircraft ac\nJOIN Flight fl ON ac.AircraftID = fl.AircraftID\nJOIN Booking b ON fl.FlightID = b.FlightID\nWHERE b.Status = 'Отменено'\nGROUP BY ac.Model\nHAVING SUM(b.Price) > 500;"
        },
        {
            "question": "Какие аэропорты имеют более 5 завершенных технических обслуживаний?",
            "sql_query": "SELECT ap.Name AS AirportName, COUNT(m.MaintenanceID) AS TotalMaintenances\nFROM Airport ap\nJOIN Flight f ON ap.AirportID = f.DepartureAirportID\nJOIN Aircraft a ON f.AircraftID = a.AircraftID\nJOIN Maintenance m ON a.AircraftID = m.AircraftID\nWHERE m.Status = 'Завершено'\nGROUP BY ap.Name\nHAVING COUNT(m.MaintenanceID) > 5;",
            "gpt-4o_response": "SELECT ap.Name AS AirportName, COUNT(m.MaintenanceID) AS CompletedMaintenances\nFROM Airport ap\nJOIN Flight f ON ap.AirportID = f.DepartureAirportID OR ap.AirportID = f.ArrivalAirportID\nJOIN Aircraft a ON f.AircraftID = a.AircraftID\nJOIN Maintenance m ON a.AircraftID = m.AircraftID\nWHERE m.Status = 'Завершено'\nGROUP BY ap.Name\nHAVING COUNT(m.MaintenanceID) > 5;",
            "gpt-4o_response_ru": "SELECT ap.Name AS AirportName, COUNT(m.MaintenanceID) AS CompletedMaintenances\nFROM Airport ap\nJOIN Flight f ON ap.AirportID = f.DepartureAirportID OR ap.AirportID = f.ArrivalAirportID\nJOIN Aircraft a ON f.AircraftID = a.AircraftID\nJOIN Maintenance m ON a.AircraftID = m.AircraftID\nWHERE m.Status = 'Завершено'\nGROUP BY ap.Name\nHAVING COUNT(m.MaintenanceID) > 5;",
            "google/gemini-2.0-flash-001_response": "SELECT a.Name AS AirportName, COUNT(m.MaintenanceID) AS TotalCompletedMaintenances\nFROM Airport a\nJOIN Flight f ON a.AirportID = f.DepartureAirportID\nJOIN Aircraft ac ON f.AircraftID = ac.AircraftID\nJOIN Maintenance m ON ac.AircraftID = m.AircraftID\nWHERE m.Status = 'Завершено'\nGROUP BY a.Name\nHAVING COUNT(m.MaintenanceID) > 5;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT a.Name AS AirportName, COUNT(m.MaintenanceID) AS TotalCompletedMaintenances\nFROM Airport a\nJOIN Flight f ON a.AirportID = f.DepartureAirportID OR a.AirportID = f.ArrivalAirportID\nJOIN Aircraft ac ON f.AircraftID = ac.AircraftID\nJOIN Maintenance m ON ac.AircraftID = m.AircraftID\nWHERE m.Status = 'Завершено'\nGROUP BY a.Name\nHAVING COUNT(m.MaintenanceID) > 5;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT a.Name AS AirportName, COUNT(m.MaintenanceID) AS TotalMaintenances\nFROM Airport a\nJOIN Flight f ON a.AirportID = f.DepartureAirportID\nJOIN Aircraft ac ON f.AircraftID = ac.AircraftID\nJOIN Maintenance m ON ac.AircraftID = m.AircraftID\nWHERE m.Status = 'Завершено'\nGROUP BY a.Name\nHAVING COUNT(m.MaintenanceID) > 5;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT a.Name AS AirportName, COUNT(m.MaintenanceID) AS TotalMaintenances\nFROM Airport a\nJOIN Flight f ON a.AirportID = f.DepartureAirportID\nJOIN Aircraft ac ON f.AircraftID = ac.AircraftID\nJOIN Maintenance m ON ac.AircraftID = m.AircraftID\nWHERE m.Status = 'Завершено'\nGROUP BY a.Name\nHAVING COUNT(m.MaintenanceID) > 5;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT ap.Name AS AirportName, COUNT(m.MaintenanceID) AS CompletedMaintenances\nFROM Airport ap\nJOIN Flight f ON ap.AirportID = f.DepartureAirportID OR ap.AirportID = f.ArrivalAirportID\nJOIN Aircraft a ON f.AircraftID = a.AircraftID\nJOIN Maintenance m ON a.AircraftID = m.AircraftID\nWHERE m.Status = 'Завершено'\nGROUP BY ap.Name\nHAVING COUNT(m.MaintenanceID) > 5;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT a.Name AS AirportName, COUNT(m.MaintenanceID) AS CompletedMaintenances\nFROM Airport a\nJOIN Flight f ON a.AirportID = f.DepartureAirportID OR a.AirportID = f.ArrivalAirportID\nJOIN Aircraft ac ON f.AircraftID = ac.AircraftID\nJOIN Maintenance m ON ac.AircraftID = m.AircraftID\nWHERE m.Status = 'Завершено'\nGROUP BY a.Name\nHAVING COUNT(m.MaintenanceID) > 5;",
            "gigachat_response": "SELECT a.Name AS AirportName, COUNT(m.MaintenanceID) AS CompletedMaintenanceCount\nFROM Airport a\nJOIN Flight f ON a.AirportID = f.DepartureAirportID OR a.AirportID = f.ArrivalAirportID\nJOIN Aircraft ac ON f.AircraftID = ac.AircraftID\nJOIN Maintenance m ON ac.AircraftID = m.AircraftID\nWHERE m.Status = 'Завершено'\nGROUP BY a.Name\nHAVING COUNT(m.MaintenanceID) > 5;",
            "gigachat_response_ru": "SELECT a.Name AS AirportName, COUNT(m.MaintenanceID) AS CompletedMaintenances\nFROM Airport a\nJOIN Flight f ON a.AirportID = f.DepartureAirportID OR a.AirportID = f.ArrivalAirportID\nJOIN Aircraft ac ON f.AircraftID = ac.AircraftID\nJOIN Maintenance m ON ac.AircraftID = m.AircraftID\nWHERE m.Status = 'Завершено'\nGROUP BY a.Name\nHAVING COUNT(m.MaintenanceID) > 5;"
        },
        {
            "question": "Какие модели самолетов имеют среднее время проверки безопасности после 20:00?",
            "sql_query": "SELECT a.Model, AVG(sc.CheckTime) AS AvgSecurityCheckTime\nFROM Aircraft a\nJOIN Flight f ON a.AircraftID = f.AircraftID\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN SecurityCheck sc ON b.PassengerID = sc.PassengerID\nGROUP BY a.Model\nHAVING AVG(CAST(sc.CheckTime AS TIME)) > '20:00:00';",
            "gpt-4o_response": "SELECT ac.Model AS AircraftModel, AVG(TIMESTAMPDIFF(MINUTE, sc.CheckTime, '20:00:00')) AS AvgSecurityCheckTime\nFROM Aircraft ac\nJOIN Flight f ON ac.AircraftID = f.AircraftID\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN SecurityCheck sc ON b.PassengerID = sc.PassengerID\nWHERE TIME(sc.CheckTime) > '20:00:00'\nGROUP BY ac.Model\nHAVING AVG(TIMESTAMPDIFF(MINUTE, sc.CheckTime, '20:00:00')) IS NOT NULL;",
            "gpt-4o_response_ru": "SELECT ac.Model, AVG(TIMESTAMPDIFF(MINUTE, sc.CheckTime, f.ScheduledDeparture)) AS AvgSecurityCheckTime\nFROM Aircraft ac\nJOIN Flight f ON ac.AircraftID = f.AircraftID\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN SecurityCheck sc ON b.PassengerID = sc.PassengerID\nWHERE TIME(sc.CheckTime) > '20:00:00'\nGROUP BY ac.Model\nHAVING AVG(TIMESTAMPDIFF(MINUTE, sc.CheckTime, f.ScheduledDeparture)) IS NOT NULL;",
            "google/gemini-2.0-flash-001_response": "SELECT a.Model AS AircraftModel, AVG(TIME(sc.CheckTime)) AS AverageCheckInTime\nFROM Aircraft a\nJOIN Flight f ON a.AircraftID = f.AircraftID\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN Passenger p ON b.PassengerID = p.PassengerID\nJOIN SecurityCheck sc ON p.PassengerID = sc.PassengerID\nWHERE TIME(sc.CheckTime) >= '20:00:00'\nGROUP BY a.Model;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT a.Model\nFROM Aircraft a\nJOIN Flight f ON a.AircraftID = f.AircraftID\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN Passenger p ON b.PassengerID = p.PassengerID\nJOIN SecurityCheck sc ON p.PassengerID = sc.PassengerID\nWHERE STRFTIME('%H', sc.CheckTime) >= '20'\nGROUP BY a.Model;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT a.Model AS AircraftModel, AVG(sc.CheckTime) AS AvgSecurityCheckTime\nFROM Aircraft a\nJOIN Flight f ON a.AircraftID = f.AircraftID\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN Passenger p ON b.PassengerID = p.PassengerID\nJOIN SecurityCheck sc ON p.PassengerID = sc.PassengerID\nWHERE TIME(sc.CheckTime) > '20:00:00'\nGROUP BY a.Model",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT a.Model AS AircraftModel, AVG(TIME_TO_SEC(TIMEDIFF(sc.CheckTime, '20:00:00')) / 3600) AS AvgSecurityCheckTime\nFROM Aircraft a\nJOIN Flight f ON a.AircraftID = f.AircraftID\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN Passenger p ON b.PassengerID = p.PassengerID\nJOIN SecurityCheck sc ON p.PassengerID = sc.PassengerID\nWHERE sc.CheckTime > '20:00:00'\nGROUP BY a.Model\nHAVING AVG(TIME_TO_SEC(TIMEDIFF(sc.CheckTime, '20:00:00')) / 3600) > 0",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT a.Model, AVG(TIME_TO_SEC(TIMEDIFF(sc.CheckTime, '20:00:00'))/60) AS AvgCheckTimeMinutes\nFROM Aircraft a\nJOIN Flight f ON a.AircraftID = f.AircraftID\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN Passenger p ON b.PassengerID = p.PassengerID\nJOIN SecurityCheck sc ON p.PassengerID = sc.PassengerID\nWHERE TIME(sc.CheckTime) > '20:00:00'\nGROUP BY a.Model;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT ac.Model, AVG(TIME_TO_SEC(TIMEDIFF(sc.CheckTime, '20:00:00'))/60) AS AvgCheckTimeAfter8PM\nFROM Aircraft ac\nJOIN Flight f ON ac.AircraftID = f.AircraftID\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN Passenger p ON b.PassengerID = p.PassengerID\nJOIN SecurityCheck sc ON p.PassengerID = sc.PassengerID\nWHERE TIME(sc.CheckTime) > '20:00:00'\nGROUP BY ac.Model;",
            "gigachat_response": "SELECT ac.Model, AVG(TIME_TO_SEC(TIMEDIFF(sc.CheckTime, CONCAT(DATE_FORMAT(sc.CheckTime, '%Y-%m-%d'), ' 20:00:00'))) / 60) AS AverageSecurityCheckDurationAfter8PM\nFROM Aircraft ac\nJOIN Flight fl ON ac.AircraftID = fl.AircraftID\nJOIN Booking bk ON fl.FlightID = bk.FlightID\nJOIN Passenger ps ON bk.PassengerID = ps.PassengerID\nJOIN SecurityCheck sc ON ps.PassengerID = sc.PassengerID\nWHERE TIME(sc.CheckTime) >= '20:00:00'\nGROUP BY ac.Model;",
            "gigachat_response_ru": "SELECT ac.Model, AVG(DATEDIFF(MINUTE, sc.CheckTime, f.ScheduledDeparture)) AS AverageSecurityCheckDuration\nFROM Aircraft ac\nJOIN Flight f ON ac.AircraftID = f.AircraftID\nJOIN Booking bk ON f.FlightID = bk.FlightID\nJOIN Passenger ps ON bk.PassengerID = ps.PassengerID\nJOIN SecurityCheck sc ON ps.PassengerID = sc.PassengerID\nWHERE HOUR(sc.CheckTime) >= 20 AND f.Status = 'Scheduled'\nGROUP BY ac.Model;"
        },
        {
            "question": "Какие аэропорты имеют непринятый багаж?",
            "sql_query": "SELECT ap.Name AS AirportName, COUNT(bg.BaggageID) AS TotalBaggage\nFROM Airport ap\nJOIN Flight f ON ap.AirportID = f.DepartureAirportID\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN Baggage bg ON b.BookingID = bg.BookingID\nWHERE bg.Status = 'Не принято'\nGROUP BY ap.Name\nHAVING COUNT(bg.BaggageID) > 0;",
            "gpt-4o_response": "SELECT DISTINCT ap.Name AS AirportName\nFROM Airport ap\nJOIN Flight f ON ap.AirportID = f.DepartureAirportID OR ap.AirportID = f.ArrivalAirportID\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN Baggage bg ON b.BookingID = bg.BookingID\nWHERE bg.Status = 'Не принято';",
            "gpt-4o_response_ru": "SELECT DISTINCT ap.Name AS AirportName\nFROM Airport ap\nJOIN Flight f ON ap.AirportID = f.DepartureAirportID OR ap.AirportID = f.ArrivalAirportID\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN Baggage bg ON b.BookingID = bg.BookingID\nWHERE bg.Status = 'Не принято';",
            "google/gemini-2.0-flash-001_response": "SELECT DISTINCT a.Name AS AirportName\nFROM Airport a\nJOIN Flight f ON a.AirportID = f.DepartureAirportID OR a.AirportID = f.ArrivalAirportID\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN Baggage bg ON b.BookingID = bg.BookingID\nWHERE bg.Status = 'Не принято';",
            "google/gemini-2.0-flash-001_response_ru": "SELECT DISTINCT a.Name AS AirportName\nFROM Airport a\nJOIN Flight f ON a.AirportID = f.DepartureAirportID\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN Baggage bg ON b.BookingID = bg.BookingID\nWHERE bg.Status = 'Не принято';",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT DISTINCT a.Name AS AirportName, a.City, a.Country, bg.BaggageID, bg.WeightKG, bg.Dimensions, bg.Type, bg.Status\nFROM Airport a\nJOIN Flight f ON a.AirportID = f.DepartureAirportID\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN Baggage bg ON b.BookingID = bg.BookingID\nWHERE bg.Status = 'Не принято'",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT DISTINCT a.Name AS AirportName\nFROM Airport a\nJOIN Flight f ON a.AirportID = f.DepartureAirportID\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN Baggage bg ON b.BookingID = bg.BookingID\nWHERE bg.Status = 'Не принято'",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT DISTINCT ap.Name AS AirportName, ap.City, ap.Country\nFROM Airport ap\nJOIN Flight f ON ap.AirportID = f.DepartureAirportID\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN Baggage bg ON b.BookingID = bg.BookingID\nWHERE bg.Status = 'Не принято';",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT DISTINCT ap.Name AS AirportName\nFROM Airport ap\nJOIN Flight f ON ap.AirportID = f.DepartureAirportID\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN Baggage bg ON b.BookingID = bg.BookingID\nWHERE bg.Status = 'Не принято';",
            "gigachat_response": "SELECT DISTINCT ar.Name AS AirportName\nFROM Airport ar\nJOIN Flight fl ON ar.AirportID IN (fl.DepartureAirportID, fl.ArrivalAirportID)\nJOIN Booking bk ON fl.FlightID = bk.FlightID\nJOIN Baggage bg ON bk.BookingID = bg.BookingID\nWHERE bg.Status = 'Не принято';",
            "gigachat_response_ru": "SELECT DISTINCT a.Name AS AirportName\nFROM Airport a\nJOIN Flight f ON a.AirportID = f.DepartureAirportID OR a.AirportID = f.ArrivalAirportID\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN Baggage bg ON b.BookingID = bg.BookingID\nWHERE bg.Status = 'Не принято';"
        },
        {
            "question": "Какие пилоты имеют среднюю продолжительность рейса более 120 минут?",
            "sql_query": "SELECT p.FirstName, p.LastName, AVG(f.DurationMinutes) AS AvgFlightDuration\nFROM Pilot p\nJOIN Crew c ON p.PilotID = c.PilotID\nJOIN Flight f ON c.FlightID = f.FlightID\nGROUP BY p.FirstName, p.LastName\nHAVING AVG(f.DurationMinutes) > 120;",
            "gpt-4o_response": "SELECT p.FirstName, p.LastName, AVG(f.DurationMinutes) AS AvgFlightDuration\nFROM Pilot p\nJOIN Crew c ON p.PilotID = c.PilotID\nJOIN Flight f ON c.FlightID = f.FlightID\nGROUP BY p.FirstName, p.LastName\nHAVING AVG(f.DurationMinutes) > 120;",
            "gpt-4o_response_ru": "SELECT p.FirstName, p.LastName, AVG(f.DurationMinutes) AS AvgFlightDuration\nFROM Pilot p\nJOIN Crew c ON p.PilotID = c.PilotID\nJOIN Flight f ON c.FlightID = f.FlightID\nGROUP BY p.FirstName, p.LastName\nHAVING AVG(f.DurationMinutes) > 120;",
            "google/gemini-2.0-flash-001_response": "SELECT p.FirstName, p.LastName\nFROM Pilot p\nJOIN Crew c ON p.PilotID = c.PilotID\nJOIN Flight f ON c.FlightID = f.FlightID\nGROUP BY p.PilotID, p.FirstName, p.LastName\nHAVING AVG(f.DurationMinutes) > 120;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT p.FirstName, p.LastName, AVG(f.DurationMinutes) AS AverageFlightDuration\nFROM Pilot p\nJOIN Crew c ON p.PilotID = c.PilotID\nJOIN Flight f ON c.FlightID = f.FlightID\nGROUP BY p.PilotID, p.FirstName, p.LastName\nHAVING AVG(f.DurationMinutes) > 120;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT p.FirstName, p.LastName, AVG(f.DurationMinutes) AS AvgFlightDuration\nFROM Pilot p\nJOIN Crew c ON p.PilotID = c.PilotID\nJOIN Flight f ON c.FlightID = f.FlightID\nGROUP BY p.FirstName, p.LastName\nHAVING AVG(f.DurationMinutes) > 120;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT p.FirstName, p.LastName, AVG(f.DurationMinutes) AS AvgFlightDuration\nFROM Pilot p\nJOIN Crew c ON p.PilotID = c.PilotID\nJOIN Flight f ON c.FlightID = f.FlightID\nGROUP BY p.FirstName, p.LastName\nHAVING AVG(f.DurationMinutes) > 120",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT p.FirstName, p.LastName, AVG(f.DurationMinutes) AS AvgFlightDuration\nFROM Pilot p\nJOIN Crew c ON p.PilotID = c.PilotID\nJOIN Flight f ON c.FlightID = f.FlightID\nGROUP BY p.FirstName, p.LastName\nHAVING AVG(f.DurationMinutes) > 120;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT p.FirstName, p.LastName, AVG(f.DurationMinutes) AS AvgFlightDuration\nFROM Pilot p\nJOIN Crew c ON p.PilotID = c.PilotID\nJOIN Flight f ON c.FlightID = f.FlightID\nGROUP BY p.FirstName, p.LastName\nHAVING AVG(f.DurationMinutes) > 120;",
            "gigachat_response": "SELECT p.FirstName, p.LastName, AVG(f.DurationMinutes) AS AverageDuration\nFROM Pilot p\nJOIN Crew c ON p.PilotID = c.PilotID\nJOIN Flight f ON c.FlightID = f.FlightID\nGROUP BY p.FirstName, p.LastName\nHAVING AVG(f.DurationMinutes) > 120;",
            "gigachat_response_ru": "SELECT p.FirstName, p.LastName, AVG(f.DurationMinutes) AS AverageDuration\nFROM Pilot p\nJOIN Crew c ON p.PilotID = c.PilotID\nJOIN Flight f ON c.FlightID = f.FlightID\nGROUP BY p.FirstName, p.LastName\nHAVING AVG(f.DurationMinutes) > 120;"
        },
        {
            "question": "Какие модели самолетов имеют более 5 успешных проверок безопасности?",
            "sql_query": "SELECT a.Model, COUNT(sc.SecurityCheckID) AS TotalSecurityChecks\nFROM Aircraft a\nJOIN Flight f ON a.AircraftID = f.AircraftID\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN SecurityCheck sc ON b.PassengerID = sc.PassengerID\nWHERE sc.Status = 'Прошел'\nGROUP BY a.Model\nHAVING COUNT(sc.SecurityCheckID) > 5;",
            "gpt-4o_response": "SELECT ac.Model, COUNT(sc.SecurityCheckID) AS SuccessfulSecurityChecks\nFROM Aircraft ac\nJOIN Flight f ON ac.AircraftID = f.AircraftID\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN SecurityCheck sc ON b.PassengerID = sc.PassengerID\nWHERE sc.Status = 'Прошел'\nGROUP BY ac.Model\nHAVING COUNT(sc.SecurityCheckID) > 5;",
            "gpt-4o_response_ru": "SELECT ac.Model, COUNT(sc.SecurityCheckID) AS SuccessfulChecks\nFROM Aircraft ac\nJOIN Flight f ON ac.AircraftID = f.AircraftID\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN SecurityCheck sc ON b.PassengerID = sc.PassengerID\nWHERE sc.Status = 'Прошел'\nGROUP BY ac.Model\nHAVING COUNT(sc.SecurityCheckID) > 5;",
            "google/gemini-2.0-flash-001_response": "SELECT a.Model\nFROM Aircraft a\nJOIN Flight f ON a.AircraftID = f.AircraftID\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN Passenger p ON b.PassengerID = p.PassengerID\nJOIN SecurityCheck sc ON p.PassengerID = sc.PassengerID\nWHERE sc.Status = 'Прошел'\nGROUP BY a.Model\nHAVING COUNT(DISTINCT sc.SecurityCheckID) > 5;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT a.Model\nFROM Aircraft a\nJOIN Flight f ON a.AircraftID = f.AircraftID\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN Passenger p ON b.PassengerID = p.PassengerID\nJOIN SecurityCheck sc ON p.PassengerID = sc.PassengerID\nWHERE sc.Status = 'Прошел'\nGROUP BY a.Model\nHAVING COUNT(DISTINCT sc.SecurityCheckID) > 5;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT a.Model AS AircraftModel, COUNT(sc.SecurityCheckID) AS SuccessfulSecurityChecks\nFROM Aircraft a\nJOIN Flight f ON a.AircraftID = f.AircraftID\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN Passenger p ON b.PassengerID = p.PassengerID\nJOIN SecurityCheck sc ON p.PassengerID = sc.PassengerID\nWHERE sc.Status = 'Прошел'\nGROUP BY a.Model\nHAVING COUNT(sc.SecurityCheckID) > 5;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT a.Model AS AircraftModel, COUNT(sc.SecurityCheckID) AS TotalSecurityChecks\nFROM Aircraft a\nJOIN Flight f ON a.AircraftID = f.AircraftID\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN Passenger p ON b.PassengerID = p.PassengerID\nJOIN SecurityCheck sc ON p.PassengerID = sc.PassengerID\nWHERE sc.Status = 'Прошел'\nGROUP BY a.Model\nHAVING COUNT(sc.SecurityCheckID) > 5;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT DISTINCT a.Model\nFROM Aircraft a\nJOIN Flight f ON a.AircraftID = f.AircraftID\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN Passenger p ON b.PassengerID = p.PassengerID\nJOIN SecurityCheck sc ON p.PassengerID = sc.PassengerID\nWHERE sc.Status = 'Прошел'\nGROUP BY a.Model\nHAVING COUNT(sc.SecurityCheckID) > 5;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT a.Model, COUNT(sc.SecurityCheckID) AS SuccessfulSecurityChecks\nFROM Aircraft a\nJOIN Flight f ON a.AircraftID = f.AircraftID\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN Passenger p ON b.PassengerID = p.PassengerID\nJOIN SecurityCheck sc ON p.PassengerID = sc.PassengerID\nWHERE sc.Status = 'Прошел'\nGROUP BY a.Model\nHAVING COUNT(sc.SecurityCheckID) > 5;",
            "gigachat_response": "SELECT ac.Model, COUNT(sc.SecurityCheckID) AS SuccessfulSecurityChecks\nFROM Aircraft ac\nJOIN Flight fl ON ac.AircraftID = fl.AircraftID\nJOIN Booking bk ON fl.FlightID = bk.FlightID\nJOIN Passenger ps ON bk.PassengerID = ps.PassengerID\nJOIN SecurityCheck sc ON ps.PassengerID = sc.PassengerID\nWHERE sc.Status = 'Прошел'\nGROUP BY ac.Model\nHAVING COUNT(sc.SecurityCheckID) > 5;",
            "gigachat_response_ru": "SELECT ac.Model, COUNT(sc.SecurityCheckID) AS SuccessfulSecurityChecks\nFROM Aircraft ac\nJOIN Flight fl ON ac.AircraftID = fl.AircraftID\nJOIN Booking bk ON fl.FlightID = bk.FlightID\nJOIN Passenger ps ON bk.PassengerID = ps.PassengerID\nJOIN SecurityCheck sc ON ps.PassengerID = sc.PassengerID\nWHERE sc.Status = 'Прошел'\nGROUP BY ac.Model\nHAVING COUNT(sc.SecurityCheckID) > 5;"
        },
        {
            "question": "Какие аэропорты имеют максимальную стоимость запланированного технического обслуживания более 10000?",
            "sql_query": "SELECT ap.Name AS AirportName, AVG(m.Cost) AS AvgMaintenanceCost\nFROM Airport ap\nJOIN Flight f ON ap.AirportID = f.DepartureAirportID\nJOIN Aircraft a ON f.AircraftID = a.AircraftID\nJOIN Maintenance m ON a.AircraftID = m.AircraftID\nWHERE m.Status = 'Запланировано'\nGROUP BY ap.Name\nHAVING MAX(m.Cost) > 10000;",
            "gpt-4o_response": "SELECT ap.Name AS AirportName, SUM(m.Cost) AS TotalMaintenanceCost\nFROM Airport ap\nJOIN Flight f ON ap.AirportID = f.DepartureAirportID\nJOIN Aircraft a ON f.AircraftID = a.AircraftID\nJOIN Maintenance m ON a.AircraftID = m.AircraftID\nWHERE m.Status = 'Запланировано'\nGROUP BY ap.Name\nHAVING SUM(m.Cost) > 10000;",
            "gpt-4o_response_ru": "SELECT ap.Name AS AirportName, SUM(m.Cost) AS TotalMaintenanceCost\nFROM Airport ap\nJOIN Flight f ON ap.AirportID = f.DepartureAirportID\nJOIN Aircraft a ON f.AircraftID = a.AircraftID\nJOIN Maintenance m ON a.AircraftID = m.AircraftID\nWHERE m.Status = 'Запланировано'\nGROUP BY ap.Name\nHAVING SUM(m.Cost) > 10000;",
            "google/gemini-2.0-flash-001_response": "SELECT a.Name AS AirportName\nFROM Airport a\nJOIN Flight f ON a.AirportID = f.DepartureAirportID\nJOIN Aircraft ac ON f.AircraftID = ac.AircraftID\nJOIN Maintenance m ON ac.AircraftID = m.AircraftID\nWHERE m.Cost > 10000\nGROUP BY a.Name;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT a.Name AS AirportName\nFROM Airport a\nJOIN Flight f ON a.AirportID = f.DepartureAirportID\nJOIN Aircraft ac ON f.AircraftID = ac.AircraftID\nJOIN Maintenance m ON ac.AircraftID = m.AircraftID\nGROUP BY a.Name\nHAVING MAX(m.Cost) > 10000;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT a.AirportID, a.Name AS AirportName, SUM(m.Cost) AS TotalMaintenanceCost\nFROM Airport a\nJOIN Flight f ON a.AirportID = f.DepartureAirportID\nJOIN Aircraft ac ON f.AircraftID = ac.AircraftID\nJOIN Maintenance m ON ac.AircraftID = m.AircraftID\nGROUP BY a.AirportID, a.Name\nHAVING SUM(m.Cost) > 10000\nORDER BY TotalMaintenanceCost DESC;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT a.Name AS AirportName, SUM(m.Cost) AS TotalMaintenanceCost\nFROM Airport a\nJOIN Flight f ON a.AirportID = f.DepartureAirportID\nJOIN Aircraft ac ON f.AircraftID = ac.AircraftID\nJOIN Maintenance m ON ac.AircraftID = m.AircraftID\nGROUP BY a.Name\nHAVING SUM(m.Cost) > 10000\nORDER BY TotalMaintenanceCost DESC;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT ap.Name AS AirportName, SUM(m.Cost) AS TotalMaintenanceCost\nFROM Airport ap\nJOIN Flight f ON ap.AirportID = f.DepartureAirportID\nJOIN Aircraft a ON f.AircraftID = a.AircraftID\nJOIN Maintenance m ON a.AircraftID = m.AircraftID\nWHERE m.Status = 'Запланировано'\nGROUP BY ap.Name\nHAVING SUM(m.Cost) > 10000\nORDER BY TotalMaintenanceCost DESC;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT ap.Name AS AirportName, SUM(m.Cost) AS TotalMaintenanceCost\nFROM Airport ap\nJOIN Flight f ON ap.AirportID = f.DepartureAirportID OR ap.AirportID = f.ArrivalAirportID\nJOIN Aircraft a ON f.AircraftID = a.AircraftID\nJOIN Maintenance m ON a.AircraftID = m.AircraftID\nWHERE m.Status = 'Запланировано' AND m.Cost > 10000\nGROUP BY ap.Name\nORDER BY TotalMaintenanceCost DESC;",
            "gigachat_response": "SELECT DISTINCT a.Name AS AirportName\nFROM Airport a\nJOIN Gate g ON a.AirportID = g.AirportID\nJOIN Maintenance m ON g.AirportID = m.AircraftID -- Assuming maintenance records indirectly relate via airport gates\nWHERE m.Cost > 10000 AND m.Status = 'Завершено';",
            "gigachat_response_ru": "SELECT DISTINCT a.Name AS AirportName\nFROM Airport a\nJOIN Flight f ON a.AirportID = f.DepartureAirportID OR a.AirportID = f.ArrivalAirportID\nJOIN Aircraft ac ON f.AircraftID = ac.AircraftID\nJOIN Maintenance m ON ac.AircraftID = m.AircraftID\nWHERE m.Cost > 10000 AND m.Status = 'Завершено';"
        },
        {
            "question": "Какие авиакомпании имеют более 1 бортпроводника?",
            "sql_query": "SELECT al.Name AS AirlineName, COUNT(c.CrewID) AS TotalCrewMembers\nFROM Airline al\nJOIN Flight f ON al.AirlineID = f.AirlineID\nJOIN Crew c ON f.FlightID = c.FlightID\nWHERE c.Role = 'Бортпроводник'\nGROUP BY al.Name\nHAVING COUNT(c.CrewID) > 1;",
            "gpt-4o_response": "SELECT al.Name AS AirlineName, COUNT(c.CrewID) AS TotalFlightAttendants\nFROM Airline al\nJOIN Pilot p ON al.AirlineID = p.AirlineID\nJOIN Crew c ON p.PilotID = c.PilotID\nWHERE c.Role = 'Бортпроводник'\nGROUP BY al.Name\nHAVING COUNT(c.CrewID) > 1;",
            "gpt-4o_response_ru": "SELECT al.Name AS AirlineName, COUNT(c.CrewID) AS NumberOfFlightAttendants\nFROM Airline al\nJOIN Pilot p ON al.AirlineID = p.AirlineID\nJOIN Crew c ON p.PilotID = c.PilotID\nWHERE c.Role = 'Бортпроводник'\nGROUP BY al.Name\nHAVING COUNT(c.CrewID) > 1;",
            "google/gemini-2.0-flash-001_response": "SELECT a.Name AS AirlineName\nFROM Airline a\nJOIN Pilot p ON a.AirlineID = p.AirlineID\nJOIN Crew c ON p.PilotID = c.PilotID\nGROUP BY a.Name\nHAVING COUNT(DISTINCT c.PilotID) > 1;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT a.Name\nFROM Airline a\nJOIN Pilot p ON a.AirlineID = p.AirlineID\nJOIN Crew c ON p.PilotID = c.PilotID\nWHERE c.Role = 'Бортпроводник'\nGROUP BY a.Name\nHAVING COUNT(DISTINCT c.PilotID) > 1;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT a.Name AS AirlineName, COUNT(c.CrewID) AS TotalCrew\nFROM Airline a\nJOIN Flight f ON a.AirlineID = f.AirlineID\nJOIN Crew c ON f.FlightID = c.FlightID\nJOIN Pilot p ON c.PilotID = p.PilotID\nWHERE c.Role = 'Бортпроводник'\nGROUP BY a.Name\nHAVING COUNT(c.CrewID) > 1;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT al.Name AS AirlineName, COUNT(c.CrewID) AS TotalFlightAttendants\nFROM Airline al\nJOIN Pilot p ON al.AirlineID = p.AirlineID\nJOIN Crew c ON p.PilotID = c.PilotID\nWHERE c.Role = 'Бортпроводник'\nGROUP BY al.Name\nHAVING COUNT(c.CrewID) > 1;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT a.Name AS AirlineName, COUNT(DISTINCT c.CrewID) AS TotalFlightAttendants\nFROM Airline a\nJOIN Pilot p ON a.AirlineID = p.AirlineID\nJOIN Crew c ON p.PilotID = c.PilotID\nWHERE c.Role = 'Бортпроводник'\nGROUP BY a.Name\nHAVING COUNT(DISTINCT c.CrewID) > 1;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT a.Name AS AirlineName, COUNT(DISTINCT c.CrewID) AS CrewMembersCount\nFROM Airline a\nJOIN Pilot p ON a.AirlineID = p.AirlineID\nJOIN Crew c ON p.PilotID = c.PilotID\nWHERE c.Role = 'Бортпроводник'\nGROUP BY a.Name\nHAVING COUNT(DISTINCT c.CrewID) > 1;",
            "gigachat_response": "SELECT a.Name AS AirlineName, COUNT(c.CrewID) AS NumberOfCabinCrew\nFROM Airline a\nJOIN Flight f ON a.AirlineID = f.AirlineID\nJOIN Crew c ON f.FlightID = c.FlightID AND c.Role = 'Бортпроводник'\nGROUP BY a.Name\nHAVING COUNT(c.CrewID) > 1;",
            "gigachat_response_ru": "SELECT a.Name AS AirlineName, COUNT(c.CrewID) AS NumberOfCabinCrew\nFROM Airline a\nJOIN Crew c ON a.AirlineID = c.AirlineID\nWHERE c.Role = 'Бортпроводник'\nGROUP BY a.Name\nHAVING COUNT(c.CrewID) > 1;"
        },
        {
            "question": "Какие пассажиры имеют общий вес принятого багажа более 50 кг за 2023 год?",
            "sql_query": "SELECT p.FirstName, p.LastName, SUM(bg.WeightKG) AS TotalBaggageWeight\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nJOIN Baggage bg ON b.BookingID = bg.BookingID\nWHERE bg.Status = 'Принято' AND YEAR(b.BookingDate) = 2023\nGROUP BY p.FirstName, p.LastName\nHAVING SUM(bg.WeightKG) > 50;",
            "gpt-4o_response": "SELECT p.FirstName, p.LastName, SUM(b.WeightKG) AS TotalBaggageWeight\nFROM Passenger p\nJOIN Booking bk ON p.PassengerID = bk.PassengerID\nJOIN Baggage b ON bk.BookingID = b.BookingID\nWHERE b.Status = 'Принято' AND YEAR(bk.BookingDate) = 2023\nGROUP BY p.FirstName, p.LastName\nHAVING SUM(b.WeightKG) > 50;",
            "gpt-4o_response_ru": "SELECT p.FirstName, p.LastName, SUM(b.WeightKG) AS TotalBaggageWeight\nFROM Passenger p\nJOIN Booking bk ON p.PassengerID = bk.PassengerID\nJOIN Baggage b ON bk.BookingID = b.BookingID\nWHERE b.Status = 'Принято' AND YEAR(bk.BookingDate) = 2023\nGROUP BY p.FirstName, p.LastName\nHAVING SUM(b.WeightKG) > 50;",
            "google/gemini-2.0-flash-001_response": "SELECT p.FirstName, p.LastName\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nJOIN Baggage bg ON b.BookingID = bg.BookingID\nWHERE bg.Status = 'Принято' AND STRFTIME('%Y', b.BookingDate) = '2023'\nGROUP BY p.PassengerID, p.FirstName, p.LastName\nHAVING SUM(bg.WeightKG) > 50;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT p.FirstName, p.LastName, SUM(b.WeightKG) AS TotalBaggageWeight\nFROM Passenger p\nJOIN Booking bo ON p.PassengerID = bo.PassengerID\nJOIN Baggage b ON bo.BookingID = b.BookingID\nWHERE STRFTIME('%Y', bo.BookingDate) = '2023' AND b.Status = 'Принято'\nGROUP BY p.PassengerID, p.FirstName, p.LastName\nHAVING SUM(b.WeightKG) > 50;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT p.FirstName, p.LastName, SUM(bg.WeightKG) AS TotalBaggageWeight\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nJOIN Baggage bg ON b.BookingID = bg.BookingID\nWHERE bg.Status = 'Принято' AND YEAR(b.BookingDate) = 2023\nGROUP BY p.FirstName, p.LastName\nHAVING SUM(bg.WeightKG) > 50;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT p.FirstName, p.LastName, SUM(bg.WeightKG) AS TotalBaggageWeight\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nJOIN Baggage bg ON b.BookingID = bg.BookingID\nWHERE bg.Status = 'Принято' AND YEAR(b.BookingDate) = 2023\nGROUP BY p.FirstName, p.LastName\nHAVING SUM(bg.WeightKG) > 50",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT p.FirstName, p.LastName, SUM(bg.WeightKG) AS TotalBaggageWeight\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nJOIN Baggage bg ON b.BookingID = bg.BookingID\nWHERE bg.Status = 'Принято' AND YEAR(b.BookingDate) = 2023\nGROUP BY p.FirstName, p.LastName\nHAVING SUM(bg.WeightKG) > 50;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT p.FirstName, p.LastName, SUM(bg.WeightKG) AS TotalBaggageWeight\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nJOIN Baggage bg ON b.BookingID = bg.BookingID\nWHERE bg.Status = 'Принято' AND YEAR(b.BookingDate) = 2023\nGROUP BY p.FirstName, p.LastName\nHAVING SUM(bg.WeightKG) > 50\nORDER BY TotalBaggageWeight DESC;",
            "gigachat_response": "SELECT \n    p.FirstName, \n    p.LastName, \n    SUM(bg.WeightKG) AS TotalBaggageWeight\nFROM \n    Passenger p\nJOIN \n    Booking b ON p.PassengerID = b.PassengerID\nJOIN \n    Baggage bg ON b.BookingID = bg.BookingID\nWHERE \n    YEAR(bg.Date) = 2023 AND bg.Status = 'Принято'\nGROUP BY \n    p.FirstName, p.LastName\nHAVING \n    SUM(bg.WeightKG) > 50;",
            "gigachat_response_ru": "SELECT p.FirstName, p.LastName, SUM(bg.WeightKG) AS TotalBaggageWeight\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nJOIN Baggage bg ON b.BookingID = bg.BookingID\nWHERE YEAR(bg.Date) = 2023 AND bg.Status = 'Принято'\nGROUP BY p.FirstName, p.LastName\nHAVING SUM(bg.WeightKG) > 50;"
        },
        {
            "question": "Какие модели самолетов имеют среднюю стоимость подтвержденного бронирования более 2000?",
            "sql_query": "SELECT a.Model, AVG(b.Price) AS AvgBookingPrice\nFROM Aircraft a\nJOIN Flight f ON a.AircraftID = f.AircraftID\nJOIN Booking b ON f.FlightID = b.FlightID\nWHERE b.Status = 'Подтверждено'\nGROUP BY a.Model\nHAVING AVG(b.Price) > 2000;",
            "gpt-4o_response": "SELECT ac.Model, AVG(b.Price) AS AvgBookingPrice\nFROM Aircraft ac\nJOIN Flight f ON ac.AircraftID = f.AircraftID\nJOIN Booking b ON f.FlightID = b.FlightID\nWHERE b.Status = 'Подтверждено'\nGROUP BY ac.Model\nHAVING AVG(b.Price) > 2000;",
            "gpt-4o_response_ru": "SELECT ac.Model, AVG(b.Price) AS AvgBookingPrice\nFROM Aircraft ac\nJOIN Flight f ON ac.AircraftID = f.AircraftID\nJOIN Booking b ON f.FlightID = b.FlightID\nWHERE b.Status = 'Подтверждено'\nGROUP BY ac.Model\nHAVING AVG(b.Price) > 2000;",
            "google/gemini-2.0-flash-001_response": "SELECT a.Model AS AircraftModel, AVG(b.Price) AS AverageBookingPrice\nFROM Aircraft a\nJOIN Flight f ON a.AircraftID = f.AircraftID\nJOIN Booking b ON f.FlightID = b.FlightID\nWHERE b.Status = 'Подтверждено'\nGROUP BY a.Model\nHAVING AVG(b.Price) > 2000;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT a.Model\nFROM Aircraft a\nJOIN Flight f ON a.AircraftID = f.AircraftID\nJOIN Booking b ON f.FlightID = b.FlightID\nWHERE b.Status = 'Подтверждено'\nGROUP BY a.Model\nHAVING AVG(b.Price) > 2000;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT a.Model AS AircraftModel, AVG(b.Price) AS AvgBookingPrice\nFROM Aircraft a\nJOIN Flight f ON a.AircraftID = f.AircraftID\nJOIN Booking b ON f.FlightID = b.FlightID\nWHERE b.Status = 'Подтверждено'\nGROUP BY a.Model\nHAVING AVG(b.Price) > 2000;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT a.Model AS AircraftModel, AVG(b.Price) AS AvgBookingPrice\nFROM Aircraft a\nJOIN Flight f ON a.AircraftID = f.AircraftID\nJOIN Booking b ON f.FlightID = b.FlightID\nWHERE b.Status = 'Подтверждено'\nGROUP BY a.Model\nHAVING AVG(b.Price) > 2000;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT a.Model, AVG(b.Price) AS AvgBookingPrice\nFROM Aircraft a\nJOIN Flight f ON a.AircraftID = f.AircraftID\nJOIN Booking b ON f.FlightID = b.FlightID\nWHERE b.Status = 'Подтверждено'\nGROUP BY a.Model\nHAVING AVG(b.Price) > 2000;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT a.Model AS AircraftModel, AVG(b.Price) AS AvgBookingPrice\nFROM Aircraft a\nJOIN Flight f ON a.AircraftID = f.AircraftID\nJOIN Booking b ON f.FlightID = b.FlightID\nWHERE b.Status = 'Подтверждено'\nGROUP BY a.Model\nHAVING AVG(b.Price) > 2000;",
            "gigachat_response": "SELECT ac.Model, AVG(b.Price) AS AverageBookingCost\nFROM Aircraft ac\nJOIN Flight fl ON ac.AircraftID = fl.AircraftID\nJOIN Booking b ON fl.FlightID = b.FlightID\nWHERE b.Status = 'Подтверждено'\nGROUP BY ac.Model\nHAVING AVG(b.Price) > 2000;",
            "gigachat_response_ru": "SELECT ac.Model, AVG(b.Price) AS AverageBookingPrice\nFROM Aircraft ac\nJOIN Flight fl ON ac.AircraftID = fl.AircraftID\nJOIN Booking b ON fl.FlightID = b.FlightID\nWHERE b.Status = 'Подтверждено'\nGROUP BY ac.Model\nHAVING AVG(b.Price) > 2000;"
        },
        {
            "question": "Какие аэропорты имеют более 2 пилотов с опытом работы более 10 лет?",
            "sql_query": "SELECT ap.Name AS AirportName, COUNT(p.PilotID) AS TotalPilots\nFROM Airport ap\nJOIN Flight f ON ap.AirportID = f.DepartureAirportID\nJOIN Crew c ON f.FlightID = c.FlightID\nJOIN Pilot p ON c.PilotID = p.PilotID\nWHERE p.ExperienceYears > 10\nGROUP BY ap.Name\nHAVING COUNT(p.PilotID) > 2;",
            "gpt-4o_response": "SELECT ap.Name AS AirportName, COUNT(DISTINCT p.PilotID) AS ExperiencedPilots\nFROM Airport ap\nJOIN Flight f ON ap.AirportID = f.DepartureAirportID OR ap.AirportID = f.ArrivalAirportID\nJOIN Crew c ON f.FlightID = c.FlightID\nJOIN Pilot p ON c.PilotID = p.PilotID\nWHERE p.ExperienceYears > 10\nGROUP BY ap.AirportID, ap.Name\nHAVING COUNT(DISTINCT p.PilotID) > 2;",
            "gpt-4o_response_ru": "SELECT ap.Name AS AirportName, COUNT(DISTINCT p.PilotID) AS ExperiencedPilots\nFROM Airport ap\nJOIN Flight f ON ap.AirportID = f.DepartureAirportID OR ap.AirportID = f.ArrivalAirportID\nJOIN Crew c ON f.FlightID = c.FlightID\nJOIN Pilot p ON c.PilotID = p.PilotID\nWHERE p.ExperienceYears > 10\nGROUP BY ap.AirportID, ap.Name\nHAVING COUNT(DISTINCT p.PilotID) > 2;",
            "google/gemini-2.0-flash-001_response": "SELECT a.Name AS AirportName\nFROM Airport a\nJOIN Flight f ON a.AirportID = f.DepartureAirportID\nJOIN Airline al ON f.AirlineID = al.AirlineID\nJOIN Pilot p ON al.AirlineID = p.AirlineID\nWHERE p.ExperienceYears > 10\nGROUP BY a.Name\nHAVING COUNT(DISTINCT p.PilotID) > 2;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT a.Name AS AirportName\nFROM Airport a\nJOIN Flight f ON a.AirportID = f.DepartureAirportID\nJOIN Airline al ON f.AirlineID = al.AirlineID\nJOIN Pilot p ON al.AirlineID = p.AirlineID\nWHERE p.ExperienceYears > 10\nGROUP BY a.Name\nHAVING COUNT(DISTINCT p.PilotID) > 2;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT a.Name AS AirportName, COUNT(DISTINCT p.PilotID) AS TotalPilots\nFROM Airport a\nJOIN Flight f ON a.AirportID = f.DepartureAirportID\nJOIN Crew c ON f.FlightID = c.FlightID\nJOIN Pilot p ON c.PilotID = p.PilotID\nWHERE p.ExperienceYears > 10\nGROUP BY a.Name\nHAVING COUNT(DISTINCT p.PilotID) > 2;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT a.Name AS AirportName, COUNT(DISTINCT p.PilotID) AS TotalPilots\nFROM Airport a\nJOIN Flight f ON a.AirportID = f.DepartureAirportID\nJOIN Crew c ON f.FlightID = c.FlightID\nJOIN Pilot p ON c.PilotID = p.PilotID\nWHERE p.ExperienceYears > 10\nGROUP BY a.Name\nHAVING COUNT(DISTINCT p.PilotID) > 2;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT ap.Name AS AirportName, COUNT(DISTINCT p.PilotID) AS ExperiencedPilots\nFROM Airport ap\nJOIN Flight f ON ap.AirportID = f.DepartureAirportID\nJOIN Crew c ON f.FlightID = c.FlightID\nJOIN Pilot p ON c.PilotID = p.PilotID\nWHERE p.ExperienceYears > 10\nGROUP BY ap.Name\nHAVING COUNT(DISTINCT p.PilotID) > 2;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT ap.Name AS AirportName, COUNT(DISTINCT p.PilotID) AS ExperiencedPilots\nFROM Airport ap\nJOIN Flight f ON ap.AirportID = f.DepartureAirportID\nJOIN Crew c ON f.FlightID = c.FlightID\nJOIN Pilot p ON c.PilotID = p.PilotID\nWHERE p.ExperienceYears > 10\nGROUP BY ap.Name\nHAVING COUNT(DISTINCT p.PilotID) > 2;",
            "gigachat_response": "SELECT DISTINCT ap.Name AS AirportName\nFROM Airport ap\nJOIN Flight f ON ap.AirportID = f.DepartureAirportID OR ap.AirportID = f.ArrivalAirportID\nJOIN Crew cr ON f.FlightID = cr.FlightID\nJOIN Pilot pi ON cr.PilotID = pi.PilotID\nWHERE pi.ExperienceYears > 10\nGROUP BY ap.Name\nHAVING COUNT(DISTINCT pi.PilotID) > 2;",
            "gigachat_response_ru": "SELECT a.Name AS AirportName\nFROM Airport a\nJOIN Flight f ON a.AirportID = f.DepartureAirportID OR a.AirportID = f.ArrivalAirportID\nJOIN Crew c ON f.FlightID = c.FlightID\nJOIN Pilot p ON c.PilotID = p.PilotID\nWHERE p.ExperienceYears > 10\nGROUP BY a.Name\nHAVING COUNT(DISTINCT p.PilotID) > 2;"
        },
        {
            "question": "Какие авиакомпании имеют среднюю продолжительность рейса более 150 минут?",
            "sql_query": "SELECT al.Name AS AirlineName, AVG(f.DurationMinutes) AS AvgFlightDuration\nFROM Airline al\nJOIN Flight f ON al.AirlineID = f.AirlineID\nGROUP BY al.Name\nHAVING AVG(f.DurationMinutes) > 150;",
            "gpt-4o_response": "SELECT al.Name AS AirlineName, AVG(r.DurationMinutes) AS AvgFlightDuration\nFROM Airline al\nJOIN Route r ON al.AirlineID = r.AirlineID\nGROUP BY al.Name\nHAVING AVG(r.DurationMinutes) > 150;",
            "gpt-4o_response_ru": "SELECT al.Name AS AirlineName, AVG(f.DurationMinutes) AS AvgFlightDuration\nFROM Airline al\nJOIN Flight f ON al.AirlineID = f.AirlineID\nGROUP BY al.Name\nHAVING AVG(f.DurationMinutes) > 150;",
            "google/gemini-2.0-flash-001_response": "SELECT a.Name AS AirlineName, AVG(f.DurationMinutes) AS AverageFlightDuration\nFROM Airline a\nJOIN Flight f ON a.AirlineID = f.AirlineID\nGROUP BY a.Name\nHAVING AVG(f.DurationMinutes) > 150;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT a.Name AS AirlineName\nFROM Airline a\nJOIN Flight f ON a.AirlineID = f.AirlineID\nGROUP BY a.Name\nHAVING AVG(f.DurationMinutes) > 150;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT a.Name AS AirlineName, AVG(f.DurationMinutes) AS AverageFlightDuration\nFROM Airline a\nJOIN Flight f ON a.AirlineID = f.AirlineID\nGROUP BY a.Name\nHAVING AVG(f.DurationMinutes) > 150;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT a.Name AS AirlineName, AVG(f.DurationMinutes) AS AvgFlightDuration\nFROM Airline a\nJOIN Flight f ON a.AirlineID = f.AirlineID\nGROUP BY a.Name\nHAVING AVG(f.DurationMinutes) > 150;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT a.Name AS AirlineName, AVG(f.DurationMinutes) AS AvgFlightDuration\nFROM Airline a\nJOIN Flight f ON a.AirlineID = f.AirlineID\nGROUP BY a.Name\nHAVING AVG(f.DurationMinutes) > 150;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT a.Name AS AirlineName, AVG(f.DurationMinutes) AS AvgFlightDuration\nFROM Airline a\nJOIN Flight f ON a.AirlineID = f.AirlineID\nGROUP BY a.Name\nHAVING AVG(f.DurationMinutes) > 150;",
            "gigachat_response": "SELECT \n    al.Name AS AirlineName,\n    AVG(f.DurationMinutes) AS AverageFlightDuration\nFROM \n    Airline al\nJOIN \n    Flight f ON al.AirlineID = f.AirlineID\nGROUP BY \n    al.Name\nHAVING \n    AVG(f.DurationMinutes) > 150;",
            "gigachat_response_ru": "SELECT a.Name AS AirlineName, AVG(f.DurationMinutes) AS AverageDuration\nFROM Airline a\nJOIN Flight f ON a.AirlineID = f.AirlineID\nGROUP BY a.Name\nHAVING AVG(f.DurationMinutes) > 150;"
        },
        {
            "question": "Какие пассажиры имеют более 1 запланированного рейса?",
            "sql_query": "SELECT p.FirstName, p.LastName, COUNT(f.FlightID) AS TotalFlights\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nJOIN Flight f ON b.FlightID = f.FlightID\nWHERE f.Status = 'Запланирован'\nGROUP BY p.FirstName, p.LastName\nHAVING COUNT(f.FlightID) > 1;",
            "gpt-4o_response": "SELECT p.FirstName, p.LastName, COUNT(DISTINCT b.FlightID) AS ScheduledFlights\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nJOIN Flight f ON b.FlightID = f.FlightID\nWHERE f.Status = 'Scheduled'\nGROUP BY p.FirstName, p.LastName\nHAVING COUNT(DISTINCT b.FlightID) > 1;",
            "gpt-4o_response_ru": "SELECT p.FirstName, p.LastName, COUNT(f.FlightID) AS ScheduledFlights\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nJOIN Flight f ON b.FlightID = f.FlightID\nWHERE f.Status = 'Scheduled'\nGROUP BY p.FirstName, p.LastName\nHAVING COUNT(f.FlightID) > 1;",
            "google/gemini-2.0-flash-001_response": "SELECT p.FirstName, p.LastName, COUNT(DISTINCT b.FlightID) AS NumberOfFlights\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nGROUP BY p.PassengerID, p.FirstName, p.LastName\nHAVING COUNT(DISTINCT b.FlightID) > 1;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT p.FirstName, p.LastName\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nGROUP BY p.PassengerID, p.FirstName, p.LastName\nHAVING COUNT(DISTINCT b.FlightID) > 1;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT p.FirstName, p.LastName, COUNT(b.FlightID) AS TotalFlights\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nWHERE b.Status = 'Подтверждено' AND b.FlightID IN (SELECT FlightID FROM Flight WHERE Status = 'Scheduled')\nGROUP BY p.FirstName, p.LastName\nHAVING COUNT(b.FlightID) > 1;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT p.FirstName, p.LastName, COUNT(b.BookingID) AS TotalBookings\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nJOIN Flight f ON b.FlightID = f.FlightID\nWHERE f.Status = 'Scheduled'\nGROUP BY p.FirstName, p.LastName\nHAVING COUNT(b.BookingID) > 1;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT p.FirstName, p.LastName, COUNT(b.FlightID) AS TotalFlights\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nJOIN Flight f ON b.FlightID = f.FlightID\nWHERE f.Status = 'Scheduled'\nGROUP BY p.FirstName, p.LastName\nHAVING COUNT(b.FlightID) > 1;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT p.FirstName, p.LastName, COUNT(b.FlightID) AS TotalFlights\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nJOIN Flight f ON b.FlightID = f.FlightID\nWHERE f.Status = 'Scheduled'\nGROUP BY p.FirstName, p.LastName\nHAVING COUNT(b.FlightID) > 1;",
            "gigachat_response": "SELECT p.FirstName, p.LastName, COUNT(b.BookingID) AS NumberOfBookings\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nWHERE b.Status = 'Запланирован'\nGROUP BY p.FirstName, p.LastName\nHAVING COUNT(b.BookingID) > 1;",
            "gigachat_response_ru": "SELECT p.FirstName, p.LastName, COUNT(b.BookingID) AS NumBookings\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nWHERE b.Status = 'Запланирован'\nGROUP BY p.FirstName, p.LastName\nHAVING COUNT(b.BookingID) > 1;"
        },
        {
            "question": "Какие модели самолетов имеют общий вес принятого багажа более 100 кг?",
            "sql_query": "SELECT a.Model, SUM(bg.WeightKG) AS TotalBaggageWeight\nFROM Aircraft a\nJOIN Flight f ON a.AircraftID = f.AircraftID\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN Baggage bg ON b.BookingID = bg.BookingID\nWHERE bg.Status = 'Принято'\nGROUP BY a.Model\nHAVING SUM(bg.WeightKG) > 100;",
            "gpt-4o_response": "SELECT ac.Model, SUM(bg.WeightKG) AS TotalBaggageWeight\nFROM Aircraft ac\nJOIN Flight f ON ac.AircraftID = f.AircraftID\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN Baggage bg ON b.BookingID = bg.BookingID\nWHERE bg.Status = 'Принято'\nGROUP BY ac.Model\nHAVING SUM(bg.WeightKG) > 100;",
            "gpt-4o_response_ru": "SELECT ac.Model, SUM(bg.WeightKG) AS TotalBaggageWeight\nFROM Aircraft ac\nJOIN Flight f ON ac.AircraftID = f.AircraftID\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN Baggage bg ON b.BookingID = bg.BookingID\nWHERE bg.Status = 'Принято'\nGROUP BY ac.Model\nHAVING SUM(bg.WeightKG) > 100;",
            "google/gemini-2.0-flash-001_response": "SELECT a.Model AS AircraftModel, SUM(bg.WeightKG) AS TotalBaggageWeight\nFROM Aircraft a\nJOIN Flight f ON a.AircraftID = f.AircraftID\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN Baggage bg ON b.BookingID = bg.BookingID\nWHERE bg.Status = 'Принято'\nGROUP BY a.Model\nHAVING SUM(bg.WeightKG) > 100;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT a.Model\nFROM Aircraft a\nJOIN Flight f ON a.AircraftID = f.AircraftID\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN Baggage bg ON b.BookingID = bg.BookingID\nWHERE bg.Status = 'Принято'\nGROUP BY a.Model\nHAVING SUM(bg.WeightKG) > 100;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT a.Model AS AircraftModel, SUM(bg.WeightKG) AS TotalBaggageWeight\nFROM Aircraft a\nJOIN Flight f ON a.AircraftID = f.AircraftID\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN Baggage bg ON b.BookingID = bg.BookingID\nWHERE bg.Status = 'Принято'\nGROUP BY a.Model\nHAVING SUM(bg.WeightKG) > 100;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT a.Model AS AircraftModel, SUM(bg.WeightKG) AS TotalBaggageWeight\nFROM Aircraft a\nJOIN Flight f ON a.AircraftID = f.AircraftID\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN Baggage bg ON b.BookingID = bg.BookingID\nWHERE bg.Status = 'Принято'\nGROUP BY a.Model\nHAVING SUM(bg.WeightKG) > 100",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT a.Model, SUM(bg.WeightKG) AS TotalBaggageWeight\nFROM Aircraft a\nJOIN Flight f ON a.AircraftID = f.AircraftID\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN Baggage bg ON b.BookingID = bg.BookingID\nWHERE bg.Status = 'Принято'\nGROUP BY a.Model\nHAVING SUM(bg.WeightKG) > 100;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT a.Model, SUM(bg.WeightKG) AS TotalBaggageWeight\nFROM Aircraft a\nJOIN Flight f ON a.AircraftID = f.AircraftID\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN Baggage bg ON b.BookingID = bg.BookingID\nWHERE bg.Status = 'Принято'\nGROUP BY a.Model\nHAVING SUM(bg.WeightKG) > 100;",
            "gigachat_response": "SELECT ac.Model, SUM(bg.WeightKG) AS TotalAcceptedBaggageWeight\nFROM Aircraft ac\nJOIN Flight fl ON ac.AircraftID = fl.AircraftID\nJOIN Booking bk ON fl.FlightID = bk.FlightID\nJOIN Baggage bg ON bk.BookingID = bg.BaggageID\nWHERE bg.Status = 'Принято'\nGROUP BY ac.Model\nHAVING SUM(bg.WeightKG) > 100;",
            "gigachat_response_ru": "SELECT ac.Model, SUM(bg.WeightKG) AS TotalBaggageWeight\nFROM Aircraft ac\nJOIN Flight fl ON ac.AircraftID = fl.AircraftID\nJOIN Booking bk ON fl.FlightID = bk.FlightID\nJOIN Baggage bg ON bk.BookingID = bg.BaggageID\nWHERE bg.Status = 'Принято'\nGROUP BY ac.Model\nHAVING SUM(bg.WeightKG) > 100;"
        },
        {
            "question": "Какие аэропорты имеют среднюю стоимость подтвержденного бронирования более 1500?",
            "sql_query": "SELECT ap.Name AS AirportName, AVG(b.Price) AS AvgBookingPrice\nFROM Airport ap\nJOIN Flight f ON ap.AirportID = f.DepartureAirportID\nJOIN Booking b ON f.FlightID = b.FlightID\nWHERE b.Status = 'Подтверждено'\nGROUP BY ap.Name\nHAVING AVG(b.Price) > 1500;",
            "gpt-4o_response": "SELECT ap.Name AS AirportName, AVG(b.Price) AS AvgBookingPrice\nFROM Airport ap\nJOIN Flight f ON ap.AirportID = f.DepartureAirportID\nJOIN Booking b ON f.FlightID = b.FlightID\nWHERE b.Status = 'Подтверждено'\nGROUP BY ap.Name\nHAVING AVG(b.Price) > 1500;",
            "gpt-4o_response_ru": "SELECT ap.Name AS AirportName, AVG(b.Price) AS AvgBookingPrice\nFROM Airport ap\nJOIN Flight f ON ap.AirportID = f.DepartureAirportID\nJOIN Booking b ON f.FlightID = b.FlightID\nWHERE b.Status = 'Подтверждено'\nGROUP BY ap.Name\nHAVING AVG(b.Price) > 1500;",
            "google/gemini-2.0-flash-001_response": "SELECT \n    ap.Name AS AirportName,\n    AVG(b.Price) AS AverageBookingPrice\nFROM Airport ap\nJOIN Flight f ON ap.AirportID = f.DepartureAirportID\nJOIN Booking b ON f.FlightID = b.FlightID\nWHERE b.Status = 'Подтверждено'\nGROUP BY ap.Name\nHAVING AVG(b.Price) > 1500;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT \n    ap.Name AS AirportName,\n    AVG(b.Price) AS AverageBookingPrice\nFROM Airport ap\nJOIN Flight f ON ap.AirportID = f.DepartureAirportID OR ap.AirportID = f.ArrivalAirportID\nJOIN Booking b ON f.FlightID = b.FlightID\nWHERE b.Status = 'Подтверждено'\nGROUP BY ap.Name\nHAVING AVG(b.Price) > 1500;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT a.Name AS AirportName, AVG(b.Price) AS AvgBookingPrice\nFROM Airport a\nJOIN Flight f ON a.AirportID = f.DepartureAirportID\nJOIN Booking b ON f.FlightID = b.FlightID\nWHERE b.Status = 'Подтверждено'\nGROUP BY a.Name\nHAVING AVG(b.Price) > 1500;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT a.Name AS AirportName, AVG(b.Price) AS AvgBookingPrice\nFROM Airport a\nJOIN Flight f ON a.AirportID = f.DepartureAirportID\nJOIN Booking b ON f.FlightID = b.FlightID\nWHERE b.Status = 'Подтверждено'\nGROUP BY a.Name\nHAVING AVG(b.Price) > 1500;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT ap.Name AS AirportName, AVG(b.Price) AS AvgBookingPrice\nFROM Airport ap\nJOIN Flight f ON ap.AirportID = f.DepartureAirportID\nJOIN Booking b ON f.FlightID = b.FlightID\nWHERE b.Status = 'Подтверждено'\nGROUP BY ap.Name\nHAVING AVG(b.Price) > 1500;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT ap.Name AS AirportName, AVG(b.Price) AS AvgBookingPrice\nFROM Airport ap\nJOIN Flight f ON ap.AirportID = f.DepartureAirportID\nJOIN Booking b ON f.FlightID = b.FlightID\nWHERE b.Status = 'Подтверждено'\nGROUP BY ap.Name\nHAVING AVG(b.Price) > 1500;",
            "gigachat_response": "SELECT \n    ap.Name AS AirportName,\n    AVG(b.Price) AS AverageBookingCost\nFROM \n    Airport ap\nJOIN \n    Flight f ON ap.AirportID = f.DepartureAirportID OR ap.AirportID = f.ArrivalAirportID\nJOIN \n    Booking b ON f.FlightID = b.FlightID\nWHERE \n    b.Status = 'Подтверждено'\nGROUP BY \n    ap.Name\nHAVING \n    AVG(b.Price) > 1500;",
            "gigachat_response_ru": "SELECT \n    ap.Name AS AirportName,\n    AVG(b.Price) AS AverageBookingCost\nFROM \n    Airport ap\nJOIN \n    Flight f ON ap.AirportID = f.DepartureAirportID OR ap.AirportID = f.ArrivalAirportID\nJOIN \n    Booking b ON f.FlightID = b.FlightID\nWHERE \n    b.Status = 'Подтверждено'\nGROUP BY \n    ap.Name\nHAVING \n    AVG(b.Price) > 1500;"
        },
        {
            "question": "Какие рейсы имеют продолжительность более 120 минут и выполняются самолетами с вместимостью более 150 пассажиров? Нужна подробная информация о рейсе и самолете",
            "sql_query": "SELECT \n    f.FlightNumber,\n    a.Model,\n    al.Name AS AirlineName,\n    dep.Name AS DepartureAirport,\n    arr.Name AS ArrivalAirport,\n    f.DurationMinutes\nFROM Flight f\nJOIN Aircraft a ON f.AircraftID = a.AircraftID\nJOIN Airline al ON f.AirlineID = al.AirlineID\nJOIN Airport dep ON f.DepartureAirportID = dep.AirportID\nJOIN Airport arr ON f.ArrivalAirportID = arr.AirportID\nWHERE f.DurationMinutes > 120 \nAND a.Capacity > 150;",
            "gpt-4o_response": "SELECT \n    f.FlightNumber,\n    f.ScheduledDeparture,\n    f.ScheduledArrival,\n    f.Status AS FlightStatus,\n    f.DurationMinutes,\n    a.Model AS AircraftModel,\n    a.Manufacturer AS AircraftManufacturer,\n    a.Capacity AS AircraftCapacity,\n    a.RangeKM AS AircraftRangeKM,\n    a.MaxSpeedKMH AS AircraftMaxSpeedKMH,\n    a.WeightKG AS AircraftWeightKG,\n    a.EngineType AS AircraftEngineType,\n    a.YearOfManufacture AS AircraftYearOfManufacture,\n    a.RegistrationNumber AS AircraftRegistrationNumber\nFROM \n    Flight f\nJOIN \n    Aircraft a ON f.AircraftID = a.AircraftID\nWHERE \n    f.DurationMinutes > 120\n    AND a.Capacity > 150;",
            "gpt-4o_response_ru": "SELECT \n    f.FlightID,\n    f.FlightNumber,\n    f.ScheduledDeparture,\n    f.ScheduledArrival,\n    f.Status AS FlightStatus,\n    f.DurationMinutes,\n    a.AircraftID,\n    a.Model,\n    a.Manufacturer,\n    a.Capacity,\n    a.RangeKM,\n    a.MaxSpeedKMH,\n    a.WeightKG,\n    a.EngineType,\n    a.YearOfManufacture,\n    a.RegistrationNumber\nFROM \n    Flight f\nJOIN \n    Aircraft a ON f.AircraftID = a.AircraftID\nWHERE \n    f.DurationMinutes > 120\n    AND a.Capacity > 150;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    F.FlightNumber,\n    A.Model AS AircraftModel,\n    A.Manufacturer AS AircraftManufacturer,\n    A.Capacity AS AircraftCapacity,\n    F.DurationMinutes,\n    AL.Name AS AirlineName,\n    DA.Name AS DepartureAirport,\n    AA.Name AS ArrivalAirport,\n    F.ScheduledDeparture,\n    F.ScheduledArrival,\n    F.Status\nFROM\n    Flight AS F\nJOIN\n    Aircraft AS A ON F.AircraftID = A.AircraftID\nJOIN\n    Airline AS AL ON F.AirlineID = AL.AirlineID\nJOIN\n    Airport AS DA ON F.DepartureAirportID = DA.AirportID\nJOIN\n    Airport AS AA ON F.ArrivalAirportID = AA.AirportID\nWHERE\n    F.DurationMinutes > 120 AND A.Capacity > 150;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    F.FlightNumber,\n    AL.Name AS AirlineName,\n    AC.Model AS AircraftModel,\n    AC.Capacity AS AircraftCapacity,\n    F.ScheduledDeparture,\n    F.ScheduledArrival,\n    F.DurationMinutes\nFROM\n    Flight AS F\nJOIN\n    Airline AS AL ON F.AirlineID = AL.AirlineID\nJOIN\n    Aircraft AS AC ON F.AircraftID = AC.AircraftID\nWHERE\n    F.DurationMinutes > 120 AND AC.Capacity > 150;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    f.FlightNumber, \n    f.ScheduledDeparture, \n    f.ScheduledArrival, \n    f.DurationMinutes, \n    a.Model, \n    a.Manufacturer, \n    a.Capacity, \n    a.RangeKM, \n    a.MaxSpeedKMH, \n    a.WeightKG, \n    a.EngineType, \n    a.YearOfManufacture, \n    a.RegistrationNumber\nFROM \n    Flight f\nJOIN \n    Aircraft a ON f.AircraftID = a.AircraftID\nWHERE \n    f.DurationMinutes > 120 AND a.Capacity > 150;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    f.FlightID,\n    f.FlightNumber,\n    a.Model AS AircraftModel,\n    a.Capacity AS AircraftCapacity,\n    f.ScheduledDeparture,\n    f.ScheduledArrival,\n    f.DurationMinutes,\n    f.Status,\n    al.Name AS AirlineName\nFROM \n    Flight f\nJOIN \n    Aircraft a ON f.AircraftID = a.AircraftID\nJOIN \n    Airline al ON f.AirlineID = al.AirlineID\nWHERE \n    f.DurationMinutes > 120 AND a.Capacity > 150;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    f.FlightID,\n    f.FlightNumber,\n    al.Name AS AirlineName,\n    a.Model AS AircraftModel,\n    a.Manufacturer AS AircraftManufacturer,\n    a.Capacity AS AircraftCapacity,\n    f.ScheduledDeparture,\n    f.ScheduledArrival,\n    f.DurationMinutes,\n    dep.Name AS DepartureAirport,\n    arr.Name AS ArrivalAirport\nFROM \n    Flight f\nJOIN \n    Aircraft a ON f.AircraftID = a.AircraftID\nJOIN \n    Airline al ON f.AirlineID = al.AirlineID\nJOIN \n    Airport dep ON f.DepartureAirportID = dep.AirportID\nJOIN \n    Airport arr ON f.ArrivalAirportID = arr.AirportID\nWHERE \n    f.DurationMinutes > 120 \n    AND a.Capacity > 150\nORDER BY \n    f.DurationMinutes DESC;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    f.FlightID,\n    f.FlightNumber,\n    al.Name AS AirlineName,\n    a.Model AS AircraftModel,\n    a.Manufacturer,\n    a.Capacity,\n    a.RangeKM,\n    a.MaxSpeedKMH,\n    dep.Name AS DepartureAirport,\n    arr.Name AS ArrivalAirport,\n    f.ScheduledDeparture,\n    f.ScheduledArrival,\n    f.DurationMinutes,\n    f.Status\nFROM \n    Flight f\nJOIN \n    Aircraft a ON f.AircraftID = a.AircraftID\nJOIN \n    Airline al ON f.AirlineID = al.AirlineID\nJOIN \n    Airport dep ON f.DepartureAirportID = dep.AirportID\nJOIN \n    Airport arr ON f.ArrivalAirportID = arr.AirportID\nWHERE \n    f.DurationMinutes > 120 \n    AND a.Capacity > 150\nORDER BY \n    f.DurationMinutes DESC;",
            "gigachat_response": "SELECT \n    f.FlightID AS Flight_ID,\n    f.FlightNumber AS Flight_Number,\n    f.ScheduledDeparture AS Scheduled_Departure_Time,\n    f.ScheduledArrival AS Scheduled_Arrival_Time,\n    f.DurationMinutes AS Flight_Duration_Minutes,\n    a.Model AS Aircraft_Model,\n    a.Capacity AS Aircraft_Capacity,\n    a.Manufacturer AS Aircraft_Manufacturer\nFROM \n    Flight f\nINNER JOIN \n    Aircraft a ON f.AircraftID = a.AircraftID\nWHERE \n    f.DurationMinutes > 120 AND a.Capacity > 150;",
            "gigachat_response_ru": "SELECT \n    f.FlightID AS Flight_ID,\n    f.FlightNumber AS Flight_Number,\n    f.ScheduledDeparture AS Departure_Time,\n    f.ScheduledArrival AS Arrival_Time,\n    f.DurationMinutes AS Flight_Duration_Minutes,\n    a.Model AS Aircraft_Model,\n    a.Capacity AS Aircraft_Capacity,\n    a.Manufacturer AS Aircraft_Manufacturer\nFROM \n    Flight f\nINNER JOIN \n    Aircraft a ON f.AircraftID = a.AircraftID\nWHERE \n    f.DurationMinutes > 120 AND a.Capacity > 150;"
        },
        {
            "question": "Какие пассажиры летали более чем с одной авиакомпанией?",
            "sql_query": "SELECT \n    p.FirstName,\n    p.LastName,\n    COUNT(DISTINCT f.AirlineID) AS DifferentAirlines\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nJOIN Flight f ON b.FlightID = f.FlightID\nGROUP BY p.PassengerID, p.FirstName, p.LastName\nHAVING COUNT(DISTINCT f.AirlineID) > 1\nORDER BY DifferentAirlines DESC;",
            "gpt-4o_response": "SELECT p.FirstName, p.LastName\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nJOIN Flight f ON b.FlightID = f.FlightID\nJOIN Airline a ON f.AirlineID = a.AirlineID\nGROUP BY p.FirstName, p.LastName\nHAVING COUNT(DISTINCT a.AirlineID) > 1;",
            "gpt-4o_response_ru": "SELECT p.FirstName, p.LastName\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nJOIN Flight f ON b.FlightID = f.FlightID\nJOIN Airline a ON f.AirlineID = a.AirlineID\nGROUP BY p.FirstName, p.LastName\nHAVING COUNT(DISTINCT a.AirlineID) > 1;",
            "google/gemini-2.0-flash-001_response": "SELECT p.FirstName, p.LastName\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nJOIN Flight f ON b.FlightID = f.FlightID\nGROUP BY p.PassengerID, p.FirstName, p.LastName\nHAVING COUNT(DISTINCT f.AirlineID) > 1;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT p.FirstName, p.LastName\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nJOIN Flight f ON b.FlightID = f.FlightID\nGROUP BY p.PassengerID, p.FirstName, p.LastName\nHAVING COUNT(DISTINCT f.AirlineID) > 1;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT p.FirstName, p.LastName, COUNT(DISTINCT b.AirlineID) AS AirlinesCount\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nJOIN Flight f ON b.FlightID = f.FlightID\nJOIN Airline a ON f.AirlineID = a.AirlineID\nGROUP BY p.FirstName, p.LastName\nHAVING COUNT(DISTINCT a.AirlineID) > 1;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT p.FirstName, p.LastName, COUNT(DISTINCT b.AirlineID) AS AirlinesCount\nFROM Passenger p\nJOIN Booking bo ON p.PassengerID = bo.PassengerID\nJOIN Flight f ON bo.FlightID = f.FlightID\nJOIN Airline a ON f.AirlineID = a.AirlineID\nGROUP BY p.FirstName, p.LastName\nHAVING COUNT(DISTINCT a.AirlineID) > 1;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT p.FirstName, p.LastName, COUNT(DISTINCT f.AirlineID) AS AirlinesCount\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nJOIN Flight f ON b.FlightID = f.FlightID\nGROUP BY p.PassengerID, p.FirstName, p.LastName\nHAVING COUNT(DISTINCT f.AirlineID) > 1;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT p.FirstName, p.LastName, COUNT(DISTINCT f.AirlineID) AS AirlinesCount\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nJOIN Flight f ON b.FlightID = f.FlightID\nGROUP BY p.PassengerID, p.FirstName, p.LastName\nHAVING COUNT(DISTINCT f.AirlineID) > 1\nORDER BY AirlinesCount DESC;",
            "gigachat_response": "SELECT DISTINCT p.FirstName, p.LastName\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nJOIN Flight f ON b.FlightID = f.FlightID\nGROUP BY p.PassengerID, p.FirstName, p.LastName\nHAVING COUNT(DISTINCT f.AirlineID) > 1;",
            "gigachat_response_ru": "SELECT DISTINCT p.FirstName, p.LastName\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nJOIN Flight f ON b.FlightID = f.FlightID\nGROUP BY p.PassengerID, p.FirstName, p.LastName\nHAVING COUNT(DISTINCT f.AirlineID) > 1;"
        },
        {
            "question": "Какие аэропорты обслуживают международные рейсы? В ответе укажите название аэропорта, город, страну и количество международных рейсов.",
            "sql_query": "SELECT \n    a.Name AS AirportName,\n    a.City,\n    a.Country,\n    COUNT(DISTINCT f.FlightID) AS InternationalFlights\nFROM Airport a\nJOIN Flight f ON a.AirportID = f.DepartureAirportID\nJOIN Airport arr ON f.ArrivalAirportID = arr.AirportID\nWHERE a.Country != arr.Country\nGROUP BY a.AirportID, a.Name, a.City, a.Country;",
            "gpt-4o_response": "SELECT ap.Name AS AirportName, \n       ap.City AS City, \n       ap.Country AS Country, \n       COUNT(DISTINCT f.FlightID) AS InternationalFlights\nFROM Airport ap\nJOIN Flight f ON ap.AirportID = f.DepartureAirportID\nJOIN Route r ON f.DepartureAirportID = r.DepartureAirportID\nWHERE ap.Country <> (SELECT a.Country FROM Airport a WHERE a.AirportID = f.ArrivalAirportID)\nGROUP BY ap.Name, ap.City, ap.Country\nHAVING COUNT(DISTINCT f.FlightID) > 0;",
            "gpt-4o_response_ru": "SELECT ap.Name AS AirportName, ap.City, ap.Country, COUNT(DISTINCT f.FlightID) AS InternationalFlights\nFROM Airport ap\nJOIN Flight f ON ap.AirportID = f.DepartureAirportID OR ap.AirportID = f.ArrivalAirportID\nJOIN Route r ON f.DepartureAirportID = r.DepartureAirportID AND f.ArrivalAirportID = r.ArrivalAirportID\nWHERE ap.Country <> (SELECT Country FROM Airport WHERE AirportID = f.DepartureAirportID)\n   OR ap.Country <> (SELECT Country FROM Airport WHERE AirportID = f.ArrivalAirportID)\nGROUP BY ap.Name, ap.City, ap.Country\nHAVING COUNT(DISTINCT f.FlightID) > 0;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    a.Name AS AirportName,\n    a.City AS AirportCity,\n    a.Country AS AirportCountry,\n    COUNT(f.FlightID) AS InternationalFlightsCount\nFROM\n    Airport a\nJOIN\n    Flight f ON a.AirportID = f.DepartureAirportID\nWHERE\n    a.Country != (SELECT Country FROM Airport WHERE AirportID = f.ArrivalAirportID)\nGROUP BY\n    a.AirportID, a.Name, a.City, a.Country\nORDER BY\n    InternationalFlightsCount DESC;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    a.Name AS AirportName,\n    a.City,\n    a.Country,\n    COUNT(f.FlightID) AS NumberOfInternationalFlights\nFROM\n    Airport a\nJOIN\n    Flight f ON a.AirportID = f.DepartureAirportID\nWHERE\n    a.Country != (\n        SELECT Country FROM Airport WHERE AirportID = f.ArrivalAirportID\n    )\nGROUP BY\n    a.AirportID, a.Name, a.City, a.Country\nORDER BY\n    NumberOfInternationalFlights DESC;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    a.Name AS AirportName, \n    a.City AS City, \n    a.Country AS Country, \n    COUNT(DISTINCT f.FlightID) AS InternationalFlights\nFROM \n    Airport a\nJOIN \n    Flight f ON a.AirportID = f.DepartureAirportID\nWHERE \n    f.ArrivalAirportID IN (\n        SELECT \n            AirportID \n        FROM \n            Airport \n        WHERE \n            Country!= a.Country\n    )\nGROUP BY \n    a.Name, \n    a.City, \n    a.Country\nORDER BY \n    InternationalFlights DESC;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    ap.Name AS AirportName, \n    ap.City AS City, \n    ap.Country AS Country, \n    COUNT(DISTINCT f.FlightID) AS InternationalFlights\nFROM \n    Airport ap\nJOIN \n    Flight f ON ap.AirportID = f.DepartureAirportID OR ap.AirportID = f.ArrivalAirportID\nWHERE \n    f.AirlineID IN (SELECT AirlineID FROM Airline WHERE IATA_Code != 'SU' OR ICAO_Code != 'AFL')\nGROUP BY \n    ap.Name, ap.City, ap.Country\nORDER BY \n    InternationalFlights DESC;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT a.Name AS AirportName, a.City, a.Country, COUNT(f.FlightID) AS InternationalFlights\nFROM Airport a\nJOIN Flight f ON a.AirportID = f.DepartureAirportID OR a.AirportID = f.ArrivalAirportID\nJOIN Airline al ON f.AirlineID = al.AirlineID\nWHERE al.Country != a.Country\nGROUP BY a.Name, a.City, a.Country\nORDER BY InternationalFlights DESC;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    a.Name AS AirportName,\n    a.City,\n    a.Country,\n    COUNT(DISTINCT f.FlightID) AS InternationalFlightsCount\nFROM \n    Airport a\nJOIN \n    Flight f ON a.AirportID = f.DepartureAirportID OR a.AirportID = f.ArrivalAirportID\nJOIN \n    Airport departure ON f.DepartureAirportID = departure.AirportID\nJOIN \n    Airport arrival ON f.ArrivalAirportID = arrival.AirportID\nWHERE \n    departure.Country <> arrival.Country\nGROUP BY \n    a.AirportID, a.Name, a.City, a.Country\nORDER BY \n    InternationalFlightsCount DESC;",
            "gigachat_response": "SELECT \n    a.Name AS AirportName,\n    a.City AS City,\n    a.Country AS Country,\n    COUNT(r.RouteID) AS InternationalRoutesCount\nFROM \n    Airport a\nJOIN \n    Route r ON a.AirportID IN (r.DepartureAirportID, r.ArrivalAirportID)\nWHERE \n    r.DistanceKM >= 1000 -- Assuming international flights typically cover at least 1000 km\nGROUP BY \n    a.Name, a.City, a.Country\nHAVING \n    COUNT(r.RouteID) > 0\nORDER BY \n    InternationalRoutesCount DESC;",
            "gigachat_response_ru": "SELECT \n    a.Name AS AirportName,\n    a.City AS City,\n    a.Country AS Country,\n    COUNT(r.RouteID) AS InternationalRoutesCount\nFROM \n    Airport a\nJOIN \n    Route r ON a.AirportID IN (r.DepartureAirportID, r.ArrivalAirportID)\nWHERE \n    r.DistanceKM >= 1000 -- Предположим, международный рейс имеет расстояние больше 1000 км\nGROUP BY \n    a.AirportID, a.Name, a.City, a.Country\nHAVING \n    COUNT(r.RouteID) > 0;"
        },
        {
            "question": "Какие самолеты имеют более 1 технического обслуживания? В ответе укажите модель самолета, регистрационный номер, количество обслуживаний и общую стоимость обслуживания.",
            "sql_query": "SELECT \n    a.Model,\n    a.RegistrationNumber,\n    COUNT(m.MaintenanceID) AS MaintenanceCount,\n    SUM(m.Cost) AS TotalMaintenanceCost\nFROM Aircraft a\nJOIN Maintenance m ON a.AircraftID = m.AircraftID\nGROUP BY a.AircraftID, a.Model, a.RegistrationNumber\nHAVING COUNT(m.MaintenanceID) > 1;",
            "gpt-4o_response": "SELECT ac.Model AS AircraftModel, \n       ac.RegistrationNumber, \n       COUNT(m.MaintenanceID) AS MaintenanceCount, \n       SUM(m.Cost) AS TotalMaintenanceCost\nFROM Aircraft ac\nJOIN Maintenance m ON ac.AircraftID = m.AircraftID\nGROUP BY ac.Model, ac.RegistrationNumber\nHAVING COUNT(m.MaintenanceID) > 1;",
            "gpt-4o_response_ru": "SELECT \n    ac.Model AS AircraftModel, \n    ac.RegistrationNumber, \n    COUNT(m.MaintenanceID) AS MaintenanceCount, \n    SUM(m.Cost) AS TotalMaintenanceCost\nFROM \n    Aircraft ac\nJOIN \n    Maintenance m ON ac.AircraftID = m.AircraftID\nGROUP BY \n    ac.Model, ac.RegistrationNumber\nHAVING \n    COUNT(m.MaintenanceID) > 1;",
            "google/gemini-2.0-flash-001_response": "SELECT \n    a.Model AS Model,\n    a.RegistrationNumber AS RegistrationNumber,\n    COUNT(m.MaintenanceID) AS NumberOfMaintenances,\n    SUM(m.Cost) AS TotalMaintenanceCost\nFROM \n    Aircraft a\nJOIN \n    Maintenance m ON a.AircraftID = m.AircraftID\nGROUP BY \n    a.AircraftID, a.Model, a.RegistrationNumber\nHAVING \n    COUNT(m.MaintenanceID) > 1;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT \n    a.Model,\n    a.RegistrationNumber,\n    COUNT(m.MaintenanceID) AS NumberOfMaintenances,\n    SUM(m.Cost) AS TotalMaintenanceCost\nFROM Aircraft a\nJOIN Maintenance m ON a.AircraftID = m.AircraftID\nGROUP BY a.AircraftID, a.Model, a.RegistrationNumber\nHAVING COUNT(m.MaintenanceID) > 1;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    a.Model AS AircraftModel, \n    a.RegistrationNumber, \n    COUNT(m.MaintenanceID) AS TotalMaintenances, \n    SUM(m.Cost) AS TotalMaintenanceCost\nFROM \n    Aircraft a\nJOIN \n    Maintenance m ON a.AircraftID = m.AircraftID\nGROUP BY \n    a.Model, \n    a.RegistrationNumber\nHAVING \n    COUNT(m.MaintenanceID) > 1\nORDER BY \n    TotalMaintenances DESC;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    a.Model AS AircraftModel, \n    a.RegistrationNumber, \n    COUNT(m.MaintenanceID) AS TotalMaintenances, \n    SUM(m.Cost) AS TotalMaintenanceCost\nFROM \n    Aircraft a\nJOIN \n    Maintenance m ON a.AircraftID = m.AircraftID\nGROUP BY \n    a.Model, a.RegistrationNumber\nHAVING \n    COUNT(m.MaintenanceID) > 1\nORDER BY \n    TotalMaintenances DESC;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT a.Model AS AircraftModel, a.RegistrationNumber, COUNT(m.MaintenanceID) AS MaintenanceCount, SUM(m.Cost) AS TotalMaintenanceCost\nFROM Aircraft a\nJOIN Maintenance m ON a.AircraftID = m.AircraftID\nGROUP BY a.Model, a.RegistrationNumber\nHAVING COUNT(m.MaintenanceID) > 1;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT a.Model AS AircraftModel, \n       a.RegistrationNumber, \n       COUNT(m.MaintenanceID) AS MaintenanceCount, \n       SUM(m.Cost) AS TotalMaintenanceCost\nFROM Aircraft a\nJOIN Maintenance m ON a.AircraftID = m.AircraftID\nGROUP BY a.Model, a.RegistrationNumber\nHAVING COUNT(m.MaintenanceID) > 1;",
            "gigachat_response": "SELECT \n    ac.Model AS AircraftModel,\n    ac.RegistrationNumber AS RegistrationNumber,\n    COUNT(m.MaintenanceID) AS NumberOfServices,\n    SUM(m.Cost) AS TotalServiceCost\nFROM \n    Aircraft ac\nJOIN \n    Maintenance m ON ac.AircraftID = m.AircraftID\nGROUP BY \n    ac.Model, ac.RegistrationNumber\nHAVING \n    COUNT(m.MaintenanceID) > 1;",
            "gigachat_response_ru": "SELECT \n    ac.Model AS AircraftModel,\n    ac.RegistrationNumber AS RegistrationNumber,\n    COUNT(m.MaintenanceID) AS NumberOfServices,\n    SUM(m.Cost) AS TotalServiceCost\nFROM \n    Aircraft ac\nJOIN \n    Maintenance m ON ac.AircraftID = m.AircraftID\nGROUP BY \n    ac.Model, ac.RegistrationNumber\nHAVING \n    COUNT(m.MaintenanceID) > 1;"
        },
        {
            "question": "Какие топ-10 маршруты имеют самые дорогие билеты? В ответе укажите аэропорты вылета и прилета, среднюю стоимость билета и общее количество билетов.",
            "sql_query": "SELECT \n    dep.Name AS DepartureAirport,\n    arr.Name AS ArrivalAirport,\n    AVG(t.Price) AS AverageTicketPrice,\n    COUNT(t.TicketID) AS TotalTickets\nFROM Route r\nJOIN Airport dep ON r.DepartureAirportID = dep.AirportID\nJOIN Airport arr ON r.ArrivalAirportID = arr.AirportID\nJOIN Flight f ON r.RouteID = f.FlightID\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN Ticket t ON b.BookingID = t.BookingID\nGROUP BY r.RouteID, dep.Name, arr.Name\nORDER BY AverageTicketPrice DESC LIMIT 10;",
            "gpt-4o_response": "SELECT \n    dep_airport.Name AS DepartureAirport,\n    arr_airport.Name AS ArrivalAirport,\n    AVG(t.Price) AS AvgTicketPrice,\n    COUNT(t.TicketID) AS TotalTickets\nFROM \n    Route r\nJOIN \n    Airport dep_airport ON r.DepartureAirportID = dep_airport.AirportID\nJOIN \n    Airport arr_airport ON r.ArrivalAirportID = arr_airport.AirportID\nJOIN \n    Flight f ON r.DepartureAirportID = f.DepartureAirportID AND r.ArrivalAirportID = f.ArrivalAirportID\nJOIN \n    Booking b ON f.FlightID = b.FlightID\nJOIN \n    Ticket t ON b.BookingID = t.BookingID\nGROUP BY \n    dep_airport.Name, arr_airport.Name\nORDER BY \n    AvgTicketPrice DESC\nLIMIT 10;",
            "gpt-4o_response_ru": "SELECT \n    dep_airport.Name AS DepartureAirport,\n    arr_airport.Name AS ArrivalAirport,\n    AVG(t.Price) AS AvgTicketPrice,\n    COUNT(t.TicketID) AS TotalTickets\nFROM \n    Route r\nJOIN \n    Airport dep_airport ON r.DepartureAirportID = dep_airport.AirportID\nJOIN \n    Airport arr_airport ON r.ArrivalAirportID = arr_airport.AirportID\nJOIN \n    Flight f ON r.DepartureAirportID = f.DepartureAirportID AND r.ArrivalAirportID = f.ArrivalAirportID\nJOIN \n    Booking b ON f.FlightID = b.FlightID\nJOIN \n    Ticket t ON b.BookingID = t.BookingID\nGROUP BY \n    dep_airport.Name, arr_airport.Name\nORDER BY \n    AvgTicketPrice DESC\nLIMIT 10;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    DepartureAirport.Name AS DepartureAirportName,\n    ArrivalAirport.Name AS ArrivalAirportName,\n    AVG(Ticket.Price) AS AverageTicketPrice,\n    COUNT(Ticket.TicketID) AS TotalTickets\nFROM\n    Route\nJOIN\n    Airport AS DepartureAirport ON Route.DepartureAirportID = DepartureAirport.AirportID\nJOIN\n    Airport AS ArrivalAirport ON Route.ArrivalAirportID = ArrivalAirport.AirportID\nJOIN\n    Ticket ON Route.RouteID = (\n        SELECT RouteID\n        FROM Route AS SubRoute\n        WHERE SubRoute.DepartureAirportID = Route.DepartureAirportID\n        AND SubRoute.ArrivalAirportID = Route.ArrivalAirportID\n        LIMIT 1\n    )\nGROUP BY\n    DepartureAirport.Name,\n    ArrivalAirport.Name\nORDER BY\n    AverageTicketPrice DESC\nLIMIT 10;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    DepartureAirport.Name AS DepartureAirportName,\n    ArrivalAirport.Name AS ArrivalAirportName,\n    AVG(Ticket.Price) AS AverageTicketPrice,\n    COUNT(Ticket.TicketID) AS TotalTickets\nFROM Route\nJOIN Airport AS DepartureAirport ON Route.DepartureAirportID = DepartureAirport.AirportID\nJOIN Airport AS ArrivalAirport ON Route.ArrivalAirportID = ArrivalAirport.AirportID\nJOIN Ticket ON Route.RouteID IN (SELECT DISTINCT F.FlightID FROM Flight F JOIN Booking B ON F.FlightID = B.FlightID WHERE B.BookingID = Ticket.BookingID)\nGROUP BY DepartureAirport.Name, ArrivalAirport.Name\nORDER BY AverageTicketPrice DESC\nLIMIT 10;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    ap1.Name AS DepartureAirport, \n    ap2.Name AS ArrivalAirport, \n    AVG(t.Price) AS AvgTicketPrice, \n    COUNT(t.TicketID) AS TotalTickets\nFROM \n    Ticket t\nJOIN \n    Booking b ON t.BookingID = b.BookingID\nJOIN \n    Flight f ON b.FlightID = f.FlightID\nJOIN \n    Airport ap1 ON f.DepartureAirportID = ap1.AirportID\nJOIN \n    Airport ap2 ON f.ArrivalAirportID = ap2.AirportID\nGROUP BY \n    ap1.Name, ap2.Name\nORDER BY \n    AvgTicketPrice DESC\nLIMIT 10;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    ap1.Name AS DepartureAirport, \n    ap2.Name AS ArrivalAirport, \n    AVG(t.Price) AS AvgTicketPrice, \n    COUNT(t.TicketID) AS TotalTickets\nFROM \n    Ticket t\nJOIN \n    Booking b ON t.BookingID = b.BookingID\nJOIN \n    Flight f ON b.FlightID = f.FlightID\nJOIN \n    Airport ap1 ON f.DepartureAirportID = ap1.AirportID\nJOIN \n    Airport ap2 ON f.ArrivalAirportID = ap2.AirportID\nGROUP BY \n    ap1.Name, ap2.Name\nORDER BY \n    AvgTicketPrice DESC\nLIMIT 10;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    dep.Name AS DepartureAirport, \n    arr.Name AS ArrivalAirport, \n    AVG(t.Price) AS AverageTicketPrice, \n    COUNT(t.TicketID) AS TotalTickets\nFROM Route r\nJOIN Airport dep ON r.DepartureAirportID = dep.AirportID\nJOIN Airport arr ON r.ArrivalAirportID = arr.AirportID\nJOIN Flight f ON (r.DepartureAirportID = f.DepartureAirportID AND r.ArrivalAirportID = f.ArrivalAirportID)\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN Ticket t ON b.BookingID = t.BookingID\nGROUP BY r.RouteID, dep.Name, arr.Name\nORDER BY AverageTicketPrice DESC\nLIMIT 10;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    dep.Name AS DepartureAirport,\n    arr.Name AS ArrivalAirport,\n    AVG(t.Price) AS AvgTicketPrice,\n    COUNT(t.TicketID) AS TotalTickets\nFROM \n    Route r\nJOIN \n    Airport dep ON r.DepartureAirportID = dep.AirportID\nJOIN \n    Airport arr ON r.ArrivalAirportID = arr.AirportID\nJOIN \n    Flight f ON (r.DepartureAirportID = f.DepartureAirportID AND r.ArrivalAirportID = f.ArrivalAirportID)\nJOIN \n    Booking b ON f.FlightID = b.FlightID\nJOIN \n    Ticket t ON b.BookingID = t.BookingID\nGROUP BY \n    dep.Name, arr.Name\nORDER BY \n    AvgTicketPrice DESC\nLIMIT 10;",
            "gigachat_response": "SELECT \n    r.DepartureAirportID AS DepartureAirport,\n    r.ArrivalAirportID AS ArrivalAirport,\n    ROUND(AVG(t.Price), 2) AS AverageTicketPrice,\n    COUNT(*) AS TotalTickets\nFROM \n    Route r\nJOIN \n    Flight f ON r.RouteID = f.FlightID\nJOIN \n    Booking b ON f.FlightID = b.FlightID\nJOIN \n    Ticket t ON b.BookingID = t.BookingID\nGROUP BY \n    r.DepartureAirportID, r.ArrivalAirportID\nORDER BY \n    AverageTicketPrice DESC\nLIMIT 10;",
            "gigachat_response_ru": "SELECT r.RouteID,\n       dep.Name AS DepartureAirport,\n       arr.Name AS ArrivalAirport,\n       AVG(t.Price) AS AverageTicketPrice,\n       COUNT(*) AS TotalTickets\nFROM Route r\nJOIN Airport dep ON r.DepartureAirportID = dep.AirportID\nJOIN Airport arr ON r.ArrivalAirportID = arr.AirportID\nJOIN Flight f ON r.RouteID = f.FlightID\nJOIN Booking bk ON f.FlightID = bk.FlightID\nJOIN Ticket t ON bk.BookingID = t.BookingID\nGROUP BY r.RouteID, dep.Name, arr.Name\nORDER BY AverageTicketPrice DESC\nLIMIT 10;"
        },
        {
            "question": "Какие 30 пилотов выполнили самые длинные маршруты? В ответе укажите имя, фамилию пилота, максимальное расстояние маршрута и количество различных маршрутов.",
            "sql_query": "SELECT \n    p.FirstName,\n    p.LastName,\n    MAX(r.DistanceKM) AS LongestRouteDistance,\n    COUNT(DISTINCT r.RouteID) AS DifferentRoutes\nFROM Pilot p\nJOIN Crew c ON p.PilotID = c.PilotID\nJOIN Flight f ON c.FlightID = f.FlightID\nJOIN Route r ON f.FlightID = r.RouteID\nGROUP BY p.PilotID, p.FirstName, p.LastName\nORDER BY LongestRouteDistance DESC LIMIT 30;",
            "gpt-4o_response": "SELECT p.FirstName, p.LastName, MAX(r.DistanceKM) AS MaxRouteDistance, COUNT(DISTINCT r.RouteID) AS UniqueRoutes\nFROM Pilot p\nJOIN Crew c ON p.PilotID = c.PilotID\nJOIN Flight f ON c.FlightID = f.FlightID\nJOIN Route r ON f.DepartureAirportID = r.DepartureAirportID AND f.ArrivalAirportID = r.ArrivalAirportID\nGROUP BY p.FirstName, p.LastName\nORDER BY MaxRouteDistance DESC\nLIMIT 30;",
            "gpt-4o_response_ru": "SELECT p.FirstName, p.LastName, MAX(r.DistanceKM) AS MaxRouteDistance, COUNT(DISTINCT r.RouteID) AS RouteCount\nFROM Pilot p\nJOIN Crew c ON p.PilotID = c.PilotID\nJOIN Flight f ON c.FlightID = f.FlightID\nJOIN Route r ON f.DepartureAirportID = r.DepartureAirportID AND f.ArrivalAirportID = r.ArrivalAirportID\nGROUP BY p.FirstName, p.LastName\nORDER BY MaxRouteDistance DESC\nLIMIT 30;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    p.FirstName,\n    p.LastName,\n    MAX(r.DistanceKM) AS MaxRouteDistanceKM,\n    COUNT(DISTINCT r.RouteID) AS NumberOfRoutes\nFROM\n    Pilot p\nJOIN\n    Crew c ON p.PilotID = c.PilotID\nJOIN\n    Flight f ON c.FlightID = f.FlightID\nJOIN\n    Route r ON f.DepartureAirportID = r.DepartureAirportID AND f.ArrivalAirportID = r.ArrivalAirportID\nGROUP BY\n    p.PilotID, p.FirstName, p.LastName\nORDER BY\n    MaxRouteDistanceKM DESC\nLIMIT 30;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    p.FirstName,\n    p.LastName,\n    MAX(r.DistanceKM) AS MaxRouteDistanceKM,\n    COUNT(DISTINCT r.RouteID) AS NumberOfRoutes\nFROM\n    Pilot p\nJOIN\n    Crew c ON p.PilotID = c.PilotID\nJOIN\n    Flight f ON c.FlightID = f.FlightID\nJOIN\n    Route r ON f.DepartureAirportID = r.DepartureAirportID AND f.ArrivalAirportID = r.ArrivalAirportID\nGROUP BY\n    p.PilotID, p.FirstName, p.LastName\nORDER BY\n    MaxRouteDistanceKM DESC\nLIMIT 30;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    p.FirstName, \n    p.LastName, \n    MAX(r.DistanceKM) AS MaxRouteDistance, \n    COUNT(DISTINCT r.RouteID) AS NumberOfRoutes\nFROM \n    Pilot p\nJOIN \n    Crew c ON p.PilotID = c.PilotID\nJOIN \n    Flight f ON c.FlightID = f.FlightID\nJOIN \n    Route r ON f.DepartureAirportID = r.DepartureAirportID AND f.ArrivalAirportID = r.ArrivalAirportID\nGROUP BY \n    p.FirstName, \n    p.LastName\nORDER BY \n    MaxRouteDistance DESC\nLIMIT 30;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    p.FirstName, \n    p.LastName, \n    MAX(r.DistanceKM) AS MaxRouteDistance, \n    COUNT(DISTINCT r.RouteID) AS NumberOfRoutes\nFROM \n    Pilot p\nJOIN \n    Crew c ON p.PilotID = c.PilotID\nJOIN \n    Flight f ON c.FlightID = f.FlightID\nJOIN \n    Route r ON f.DepartureAirportID = r.DepartureAirportID AND f.ArrivalAirportID = r.ArrivalAirportID\nGROUP BY \n    p.FirstName, \n    p.LastName\nORDER BY \n    MaxRouteDistance DESC\nLIMIT 30;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT p.FirstName, p.LastName, MAX(r.DistanceKM) AS MaxRouteDistance, COUNT(DISTINCT r.RouteID) AS DifferentRoutesCount\nFROM Pilot p\nJOIN Crew c ON p.PilotID = c.PilotID\nJOIN Flight f ON c.FlightID = f.FlightID\nJOIN Route r ON (f.DepartureAirportID = r.DepartureAirportID AND f.ArrivalAirportID = r.ArrivalAirportID)\nGROUP BY p.PilotID, p.FirstName, p.LastName\nORDER BY MaxRouteDistance DESC, DifferentRoutesCount DESC\nLIMIT 30;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT p.FirstName, p.LastName, MAX(r.DistanceKM) AS MaxRouteDistance, COUNT(DISTINCT r.RouteID) AS DifferentRoutesCount\nFROM Pilot p\nJOIN Crew c ON p.PilotID = c.PilotID\nJOIN Flight f ON c.FlightID = f.FlightID\nJOIN Route r ON f.DepartureAirportID = r.DepartureAirportID AND f.ArrivalAirportID = r.ArrivalAirportID\nGROUP BY p.PilotID, p.FirstName, p.LastName\nORDER BY MaxRouteDistance DESC, DifferentRoutesCount DESC\nLIMIT 30;",
            "gigachat_response": "SELECT \n    p.FirstName, \n    p.LastName, \n    MAX(r.DistanceKM) AS MaxDistance, \n    COUNT(DISTINCT r.RouteID) AS NumRoutes\nFROM \n    Pilot p\nJOIN \n    Crew c ON p.PilotID = c.PilotID\nJOIN \n    Flight f ON c.FlightID = f.FlightID\nJOIN \n    Route r ON f.DepartureAirportID = r.DepartureAirportID AND f.ArrivalAirportID = r.ArrivalAirportID\nGROUP BY \n    p.FirstName, p.LastName\nORDER BY \n    MaxDistance DESC\nLIMIT 30;",
            "gigachat_response_ru": "SELECT \n    p.FirstName, \n    p.LastName, \n    MAX(r.DistanceKM) AS MaxDistance, \n    COUNT(DISTINCT r.RouteID) AS NumRoutes\nFROM \n    Pilot p\nJOIN \n    Crew c ON p.PilotID = c.PilotID\nJOIN \n    Flight f ON c.FlightID = f.FlightID\nJOIN \n    Route r ON f.DepartureAirportID = r.DepartureAirportID AND f.ArrivalAirportID = r.ArrivalAirportID\nGROUP BY \n    p.FirstName, p.LastName\nORDER BY \n    MaxDistance DESC\nLIMIT 30;"
        },
        {
            "question": "Какие топ-10 авиакомпаний используют наибольшее количество различных моделей самолетов? В ответе укажите название авиакомпании, количество различных моделей самолетов и количество различных производителей.",
            "sql_query": "SELECT \n    al.Name AS AirlineName,\n    COUNT(DISTINCT a.Model) AS DifferentAircraftModels,\n    COUNT(DISTINCT a.Manufacturer) AS DifferentManufacturers\nFROM Airline al\nJOIN Flight f ON al.AirlineID = f.AirlineID\nJOIN Aircraft a ON f.AircraftID = a.AircraftID\nGROUP BY al.AirlineID, al.Name\nORDER BY DifferentAircraftModels DESC LIMIT 10;",
            "gpt-4o_response": "SELECT al.Name AS AirlineName, \n       COUNT(DISTINCT ac.Model) AS DistinctAircraftModels, \n       COUNT(DISTINCT ac.Manufacturer) AS DistinctManufacturers\nFROM Airline al\nJOIN Flight f ON al.AirlineID = f.AirlineID\nJOIN Aircraft ac ON f.AircraftID = ac.AircraftID\nGROUP BY al.Name\nORDER BY DistinctAircraftModels DESC\nLIMIT 10;",
            "gpt-4o_response_ru": "SELECT al.Name AS AirlineName, \n       COUNT(DISTINCT ac.Model) AS DistinctModelsCount, \n       COUNT(DISTINCT ac.Manufacturer) AS DistinctManufacturersCount\nFROM Airline al\nJOIN Flight f ON al.AirlineID = f.AirlineID\nJOIN Aircraft ac ON f.AircraftID = ac.AircraftID\nGROUP BY al.Name\nORDER BY DistinctModelsCount DESC\nLIMIT 10;",
            "google/gemini-2.0-flash-001_response": "SELECT \n    al.Name AS AirlineName,\n    COUNT(DISTINCT a.Model) AS NumberOfAircraftModels,\n    COUNT(DISTINCT a.Manufacturer) AS NumberOfManufacturers\nFROM Airline al\nJOIN Flight f ON al.AirlineID = f.AirlineID\nJOIN Aircraft a ON f.AircraftID = a.AircraftID\nGROUP BY al.Name\nORDER BY NumberOfAircraftModels DESC\nLIMIT 10;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    al.Name AS AirlineName,\n    COUNT(DISTINCT a.Model) AS NumberOfAircraftModels,\n    COUNT(DISTINCT a.Manufacturer) AS NumberOfAircraftManufacturers\nFROM\n    Airline al\nJOIN\n    Flight f ON al.AirlineID = f.AirlineID\nJOIN\n    Aircraft a ON f.AircraftID = a.AircraftID\nGROUP BY\n    al.Name\nORDER BY\n    NumberOfAircraftModels DESC\nLIMIT 10;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    a.Name AS AirlineName, \n    COUNT(DISTINCT ac.Model) AS DifferentAircraftModels, \n    COUNT(DISTINCT ac.Manufacturer) AS DifferentManufacturers\nFROM \n    Airline a\nJOIN \n    Flight f ON a.AirlineID = f.AirlineID\nJOIN \n    Aircraft ac ON f.AircraftID = ac.AircraftID\nGROUP BY \n    a.Name\nORDER BY \n    DifferentAircraftModels DESC\nLIMIT 10;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    al.Name AS AirlineName, \n    COUNT(DISTINCT a.Model) AS DifferentModels, \n    COUNT(DISTINCT a.Manufacturer) AS DifferentManufacturers\nFROM \n    Airline al\nJOIN \n    Flight f ON al.AirlineID = f.AirlineID\nJOIN \n    Aircraft a ON f.AircraftID = a.AircraftID\nGROUP BY \n    al.Name\nORDER BY \n    DifferentModels DESC\nLIMIT 10;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    al.Name AS AirlineName, \n    COUNT(DISTINCT ac.Model) AS DistinctModelsCount, \n    COUNT(DISTINCT ac.Manufacturer) AS DistinctManufacturersCount\nFROM \n    Airline al\nJOIN \n    Flight f ON al.AirlineID = f.AirlineID\nJOIN \n    Aircraft ac ON f.AircraftID = ac.AircraftID\nGROUP BY \n    al.Name\nORDER BY \n    DistinctModelsCount DESC\nLIMIT 10;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    al.Name AS AirlineName, \n    COUNT(DISTINCT ac.Model) AS DistinctAircraftModels, \n    COUNT(DISTINCT ac.Manufacturer) AS DistinctManufacturers\nFROM \n    Airline al\nJOIN \n    Flight f ON al.AirlineID = f.AirlineID\nJOIN \n    Aircraft ac ON f.AircraftID = ac.AircraftID\nGROUP BY \n    al.Name\nORDER BY \n    DistinctAircraftModels DESC\nLIMIT 10;",
            "gigachat_response": "SELECT \n    al.Name AS AirlineName,\n    COUNT(DISTINCT ac.Model) AS NumDistinctModels,\n    COUNT(DISTINCT ac.Manufacturer) AS NumDistinctManufacturers\nFROM \n    Airline al\nJOIN \n    Flight fl ON al.AirlineID = fl.AirlineID\nJOIN \n    Aircraft ac ON fl.AircraftID = ac.AircraftID\nGROUP BY \n    al.Name\nORDER BY \n    NumDistinctModels DESC\nLIMIT 10;",
            "gigachat_response_ru": "SELECT \n    al.Name AS AirlineName,\n    COUNT(DISTINCT ac.Model) AS DifferentModelsCount,\n    COUNT(DISTINCT ac.Manufacturer) AS DifferentManufacturerCount\nFROM \n    Airline al\nJOIN \n    Flight fl ON al.AirlineID = fl.AirlineID\nJOIN \n    Aircraft ac ON fl.AircraftID = ac.AircraftID\nGROUP BY \n    al.Name\nORDER BY \n    DifferentModelsCount DESC\nLIMIT 10;"
        },
        {
            "question": "Какие рейсы перевозят наибольшее количество пассажиров? В ответе укажите номер рейса, аэропорты вылета и прилета, общее количество пассажиров и среднюю стоимость билета.",
            "sql_query": "SELECT \n    f.FlightNumber,\n    dep.Name AS DepartureAirport,\n    arr.Name AS ArrivalAirport,\n    COUNT(b.PassengerID) AS TotalPassengers,\n    AVG(t.Price) AS AverageTicketPrice\nFROM Flight f\nJOIN Airport dep ON f.DepartureAirportID = dep.AirportID\nJOIN Airport arr ON f.ArrivalAirportID = arr.AirportID\nJOIN Booking b ON f.FlightID = b.FlightID\nJOIN Ticket t ON b.BookingID = t.BookingID\nGROUP BY f.FlightID, f.FlightNumber, dep.Name, arr.Name\nORDER BY TotalPassengers DESC;",
            "gpt-4o_response": "SELECT \n    f.FlightNumber AS FlightNumber,\n    depAirport.Name AS DepartureAirport,\n    arrAirport.Name AS ArrivalAirport,\n    COUNT(b.BookingID) AS TotalPassengers,\n    AVG(t.Price) AS AverageTicketPrice\nFROM \n    Flight f\nJOIN \n    Booking b ON f.FlightID = b.FlightID\nJOIN \n    Ticket t ON b.BookingID = t.BookingID\nJOIN \n    Airport depAirport ON f.DepartureAirportID = depAirport.AirportID\nJOIN \n    Airport arrAirport ON f.ArrivalAirportID = arrAirport.AirportID\nGROUP BY \n    f.FlightNumber, depAirport.Name, arrAirport.Name\nORDER BY \n    TotalPassengers DESC;",
            "gpt-4o_response_ru": "SELECT \n    f.FlightNumber, \n    dap.Name AS DepartureAirport, \n    aap.Name AS ArrivalAirport, \n    COUNT(b.BookingID) AS TotalPassengers, \n    AVG(b.Price) AS AvgTicketPrice\nFROM \n    Flight f\nJOIN \n    Booking b ON f.FlightID = b.FlightID\nJOIN \n    Airport dap ON f.DepartureAirportID = dap.AirportID\nJOIN \n    Airport aap ON f.ArrivalAirportID = aap.AirportID\nWHERE \n    b.Status = 'Подтверждено'\nGROUP BY \n    f.FlightNumber, dap.Name, aap.Name\nORDER BY \n    TotalPassengers DESC;",
            "google/gemini-2.0-flash-001_response": "SELECT \n    f.FlightNumber,\n    dep.Name AS DepartureAirport,\n    arr.Name AS ArrivalAirport,\n    COUNT(b.PassengerID) AS TotalPassengers,\n    AVG(b.Price) AS AverageTicketPrice\nFROM Flight f\nJOIN Airport dep ON f.DepartureAirportID = dep.AirportID\nJOIN Airport arr ON f.ArrivalAirportID = arr.AirportID\nLEFT JOIN Booking b ON f.FlightID = b.FlightID\nGROUP BY f.FlightID, f.FlightNumber, dep.Name, arr.Name\nORDER BY TotalPassengers DESC;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    f.FlightNumber,\n    dep.Name AS DepartureAirport,\n    arr.Name AS ArrivalAirport,\n    COUNT(b.PassengerID) AS TotalPassengers,\n    AVG(b.Price) AS AverageTicketPrice\nFROM Flight AS f\nJOIN Airport AS dep ON f.DepartureAirportID = dep.AirportID\nJOIN Airport AS arr ON f.ArrivalAirportID = arr.AirportID\nJOIN Booking AS b ON f.FlightID = b.FlightID\nGROUP BY f.FlightNumber, dep.Name, arr.Name\nORDER BY TotalPassengers DESC;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    f.FlightNumber,\n    ap1.Name AS DepartureAirport,\n    ap2.Name AS ArrivalAirport,\n    COUNT(b.BookingID) AS TotalPassengers,\n    AVG(t.Price) AS AverageTicketPrice\nFROM \n    Flight f\nJOIN \n    Airport ap1 ON f.DepartureAirportID = ap1.AirportID\nJOIN \n    Airport ap2 ON f.ArrivalAirportID = ap2.AirportID\nJOIN \n    Booking b ON f.FlightID = b.FlightID\nJOIN \n    Ticket t ON b.BookingID = t.BookingID\nGROUP BY \n    f.FlightNumber, ap1.Name, ap2.Name\nORDER BY \n    TotalPassengers DESC;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    f.FlightNumber,\n    ap1.Name AS DepartureAirport,\n    ap2.Name AS ArrivalAirport,\n    COUNT(b.BookingID) AS TotalPassengers,\n    AVG(t.Price) AS AverageTicketPrice\nFROM \n    Flight f\nJOIN \n    Airport ap1 ON f.DepartureAirportID = ap1.AirportID\nJOIN \n    Airport ap2 ON f.ArrivalAirportID = ap2.AirportID\nJOIN \n    Booking b ON f.FlightID = b.FlightID\nJOIN \n    Ticket t ON b.BookingID = t.BookingID\nGROUP BY \n    f.FlightNumber, ap1.Name, ap2.Name\nORDER BY \n    TotalPassengers DESC;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    f.FlightNumber,\n    dep.Name AS DepartureAirport,\n    arr.Name AS ArrivalAirport,\n    COUNT(b.PassengerID) AS TotalPassengers,\n    AVG(b.Price) AS AvgTicketPrice\nFROM \n    Flight f\nJOIN \n    Airport dep ON f.DepartureAirportID = dep.AirportID\nJOIN \n    Airport arr ON f.ArrivalAirportID = arr.AirportID\nJOIN \n    Booking b ON f.FlightID = b.FlightID\nGROUP BY \n    f.FlightNumber, dep.Name, arr.Name\nORDER BY \n    TotalPassengers DESC;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    f.FlightNumber,\n    dep.Name AS DepartureAirport,\n    arr.Name AS ArrivalAirport,\n    COUNT(b.BookingID) AS TotalPassengers,\n    AVG(b.Price) AS AvgTicketPrice\nFROM \n    Flight f\nJOIN \n    Airport dep ON f.DepartureAirportID = dep.AirportID\nJOIN \n    Airport arr ON f.ArrivalAirportID = arr.AirportID\nJOIN \n    Booking b ON f.FlightID = b.FlightID\nGROUP BY \n    f.FlightNumber, dep.Name, arr.Name\nORDER BY \n    TotalPassengers DESC;",
            "gigachat_response": "SELECT \n    f.FlightNumber AS FlightNumber,\n    dep.Name AS DepartureAirport,\n    arr.Name AS ArrivalAirport,\n    COUNT(b.BookingID) AS TotalPassengers,\n    AVG(t.Price) AS AverageTicketPrice\nFROM \n    Flight f\nJOIN \n    Airport dep ON f.DepartureAirportID = dep.AirportID\nJOIN \n    Airport arr ON f.ArrivalAirportID = arr.AirportID\nJOIN \n    Booking b ON f.FlightID = b.FlightID\nJOIN \n    Ticket t ON b.BookingID = t.BookingID\nGROUP BY \n    f.FlightNumber, dep.Name, arr.Name\nORDER BY \n    TotalPassengers DESC;",
            "gigachat_response_ru": "SELECT \n    f.FlightNumber AS FlightNumber,\n    dep.Name AS DepartureAirport,\n    arr.Name AS ArrivalAirport,\n    COUNT(b.BookingID) AS TotalPassengers,\n    AVG(t.Price) AS AverageTicketPrice\nFROM \n    Flight f\nJOIN \n    Airport dep ON f.DepartureAirportID = dep.AirportID\nJOIN \n    Airport arr ON f.ArrivalAirportID = arr.AirportID\nJOIN \n    Booking b ON f.FlightID = b.FlightID\nJOIN \n    Ticket t ON b.BookingID = t.BookingID\nGROUP BY \n    f.FlightNumber, dep.Name, arr.Name\nORDER BY \n    TotalPassengers DESC;"
        },
        {
            "question": "Какие авиакомпании имеют среднюю стоимость технического обслуживания более 20000?",
            "sql_query": "SELECT \n    al.Name AS AirlineName,\n    AVG(m.Cost) AS AverageMaintenanceCost\nFROM Airline al\nJOIN Flight f ON al.AirlineID = f.AirlineID\nJOIN Aircraft a ON f.AircraftID = a.AircraftID\nJOIN Maintenance m ON a.AircraftID = m.AircraftID\nGROUP BY al.Name\nHAVING AVG(m.Cost) > 20000;",
            "gpt-4o_response": "SELECT al.Name AS AirlineName, AVG(m.Cost) AS AvgMaintenanceCost\nFROM Airline al\nJOIN Flight f ON al.AirlineID = f.AirlineID\nJOIN Aircraft a ON f.AircraftID = a.AircraftID\nJOIN Maintenance m ON a.AircraftID = m.AircraftID\nGROUP BY al.Name\nHAVING AVG(m.Cost) > 20000;",
            "gpt-4o_response_ru": "SELECT al.Name AS AirlineName, AVG(m.Cost) AS AvgMaintenanceCost\nFROM Airline al\nJOIN Flight f ON al.AirlineID = f.AirlineID\nJOIN Aircraft a ON f.AircraftID = a.AircraftID\nJOIN Maintenance m ON a.AircraftID = m.AircraftID\nGROUP BY al.Name\nHAVING AVG(m.Cost) > 20000;",
            "google/gemini-2.0-flash-001_response": "SELECT \n    al.Name AS AirlineName,\n    AVG(m.Cost) AS AverageMaintenanceCost\nFROM Airline al\nJOIN Flight f ON al.AirlineID = f.AirlineID\nJOIN Aircraft ac ON f.AircraftID = ac.AircraftID\nJOIN Maintenance m ON ac.AircraftID = m.AircraftID\nGROUP BY al.Name\nHAVING AVG(m.Cost) > 20000;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT a.Name AS AirlineName, AVG(m.Cost) AS AverageMaintenanceCost\nFROM Airline a\nJOIN Flight f ON a.AirlineID = f.AirlineID\nJOIN Aircraft ac ON f.AircraftID = ac.AircraftID\nJOIN Maintenance m ON ac.AircraftID = m.AircraftID\nGROUP BY a.Name\nHAVING AVG(m.Cost) > 20000;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT a.Name AS AirlineName, AVG(m.Cost) AS AvgMaintenanceCost\nFROM Airline a\nJOIN Flight f ON a.AirlineID = f.AirlineID\nJOIN Aircraft ac ON f.AircraftID = ac.AircraftID\nJOIN Maintenance m ON ac.AircraftID = m.AircraftID\nGROUP BY a.Name\nHAVING AVG(m.Cost) > 20000;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT al.Name AS AirlineName, AVG(m.Cost) AS AvgMaintenanceCost\nFROM Airline al\nJOIN Route r ON al.AirlineID = r.AirlineID\nJOIN Flight f ON r.RouteID = f.FlightID\nJOIN Aircraft a ON f.AircraftID = a.AircraftID\nJOIN Maintenance m ON a.AircraftID = m.AircraftID\nGROUP BY al.Name\nHAVING AVG(m.Cost) > 20000;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT a.Name AS AirlineName, AVG(m.Cost) AS AvgMaintenanceCost\nFROM Airline a\nJOIN Flight f ON a.AirlineID = f.AirlineID\nJOIN Aircraft ac ON f.AircraftID = ac.AircraftID\nJOIN Maintenance m ON ac.AircraftID = m.AircraftID\nGROUP BY a.Name\nHAVING AVG(m.Cost) > 20000;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT a.Name AS AirlineName, AVG(m.Cost) AS AvgMaintenanceCost\nFROM Airline a\nJOIN Flight f ON a.AirlineID = f.AirlineID\nJOIN Aircraft ac ON f.AircraftID = ac.AircraftID\nJOIN Maintenance m ON ac.AircraftID = m.AircraftID\nGROUP BY a.Name\nHAVING AVG(m.Cost) > 20000;",
            "gigachat_response": "SELECT al.Name AS AirlineName, AVG(m.Cost) AS AverageMaintenanceCost\nFROM Airline al\nJOIN Aircraft ac ON al.AirlineID = ac.Manufacturer -- Assuming aircrafts belong to airlines based on manufacturer\nJOIN Maintenance m ON ac.AircraftID = m.AircraftID\nGROUP BY al.Name\nHAVING AVG(m.Cost) > 20000;",
            "gigachat_response_ru": "SELECT a.Name AS AirlineName, AVG(m.Cost) AS AverageCost\nFROM Airline a\nJOIN Aircraft ac ON a.AirlineID = ac.Manufacturer -- Предположим, что производитель совпадает с авиакомпанией\nJOIN Maintenance m ON ac.AircraftID = m.AircraftID\nGROUP BY a.Name\nHAVING AVG(m.Cost) > 20000;"
        },
        {
            "question": "Какие пассажиры имеют общий вес принятого багажа более 100 кг?",
            "sql_query": "SELECT \n    p.FirstName,\n    p.LastName,\n    SUM(bg.WeightKG) AS TotalBaggageWeight\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nJOIN Baggage bg ON b.BookingID = bg.BookingID\nWHERE bg.Status = 'Принято'\nGROUP BY p.FirstName, p.LastName\nHAVING SUM(bg.WeightKG) > 100;",
            "gpt-4o_response": "SELECT p.FirstName, p.LastName, SUM(b.WeightKG) AS TotalBaggageWeight\nFROM Passenger p\nJOIN Booking bk ON p.PassengerID = bk.PassengerID\nJOIN Baggage b ON bk.BookingID = b.BookingID\nWHERE b.Status = 'Принято'\nGROUP BY p.FirstName, p.LastName\nHAVING SUM(b.WeightKG) > 100;",
            "gpt-4o_response_ru": "SELECT p.FirstName, p.LastName, SUM(b.WeightKG) AS TotalBaggageWeight\nFROM Passenger p\nJOIN Booking bk ON p.PassengerID = bk.PassengerID\nJOIN Baggage b ON bk.BookingID = b.BookingID\nWHERE b.Status = 'Принято'\nGROUP BY p.FirstName, p.LastName\nHAVING SUM(b.WeightKG) > 100;",
            "google/gemini-2.0-flash-001_response": "SELECT p.FirstName, p.LastName\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nJOIN Baggage bg ON b.BookingID = bg.BookingID\nWHERE bg.Status = 'Принято'\nGROUP BY p.PassengerID, p.FirstName, p.LastName\nHAVING SUM(bg.WeightKG) > 100;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT p.FirstName, p.LastName, SUM(b.WeightKG) AS TotalBaggageWeight\nFROM Passenger p\nJOIN Booking bo ON p.PassengerID = bo.PassengerID\nJOIN Baggage b ON bo.BookingID = b.BookingID\nWHERE b.Status = 'Принято'\nGROUP BY p.PassengerID, p.FirstName, p.LastName\nHAVING SUM(b.WeightKG) > 100;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT p.FirstName, p.LastName, SUM(bg.WeightKG) AS TotalBaggageWeight\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nJOIN Baggage bg ON b.BookingID = bg.BookingID\nWHERE bg.Status = 'Принято'\nGROUP BY p.FirstName, p.LastName\nHAVING SUM(bg.WeightKG) > 100;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT p.FirstName, p.LastName, SUM(bg.WeightKG) AS TotalBaggageWeight\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nJOIN Baggage bg ON b.BookingID = bg.BookingID\nWHERE bg.Status = 'Принято'\nGROUP BY p.FirstName, p.LastName\nHAVING SUM(bg.WeightKG) > 100",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT p.PassengerID, p.FirstName, p.LastName, SUM(bg.WeightKG) AS TotalBaggageWeight\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nJOIN Baggage bg ON b.BookingID = bg.BookingID\nWHERE bg.Status = 'Принято'\nGROUP BY p.PassengerID, p.FirstName, p.LastName\nHAVING SUM(bg.WeightKG) > 100;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT p.FirstName, p.LastName, SUM(bg.WeightKG) AS TotalBaggageWeight\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nJOIN Baggage bg ON b.BookingID = bg.BookingID\nWHERE bg.Status = 'Принято'\nGROUP BY p.FirstName, p.LastName\nHAVING SUM(bg.WeightKG) > 100;",
            "gigachat_response": "SELECT p.FirstName, p.LastName, SUM(bg.WeightKG) AS TotalBaggageWeight\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nJOIN Baggage bg ON b.BookingID = bg.BookingID\nWHERE bg.Status = 'Принято'\nGROUP BY p.FirstName, p.LastName\nHAVING SUM(bg.WeightKG) > 100;",
            "gigachat_response_ru": "SELECT p.FirstName, p.LastName, SUM(bg.WeightKG) AS TotalBaggageWeight\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nJOIN Baggage bg ON b.BookingID = bg.BookingID\nWHERE bg.Status = 'Принято'\nGROUP BY p.FirstName, p.LastName\nHAVING SUM(bg.WeightKG) > 100;"
        },
        {
            "question": "Какие топ-5 аэропорты имеют наибольшее количество международных вылетов до 12:00? В ответе укажите название аэропорта вылета и количество международных вылетов.",
            "sql_query": "SELECT\n    dep.Name AS DepartureAirport,\n    COUNT(DISTINCT f.FlightID) AS InternationalDepartures\nFROM Airport dep\nJOIN Flight f ON dep.AirportID = f.DepartureAirportID\nJOIN Airport arr ON f.ArrivalAirportID = arr.AirportID\nWHERE dep.Country != arr.Country\nAND TIME(f.ScheduledDeparture) < '12:00:00'\nGROUP BY dep.AirportID, dep.Name\nORDER BY InternationalDepartures DESC\nLIMIT 5;",
            "gpt-4o_response": "SELECT ap.Name AS DepartureAirportName, COUNT(f.FlightID) AS InternationalDepartures\nFROM Airport ap\nJOIN Flight f ON ap.AirportID = f.DepartureAirportID\nWHERE f.ScheduledDeparture < '2023-10-21 12:00:00'\nAND ap.Country <> (SELECT Country FROM Airport WHERE AirportID = f.ArrivalAirportID)\nGROUP BY ap.Name\nORDER BY InternationalDepartures DESC\nLIMIT 5;",
            "gpt-4o_response_ru": "SELECT ap.Name AS DepartureAirportName, COUNT(f.FlightID) AS InternationalDepartures\nFROM Airport ap\nJOIN Flight f ON ap.AirportID = f.DepartureAirportID\nJOIN Airport ar ON f.ArrivalAirportID = ar.AirportID\nWHERE f.ScheduledDeparture < '2023-10-21 12:00:00'\nAND ap.Country <> ar.Country\nGROUP BY ap.Name\nORDER BY InternationalDepartures DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    ap.Name AS AirportName,\n    COUNT(f.FlightID) AS InternationalFlightsCount\nFROM\n    Airport ap\nJOIN\n    Flight f ON ap.AirportID = f.DepartureAirportID\nWHERE\n    ap.Country != (SELECT Country FROM Airport WHERE AirportID = f.ArrivalAirportID)\n    AND STRFTIME('%H:%M', f.ScheduledDeparture) < '12:00'\nGROUP BY\n    ap.Name\nORDER BY\n    InternationalFlightsCount DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    dep.Name AS DepartureAirportName,\n    COUNT(f.FlightID) AS InternationalFlightsCount\nFROM Flight AS f\nJOIN Airport AS dep ON f.DepartureAirportID = dep.AirportID\nJOIN Airport AS arr ON f.ArrivalAirportID = arr.AirportID\nWHERE dep.Country <> arr.Country\nAND STRFTIME('%H', f.ScheduledDeparture) < '12'\nGROUP BY dep.Name\nORDER BY InternationalFlightsCount DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT a.Name AS DepartureAirportName, COUNT(f.FlightID) AS InternationalDepartures\nFROM Airport a\nJOIN Flight f ON a.AirportID = f.DepartureAirportID\nWHERE f.ScheduledDeparture < '12:00:00' AND a.IATA_Code != (SELECT IATA_Code FROM Airport WHERE a.AirportID = f.ArrivalAirportID)\nGROUP BY a.Name\nORDER BY InternationalDepartures DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT a.Name AS AirportName, COUNT(f.FlightID) AS TotalInternationalFlights\nFROM Airport a\nJOIN Flight f ON a.AirportID = f.DepartureAirportID\nWHERE f.ScheduledDeparture < '12:00:00' AND f.ArrivalAirportID NOT IN (\n    SELECT AirportID \n    FROM Airport \n    WHERE Country = (SELECT Country FROM Airport WHERE AirportID = a.AirportID)\n)\nGROUP BY a.Name\nORDER BY TotalInternationalFlights DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT ap.Name AS AirportName, COUNT(f.FlightID) AS InternationalDepartures\nFROM Airport ap\nJOIN Flight f ON ap.AirportID = f.DepartureAirportID\nJOIN Airport arr ON f.ArrivalAirportID = arr.AirportID\nWHERE arr.Country != ap.Country \nAND TIME(f.ScheduledDeparture) < '12:00:00'\nGROUP BY ap.Name\nORDER BY InternationalDepartures DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT a.Name AS AirportName, COUNT(f.FlightID) AS InternationalFlights\nFROM Airport a\nJOIN Flight f ON a.AirportID = f.DepartureAirportID\nJOIN Airport arr ON f.ArrivalAirportID = arr.AirportID\nWHERE a.Country != arr.Country\nAND TIME(f.ScheduledDeparture) <= '12:00:00'\nGROUP BY a.Name\nORDER BY InternationalFlights DESC\nLIMIT 5;",
            "gigachat_response": "SELECT \n    dep_airport.Name AS DepartureAirportName,\n    COUNT(flight.FlightID) AS InternationalDeparturesCount\nFROM \n    Flight flight\nINNER JOIN \n    Airport dep_airport ON flight.DepartureAirportID = dep_airport.AirportID\nWHERE \n    -- Filter international flights where departure time is before noon\n    dep_airport.Country <> (SELECT arr_airport.Country FROM Airport arr_airport WHERE arr_airport.AirportID = flight.ArrivalAirportID)\nAND \n    TIME(flight.ScheduledDeparture) < '12:00:00'\nGROUP BY \n    dep_airport.Name\nORDER BY \n    InternationalDeparturesCount DESC\nLIMIT 5;",
            "gigachat_response_ru": "SELECT \n    dep_airport.Name AS DepartureAirportName,\n    COUNT(flight.FlightID) AS InternationalDeparturesBeforeNoon\nFROM \n    Flight flight\nINNER JOIN \n    Airport dep_airport ON flight.DepartureAirportID = dep_airport.AirportID\nWHERE \n    TIME(flight.ScheduledDeparture) < '12:00:00'\nAND \n    dep_airport.Country <> arrival_airport.Country -- Международные рейсы\nINNER JOIN \n    Airport arrival_airport ON flight.ArrivalAirportID = arrival_airport.AirportID\nGROUP BY \n    dep_airport.Name\nORDER BY \n    InternationalDeparturesBeforeNoon DESC\nLIMIT 5;"
        },
        {
            "question": "Какие топ-5 пассажиры преодолели наибольшее расстояние в подтвержденных рейсах?",
            "sql_query": "SELECT \n    p.FirstName,\n    p.LastName,\n    SUM(r.DistanceKM) AS TotalDistanceTraveled\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nJOIN Flight f ON b.FlightID = f.FlightID\nJOIN Route r ON f.FlightID = r.RouteID\nWHERE b.Status = 'Подтверждено'\nGROUP BY p.PassengerID, p.FirstName, p.LastName\nORDER BY TotalDistanceTraveled DESC\nLIMIT 5;",
            "gpt-4o_response": "SELECT p.FirstName, p.LastName, SUM(r.DistanceKM) AS TotalDistance\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nJOIN Flight f ON b.FlightID = f.FlightID\nJOIN Route r ON f.DepartureAirportID = r.DepartureAirportID AND f.ArrivalAirportID = r.ArrivalAirportID\nWHERE b.Status = 'Подтверждено'\nGROUP BY p.FirstName, p.LastName\nORDER BY TotalDistance DESC\nLIMIT 5;",
            "gpt-4o_response_ru": "SELECT p.FirstName, p.LastName, SUM(r.DistanceKM) AS TotalDistance\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nJOIN Flight f ON b.FlightID = f.FlightID\nJOIN Route r ON f.DepartureAirportID = r.DepartureAirportID AND f.ArrivalAirportID = r.ArrivalAirportID\nWHERE b.Status = 'Подтверждено'\nGROUP BY p.FirstName, p.LastName\nORDER BY TotalDistance DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    p.FirstName,\n    p.LastName,\n    SUM(r.DistanceKM) AS TotalDistanceKM\nFROM\n    Passenger p\nJOIN\n    Booking b ON p.PassengerID = b.PassengerID\nJOIN\n    Flight f ON b.FlightID = f.FlightID\nJOIN\n    Route r ON f.DepartureAirportID = r.DepartureAirportID AND f.ArrivalAirportID = r.ArrivalAirportID\nWHERE\n    b.Status = 'Подтверждено'\nGROUP BY\n    p.PassengerID, p.FirstName, p.LastName\nORDER BY\n    TotalDistanceKM DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    p.FirstName,\n    p.LastName,\n    SUM(r.DistanceKM) AS TotalDistanceKM\nFROM\n    Passenger p\nJOIN\n    Booking b ON p.PassengerID = b.PassengerID\nJOIN\n    Flight f ON b.FlightID = f.FlightID\nJOIN\n    Route r ON f.DepartureAirportID = r.DepartureAirportID AND f.ArrivalAirportID = r.ArrivalAirportID\nWHERE\n    b.Status = 'Подтверждено'\nGROUP BY\n    p.PassengerID, p.FirstName, p.LastName\nORDER BY\n    TotalDistanceKM DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT p.FirstName, p.LastName, SUM(r.DistanceKM) AS TotalDistance\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nJOIN Flight f ON b.FlightID = f.FlightID\nJOIN Route r ON f.DepartureAirportID = r.DepartureAirportID AND f.ArrivalAirportID = r.ArrivalAirportID\nWHERE b.Status = 'Подтверждено'\nGROUP BY p.FirstName, p.LastName\nORDER BY TotalDistance DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT p.FirstName, p.LastName, SUM(r.DistanceKM) AS TotalDistance\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nJOIN Flight f ON b.FlightID = f.FlightID\nJOIN Route r ON f.DepartureAirportID = r.DepartureAirportID AND f.ArrivalAirportID = r.ArrivalAirportID\nWHERE b.Status = 'Подтверждено'\nGROUP BY p.FirstName, p.LastName\nORDER BY TotalDistance DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT p.FirstName, p.LastName, SUM(r.DistanceKM) AS TotalDistance\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nJOIN Flight f ON b.FlightID = f.FlightID\nJOIN Route r ON (f.DepartureAirportID = r.DepartureAirportID AND f.ArrivalAirportID = r.ArrivalAirportID)\nWHERE b.Status = 'Подтверждено'\nGROUP BY p.PassengerID, p.FirstName, p.LastName\nORDER BY TotalDistance DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT p.FirstName, p.LastName, SUM(r.DistanceKM) AS TotalDistance\nFROM Passenger p\nJOIN Booking b ON p.PassengerID = b.PassengerID\nJOIN Flight f ON b.FlightID = f.FlightID\nJOIN Route r ON (f.DepartureAirportID = r.DepartureAirportID AND f.ArrivalAirportID = r.ArrivalAirportID)\nWHERE b.Status = 'Подтверждено'\nGROUP BY p.PassengerID, p.FirstName, p.LastName\nORDER BY TotalDistance DESC\nLIMIT 5;",
            "gigachat_response": "SELECT TOP 5 \n    p.FirstName, \n    p.LastName, \n    SUM(r.DistanceKM) AS TotalDistanceTraveled\nFROM \n    Passenger p\nINNER JOIN \n    Booking b ON p.PassengerID = b.PassengerID\nINNER JOIN \n    Flight f ON b.FlightID = f.FlightID\nINNER JOIN \n    Route r ON f.RouteID = r.RouteID -- Assuming there’s a RouteID field in Flight table linking it to Route\nWHERE \n    b.Status = 'Подтверждено'\nGROUP BY \n    p.FirstName, p.LastName\nORDER BY \n    TotalDistanceTraveled DESC;",
            "gigachat_response_ru": "SELECT TOP 5 \n    p.FirstName + ' ' + p.LastName AS FullName,\n    SUM(r.DistanceKM) AS TotalDistanceTraveled\nFROM \n    Passenger p\nINNER JOIN \n    Booking b ON p.PassengerID = b.PassengerID\nINNER JOIN \n    Flight f ON b.FlightID = f.FlightID\nINNER JOIN \n    Route r ON f.RouteID = r.RouteID -- Предположим наличие связи между рейсами и маршрутами через поле RouteID\nWHERE \n    b.Status = 'Подтверждено'\nGROUP BY \n    p.FirstName, p.LastName\nORDER BY \n    TotalDistanceTraveled DESC;"
        },
        {
            "question": "Какие топ-5 модели самолетов имеют наибольшую общую стоимость технического обслуживания за последние 2 года?",
            "sql_query": "SELECT \n    a.Model,\n    SUM(m.Cost) AS TotalMaintenanceCost\nFROM Aircraft a\nJOIN Maintenance m ON a.AircraftID = m.AircraftID\nWHERE m.Status = 'Завершено'\nAND m.Date >= DATE_SUB(CURDATE(), INTERVAL 2 YEAR)\nGROUP BY a.Model\nORDER BY TotalMaintenanceCost DESC\nLIMIT 5;",
            "gpt-4o_response": "SELECT ac.Model AS AircraftModel, SUM(m.Cost) AS TotalMaintenanceCost\nFROM Aircraft ac\nJOIN Maintenance m ON ac.AircraftID = m.AircraftID\nWHERE m.Date >= DATE_SUB(CURDATE(), INTERVAL 2 YEAR)\nGROUP BY ac.Model\nORDER BY TotalMaintenanceCost DESC\nLIMIT 5;",
            "gpt-4o_response_ru": "SELECT ac.Model, SUM(m.Cost) AS TotalMaintenanceCost\nFROM Aircraft ac\nJOIN Maintenance m ON ac.AircraftID = m.AircraftID\nWHERE m.Date >= DATE_SUB(CURDATE(), INTERVAL 2 YEAR)\nGROUP BY ac.Model\nORDER BY TotalMaintenanceCost DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response": "SELECT \n    a.Model AS AircraftModel,\n    SUM(m.Cost) AS TotalMaintenanceCost\nFROM \n    Aircraft a\nJOIN \n    Maintenance m ON a.AircraftID = m.AircraftID\nWHERE \n    m.Date >= DATE('now', '-2 years')\nGROUP BY \n    a.Model\nORDER BY \n    TotalMaintenanceCost DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    a.Model,\n    SUM(m.Cost) AS TotalMaintenanceCost\nFROM\n    Aircraft a\nJOIN\n    Maintenance m ON a.AircraftID = m.AircraftID\nWHERE\n    m.Date >= DATE('now', '-2 years')\nGROUP BY\n    a.Model\nORDER BY\n    TotalMaintenanceCost DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT a.Model AS AircraftModel, SUM(m.Cost) AS TotalMaintenanceCost\nFROM Aircraft a\nJOIN Maintenance m ON a.AircraftID = m.AircraftID\nWHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 2 YEAR)\nGROUP BY a.Model\nORDER BY TotalMaintenanceCost DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT a.Model AS AircraftModel, SUM(m.Cost) AS TotalMaintenanceCost\nFROM Aircraft a\nJOIN Maintenance m ON a.AircraftID = m.AircraftID\nWHERE m.Date >= NOW() - INTERVAL 2 YEAR\nGROUP BY a.Model\nORDER BY TotalMaintenanceCost DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT a.Model, SUM(m.Cost) AS TotalMaintenanceCost\nFROM Aircraft a\nJOIN Maintenance m ON a.AircraftID = m.AircraftID\nWHERE m.Date >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 YEAR)\nGROUP BY a.Model\nORDER BY TotalMaintenanceCost DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT a.Model, SUM(m.Cost) AS TotalMaintenanceCost\nFROM Aircraft a\nJOIN Maintenance m ON a.AircraftID = m.AircraftID\nWHERE m.Date >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 YEAR)\nGROUP BY a.Model\nORDER BY TotalMaintenanceCost DESC\nLIMIT 5;",
            "gigachat_response": "SELECT ac.Model, SUM(m.Cost) AS TotalMaintenanceCost\nFROM Aircraft ac\nJOIN Maintenance m ON ac.AircraftID = m.AircraftID\nWHERE m.Date >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 YEAR)\nGROUP BY ac.Model\nORDER BY TotalMaintenanceCost DESC\nLIMIT 5;",
            "gigachat_response_ru": "SELECT ac.Model, SUM(m.Cost) AS TotalCost\nFROM Aircraft ac\nJOIN Maintenance m ON ac.AircraftID = m.AircraftID\nWHERE m.Date >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 YEAR)\nGROUP BY ac.Model\nORDER BY TotalCost DESC\nLIMIT 5;"
        }
    ]
}