{
    "queries": [
        {
            "question": "Какие клиенты имеют общую сумму страхового покрытия более 1 миллиона рублей?",
            "sql_query": "SELECT c.FirstName, c.LastName, SUM(p.CoverageAmount) AS TotalCoverage FROM Customers c JOIN InsurancePolicies p ON c.CustomerID = p.CustomerID WHERE p.Status = 'Активен' GROUP BY c.FirstName, c.LastName HAVING SUM(p.CoverageAmount) > 1000000;",
            "gpt-4o_response": "SELECT c.FirstName, c.LastName, SUM(ip.CoverageAmount) AS TotalCoverage\nFROM Customers c\nJOIN InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nWHERE ip.Status = 'Активен'\nGROUP BY c.FirstName, c.LastName\nHAVING SUM(ip.CoverageAmount) > 1000000;",
            "gpt-4o_response_ru": "SELECT c.FirstName, c.LastName, SUM(ip.CoverageAmount) AS TotalCoverage\nFROM Customers c\nJOIN InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nGROUP BY c.FirstName, c.LastName\nHAVING SUM(ip.CoverageAmount) > 1000000;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    c.FirstName,\n    c.LastName,\n    SUM(ip.CoverageAmount) AS TotalCoverageAmount\nFROM\n    Customers c\nJOIN\n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nGROUP BY\n    c.FirstName,\n    c.LastName\nHAVING\n    SUM(ip.CoverageAmount) > 1000000;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT c.FirstName, c.LastName\nFROM Customers c\nJOIN InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nGROUP BY c.CustomerID, c.FirstName, c.LastName\nHAVING SUM(ip.CoverageAmount) > 1000000;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT c.FirstName, c.LastName, SUM(ip.CoverageAmount) AS TotalCoverageAmount\nFROM Customers c\nJOIN InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nWHERE ip.Status = 'Активен'\nGROUP BY c.FirstName, c.LastName\nHAVING SUM(ip.CoverageAmount) > 1000000",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT c.FirstName, c.LastName, SUM(ip.CoverageAmount) AS TotalCoverageAmount\nFROM Customers c\nJOIN InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nWHERE ip.Status = 'Активен'\nGROUP BY c.FirstName, c.LastName\nHAVING SUM(ip.CoverageAmount) > 1000000\nORDER BY TotalCoverageAmount DESC;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT c.FirstName, c.LastName, SUM(ip.CoverageAmount) AS TotalCoverage\nFROM Customers c\nJOIN InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nWHERE ip.Status = 'Активен'\nGROUP BY c.FirstName, c.LastName\nHAVING SUM(ip.CoverageAmount) > 1000000;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT c.FirstName, c.LastName, SUM(ip.CoverageAmount) AS TotalCoverage\nFROM Customers c\nJOIN InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nWHERE ip.Status = 'Активен'\nGROUP BY c.FirstName, c.LastName\nHAVING SUM(ip.CoverageAmount) > 1000000;",
            "gigachat_response": "SELECT \n    c.FirstName, \n    c.LastName, \n    SUM(ip.CoverageAmount) AS TotalCoverage\nFROM \n    Customers c\nJOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nGROUP BY \n    c.FirstName, c.LastName\nHAVING \n    SUM(ip.CoverageAmount) > 1000000;",
            "gigachat_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    SUM(ip.CoverageAmount) AS TotalCoverage\nFROM \n    Customers c\nJOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nGROUP BY \n    c.FirstName, c.LastName\nHAVING \n    SUM(ip.CoverageAmount) > 1000000;"
        },
        {
            "question": "Какие клиенты имеют более 1 ожидающего страхового возмещения?",
            "sql_query": "SELECT c.FirstName, c.LastName, COUNT(pc.ClaimID) AS TotalClaims FROM Customers c JOIN InsurancePolicies p ON c.CustomerID = p.CustomerID JOIN PolicyClaims pc ON p.PolicyID = pc.PolicyID WHERE pc.Status = 'Ожидание' GROUP BY c.FirstName, c.LastName HAVING COUNT(pc.ClaimID) > 1;",
            "gpt-4o_response": "SELECT c.FirstName, c.LastName, COUNT(pc.ClaimID) AS PendingClaims\nFROM Customers c\nJOIN InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nJOIN PolicyClaims pc ON ip.PolicyID = pc.PolicyID\nWHERE pc.Status = 'Ожидание'\nGROUP BY c.FirstName, c.LastName\nHAVING COUNT(pc.ClaimID) > 1;",
            "gpt-4o_response_ru": "SELECT c.FirstName, c.LastName, COUNT(pc.ClaimID) AS PendingClaims\nFROM Customers c\nJOIN InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nJOIN PolicyClaims pc ON ip.PolicyID = pc.PolicyID\nWHERE pc.Status = 'Ожидание'\nGROUP BY c.FirstName, c.LastName\nHAVING COUNT(pc.ClaimID) > 1;",
            "google/gemini-2.0-flash-001_response": "SELECT c.FirstName, c.LastName, COUNT(pc.ClaimID) AS TotalPendingClaims\nFROM Customers c\nJOIN InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nJOIN PolicyClaims pc ON ip.PolicyID = pc.PolicyID\nWHERE pc.Status = 'Ожидание'\nGROUP BY c.FirstName, c.LastName\nHAVING COUNT(pc.ClaimID) > 1;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT c.FirstName, c.LastName, COUNT(pc.ClaimID) AS TotalPendingClaims\nFROM Customers c\nJOIN InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nJOIN PolicyClaims pc ON ip.PolicyID = pc.PolicyID\nWHERE pc.Status = 'Ожидание'\nGROUP BY c.CustomerID, c.FirstName, c.LastName\nHAVING COUNT(pc.ClaimID) > 1;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT c.FirstName, c.LastName, COUNT(pc.ClaimID) AS PendingClaims\nFROM Customers c\nJOIN InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nJOIN PolicyClaims pc ON ip.PolicyID = pc.PolicyID\nWHERE pc.Status = 'Ожидание'\nGROUP BY c.FirstName, c.LastName\nHAVING COUNT(pc.ClaimID) > 1;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT c.FirstName, c.LastName, COUNT(pc.ClaimID) AS TotalPendingClaims\nFROM Customers c\nJOIN InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nJOIN PolicyClaims pc ON ip.PolicyID = pc.PolicyID\nWHERE pc.Status = 'Ожидание'\nGROUP BY c.FirstName, c.LastName\nHAVING COUNT(pc.ClaimID) > 1;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT c.CustomerID, c.FirstName, c.LastName, COUNT(pc.ClaimID) AS PendingClaims\nFROM Customers c\nJOIN InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nJOIN PolicyClaims pc ON ip.PolicyID = pc.PolicyID\nWHERE pc.Status = 'Ожидание'\nGROUP BY c.CustomerID, c.FirstName, c.LastName\nHAVING COUNT(pc.ClaimID) > 1;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT c.CustomerID, c.FirstName, c.LastName, COUNT(pc.ClaimID) AS PendingClaimsCount\nFROM Customers c\nJOIN InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nJOIN PolicyClaims pc ON ip.PolicyID = pc.PolicyID\nWHERE pc.Status = 'Ожидание'\nGROUP BY c.CustomerID, c.FirstName, c.LastName\nHAVING COUNT(pc.ClaimID) > 1;",
            "gigachat_response": "SELECT \n    c.FirstName, \n    c.LastName, \n    COUNT(pc.ClaimID) AS PendingClaimsCount\nFROM \n    Customers c\nJOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nJOIN \n    PolicyClaims pc ON ip.PolicyID = pc.PolicyID\nWHERE \n    pc.Status = 'Ожидание'\nGROUP BY \n    c.FirstName, c.LastName\nHAVING \n    COUNT(pc.ClaimID) > 1;",
            "gigachat_response_ru": "SELECT c.FirstName, c.LastName, COUNT(pc.ClaimID) AS PendingClaimsCount\nFROM Customers c\nJOIN InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nJOIN PolicyClaims pc ON ip.PolicyID = pc.PolicyID\nWHERE pc.Status = 'Ожидание'\nGROUP BY c.FirstName, c.LastName\nHAVING COUNT(pc.ClaimID) > 1;"
        },
        {
            "question": "Какие клиенты имеют более 1 ипотечного кредита?",
            "sql_query": "SELECT c.FirstName, c.LastName, COUNT(l.LoanID) AS TotalLoans FROM Customers c JOIN Loans l ON c.CustomerID = l.CustomerID WHERE l.LoanType = 'Ипотека' GROUP BY c.FirstName, c.LastName HAVING COUNT(l.LoanID) > 1;",
            "gpt-4o_response": "SELECT c.FirstName, c.LastName, COUNT(l.LoanID) AS TotalMortgageLoans\nFROM Customers c\nJOIN Loans l ON c.CustomerID = l.CustomerID\nWHERE l.LoanType = 'Ипотека'\nGROUP BY c.FirstName, c.LastName\nHAVING COUNT(l.LoanID) > 1;",
            "gpt-4o_response_ru": "SELECT c.FirstName, c.LastName, COUNT(l.LoanID) AS MortgageCount\nFROM Customers c\nJOIN Loans l ON c.CustomerID = l.CustomerID\nWHERE l.LoanType = 'Ипотека'\nGROUP BY c.FirstName, c.LastName\nHAVING COUNT(l.LoanID) > 1;",
            "google/gemini-2.0-flash-001_response": "SELECT c.FirstName, c.LastName, COUNT(l.LoanID) AS NumberOfMortgages\nFROM Customers c\nJOIN Loans l ON c.CustomerID = l.CustomerID\nWHERE l.LoanType = 'Ипотека'\nGROUP BY c.FirstName, c.LastName\nHAVING COUNT(l.LoanID) > 1;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT c.FirstName, c.LastName, COUNT(l.LoanID) AS NumberOfMortgages\nFROM Customers c\nJOIN Loans l ON c.CustomerID = l.CustomerID\nWHERE l.LoanType = 'Ипотека'\nGROUP BY c.CustomerID, c.FirstName, c.LastName\nHAVING COUNT(l.LoanID) > 1;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT c.FirstName, c.LastName, COUNT(l.LoanID) AS TotalMortgageLoans\nFROM Customers c\nJOIN Loans l ON c.CustomerID = l.CustomerID\nWHERE l.LoanType = 'Ипотека'\nGROUP BY c.FirstName, c.LastName\nHAVING COUNT(l.LoanID) > 1;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT c.FirstName, c.LastName, COUNT(l.LoanID) AS TotalMortgageLoans\nFROM Customers c\nJOIN Loans l ON c.CustomerID = l.CustomerID\nWHERE l.LoanType = 'Ипотека'\nGROUP BY c.FirstName, c.LastName\nHAVING COUNT(l.LoanID) > 1;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT c.CustomerID, c.FirstName, c.LastName, COUNT(l.LoanID) AS MortgageCount\nFROM Customers c\nJOIN Loans l ON c.CustomerID = l.CustomerID\nWHERE l.LoanType = 'Ипотека'\nGROUP BY c.CustomerID, c.FirstName, c.LastName\nHAVING COUNT(l.LoanID) > 1;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT c.CustomerID, c.FirstName, c.LastName, COUNT(l.LoanID) AS MortgageCount\nFROM Customers c\nJOIN Loans l ON c.CustomerID = l.CustomerID\nWHERE l.LoanType = 'Ипотека'\nGROUP BY c.CustomerID, c.FirstName, c.LastName\nHAVING COUNT(l.LoanID) > 1;",
            "gigachat_response": "SELECT \n    c.FirstName, \n    c.LastName, \n    COUNT(l.LoanID) AS NumberOfMortgages\nFROM \n    Customers c\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID\nWHERE \n    l.LoanType = 'Ипотека'\nGROUP BY \n    c.FirstName, c.LastName\nHAVING \n    COUNT(l.LoanID) > 1;",
            "gigachat_response_ru": "SELECT c.FirstName, c.LastName, COUNT(l.LoanID) AS MortgageCount\nFROM Customers c\nJOIN Loans l ON c.CustomerID = l.CustomerID\nWHERE l.LoanType = 'Ипотека'\nGROUP BY c.FirstName, c.LastName\nHAVING COUNT(l.LoanID) > 1;"
        },
        {
            "question": "Какие филиалы банка имеют максимальную зарплату сотрудников более 90000 рублей и сколько там сотрудников?",
            "sql_query": "SELECT b.BranchName, COUNT(e.EmployeeID) AS TotalEmployees, MAX(e.Salary) AS MaxSalary FROM Branches b JOIN Employees e ON b.BranchID = e.BranchID GROUP BY b.BranchName HAVING MAX(e.Salary) > 90000;",
            "gpt-4o_response": "SELECT b.BranchName, COUNT(e.EmployeeID) AS NumberOfEmployees\nFROM Branches b\nJOIN Employees e ON b.BranchID = e.BranchID\nWHERE e.Salary > 90000\nGROUP BY b.BranchName\nHAVING COUNT(e.EmployeeID) > 0;",
            "gpt-4o_response_ru": "SELECT b.BranchName, COUNT(e.EmployeeID) AS EmployeeCount\nFROM Branches b\nJOIN Employees e ON b.BranchID = e.BranchID\nWHERE e.Salary > 90000\nGROUP BY b.BranchName\nHAVING COUNT(e.EmployeeID) > 0;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    b.BranchName,\n    COUNT(e.EmployeeID) AS EmployeeCount\nFROM\n    Branches b\nJOIN\n    Employees e ON b.BranchID = e.BranchID\nWHERE\n    e.Salary > 90000\nGROUP BY\n    b.BranchName;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    b.BranchName,\n    COUNT(e.EmployeeID) AS NumberOfEmployees\nFROM\n    Branches b\nJOIN\n    Employees e ON b.BranchID = e.BranchID\nWHERE\n    e.Salary > 90000\nGROUP BY\n    b.BranchName;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT b.BranchName, COUNT(e.EmployeeID) AS NumberOfEmployees\nFROM Branches b\nJOIN Employees e ON b.BranchID = e.BranchID\nWHERE e.Salary > 90000\nGROUP BY b.BranchName\nORDER BY COUNT(e.EmployeeID) DESC;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    b.BranchName, \n    COUNT(e.EmployeeID) AS TotalEmployees, \n    MAX(e.Salary) AS MaxSalary\nFROM \n    Branches b\nJOIN \n    Employees e ON b.BranchID = e.BranchID\nGROUP BY \n    b.BranchName\nHAVING \n    MAX(e.Salary) > 90000",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT b.BranchName, MAX(e.Salary) AS MaxSalary, COUNT(e.EmployeeID) AS EmployeeCount\nFROM Branches b\nJOIN Employees e ON b.BranchID = e.BranchID\nGROUP BY b.BranchName\nHAVING MAX(e.Salary) > 90000\nORDER BY MaxSalary DESC;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT b.BranchName, MAX(e.Salary) AS MaxSalary, COUNT(e.EmployeeID) AS EmployeeCount\nFROM Branches b\nJOIN Employees e ON b.BranchID = e.BranchID\nGROUP BY b.BranchName\nHAVING MAX(e.Salary) > 90000\nORDER BY MaxSalary DESC;",
            "gigachat_response": "SELECT \n    b.BranchName,\n    COUNT(e.EmployeeID) AS NumberOfEmployees\nFROM \n    Branches b\nJOIN \n    Employees e ON b.BranchID = e.BranchID\nWHERE \n    e.Salary > 90000\nGROUP BY \n    b.BranchName;",
            "gigachat_response_ru": "SELECT \n    b.BranchName,\n    MAX(e.Salary) AS MaxSalary,\n    COUNT(e.EmployeeID) AS NumberOfEmployees\nFROM \n    Branches b\nJOIN \n    Employees e ON b.BranchID = e.BranchID\nGROUP BY \n    b.BranchName\nHAVING \n    MAX(e.Salary) > 90000;"
        },
        {
            "question": "Какие 5 клиентов имеют наибольшую сумму страхового покрытия по активным полисам с ожидающими выплатами?",
            "sql_query": "SELECT c.FirstName, c.LastName, SUM(p.CoverageAmount) AS TotalCoverage FROM Customers c JOIN InsurancePolicies p ON c.CustomerID = p.CustomerID JOIN PolicyClaims pc ON p.PolicyID = pc.PolicyID WHERE p.Status = 'Активен' AND pc.Status = 'Ожидание' GROUP BY c.FirstName, c.LastName ORDER BY TotalCoverage DESC LIMIT 5;",
            "gpt-4o_response": "SELECT c.FirstName, c.LastName, SUM(ip.CoverageAmount) AS TotalCoverageAmount\nFROM Customers c\nJOIN InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nJOIN PolicyClaims pc ON ip.PolicyID = pc.PolicyID\nWHERE ip.Status = 'Активен' AND pc.Status = 'Ожидание'\nGROUP BY c.FirstName, c.LastName\nORDER BY TotalCoverageAmount DESC\nLIMIT 5;",
            "gpt-4o_response_ru": "SELECT c.FirstName, c.LastName, SUM(ip.CoverageAmount) AS TotalCoverage\nFROM Customers c\nJOIN InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nJOIN PolicyClaims pc ON ip.PolicyID = pc.PolicyID\nWHERE ip.Status = 'Активен' AND pc.Status = 'Ожидание'\nGROUP BY c.FirstName, c.LastName\nORDER BY TotalCoverage DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response": "SELECT \n    c.FirstName,\n    c.LastName,\n    SUM(ip.CoverageAmount) AS TotalCoverageAmount\nFROM Customers c\nJOIN InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nJOIN PolicyClaims pc ON ip.PolicyID = pc.PolicyID\nWHERE ip.Status = 'Активен' AND pc.Status = 'Ожидание'\nGROUP BY c.CustomerID, c.FirstName, c.LastName\nORDER BY TotalCoverageAmount DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    c.FirstName,\n    c.LastName,\n    SUM(ip.CoverageAmount) AS TotalCoverageAmount\nFROM\n    Customers c\nJOIN\n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nJOIN\n    PolicyClaims pc ON ip.PolicyID = pc.PolicyID\nWHERE\n    ip.Status = 'Активен' AND pc.Status = 'Ожидание'\nGROUP BY\n    c.CustomerID, c.FirstName, c.LastName\nORDER BY\n    TotalCoverageAmount DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    c.FirstName, \n    c.LastName, \n    SUM(ip.CoverageAmount) AS TotalCoverageAmount\nFROM \n    Customers c\nJOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nJOIN \n    PolicyClaims pc ON ip.PolicyID = pc.PolicyID\nWHERE \n    ip.Status = 'Активен' \n    AND pc.Status = 'Ожидание'\nGROUP BY \n    c.FirstName, \n    c.LastName\nORDER BY \n    TotalCoverageAmount DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    SUM(ip.CoverageAmount) AS TotalInsuranceCoverage\nFROM \n    Customers c\nJOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nJOIN \n    PolicyClaims pc ON ip.PolicyID = pc.PolicyID\nWHERE \n    ip.Status = 'Активен' AND \n    pc.Status = 'Ожидание'\nGROUP BY \n    c.FirstName, \n    c.LastName\nORDER BY \n    TotalInsuranceCoverage DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT c.FirstName, c.LastName, SUM(ip.CoverageAmount) AS TotalCoverageAmount\nFROM Customers c\nJOIN InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nJOIN PolicyClaims pc ON ip.PolicyID = pc.PolicyID\nWHERE ip.Status = 'Активен' AND pc.Status = 'Ожидание'\nGROUP BY c.CustomerID, c.FirstName, c.LastName\nORDER BY TotalCoverageAmount DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT c.FirstName, c.LastName, SUM(ip.CoverageAmount) AS TotalCoverageAmount\nFROM Customers c\nJOIN InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nJOIN PolicyClaims pc ON ip.PolicyID = pc.PolicyID\nWHERE ip.Status = 'Активен' AND pc.Status = 'Ожидание'\nGROUP BY c.CustomerID, c.FirstName, c.LastName\nORDER BY TotalCoverageAmount DESC\nLIMIT 5;",
            "gigachat_response": "SELECT TOP 5 \n    c.FirstName + ' ' + c.LastName AS FullName,\n    i.CoverageAmount AS InsuranceCoverageAmount\nFROM \n    Customers c\nINNER JOIN \n    InsurancePolicies i ON c.CustomerID = i.CustomerID\nWHERE \n    i.Status = 'Активен'\nAND \n    i.PolicyID IN (SELECT PolicyID FROM PolicyClaims WHERE Status = 'Ожидание')\nORDER BY \n    i.CoverageAmount DESC;",
            "gigachat_response_ru": "SELECT TOP 5 \n    i.CustomerID,\n    c.FirstName + ' ' + c.LastName AS FullName,\n    SUM(i.CoverageAmount) AS TotalCoverageAmount\nFROM \n    InsurancePolicies i\nINNER JOIN \n    Customers c ON i.CustomerID = c.CustomerID\nWHERE \n    i.Status = 'Активен'\nAND \n    i.PolicyID IN (SELECT PolicyID FROM PolicyClaims WHERE Status = 'Ожидание')\nGROUP BY \n    i.CustomerID, c.FirstName, c.LastName\nORDER BY \n    TotalCoverageAmount DESC;"
        },
        {
            "question": "Какие валюты использовались в транзакциях за последний год и каковы их количество и общие суммы?",
            "sql_query": "SELECT t.Currency, COUNT(t.TransactionID) AS TotalTransactions, SUM(t.Amount) AS TotalAmount FROM Transactions t WHERE t.TransactionDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY t.Currency;",
            "gpt-4o_response": "SELECT \n    t.Currency, \n    COUNT(t.TransactionID) AS TransactionCount, \n    SUM(t.Amount) AS TotalAmount\nFROM \n    Transactions t\nWHERE \n    t.TransactionDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)\nGROUP BY \n    t.Currency",
            "gpt-4o_response_ru": "SELECT \n    t.Currency,\n    COUNT(t.TransactionID) AS TransactionCount,\n    SUM(t.Amount) AS TotalAmount\nFROM \n    Transactions t\nWHERE \n    t.TransactionDate >= DATEADD(YEAR, -1, GETDATE())\nGROUP BY \n    t.Currency",
            "google/gemini-2.0-flash-001_response": "SELECT \n    Currency,\n    COUNT(*) AS TransactionCount,\n    SUM(Amount) AS TotalAmount\nFROM \n    Transactions\nWHERE \n    TransactionDate >= DATE('now', '-1 year')\nGROUP BY \n    Currency;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT \n    Currency,\n    COUNT(*) AS TransactionCount,\n    SUM(Amount) AS TotalAmount\nFROM Transactions\nWHERE TransactionDate >= DATE('now', '-1 year')\nGROUP BY Currency;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    t.Currency, \n    COUNT(t.TransactionID) AS TransactionCount, \n    SUM(t.Amount) AS TotalAmount\nFROM \n    Transactions t\nWHERE \n    t.TransactionDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\nGROUP BY \n    t.Currency\nORDER BY \n    TotalAmount DESC;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    t.Currency, \n    COUNT(t.TransactionID) AS TransactionCount, \n    SUM(t.Amount) AS TotalAmount\nFROM \n    Transactions t\nWHERE \n    t.TransactionDate >= NOW() - INTERVAL 1 YEAR\nGROUP BY \n    t.Currency\nORDER BY \n    TotalAmount DESC;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    t.Currency,\n    COUNT(t.TransactionID) AS TransactionCount,\n    SUM(t.Amount) AS TotalAmount\nFROM \n    Transactions t\nWHERE \n    t.TransactionDate >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)\nGROUP BY \n    t.Currency\nORDER BY \n    TransactionCount DESC;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    t.Currency,\n    COUNT(t.TransactionID) AS TransactionCount,\n    SUM(t.Amount) AS TotalAmount\nFROM \n    Transactions t\nWHERE \n    t.TransactionDate >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)\nGROUP BY \n    t.Currency\nORDER BY \n    TransactionCount DESC;",
            "gigachat_response": "SELECT \n    Currency, \n    COUNT(TransactionID) AS NumberOfTransactions, \n    SUM(Amount) AS TotalAmount\nFROM Transactions\nWHERE TransactionDate >= DATEADD(YEAR, -1, GETDATE())\nGROUP BY Currency\nORDER BY Currency;",
            "gigachat_response_ru": "SELECT \n    Currency, \n    COUNT(TransactionID) AS NumberOfTransactions, \n    SUM(Amount) AS TotalAmount\nFROM Transactions\nWHERE TransactionDate >= DATEADD(YEAR, -1, GETDATE())\nGROUP BY Currency\nORDER BY Currency;"
        },
        {
            "question": "Какие 10 клиентов с активными кредитами имеют наибольший объем транзакций по счетам?",
            "sql_query": "SELECT c.FirstName, c.LastName, (SELECT COUNT(*) FROM Accounts a WHERE a.CustomerID = c.CustomerID AND a.Status = 'Active') AS ActiveAccounts, (SELECT SUM(t.Amount) FROM Transactions t WHERE t.AccountID IN (SELECT a.AccountID FROM Accounts a WHERE a.CustomerID = c.CustomerID) AND t.Status = 'Завершено') AS TotalTransactionAmount FROM Customers c WHERE c.CustomerID IN (SELECT DISTINCT CustomerID FROM Loans WHERE Status = 'Активно') ORDER BY TotalTransactionAmount DESC LIMIT 10;",
            "gpt-4o_response": "SELECT c.FirstName, c.LastName, SUM(t.Amount) AS TotalTransactionAmount\nFROM Customers c\nJOIN Loans l ON c.CustomerID = l.CustomerID\nJOIN Accounts a ON c.CustomerID = a.CustomerID\nJOIN Transactions t ON a.AccountID = t.AccountID\nWHERE l.Status = 'Активно' AND t.Status = 'Завершено'\nGROUP BY c.FirstName, c.LastName\nORDER BY TotalTransactionAmount DESC\nLIMIT 10;",
            "gpt-4o_response_ru": "SELECT c.FirstName, c.LastName, SUM(t.Amount) AS TotalTransactionAmount\nFROM Customers c\nJOIN Loans l ON c.CustomerID = l.CustomerID\nJOIN Accounts a ON c.CustomerID = a.CustomerID\nJOIN Transactions t ON a.AccountID = t.AccountID\nWHERE l.Status = 'Активно' AND t.Status = 'Завершено'\nGROUP BY c.FirstName, c.LastName\nORDER BY TotalTransactionAmount DESC\nLIMIT 10;",
            "google/gemini-2.0-flash-001_response": "SELECT \n    c.FirstName,\n    c.LastName,\n    SUM(t.Amount) AS TotalTransactionAmount\nFROM Customers c\nJOIN Loans l ON c.CustomerID = l.CustomerID\nJOIN Accounts a ON c.CustomerID = a.CustomerID\nJOIN Transactions t ON a.AccountID = t.AccountID\nWHERE l.Status = 'Активно'\nGROUP BY c.CustomerID, c.FirstName, c.LastName\nORDER BY TotalTransactionAmount DESC\nLIMIT 10;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n  c.FirstName,\n  c.LastName,\n  SUM(t.Amount) AS TotalTransactionAmount\nFROM Customers AS c\nJOIN Loans AS l\n  ON c.CustomerID = l.CustomerID\nJOIN Accounts AS a\n  ON c.CustomerID = a.CustomerID\nJOIN Transactions AS t\n  ON a.AccountID = t.AccountID\nWHERE\n  l.Status = 'Активно'\nGROUP BY\n  c.CustomerID,\n  c.FirstName,\n  c.LastName\nORDER BY\n  TotalTransactionAmount DESC\nLIMIT 10;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    c.FirstName, \n    c.LastName, \n    l.LoanID, \n    l.PrincipalAmount, \n    SUM(t.Amount) AS TotalTransactionAmount\nFROM \n    Customers c\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID\nJOIN \n    Accounts a ON c.CustomerID = a.CustomerID\nJOIN \n    Transactions t ON a.AccountID = t.AccountID\nWHERE \n    l.Status = 'Активно'\nGROUP BY \n    c.FirstName, \n    c.LastName, \n    l.LoanID, \n    l.PrincipalAmount\nORDER BY \n    TotalTransactionAmount DESC\nLIMIT 10;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    SUM(t.Amount) AS TotalTransactionAmount\nFROM \n    Customers c\nJOIN \n    Accounts a ON c.CustomerID = a.CustomerID\nJOIN \n    Transactions t ON a.AccountID = t.AccountID\nWHERE \n    c.CustomerID IN (SELECT CustomerID FROM Loans WHERE Status = 'Активно')\nGROUP BY \n    c.FirstName, \n    c.LastName\nORDER BY \n    TotalTransactionAmount DESC\nLIMIT 10;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT c.CustomerID, c.FirstName, c.LastName, SUM(t.Amount) AS TotalTransactionAmount\nFROM Customers c\nJOIN Accounts a ON c.CustomerID = a.CustomerID\nJOIN Transactions t ON a.AccountID = t.AccountID\nWHERE c.CustomerID IN (SELECT DISTINCT CustomerID FROM Loans WHERE Status = 'Активно')\nAND t.Status = 'Завершено'\nGROUP BY c.CustomerID, c.FirstName, c.LastName\nORDER BY TotalTransactionAmount DESC\nLIMIT 10;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT c.CustomerID, c.FirstName, c.LastName, COUNT(t.TransactionID) AS TransactionCount, SUM(ABS(t.Amount)) AS TotalTransactionAmount\nFROM Customers c\nJOIN Loans l ON c.CustomerID = l.CustomerID\nJOIN Accounts a ON c.CustomerID = a.CustomerID\nJOIN Transactions t ON a.AccountID = t.AccountID\nWHERE l.Status = 'Активно' AND t.Status = 'Завершено'\nGROUP BY c.CustomerID, c.FirstName, c.LastName\nORDER BY TotalTransactionAmount DESC\nLIMIT 10;",
            "gigachat_response": "SELECT TOP 10 \n    c.FirstName, \n    c.LastName, \n    SUM(t.Amount) AS TotalTransactionVolume\nFROM \n    Customers c\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID\nJOIN \n    Accounts a ON c.CustomerID = a.CustomerID\nJOIN \n    Transactions t ON a.AccountID = t.AccountID\nWHERE \n    l.Status = 'Активно' AND t.Status = 'Завершено'\nGROUP BY \n    c.FirstName, c.LastName\nORDER BY \n    TotalTransactionVolume DESC;",
            "gigachat_response_ru": "SELECT TOP 10 \n    c.FirstName + ' ' + c.LastName AS FullName,\n    SUM(t.Amount) AS TotalTransactionVolume\nFROM \n    Customers c\nINNER JOIN \n    Loans l ON c.CustomerID = l.CustomerID\nINNER JOIN \n    Accounts acc ON c.CustomerID = acc.CustomerID\nINNER JOIN \n    Transactions t ON acc.AccountID = t.AccountID\nWHERE \n    l.Status = 'Активно'\nGROUP BY \n    c.FirstName, c.LastName\nORDER BY \n    TotalTransactionVolume DESC;"
        },
        {
            "question": "Какие филиалы банка имеют активные банкоматы и среднюю зарплату сотрудников более 50000 рублей?",
            "sql_query": "SELECT b.BranchName, (SELECT COUNT(*) FROM ATMs atm WHERE atm.BranchID = b.BranchID AND atm.Status = 'Active') AS ActiveATMs, (SELECT AVG(e.Salary) FROM Employees e WHERE e.BranchID = b.BranchID) AS AverageEmployeeSalary FROM Branches b WHERE b.BranchID IN (SELECT DISTINCT BranchID FROM Employees WHERE Salary > 50000) ORDER BY ActiveATMs DESC, AverageEmployeeSalary DESC;",
            "gpt-4o_response": "SELECT b.BranchName, b.Address, b.City, b.State, b.ZipCode, b.PhoneNumber, b.ManagerName\nFROM Branches b\nJOIN ATMs a ON b.BranchID = a.BranchID\nJOIN Employees e ON b.BranchID = e.BranchID\nWHERE a.Status = 'Active'\nGROUP BY b.BranchID, b.BranchName, b.Address, b.City, b.State, b.ZipCode, b.PhoneNumber, b.ManagerName\nHAVING AVG(e.Salary) > 50000;",
            "gpt-4o_response_ru": "SELECT b.BranchName, b.Address, b.City, b.State, b.ZipCode, b.PhoneNumber, b.ManagerName\nFROM Branches b\nJOIN ATMs a ON b.BranchID = a.BranchID\nJOIN Employees e ON b.BranchID = e.BranchID\nWHERE a.Status = 'Active'\nGROUP BY b.BranchID, b.BranchName, b.Address, b.City, b.State, b.ZipCode, b.PhoneNumber, b.ManagerName\nHAVING AVG(e.Salary) > 50000;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    b.BranchName,\n    b.Address,\n    b.City,\n    AVG(e.Salary) AS AverageSalary\nFROM\n    Branches b\nJOIN\n    Employees e ON b.BranchID = e.BranchID\nJOIN\n    ATMs a ON b.BranchID = a.BranchID\nWHERE\n    a.Status = 'Active'\nGROUP BY\n    b.BranchName, b.Address, b.City\nHAVING\n    AVG(e.Salary) > 50000;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    b.BranchName,\n    AVG(e.Salary) AS AverageSalary\nFROM\n    Branches b\nJOIN\n    Employees e ON b.BranchID = e.BranchID\nJOIN\n    ATMs a ON b.BranchID = a.BranchID\nWHERE\n    a.Status = 'Active'\nGROUP BY\n    b.BranchName\nHAVING\n    AVG(e.Salary) > 50000;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    b.BranchName, \n    b.Address, \n    b.City, \n    b.State, \n    b.ZipCode, \n    b.PhoneNumber, \n    b.ManagerName, \n    COUNT(atm.ATMID) AS ActiveATMs,\n    AVG(e.Salary) AS AverageEmployeeSalary\nFROM \n    Branches b\nJOIN \n    ATMs atm ON b.BranchID = atm.BranchID\nJOIN \n    Employees e ON b.BranchID = e.BranchID\nWHERE \n    atm.Status = 'Active'\nGROUP BY \n    b.BranchName, \n    b.Address, \n    b.City, \n    b.State, \n    b.ZipCode, \n    b.PhoneNumber, \n    b.ManagerName\nHAVING \n    AVG(e.Salary) > 50000\nORDER BY \n    AverageEmployeeSalary DESC;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    b.BranchName, \n    b.Address, \n    AVG(e.Salary) AS AverageEmployeeSalary, \n    COUNT(atm.ATMID) AS ActiveATMsCount\nFROM \n    Branches b\nJOIN \n    Employees e ON b.BranchID = e.BranchID\nJOIN \n    ATMs atm ON b.BranchID = atm.BranchID\nWHERE \n    atm.Status = 'Active'\nGROUP BY \n    b.BranchName, b.Address\nHAVING \n    AVG(e.Salary) > 50000\nORDER BY \n    AverageEmployeeSalary DESC;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT b.BranchID, b.BranchName, b.Address, AVG(e.Salary) AS AvgSalary\nFROM Branches b\nJOIN ATMs a ON b.BranchID = a.BranchID\nJOIN Employees e ON b.BranchID = e.BranchID\nWHERE a.Status = 'Active'\nGROUP BY b.BranchID, b.BranchName, b.Address\nHAVING AVG(e.Salary) > 50000;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT b.BranchID, b.BranchName, b.City, \n       AVG(e.Salary) AS AvgSalary,\n       COUNT(DISTINCT a.ATMID) AS ActiveATMs\nFROM Branches b\nJOIN Employees e ON b.BranchID = e.BranchID\nJOIN ATMs a ON b.BranchID = a.BranchID\nWHERE a.Status = 'Active'\nGROUP BY b.BranchID, b.BranchName, b.City\nHAVING AVG(e.Salary) > 50000\nORDER BY AvgSalary DESC;",
            "gigachat_response": "SELECT \n    b.BranchName,\n    AVG(e.Salary) AS AverageSalary\nFROM \n    Branches b\nJOIN \n    Employees e ON b.BranchID = e.BranchID\nJOIN \n    ATMs a ON b.BranchID = a.BranchID\nWHERE \n    a.Status = 'Active' \n    AND e.Salary IS NOT NULL\nGROUP BY \n    b.BranchName\nHAVING \n    AVG(e.Salary) > 50000;",
            "gigachat_response_ru": "SELECT \n    b.BranchName,\n    AVG(e.Salary) AS AverageSalary\nFROM \n    Branches b\nJOIN \n    Employees e ON b.BranchID = e.BranchID\nJOIN \n    ATMs a ON b.BranchID = a.BranchID\nWHERE \n    a.Status = 'Active' \nAND \n    e.Salary >= 50000\nGROUP BY \n    b.BranchName\nHAVING \n    AVG(e.Salary) > 50000;"
        },
        {
            "question": "Какие 10 клиентов с активными счетами имеют наибольшую сумму выплат по кредитам? Покажите имя и фамилию клиента, количество активных кредитов и общую сумму выплат.",
            "sql_query": "SELECT c.FirstName, c.LastName, (SELECT COUNT(*) FROM Loans l WHERE l.CustomerID = c.CustomerID AND l.Status = 'Активно') AS ActiveLoans, (SELECT SUM(lp.Amount) FROM LoanPayments lp WHERE lp.LoanID IN (SELECT l.LoanID FROM Loans l WHERE l.CustomerID = c.CustomerID) AND lp.Status = 'Завершено') AS TotalLoanPayments FROM Customers c WHERE c.CustomerID IN (SELECT DISTINCT CustomerID FROM Accounts WHERE Status = 'Active') ORDER BY TotalLoanPayments DESC LIMIT 10;",
            "gpt-4o_response": "SELECT c.FirstName, c.LastName, COUNT(l.LoanID) AS ActiveLoans, \n       COALESCE(SUM(lp.Amount), 0) AS TotalLoanPayments\nFROM Customers c\nJOIN Loans l ON c.CustomerID = l.CustomerID\nLEFT JOIN LoanPayments lp ON l.LoanID = lp.LoanID AND lp.Status = 'Завершено'\nJOIN Accounts a ON c.CustomerID = a.CustomerID\nWHERE l.Status = 'Активно' AND a.Status = 'Active'\nGROUP BY c.FirstName, c.LastName\nORDER BY TotalLoanPayments DESC\nLIMIT 10;",
            "gpt-4o_response_ru": "SELECT c.FirstName, c.LastName, COUNT(l.LoanID) AS ActiveLoans, COALESCE(SUM(lp.Amount), 0) AS TotalLoanPayments\nFROM Customers c\nJOIN Loans l ON c.CustomerID = l.CustomerID\nLEFT JOIN LoanPayments lp ON l.LoanID = lp.LoanID AND lp.Status = 'Завершено'\nWHERE l.Status = 'Активно' AND c.CustomerID IN (\n    SELECT DISTINCT a.CustomerID\n    FROM Accounts a\n    WHERE a.Status = 'Active'\n)\nGROUP BY c.FirstName, c.LastName\nORDER BY TotalLoanPayments DESC\nLIMIT 10;",
            "google/gemini-2.0-flash-001_response": "SELECT \n    c.FirstName,\n    c.LastName,\n    COUNT(DISTINCT l.LoanID) AS ActiveLoansCount,\n    SUM(lp.Amount) AS TotalLoanPaymentsAmount\nFROM Customers c\nJOIN Loans l ON c.CustomerID = l.CustomerID\nJOIN LoanPayments lp ON l.LoanID = lp.LoanID\nJOIN Accounts a ON c.CustomerID = a.CustomerID\nWHERE l.Status = 'Активно' AND a.Status = 'Active'\nGROUP BY c.CustomerID, c.FirstName, c.LastName\nORDER BY TotalLoanPaymentsAmount DESC\nLIMIT 10;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    c.FirstName,\n    c.LastName,\n    COUNT(DISTINCT l.LoanID) AS ActiveLoansCount,\n    SUM(lp.Amount) AS TotalLoanPaymentsAmount\nFROM\n    Customers c\nJOIN\n    Accounts a ON c.CustomerID = a.CustomerID\nJOIN\n    Loans l ON c.CustomerID = l.CustomerID\nLEFT JOIN\n    LoanPayments lp ON l.LoanID = lp.LoanID\nWHERE\n    a.Status = 'Active' AND l.Status = 'Активно'\nGROUP BY\n    c.CustomerID, c.FirstName, c.LastName\nORDER BY\n    TotalLoanPaymentsAmount DESC\nLIMIT 10;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    c.FirstName, \n    c.LastName, \n    COUNT(DISTINCT l.LoanID) AS ActiveLoans, \n    SUM(lp.Amount) AS TotalLoanPayments\nFROM \n    Customers c\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID\nJOIN \n    LoanPayments lp ON l.LoanID = lp.LoanID\nWHERE \n    l.Status = 'Активно'\nGROUP BY \n    c.FirstName, \n    c.LastName\nORDER BY \n    TotalLoanPayments DESC\nLIMIT 10;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    COUNT(DISTINCT l.LoanID) AS ActiveLoansCount, \n    SUM(lp.Amount) AS TotalLoanPayments\nFROM \n    Customers c\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID\nJOIN \n    LoanPayments lp ON l.LoanID = lp.LoanID\nWHERE \n    l.Status = 'Активно'\nGROUP BY \n    c.FirstName, \n    c.LastName\nORDER BY \n    TotalLoanPayments DESC\nLIMIT 10;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT c.FirstName, c.LastName, COUNT(DISTINCT l.LoanID) AS ActiveLoansCount, SUM(lp.Amount) AS TotalLoanPayments\nFROM Customers c\nJOIN Loans l ON c.CustomerID = l.CustomerID\nJOIN LoanPayments lp ON l.LoanID = lp.LoanID\nJOIN Accounts a ON c.CustomerID = a.CustomerID\nWHERE l.Status = 'Активно' AND a.Status = 'Active' AND lp.Status = 'Завершено'\nGROUP BY c.CustomerID, c.FirstName, c.LastName\nORDER BY TotalLoanPayments DESC\nLIMIT 10;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT c.FirstName, c.LastName, COUNT(DISTINCT l.LoanID) AS ActiveLoansCount, SUM(lp.Amount) AS TotalPayments\nFROM Customers c\nJOIN Loans l ON c.CustomerID = l.CustomerID\nJOIN LoanPayments lp ON l.LoanID = lp.LoanID\nWHERE l.Status = 'Активно' AND lp.Status = 'Завершено'\nGROUP BY c.CustomerID, c.FirstName, c.LastName\nORDER BY TotalPayments DESC\nLIMIT 10;",
            "gigachat_response": "SELECT TOP 10\n    c.FirstName + ' ' + c.LastName AS FullName,\n    COUNT(DISTINCT l.LoanID) AS NumberOfActiveLoans,\n    SUM(lp.Amount) AS TotalLoanPayments\nFROM\n    Customers c\nINNER JOIN\n    Accounts acc ON c.CustomerID = acc.CustomerID\nINNER JOIN\n    Loans l ON c.CustomerID = l.CustomerID\nINNER JOIN\n    LoanPayments lp ON l.LoanID = lp.LoanID\nWHERE\n    acc.Status = 'Active' AND l.Status = 'Активно' AND lp.Status = 'Завершено'\nGROUP BY\n    c.FirstName, c.LastName\nORDER BY\n    TotalLoanPayments DESC;",
            "gigachat_response_ru": "SELECT TOP 10\n    c.FirstName + ' ' + c.LastName AS FullName,\n    COUNT(lp.LoanID) AS NumberOfLoans,\n    SUM(lp.Amount) AS TotalLoanPayments\nFROM Customers c\nINNER JOIN Accounts acc ON c.CustomerID = acc.CustomerID\nINNER JOIN LoanPayments lp ON c.CustomerID = lp.LoanID\nWHERE acc.Status = 'Active'\nGROUP BY c.FirstName, c.LastName\nORDER BY TotalLoanPayments DESC;"
        },
        {
            "question": "Какие 5 филиалов банка с активными банкоматами имеют наибольший объем транзакций и сколько банкоиров в этих филиалах?",
            "sql_query": "SELECT b.BranchName, (SELECT COUNT(*) FROM Employees e WHERE e.BranchID = b.BranchID AND e.Position = 'Банкир') AS TotalBankers, (SELECT SUM(t.Amount) FROM Transactions t WHERE t.AccountID IN (SELECT a.AccountID FROM Accounts a WHERE a.CustomerID IN (SELECT e.EmployeeID FROM Employees e WHERE e.BranchID = b.BranchID)) AND t.Status = 'Завершено') AS TotalBranchTransactions FROM Branches b WHERE b.BranchID IN (SELECT DISTINCT BranchID FROM ATMs WHERE Status = 'Active') ORDER BY TotalBranchTransactions DESC LIMIT 5;",
            "gpt-4o_response": "SELECT b.BranchName, \n       COUNT(e.EmployeeID) AS TotalBankers, \n       SUM(t.Amount) AS TotalTransactionVolume\nFROM Branches b\nJOIN ATMs a ON b.BranchID = a.BranchID\nJOIN Employees e ON b.BranchID = e.BranchID\nJOIN Accounts acc ON acc.CustomerID = e.EmployeeID\nJOIN Transactions t ON acc.AccountID = t.AccountID\nWHERE a.Status = 'Active'\nGROUP BY b.BranchName\nORDER BY TotalTransactionVolume DESC\nLIMIT 5;",
            "gpt-4o_response_ru": "SELECT b.BranchName, \n       SUM(t.Amount) AS TotalTransactionAmount, \n       COUNT(DISTINCT e.EmployeeID) AS TotalBankers\nFROM Branches b\nJOIN ATMs a ON b.BranchID = a.BranchID\nJOIN Employees e ON b.BranchID = e.BranchID\nJOIN Accounts acc ON e.EmployeeID = acc.CustomerID\nJOIN Transactions t ON acc.AccountID = t.AccountID\nWHERE a.Status = 'Active'\nGROUP BY b.BranchName\nORDER BY TotalTransactionAmount DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    b.BranchName,\n    COUNT(DISTINCT e.EmployeeID) AS NumberOfBankers,\n    SUM(t.Amount) AS TotalTransactionAmount\nFROM\n    Branches b\nJOIN\n    ATMs a ON b.BranchID = a.BranchID\nJOIN\n    Accounts acc ON b.BranchID = (SELECT BranchID FROM Employees WHERE EmployeeID = acc.CustomerID LIMIT 1)\nJOIN\n    Transactions t ON acc.AccountID = t.AccountID\nJOIN\n    Employees e ON b.BranchID = e.BranchID\nWHERE\n    a.Status = 'Active'\n    AND a.BranchID IN (SELECT BranchID FROM ATMs WHERE Status = 'Active')\n    AND e.Position = 'Банкир'\nGROUP BY\n    b.BranchName\nORDER BY\n    TotalTransactionAmount DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    b.BranchName,\n    COUNT(DISTINCT e.EmployeeID) AS NumberOfBankers,\n    SUM(t.Amount) AS TotalTransactionAmount\nFROM\n    Branches b\nJOIN\n    ATMs a ON b.BranchID = a.BranchID\nJOIN\n    Accounts acc ON b.BranchID = acc.CustomerID  -- This join is incorrect, should be based on transactions\nJOIN\n    Transactions t ON acc.AccountID = t.AccountID\nJOIN\n    Employees e ON b.BranchID = e.BranchID\nWHERE\n    a.Status = 'Active' AND e.Position = 'Банкир'\nGROUP BY\n    b.BranchName\nORDER BY\n    TotalTransactionAmount DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    b.BranchName, \n    COUNT(atm.ATMID) AS ActiveATMs, \n    SUM(t.Amount) AS TotalTransactionAmount, \n    COUNT(e.EmployeeID) AS TotalEmployees\nFROM \n    Branches b\nJOIN \n    ATMs atm ON b.BranchID = atm.BranchID\nJOIN \n    Transactions t ON atm.ATMID = t.TransactionID\nJOIN \n    Employees e ON b.BranchID = e.BranchID\nWHERE \n    atm.Status = 'Active'\nGROUP BY \n    b.BranchName\nORDER BY \n    TotalTransactionAmount DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    b.BranchName, \n    COUNT(atm.ATMID) AS ActiveATMs,\n    COUNT(e.EmployeeID) AS Employees,\n    SUM(t.Amount) AS TotalTransactionAmount\nFROM \n    Branches b\nJOIN \n    ATMs atm ON b.BranchID = atm.BranchID AND atm.Status = 'Active'\nJOIN \n    Employees e ON b.BranchID = e.BranchID\nJOIN \n    Accounts a ON e.EmployeeID = a.CustomerID\nJOIN \n    Transactions t ON a.AccountID = t.AccountID\nGROUP BY \n    b.BranchName\nORDER BY \n    TotalTransactionAmount DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT b.BranchName, \n       SUM(t.Amount) AS TotalTransactionAmount,\n       COUNT(DISTINCT e.EmployeeID) AS BankersCount\nFROM Branches b\nJOIN ATMs a ON b.BranchID = a.BranchID\nJOIN Employees e ON b.BranchID = e.BranchID\nJOIN Accounts ac ON e.EmployeeID = ac.CustomerID\nJOIN Transactions t ON ac.AccountID = t.AccountID\nWHERE a.Status = 'Active'\n  AND e.Position = 'Банкир'\n  AND t.Status = 'Завершено'\nGROUP BY b.BranchName\nORDER BY TotalTransactionAmount DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    b.BranchName,\n    SUM(ct.Amount) AS TotalTransactionAmount,\n    COUNT(DISTINCT e.EmployeeID) AS BankersCount\nFROM \n    Branches b\nJOIN \n    ATMs a ON b.BranchID = a.BranchID\nJOIN \n    Employees e ON b.BranchID = e.BranchID AND e.Position = 'Банкир'\nJOIN \n    CardTransactions ct ON ct.Status = 'Завершена'\nJOIN \n    CreditCards cc ON ct.CardID = cc.CardID\nJOIN \n    Customers c ON cc.CustomerID = c.CustomerID\nWHERE \n    a.Status = 'Active'\nGROUP BY \n    b.BranchName\nORDER BY \n    TotalTransactionAmount DESC\nLIMIT 5;",
            "gigachat_response": "SELECT \n    b.BranchName,\n    COUNT(DISTINCT at.ATMID) AS ActiveATMsCount,\n    COUNT(DISTINCT tr.TransactionID) AS TotalTransactions,\n    COUNT(e.EmployeeID) AS BankersCount\nFROM \n    Branches b\nLEFT JOIN \n    ATMs at ON b.BranchID = at.BranchID AND at.Status = 'Active'\nLEFT JOIN \n    Accounts acc ON b.BranchID = acc.BranchID -- Assuming accounts can be linked to branches via employees\nLEFT JOIN \n    Transactions tr ON acc.AccountID = tr.AccountID\nLEFT JOIN \n    Employees e ON b.BranchID = e.BranchID\nWHERE \n    at.Status IS NOT NULL -- Ensures only branches with active ATMs are considered\nGROUP BY \n    b.BranchName\nORDER BY \n    TotalTransactions DESC\nLIMIT 5;",
            "gigachat_response_ru": "SELECT \n    b.BranchName,\n    COUNT(DISTINCT at.ATMID) AS ActiveATMsCount,\n    COUNT(DISTINCT tr.TransactionID) AS TotalTransactions,\n    COUNT(e.EmployeeID) AS BankersCount\nFROM \n    Branches b\nLEFT JOIN \n    ATMs at ON b.BranchID = at.BranchID AND at.Status = 'Active'\nLEFT JOIN \n    Accounts acc ON b.BranchID = acc.BranchID -- Предположим связь через филиал сотрудников\nLEFT JOIN \n    Transactions tr ON acc.AccountID = tr.AccountID\nLEFT JOIN \n    Employees e ON b.BranchID = e.BranchID\nWHERE \n    at.Status IS NOT NULL -- Только филиалы с хотя бы одним активным банкоматом\nGROUP BY \n    b.BranchName\nORDER BY \n    TotalTransactions DESC\nLIMIT 5;"
        },
        {
            "question": "Какие 5 кредитных специалистов имеют наибольшую среднюю сумму платежей по управляемым кредитам и сколько этих кредитов?",
            "sql_query": "SELECT e.FirstName, e.LastName, (SELECT COUNT(*) FROM Loans l WHERE l.CustomerID = e.EmployeeID AND l.Status = 'Активно') AS ManagedLoans, (SELECT AVG(lp.Amount) FROM LoanPayments lp WHERE lp.LoanID IN (SELECT l.LoanID FROM Loans l WHERE l.CustomerID = e.EmployeeID) AND lp.Status = 'Завершено') AS AvgLoanPayment FROM Employees e WHERE e.Position = 'Кредитный специалист' ORDER BY AvgLoanPayment DESC LIMIT 5;",
            "gpt-4o_response": "SELECT e.FirstName, e.LastName, AVG(lp.Amount) AS AvgPaymentAmount, COUNT(DISTINCT l.LoanID) AS TotalLoans\nFROM Employees e\nJOIN Loans l ON e.EmployeeID = l.CustomerID\nJOIN LoanPayments lp ON l.LoanID = lp.LoanID\nWHERE l.Status = 'Активно' AND lp.Status = 'Завершено' AND e.Position = 'Кредитный специалист'\nGROUP BY e.FirstName, e.LastName\nORDER BY AvgPaymentAmount DESC\nLIMIT 5;",
            "gpt-4o_response_ru": "SELECT e.FirstName, e.LastName, AVG(lp.Amount) AS AvgPaymentAmount, COUNT(DISTINCT l.LoanID) AS TotalLoans\nFROM Employees e\nJOIN Loans l ON e.EmployeeID = l.CustomerID\nJOIN LoanPayments lp ON l.LoanID = lp.LoanID\nWHERE l.Status = 'Активно'\nGROUP BY e.FirstName, e.LastName\nORDER BY AvgPaymentAmount DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    e.FirstName,\n    e.LastName,\n    AVG(lp.Amount) AS AveragePaymentAmount,\n    COUNT(DISTINCT l.LoanID) AS NumberOfLoans\nFROM\n    Employees e\nJOIN\n    Branches b ON e.BranchID = b.BranchID\nJOIN\n    Loans l ON e.EmployeeID = l.CustomerID\nJOIN\n    LoanPayments lp ON l.LoanID = lp.LoanID\nWHERE\n    e.Position = 'Кредитный специалист'\nGROUP BY\n    e.FirstName,\n    e.LastName\nORDER BY\n    AveragePaymentAmount DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    e.FirstName,\n    e.LastName,\n    AVG(lp.Amount) AS AveragePaymentAmount,\n    COUNT(DISTINCT l.LoanID) AS NumberOfLoans\nFROM Employees e\nJOIN Loans l ON e.EmployeeID = l.CustomerID\nJOIN LoanPayments lp ON l.LoanID = lp.LoanID\nGROUP BY e.EmployeeID, e.FirstName, e.LastName\nORDER BY AveragePaymentAmount DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    e.FirstName, \n    e.LastName, \n    COUNT(DISTINCT l.LoanID) AS TotalLoans, \n    AVG(lp.Amount) AS AvgPaymentAmount\nFROM \n    Employees e\nJOIN \n    Loans l ON e.EmployeeID = l.CustomerID\nJOIN \n    LoanPayments lp ON l.LoanID = lp.LoanID\nWHERE \n    e.Position = 'Кредитный специалист'\nGROUP BY \n    e.FirstName, \n    e.LastName\nORDER BY \n    AvgPaymentAmount DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    e.FirstName, \n    e.LastName, \n    AVG(lp.Amount) AS AvgPaymentAmount, \n    COUNT(DISTINCT l.LoanID) AS TotalLoans\nFROM \n    Employees e\nJOIN \n    Loans l ON e.EmployeeID = l.CustomerID\nJOIN \n    LoanPayments lp ON l.LoanID = lp.LoanID\nWHERE \n    e.Position = 'Кредитный специалист'\nGROUP BY \n    e.FirstName, \n    e.LastName\nORDER BY \n    AvgPaymentAmount DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT e.FirstName, e.LastName, AVG(lp.Amount) AS AvgPaymentAmount, COUNT(DISTINCT l.LoanID) AS TotalLoans\nFROM Employees e\nJOIN Loans l ON e.EmployeeID = l.CustomerID\nJOIN LoanPayments lp ON l.LoanID = lp.LoanID\nWHERE e.Position = 'Кредитный специалист' AND lp.Status = 'Завершено'\nGROUP BY e.FirstName, e.LastName\nORDER BY AvgPaymentAmount DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT e.FirstName, e.LastName, COUNT(l.LoanID) AS LoanCount, AVG(p.Amount) AS AveragePaymentAmount\nFROM Employees e\nJOIN Branches b ON e.BranchID = b.BranchID\nJOIN Loans l ON e.EmployeeID = l.CustomerID\nJOIN LoanPayments p ON l.LoanID = p.LoanID\nWHERE e.Position = 'Кредитный специалист' AND p.Status = 'Завершено'\nGROUP BY e.EmployeeID, e.FirstName, e.LastName\nORDER BY AveragePaymentAmount DESC\nLIMIT 5;",
            "gigachat_response": "SELECT \n    e.FirstName, \n    e.LastName, \n    AVG(lp.Amount) AS AveragePaymentAmount, \n    COUNT(DISTINCT lp.LoanID) AS NumberOfLoansManaged\nFROM \n    Employees e\nJOIN \n    Loans l ON e.EmployeeID = l.CustomerID -- Assuming loans are managed by employees directly linked via customer ID\nJOIN \n    LoanPayments lp ON l.LoanID = lp.LoanID\nWHERE \n    e.Position = 'Кредитный специалист'\nGROUP BY \n    e.FirstName, \n    e.LastName\nORDER BY \n    AveragePaymentAmount DESC\nLIMIT 5;",
            "gigachat_response_ru": "SELECT \n    e.FirstName || ' ' || e.LastName AS FullName,\n    COUNT(DISTINCT lp.LoanID) AS ManagedLoansCount,\n    ROUND(AVG(lp.Amount), 2) AS AveragePaymentAmount\nFROM \n    Employees e\nJOIN \n    Loans l ON e.EmployeeID = l.CustomerID -- Предположим, что сотрудник управляет клиентами, взявшими кредиты\nJOIN \n    LoanPayments lp ON l.LoanID = lp.LoanID\nWHERE \n    e.Position = 'Кредитный специалист'\nGROUP BY \n    e.FirstName, e.LastName\nORDER BY \n    AveragePaymentAmount DESC\nLIMIT 5;"
        },
        {
            "question": "Какие 10 активных рублевых счетов имеют наибольший объем транзакций? Покажите также количество завершенных транзакций по этим счетам.",
            "sql_query": "SELECT a.AccountNumber, (SELECT COUNT(*) FROM Transactions t WHERE t.AccountID = a.AccountID AND t.Status = 'Завершено') AS CompletedTransactions, (SELECT SUM(t.Amount) FROM Transactions t WHERE t.AccountID = a.AccountID AND t.Status = 'Завершено') AS TotalTransactionAmount FROM Accounts a WHERE a.Status = 'Active' AND a.Currency = 'RUB' ORDER BY TotalTransactionAmount DESC LIMIT 10;",
            "gpt-4o_response": "SELECT a.AccountNumber, \n       SUM(t.Amount) AS TotalTransactionVolume, \n       COUNT(t.TransactionID) AS CompletedTransactions\nFROM Accounts a\nJOIN Transactions t ON a.AccountID = t.AccountID\nWHERE a.Status = 'Active' \n  AND a.Currency = 'RUB' \n  AND t.Status = 'Завершено'\nGROUP BY a.AccountNumber\nORDER BY TotalTransactionVolume DESC\nLIMIT 10;",
            "gpt-4o_response_ru": "SELECT \n    a.AccountNumber, \n    SUM(t.Amount) AS TotalTransactionVolume,\n    COUNT(t.TransactionID) AS CompletedTransactions\nFROM \n    Accounts a\nJOIN \n    Transactions t ON a.AccountID = t.AccountID\nWHERE \n    a.Status = 'Active' \n    AND a.Currency = 'RUB'\n    AND t.Status = 'Завершено'\nGROUP BY \n    a.AccountNumber\nORDER BY \n    TotalTransactionVolume DESC\nLIMIT 10;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    a.AccountNumber,\n    COUNT(t.TransactionID) AS TotalTransactions\nFROM\n    Accounts a\nJOIN\n    Transactions t ON a.AccountID = t.AccountID\nWHERE\n    a.Currency = 'RUB'\n    AND a.Status = 'Active'\n    AND t.Status = 'Завершено'\nGROUP BY\n    a.AccountNumber\nORDER BY\n    TotalTransactions DESC\nLIMIT 10;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    a.AccountNumber,\n    COUNT(CASE WHEN t.Status = 'Завершено' THEN t.TransactionID ELSE NULL END) AS CompletedTransactionsCount,\n    SUM(t.Amount) AS TotalTransactionAmount\nFROM Accounts a\nJOIN Transactions t ON a.AccountID = t.AccountID\nWHERE a.Currency = 'RUB' AND a.Status = 'Active'\nGROUP BY a.AccountNumber\nORDER BY TotalTransactionAmount DESC\nLIMIT 10;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    a.AccountNumber, \n    COUNT(t.TransactionID) AS TotalTransactions, \n    SUM(CASE WHEN t.Status = 'Завершено' THEN 1 ELSE 0 END) AS CompletedTransactions\nFROM \n    Accounts a\nJOIN \n    Transactions t ON a.AccountID = t.AccountID\nWHERE \n    a.Status = 'Active' AND a.Currency = 'RUB'\nGROUP BY \n    a.AccountNumber\nORDER BY \n    TotalTransactions DESC\nLIMIT 10;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    a.AccountNumber, \n    COUNT(t.TransactionID) AS TotalTransactions, \n    SUM(CASE WHEN t.Status = 'Завершено' THEN 1 ELSE 0 END) AS CompletedTransactions\nFROM \n    Accounts a\nJOIN \n    Transactions t ON a.AccountID = t.AccountID\nWHERE \n    a.Status = 'Active' AND a.Currency = 'RUB'\nGROUP BY \n    a.AccountNumber\nORDER BY \n    TotalTransactions DESC\nLIMIT 10;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT a.AccountNumber, COUNT(t.TransactionID) AS CompletedTransactions, SUM(t.Amount) AS TotalTransactionAmount\nFROM Accounts a\nJOIN Transactions t ON a.AccountID = t.AccountID\nWHERE a.Status = 'Active' AND a.Currency = 'RUB' AND t.Status = 'Завершено'\nGROUP BY a.AccountNumber\nORDER BY TotalTransactionAmount DESC\nLIMIT 10;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT a.AccountNumber, COUNT(t.TransactionID) AS CompletedTransactions, SUM(t.Amount) AS TotalTransactionAmount\nFROM Accounts a\nJOIN Transactions t ON a.AccountID = t.AccountID\nWHERE a.Status = 'Active' AND a.Currency = 'RUB' AND t.Status = 'Завершено'\nGROUP BY a.AccountNumber\nORDER BY TotalTransactionAmount DESC\nLIMIT 10;",
            "gigachat_response": "SELECT \n    a.AccountNumber,\n    COUNT(t.TransactionID) AS NumberOfCompletedTransactions\nFROM \n    Accounts a\nJOIN \n    Transactions t ON a.AccountID = t.AccountID\nWHERE \n    a.Status = 'Active' \n    AND a.Currency = 'RUB' \n    AND t.Status = 'Завершено'\nGROUP BY \n    a.AccountNumber\nORDER BY \n    NumberOfCompletedTransactions DESC\nLIMIT 10;",
            "gigachat_response_ru": "SELECT \n    a.AccountNumber,\n    COUNT(t.TransactionID) AS NumberOfCompletedTransactions,\n    SUM(t.Amount) AS TotalTransactionVolume\nFROM \n    Accounts a\nJOIN \n    Transactions t ON a.AccountID = t.AccountID\nWHERE \n    a.Status = 'Active' \n    AND a.Currency = 'RUB' \n    AND t.Status = 'Завершено'\nGROUP BY \n    a.AccountNumber\nORDER BY \n    TotalTransactionVolume DESC\nLIMIT 10;"
        },
        {
            "question": "Какие 5 клиентов с активными кредитами имеют наибольший объем операций по вкладам? Мне нужно получить также количество активных вкладов.",
            "sql_query": "SELECT c.FirstName, c.LastName, (SELECT COUNT(*) FROM Deposits d WHERE d.CustomerID = c.CustomerID AND d.Status = 'Активен') AS ActiveDeposits, (SELECT SUM(dt.Amount) FROM DepositTransactions dt WHERE dt.DepositID IN (SELECT d.DepositID FROM Deposits d WHERE d.CustomerID = c.CustomerID) AND dt.Status = 'Завершено') AS TotalDepositTransactions FROM Customers c WHERE c.CustomerID IN (SELECT DISTINCT CustomerID FROM Loans WHERE Status = 'Активно') ORDER BY TotalDepositTransactions DESC LIMIT 5;",
            "gpt-4o_response": "SELECT \n    c.FirstName, \n    c.LastName, \n    (SELECT COUNT(*) \n     FROM Deposits d \n     WHERE d.CustomerID = c.CustomerID AND d.Status = 'Активен') AS ActiveDepositsCount,\n    (SELECT SUM(dt.Amount) \n     FROM DepositTransactions dt \n     WHERE dt.DepositID IN (SELECT d.DepositID FROM Deposits d WHERE d.CustomerID = c.CustomerID) \n     AND dt.Status = 'Завершено') AS TotalDepositTransactionAmount\nFROM \n    Customers c\nWHERE \n    c.CustomerID IN (SELECT DISTINCT CustomerID FROM Loans WHERE Status = 'Активно')\nORDER BY \n    TotalDepositTransactionAmount DESC\nLIMIT 5;",
            "gpt-4o_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    COUNT(d.DepositID) AS ActiveDepositsCount,\n    SUM(dt.Amount) AS TotalDepositTransactionAmount\nFROM \n    Customers c\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID\nJOIN \n    DepositTransactions dt ON d.DepositID = dt.DepositID\nWHERE \n    l.Status = 'Активно' \n    AND d.Status = 'Активен'\n    AND dt.Status = 'Завершено'\nGROUP BY \n    c.FirstName, \n    c.LastName\nORDER BY \n    TotalDepositTransactionAmount DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response": "SELECT \n    c.FirstName,\n    c.LastName,\n    COUNT(DISTINCT d.DepositID) AS ActiveDepositsCount,\n    SUM(dt.Amount) AS TotalDepositTransactionAmount\nFROM Customers c\nJOIN Loans l ON c.CustomerID = l.CustomerID\nJOIN Deposits d ON c.CustomerID = d.CustomerID\nJOIN DepositTransactions dt ON d.DepositID = dt.DepositID\nWHERE l.Status = 'Активно' AND d.Status = 'Активен'\nGROUP BY c.CustomerID, c.FirstName, c.LastName\nORDER BY TotalDepositTransactionAmount DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT \n    c.FirstName,\n    c.LastName,\n    SUM(dt.Amount) AS TotalDepositTransactionAmount,\n    COUNT(DISTINCT d.DepositID) AS ActiveDeposits\nFROM Customers c\nJOIN Loans l ON c.CustomerID = l.CustomerID\nJOIN Deposits d ON c.CustomerID = d.CustomerID\nJOIN DepositTransactions dt ON d.DepositID = dt.DepositID\nWHERE l.Status = 'Активно' AND d.Status = 'Активен'\nGROUP BY c.CustomerID, c.FirstName, c.LastName\nORDER BY TotalDepositTransactionAmount DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    c.FirstName, \n    c.LastName, \n    COUNT(DISTINCT d.DepositID) AS ActiveDeposits,\n    SUM(dt.Amount) AS TotalDepositTransactionAmount\nFROM \n    Customers c\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID\nJOIN \n    DepositTransactions dt ON d.DepositID = dt.DepositID\nWHERE \n    l.Status = 'Активно' AND d.Status = 'Активен' AND dt.Status = 'Завершено'\nGROUP BY \n    c.FirstName, c.LastName\nORDER BY \n    TotalDepositTransactionAmount DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    COUNT(d.DepositID) AS ActiveDeposits, \n    SUM(dt.Amount) AS TotalDepositTransactionAmount\nFROM \n    Customers c\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID\nJOIN \n    DepositTransactions dt ON d.DepositID = dt.DepositID\nWHERE \n    l.Status = 'Активно' AND d.Status = 'Активен' AND dt.Status = 'Завершено'\nGROUP BY \n    c.FirstName, c.LastName\nORDER BY \n    TotalDepositTransactionAmount DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT c.CustomerID, c.FirstName, c.LastName, \n       COUNT(DISTINCT d.DepositID) AS ActiveDepositsCount,\n       SUM(ABS(dt.Amount)) AS TotalDepositTransactionAmount\nFROM Customers c\nJOIN Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\nJOIN Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\nJOIN DepositTransactions dt ON d.DepositID = dt.DepositID AND dt.Status = 'Завершено'\nGROUP BY c.CustomerID, c.FirstName, c.LastName\nORDER BY TotalDepositTransactionAmount DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    c.CustomerID,\n    c.FirstName,\n    c.LastName,\n    COUNT(DISTINCT d.DepositID) AS ActiveDepositsCount,\n    SUM(dt.Amount) AS TotalDepositTransactionsAmount\nFROM \n    Customers c\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\nJOIN \n    DepositTransactions dt ON d.DepositID = dt.DepositID AND dt.Status = 'Завершено'\nGROUP BY \n    c.CustomerID, c.FirstName, c.LastName\nORDER BY \n    TotalDepositTransactionsAmount DESC\nLIMIT 5;",
            "gigachat_response": "SELECT \n    c.FirstName, \n    c.LastName, \n    COUNT(d.DepositID) AS NumberOfActiveDeposits,\n    SUM(dt.Amount) AS TotalDepositActivity\nFROM \n    Customers c\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID\nJOIN \n    DepositTransactions dt ON d.DepositID = dt.DepositID\nWHERE \n    l.Status = 'Активно' AND d.Status = 'Активен' AND dt.Status = 'Завершено'\nGROUP BY \n    c.FirstName, c.LastName\nORDER BY \n    TotalDepositActivity DESC\nLIMIT 5;",
            "gigachat_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    COUNT(d.DepositID) AS NumberOfActiveDeposits,\n    SUM(dt.Amount) AS TotalDepositOperationsAmount\nFROM \n    Customers c\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID\nJOIN \n    DepositTransactions dt ON d.DepositID = dt.DepositID\nWHERE \n    l.Status = 'Активно' \n    AND d.Status = 'Активен'\n    AND dt.Status = 'Завершено'\nGROUP BY \n    c.FirstName, c.LastName\nORDER BY \n    TotalDepositOperationsAmount DESC\nLIMIT 5;"
        },
        {
            "question": "Какие 3 филиала банка с сотрудниками с зарплатой более 60000 рублей имеют наибольшую сумму вкладов? Покажите название отделения, количество активных банкоматов и общую сумму вкладов в отделении.",
            "sql_query": "SELECT b.BranchName, (SELECT COUNT(*) FROM ATMs atm WHERE atm.BranchID = b.BranchID AND atm.Status = 'Active') AS ActiveATMs, (SELECT SUM(d.Amount) FROM Deposits d WHERE d.CustomerID IN (SELECT c.CustomerID FROM Customers c WHERE c.CustomerID IN (SELECT DISTINCT CustomerID FROM Accounts WHERE BranchID = b.BranchID)) AND d.Status = 'Активен') AS TotalBranchDeposits FROM Branches b WHERE b.BranchID IN (SELECT DISTINCT BranchID FROM Employees WHERE Salary > 60000) ORDER BY TotalBranchDeposits DESC LIMIT 3;",
            "gpt-4o_response": "SELECT b.BranchName, \n       COUNT(a.ATMID) AS ActiveATMs, \n       SUM(d.Amount) AS TotalDepositAmount\nFROM Branches b\nJOIN Employees e ON b.BranchID = e.BranchID\nJOIN Deposits d ON e.BranchID = b.BranchID\nLEFT JOIN ATMs a ON b.BranchID = a.BranchID AND a.Status = 'Active'\nWHERE e.Salary > 60000\nGROUP BY b.BranchName\nORDER BY TotalDepositAmount DESC\nLIMIT 3;",
            "gpt-4o_response_ru": "SELECT b.BranchName, \n       COUNT(a.ATMID) AS ActiveATMs, \n       SUM(d.Amount) AS TotalDepositAmount\nFROM Branches b\nJOIN Employees e ON b.BranchID = e.BranchID\nJOIN Deposits d ON e.BranchID = d.CustomerID\nLEFT JOIN ATMs a ON b.BranchID = a.BranchID AND a.Status = 'Active'\nWHERE e.Salary > 60000\nGROUP BY b.BranchName\nORDER BY TotalDepositAmount DESC\nLIMIT 3;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    b.BranchName,\n    COUNT(DISTINCT a.ATMID) AS ActiveATMs,\n    SUM(d.Amount) AS TotalDepositAmount\nFROM\n    Branches b\nJOIN\n    Employees e ON b.BranchID = e.BranchID\nLEFT JOIN\n    ATMs a ON b.BranchID = a.BranchID AND a.Status = 'Active'\nLEFT JOIN\n    Deposits d ON d.CustomerID IN (SELECT CustomerID FROM Accounts WHERE AccountID IN (SELECT AccountID FROM Transactions WHERE AccountID IN (SELECT AccountID FROM Accounts WHERE CustomerID IN (SELECT CustomerID FROM Customers))))\nWHERE\n    e.Salary > 60000\nGROUP BY\n    b.BranchName\nORDER BY\n    TotalDepositAmount DESC\nLIMIT 3;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    b.BranchName,\n    COUNT(DISTINCT a.ATMID) AS ActiveATMs,\n    SUM(d.Amount) AS TotalDepositAmount\nFROM Branches b\nJOIN Employees e ON b.BranchID = e.BranchID\nJOIN ATMs a ON b.BranchID = a.BranchID\nJOIN Customers c ON 1=1\nJOIN Deposits d ON c.CustomerID = d.CustomerID\nJOIN Accounts acc ON c.CustomerID = acc.CustomerID\nWHERE e.Salary > 60000 AND a.Status = 'Active'\nGROUP BY b.BranchName\nORDER BY TotalDepositAmount DESC\nLIMIT 3;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    b.BranchName, \n    COUNT(a.ATMID) AS ActiveATMs, \n    SUM(d.Amount) AS TotalDepositAmount\nFROM \n    Branches b\nJOIN \n    Employees e ON b.BranchID = e.BranchID\nJOIN \n    Deposits d ON e.BranchID = (SELECT BranchID FROM Employees WHERE EmployeeID = (SELECT EmployeeID FROM Deposits WHERE DepositID = d.DepositID))\nJOIN \n    ATMs a ON b.BranchID = a.BranchID\nWHERE \n    e.Salary > 60000 AND a.Status = 'Active' AND d.Status = 'Активен'\nGROUP BY \n    b.BranchName\nORDER BY \n    TotalDepositAmount DESC\nLIMIT 3;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    b.BranchName, \n    COUNT(atm.ATMID) AS ActiveATMs,\n    SUM(d.Amount) AS TotalDepositAmount\nFROM \n    Branches b\nJOIN \n    Employees e ON b.BranchID = e.BranchID\nJOIN \n    Deposits d ON e.EmployeeID = d.CustomerID\nJOIN \n    ATMs atm ON b.BranchID = atm.BranchID\nWHERE \n    e.Salary > 60000 AND \n    d.Status = 'Активен' AND \n    atm.Status = 'Active'\nGROUP BY \n    b.BranchName\nORDER BY \n    TotalDepositAmount DESC\nLIMIT 3;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT b.BranchName, \n       COUNT(DISTINCT a.ATMID) AS ActiveATMs,\n       SUM(d.Amount) AS TotalDeposits\nFROM Branches b\nJOIN Employees e ON b.BranchID = e.BranchID\nJOIN ATMs a ON b.BranchID = a.BranchID AND a.Status = 'Active'\nJOIN Customers c ON e.EmployeeID = c.CustomerID\nJOIN Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\nWHERE e.Salary > 60000\nGROUP BY b.BranchName\nORDER BY TotalDeposits DESC\nLIMIT 3;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT b.BranchName, \n       COUNT(DISTINCT a.ATMID) AS ActiveATMs,\n       SUM(d.Amount) AS TotalDeposits\nFROM Branches b\nJOIN Employees e ON b.BranchID = e.BranchID\nJOIN ATMs a ON b.BranchID = a.BranchID AND a.Status = 'Active'\nJOIN Customers c ON e.EmployeeID = c.CustomerID\nJOIN Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\nWHERE e.Salary > 60000\nGROUP BY b.BranchName\nORDER BY TotalDeposits DESC\nLIMIT 3;",
            "gigachat_response": "SELECT \n    b.BranchName,\n    COUNT(DISTINCT at.ATMID) FILTER (WHERE at.Status = 'Active') AS ActiveATMsCount,\n    SUM(d.Amount) AS TotalDepositsAmount\nFROM \n    Branches b\nJOIN \n    Employees e ON b.BranchID = e.BranchID\nJOIN \n    Deposits d ON e.EmployeeID = d.CustomerID\nJOIN \n    ATMs at ON b.BranchID = at.BranchID\nWHERE \n    e.Salary > 60000\nGROUP BY \n    b.BranchName\nORDER BY \n    TotalDepositsAmount DESC\nLIMIT 3;",
            "gigachat_response_ru": "SELECT \n    b.BranchName,\n    COUNT(DISTINCT at.ATMID) AS ActiveATMsCount,\n    SUM(d.Amount) AS TotalDepositsSum\nFROM \n    Branches b\nJOIN \n    Employees e ON b.BranchID = e.BranchID\nJOIN \n    Deposits d ON e.EmployeeID = d.CustomerID\nLEFT JOIN \n    ATMs at ON b.BranchID = at.BranchID AND at.Status = 'Active'\nWHERE \n    e.Salary > 60000\nGROUP BY \n    b.BranchName\nORDER BY \n    TotalDepositsSum DESC\nLIMIT 3;"
        },
        {
            "question": "Какие 5 аналитиков имеют наибольшую среднюю стоимость управляемых услуг? Выведите имя и фамилию сотрудника, количество управляемых услуг и среднюю стоимость услуг.",
            "sql_query": "SELECT e.FirstName, e.LastName, (SELECT COUNT(*) FROM CustomerServices cs WHERE cs.CustomerID = e.EmployeeID AND cs.Status = 'активен') AS ManagedServices, (SELECT AVG(s.Fee) FROM Services s WHERE s.ServiceID IN (SELECT cs.ServiceID FROM CustomerServices cs WHERE cs.CustomerID = e.EmployeeID) AND s.Status = 'Активен') AS AvgServiceFee FROM Employees e WHERE e.Position = 'Аналитик' ORDER BY AvgServiceFee DESC LIMIT 5;",
            "gpt-4o_response": "SELECT e.FirstName, e.LastName, COUNT(cs.ServiceID) AS ManagedServicesCount, AVG(s.Fee) AS AverageServiceFee\nFROM Employees e\nJOIN Branches b ON e.BranchID = b.BranchID\nJOIN CustomerServices cs ON e.EmployeeID = cs.CustomerID\nJOIN Services s ON cs.ServiceID = s.ServiceID\nWHERE e.Position = 'Аналитик'\nGROUP BY e.FirstName, e.LastName\nORDER BY AverageServiceFee DESC\nLIMIT 5;",
            "gpt-4o_response_ru": "SELECT e.FirstName, e.LastName, COUNT(cs.ServiceID) AS ServiceCount, AVG(s.Fee) AS AvgServiceFee\nFROM Employees e\nJOIN Branches b ON e.BranchID = b.BranchID\nJOIN CustomerServices cs ON e.EmployeeID = cs.CustomerID\nJOIN Services s ON cs.ServiceID = s.ServiceID\nWHERE e.Position = 'Аналитик'\nGROUP BY e.FirstName, e.LastName\nORDER BY AvgServiceFee DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    e.FirstName,\n    e.LastName,\n    COUNT(cs.CustomerServiceID) AS ManagedServicesCount,\n    AVG(s.Fee) AS AverageServiceFee\nFROM\n    Employees e\nJOIN\n    CustomerServices cs ON e.EmployeeID = cs.CustomerID\nJOIN\n    Services s ON cs.ServiceID = s.ServiceID\nWHERE\n    e.Position = 'Аналитик'\nGROUP BY\n    e.FirstName,\n    e.LastName\nORDER BY\n    AverageServiceFee DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    e.FirstName,\n    e.LastName,\n    COUNT(cs.CustomerServiceID) AS ManagedServicesCount,\n    AVG(s.Fee) AS AverageServiceFee\nFROM Employees e\nJOIN Branches b ON e.BranchID = b.BranchID\nJOIN CustomerServices cs ON e.EmployeeID = cs.CustomerID\nJOIN Services s ON cs.ServiceID = s.ServiceID\nWHERE e.Position = 'Аналитик'\nGROUP BY e.EmployeeID, e.FirstName, e.LastName\nORDER BY AverageServiceFee DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT e.FirstName, e.LastName, COUNT(cs.CustomerServiceID) AS ManagedServices, AVG(s.Fee) AS AverageServiceCost\nFROM Employees e\nJOIN CustomerServices cs ON e.EmployeeID = cs.CustomerID\nJOIN Services s ON cs.ServiceID = s.ServiceID\nWHERE e.Position = 'Аналитик'\nGROUP BY e.FirstName, e.LastName\nORDER BY AverageServiceCost DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    e.FirstName, \n    e.LastName, \n    COUNT(cs.ServiceID) AS ManagedServicesCount, \n    AVG(s.Fee) AS AverageServiceCost\nFROM \n    Employees e\nJOIN \n    CustomerServices cs ON e.EmployeeID = cs.CustomerID\nJOIN \n    Services s ON cs.ServiceID = s.ServiceID\nWHERE \n    e.Position = 'Аналитик'\nGROUP BY \n    e.FirstName, \n    e.LastName\nORDER BY \n    AverageServiceCost DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT e.FirstName, e.LastName, COUNT(cs.CustomerServiceID) AS ManagedServicesCount, AVG(s.Fee) AS AverageServiceFee \nFROM Employees e\nJOIN CustomerServices cs ON e.EmployeeID = cs.CustomerID\nJOIN Services s ON cs.ServiceID = s.ServiceID\nWHERE e.Position = 'Аналитик'\nGROUP BY e.EmployeeID, e.FirstName, e.LastName\nORDER BY AverageServiceFee DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT e.FirstName, e.LastName, COUNT(cs.ServiceID) AS ManagedServicesCount, AVG(s.Fee) AS AvgServiceFee \nFROM Employees e \nJOIN CustomerServices cs ON e.EmployeeID = cs.CustomerID \nJOIN Services s ON cs.ServiceID = s.ServiceID \nWHERE e.Position = 'Аналитик' \nGROUP BY e.FirstName, e.LastName \nORDER BY AvgServiceFee DESC \nLIMIT 5;",
            "gigachat_response": "SELECT \n    e.FirstName, \n    e.LastName, \n    COUNT(s.ServiceID) AS ManagedServicesCount, \n    AVG(s.Fee) AS AverageServiceFee\nFROM \n    Employees e\nJOIN \n    Services s ON e.EmployeeID = s.ServiceID -- Assuming an employee manages services directly\nGROUP BY \n    e.FirstName, e.LastName\nORDER BY \n    AverageServiceFee DESC\nLIMIT 5;",
            "gigachat_response_ru": "SELECT \n    e.FirstName, \n    e.LastName, \n    COUNT(s.ServiceID) AS ManagedServicesCount, \n    AVG(s.Fee) AS AverageServiceCost\nFROM \n    Employees e\nJOIN \n    Services s ON e.EmployeeID = s.ServiceID -- Предположим, что сотрудник управляет услугами через поле ServiceID\nWHERE \n    e.Position = 'Аналитик'\nGROUP BY \n    e.FirstName, e.LastName\nORDER BY \n    AverageServiceCost DESC\nLIMIT 5;"
        },
        {
            "question": "Какие 10 активных долларовых счетов имеют наибольший объем транзакций? Покажите номер счета, количество завершенных транзакций и общий объем транзакций.",
            "sql_query": "SELECT a.AccountNumber, (SELECT COUNT(*) FROM Transactions t WHERE t.AccountID = a.AccountID AND t.Status = 'Завершено') AS CompletedTransactions, (SELECT SUM(t.Amount) FROM Transactions t WHERE t.AccountID = a.AccountID AND t.Status = 'Завершено') AS TotalTransactionAmount FROM Accounts a WHERE a.Status = 'Active' AND a.Currency = 'USD' ORDER BY TotalTransactionAmount DESC LIMIT 10;",
            "gpt-4o_response": "SELECT a.AccountNumber, \n       COUNT(t.TransactionID) AS CompletedTransactions, \n       SUM(t.Amount) AS TotalTransactionAmount\nFROM Accounts a\nJOIN Transactions t ON a.AccountID = t.AccountID\nWHERE a.Status = 'Active' \n  AND a.Currency = 'USD' \n  AND t.Status = 'Завершено'\nGROUP BY a.AccountNumber\nORDER BY TotalTransactionAmount DESC\nLIMIT 10;",
            "gpt-4o_response_ru": "SELECT a.AccountNumber, \n       COUNT(t.TransactionID) AS CompletedTransactions, \n       SUM(t.Amount) AS TotalTransactionAmount\nFROM Accounts a\nJOIN Transactions t ON a.AccountID = t.AccountID\nWHERE a.Status = 'Active' \n  AND a.Currency = 'USD' \n  AND t.Status = 'Завершено'\nGROUP BY a.AccountNumber\nORDER BY TotalTransactionAmount DESC\nLIMIT 10;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    a.AccountNumber,\n    COUNT(t.TransactionID) AS TransactionCount,\n    SUM(t.Amount) AS TotalTransactionAmount\nFROM\n    Accounts a\nJOIN\n    Transactions t ON a.AccountID = t.AccountID\nWHERE\n    a.Currency = 'USD'\n    AND a.Status = 'Active'\n    AND t.Status = 'Завершено'\nGROUP BY\n    a.AccountNumber\nORDER BY\n    TotalTransactionAmount DESC\nLIMIT 10;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    a.AccountNumber,\n    COUNT(t.TransactionID) AS TransactionCount,\n    SUM(t.Amount) AS TotalTransactionAmount\nFROM\n    Accounts a\nJOIN\n    Transactions t ON a.AccountID = t.AccountID\nWHERE\n    a.Currency = 'USD'\n    AND a.Status = 'Active'\n    AND t.Status = 'Завершено'\nGROUP BY\n    a.AccountNumber\nORDER BY\n    TotalTransactionAmount DESC\nLIMIT 10;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    a.AccountNumber, \n    COUNT(t.TransactionID) AS CompletedTransactions, \n    SUM(t.Amount) AS TotalTransactionAmount\nFROM \n    Accounts a\nJOIN \n    Transactions t ON a.AccountID = t.AccountID\nWHERE \n    a.Status = 'Active' \n    AND a.Currency = 'USD' \n    AND t.Status = 'Завершено'\nGROUP BY \n    a.AccountNumber\nORDER BY \n    TotalTransactionAmount DESC\nLIMIT 10;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    a.AccountNumber, \n    COUNT(t.TransactionID) AS CompletedTransactions, \n    SUM(t.Amount) AS TotalTransactionAmount\nFROM \n    Accounts a\nJOIN \n    Transactions t ON a.AccountID = t.AccountID\nWHERE \n    a.Status = 'Active' AND a.Currency = 'USD' AND t.Status = 'Завершено'\nGROUP BY \n    a.AccountNumber\nORDER BY \n    TotalTransactionAmount DESC\nLIMIT 10",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT a.AccountNumber, \n       COUNT(t.TransactionID) AS CompletedTransactions, \n       SUM(t.Amount) AS TotalTransactionAmount\nFROM Accounts a\nJOIN Transactions t ON a.AccountID = t.AccountID\nWHERE a.Status = 'Active' \n  AND a.Currency = 'USD' \n  AND t.Status = 'Завершено'\nGROUP BY a.AccountNumber\nORDER BY TotalTransactionAmount DESC\nLIMIT 10;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT a.AccountNumber, \n       COUNT(t.TransactionID) AS CompletedTransactions,\n       SUM(t.Amount) AS TotalTransactionAmount\nFROM Accounts a\nJOIN Transactions t ON a.AccountID = t.AccountID\nWHERE a.Currency = 'USD' \n  AND a.Status = 'Active'\n  AND t.Status = 'Завершено'\nGROUP BY a.AccountNumber\nORDER BY TotalTransactionAmount DESC\nLIMIT 10;",
            "gigachat_response": "SELECT \n    a.AccountNumber,\n    COUNT(t.TransactionID) AS NumberOfCompletedTransactions,\n    SUM(t.Amount) AS TotalTransactionVolume\nFROM \n    Accounts a\nJOIN \n    Transactions t ON a.AccountID = t.AccountID\nWHERE \n    a.Status = 'Active' \n    AND a.Currency = 'USD' \n    AND t.Status = 'Завершено'\nGROUP BY \n    a.AccountNumber\nORDER BY \n    TotalTransactionVolume DESC\nLIMIT 10;",
            "gigachat_response_ru": "SELECT \n    a.AccountNumber,\n    COUNT(t.TransactionID) AS NumberOfCompletedTransactions,\n    SUM(t.Amount) AS TotalTransactionVolume\nFROM \n    Accounts a\nJOIN \n    Transactions t ON a.AccountID = t.AccountID\nWHERE \n    a.Status = 'Active' \n    AND a.Currency = 'USD' \n    AND t.Status = 'Завершено'\nGROUP BY \n    a.AccountNumber\nORDER BY \n    TotalTransactionVolume DESC\nLIMIT 10;"
        },
        {
            "question": "Какие 5 филиалов банка с сотрудниками с зарплатой более 60000 рублей имеют наибольшее количество активных кредитов?",
            "sql_query": "SELECT b.BranchName, (SELECT COUNT(*) FROM Loans l WHERE l.CustomerID IN (SELECT c.CustomerID FROM Customers c WHERE c.CustomerID IN (SELECT a.CustomerID FROM Accounts a WHERE a.AccountID IN (SELECT t.AccountID FROM Transactions t WHERE t.Status = 'Завершено'))) AND l.Status = 'Активно') AS ActiveLoans, (SELECT AVG(e.Salary) FROM Employees e WHERE e.BranchID = b.BranchID) AS AvgEmployeeSalary FROM Branches b WHERE b.BranchID IN (SELECT DISTINCT BranchID FROM Employees WHERE Salary > 60000) ORDER BY ActiveLoans DESC, AvgEmployeeSalary DESC LIMIT 5;",
            "gpt-4o_response": "SELECT b.BranchName, COUNT(l.LoanID) AS ActiveLoansCount\nFROM Branches b\nJOIN Employees e ON b.BranchID = e.BranchID\nJOIN Loans l ON e.EmployeeID = l.CustomerID\nWHERE e.Salary > 60000 AND l.Status = 'Активно'\nGROUP BY b.BranchName\nORDER BY ActiveLoansCount DESC\nLIMIT 5;",
            "gpt-4o_response_ru": "SELECT b.BranchName, COUNT(l.LoanID) AS ActiveLoansCount\nFROM Branches b\nJOIN Employees e ON b.BranchID = e.BranchID\nJOIN Loans l ON e.EmployeeID = l.CustomerID\nWHERE e.Salary > 60000 AND l.Status = 'Активно'\nGROUP BY b.BranchName\nORDER BY ActiveLoansCount DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response": "SELECT b.BranchName, COUNT(l.LoanID) AS ActiveLoanCount\nFROM Branches b\nJOIN Employees e ON b.BranchID = e.BranchID\nJOIN Loans l ON l.CustomerID = e.EmployeeID\nWHERE e.Salary > 60000 AND l.Status = 'Активно'\nGROUP BY b.BranchName\nORDER BY ActiveLoanCount DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT b.BranchName, COUNT(l.LoanID) AS ActiveLoanCount\nFROM Branches b\nJOIN Employees e ON b.BranchID = e.BranchID\nJOIN Loans l ON e.EmployeeID = l.CustomerID\nWHERE e.Salary > 60000 AND l.Status = 'Активно'\nGROUP BY b.BranchName\nORDER BY ActiveLoanCount DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT b.BranchName, COUNT(l.LoanID) AS ActiveLoans\nFROM Branches b\nJOIN Employees e ON b.BranchID = e.BranchID\nJOIN Loans l ON e.EmployeeID = l.CustomerID\nWHERE l.Status = 'Активно' AND e.Salary > 60000\nGROUP BY b.BranchName\nORDER BY ActiveLoans DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT b.BranchName, e.FirstName, e.LastName, COUNT(l.LoanID) AS TotalActiveLoans\nFROM Branches b\nJOIN Employees e ON b.BranchID = e.BranchID\nJOIN Loans l ON e.EmployeeID = l.CustomerID\nWHERE l.Status = 'Активно' AND e.Salary > 60000\nGROUP BY b.BranchName, e.FirstName, e.LastName\nORDER BY TotalActiveLoans DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT b.BranchName, COUNT(l.LoanID) AS ActiveLoansCount\nFROM Branches b\nJOIN Employees e ON b.BranchID = e.BranchID\nJOIN Loans l ON e.EmployeeID = l.CustomerID\nWHERE e.Salary > 60000 AND l.Status = 'Активно'\nGROUP BY b.BranchName\nORDER BY ActiveLoansCount DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT b.BranchName, COUNT(l.LoanID) AS ActiveLoansCount\nFROM Branches b\nJOIN Employees e ON b.BranchID = e.BranchID\nJOIN Loans l ON e.EmployeeID = l.CustomerID\nWHERE e.Salary > 60000 AND l.Status = 'Активно'\nGROUP BY b.BranchName\nORDER BY ActiveLoansCount DESC\nLIMIT 5;",
            "gigachat_response": "SELECT TOP 5 b.BranchName, COUNT(DISTINCT l.LoanID) AS ActiveLoansCount\nFROM Branches b\nINNER JOIN Employees e ON b.BranchID = e.BranchID\nINNER JOIN Loans l ON e.EmployeeID = l.CustomerID\nWHERE e.Salary > 60000 AND l.Status = 'Активно'\nGROUP BY b.BranchName\nORDER BY ActiveLoansCount DESC;",
            "gigachat_response_ru": "SELECT TOP 5 b.BranchName, COUNT(DISTINCT l.LoanID) AS ActiveLoansCount\nFROM Branches b\nINNER JOIN Employees e ON b.BranchID = e.BranchID\nINNER JOIN Loans l ON e.EmployeeID = l.CustomerID\nWHERE e.Salary > 60000 AND l.Status = 'Активно'\nGROUP BY b.BranchName\nORDER BY ActiveLoansCount DESC;"
        },
        {
            "question": "Какие 7 банкиров имеют наибольшую сумму выплаченных страховых возмещений? Выведите имя и фамилию сотрудника, количество управляемых страховых полисов и общую сумму выплаченных страховых возмещений.",
            "sql_query": "SELECT e.FirstName, e.LastName, (SELECT COUNT(*) FROM InsurancePolicies ip WHERE ip.CustomerID = e.EmployeeID AND ip.Status = 'Активен') AS ManagedPolicies, (SELECT SUM(pc.ClaimAmount) FROM PolicyClaims pc WHERE pc.PolicyID IN (SELECT ip.PolicyID FROM InsurancePolicies ip WHERE ip.CustomerID = e.EmployeeID) AND pc.Status = 'Выплачено') AS TotalClaimAmount FROM Employees e WHERE e.Position = 'Банкир' ORDER BY TotalClaimAmount DESC LIMIT 7;",
            "gpt-4o_response": "SELECT e.FirstName, e.LastName, COUNT(ip.PolicyID) AS ManagedPolicies, SUM(pc.ClaimAmount) AS TotalClaimAmount\nFROM Employees e\nJOIN Branches b ON e.BranchID = b.BranchID\nJOIN Customers c ON c.Address LIKE CONCAT('%', b.City, '%')\nJOIN InsurancePolicies ip ON ip.CustomerID = c.CustomerID\nJOIN PolicyClaims pc ON pc.PolicyID = ip.PolicyID\nWHERE pc.Status = 'Выплачено'\nGROUP BY e.FirstName, e.LastName\nORDER BY TotalClaimAmount DESC\nLIMIT 7;",
            "gpt-4o_response_ru": "SELECT e.FirstName, e.LastName, COUNT(ip.PolicyID) AS ManagedPolicies, SUM(pc.ClaimAmount) AS TotalClaimAmount\nFROM Employees e\nJOIN Branches b ON e.BranchID = b.BranchID\nJOIN Customers c ON b.BranchID = c.CustomerID\nJOIN InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nJOIN PolicyClaims pc ON ip.PolicyID = pc.PolicyID\nWHERE pc.Status = 'Выплачено'\nGROUP BY e.FirstName, e.LastName\nORDER BY TotalClaimAmount DESC\nLIMIT 7;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    e.FirstName,\n    e.LastName,\n    COUNT(DISTINCT ip.PolicyID) AS NumberOfPolicies,\n    SUM(pc.ClaimAmount) AS TotalClaimAmount\nFROM Employees e\nJOIN Branches b ON e.BranchID = b.BranchID\nLEFT JOIN InsurancePolicies ip ON e.EmployeeID = ip.CustomerID\nLEFT JOIN PolicyClaims pc ON ip.PolicyID = pc.PolicyID\nWHERE e.Position = 'Банкир'\nGROUP BY e.EmployeeID, e.FirstName, e.LastName\nORDER BY TotalClaimAmount DESC\nLIMIT 7;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    e.FirstName,\n    e.LastName,\n    COUNT(DISTINCT ip.PolicyID) AS PolicyCount,\n    SUM(pc.ClaimAmount) AS TotalClaimAmount\nFROM Employees e\nJOIN Branches b ON e.BranchID = b.BranchID\nJOIN Customers c ON e.EmployeeID = c.CustomerID\nJOIN InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nJOIN PolicyClaims pc ON ip.PolicyID = pc.PolicyID\nWHERE e.Position = 'Банкир'\nGROUP BY e.EmployeeID, e.FirstName, e.LastName\nORDER BY TotalClaimAmount DESC\nLIMIT 7;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    e.FirstName, \n    e.LastName, \n    COUNT(DISTINCT ip.PolicyID) AS ManagedPolicies, \n    SUM(pc.ClaimAmount) AS TotalClaimAmount\nFROM \n    Employees e\nJOIN \n    Branches b ON e.BranchID = b.BranchID\nJOIN \n    Customers c ON b.BranchID = c.CustomerID\nJOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nJOIN \n    PolicyClaims pc ON ip.PolicyID = pc.PolicyID\nWHERE \n    e.Position = 'Банкир' \n    AND pc.Status = 'Выплачено'\nGROUP BY \n    e.FirstName, \n    e.LastName\nORDER BY \n    TotalClaimAmount DESC\nLIMIT 7;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    e.FirstName, \n    e.LastName, \n    COUNT(DISTINCT ip.PolicyID) AS ManagedPolicies,\n    COALESCE(SUM(pc.ClaimAmount), 0) AS TotalClaimAmount\nFROM \n    Employees e\nJOIN \n    Branches b ON e.BranchID = b.BranchID\nJOIN \n    Customers c ON b.BranchID = c.CustomerID\nJOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nJOIN \n    PolicyClaims pc ON ip.PolicyID = pc.PolicyID\nWHERE \n    e.Position = 'Банкир'\n    AND pc.Status = 'Выплачено'\nGROUP BY \n    e.FirstName, \n    e.LastName\nORDER BY \n    TotalClaimAmount DESC\nLIMIT 7;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT e.FirstName, e.LastName, \n       COUNT(DISTINCT ip.PolicyID) AS ManagedPolicies,\n       SUM(pc.ClaimAmount) AS TotalClaimAmount\nFROM Employees e\nJOIN InsurancePolicies ip ON e.EmployeeID = ip.CustomerID\nJOIN PolicyClaims pc ON ip.PolicyID = pc.PolicyID\nWHERE pc.Status = 'Выплачено' AND e.Position = 'Банкир'\nGROUP BY e.FirstName, e.LastName\nORDER BY TotalClaimAmount DESC\nLIMIT 7;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    e.FirstName, \n    e.LastName, \n    COUNT(ip.PolicyID) AS ManagedPolicies,\n    COALESCE(SUM(pc.ClaimAmount), 0) AS TotalClaimAmount\nFROM \n    Employees e\nJOIN \n    InsurancePolicies ip ON e.EmployeeID = ip.CustomerID\nLEFT JOIN \n    PolicyClaims pc ON ip.PolicyID = pc.PolicyID AND pc.Status = 'Выплачено'\nWHERE \n    e.Position = 'Банкир'\nGROUP BY \n    e.EmployeeID, e.FirstName, e.LastName\nORDER BY \n    TotalClaimAmount DESC\nLIMIT 7;",
            "gigachat_response": "SELECT \n    e.FirstName, \n    e.LastName, \n    COUNT(ip.PolicyID) AS ManagedInsurancePoliciesCount,\n    COALESCE(SUM(pc.ClaimAmount), 0) AS TotalPaidInsuranceClaims\nFROM \n    Employees e\nLEFT JOIN \n    InsurancePolicies ip ON e.EmployeeID = ip.CustomerID -- Assuming employees manage policies directly linked to customers\nLEFT JOIN \n    PolicyClaims pc ON ip.PolicyID = pc.PolicyID AND pc.Status = 'Выплачено'\nGROUP BY \n    e.FirstName, e.LastName\nORDER BY \n    TotalPaidInsuranceClaims DESC\nLIMIT 7;",
            "gigachat_response_ru": "SELECT \n    e.FirstName, \n    e.LastName, \n    COUNT(ip.PolicyID) AS ManagedInsurancePoliciesCount,\n    COALESCE(SUM(pc.ClaimAmount), 0) AS TotalPaidInsuranceClaims\nFROM \n    Employees e\nLEFT JOIN \n    InsurancePolicies ip ON e.EmployeeID = ip.CustomerID -- Предположим, что сотрудник управляет клиентами, имеющими страховку\nLEFT JOIN \n    PolicyClaims pc ON ip.PolicyID = pc.PolicyID AND pc.Status = 'Выплачено'\nGROUP BY \n    e.FirstName, e.LastName\nORDER BY \n    TotalPaidInsuranceClaims DESC\nLIMIT 7;"
        },
        {
            "question": "Какие 6 активных рублевых счетов имеют наибольший объем транзакций и среднюю сумму транзакции? Покажите также количество завершенных транзакций по этим счетам",
            "sql_query": "SELECT a.AccountNumber, (SELECT COUNT(*) FROM Transactions t WHERE t.AccountID = a.AccountID AND t.Status = 'Завершено') AS CompletedTransactions, (SELECT SUM(t.Amount) FROM Transactions t WHERE t.AccountID = a.AccountID AND t.Status = 'Завершено') AS TotalTransactionAmount, (SELECT AVG(t.Amount) FROM Transactions t WHERE t.AccountID = a.AccountID AND t.Status = 'Завершено') AS AvgTransactionAmount FROM Accounts a WHERE a.Status = 'Active' AND a.Currency = 'RUB' ORDER BY TotalTransactionAmount DESC LIMIT 6;",
            "gpt-4o_response": "SELECT a.AccountNumber, \n       SUM(t.Amount) AS TotalTransactionVolume,\n       AVG(t.Amount) AS AvgTransactionAmount,\n       COUNT(t.TransactionID) AS CompletedTransactions\nFROM Accounts a\nJOIN Transactions t ON a.AccountID = t.AccountID\nWHERE a.Status = 'Active' \n  AND a.Currency = 'RUB'\n  AND t.Status = 'Завершено'\nGROUP BY a.AccountNumber\nORDER BY TotalTransactionVolume DESC\nLIMIT 6;",
            "gpt-4o_response_ru": "SELECT a.AccountNumber, \n       (SELECT COUNT(*) \n        FROM Transactions t \n        WHERE t.AccountID = a.AccountID AND t.Status = 'Завершено') AS CompletedTransactions,\n       (SELECT AVG(t.Amount) \n        FROM Transactions t \n        WHERE t.AccountID = a.AccountID AND t.Status = 'Завершено') AS AvgTransactionAmount,\n       (SELECT SUM(t.Amount) \n        FROM Transactions t \n        WHERE t.AccountID = a.AccountID AND t.Status = 'Завершено') AS TotalTransactionAmount\nFROM Accounts a\nWHERE a.Status = 'Active' AND a.Currency = 'RUB'\nORDER BY TotalTransactionAmount DESC\nLIMIT 6;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    a.AccountNumber,\n    COUNT(CASE WHEN t.Status = 'Завершено' THEN t.TransactionID END) AS CompletedTransactionsCount,\n    AVG(t.Amount) AS AverageTransactionAmount,\n    SUM(t.Amount) AS TotalTransactionAmount\nFROM\n    Accounts a\nJOIN\n    Transactions t ON a.AccountID = t.AccountID\nWHERE\n    a.Currency = 'RUB'\n    AND a.Status = 'Active'\nGROUP BY\n    a.AccountNumber\nORDER BY\n    TotalTransactionAmount DESC\nLIMIT 6;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    a.AccountNumber,\n    COUNT(CASE WHEN t.Status = 'Завершено' THEN t.TransactionID END) AS CompletedTransactionsCount,\n    AVG(t.Amount) AS AverageTransactionAmount,\n    SUM(t.Amount) AS TotalTransactionAmount\nFROM Accounts a\nJOIN Transactions t ON a.AccountID = t.AccountID\nWHERE a.Currency = 'RUB' AND a.Status = 'Active'\nGROUP BY a.AccountNumber\nORDER BY TotalTransactionAmount DESC\nLIMIT 6;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    a.AccountNumber, \n    COUNT(t.TransactionID) AS TotalTransactions, \n    AVG(t.Amount) AS AvgTransactionAmount, \n    SUM(t.Amount) AS TotalTransactionVolume, \n    SUM(CASE WHEN t.Status = 'Завершено' THEN 1 ELSE 0 END) AS CompletedTransactions\nFROM \n    Accounts a\nJOIN \n    Transactions t ON a.AccountID = t.AccountID\nWHERE \n    a.Status = 'Active' AND a.Currency = 'RUB'\nGROUP BY \n    a.AccountNumber\nORDER BY \n    TotalTransactionVolume DESC, AvgTransactionAmount DESC\nLIMIT 6;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    a.AccountNumber, \n    COUNT(t.TransactionID) AS TotalTransactions,\n    AVG(t.Amount) AS AvgTransactionAmount,\n    SUM(t.Amount) AS TotalTransactionVolume,\n    SUM(CASE WHEN t.Status = 'Завершено' THEN 1 ELSE 0 END) AS CompletedTransactions\nFROM \n    Accounts a\nJOIN \n    Transactions t ON a.AccountID = t.AccountID\nWHERE \n    a.Status = 'Active' AND a.Currency = 'RUB'\nGROUP BY \n    a.AccountNumber\nORDER BY \n    TotalTransactionVolume DESC\nLIMIT 6;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    a.AccountNumber,\n    COUNT(t.TransactionID) AS TotalTransactions,\n    SUM(t.Amount) AS TotalTransactionAmount,\n    AVG(t.Amount) AS AvgTransactionAmount\nFROM \n    Accounts a\nJOIN \n    Transactions t ON a.AccountID = t.AccountID\nWHERE \n    a.Status = 'Active' \n    AND a.Currency = 'RUB' \n    AND t.Status = 'Завершено'\nGROUP BY \n    a.AccountNumber\nORDER BY \n    TotalTransactionAmount DESC,\n    AvgTransactionAmount DESC\nLIMIT 6;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    a.AccountNumber,\n    COUNT(t.TransactionID) AS CompletedTransactionsCount,\n    SUM(t.Amount) AS TotalTransactionAmount,\n    AVG(t.Amount) AS AvgTransactionAmount\nFROM \n    Accounts a\nJOIN \n    Transactions t ON a.AccountID = t.AccountID\nWHERE \n    a.Status = 'Active' \n    AND a.Currency = 'RUB'\n    AND t.Status = 'Завершено'\nGROUP BY \n    a.AccountNumber\nORDER BY \n    TotalTransactionAmount DESC, AvgTransactionAmount DESC\nLIMIT 6;",
            "gigachat_response": "SELECT \n    acc.AccountNumber,\n    COUNT(tr.TransactionID) AS NumberOfCompletedTransactions,\n    AVG(tr.Amount) AS AverageTransactionAmount,\n    SUM(tr.Amount) AS TotalTransactionVolume\nFROM \n    Accounts acc\nJOIN \n    Transactions tr ON acc.AccountID = tr.AccountID\nWHERE \n    acc.Status = 'Active' \n    AND acc.Currency = 'RUB' \n    AND tr.Status = 'Завершено'\nGROUP BY \n    acc.AccountNumber\nORDER BY \n    TotalTransactionVolume DESC, AverageTransactionAmount DESC\nLIMIT 6;",
            "gigachat_response_ru": "SELECT \n    a.AccountNumber,\n    COUNT(t.TransactionID) AS NumberOfCompletedTransactions,\n    AVG(t.Amount) AS AverageTransactionAmount,\n    SUM(t.Amount) AS TotalTransactionVolume\nFROM \n    Accounts a\nJOIN \n    Transactions t ON a.AccountID = t.AccountID\nWHERE \n    a.Status = 'Active' \n    AND a.Currency = 'RUB'\n    AND t.Status = 'Завершено'\nGROUP BY \n    a.AccountNumber\nORDER BY \n    TotalTransactionVolume DESC, AverageTransactionAmount DESC\nLIMIT 6;"
        },
        {
            "question": "Какие 10 клиентов с активными кредитами имеют наибольшее количество активных вкладов и каков общий объем операций по этим вкладам?",
            "sql_query": "SELECT c.FirstName, c.LastName, (SELECT COUNT(*) FROM Deposits d WHERE d.CustomerID = c.CustomerID AND d.Status = 'Активен') AS ActiveDeposits, (SELECT SUM(dt.Amount) FROM DepositTransactions dt WHERE dt.DepositID IN (SELECT d.DepositID FROM Deposits d WHERE d.CustomerID = c.CustomerID) AND dt.Status = 'Завершено') AS TotalDepositTransactions FROM Customers c WHERE c.CustomerID IN (SELECT DISTINCT CustomerID FROM Loans WHERE Status = 'Активно') ORDER BY ActiveDeposits DESC LIMIT 10;",
            "gpt-4o_response": "SELECT c.FirstName, c.LastName, COUNT(d.DepositID) AS ActiveDepositsCount, \n       COALESCE(SUM(dt.Amount), 0) AS TotalDepositTransactionAmount\nFROM Customers c\nJOIN Loans l ON c.CustomerID = l.CustomerID\nJOIN Deposits d ON c.CustomerID = d.CustomerID\nLEFT JOIN DepositTransactions dt ON d.DepositID = dt.DepositID AND dt.Status = 'Завершено'\nWHERE l.Status = 'Активно' AND d.Status = 'Активен'\nGROUP BY c.FirstName, c.LastName\nORDER BY ActiveDepositsCount DESC, TotalDepositTransactionAmount DESC\nLIMIT 10;",
            "gpt-4o_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    COUNT(d.DepositID) AS ActiveDepositsCount,\n    COALESCE(SUM(dt.Amount), 0) AS TotalDepositTransactionAmount\nFROM \n    Customers c\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID\nLEFT JOIN \n    DepositTransactions dt ON d.DepositID = dt.DepositID AND dt.Status = 'Завершено'\nWHERE \n    l.Status = 'Активно' AND d.Status = 'Активен'\nGROUP BY \n    c.CustomerID, c.FirstName, c.LastName\nORDER BY \n    ActiveDepositsCount DESC, TotalDepositTransactionAmount DESC\nLIMIT 10;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    c.FirstName,\n    c.LastName,\n    COUNT(DISTINCT d.DepositID) AS ActiveDepositsCount,\n    SUM(dt.Amount) AS TotalDepositTransactionAmount\nFROM Customers c\nJOIN Loans l ON c.CustomerID = l.CustomerID\nJOIN Deposits d ON c.CustomerID = d.CustomerID\nLEFT JOIN DepositTransactions dt ON d.DepositID = dt.DepositID\nWHERE l.Status = 'Активно' AND d.Status = 'Активен'\nGROUP BY c.CustomerID, c.FirstName, c.LastName\nORDER BY ActiveDepositsCount DESC\nLIMIT 10;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    c.FirstName,\n    c.LastName,\n    COUNT(DISTINCT d.DepositID) AS ActiveDepositsCount,\n    SUM(dt.Amount) AS TotalDepositTransactionsAmount\nFROM Customers c\nJOIN Loans l ON c.CustomerID = l.CustomerID\nJOIN Deposits d ON c.CustomerID = d.CustomerID\nLEFT JOIN DepositTransactions dt ON d.DepositID = dt.DepositID\nWHERE l.Status = 'Активно' AND d.Status = 'Активен'\nGROUP BY c.CustomerID, c.FirstName, c.LastName\nORDER BY ActiveDepositsCount DESC\nLIMIT 10;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    c.FirstName, \n    c.LastName, \n    COUNT(d.DepositID) AS ActiveDeposits, \n    SUM(dt.Amount) AS TotalDepositTransactionAmount\nFROM \n    Customers c\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID\nJOIN \n    DepositTransactions dt ON d.DepositID = dt.DepositID\nWHERE \n    l.Status = 'Активно' AND \n    d.Status = 'Активен' AND \n    dt.Status = 'Завершено'\nGROUP BY \n    c.FirstName, \n    c.LastName\nORDER BY \n    ActiveDeposits DESC, \n    TotalDepositTransactionAmount DESC\nLIMIT 10;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    COUNT(d.DepositID) AS TotalActiveDeposits, \n    SUM(dt.Amount) AS TotalDepositTransactionAmount\nFROM \n    Customers c\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID\nJOIN \n    DepositTransactions dt ON d.DepositID = dt.DepositID\nWHERE \n    l.Status = 'Активно' AND d.Status = 'Активен' AND dt.Status = 'Завершено'\nGROUP BY \n    c.FirstName, c.LastName\nORDER BY \n    TotalActiveDeposits DESC, TotalDepositTransactionAmount DESC\nLIMIT 10;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    c.CustomerID,\n    c.FirstName,\n    c.LastName,\n    COUNT(d.DepositID) AS ActiveDepositsCount,\n    SUM(dt.Amount) AS TotalDepositTransactionsAmount\nFROM \n    Customers c\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\nJOIN \n    DepositTransactions dt ON d.DepositID = dt.DepositID AND dt.Status = 'Завершено'\nGROUP BY \n    c.CustomerID, c.FirstName, c.LastName\nORDER BY \n    ActiveDepositsCount DESC, TotalDepositTransactionsAmount DESC\nLIMIT 10;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    c.CustomerID,\n    c.FirstName,\n    c.LastName,\n    COUNT(d.DepositID) AS ActiveDepositsCount,\n    SUM(dt.Amount) AS TotalDepositTransactionsAmount\nFROM \n    Customers c\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\nJOIN \n    DepositTransactions dt ON d.DepositID = dt.DepositID AND dt.Status = 'Завершено'\nGROUP BY \n    c.CustomerID, c.FirstName, c.LastName\nORDER BY \n    ActiveDepositsCount DESC, TotalDepositTransactionsAmount DESC\nLIMIT 10;",
            "gigachat_response": "SELECT TOP 10\n    c.FirstName + ' ' + c.LastName AS FullName,\n    COUNT(d.DepositID) AS NumberOfDeposits,\n    SUM(dt.Amount) AS TotalDepositOperations\nFROM\n    Customers c\nINNER JOIN\n    Loans l ON c.CustomerID = l.CustomerID\nINNER JOIN\n    Deposits d ON c.CustomerID = d.CustomerID\nINNER JOIN\n    DepositTransactions dt ON d.DepositID = dt.DepositID\nWHERE\n    l.Status = 'Активно' AND d.Status = 'Активен' AND dt.Status = 'Завершено'\nGROUP BY\n    c.FirstName, c.LastName\nORDER BY\n    NumberOfDeposits DESC, TotalDepositOperations DESC;",
            "gigachat_response_ru": "SELECT TOP 10 \n    c.FirstName + ' ' + c.LastName AS FullName,\n    COUNT(d.DepositID) AS NumberOfDeposits,\n    SUM(dt.Amount) AS TotalDepositOperations\nFROM \n    Customers c\nINNER JOIN \n    Loans l ON c.CustomerID = l.CustomerID\nINNER JOIN \n    Deposits d ON c.CustomerID = d.CustomerID\nINNER JOIN \n    DepositTransactions dt ON d.DepositID = dt.DepositID\nWHERE \n    l.Status = 'Активно' AND d.Status = 'Активен' AND dt.Status = 'Завершено'\nGROUP BY \n    c.FirstName, c.LastName\nORDER BY \n    NumberOfDeposits DESC, TotalDepositOperations DESC;"
        },
        {
            "question": "Какие 8 филиалов банка с активными банкоматами имеют наибольший объем транзакций и сколько аналитиков в этих отделениях?",
            "sql_query": "SELECT b.BranchName, (SELECT COUNT(*) FROM Employees e WHERE e.BranchID = b.BranchID AND e.Position = 'Аналитик') AS TotalAnalysts, (SELECT SUM(t.Amount) FROM Transactions t WHERE t.AccountID IN (SELECT a.AccountID FROM Accounts a WHERE a.CustomerID IN (SELECT e.EmployeeID FROM Employees e WHERE e.BranchID = b.BranchID)) AND t.Status = 'Завершено') AS TotalBranchTransactions FROM Branches b WHERE b.BranchID IN (SELECT DISTINCT BranchID FROM ATMs WHERE Status = 'Active') ORDER BY TotalBranchTransactions DESC LIMIT 8;",
            "gpt-4o_response": "SELECT b.BranchName, \n       SUM(t.Amount) AS TotalTransactionAmount, \n       (SELECT COUNT(*) \n        FROM Employees e \n        WHERE e.BranchID = b.BranchID AND e.Position = 'Аналитик') AS TotalAnalysts\nFROM Branches b\nJOIN ATMs a ON b.BranchID = a.BranchID\nJOIN Accounts acc ON acc.AccountID IN (SELECT t.AccountID FROM Transactions t WHERE t.Status = 'Завершено')\nJOIN Transactions t ON acc.AccountID = t.AccountID\nWHERE a.Status = 'Active'\nGROUP BY b.BranchName\nORDER BY TotalTransactionAmount DESC\nLIMIT 8;",
            "gpt-4o_response_ru": "SELECT b.BranchName, \n       SUM(t.Amount) AS TotalTransactionAmount, \n       COUNT(DISTINCT e.EmployeeID) FILTER (WHERE e.Position = 'Аналитик') AS TotalAnalysts\nFROM Branches b\nJOIN ATMs a ON b.BranchID = a.BranchID\nJOIN Accounts acc ON acc.CustomerID IN (\n    SELECT CustomerID \n    FROM Customers \n    WHERE CustomerID IN (\n        SELECT CustomerID \n        FROM Accounts \n        WHERE AccountID IN (\n            SELECT AccountID \n            FROM Transactions \n            WHERE Status = 'Завершено'\n        )\n    )\n)\nJOIN Transactions t ON acc.AccountID = t.AccountID\nJOIN Employees e ON b.BranchID = e.BranchID\nWHERE a.Status = 'Active'\nGROUP BY b.BranchName\nORDER BY TotalTransactionAmount DESC\nLIMIT 8;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    b.BranchName,\n    SUM(t.Amount) AS TotalTransactionAmount,\n    (SELECT COUNT(*) FROM Employees e WHERE e.BranchID = b.BranchID AND e.Position = 'Аналитик') AS NumberOfAnalysts\nFROM\n    Branches b\nJOIN\n    ATMs atm ON b.BranchID = atm.BranchID\nJOIN\n    Accounts a ON b.BranchID = (SELECT BranchID FROM Employees WHERE EmployeeID = a.CustomerID LIMIT 1)\nJOIN\n    Transactions t ON a.AccountID = t.AccountID\nWHERE\n    atm.Status = 'Active'\nGROUP BY\n    b.BranchName\nORDER BY\n    TotalTransactionAmount DESC\nLIMIT 8;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    b.BranchName,\n    COUNT(DISTINCT e.EmployeeID) AS NumberOfAnalysts,\n    SUM(t.Amount) AS TotalTransactionAmount\nFROM Branches b\nJOIN ATMs atm ON b.BranchID = atm.BranchID\nJOIN Accounts a ON b.BranchID = (\n    SELECT e.BranchID\n    FROM Employees e\n    WHERE e.EmployeeID = a.CustomerID\n    LIMIT 1\n)\nJOIN Transactions t ON a.AccountID = t.AccountID\nLEFT JOIN Employees e ON b.BranchID = e.BranchID AND e.Position = 'Аналитик'\nWHERE atm.Status = 'Active'\nGROUP BY b.BranchName\nORDER BY TotalTransactionAmount DESC\nLIMIT 8;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    b.BranchName, \n    SUM(t.Amount) AS TotalTransactionAmount, \n    COUNT(e.EmployeeID) AS TotalAnalysts\nFROM \n    Branches b\nJOIN \n    ATMs a ON b.BranchID = a.BranchID\nJOIN \n    Accounts ac ON b.BranchID = ac.BranchID\nJOIN \n    Transactions t ON ac.AccountID = t.AccountID\nJOIN \n    Employees e ON b.BranchID = e.BranchID AND e.Position = 'Аналитик'\nWHERE \n    a.Status = 'Active' AND t.Status = 'Завершено'\nGROUP BY \n    b.BranchName\nORDER BY \n    TotalTransactionAmount DESC\nLIMIT 8;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    b.BranchName, \n    SUM(t.Amount) AS TotalTransactionAmount, \n    COUNT(e.EmployeeID) AS NumberOfAnalysts\nFROM \n    Branches b\nJOIN \n    ATMs a ON b.BranchID = a.BranchID\nJOIN \n    Accounts ac ON a.ATMID = ac.AccountID\nJOIN \n    Transactions t ON ac.AccountID = t.AccountID\nJOIN \n    Employees e ON b.BranchID = e.BranchID AND e.Position = 'Аналитик'\nWHERE \n    a.Status = 'Active' AND t.Status = 'Завершено'\nGROUP BY \n    b.BranchName\nORDER BY \n    TotalTransactionAmount DESC\nLIMIT 8;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT b.BranchName, \n       SUM(t.Amount) AS TotalTransactionAmount,\n       (SELECT COUNT(*) \n        FROM Employees e \n        WHERE e.BranchID = b.BranchID \n        AND e.Position = 'Аналитик') AS AnalystCount\nFROM Branches b\nJOIN ATMs a ON b.BranchID = a.BranchID\nJOIN Accounts ac ON b.BranchID = ac.AccountID\nJOIN Transactions t ON ac.AccountID = t.AccountID\nWHERE a.Status = 'Active'\nAND t.Status = 'Завершено'\nGROUP BY b.BranchID, b.BranchName\nORDER BY TotalTransactionAmount DESC\nLIMIT 8;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    b.BranchID,\n    b.BranchName,\n    SUM(t.Amount) AS TotalTransactionAmount,\n    COUNT(DISTINCT e.EmployeeID) AS AnalystCount\nFROM \n    Branches b\nJOIN \n    ATMs a ON b.BranchID = a.BranchID\nJOIN \n    Employees e ON b.BranchID = e.BranchID\nJOIN \n    Accounts ac ON e.EmployeeID = ac.CustomerID\nJOIN \n    Transactions t ON ac.AccountID = t.AccountID\nWHERE \n    a.Status = 'Active'\n    AND e.Position = 'Аналитик'\n    AND t.Status = 'Завершено'\nGROUP BY \n    b.BranchID, b.BranchName\nORDER BY \n    TotalTransactionAmount DESC\nLIMIT 8;",
            "gigachat_response": "WITH BranchActivity AS (\n    -- Calculate total transaction amount per branch based on active ATMs\n    SELECT \n        b.BranchID,\n        b.BranchName,\n        COALESCE(SUM(t.Amount), 0) AS TotalTransactionAmount\n    FROM \n        Branches b\n    LEFT JOIN \n        ATMs a ON b.BranchID = a.BranchID AND a.Status = 'Active'\n    LEFT JOIN \n        Transactions t ON a.ATMID = t.TransactionID\n    GROUP BY \n        b.BranchID, b.BranchName\n),\nAnalystCount AS (\n    -- Count analysts per branch\n    SELECT \n        e.BranchID,\n        COUNT(e.EmployeeID) AS AnalystsCount\n    FROM \n        Employees e\n    WHERE \n        e.Position = 'Аналитик'\n    GROUP BY \n        e.BranchID\n)\n-- Final result set: top branches by transactions + analyst count\nSELECT \n    ba.BranchName,\n    ba.TotalTransactionAmount,\n    ac.AnalystsCount\nFROM \n    BranchActivity ba\nLEFT JOIN \n    AnalystCount ac ON ba.BranchID = ac.BranchID\nORDER BY \n    ba.TotalTransactionAmount DESC\nLIMIT 8;",
            "gigachat_response_ru": "WITH ActiveBranchesWithATMs AS (\n    SELECT DISTINCT b.BranchID, b.BranchName\n    FROM Branches b\n    INNER JOIN ATMs a ON b.BranchID = a.BranchID\n    WHERE a.Status = 'Active'\n), \nTotalTransactionsPerBranch AS (\n    SELECT abwa.BranchID, SUM(t.Amount) AS TotalTransactionVolume\n    FROM ActiveBranchesWithATMs abwa\n    LEFT JOIN Employees e ON abwa.BranchID = e.BranchID\n    LEFT JOIN Accounts acc ON e.EmployeeID = acc.CustomerID\n    LEFT JOIN Transactions t ON acc.AccountID = t.AccountID\n    GROUP BY abwa.BranchID\n), \nAnalystsCountPerBranch AS (\n    SELECT BranchID, COUNT(EmployeeID) AS AnalystCount\n    FROM Employees\n    WHERE Position = 'Аналитик'\n    GROUP BY BranchID\n)\nSELECT tbpb.BranchName, tbpb.TotalTransactionVolume, acpb.AnalystCount\nFROM TotalTransactionsPerBranch tbpb\nINNER JOIN AnalystsCountPerBranch acpb ON tbpb.BranchID = acpb.BranchID\nORDER BY tbpb.TotalTransactionVolume DESC\nLIMIT 8;"
        },
        {
            "question": "Какие 5 кредитных специалистов имеют наибольшую общую стоимость управляемых услуг? Выведите имя и фамилию сотрудника, количество управляемых услуг и их общую стоимость.",
            "sql_query": "SELECT e.FirstName, e.LastName, (SELECT COUNT(*) FROM CustomerServices cs WHERE cs.CustomerID = e.EmployeeID AND cs.Status = 'активен') AS ManagedServices, (SELECT SUM(s.Fee) FROM Services s WHERE s.ServiceID IN (SELECT cs.ServiceID FROM CustomerServices cs WHERE cs.CustomerID = e.EmployeeID) AND s.Status = 'Активен') AS TotalServiceFee FROM Employees e WHERE e.Position = 'Кредитный специалист' ORDER BY TotalServiceFee DESC LIMIT 5;",
            "gpt-4o_response": "SELECT e.FirstName, e.LastName, COUNT(cs.CustomerServiceID) AS TotalServices, SUM(s.Fee) AS TotalServiceValue\nFROM Employees e\nJOIN Branches b ON e.BranchID = b.BranchID\nJOIN CustomerServices cs ON e.EmployeeID = cs.CustomerID\nJOIN Services s ON cs.ServiceID = s.ServiceID\nWHERE e.Position = 'Кредитный специалист' AND cs.Status = 'активен'\nGROUP BY e.FirstName, e.LastName\nORDER BY TotalServiceValue DESC\nLIMIT 5;",
            "gpt-4o_response_ru": "SELECT e.FirstName, e.LastName, COUNT(cs.CustomerServiceID) AS ServiceCount, SUM(s.Fee) AS TotalServiceValue\nFROM Employees e\nJOIN Branches b ON e.BranchID = b.BranchID\nJOIN Customers c ON b.BranchID = c.CustomerID\nJOIN CustomerServices cs ON c.CustomerID = cs.CustomerID\nJOIN Services s ON cs.ServiceID = s.ServiceID\nWHERE e.Position = 'Кредитный специалист' AND cs.Status = 'активен'\nGROUP BY e.FirstName, e.LastName\nORDER BY TotalServiceValue DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    e.FirstName,\n    e.LastName,\n    COUNT(cs.CustomerServiceID) AS TotalServices,\n    SUM(s.Fee) AS TotalFee\nFROM\n    Employees e\nJOIN\n    Branches b ON e.BranchID = b.BranchID\nJOIN\n    Customers c ON e.EmployeeID = c.CustomerID\nJOIN\n    CustomerServices cs ON c.CustomerID = cs.CustomerID\nJOIN\n    Services s ON cs.ServiceID = s.ServiceID\nGROUP BY\n    e.FirstName,\n    e.LastName\nORDER BY\n    TotalFee DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    e.FirstName,\n    e.LastName,\n    COUNT(cs.CustomerServiceID) AS TotalServicesManaged,\n    SUM(s.Fee) AS TotalServicesFee\nFROM Employees e\nJOIN CustomerServices cs ON e.EmployeeID = cs.CustomerID\nJOIN Services s ON cs.ServiceID = s.ServiceID\nWHERE e.Position = 'Кредитный специалист'\nGROUP BY e.EmployeeID, e.FirstName, e.LastName\nORDER BY TotalServicesFee DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    e.FirstName, \n    e.LastName, \n    COUNT(cs.CustomerServiceID) AS ManagedServices, \n    SUM(s.Fee) AS TotalServiceCost\nFROM \n    Employees e\nJOIN \n    CustomerServices cs ON e.EmployeeID = cs.CustomerID\nJOIN \n    Services s ON cs.ServiceID = s.ServiceID\nWHERE \n    e.Position = 'Кредитный специалист'\nGROUP BY \n    e.FirstName, \n    e.LastName\nORDER BY \n    TotalServiceCost DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    e.FirstName, \n    e.LastName, \n    COUNT(cs.CustomerServiceID) AS TotalServices, \n    SUM(s.Fee) AS TotalServiceCost\nFROM \n    Employees e\nJOIN \n    CustomerServices cs ON e.EmployeeID = cs.CustomerID\nJOIN \n    Services s ON cs.ServiceID = s.ServiceID\nWHERE \n    e.Position = 'Кредитный специалист'\nGROUP BY \n    e.FirstName, \n    e.LastName\nORDER BY \n    TotalServiceCost DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT e.FirstName, e.LastName, COUNT(cs.CustomerServiceID) AS TotalServices, SUM(s.Fee) AS TotalFee \nFROM Employees e \nJOIN Branches b ON e.BranchID = b.BranchID \nJOIN CustomerServices cs ON e.EmployeeID = cs.CustomerID \nJOIN Services s ON cs.ServiceID = s.ServiceID \nWHERE e.Position = 'Кредитный специалист' AND cs.Status = 'активен' \nGROUP BY e.FirstName, e.LastName \nORDER BY TotalFee DESC \nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT e.FirstName, e.LastName, COUNT(cs.CustomerServiceID) AS ManagedServicesCount, SUM(s.Fee) AS TotalServicesCost\nFROM Employees e\nJOIN CustomerServices cs ON e.EmployeeID = cs.CustomerID\nJOIN Services s ON cs.ServiceID = s.ServiceID\nWHERE e.Position = 'Кредитный специалист' AND cs.Status = 'активен'\nGROUP BY e.FirstName, e.LastName\nORDER BY TotalServicesCost DESC\nLIMIT 5;",
            "gigachat_response": "SELECT \n    e.FirstName, \n    e.LastName, \n    COUNT(DISTINCT cs.ServiceID) AS ManagedServicesCount, \n    SUM(s.Fee) AS TotalManagedServicesFee\nFROM \n    Employees e\nJOIN \n    CustomerServices cs ON e.EmployeeID = cs.CustomerID -- Assuming employees manage services directly linked to customers\nJOIN \n    Services s ON cs.ServiceID = s.ServiceID\nWHERE \n    e.Position = 'Кредитный специалист'\nGROUP BY \n    e.FirstName, e.LastName\nORDER BY \n    TotalManagedServicesFee DESC\nLIMIT 5;",
            "gigachat_response_ru": "SELECT \n    e.FirstName, \n    e.LastName, \n    COUNT(DISTINCT cs.ServiceID) AS ManagedServicesCount, \n    SUM(s.Fee) AS TotalManagedServicesFee\nFROM \n    Employees e\nJOIN \n    CustomerServices cs ON e.EmployeeID = cs.CustomerID -- Предположим, что сотрудник управляет услугами клиента через поле CustomerID\nJOIN \n    Services s ON cs.ServiceID = s.ServiceID\nWHERE \n    e.Position = 'Кредитный специалист'\nGROUP BY \n    e.FirstName, e.LastName\nORDER BY \n    TotalManagedServicesFee DESC\nLIMIT 5;"
        },
        {
            "question": "Какие 9 активных долларовых счетов имеют наибольшую среднюю сумму транзакции? Покажите номер счета, количество завершенных транзакций, среднюю сумму транзакции и общий объем транзакций.",
            "sql_query": "SELECT a.AccountNumber, (SELECT COUNT(*) FROM Transactions t WHERE t.AccountID = a.AccountID AND t.Status = 'Завершено') AS CompletedTransactions, (SELECT AVG(t.Amount) FROM Transactions t WHERE t.AccountID = a.AccountID AND t.Status = 'Завершено') AS AvgTransactionAmount, (SELECT SUM(t.Amount) FROM Transactions t WHERE t.AccountID = a.AccountID AND t.Status = 'Завершено') AS TotalTransactionAmount FROM Accounts a WHERE a.Status = 'Active' AND a.Currency = 'USD' ORDER BY AvgTransactionAmount DESC LIMIT 9;",
            "gpt-4o_response": "SELECT a.AccountNumber, \n       COUNT(t.TransactionID) AS CompletedTransactions, \n       AVG(t.Amount) AS AvgTransactionAmount, \n       SUM(t.Amount) AS TotalTransactionAmount\nFROM Accounts a\nJOIN Transactions t ON a.AccountID = t.AccountID\nWHERE a.Status = 'Active' \n  AND a.Currency = 'USD' \n  AND t.Status = 'Завершено'\nGROUP BY a.AccountNumber\nORDER BY AvgTransactionAmount DESC\nLIMIT 9;",
            "gpt-4o_response_ru": "SELECT a.AccountNumber, \n       COUNT(t.TransactionID) AS CompletedTransactions, \n       AVG(t.Amount) AS AvgTransactionAmount, \n       SUM(t.Amount) AS TotalTransactionAmount\nFROM Accounts a\nJOIN Transactions t ON a.AccountID = t.AccountID\nWHERE a.Status = 'Active' \n  AND a.Currency = 'USD' \n  AND t.Status = 'Завершено'\nGROUP BY a.AccountNumber\nORDER BY AvgTransactionAmount DESC\nLIMIT 9;",
            "google/gemini-2.0-flash-001_response": "SELECT a.AccountNumber,\n       (SELECT COUNT(*)\n        FROM Transactions t\n        WHERE t.AccountID = a.AccountID\n          AND t.Status = 'Завершено') AS CompletedTransactions,\n       (SELECT AVG(t.Amount)\n        FROM Transactions t\n        WHERE t.AccountID = a.AccountID\n          AND t.Status = 'Завершено') AS AvgTransactionAmount,\n       (SELECT SUM(t.Amount)\n        FROM Transactions t\n        WHERE t.AccountID = a.AccountID\n          AND t.Status = 'Завершено') AS TotalTransactionAmount\nFROM Accounts a\nWHERE a.Status = 'Active'\n  AND a.Currency = 'USD'\nORDER BY AvgTransactionAmount DESC\nLIMIT 9;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT \n    a.AccountNumber,\n    COUNT(CASE WHEN t.Status = 'Завершено' THEN t.TransactionID END) AS CompletedTransactions,\n    AVG(t.Amount) AS AvgTransactionAmount,\n    SUM(t.Amount) AS TotalTransactionAmount\nFROM Accounts a\nJOIN Transactions t ON a.AccountID = t.AccountID\nWHERE a.Status = 'Active' AND a.Currency = 'USD'\nGROUP BY a.AccountNumber\nORDER BY AvgTransactionAmount DESC\nLIMIT 9;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    a.AccountNumber, \n    COUNT(t.TransactionID) AS CompletedTransactions, \n    AVG(t.Amount) AS AvgTransactionAmount, \n    SUM(t.Amount) AS TotalTransactionAmount\nFROM \n    Accounts a\nJOIN \n    Transactions t ON a.AccountID = t.AccountID\nWHERE \n    a.Status = 'Active' AND a.Currency = 'USD' AND t.Status = 'Завершено'\nGROUP BY \n    a.AccountNumber\nORDER BY \n    AvgTransactionAmount DESC\nLIMIT 9;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    a.AccountNumber, \n    COUNT(t.TransactionID) AS CompletedTransactions, \n    AVG(t.Amount) AS AvgTransactionAmount, \n    SUM(t.Amount) AS TotalTransactionAmount\nFROM \n    Accounts a\nJOIN \n    Transactions t ON a.AccountID = t.AccountID\nWHERE \n    a.Status = 'Active' AND a.Currency = 'USD' AND t.Status = 'Завершено'\nGROUP BY \n    a.AccountNumber\nORDER BY \n    AvgTransactionAmount DESC\nLIMIT 9;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT a.AccountNumber, \n       COUNT(t.TransactionID) AS CompletedTransactions, \n       AVG(t.Amount) AS AvgTransactionAmount, \n       SUM(t.Amount) AS TotalTransactionAmount \nFROM Accounts a \nJOIN Transactions t ON a.AccountID = t.AccountID \nWHERE a.Status = 'Active' \n  AND a.Currency = 'USD' \n  AND t.Status = 'Завершено' \nGROUP BY a.AccountNumber \nORDER BY AvgTransactionAmount DESC \nLIMIT 9;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT a.AccountNumber, \n       COUNT(t.TransactionID) AS CompletedTransactions, \n       AVG(t.Amount) AS AvgTransactionAmount, \n       SUM(t.Amount) AS TotalTransactionAmount \nFROM Accounts a \nJOIN Transactions t ON a.AccountID = t.AccountID \nWHERE a.Status = 'Active' \n  AND a.Currency = 'USD' \n  AND t.Status = 'Завершено' \nGROUP BY a.AccountNumber \nORDER BY AvgTransactionAmount DESC \nLIMIT 9;",
            "gigachat_response": "SELECT \n    a.AccountNumber,\n    COUNT(t.TransactionID) AS NumberOfCompletedTransactions,\n    AVG(t.Amount) AS AverageTransactionAmount,\n    SUM(t.Amount) AS TotalTransactionVolume\nFROM \n    Accounts a\nJOIN \n    Transactions t ON a.AccountID = t.AccountID\nWHERE \n    a.Status = 'Active' \n    AND a.Currency = 'USD' \n    AND t.Status = 'Завершено'\nGROUP BY \n    a.AccountNumber\nORDER BY \n    AverageTransactionAmount DESC\nLIMIT 9;",
            "gigachat_response_ru": "SELECT \n    a.AccountNumber,\n    COUNT(t.TransactionID) AS NumberOfCompletedTransactions,\n    AVG(t.Amount) AS AverageTransactionAmount,\n    SUM(t.Amount) AS TotalTransactionVolume\nFROM \n    Accounts a\nJOIN \n    Transactions t ON a.AccountID = t.AccountID\nWHERE \n    a.Status = 'Active' \n    AND a.Currency = 'USD' \n    AND t.Status = 'Завершено'\nGROUP BY \n    a.AccountNumber\nORDER BY \n    AverageTransactionAmount DESC\nLIMIT 9;"
        },
        {
            "question": "Какие 6 клиентов с активными счетами имеют наибольшую среднюю сумму страховых выплат и сколько у них активных страховых полисов?",
            "sql_query": "SELECT c.FirstName, c.LastName, (SELECT COUNT(*) FROM InsurancePolicies ip WHERE ip.CustomerID = c.CustomerID AND ip.Status = 'Активен') AS ActivePolicies, (SELECT AVG(pc.ClaimAmount) FROM PolicyClaims pc WHERE pc.PolicyID IN (SELECT ip.PolicyID FROM InsurancePolicies ip WHERE ip.CustomerID = c.CustomerID) AND pc.Status = 'Выплачено') AS AvgClaimAmount FROM Customers c WHERE c.CustomerID IN (SELECT DISTINCT CustomerID FROM Accounts WHERE Status = 'Active') ORDER BY AvgClaimAmount DESC LIMIT 6;",
            "gpt-4o_response": "SELECT \n    c.FirstName, \n    c.LastName, \n    AVG(pc.ClaimAmount) AS AvgClaimAmount, \n    COUNT(DISTINCT ip.PolicyID) AS ActiveInsurancePolicies\nFROM \n    Customers c\nJOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nJOIN \n    PolicyClaims pc ON ip.PolicyID = pc.PolicyID\nJOIN \n    Accounts a ON c.CustomerID = a.CustomerID\nWHERE \n    ip.Status = 'Активен' \n    AND a.Status = 'Active'\nGROUP BY \n    c.FirstName, c.LastName\nORDER BY \n    AvgClaimAmount DESC\nLIMIT 6;",
            "gpt-4o_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    COUNT(DISTINCT ip.PolicyID) AS ActiveInsurancePolicies,\n    AVG(pc.ClaimAmount) AS AvgClaimAmount\nFROM \n    Customers c\nJOIN \n    Accounts a ON c.CustomerID = a.CustomerID\nJOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nJOIN \n    PolicyClaims pc ON ip.PolicyID = pc.PolicyID\nWHERE \n    a.Status = 'Active' \n    AND ip.Status = 'Активен'\nGROUP BY \n    c.FirstName, c.LastName\nORDER BY \n    AvgClaimAmount DESC\nLIMIT 6;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    c.FirstName,\n    c.LastName,\n    AVG(pc.ClaimAmount) AS AverageClaimAmount,\n    COUNT(DISTINCT ip.PolicyID) AS ActivePolicyCount\nFROM\n    Customers c\nJOIN\n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nJOIN\n    PolicyClaims pc ON ip.PolicyID = pc.PolicyID\nJOIN\n    Accounts a ON c.CustomerID = a.CustomerID\nWHERE\n    a.Status = 'Active' AND ip.Status = 'Активен'\nGROUP BY\n    c.CustomerID, c.FirstName, c.LastName\nORDER BY\n    AverageClaimAmount DESC\nLIMIT 6;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    c.FirstName,\n    c.LastName,\n    AVG(pc.ClaimAmount) AS AverageClaimAmount,\n    COUNT(ip.PolicyID) AS ActivePolicyCount\nFROM\n    Customers c\nJOIN\n    Accounts a ON c.CustomerID = a.CustomerID\nJOIN\n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nJOIN\n    PolicyClaims pc ON ip.PolicyID = pc.PolicyID\nWHERE\n    a.Status = 'Active' AND ip.Status = 'Активен'\nGROUP BY\n    c.CustomerID, c.FirstName, c.LastName\nORDER BY\n    AverageClaimAmount DESC\nLIMIT 6;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    c.FirstName, \n    c.LastName, \n    AVG(pc.ClaimAmount) AS AvgClaimAmount, \n    COUNT(DISTINCT ip.PolicyID) AS ActivePoliciesCount\nFROM \n    Customers c\nJOIN \n    Accounts a ON c.CustomerID = a.CustomerID\nJOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nJOIN \n    PolicyClaims pc ON ip.PolicyID = pc.PolicyID\nWHERE \n    a.Status = 'Active' AND ip.Status = 'Активен'\nGROUP BY \n    c.FirstName, \n    c.LastName\nORDER BY \n    AvgClaimAmount DESC\nLIMIT 6;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    AVG(pc.ClaimAmount) AS AvgClaimAmount,\n    COUNT(ip.PolicyID) AS ActivePoliciesCount\nFROM \n    Customers c\nJOIN \n    Accounts a ON c.CustomerID = a.CustomerID\nJOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nJOIN \n    PolicyClaims pc ON ip.PolicyID = pc.PolicyID\nWHERE \n    a.Status = 'Active' AND ip.Status = 'Активен'\nGROUP BY \n    c.FirstName, c.LastName\nORDER BY \n    AvgClaimAmount DESC\nLIMIT 6;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    c.CustomerID,\n    c.FirstName,\n    c.LastName,\n    AVG(pc.ClaimAmount) AS AvgClaimAmount,\n    COUNT(ip.PolicyID) AS ActivePolicies\nFROM \n    Customers c\nJOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID AND ip.Status = 'Активен'\nJOIN \n    PolicyClaims pc ON ip.PolicyID = pc.PolicyID\nJOIN \n    Accounts a ON c.CustomerID = a.CustomerID AND a.Status = 'Active'\nGROUP BY \n    c.CustomerID, c.FirstName, c.LastName\nORDER BY \n    AvgClaimAmount DESC\nLIMIT 6;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    c.CustomerID,\n    c.FirstName,\n    c.LastName,\n    AVG(pc.ClaimAmount) AS AvgClaimAmount,\n    COUNT(DISTINCT ip.PolicyID) AS ActivePoliciesCount\nFROM \n    Customers c\nJOIN \n    Accounts a ON c.CustomerID = a.CustomerID AND a.Status = 'Active'\nJOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID AND ip.Status = 'Активен'\nJOIN \n    PolicyClaims pc ON ip.PolicyID = pc.PolicyID\nGROUP BY \n    c.CustomerID, c.FirstName, c.LastName\nORDER BY \n    AvgClaimAmount DESC\nLIMIT 6;",
            "gigachat_response": "SELECT TOP 6\n    c.FirstName + ' ' + c.LastName AS FullName,\n    AVG(pc.ClaimAmount) AS AverageInsurancePayouts,\n    COUNT(ip.PolicyID) AS NumberOfActivePolicies\nFROM\n    Customers c\nINNER JOIN\n    Accounts acc ON c.CustomerID = acc.CustomerID\nINNER JOIN\n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nLEFT JOIN\n    PolicyClaims pc ON ip.PolicyID = pc.PolicyID\nWHERE\n    acc.Status = 'Active' AND ip.Status = 'Активен'\nGROUP BY\n    c.FirstName, c.LastName\nORDER BY\n    AverageInsurancePayouts DESC;",
            "gigachat_response_ru": "SELECT TOP 6\n    c.FirstName + ' ' + c.LastName AS FullName,\n    AVG(pc.ClaimAmount) AS AverageInsurancePayouts,\n    COUNT(ip.PolicyID) AS NumberOfActivePolicies\nFROM\n    Customers c\nINNER JOIN\n    Accounts acc ON c.CustomerID = acc.CustomerID\nINNER JOIN\n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nLEFT JOIN\n    PolicyClaims pc ON ip.PolicyID = pc.PolicyID\nWHERE\n    acc.Status = 'Active' AND ip.Status = 'Активен'\nGROUP BY\n    c.FirstName, c.LastName\nORDER BY\n    AverageInsurancePayouts DESC;"
        },
        {
            "question": "Какие 7 филиалов банка с активными банкоматами имеют наибольшее количество аналитиков и среднюю сумму транзакций?",
            "sql_query": "SELECT b.BranchName, (SELECT COUNT(*) FROM Employees e WHERE e.BranchID = b.BranchID AND e.Position = 'Аналитик') AS TotalAnalysts, (SELECT AVG(t.Amount) FROM Transactions t WHERE t.AccountID IN (SELECT a.AccountID FROM Accounts a WHERE a.CustomerID IN (SELECT e.EmployeeID FROM Employees e WHERE e.BranchID = b.BranchID)) AND t.Status = 'Завершено') AS AvgBranchTransactionAmount FROM Branches b WHERE b.BranchID IN (SELECT DISTINCT BranchID FROM ATMs WHERE Status = 'Active') ORDER BY TotalAnalysts DESC, AvgBranchTransactionAmount DESC LIMIT 7;",
            "gpt-4o_response": "SELECT b.BranchName, \n       COUNT(e.EmployeeID) AS TotalAnalysts, \n       AVG(t.Amount) AS AvgTransactionAmount\nFROM Branches b\nJOIN Employees e ON b.BranchID = e.BranchID\nJOIN ATMs a ON b.BranchID = a.BranchID\nJOIN Accounts acc ON acc.CustomerID = e.EmployeeID\nJOIN Transactions t ON acc.AccountID = t.AccountID\nWHERE a.Status = 'Active' \n  AND e.Position = 'Аналитик'\n  AND t.Status = 'Завершено'\nGROUP BY b.BranchName\nORDER BY TotalAnalysts DESC, AvgTransactionAmount DESC\nLIMIT 7;",
            "gpt-4o_response_ru": "SELECT b.BranchName, \n       COUNT(e.EmployeeID) AS AnalystCount, \n       AVG(t.Amount) AS AvgTransactionAmount\nFROM Branches b\nJOIN ATMs a ON b.BranchID = a.BranchID\nJOIN Employees e ON b.BranchID = e.BranchID\nJOIN Accounts acc ON acc.CustomerID = e.EmployeeID\nJOIN Transactions t ON acc.AccountID = t.AccountID\nWHERE a.Status = 'Active' \n  AND e.Position = 'Аналитик'\n  AND t.Status = 'Завершено'\nGROUP BY b.BranchName\nORDER BY AnalystCount DESC, AvgTransactionAmount DESC\nLIMIT 7;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    b.BranchName,\n    COUNT(DISTINCT e.EmployeeID) AS NumberOfAnalysts,\n    AVG(t.Amount) AS AverageTransactionAmount\nFROM\n    Branches b\nJOIN\n    ATMs a ON b.BranchID = a.BranchID\nJOIN\n    Employees e ON b.BranchID = e.BranchID\nLEFT JOIN\n    Accounts acc ON acc.CustomerID = e.EmployeeID  \nLEFT JOIN\n    Transactions t ON acc.AccountID = t.AccountID\nWHERE\n    a.Status = 'Active' AND e.Position = 'Аналитик'\nGROUP BY\n    b.BranchName\nORDER BY\n    NumberOfAnalysts DESC, AverageTransactionAmount DESC\nLIMIT 7;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    b.BranchName,\n    COUNT(DISTINCT e.EmployeeID) AS NumberOfAnalysts,\n    AVG(t.Amount) AS AverageTransactionAmount,\n    SUM(t.Amount) AS TotalTransactionAmount\nFROM\n    Branches b\nJOIN\n    Employees e ON b.BranchID = e.BranchID\nJOIN\n    ATMs atm ON b.BranchID = atm.BranchID\nLEFT JOIN\n    Accounts a ON b.BranchID = e.BranchID  -- Предполагаем, что сотрудники могут быть связаны с аккаунтами через филиал\nLEFT JOIN\n    Transactions t ON a.AccountID = t.AccountID\nWHERE\n    e.Position = 'Аналитик' AND atm.Status = 'Active'\nGROUP BY\n    b.BranchName\nORDER BY\n    NumberOfAnalysts DESC, AverageTransactionAmount DESC\nLIMIT 7;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    b.BranchName, \n    COUNT(e.EmployeeID) AS TotalAnalysts, \n    AVG(t.Amount) AS AvgTransactionAmount\nFROM \n    Branches b\nJOIN \n    ATMs a ON b.BranchID = a.BranchID\nJOIN \n    Employees e ON b.BranchID = e.BranchID\nJOIN \n    Accounts ac ON e.EmployeeID = ac.CustomerID\nJOIN \n    Transactions t ON ac.AccountID = t.AccountID\nWHERE \n    a.Status = 'Active' \n    AND e.Position = 'Аналитик'\nGROUP BY \n    b.BranchName\nORDER BY \n    TotalAnalysts DESC, \n    AvgTransactionAmount DESC\nLIMIT 7;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    b.BranchName, \n    COUNT(e.EmployeeID) AS TotalAnalysts, \n    AVG(t.Amount) AS AverageTransactionAmount\nFROM \n    Branches b\nJOIN \n    Employees e ON b.BranchID = e.BranchID\nJOIN \n    Accounts a ON e.BranchID = (SELECT BranchID FROM ATMs WHERE ATMID = (SELECT ATMID FROM Transactions WHERE AccountID = a.AccountID))\nJOIN \n    Transactions t ON a.AccountID = t.AccountID\nWHERE \n    e.Position = 'Аналитик' \n    AND b.BranchID IN (SELECT BranchID FROM ATMs WHERE Status = 'Active')\nGROUP BY \n    b.BranchName\nORDER BY \n    TotalAnalysts DESC, \n    AverageTransactionAmount DESC\nLIMIT 7;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    b.BranchName,\n    COUNT(DISTINCT e.EmployeeID) AS AnalystCount,\n    AVG(t.Amount) AS AvgTransactionAmount\nFROM \n    Branches b\nJOIN \n    ATMs a ON b.BranchID = a.BranchID\nJOIN \n    Employees e ON b.BranchID = e.BranchID AND e.Position = 'Аналитик'\nJOIN \n    Accounts ac ON e.EmployeeID = ac.CustomerID\nJOIN \n    Transactions t ON ac.AccountID = t.AccountID AND t.Status = 'Завершено'\nWHERE \n    a.Status = 'Active'\nGROUP BY \n    b.BranchName\nORDER BY \n    AnalystCount DESC,\n    AvgTransactionAmount DESC\nLIMIT 7;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    b.BranchName,\n    COUNT(DISTINCT e.EmployeeID) AS AnalystCount,\n    AVG(t.Amount) AS AvgTransactionAmount\nFROM \n    Branches b\nJOIN \n    ATMs a ON b.BranchID = a.BranchID\nJOIN \n    Employees e ON b.BranchID = e.BranchID\nJOIN \n    Accounts ac ON e.EmployeeID = ac.CustomerID\nJOIN \n    Transactions t ON ac.AccountID = t.AccountID\nWHERE \n    a.Status = 'Active'\n    AND e.Position = 'Аналитик'\n    AND t.Status = 'Завершено'\nGROUP BY \n    b.BranchName\nORDER BY \n    AnalystCount DESC, \n    AvgTransactionAmount DESC\nLIMIT 7;",
            "gigachat_response": "SELECT TOP 7 \n       b.BranchName,\n       COUNT(e.EmployeeID) AS AnalystCount,\n       AVG(t.Amount) AS AverageTransactionAmount\nFROM Branches b\nINNER JOIN Employees e ON b.BranchID = e.BranchID\nINNER JOIN ATMs a ON b.BranchID = a.BranchID\nINNER JOIN Transactions t ON b.BranchID = (SELECT BranchID FROM Accounts ac WHERE ac.AccountID = t.AccountID)\nWHERE e.Position = 'Аналитик' AND a.Status = 'Active'\nGROUP BY b.BranchName\nORDER BY AnalystCount DESC, AverageTransactionAmount DESC;",
            "gigachat_response_ru": "SELECT \n    b.BranchName,\n    COUNT(DISTINCT e.EmployeeID) AS AnalystsCount,\n    AVG(t.Amount) AS AverageTransactionAmount\nFROM \n    Branches b\nJOIN \n    Employees e ON b.BranchID = e.BranchID\nJOIN \n    ATMs a ON b.BranchID = a.BranchID\nJOIN \n    Transactions t ON b.BranchID = (SELECT BranchID FROM Employees WHERE EmployeeID = t.AccountID)\nWHERE \n    e.Position = 'Аналитик' \n    AND a.Status = 'Active'\nGROUP BY \n    b.BranchName\nORDER BY \n    AnalystsCount DESC, AverageTransactionAmount DESC\nLIMIT 7;"
        },
        {
            "question": "Какие 6 кассиров имеют наибольшую общую стоимость управляемых услуг? Выведите также количество управляемых услуг.",
            "sql_query": "SELECT e.FirstName, e.LastName, (SELECT COUNT(*) FROM CustomerServices cs WHERE cs.CustomerID = e.EmployeeID AND cs.Status = 'активен') AS ManagedServices, (SELECT SUM(s.Fee) FROM Services s WHERE s.ServiceID IN (SELECT cs.ServiceID FROM CustomerServices cs WHERE cs.CustomerID = e.EmployeeID) AND s.Status = 'Активен') AS TotalServiceFee FROM Employees e WHERE e.Position = 'Кассир' ORDER BY TotalServiceFee DESC LIMIT 6;",
            "gpt-4o_response": "SELECT e.FirstName, e.LastName, COUNT(cs.CustomerServiceID) AS ManagedServicesCount, SUM(s.Fee) AS TotalServiceValue\nFROM Employees e\nJOIN Branches b ON e.BranchID = b.BranchID\nJOIN Customers c ON b.BranchID = c.CustomerID\nJOIN CustomerServices cs ON c.CustomerID = cs.CustomerID\nJOIN Services s ON cs.ServiceID = s.ServiceID\nWHERE e.Position = 'Кассир' AND cs.Status = 'активен'\nGROUP BY e.FirstName, e.LastName\nORDER BY TotalServiceValue DESC\nLIMIT 6;",
            "gpt-4o_response_ru": "SELECT e.FirstName, e.LastName, COUNT(cs.CustomerServiceID) AS ManagedServicesCount, SUM(s.Fee) AS TotalServiceValue\nFROM Employees e\nJOIN Branches b ON e.BranchID = b.BranchID\nJOIN CustomerServices cs ON cs.CustomerID IN (\n    SELECT c.CustomerID\n    FROM Customers c\n    JOIN Accounts a ON c.CustomerID = a.CustomerID\n    WHERE a.Status = 'Active'\n)\nJOIN Services s ON cs.ServiceID = s.ServiceID\nWHERE e.Position = 'Кассир' AND cs.Status = 'активен'\nGROUP BY e.FirstName, e.LastName\nORDER BY TotalServiceValue DESC\nLIMIT 6;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    e.FirstName,\n    e.LastName,\n    COUNT(cs.CustomerServiceID) AS TotalManagedServices\nFROM Employees e\nJOIN Branches b ON e.BranchID = b.BranchID\nJOIN CustomerServices cs ON e.EmployeeID = cs.CustomerID\nWHERE e.Position = 'Кассир'\nGROUP BY e.EmployeeID, e.FirstName, e.LastName\nORDER BY TotalManagedServices DESC\nLIMIT 6;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    e.FirstName,\n    e.LastName,\n    SUM(s.Fee) AS TotalServicesFee,\n    COUNT(cs.CustomerServiceID) AS NumberOfServices\nFROM\n    Employees e\nJOIN\n    Branches b ON e.BranchID = b.BranchID\nJOIN\n    CustomerServices cs ON e.EmployeeID = cs.CustomerID\nJOIN\n    Services s ON cs.ServiceID = s.ServiceID\nWHERE\n    e.Position = 'Кассир'\nGROUP BY\n    e.EmployeeID, e.FirstName, e.LastName\nORDER BY\n    TotalServicesFee DESC\nLIMIT 6;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT e.FirstName, e.LastName, COUNT(cs.CustomerServiceID) AS TotalServices, SUM(s.Fee) AS TotalServiceCost\nFROM Employees e\nJOIN CustomerServices cs ON e.EmployeeID = cs.CustomerID\nJOIN Services s ON cs.ServiceID = s.ServiceID\nWHERE e.Position = 'Кассир'\nGROUP BY e.FirstName, e.LastName\nORDER BY TotalServiceCost DESC\nLIMIT 6;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    e.FirstName, \n    e.LastName, \n    COUNT(cs.CustomerServiceID) AS TotalServices, \n    SUM(s.Fee) AS TotalServiceCost\nFROM \n    Employees e\nJOIN \n    CustomerServices cs ON e.EmployeeID = cs.CustomerID\nJOIN \n    Services s ON cs.ServiceID = s.ServiceID\nWHERE \n    e.Position = 'Кассир'\nGROUP BY \n    e.FirstName, \n    e.LastName\nORDER BY \n    TotalServiceCost DESC\nLIMIT 6;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT e.FirstName, e.LastName, COUNT(cs.CustomerServiceID) AS ManagedServicesCount, SUM(s.Fee) AS TotalServiceValue\nFROM Employees e\nJOIN CustomerServices cs ON e.EmployeeID = cs.CustomerID\nJOIN Services s ON cs.ServiceID = s.ServiceID\nWHERE e.Position = 'Кассир' AND cs.Status = 'активен'\nGROUP BY e.FirstName, e.LastName\nORDER BY TotalServiceValue DESC\nLIMIT 6;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT e.FirstName, e.LastName, COUNT(cs.CustomerServiceID) AS ManagedServicesCount, SUM(s.Fee) AS TotalServiceValue\nFROM Employees e\nJOIN CustomerServices cs ON e.EmployeeID = cs.CustomerID\nJOIN Services s ON cs.ServiceID = s.ServiceID\nWHERE e.Position = 'Кассир' AND cs.Status = 'активен'\nGROUP BY e.FirstName, e.LastName\nORDER BY TotalServiceValue DESC\nLIMIT 6;",
            "gigachat_response": "SELECT \n    e.FirstName, \n    e.LastName, \n    COUNT(DISTINCT s.ServiceID) AS ManagedServicesCount,\n    SUM(s.Fee) AS TotalManagedServicesFee\nFROM \n    Employees e\nJOIN \n    Services s ON e.EmployeeID = s.ServiceID -- Assuming an employee manages services directly\nGROUP BY \n    e.FirstName, e.LastName\nORDER BY \n    TotalManagedServicesFee DESC\nLIMIT 6;",
            "gigachat_response_ru": "SELECT \n    e.FirstName, \n    e.LastName, \n    COUNT(DISTINCT s.ServiceID) AS ManagedServicesCount,\n    SUM(s.Fee) AS TotalManagedServicesFee\nFROM \n    Employees e\nJOIN \n    Services s ON e.EmployeeID = s.ServiceID -- Предположим связь через ID сотрудника\nGROUP BY \n    e.FirstName, e.LastName\nORDER BY \n    TotalManagedServicesFee DESC\nLIMIT 6;"
        },
        {
            "question": "Какие 7 сотрудников (банкиры, кредитные специалисты и аналитики) имеют наибольший доход от услуг? Мне нужно получить имя, фамилию и должность сотрудника, количество управляемых кредитов, среднюю процентную ставку по кредитам, количество управляемых услуг и общий доход от услуг.",
            "sql_query": "SELECT e.FirstName, e.LastName, e.Position, (SELECT COUNT(*) FROM Loans l WHERE l.CustomerID = e.EmployeeID AND l.Status = 'Активен') AS ManagedLoans, (SELECT AVG(l.InterestRate) FROM Loans l WHERE l.CustomerID = e.EmployeeID AND l.Status = 'Активен') AS AvgLoanInterestRate, (SELECT COUNT(*) FROM CustomerServices cs WHERE cs.CustomerID = e.EmployeeID AND cs.Status = 'Активен') AS ManagedServices, (SELECT SUM(s.Fee) FROM Services s WHERE s.ServiceID IN (SELECT cs.ServiceID FROM CustomerServices cs WHERE cs.CustomerID = e.EmployeeID) AND s.Status = 'Активен') AS TotalServiceRevenue FROM Employees e WHERE e.Position IN ('Банкир', 'Кредитный специалист', 'Аналитик') ORDER BY TotalServiceRevenue DESC LIMIT 7;",
            "gpt-4o_response": "SELECT \n    e.FirstName, \n    e.LastName, \n    e.Position, \n    COUNT(DISTINCT l.LoanID) AS ManagedLoansCount, \n    AVG(l.InterestRate) AS AvgInterestRate, \n    COUNT(DISTINCT cs.CustomerServiceID) AS ManagedServicesCount, \n    SUM(s.Fee) AS TotalServiceIncome\nFROM \n    Employees e\nLEFT JOIN \n    Loans l ON e.EmployeeID = l.CustomerID\nLEFT JOIN \n    CustomerServices cs ON e.EmployeeID = cs.CustomerID\nLEFT JOIN \n    Services s ON cs.ServiceID = s.ServiceID\nWHERE \n    e.Position IN ('Банкир', 'Кредитный специалист', 'Аналитик')\nGROUP BY \n    e.FirstName, e.LastName, e.Position\nORDER BY \n    TotalServiceIncome DESC\nLIMIT 7;",
            "gpt-4o_response_ru": "SELECT \n    e.FirstName, \n    e.LastName, \n    e.Position, \n    COUNT(DISTINCT l.LoanID) AS ManagedLoansCount, \n    AVG(l.InterestRate) AS AvgInterestRate, \n    COUNT(DISTINCT cs.CustomerServiceID) AS ManagedServicesCount, \n    SUM(s.Fee) AS TotalServiceIncome\nFROM \n    Employees e\nLEFT JOIN Loans l ON e.EmployeeID = l.CustomerID\nLEFT JOIN CustomerServices cs ON e.EmployeeID = cs.CustomerID\nLEFT JOIN Services s ON cs.ServiceID = s.ServiceID\nWHERE \n    e.Position IN ('Банкир', 'Кредитный специалист', 'Аналитик')\nGROUP BY \n    e.FirstName, \n    e.LastName, \n    e.Position\nORDER BY \n    TotalServiceIncome DESC\nLIMIT 7;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    e.FirstName,\n    e.LastName,\n    e.Position,\n    COUNT(DISTINCT l.LoanID) AS NumberOfLoansManaged,\n    AVG(l.InterestRate) AS AverageInterestRate,\n    COUNT(DISTINCT cs.ServiceID) AS NumberOfServicesManaged,\n    SUM(s.Fee) AS TotalRevenueFromServices\nFROM\n    Employees e\nLEFT JOIN\n    Loans l ON e.EmployeeID = l.CustomerID\nLEFT JOIN\n    CustomerServices cs ON e.EmployeeID = cs.CustomerID\nLEFT JOIN\n    Services s ON cs.ServiceID = s.ServiceID\nWHERE\n    e.Position IN ('Банкир', 'Кредитный специалист', 'Аналитик')\nGROUP BY\n    e.EmployeeID, e.FirstName, e.LastName, e.Position\nORDER BY\n    TotalRevenueFromServices DESC\nLIMIT 7;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    e.FirstName,\n    e.LastName,\n    e.Position,\n    COUNT(DISTINCT l.LoanID) AS NumberOfLoans,\n    AVG(l.InterestRate) AS AverageInterestRate,\n    COUNT(DISTINCT cs.CustomerServiceID) AS NumberOfServices,\n    SUM(s.Fee) AS TotalServiceIncome\nFROM\n    Employees e\nLEFT JOIN\n    Loans l ON e.EmployeeID = l.CustomerID\nLEFT JOIN\n    CustomerServices cs ON l.CustomerID = cs.CustomerID\nLEFT JOIN\n    Services s ON cs.ServiceID = s.ServiceID\nWHERE\n    e.Position IN ('Банкир', 'Кредитный специалист', 'Аналитик')\nGROUP BY\n    e.EmployeeID, e.FirstName, e.LastName, e.Position\nORDER BY\n    TotalServiceIncome DESC\nLIMIT 7;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    e.FirstName, \n    e.LastName, \n    e.Position, \n    COUNT(DISTINCT l.LoanID) AS ManagedLoans, \n    AVG(l.InterestRate) AS AverageInterestRate, \n    COUNT(DISTINCT cs.ServiceID) AS ManagedServices, \n    SUM(s.Fee) AS TotalServiceFee\nFROM \n    Employees e\nJOIN \n    Loans l ON e.EmployeeID = l.CustomerID\nJOIN \n    CustomerServices cs ON e.EmployeeID = cs.CustomerID\nJOIN \n    Services s ON cs.ServiceID = s.ServiceID\nWHERE \n    e.Position IN ('Банкир', 'Кредитный специалист', 'Аналитик')\nGROUP BY \n    e.FirstName, \n    e.LastName, \n    e.Position\nORDER BY \n    TotalServiceFee DESC\nLIMIT 7",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    e.FirstName, \n    e.LastName, \n    e.Position, \n    COUNT(DISTINCT l.LoanID) AS ManagedLoans, \n    AVG(l.InterestRate) AS AverageInterestRate, \n    COUNT(DISTINCT cs.ServiceID) AS ManagedServices, \n    SUM(s.Fee) AS TotalServiceFee\nFROM \n    Employees e\nJOIN \n    Loans l ON e.EmployeeID = l.CustomerID\nJOIN \n    CustomerServices cs ON e.EmployeeID = cs.CustomerID\nJOIN \n    Services s ON cs.ServiceID = s.ServiceID\nWHERE \n    e.Position IN ('Банкир', 'Кредитный специалист', 'Аналитик')\nGROUP BY \n    e.FirstName, \n    e.LastName, \n    e.Position\nORDER BY \n    TotalServiceFee DESC\nLIMIT 7;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    e.FirstName,\n    e.LastName,\n    e.Position,\n    COUNT(DISTINCT l.LoanID) AS ManagedLoans,\n    AVG(l.InterestRate) AS AvgInterestRate,\n    COUNT(DISTINCT cs.CustomerServiceID) AS ManagedServices,\n    SUM(s.Fee) AS TotalServiceRevenue\nFROM \n    Employees e\nLEFT JOIN \n    Loans l ON e.EmployeeID = l.CustomerID\nLEFT JOIN \n    CustomerServices cs ON e.EmployeeID = cs.CustomerID\nLEFT JOIN \n    Services s ON cs.ServiceID = s.ServiceID\nWHERE \n    e.Position IN ('Банкир', 'Кредитный специалист', 'Аналитик')\nGROUP BY \n    e.EmployeeID, e.FirstName, e.LastName, e.Position\nORDER BY \n    TotalServiceRevenue DESC\nLIMIT 7;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    e.FirstName,\n    e.LastName,\n    e.Position,\n    COUNT(DISTINCT l.LoanID) AS ManagedLoans,\n    AVG(l.InterestRate) AS AvgInterestRate,\n    COUNT(DISTINCT cs.CustomerServiceID) AS ManagedServices,\n    SUM(s.Fee) AS TotalServiceRevenue\nFROM \n    Employees e\nLEFT JOIN \n    Loans l ON e.EmployeeID = l.CustomerID AND l.Status = 'Активно'\nLEFT JOIN \n    CustomerServices cs ON e.EmployeeID = cs.CustomerID AND cs.Status = 'активен'\nLEFT JOIN \n    Services s ON cs.ServiceID = s.ServiceID\nWHERE \n    e.Position IN ('Банкир', 'Кредитный специалист', 'Аналитик')\nGROUP BY \n    e.EmployeeID, e.FirstName, e.LastName, e.Position\nORDER BY \n    TotalServiceRevenue DESC\nLIMIT 7;",
            "gigachat_response": "WITH EmployeeLoans AS (\n    SELECT \n        e.EmployeeID,\n        COUNT(DISTINCT l.LoanID) AS ManagedLoansCount,\n        AVG(l.InterestRate) AS AverageInterestRate\n    FROM Employees e\n    LEFT JOIN Loans l ON e.EmployeeID = l.CustomerID -- Assuming employees manage loans directly linked to their ID\n    WHERE e.Position IN ('Банкир', 'Кредитный специалист', 'Аналитик')\n    GROUP BY e.EmployeeID\n),\nEmployeeServices AS (\n    SELECT \n        e.EmployeeID,\n        COUNT(DISTINCT cs.ServiceID) AS ManagedServicesCount,\n        SUM(s.Fee) AS TotalServiceIncome\n    FROM Employees e\n    INNER JOIN CustomerServices cs ON e.EmployeeID = cs.CustomerID -- Assuming employees manage services directly linked to their ID\n    INNER JOIN Services s ON cs.ServiceID = s.ServiceID\n    WHERE e.Position IN ('Банкир', 'Кредитный специалист', 'Аналитик')\n    GROUP BY e.EmployeeID\n)\nSELECT TOP 7\n    e.FirstName + ' ' + e.LastName AS FullName,\n    e.Position,\n    COALESCE(el.ManagedLoansCount, 0) AS ManagedLoansCount,\n    ROUND(COALESCE(el.AverageInterestRate, 0), 2) AS AverageInterestRate,\n    es.ManagedServicesCount,\n    es.TotalServiceIncome\nFROM Employees e\nLEFT JOIN EmployeeLoans el ON e.EmployeeID = el.EmployeeID\nINNER JOIN EmployeeServices es ON e.EmployeeID = es.EmployeeID\nORDER BY es.TotalServiceIncome DESC;",
            "gigachat_response_ru": "SELECT TOP 7\n    e.FirstName + ' ' + e.LastName AS FullName,\n    e.Position,\n    COUNT(DISTINCT l.LoanID) AS ManagedLoansCount,\n    AVG(l.InterestRate) AS AverageInterestRate,\n    COUNT(DISTINCT cs.ServiceID) AS ManagedServicesCount,\n    SUM(s.Fee * CASE WHEN cs.Status = 'Активен' THEN 1 ELSE 0 END) AS TotalServiceIncome\nFROM Employees e\nLEFT JOIN Loans l ON e.EmployeeID = l.CustomerID -- Предположим, сотрудник управляет клиентами, имеющими кредиты\nLEFT JOIN CustomerServices cs ON e.EmployeeID = cs.CustomerID -- Сотрудник также управляет услугами клиентов\nLEFT JOIN Services s ON cs.ServiceID = s.ServiceID\nWHERE e.Position IN ('Банкир', 'Кредитный специалист', 'Аналитик')\nGROUP BY e.FirstName, e.LastName, e.Position\nORDER BY TotalServiceIncome DESC;"
        },
        {
            "question": "Какие 6 клиентов с активными страховыми полисами на сумму более 500000 рублей имеют наибольшую сумму выплаченных возмещений? Покажите имя и фамилию клиента, количество активных полисов, общую сумму страхового покрытия, количество выплаченных возмещений и общую сумму выплаченных возмещений.",
            "sql_query": "SELECT c.FirstName, c.LastName, (SELECT COUNT(*) FROM InsurancePolicies ip WHERE ip.CustomerID = c.CustomerID AND ip.Status = 'Активен') AS ActivePolicies, (SELECT SUM(ip.CoverageAmount) FROM InsurancePolicies ip WHERE ip.CustomerID = c.CustomerID AND ip.Status = 'Активен') AS TotalCoverage, (SELECT COUNT(*) FROM PolicyClaims pc WHERE pc.PolicyID IN (SELECT ip.PolicyID FROM InsurancePolicies ip WHERE ip.CustomerID = c.CustomerID) AND pc.Status = 'Завершено') AS TotalClaims, (SELECT SUM(pc.ClaimAmount) FROM PolicyClaims pc WHERE pc.PolicyID IN (SELECT ip.PolicyID FROM InsurancePolicies ip WHERE ip.CustomerID = c.CustomerID) AND pc.Status = 'Завершено') AS TotalClaimAmount FROM Customers c WHERE c.CustomerID IN (SELECT DISTINCT CustomerID FROM InsurancePolicies WHERE Status = 'Активен' AND CoverageAmount > 500000) ORDER BY TotalClaimAmount DESC LIMIT 6;",
            "gpt-4o_response": "SELECT \n    c.FirstName, \n    c.LastName, \n    COUNT(ip.PolicyID) AS ActivePoliciesCount, \n    SUM(ip.CoverageAmount) AS TotalCoverageAmount, \n    COUNT(pc.ClaimID) AS PaidClaimsCount, \n    SUM(pc.ClaimAmount) AS TotalPaidClaimsAmount\nFROM \n    Customers c\nJOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nLEFT JOIN \n    PolicyClaims pc ON ip.PolicyID = pc.PolicyID AND pc.Status = 'Выплачено'\nWHERE \n    ip.Status = 'Активен' \n    AND ip.CoverageAmount > 500000\nGROUP BY \n    c.FirstName, c.LastName\nORDER BY \n    TotalPaidClaimsAmount DESC\nLIMIT 6;",
            "gpt-4o_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    COUNT(ip.PolicyID) AS ActivePoliciesCount, \n    SUM(ip.CoverageAmount) AS TotalCoverageAmount, \n    COUNT(pc.ClaimID) AS PaidClaimsCount, \n    SUM(pc.ClaimAmount) AS TotalPaidClaimsAmount\nFROM \n    Customers c\nJOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nJOIN \n    PolicyClaims pc ON ip.PolicyID = pc.PolicyID\nWHERE \n    ip.Status = 'Активен' \n    AND ip.CoverageAmount > 500000 \n    AND pc.Status = 'Выплачено'\nGROUP BY \n    c.FirstName, c.LastName\nORDER BY \n    TotalPaidClaimsAmount DESC\nLIMIT 6;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    c.FirstName,\n    c.LastName,\n    COUNT(DISTINCT ip.PolicyID) AS ActivePoliciesCount,\n    SUM(ip.CoverageAmount) AS TotalCoverageAmount,\n    COUNT(DISTINCT pc.ClaimID) AS PaidClaimsCount,\n    SUM(pc.ClaimAmount) AS TotalPaidClaimsAmount\nFROM\n    Customers c\nJOIN\n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nLEFT JOIN\n    PolicyClaims pc ON ip.PolicyID = pc.PolicyID AND pc.Status = 'Выплачено'\nWHERE\n    ip.Status = 'Активен' AND ip.CoverageAmount > 500000\nGROUP BY\n    c.CustomerID, c.FirstName, c.LastName\nORDER BY\n    TotalPaidClaimsAmount DESC\nLIMIT 6;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    c.FirstName,\n    c.LastName,\n    COUNT(DISTINCT ip.PolicyID) AS ActivePoliciesCount,\n    SUM(ip.CoverageAmount) AS TotalCoverageAmount,\n    COUNT(DISTINCT pc.ClaimID) AS TotalClaimsCount,\n    SUM(pc.ClaimAmount) AS TotalClaimAmount\nFROM Customers c\nJOIN InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nLEFT JOIN PolicyClaims pc ON ip.PolicyID = pc.PolicyID\nWHERE ip.Status = 'Активен' AND ip.CoverageAmount > 500000\nGROUP BY c.CustomerID, c.FirstName, c.LastName\nORDER BY TotalClaimAmount DESC\nLIMIT 6;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    c.FirstName, \n    c.LastName, \n    COUNT(ip.PolicyID) AS ActivePolicies, \n    SUM(ip.CoverageAmount) AS TotalCoverage, \n    COUNT(pc.ClaimID) AS PaidClaims, \n    SUM(pc.ClaimAmount) AS TotalPaidClaims\nFROM \n    Customers c\nJOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nJOIN \n    PolicyClaims pc ON ip.PolicyID = pc.PolicyID\nWHERE \n    ip.Status = 'Активен' AND ip.CoverageAmount > 500000 AND pc.Status = 'Выплачено'\nGROUP BY \n    c.FirstName, c.LastName\nORDER BY \n    TotalPaidClaims DESC\nLIMIT 6;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    COUNT(ip.PolicyID) AS ActivePolicies, \n    SUM(ip.CoverageAmount) AS TotalCoverage, \n    COUNT(pc.ClaimID) AS PaidClaims, \n    SUM(pc.ClaimAmount) AS TotalPaid\nFROM \n    Customers c\nJOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nJOIN \n    PolicyClaims pc ON ip.PolicyID = pc.PolicyID\nWHERE \n    ip.Status = 'Активен' AND ip.CoverageAmount > 500000 AND pc.Status = 'Выплачено'\nGROUP BY \n    c.FirstName, c.LastName\nORDER BY \n    TotalPaid DESC\nLIMIT 6;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    c.FirstName, \n    c.LastName, \n    COUNT(ip.PolicyID) AS ActivePoliciesCount,\n    SUM(ip.CoverageAmount) AS TotalCoverageAmount,\n    COUNT(pc.ClaimID) AS PaidClaimsCount,\n    SUM(pc.ClaimAmount) AS TotalPaidClaimsAmount\nFROM \n    Customers c\nJOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nLEFT JOIN \n    PolicyClaims pc ON ip.PolicyID = pc.PolicyID AND pc.Status = 'Выплачено'\nWHERE \n    ip.Status = 'Активен' AND ip.CoverageAmount > 500000\nGROUP BY \n    c.CustomerID, c.FirstName, c.LastName\nORDER BY \n    TotalPaidClaimsAmount DESC\nLIMIT 6;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    COUNT(ip.PolicyID) AS ActivePoliciesCount, \n    SUM(ip.CoverageAmount) AS TotalCoverageAmount, \n    COUNT(pc.ClaimID) AS PaidClaimsCount, \n    SUM(pc.ClaimAmount) AS TotalPaidClaimsAmount\nFROM \n    Customers c\nJOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nLEFT JOIN \n    PolicyClaims pc ON ip.PolicyID = pc.PolicyID AND pc.Status = 'Выплачено'\nWHERE \n    ip.Status = 'Активен' AND ip.CoverageAmount > 500000\nGROUP BY \n    c.CustomerID, c.FirstName, c.LastName\nORDER BY \n    TotalPaidClaimsAmount DESC\nLIMIT 6;",
            "gigachat_response": "SELECT \n    c.FirstName, \n    c.LastName, \n    COUNT(ip.PolicyID) AS NumberOfActivePolicies, \n    SUM(ip.CoverageAmount) AS TotalCoverageAmount, \n    COUNT(pc.ClaimID) AS NumberOfPaidClaims, \n    SUM(pc.ClaimAmount) AS TotalPaidClaimsAmount\nFROM \n    Customers c\nJOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nLEFT JOIN \n    PolicyClaims pc ON ip.PolicyID = pc.PolicyID AND pc.Status = 'Выплачено'\nWHERE \n    ip.Status = 'Активен' AND ip.CoverageAmount > 500000\nGROUP BY \n    c.FirstName, c.LastName\nORDER BY \n    TotalPaidClaimsAmount DESC\nLIMIT 6;",
            "gigachat_response_ru": "SELECT TOP 6\n    c.FirstName + ' ' + c.LastName AS FullName,\n    COUNT(ip.PolicyID) AS NumberOfActivePolices,\n    SUM(ip.CoverageAmount) AS TotalCoverageAmount,\n    COUNT(pc.ClaimID) AS NumberOfPaidClaims,\n    SUM(pc.ClaimAmount) AS TotalPaidClaimsAmount\nFROM Customers c\nINNER JOIN InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nLEFT JOIN PolicyClaims pc ON ip.PolicyID = pc.PolicyID\nWHERE ip.Status = 'Активен' AND ip.CoverageAmount > 500000\nAND pc.Status = 'Выплачено'\nGROUP BY c.FirstName, c.LastName\nORDER BY TotalPaidClaimsAmount DESC;"
        },
        {
            "question": "Какие 5 филиалов банка с сотрудниками с зарплатой более 60000 рублей имеют наибольший объем транзакций и количество активных кредитов? Нужно получить название отделения, количество активных банкоматов, общее количество сотрудников, среднюю зарплату, общий объем транзакций и количество активных кредитов.",
            "sql_query": "SELECT b.BranchName, (SELECT COUNT(*) FROM ATMs atm WHERE atm.BranchID = b.BranchID AND atm.Status = 'Активен') AS ActiveATMs, (SELECT COUNT(*) FROM Employees e WHERE e.BranchID = b.BranchID) AS TotalEmployees, (SELECT AVG(e.Salary) FROM Employees e WHERE e.BranchID = b.BranchID) AS AvgSalary, (SELECT SUM(t.Amount) FROM Transactions t WHERE t.AccountID IN (SELECT a.AccountID FROM Accounts a WHERE a.CustomerID IN (SELECT e.EmployeeID FROM Employees e WHERE e.BranchID = b.BranchID)) AND t.Status = 'Завершено') AS TotalTransactions, (SELECT COUNT(*) FROM Loans l WHERE l.CustomerID IN (SELECT c.CustomerID FROM Customers c WHERE c.CustomerID IN (SELECT a.CustomerID FROM Accounts a WHERE a.CustomerID IN (SELECT e.EmployeeID FROM Employees e WHERE e.BranchID = b.BranchID))) AND l.Status = 'Активен') AS ActiveLoans FROM Branches b WHERE b.BranchID IN (SELECT DISTINCT BranchID FROM Employees WHERE Salary > 60000) ORDER BY TotalTransactions DESC LIMIT 5;",
            "gpt-4o_response": "SELECT \n    b.BranchName,\n    (SELECT COUNT(*) FROM ATMs atm WHERE atm.BranchID = b.BranchID AND atm.Status = 'Active') AS ActiveATMs,\n    COUNT(DISTINCT e.EmployeeID) AS TotalEmployees,\n    AVG(e.Salary) AS AverageSalary,\n    (SELECT SUM(t.Amount) FROM Transactions t JOIN Accounts a ON t.AccountID = a.AccountID WHERE a.CustomerID IN (SELECT e.CustomerID FROM Employees e WHERE e.BranchID = b.BranchID) AND t.Status = 'Завершено') AS TotalTransactionVolume,\n    (SELECT COUNT(*) FROM Loans l WHERE l.CustomerID IN (SELECT e.CustomerID FROM Employees e WHERE e.BranchID = b.BranchID) AND l.Status = 'Активно') AS ActiveLoans\nFROM \n    Branches b\nJOIN \n    Employees e ON b.BranchID = e.BranchID\nWHERE \n    e.Salary > 60000\nGROUP BY \n    b.BranchName\nORDER BY \n    TotalTransactionVolume DESC, ActiveLoans DESC\nLIMIT 5;",
            "gpt-4o_response_ru": "SELECT \n    b.BranchName,\n    COUNT(DISTINCT a.ATMID) AS ActiveATMs,\n    COUNT(DISTINCT e.EmployeeID) AS TotalEmployees,\n    AVG(e.Salary) AS AverageSalary,\n    SUM(t.Amount) AS TotalTransactionVolume,\n    COUNT(DISTINCT l.LoanID) AS ActiveLoans\nFROM \n    Branches b\nJOIN \n    Employees e ON b.BranchID = e.BranchID\nLEFT JOIN \n    ATMs a ON b.BranchID = a.BranchID AND a.Status = 'Active'\nLEFT JOIN \n    Accounts acc ON e.BranchID = acc.CustomerID\nLEFT JOIN \n    Transactions t ON acc.AccountID = t.AccountID AND t.Status = 'Завершено'\nLEFT JOIN \n    Loans l ON e.BranchID = l.CustomerID AND l.Status = 'Активно'\nWHERE \n    e.Salary > 60000\nGROUP BY \n    b.BranchName\nORDER BY \n    TotalTransactionVolume DESC, ActiveLoans DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    b.BranchName,\n    COUNT(DISTINCT atm.ATMID) AS ActiveATMs,\n    COUNT(DISTINCT e.EmployeeID) AS TotalEmployees,\n    AVG(e.Salary) AS AverageSalary,\n    SUM(t.Amount) AS TotalTransactionAmount,\n    COUNT(DISTINCT l.LoanID) AS ActiveLoans\nFROM\n    Branches b\nJOIN\n    Employees e ON b.BranchID = e.BranchID\nLEFT JOIN\n    ATMs atm ON b.BranchID = atm.BranchID AND atm.Status = 'Active'\nLEFT JOIN\n    Accounts a ON e.EmployeeID = a.CustomerID\nLEFT JOIN\n    Transactions t ON a.AccountID = t.AccountID\nLEFT JOIN\n    Loans l ON e.EmployeeID = l.CustomerID AND l.Status = 'Активно'\nWHERE\n    e.Salary > 60000\nGROUP BY\n    b.BranchName\nORDER BY\n    TotalTransactionAmount DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    b.BranchName,\n    COUNT(DISTINCT atm.ATMID) AS ActiveATMs,\n    COUNT(DISTINCT e.EmployeeID) AS TotalEmployees,\n    AVG(e.Salary) AS AverageSalary,\n    SUM(t.Amount) AS TotalTransactionAmount,\n    COUNT(DISTINCT l.LoanID) AS ActiveLoans\nFROM Branches b\nJOIN Employees e ON b.BranchID = e.BranchID\nLEFT JOIN ATMs atm ON b.BranchID = atm.BranchID AND atm.Status = 'Active'\nLEFT JOIN Accounts a ON b.BranchID = e.BranchID  -- Предполагаем, что сотрудники работают в филиалах, где открываются счета\nLEFT JOIN Transactions t ON a.AccountID = t.AccountID\nLEFT JOIN Loans l ON e.EmployeeID = l.CustomerID AND l.Status = 'Активно'\nWHERE e.Salary > 60000\nGROUP BY b.BranchName\nORDER BY TotalTransactionAmount DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    b.BranchName, \n    COUNT(atm.ATMID) AS ActiveATMs, \n    COUNT(e.EmployeeID) AS TotalEmployees, \n    AVG(e.Salary) AS AverageSalary, \n    SUM(t.Amount) AS TotalTransactionAmount, \n    COUNT(l.LoanID) AS ActiveLoans\nFROM \n    Branches b\nJOIN \n    Employees e ON b.BranchID = e.BranchID\nJOIN \n    Accounts a ON e.BranchID = a.BranchID\nJOIN \n    Transactions t ON a.AccountID = t.AccountID\nJOIN \n    Loans l ON a.CustomerID = l.CustomerID\nJOIN \n    ATMs atm ON b.BranchID = atm.BranchID\nWHERE \n    e.Salary > 60000 AND \n    l.Status = 'Активно' AND \n    atm.Status = 'Active'\nGROUP BY \n    b.BranchName\nORDER BY \n    TotalTransactionAmount DESC, \n    ActiveLoans DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    b.BranchName, \n    COUNT(atm.ATMID) AS ActiveATMs,\n    COUNT(e.EmployeeID) AS TotalEmployees,\n    AVG(e.Salary) AS AverageSalary,\n    SUM(t.Amount) AS TotalTransactionAmount,\n    COUNT(l.LoanID) AS ActiveLoans\nFROM \n    Branches b\nJOIN \n    Employees e ON b.BranchID = e.BranchID\nJOIN \n    Accounts a ON e.EmployeeID = a.CustomerID\nJOIN \n    Transactions t ON a.AccountID = t.AccountID\nJOIN \n    Loans l ON a.CustomerID = l.CustomerID\nJOIN \n    ATMs atm ON b.BranchID = atm.BranchID\nWHERE \n    e.Salary > 60000 AND \n    l.Status = 'Активно' AND \n    atm.Status = 'Active'\nGROUP BY \n    b.BranchName\nORDER BY \n    TotalTransactionAmount DESC, ActiveLoans DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    b.BranchName,\n    COUNT(DISTINCT a.ATMID) AS ActiveATMs,\n    COUNT(DISTINCT e.EmployeeID) AS TotalEmployees,\n    AVG(e.Salary) AS AvgSalary,\n    (SELECT SUM(t.Amount) \n     FROM Transactions t \n     JOIN Accounts ac ON t.AccountID = ac.AccountID \n     JOIN Customers cu ON ac.CustomerID = cu.CustomerID \n     JOIN Employees em ON cu.CustomerID = em.EmployeeID \n     WHERE em.BranchID = b.BranchID AND t.Status = 'Завершено') AS TotalTransactionAmount,\n    (SELECT COUNT(*) \n     FROM Loans l \n     JOIN Employees em ON l.CustomerID = em.EmployeeID \n     WHERE em.BranchID = b.BranchID AND l.Status = 'Активно') AS ActiveLoans\nFROM \n    Branches b\nJOIN \n    Employees e ON b.BranchID = e.BranchID\nLEFT JOIN \n    ATMs a ON b.BranchID = a.BranchID AND a.Status = 'Active'\nWHERE \n    e.Salary > 60000\nGROUP BY \n    b.BranchID, b.BranchName\nORDER BY \n    TotalTransactionAmount DESC, ActiveLoans DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    b.BranchName,\n    COUNT(DISTINCT a.ATMID) AS ActiveATMs,\n    COUNT(DISTINCT e.EmployeeID) AS TotalEmployees,\n    AVG(e.Salary) AS AvgSalary,\n    SUM(t.Amount) AS TotalTransactionAmount,\n    COUNT(DISTINCT l.LoanID) AS ActiveLoans\nFROM \n    Branches b\nJOIN \n    Employees e ON b.BranchID = e.BranchID\nLEFT JOIN \n    ATMs a ON b.BranchID = a.BranchID AND a.Status = 'Active'\nLEFT JOIN \n    Accounts ac ON e.EmployeeID = ac.CustomerID\nLEFT JOIN \n    Transactions t ON ac.AccountID = t.AccountID AND t.Status = 'Завершено'\nLEFT JOIN \n    Loans l ON e.EmployeeID = l.CustomerID AND l.Status = 'Активно'\nWHERE \n    e.Salary > 60000\nGROUP BY \n    b.BranchID, b.BranchName\nORDER BY \n    TotalTransactionAmount DESC, ActiveLoans DESC\nLIMIT 5;",
            "gigachat_response": "WITH EmployeeSalaryData AS (\n    SELECT \n        e.BranchID,\n        COUNT(e.EmployeeID) AS NumEmployees,\n        AVG(e.Salary) AS AverageSalary\n    FROM Employees e\n    WHERE e.Salary > 60000\n    GROUP BY e.BranchID\n), \nActiveLoansPerBranch AS (\n    SELECT \n        l.CustomerID,\n        COUNT(l.LoanID) AS NumActiveLoans\n    FROM Loans l\n    INNER JOIN Customers c ON l.CustomerID = c.CustomerID\n    INNER JOIN Employees e ON c.CustomerID = e.EmployeeID\n    WHERE l.Status = 'Активно'\n    GROUP BY l.CustomerID\n), \nTotalTransactionsPerBranch AS (\n    SELECT \n        t.AccountID,\n        SUM(t.Amount) AS TotalTransactionVolume\n    FROM Transactions t\n    INNER JOIN Accounts a ON t.AccountID = a.AccountID\n    INNER JOIN Customers c ON a.CustomerID = c.CustomerID\n    INNER JOIN Employees e ON c.CustomerID = e.EmployeeID\n    GROUP BY t.AccountID\n), \nActiveATMsPerBranch AS (\n    SELECT \n        at.BranchID,\n        COUNT(at.ATMID) AS NumActiveATMs\n    FROM ATMs at\n    WHERE at.Status = 'Active'\n    GROUP BY at.BranchID\n)\n\nSELECT \n    b.BranchName,\n    COALESCE(aapb.NumActiveATMs, 0) AS NumActiveATMs,\n    esd.NumEmployees,\n    ROUND(esd.AverageSalary, 2) AS AverageSalary,\n    COALESCE(SUM(tt.TotalTransactionVolume), 0) AS TotalTransactionVolume,\n    COALESCE(SUM(alpb.NumActiveLoans), 0) AS NumActiveLoans\nFROM Branches b\nLEFT JOIN EmployeeSalaryData esd ON b.BranchID = esd.BranchID\nLEFT JOIN ActiveATMsPerBranch aapb ON b.BranchID = aapb.BranchID\nLEFT JOIN TotalTransactionsPerBranch tt ON b.BranchID = tt.AccountID\nLEFT JOIN ActiveLoansPerBranch alpb ON b.BranchID = alpb.CustomerID\nGROUP BY b.BranchName, esd.NumEmployees, esd.AverageSalary, aapb.NumActiveATMs\nORDER BY TotalTransactionVolume DESC, NumActiveLoans DESC\nLIMIT 5;",
            "gigachat_response_ru": "SELECT TOP 5\n    b.BranchName,\n    COUNT(DISTINCT at.ATMID) AS ActiveATMsCount,\n    COUNT(DISTINCT e.EmployeeID) AS TotalEmployees,\n    AVG(e.Salary) AS AverageSalary,\n    COALESCE(SUM(t.Amount), 0) AS TotalTransactionVolume,\n    COUNT(DISTINCT l.LoanID) AS ActiveLoansCount\nFROM Branches b\nLEFT JOIN Employees e ON b.BranchID = e.BranchID\nLEFT JOIN ATMs at ON b.BranchID = at.BranchID AND at.Status = 'Active'\nLEFT JOIN Accounts acc ON e.EmployeeID = acc.CustomerID -- Предположим, сотрудник обслуживает клиента-собственника счёта\nLEFT JOIN Transactions t ON acc.AccountID = t.AccountID AND t.Status = 'Завершено'\nLEFT JOIN Loans l ON e.EmployeeID = l.CustomerID AND l.Status = 'Активно'\nWHERE e.Salary > 60000\nGROUP BY b.BranchName\nORDER BY TotalTransactionVolume DESC, ActiveLoansCount DESC;"
        },
        {
            "question": "Какие 5 клиентов имеют наибольший объем транзакций в долларах и активных кредитах? Покажите имя и фамилию клиента, общий объем транзакций в долларах, количество активных кредитов и общую сумму активных кредитов.",
            "sql_query": "SELECT c.FirstName, c.LastName, (SELECT SUM(t.Amount) FROM Transactions t WHERE t.AccountID IN (SELECT a.AccountID FROM Accounts a WHERE a.CustomerID = c.CustomerID AND a.Currency = 'USD') AND t.Status = 'Завершено') AS TotalUSDTransactions, (SELECT COUNT(*) FROM Loans l WHERE l.CustomerID = c.CustomerID AND l.Status = 'Активно') AS ActiveLoans, (SELECT SUM(l.PrincipalAmount) FROM Loans l WHERE l.CustomerID = c.CustomerID AND l.Status = 'Активно') AS TotalActiveLoanAmount FROM Customers c ORDER BY TotalUSDTransactions DESC LIMIT 5;",
            "gpt-4o_response": "SELECT \n    c.FirstName, \n    c.LastName, \n    COALESCE(SUM(t.Amount), 0) AS TotalTransactionUSD, \n    COUNT(l.LoanID) AS ActiveLoansCount, \n    COALESCE(SUM(l.PrincipalAmount), 0) AS TotalActiveLoanAmount\nFROM \n    Customers c\nLEFT JOIN \n    Accounts a ON c.CustomerID = a.CustomerID\nLEFT JOIN \n    Transactions t ON a.AccountID = t.AccountID AND t.Currency = 'USD' AND t.Status = 'Завершено'\nLEFT JOIN \n    Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\nGROUP BY \n    c.CustomerID, c.FirstName, c.LastName\nORDER BY \n    TotalTransactionUSD DESC\nLIMIT 5;",
            "gpt-4o_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    COALESCE(SUM(t.Amount), 0) AS TotalTransactionAmountUSD,\n    COUNT(l.LoanID) AS ActiveLoansCount,\n    COALESCE(SUM(l.PrincipalAmount), 0) AS TotalActiveLoanAmount\nFROM \n    Customers c\nLEFT JOIN \n    Accounts a ON c.CustomerID = a.CustomerID\nLEFT JOIN \n    Transactions t ON a.AccountID = t.AccountID AND t.Currency = 'USD' AND t.Status = 'Завершено'\nLEFT JOIN \n    Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\nGROUP BY \n    c.CustomerID, c.FirstName, c.LastName\nORDER BY \n    TotalTransactionAmountUSD DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    c.FirstName,\n    c.LastName,\n    SUM(CASE WHEN t.Currency = 'USD' THEN t.Amount ELSE 0 END) AS TotalUSDTransactions,\n    COUNT(DISTINCT l.LoanID) AS ActiveLoanCount,\n    SUM(CASE WHEN l.Status = 'Активно' THEN l.PrincipalAmount ELSE 0 END) AS TotalActiveLoanAmount\nFROM\n    Customers c\nLEFT JOIN\n    Accounts a ON c.CustomerID = a.CustomerID\nLEFT JOIN\n    Transactions t ON a.AccountID = t.AccountID\nLEFT JOIN\n    Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\nGROUP BY\n    c.CustomerID, c.FirstName, c.LastName\nORDER BY\n    TotalUSDTransactions DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    c.FirstName,\n    c.LastName,\n    SUM(CASE WHEN t.Currency = 'USD' THEN t.Amount ELSE 0 END) AS TotalUSDTransactions,\n    COUNT(l.LoanID) AS ActiveLoanCount,\n    SUM(l.PrincipalAmount) AS TotalActiveLoanAmount\nFROM\n    Customers c\nLEFT JOIN\n    Accounts a ON c.CustomerID = a.CustomerID\nLEFT JOIN\n    Transactions t ON a.AccountID = t.AccountID\nLEFT JOIN\n    Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\nWHERE t.Currency = 'USD' OR l.Status = 'Активно'\nGROUP BY\n    c.CustomerID, c.FirstName, c.LastName\nORDER BY\n    TotalUSDTransactions DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    c.FirstName, \n    c.LastName, \n    COALESCE(SUM(CASE WHEN t.Currency = 'USD' THEN t.Amount ELSE 0 END), 0) AS TotalUSDTransactionAmount,\n    COUNT(CASE WHEN l.Status = 'Активно' THEN l.LoanID ELSE NULL END) AS ActiveLoansCount,\n    COALESCE(SUM(CASE WHEN l.Status = 'Активно' THEN l.PrincipalAmount ELSE 0 END), 0) AS TotalActiveLoansAmount\nFROM \n    Customers c\nLEFT JOIN \n    Accounts a ON c.CustomerID = a.CustomerID\nLEFT JOIN \n    Transactions t ON a.AccountID = t.AccountID\nLEFT JOIN \n    Loans l ON c.CustomerID = l.CustomerID\nGROUP BY \n    c.CustomerID, c.FirstName, c.LastName\nORDER BY \n    TotalUSDTransactionAmount DESC, ActiveLoansCount DESC, TotalActiveLoansAmount DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    COALESCE(SUM(CASE WHEN t.Currency = 'USD' THEN t.Amount ELSE 0 END), 0) AS TotalUSDTransactionAmount,\n    COUNT(CASE WHEN l.Status = 'Активно' THEN l.LoanID ELSE NULL END) AS ActiveLoansCount,\n    COALESCE(SUM(CASE WHEN l.Status = 'Активно' THEN l.PrincipalAmount ELSE 0 END), 0) AS TotalActiveLoansAmount\nFROM \n    Customers c\nLEFT JOIN \n    Accounts a ON c.CustomerID = a.CustomerID\nLEFT JOIN \n    Transactions t ON a.AccountID = t.AccountID\nLEFT JOIN \n    Loans l ON c.CustomerID = l.CustomerID\nGROUP BY \n    c.FirstName, \n    c.LastName\nORDER BY \n    TotalUSDTransactionAmount DESC, \n    ActiveLoansCount DESC, \n    TotalActiveLoansAmount DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    c.FirstName, \n    c.LastName, \n    COALESCE(SUM(t.Amount), 0) AS TotalTransactionAmountUSD,\n    COUNT(DISTINCT l.LoanID) AS ActiveLoansCount,\n    COALESCE(SUM(l.PrincipalAmount), 0) AS TotalActiveLoanAmount\nFROM \n    Customers c\nLEFT JOIN \n    Accounts a ON c.CustomerID = a.CustomerID\nLEFT JOIN \n    Transactions t ON a.AccountID = t.AccountID AND t.Currency = 'USD' AND t.Status = 'Завершено'\nLEFT JOIN \n    Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\nGROUP BY \n    c.CustomerID, c.FirstName, c.LastName\nORDER BY \n    TotalTransactionAmountUSD DESC, TotalActiveLoanAmount DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    COALESCE(SUM(t.Amount), 0) AS TotalTransactionAmountUSD,\n    COUNT(DISTINCT l.LoanID) AS ActiveLoansCount,\n    COALESCE(SUM(l.PrincipalAmount), 0) AS TotalActiveLoansAmount\nFROM \n    Customers c\nLEFT JOIN \n    Accounts a ON c.CustomerID = a.CustomerID\nLEFT JOIN \n    Transactions t ON a.AccountID = t.AccountID AND t.Currency = 'USD' AND t.Status = 'Завершено'\nLEFT JOIN \n    Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\nGROUP BY \n    c.CustomerID, c.FirstName, c.LastName\nORDER BY \n    TotalTransactionAmountUSD DESC, TotalActiveLoansAmount DESC\nLIMIT 5;",
            "gigachat_response": "SELECT TOP 5\n    c.FirstName + ' ' + c.LastName AS FullName,\n    COALESCE(SUM(CASE WHEN tr.Currency = 'USD' THEN tr.Amount ELSE 0 END), 0) AS TotalDollarTransactions,\n    COUNT(DISTINCT l.LoanID) AS NumberOfActiveLoans,\n    COALESCE(SUM(l.PrincipalAmount), 0) AS TotalPrincipalAmount\nFROM Customers c\nLEFT JOIN Accounts acc ON c.CustomerID = acc.CustomerID\nLEFT JOIN Transactions tr ON acc.AccountID = tr.AccountID\nLEFT JOIN Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\nGROUP BY c.FirstName, c.LastName\nORDER BY TotalDollarTransactions DESC;",
            "gigachat_response_ru": "SELECT TOP 5\n    c.FirstName + ' ' + c.LastName AS FullName,\n    COALESCE(SUM(CASE WHEN tr.Currency = 'USD' THEN tr.Amount ELSE 0 END), 0) AS TotalDollarTransactions,\n    COUNT(DISTINCT l.LoanID) AS NumberOfActiveLoans,\n    COALESCE(SUM(l.PrincipalAmount), 0) AS TotalPrincipalAmount\nFROM Customers c\nLEFT JOIN Accounts acc ON c.CustomerID = acc.CustomerID\nLEFT JOIN Transactions tr ON acc.AccountID = tr.AccountID\nLEFT JOIN Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\nGROUP BY c.FirstName, c.LastName\nORDER BY TotalDollarTransactions DESC;"
        },
        {
            "question": "Какие 5 филиалов банка имеют наибольшее количество активных банкоматов и объем транзакций? Покажите название отделения, количество активных банкоматов и общий объем транзакций.",
            "sql_query": "SELECT b.BranchName, (SELECT COUNT(*) FROM ATMs atm WHERE atm.BranchID = b.BranchID AND atm.Status = 'Active') AS ActiveATMs, (SELECT SUM(t.Amount) FROM Transactions t WHERE t.AccountID IN (SELECT a.AccountID FROM Accounts a WHERE a.CustomerID IN (SELECT e.EmployeeID FROM Employees e WHERE e.BranchID = b.BranchID)) AND t.Status = 'Завершено') AS TotalTransactionVolume FROM Branches b ORDER BY ActiveATMs DESC, TotalTransactionVolume DESC LIMIT 5;",
            "gpt-4o_response": "SELECT b.BranchName, \n       COUNT(a.ATMID) AS ActiveATMs, \n       COALESCE(SUM(t.Amount), 0) AS TotalTransactionVolume\nFROM Branches b\nLEFT JOIN ATMs a ON b.BranchID = a.BranchID AND a.Status = 'Active'\nLEFT JOIN Employees e ON b.BranchID = e.BranchID\nLEFT JOIN Accounts acc ON e.EmployeeID = acc.CustomerID\nLEFT JOIN Transactions t ON acc.AccountID = t.AccountID AND t.Status = 'Завершено'\nGROUP BY b.BranchName\nORDER BY ActiveATMs DESC, TotalTransactionVolume DESC\nLIMIT 5;",
            "gpt-4o_response_ru": "SELECT \n    b.BranchName, \n    COUNT(a.ATMID) AS ActiveATMs, \n    COALESCE(SUM(t.Amount), 0) AS TotalTransactionVolume\nFROM \n    Branches b\nLEFT JOIN \n    ATMs a ON b.BranchID = a.BranchID AND a.Status = 'Active'\nLEFT JOIN \n    Accounts acc ON acc.BranchID = b.BranchID\nLEFT JOIN \n    Transactions t ON acc.AccountID = t.AccountID AND t.Status = 'Завершено'\nGROUP BY \n    b.BranchName\nORDER BY \n    ActiveATMs DESC, TotalTransactionVolume DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    b.BranchName,\n    COUNT(DISTINCT atm.ATMID) AS ActiveATMsCount,\n    SUM(t.Amount) AS TotalTransactionAmount\nFROM\n    Branches b\nJOIN\n    ATMs atm ON b.BranchID = atm.BranchID\nLEFT JOIN\n    Employees e ON b.BranchID = e.BranchID\nLEFT JOIN\n    Accounts a ON e.EmployeeID = a.CustomerID\nLEFT JOIN\n    Transactions t ON a.AccountID = t.AccountID\nWHERE\n    atm.Status = 'Active'\nGROUP BY\n    b.BranchName\nORDER BY\n    ActiveATMsCount DESC,\n    TotalTransactionAmount DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    b.BranchName,\n    COUNT(CASE WHEN a.Status = 'Active' THEN a.ATMID ELSE NULL END) AS ActiveATMsCount,\n    SUM(t.Amount) AS TotalTransactionAmount\nFROM\n    Branches b\nLEFT JOIN\n    ATMs a ON b.BranchID = a.BranchID\nLEFT JOIN\n    Employees e ON b.BranchID = e.BranchID\nLEFT JOIN\n    Accounts acc ON acc.CustomerID = e.EmployeeID\nLEFT JOIN\n    Transactions t ON acc.AccountID = t.AccountID\nGROUP BY\n    b.BranchName\nORDER BY\n    ActiveATMsCount DESC,\n    TotalTransactionAmount DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    b.BranchName, \n    COUNT(atm.ATMID) AS ActiveATMs, \n    SUM(t.Amount) AS TotalTransactionAmount\nFROM \n    Branches b\nJOIN \n    ATMs atm ON b.BranchID = atm.BranchID\nJOIN \n    Transactions t ON atm.ATMID = t.TransactionID\nWHERE \n    atm.Status = 'Active' AND t.Status = 'Завершено'\nGROUP BY \n    b.BranchName\nORDER BY \n    ActiveATMs DESC, TotalTransactionAmount DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    b.BranchName, \n    COUNT(atm.ATMID) AS ActiveATMs,\n    SUM(t.Amount) AS TotalTransactionAmount\nFROM \n    Branches b\nJOIN \n    ATMs atm ON b.BranchID = atm.BranchID\nJOIN \n    Transactions t ON atm.ATMID = t.AccountID\nWHERE \n    atm.Status = 'Active' AND t.Status = 'Завершено'\nGROUP BY \n    b.BranchName\nORDER BY \n    ActiveATMs DESC, TotalTransactionAmount DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT b.BranchName, \n       COUNT(a.ATMID) AS ActiveATMs,\n       (SELECT SUM(t.Amount) \n        FROM Transactions t \n        JOIN Accounts ac ON t.AccountID = ac.AccountID \n        JOIN Customers cu ON ac.CustomerID = cu.CustomerID \n        JOIN Employees e ON cu.CustomerID = e.EmployeeID \n        WHERE e.BranchID = b.BranchID AND t.Status = 'Завершено') AS TotalTransactionAmount\nFROM Branches b\nJOIN ATMs a ON b.BranchID = a.BranchID\nWHERE a.Status = 'Active'\nGROUP BY b.BranchID, b.BranchName\nORDER BY ActiveATMs DESC, TotalTransactionAmount DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    b.BranchName,\n    COUNT(DISTINCT a.ATMID) AS ActiveATMs,\n    COALESCE(SUM(t.Amount), 0) AS TotalTransactionAmount\nFROM \n    Branches b\nLEFT JOIN \n    ATMs a ON b.BranchID = a.BranchID AND a.Status = 'Active'\nLEFT JOIN \n    Employees e ON b.BranchID = e.BranchID\nLEFT JOIN \n    Customers c ON e.EmployeeID = c.CustomerID\nLEFT JOIN \n    Accounts ac ON c.CustomerID = ac.CustomerID\nLEFT JOIN \n    Transactions t ON ac.AccountID = t.AccountID AND t.Status = 'Завершено'\nGROUP BY \n    b.BranchName\nORDER BY \n    ActiveATMs DESC, TotalTransactionAmount DESC\nLIMIT 5;",
            "gigachat_response": "SELECT \n    b.BranchName,\n    COUNT(a.ATMID) AS ActiveATMsCount,\n    COALESCE(SUM(t.Amount), 0) AS TotalTransactionVolume\nFROM \n    Branches b\nLEFT JOIN \n    ATMs a ON b.BranchID = a.BranchID AND a.Status = 'Active'\nLEFT JOIN \n    Transactions t ON b.BranchID = (SELECT BranchID FROM Employees WHERE EmployeeID = t.AccountID / 1000) -- Assuming branch ID can be derived from account number\nGROUP BY \n    b.BranchName\nORDER BY \n    ActiveATMsCount DESC, TotalTransactionVolume DESC\nLIMIT 5;",
            "gigachat_response_ru": "SELECT \n    b.BranchName,\n    COUNT(a.ATMID) AS ActiveATMsCount,\n    COALESCE(SUM(t.Amount), 0) AS TotalTransactionVolume\nFROM \n    Branches b\nLEFT JOIN \n    ATMs a ON b.BranchID = a.BranchID AND a.Status = 'Active'\nLEFT JOIN \n    Transactions t ON b.BranchID = (SELECT e.BranchID FROM Employees e WHERE e.EmployeeID = t.AccountID)\nGROUP BY \n    b.BranchName\nORDER BY \n    ActiveATMsCount DESC, TotalTransactionVolume DESC\nLIMIT 5;"
        },
        {
            "question": "Какие сотрудники (банкиры и кредитные специалисты) имеют управляемые кредиты и страховые полисы, отсортированные по средней зарплате в филиале? Покажите имя и фамилию сотрудника, должность, количество управляемых кредитов и страховых полисов, а также среднюю зарплату в филиале.",
            "sql_query": "SELECT e.FirstName, e.LastName, e.Position, (SELECT COUNT(*) FROM Loans l WHERE l.CustomerID = e.EmployeeID AND l.Status = 'Активно') AS ManagedLoans, (SELECT COUNT(*) FROM InsurancePolicies ip WHERE ip.CustomerID = e.EmployeeID AND ip.Status = 'Активен') AS ManagedPolicies, (SELECT AVG(e2.Salary) FROM Employees e2 WHERE e2.BranchID = e.BranchID) AS BranchAverageSalary FROM Employees e WHERE e.Position IN ('Банкир', 'Кредитный специалист') HAVING ManagedLoans > 0 AND ManagedPolicies > 0 ORDER BY BranchAverageSalary DESC;",
            "gpt-4o_response": "SELECT \n    e.FirstName, \n    e.LastName, \n    e.Position, \n    COUNT(DISTINCT l.LoanID) AS ManagedLoans, \n    COUNT(DISTINCT ip.PolicyID) AS ManagedInsurancePolicies, \n    AVG(e.Salary) OVER (PARTITION BY e.BranchID) AS AvgBranchSalary\nFROM \n    Employees e\nLEFT JOIN \n    Loans l ON e.EmployeeID = l.CustomerID AND l.Status = 'Активно'\nLEFT JOIN \n    InsurancePolicies ip ON e.EmployeeID = ip.CustomerID AND ip.Status = 'Активен'\nWHERE \n    e.Position IN ('Банкир', 'Кредитный специалист')\nGROUP BY \n    e.FirstName, \n    e.LastName, \n    e.Position, \n    e.BranchID\nORDER BY \n    AvgBranchSalary;",
            "gpt-4o_response_ru": "SELECT \n    e.FirstName, \n    e.LastName, \n    e.Position, \n    COUNT(DISTINCT l.LoanID) AS ManagedLoans, \n    COUNT(DISTINCT ip.PolicyID) AS ManagedInsurancePolicies, \n    AVG(e2.Salary) AS AverageBranchSalary\nFROM \n    Employees e\nJOIN \n    Branches b ON e.BranchID = b.BranchID\nLEFT JOIN \n    Loans l ON e.EmployeeID = l.CustomerID AND l.Status = 'Активно'\nLEFT JOIN \n    InsurancePolicies ip ON e.EmployeeID = ip.CustomerID AND ip.Status = 'Активен'\nJOIN \n    Employees e2 ON e.BranchID = e2.BranchID\nWHERE \n    e.Position IN ('Банкир', 'Кредитный специалист')\nGROUP BY \n    e.FirstName, \n    e.LastName, \n    e.Position, \n    e.BranchID\nORDER BY \n    AverageBranchSalary;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    e.FirstName,\n    e.LastName,\n    e.Position,\n    COUNT(DISTINCT l.LoanID) AS ManagedLoansCount,\n    COUNT(DISTINCT ip.PolicyID) AS ManagedInsurancePoliciesCount,\n    (SELECT AVG(Salary) FROM Employees WHERE BranchID = e.BranchID) AS AverageBranchSalary\nFROM\n    Employees e\nLEFT JOIN\n    Loans l ON e.EmployeeID = l.CustomerID\nLEFT JOIN\n    InsurancePolicies ip ON e.EmployeeID = ip.CustomerID\nWHERE\n    e.Position IN ('Банкир', 'Кредитный специалист')\nGROUP BY\n    e.EmployeeID, e.FirstName, e.LastName, e.Position, e.BranchID\nORDER BY\n    AverageBranchSalary;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    e.FirstName,\n    e.LastName,\n    e.Position,\n    COUNT(DISTINCT l.LoanID) AS ManagedLoansCount,\n    COUNT(DISTINCT ip.PolicyID) AS ManagedPoliciesCount,\n    AVG(e_branch.Salary) AS AverageBranchSalary\nFROM\n    Employees e\nJOIN\n    Branches b ON e.BranchID = b.BranchID\nLEFT JOIN\n    Loans l ON e.EmployeeID = l.CustomerID\nLEFT JOIN\n    InsurancePolicies ip ON e.EmployeeID = ip.CustomerID\nLEFT JOIN\n    Employees e_branch ON b.BranchID = e_branch.BranchID\nWHERE\n    (e.Position = 'Банкир' OR e.Position = 'Кредитный специалист')\nGROUP BY\n    e.EmployeeID, e.FirstName, e.LastName, e.Position\nHAVING\n    COUNT(DISTINCT l.LoanID) > 0 AND COUNT(DISTINCT ip.PolicyID) > 0\nORDER BY\n    AverageBranchSalary;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    e.FirstName, \n    e.LastName, \n    e.Position, \n    COUNT(DISTINCT l.LoanID) AS ManagedLoans, \n    COUNT(DISTINCT ip.PolicyID) AS ManagedPolicies, \n    AVG(e.Salary) OVER (PARTITION BY b.BranchID) AS AverageSalaryInBranch\nFROM \n    Employees e\nJOIN \n    Branches b ON e.BranchID = b.BranchID\nJOIN \n    Loans l ON e.EmployeeID = l.CustomerID\nJOIN \n    InsurancePolicies ip ON e.EmployeeID = ip.CustomerID\nWHERE \n    e.Position IN ('Банкир', 'Кредитный специалист')\nGROUP BY \n    e.FirstName, \n    e.LastName, \n    e.Position, \n    b.BranchID\nORDER BY \n    AverageSalaryInBranch DESC;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    e.FirstName, \n    e.LastName, \n    e.Position, \n    COUNT(DISTINCT l.LoanID) AS ManagedLoans, \n    COUNT(DISTINCT ip.PolicyID) AS ManagedPolicies,\n    AVG(e.Salary) OVER (PARTITION BY b.BranchID) AS AverageBranchSalary\nFROM \n    Employees e\nJOIN \n    Branches b ON e.BranchID = b.BranchID\nJOIN \n    Loans l ON e.EmployeeID = l.CustomerID\nJOIN \n    InsurancePolicies ip ON e.EmployeeID = ip.CustomerID\nWHERE \n    e.Position IN ('Банкир', 'Кредитный специалист')\nGROUP BY \n    e.FirstName, \n    e.LastName, \n    e.Position, \n    b.BranchID\nORDER BY \n    AverageBranchSalary DESC;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    e.FirstName,\n    e.LastName,\n    e.Position,\n    COUNT(DISTINCT l.LoanID) AS ManagedLoans,\n    COUNT(DISTINCT ip.PolicyID) AS ManagedPolicies,\n    AVG(e2.Salary) AS AvgBranchSalary\nFROM \n    Employees e\nJOIN \n    Branches b ON e.BranchID = b.BranchID\nJOIN \n    Employees e2 ON b.BranchID = e2.BranchID\nLEFT JOIN \n    Loans l ON e.EmployeeID = l.CustomerID\nLEFT JOIN \n    InsurancePolicies ip ON e.EmployeeID = ip.CustomerID\nWHERE \n    e.Position IN ('Банкир', 'Кредитный специалист')\nGROUP BY \n    e.EmployeeID, e.FirstName, e.LastName, e.Position\nORDER BY \n    AvgBranchSalary DESC;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    e.FirstName,\n    e.LastName,\n    e.Position,\n    COUNT(DISTINCT l.LoanID) AS ManagedLoans,\n    COUNT(DISTINCT ip.PolicyID) AS ManagedPolicies,\n    AVG(e2.Salary) AS AvgBranchSalary\nFROM \n    Employees e\nJOIN \n    Branches b ON e.BranchID = b.BranchID\nJOIN \n    Employees e2 ON e2.BranchID = b.BranchID\nLEFT JOIN \n    Loans l ON l.CustomerID IN (SELECT CustomerID FROM Accounts WHERE AccountID IN (SELECT AccountID FROM Transactions))\nLEFT JOIN \n    InsurancePolicies ip ON ip.CustomerID IN (SELECT CustomerID FROM Accounts WHERE AccountID IN (SELECT AccountID FROM Transactions))\nWHERE \n    e.Position IN ('Банкир', 'Кредитный специалист')\nGROUP BY \n    e.EmployeeID, e.FirstName, e.LastName, e.Position\nORDER BY \n    AvgBranchSalary;",
            "gigachat_response": "SELECT \n    e.FirstName, \n    e.LastName, \n    e.Position, \n    COUNT(DISTINCT l.LoanID) AS ManagedLoansCount,\n    COUNT(DISTINCT ip.PolicyID) AS ManagedInsurancePolicesCount,\n    AVG(e.Salary) OVER (PARTITION BY e.BranchID) AS AverageSalaryInBranch\nFROM \n    Employees e\nLEFT JOIN \n    Loans l ON e.EmployeeID = l.CustomerID -- Assuming loans are managed by employees directly linked via customer ID\nLEFT JOIN \n    InsurancePolicies ip ON e.EmployeeID = ip.CustomerID -- Same assumption for insurance policies\nWHERE \n    e.Position IN ('Банкир', 'Кредитный специалист')\nGROUP BY \n    e.FirstName, e.LastName, e.Position, e.BranchID, e.Salary\nORDER BY \n    AverageSalaryInBranch ASC;",
            "gigachat_response_ru": "SELECT \n    e.FirstName, \n    e.LastName, \n    e.Position, \n    COUNT(DISTINCT l.LoanID) AS ManagedLoansCount,\n    COUNT(DISTINCT ip.PolicyID) AS ManagedInsurancePolicesCount,\n    AVG(e.Salary) OVER (PARTITION BY e.BranchID) AS AverageSalaryInBranch\nFROM \n    Employees e\nLEFT JOIN \n    Loans l ON e.EmployeeID = l.CustomerID -- Предположим, что сотрудник управляет кредитами клиента\nLEFT JOIN \n    InsurancePolicies ip ON e.EmployeeID = ip.CustomerID -- Предположим, что сотрудник управляет страховкой клиента\nWHERE \n    e.Position IN ('Банкир', 'Кредитный специалист')\nGROUP BY \n    e.EmployeeID, e.FirstName, e.LastName, e.Position\nORDER BY \n    AverageSalaryInBranch ASC;"
        },
        {
            "question": "Какие 10 клиентов с активными вкладами имеют наибольший объем операций по вкладам? Покажите имя и фамилию клиента, количество активных вкладов, общий объем операций по вкладам и среднюю сумму операций.",
            "sql_query": "SELECT c.FirstName, c.LastName, (SELECT COUNT(*) FROM Deposits d WHERE d.CustomerID = c.CustomerID AND d.Status = 'Активен') AS ActiveDeposits, (SELECT SUM(dt.Amount) FROM DepositTransactions dt WHERE dt.DepositID IN (SELECT d.DepositID FROM Deposits d WHERE d.CustomerID = c.CustomerID) AND dt.Status = 'Завершено') AS TotalDepositTransactions, (SELECT AVG(dt.Amount) FROM DepositTransactions dt WHERE dt.DepositID IN (SELECT d.DepositID FROM Deposits d WHERE d.CustomerID = c.CustomerID) AND dt.Status = 'Завершено') AS AverageDepositTransaction FROM Customers c WHERE c.CustomerID IN (SELECT DISTINCT CustomerID FROM Deposits WHERE Status = 'Активен') ORDER BY TotalDepositTransactions DESC LIMIT 10;",
            "gpt-4o_response": "SELECT \n    c.FirstName, \n    c.LastName, \n    COUNT(d.DepositID) AS ActiveDepositsCount, \n    SUM(dt.Amount) AS TotalDepositTransactionVolume, \n    AVG(dt.Amount) AS AvgDepositTransactionAmount\nFROM \n    Customers c\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID\nJOIN \n    DepositTransactions dt ON d.DepositID = dt.DepositID\nWHERE \n    d.Status = 'Активен' \n    AND dt.Status = 'Завершено'\nGROUP BY \n    c.FirstName, c.LastName\nORDER BY \n    TotalDepositTransactionVolume DESC\nLIMIT 10;",
            "gpt-4o_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    COUNT(d.DepositID) AS ActiveDepositsCount, \n    SUM(dt.Amount) AS TotalDepositTransactionAmount, \n    AVG(dt.Amount) AS AvgDepositTransactionAmount\nFROM \n    Customers c\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID\nJOIN \n    DepositTransactions dt ON d.DepositID = dt.DepositID\nWHERE \n    d.Status = 'Активен'\n    AND dt.Status = 'Завершено'\nGROUP BY \n    c.FirstName, \n    c.LastName\nORDER BY \n    TotalDepositTransactionAmount DESC\nLIMIT 10;",
            "google/gemini-2.0-flash-001_response": "SELECT \n    c.FirstName,\n    c.LastName,\n    COUNT(DISTINCT d.DepositID) AS ActiveDepositsCount,\n    SUM(dt.Amount) AS TotalDepositTransactionAmount,\n    AVG(dt.Amount) AS AverageDepositTransactionAmount\nFROM Customers c\nJOIN Deposits d ON c.CustomerID = d.CustomerID\nJOIN DepositTransactions dt ON d.DepositID = dt.DepositID\nWHERE d.Status = 'Активен'\nGROUP BY c.CustomerID, c.FirstName, c.LastName\nORDER BY TotalDepositTransactionAmount DESC\nLIMIT 10;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    c.FirstName,\n    c.LastName,\n    COUNT(DISTINCT d.DepositID) AS ActiveDepositsCount,\n    SUM(dt.Amount) AS TotalDepositTransactionAmount,\n    AVG(dt.Amount) AS AverageDepositTransactionAmount\nFROM\n    Customers c\nJOIN\n    Deposits d ON c.CustomerID = d.CustomerID\nJOIN\n    DepositTransactions dt ON d.DepositID = dt.DepositID\nWHERE\n    d.Status = 'Активен'\nGROUP BY\n    c.CustomerID, c.FirstName, c.LastName\nORDER BY\n    TotalDepositTransactionAmount DESC\nLIMIT 10;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    c.FirstName, \n    c.LastName, \n    COUNT(d.DepositID) AS ActiveDeposits, \n    SUM(dt.Amount) AS TotalTransactionAmount, \n    AVG(dt.Amount) AS AverageTransactionAmount\nFROM \n    Customers c\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID\nJOIN \n    DepositTransactions dt ON d.DepositID = dt.DepositID\nWHERE \n    d.Status = 'Активен'\nGROUP BY \n    c.FirstName, \n    c.LastName\nORDER BY \n    TotalTransactionAmount DESC\nLIMIT 10;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    COUNT(d.DepositID) AS ActiveDeposits, \n    SUM(dt.Amount) AS TotalDepositTransactions, \n    AVG(dt.Amount) AS AverageDepositTransaction\nFROM \n    Customers c\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID\nJOIN \n    DepositTransactions dt ON d.DepositID = dt.DepositID\nWHERE \n    d.Status = 'Активен'\nGROUP BY \n    c.FirstName, \n    c.LastName\nORDER BY \n    TotalDepositTransactions DESC\nLIMIT 10;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    c.FirstName, \n    c.LastName, \n    COUNT(DISTINCT d.DepositID) AS ActiveDepositsCount, \n    SUM(dt.Amount) AS TotalDepositTransactionsAmount, \n    AVG(dt.Amount) AS AvgDepositTransactionAmount\nFROM \n    Customers c\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID\nJOIN \n    DepositTransactions dt ON d.DepositID = dt.DepositID\nWHERE \n    d.Status = 'Активен'\n    AND dt.Status = 'Завершено'\nGROUP BY \n    c.CustomerID, c.FirstName, c.LastName\nORDER BY \n    TotalDepositTransactionsAmount DESC\nLIMIT 10;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    COUNT(DISTINCT d.DepositID) AS ActiveDepositsCount,\n    SUM(dt.Amount) AS TotalDepositTransactionsAmount,\n    AVG(dt.Amount) AS AvgDepositTransactionAmount\nFROM \n    Customers c\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID AND d.Status = 'Активен'\nJOIN \n    DepositTransactions dt ON d.DepositID = dt.DepositID\nGROUP BY \n    c.CustomerID, c.FirstName, c.LastName\nORDER BY \n    TotalDepositTransactionsAmount DESC\nLIMIT 10;",
            "gigachat_response": "SELECT TOP 10\n    c.FirstName + ' ' + c.LastName AS FullName,\n    COUNT(d.DepositID) AS NumberOfActiveDeposits,\n    SUM(dt.Amount) AS TotalDepositTransactionVolume,\n    AVG(dt.Amount) AS AverageDepositTransactionAmount\nFROM\n    Customers c\nINNER JOIN Deposits d ON c.CustomerID = d.CustomerID\nINNER JOIN DepositTransactions dt ON d.DepositID = dt.DepositID\nWHERE\n    d.Status = 'Активен'\nGROUP BY\n    c.FirstName, c.LastName\nORDER BY\n    TotalDepositTransactionVolume DESC;",
            "gigachat_response_ru": "SELECT TOP 10\n    c.FirstName + ' ' + c.LastName AS FullName,\n    COUNT(d.DepositID) AS NumberOfActiveDeposits,\n    SUM(dt.Amount) AS TotalDepositOperationsVolume,\n    AVG(dt.Amount) AS AverageOperationAmount\nFROM Customers c\nINNER JOIN Deposits d ON c.CustomerID = d.CustomerID\nINNER JOIN DepositTransactions dt ON d.DepositID = dt.DepositID\nWHERE d.Status = 'Активен'\nGROUP BY c.FirstName, c.LastName\nORDER BY TotalDepositOperationsVolume DESC;"
        },
        {
            "question": "Какие 5 филиалов банка имеют наибольший доход от услуг? Покажите название отделения, количество активных услуг и общий доход от услуг.",
            "sql_query": "SELECT b.BranchName, (SELECT COUNT(*) FROM CustomerServices cs WHERE cs.CustomerID IN (SELECT c.CustomerID FROM Customers c WHERE c.CustomerID IN (SELECT a.CustomerID FROM Accounts a WHERE a.CustomerID IN (SELECT e.EmployeeID FROM Employees e WHERE e.BranchID = b.BranchID))) AND cs.Status = 'активен') AS ActiveServices, (SELECT SUM(s.Fee) FROM Services s WHERE s.ServiceID IN (SELECT cs.ServiceID FROM CustomerServices cs WHERE cs.CustomerID IN (SELECT c.CustomerID FROM Customers c WHERE c.CustomerID IN (SELECT a.CustomerID FROM Accounts a WHERE a.CustomerID IN (SELECT e.EmployeeID FROM Employees e WHERE e.BranchID = b.BranchID)))) AND s.Status = 'Активен') AS TotalServiceRevenue FROM Branches b ORDER BY TotalServiceRevenue DESC LIMIT 5;",
            "gpt-4o_response": "SELECT b.BranchName, COUNT(cs.ServiceID) AS ActiveServicesCount, SUM(s.Fee) AS TotalServiceIncome\nFROM Branches b\nJOIN Employees e ON b.BranchID = e.BranchID\nJOIN Customers c ON e.EmployeeID = c.CustomerID\nJOIN CustomerServices cs ON c.CustomerID = cs.CustomerID\nJOIN Services s ON cs.ServiceID = s.ServiceID\nWHERE cs.Status = 'активен' AND s.Status = 'Активен'\nGROUP BY b.BranchName\nORDER BY TotalServiceIncome DESC\nLIMIT 5;",
            "gpt-4o_response_ru": "SELECT \n    b.BranchName, \n    COUNT(cs.CustomerServiceID) AS ActiveServicesCount, \n    SUM(s.Fee) AS TotalServiceIncome\nFROM \n    Branches b\nJOIN \n    Employees e ON b.BranchID = e.BranchID\nJOIN \n    CustomerServices cs ON e.EmployeeID = cs.CustomerID\nJOIN \n    Services s ON cs.ServiceID = s.ServiceID\nWHERE \n    cs.Status = 'активен' AND s.Status = 'Активен'\nGROUP BY \n    b.BranchName\nORDER BY \n    TotalServiceIncome DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    b.BranchName,\n    COUNT(DISTINCT cs.ServiceID) AS NumberOfActiveServices,\n    SUM(s.Fee) AS TotalServiceIncome\nFROM\n    Branches b\nJOIN\n    Employees e ON b.BranchID = e.BranchID\nJOIN\n    Customers c ON e.EmployeeID = c.CustomerID\nJOIN\n    CustomerServices cs ON c.CustomerID = cs.CustomerID\nJOIN\n    Services s ON cs.ServiceID = s.ServiceID\nWHERE\n    cs.Status = 'активен' AND s.Status = 'Активен'\nGROUP BY\n    b.BranchName\nORDER BY\n    TotalServiceIncome DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    b.BranchName,\n    COUNT(DISTINCT cs.ServiceID) AS NumberOfActiveServices,\n    SUM(s.Fee) AS TotalServiceIncome\nFROM Branches b\nJOIN Employees e ON b.BranchID = e.BranchID\nJOIN Customers c ON e.EmployeeID = c.CustomerID  -- Предполагаем, что сотрудники обслуживают клиентов\nJOIN CustomerServices cs ON c.CustomerID = cs.CustomerID\nJOIN Services s ON cs.ServiceID = s.ServiceID\nWHERE cs.Status = 'активен' AND s.Status = 'Активен'\nGROUP BY b.BranchName\nORDER BY TotalServiceIncome DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    b.BranchName, \n    COUNT(cs.CustomerServiceID) AS ActiveServices, \n    SUM(s.Fee) AS TotalServiceRevenue\nFROM \n    Branches b\nJOIN \n    Employees e ON b.BranchID = e.BranchID\nJOIN \n    Customers c ON e.EmployeeID = c.CustomerID\nJOIN \n    CustomerServices cs ON c.CustomerID = cs.CustomerID\nJOIN \n    Services s ON cs.ServiceID = s.ServiceID\nWHERE \n    cs.Status = 'активен'\nGROUP BY \n    b.BranchName\nORDER BY \n    TotalServiceRevenue DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    b.BranchName, \n    COUNT(cs.CustomerServiceID) AS ActiveServices, \n    SUM(s.Fee) AS TotalRevenue\nFROM \n    Branches b\nJOIN \n    Employees e ON b.BranchID = e.BranchID\nJOIN \n    Customers c ON e.EmployeeID = c.CustomerID\nJOIN \n    CustomerServices cs ON c.CustomerID = cs.CustomerID\nJOIN \n    Services s ON cs.ServiceID = s.ServiceID\nWHERE \n    cs.Status = 'активен' AND s.Status = 'Активен'\nGROUP BY \n    b.BranchName\nORDER BY \n    TotalRevenue DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT b.BranchName, \n       COUNT(cs.CustomerServiceID) AS ActiveServicesCount,\n       SUM(s.Fee) AS TotalRevenue\nFROM Branches b\nJOIN Employees e ON b.BranchID = e.BranchID\nJOIN CustomerServices cs ON e.EmployeeID = cs.CustomerID\nJOIN Services s ON cs.ServiceID = s.ServiceID\nWHERE cs.Status = 'активен' AND s.Status = 'Активен'\nGROUP BY b.BranchName\nORDER BY TotalRevenue DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT b.BranchName, \n       COUNT(cs.CustomerServiceID) AS ActiveServicesCount,\n       SUM(s.Fee) AS TotalIncome\nFROM Branches b\nJOIN Employees e ON b.BranchID = e.BranchID\nJOIN CustomerServices cs ON e.EmployeeID = cs.CustomerID\nJOIN Services s ON cs.ServiceID = s.ServiceID\nWHERE cs.Status = 'активен' AND s.Status = 'Активен'\nGROUP BY b.BranchName\nORDER BY TotalIncome DESC\nLIMIT 5;",
            "gigachat_response": "SELECT \n    b.BranchName,\n    COUNT(DISTINCT cs.ServiceID) AS NumberOfActiveServices,\n    SUM(s.Fee) AS TotalRevenueFromServices\nFROM \n    Branches b\nJOIN \n    Employees e ON b.BranchID = e.BranchID\nJOIN \n    Customers c ON e.EmployeeID = c.CustomerID\nJOIN \n    CustomerServices cs ON c.CustomerID = cs.CustomerID\nJOIN \n    Services s ON cs.ServiceID = s.ServiceID\nWHERE \n    cs.Status = 'активен'\nGROUP BY \n    b.BranchName\nORDER BY \n    TotalRevenueFromServices DESC\nLIMIT 5;",
            "gigachat_response_ru": "SELECT \n    b.BranchName,\n    COUNT(DISTINCT cs.ServiceID) AS ActiveServicesCount,\n    SUM(s.Fee) AS TotalRevenueFromServices\nFROM \n    Branches b\nJOIN \n    Employees e ON b.BranchID = e.BranchID\nJOIN \n    Customers c ON e.EmployeeID = c.CustomerID\nJOIN \n    CustomerServices cs ON c.CustomerID = cs.CustomerID\nJOIN \n    Services s ON cs.ServiceID = s.ServiceID\nWHERE \n    cs.Status = 'активен'\nGROUP BY \n    b.BranchName\nORDER BY \n    TotalRevenueFromServices DESC\nLIMIT 5;"
        },
        {
            "question": "Какие 5 кредитных специалистов имеют наибольшее количество управляемых кредитов? Покажите имя и фамилию сотрудника, должность, количество управляемых кредитов, среднюю процентную ставку по кредитам и общую сумму выплат по кредитам.",
            "sql_query": "SELECT e.FirstName, e.LastName, e.Position, (SELECT COUNT(*) FROM Loans l WHERE l.CustomerID = e.EmployeeID AND l.Status = 'Активно') AS ManagedLoans, (SELECT AVG(l.InterestRate) FROM Loans l WHERE l.CustomerID = e.EmployeeID AND l.Status = 'Активно') AS AverageLoanInterest, (SELECT SUM(lp.Amount) FROM LoanPayments lp WHERE lp.LoanID IN (SELECT l.LoanID FROM Loans l WHERE l.CustomerID = e.EmployeeID) AND lp.Status = 'Завершено') AS TotalLoanPayments FROM Employees e WHERE e.Position = 'Кредитный специалист' ORDER BY ManagedLoans DESC LIMIT 5;",
            "gpt-4o_response": "SELECT e.FirstName, e.LastName, e.Position, COUNT(l.LoanID) AS ManagedLoans, AVG(l.InterestRate) AS AvgInterestRate, SUM(lp.Amount) AS TotalLoanPayments\nFROM Employees e\nJOIN Loans l ON e.EmployeeID = l.CustomerID\nJOIN LoanPayments lp ON l.LoanID = lp.LoanID\nWHERE e.Position = 'Кредитный специалист'\nGROUP BY e.FirstName, e.LastName, e.Position\nORDER BY ManagedLoans DESC\nLIMIT 5;",
            "gpt-4o_response_ru": "SELECT \n    e.FirstName, \n    e.LastName, \n    e.Position, \n    COUNT(l.LoanID) AS ManagedLoansCount, \n    AVG(l.InterestRate) AS AverageInterestRate, \n    SUM(lp.Amount) AS TotalLoanPayments\nFROM \n    Employees e\nJOIN \n    Loans l ON e.EmployeeID = l.CustomerID\nJOIN \n    LoanPayments lp ON l.LoanID = lp.LoanID\nWHERE \n    l.Status = 'Активно'\nGROUP BY \n    e.FirstName, \n    e.LastName, \n    e.Position\nORDER BY \n    ManagedLoansCount DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    e.FirstName,\n    e.LastName,\n    e.Position,\n    COUNT(l.LoanID) AS TotalLoansManaged,\n    AVG(l.InterestRate) AS AverageInterestRate,\n    SUM(lp.Amount) AS TotalLoanPaymentsAmount\nFROM\n    Employees e\nJOIN\n    Loans l ON e.EmployeeID = l.CustomerID\nLEFT JOIN\n    LoanPayments lp ON l.LoanID = lp.LoanID\nWHERE e.Position = 'Кредитный специалист'\nGROUP BY\n    e.EmployeeID, e.FirstName, e.LastName, e.Position\nORDER BY\n    TotalLoansManaged DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    e.FirstName,\n    e.LastName,\n    e.Position,\n    COUNT(l.LoanID) AS TotalLoansManaged,\n    AVG(l.InterestRate) AS AverageInterestRate,\n    SUM(lp.Amount) AS TotalPaymentsAmount\nFROM\n    Employees e\nJOIN\n    Loans l ON e.EmployeeID = l.CustomerID\nLEFT JOIN\n    LoanPayments lp ON l.LoanID = lp.LoanID\nWHERE\n    e.Position = 'Кредитный специалист'\nGROUP BY\n    e.EmployeeID, e.FirstName, e.LastName, e.Position\nORDER BY\n    TotalLoansManaged DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    e.FirstName, \n    e.LastName, \n    e.Position, \n    COUNT(l.LoanID) AS TotalLoansManaged, \n    AVG(l.InterestRate) AS AverageInterestRate, \n    SUM(lp.Amount) AS TotalLoanPayments\nFROM \n    Employees e\nJOIN \n    Loans l ON e.EmployeeID = l.CustomerID\nJOIN \n    LoanPayments lp ON l.LoanID = lp.LoanID\nWHERE \n    e.Position = 'Кредитный специалист'\nGROUP BY \n    e.FirstName, \n    e.LastName, \n    e.Position\nORDER BY \n    TotalLoansManaged DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    e.FirstName, \n    e.LastName, \n    e.Position, \n    COUNT(l.LoanID) AS TotalLoans, \n    AVG(l.InterestRate) AS AverageInterestRate, \n    SUM(lp.Amount) AS TotalLoanPayments\nFROM \n    Employees e\nJOIN \n    Loans l ON e.EmployeeID = l.CustomerID\nJOIN \n    LoanPayments lp ON l.LoanID = lp.LoanID\nWHERE \n    e.Position = 'Кредитный специалист'\nGROUP BY \n    e.FirstName, \n    e.LastName, \n    e.Position\nORDER BY \n    TotalLoans DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT e.FirstName, e.LastName, e.Position, COUNT(l.LoanID) AS LoanCount, AVG(l.InterestRate) AS AvgInterestRate, SUM(lp.Amount) AS TotalPayments\nFROM Employees e\nJOIN Loans l ON e.EmployeeID = l.CustomerID\nJOIN LoanPayments lp ON l.LoanID = lp.LoanID\nWHERE e.Position = 'Кредитный специалист' AND lp.Status = 'Завершено'\nGROUP BY e.FirstName, e.LastName, e.Position\nORDER BY LoanCount DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    e.FirstName, \n    e.LastName, \n    e.Position, \n    COUNT(l.LoanID) AS TotalLoans,\n    AVG(l.InterestRate) AS AvgInterestRate,\n    SUM(lp.Amount) AS TotalPayments\nFROM \n    Employees e\nJOIN \n    Loans l ON e.EmployeeID = l.CustomerID\nLEFT JOIN \n    LoanPayments lp ON l.LoanID = lp.LoanID AND lp.Status = 'Завершено'\nWHERE \n    e.Position = 'Кредитный специалист'\nGROUP BY \n    e.EmployeeID, e.FirstName, e.LastName, e.Position\nORDER BY \n    TotalLoans DESC\nLIMIT 5;",
            "gigachat_response": "SELECT \n    e.FirstName, \n    e.LastName, \n    e.Position, \n    COUNT(l.LoanID) AS ManagedLoansCount,\n    ROUND(AVG(l.InterestRate), 2) AS AverageInterestRate,\n    SUM(lp.Amount) AS TotalLoanPayments\nFROM \n    Employees e\nINNER JOIN \n    Loans l ON e.EmployeeID = l.CustomerID -- Assuming employee manages loans directly linked to customer ID\nLEFT JOIN \n    LoanPayments lp ON l.LoanID = lp.LoanID\nWHERE \n    e.Position = 'Кредитный специалист'\nGROUP BY \n    e.FirstName, e.LastName, e.Position\nORDER BY \n    ManagedLoansCount DESC\nLIMIT 5;",
            "gigachat_response_ru": "SELECT \n    e.FirstName, \n    e.LastName, \n    e.Position, \n    COUNT(l.LoanID) AS ManagedLoansCount,\n    ROUND(AVG(l.InterestRate), 2) AS AverageInterestRate,\n    SUM(lp.Amount) AS TotalLoanPayments\nFROM \n    Employees e\nINNER JOIN \n    Loans l ON e.EmployeeID = l.CustomerID -- Предположим, что сотрудник управляет клиентом, взявшим кредит\nLEFT JOIN \n    LoanPayments lp ON l.LoanID = lp.LoanID\nWHERE \n    e.Position = 'Кредитный специалист'\nGROUP BY \n    e.FirstName, e.LastName, e.Position\nORDER BY \n    ManagedLoansCount DESC\nLIMIT 5;"
        },
        {
            "question": "Какие 10 клиентов с активными страховыми полисами имеют наибольшую сумму выплаченных возмещений? Покажите имя и фамилию клиента, количество активных страховых полисов, количество выплаченных возмещений и общую сумму выплаченных возмещений.",
            "sql_query": "SELECT c.FirstName, c.LastName, (SELECT COUNT(*) FROM InsurancePolicies ip WHERE ip.CustomerID = c.CustomerID AND ip.Status = 'Активен') AS ActivePolicies, (SELECT COUNT(*) FROM PolicyClaims pc WHERE pc.PolicyID IN (SELECT ip.PolicyID FROM InsurancePolicies ip WHERE ip.CustomerID = c.CustomerID) AND pc.Status = 'Выплачено') AS TotalClaims, (SELECT SUM(pc.ClaimAmount) FROM PolicyClaims pc WHERE pc.PolicyID IN (SELECT ip.PolicyID FROM InsurancePolicies ip WHERE ip.CustomerID = c.CustomerID) AND pc.Status = 'Выплачено') AS TotalClaimAmount FROM Customers c WHERE c.CustomerID IN (SELECT DISTINCT CustomerID FROM InsurancePolicies WHERE Status = 'Активен') ORDER BY TotalClaimAmount DESC LIMIT 10;",
            "gpt-4o_response": "SELECT \n    c.FirstName, \n    c.LastName, \n    COUNT(DISTINCT ip.PolicyID) AS ActiveInsurancePolicies, \n    COUNT(DISTINCT pc.ClaimID) AS PaidClaims, \n    SUM(pc.ClaimAmount) AS TotalPaidClaimsAmount\nFROM \n    Customers c\nJOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nJOIN \n    PolicyClaims pc ON ip.PolicyID = pc.PolicyID\nWHERE \n    ip.Status = 'Активен' \n    AND pc.Status = 'Выплачено'\nGROUP BY \n    c.FirstName, c.LastName\nORDER BY \n    TotalPaidClaimsAmount DESC\nLIMIT 10;",
            "gpt-4o_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    COUNT(DISTINCT ip.PolicyID) AS ActiveInsurancePolicies,\n    COUNT(DISTINCT pc.ClaimID) AS PaidClaims,\n    SUM(pc.ClaimAmount) AS TotalPaidClaimsAmount\nFROM \n    Customers c\nJOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nJOIN \n    PolicyClaims pc ON ip.PolicyID = pc.PolicyID\nWHERE \n    ip.Status = 'Активен' AND pc.Status = 'Выплачено'\nGROUP BY \n    c.FirstName, c.LastName\nORDER BY \n    TotalPaidClaimsAmount DESC\nLIMIT 10;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    c.FirstName,\n    c.LastName,\n    (SELECT COUNT(*) FROM InsurancePolicies ip WHERE ip.CustomerID = c.CustomerID AND ip.Status = 'Активен') AS ActivePoliciesCount,\n    COUNT(pc.ClaimID) AS TotalClaimsCount,\n    SUM(pc.ClaimAmount) AS TotalClaimAmount\nFROM Customers c\nJOIN InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nJOIN PolicyClaims pc ON ip.PolicyID = pc.PolicyID\nWHERE ip.Status = 'Активен' AND pc.Status IN ('Выплачено', 'Утверждено')\nGROUP BY c.CustomerID, c.FirstName, c.LastName\nORDER BY TotalClaimAmount DESC\nLIMIT 10;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    c.FirstName,\n    c.LastName,\n    COUNT(DISTINCT ip.PolicyID) AS ActivePoliciesCount,\n    COUNT(DISTINCT pc.ClaimID) AS PaidClaimsCount,\n    SUM(pc.ClaimAmount) AS TotalClaimAmount\nFROM\n    Customers c\nJOIN\n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nLEFT JOIN\n    PolicyClaims pc ON ip.PolicyID = pc.PolicyID\nWHERE\n    ip.Status = 'Активен' AND pc.Status = 'Выплачено'\nGROUP BY\n    c.CustomerID, c.FirstName, c.LastName\nORDER BY\n    TotalClaimAmount DESC\nLIMIT 10;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    c.FirstName, \n    c.LastName, \n    COUNT(DISTINCT ip.PolicyID) AS ActivePolicies, \n    COUNT(pc.ClaimID) AS PaidClaims, \n    SUM(pc.ClaimAmount) AS TotalPaidAmount\nFROM \n    Customers c\nJOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nJOIN \n    PolicyClaims pc ON ip.PolicyID = pc.PolicyID\nWHERE \n    ip.Status = 'Активен' AND pc.Status = 'Выплачено'\nGROUP BY \n    c.FirstName, c.LastName\nORDER BY \n    TotalPaidAmount DESC\nLIMIT 10;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    COUNT(DISTINCT ip.PolicyID) AS ActivePolicies, \n    COUNT(pc.ClaimID) AS PaidClaims, \n    SUM(pc.ClaimAmount) AS TotalPaidAmount\nFROM \n    Customers c\nJOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nJOIN \n    PolicyClaims pc ON ip.PolicyID = pc.PolicyID\nWHERE \n    ip.Status = 'Активен' AND pc.Status = 'Выплачено'\nGROUP BY \n    c.FirstName, c.LastName\nORDER BY \n    TotalPaidAmount DESC\nLIMIT 10;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT c.FirstName, c.LastName, \n       COUNT(DISTINCT ip.PolicyID) AS ActivePoliciesCount,\n       COUNT(pc.ClaimID) AS PaidClaimsCount,\n       SUM(pc.ClaimAmount) AS TotalPaidClaimsAmount\nFROM Customers c\nJOIN InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nJOIN PolicyClaims pc ON ip.PolicyID = pc.PolicyID\nWHERE ip.Status = 'Активен' AND pc.Status = 'Выплачено'\nGROUP BY c.CustomerID, c.FirstName, c.LastName\nORDER BY TotalPaidClaimsAmount DESC\nLIMIT 10;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    COUNT(DISTINCT ip.PolicyID) AS ActivePoliciesCount,\n    COUNT(pc.ClaimID) AS PaidClaimsCount,\n    SUM(pc.ClaimAmount) AS TotalPaidClaimsAmount\nFROM \n    Customers c\nJOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nLEFT JOIN \n    PolicyClaims pc ON ip.PolicyID = pc.PolicyID AND pc.Status = 'Выплачено'\nWHERE \n    ip.Status = 'Активен'\nGROUP BY \n    c.CustomerID, c.FirstName, c.LastName\nORDER BY \n    TotalPaidClaimsAmount DESC\nLIMIT 10;",
            "gigachat_response": "SELECT \n    c.FirstName, \n    c.LastName, \n    COUNT(ip.PolicyID) AS NumberOfActiveInsurancePolicies,\n    COUNT(pc.ClaimID) AS NumberOfPaidClaims,\n    SUM(pc.ClaimAmount) AS TotalPaidClaimsAmount\nFROM \n    Customers c\nJOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nLEFT JOIN \n    PolicyClaims pc ON ip.PolicyID = pc.PolicyID AND pc.Status = 'Выплачено'\nWHERE \n    ip.Status = 'Активен'\nGROUP BY \n    c.FirstName, c.LastName\nORDER BY \n    TotalPaidClaimsAmount DESC\nLIMIT 10;",
            "gigachat_response_ru": "SELECT TOP 10\n    c.FirstName + ' ' + c.LastName AS FullName,\n    COUNT(ip.PolicyID) AS ActiveInsurancePolicesCount,\n    COUNT(pc.ClaimID) AS ClaimsPaidCount,\n    SUM(pc.ClaimAmount) AS TotalClaimsPaidAmount\nFROM Customers c\nINNER JOIN InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nLEFT JOIN PolicyClaims pc ON ip.PolicyID = pc.PolicyID\nWHERE ip.Status = 'Активен' AND pc.Status = 'Выплачено'\nGROUP BY c.FirstName, c.LastName\nORDER BY TotalClaimsPaidAmount DESC;"
        },
        {
            "question": "Какие 5 филиалов банка имеют наибольший объем транзакций? Покажите название отделения, общее количество сотрудников, среднюю зарплату сотрудников и общий объем транзакций.",
            "sql_query": "SELECT b.BranchName, (SELECT COUNT(*) FROM Employees e WHERE e.BranchID = b.BranchID) AS TotalEmployees, (SELECT AVG(e.Salary) FROM Employees e WHERE e.BranchID = b.BranchID) AS AverageSalary, (SELECT SUM(t.Amount) FROM Transactions t WHERE t.AccountID IN (SELECT a.AccountID FROM Accounts a WHERE a.CustomerID IN (SELECT e.EmployeeID FROM Employees e WHERE e.BranchID = b.BranchID)) AND t.Status = 'Завершено') AS TotalTransactionVolume FROM Branches b ORDER BY TotalTransactionVolume DESC LIMIT 5;",
            "gpt-4o_response": "SELECT \n    b.BranchName, \n    COUNT(e.EmployeeID) AS TotalEmployees, \n    AVG(e.Salary) AS AverageSalary, \n    SUM(t.Amount) AS TotalTransactionVolume\nFROM \n    Branches b\nJOIN \n    Employees e ON b.BranchID = e.BranchID\nJOIN \n    Accounts a ON a.CustomerID IN (SELECT CustomerID FROM Customers WHERE CustomerID = e.EmployeeID)\nJOIN \n    Transactions t ON t.AccountID = a.AccountID\nWHERE \n    t.Status = 'Завершено'\nGROUP BY \n    b.BranchName\nORDER BY \n    TotalTransactionVolume DESC\nLIMIT 5;",
            "gpt-4o_response_ru": "SELECT b.BranchName, \n       COUNT(e.EmployeeID) AS TotalEmployees, \n       AVG(e.Salary) AS AverageSalary, \n       SUM(t.Amount) AS TotalTransactionVolume\nFROM Branches b\nJOIN Employees e ON b.BranchID = e.BranchID\nJOIN Accounts a ON e.BranchID = a.CustomerID\nJOIN Transactions t ON a.AccountID = t.AccountID\nGROUP BY b.BranchName\nORDER BY TotalTransactionVolume DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    b.BranchName,\n    COUNT(DISTINCT e.EmployeeID) AS TotalEmployees,\n    AVG(e.Salary) AS AverageSalary,\n    SUM(t.Amount) AS TotalTransactionAmount\nFROM\n    Branches b\nJOIN\n    Employees e ON b.BranchID = e.BranchID\nJOIN\n    Accounts a ON e.EmployeeID = a.CustomerID  -- Assuming customer ID is used as employee ID\nJOIN\n    Transactions t ON a.AccountID = t.AccountID\nGROUP BY\n    b.BranchName\nORDER BY\n    TotalTransactionAmount DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    b.BranchName,\n    COUNT(DISTINCT e.EmployeeID) AS TotalEmployees,\n    AVG(e.Salary) AS AverageSalary,\n    SUM(t.Amount) AS TotalTransactionAmount\nFROM Branches b\nJOIN Employees e ON b.BranchID = e.BranchID\nJOIN Accounts a ON e.EmployeeID = a.CustomerID\nJOIN Transactions t ON a.AccountID = t.AccountID\nGROUP BY b.BranchName\nORDER BY TotalTransactionAmount DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    b.BranchName, \n    COUNT(e.EmployeeID) AS TotalEmployees, \n    AVG(e.Salary) AS AverageSalary, \n    SUM(t.Amount) AS TotalTransactionAmount\nFROM \n    Branches b\nJOIN \n    Employees e ON b.BranchID = e.BranchID\nJOIN \n    Accounts a ON e.BranchID = (SELECT BranchID FROM ATMs WHERE ATMID = (SELECT ATMID FROM Transactions WHERE AccountID = a.AccountID))\nJOIN \n    Transactions t ON a.AccountID = t.AccountID\nGROUP BY \n    b.BranchName\nORDER BY \n    TotalTransactionAmount DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n  b.BranchName, \n  COUNT(e.EmployeeID) AS TotalEmployees, \n  AVG(e.Salary) AS AverageSalary, \n  SUM(t.Amount) AS TotalTransactionAmount\nFROM \n  Branches b\n  JOIN Employees e ON b.BranchID = e.BranchID\n  JOIN Accounts a ON e.EmployeeID = a.CustomerID\n  JOIN Transactions t ON a.AccountID = t.AccountID\nGROUP BY \n  b.BranchName\nORDER BY \n  TotalTransactionAmount DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    b.BranchName,\n    COUNT(DISTINCT e.EmployeeID) AS TotalEmployees,\n    AVG(e.Salary) AS AverageSalary,\n    SUM(t.Amount) AS TotalTransactionAmount\nFROM \n    Branches b\nJOIN \n    Employees e ON b.BranchID = e.BranchID\nJOIN \n    Accounts a ON e.EmployeeID = a.CustomerID\nJOIN \n    Transactions t ON a.AccountID = t.AccountID\nWHERE \n    t.Status = 'Завершено'\nGROUP BY \n    b.BranchName\nORDER BY \n    TotalTransactionAmount DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    b.BranchName,\n    COUNT(e.EmployeeID) AS TotalEmployees,\n    AVG(e.Salary) AS AverageSalary,\n    SUM(t.Amount) AS TotalTransactionAmount\nFROM \n    Branches b\nJOIN \n    Employees e ON b.BranchID = e.BranchID\nJOIN \n    Accounts a ON e.EmployeeID = a.CustomerID\nJOIN \n    Transactions t ON a.AccountID = t.AccountID\nGROUP BY \n    b.BranchName\nORDER BY \n    TotalTransactionAmount DESC\nLIMIT 5;",
            "gigachat_response": "SELECT \n    b.BranchName,\n    COUNT(e.EmployeeID) AS TotalEmployees,\n    AVG(e.Salary) AS AverageSalary,\n    COALESCE(SUM(t.Amount), 0) AS TotalTransactionVolume\nFROM \n    Branches b\nLEFT JOIN \n    Employees e ON b.BranchID = e.BranchID\nLEFT JOIN \n    Accounts a ON e.BranchID = b.BranchID -- Assuming employees manage accounts at their branch\nLEFT JOIN \n    Transactions t ON a.AccountID = t.AccountID\nGROUP BY \n    b.BranchName\nORDER BY \n    TotalTransactionVolume DESC\nLIMIT 5;",
            "gigachat_response_ru": "SELECT \n    b.BranchName,\n    COUNT(e.EmployeeID) AS NumberOfEmployees,\n    AVG(e.Salary) AS AverageSalary,\n    COALESCE(SUM(t.Amount), 0) AS TotalTransactionVolume\nFROM \n    Branches b\nLEFT JOIN \n    Employees e ON b.BranchID = e.BranchID\nLEFT JOIN \n    Accounts a ON e.BranchID = b.BranchID -- Связываем филиалы через сотрудников и аккаунты\nLEFT JOIN \n    Transactions t ON a.AccountID = t.AccountID\nGROUP BY \n    b.BranchName\nORDER BY \n    TotalTransactionVolume DESC\nLIMIT 5;"
        },
        {
            "question": "Какие 10 клиентов с активными кредитами имеют наибольшую сумму кредитов и выплат? Покажите имя и фамилию клиента, количество активных кредитов, общую сумму кредитов, количество завершенных выплат и общую сумму выплат.",
            "sql_query": "SELECT c.FirstName, c.LastName, (SELECT COUNT(*) FROM Loans l WHERE l.CustomerID = c.CustomerID AND l.Status = 'Активно') AS ActiveLoans, (SELECT SUM(l.PrincipalAmount) FROM Loans l WHERE l.CustomerID = c.CustomerID AND l.Status = 'Активно') AS TotalLoanAmount, (SELECT COUNT(*) FROM LoanPayments lp WHERE lp.LoanID IN (SELECT l.LoanID FROM Loans l WHERE l.CustomerID = c.CustomerID) AND lp.Status = 'Завершено') AS CompletedPayments, (SELECT SUM(lp.Amount) FROM LoanPayments lp WHERE lp.LoanID IN (SELECT l.LoanID FROM Loans l WHERE l.CustomerID = c.CustomerID) AND lp.Status = 'Завершено') AS TotalPaidAmount FROM Customers c WHERE c.CustomerID IN (SELECT DISTINCT CustomerID FROM Loans WHERE Status = 'Активно') ORDER BY TotalLoanAmount DESC LIMIT 10;",
            "gpt-4o_response": "SELECT \n    c.FirstName, \n    c.LastName, \n    COUNT(l.LoanID) AS ActiveLoansCount, \n    SUM(l.PrincipalAmount) AS TotalLoanAmount, \n    (SELECT COUNT(lp.PaymentID) \n     FROM LoanPayments lp \n     WHERE lp.LoanID = l.LoanID AND lp.Status = 'Завершено') AS CompletedPaymentsCount, \n    (SELECT SUM(lp.Amount) \n     FROM LoanPayments lp \n     WHERE lp.LoanID = l.LoanID AND lp.Status = 'Завершено') AS TotalPaymentsAmount\nFROM \n    Customers c\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID\nWHERE \n    l.Status = 'Активно'\nGROUP BY \n    c.FirstName, c.LastName\nORDER BY \n    TotalLoanAmount DESC\nLIMIT 10;",
            "gpt-4o_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    COUNT(l.LoanID) AS ActiveLoansCount, \n    SUM(l.PrincipalAmount) AS TotalLoanAmount, \n    COUNT(lp.PaymentID) AS CompletedPaymentsCount, \n    SUM(lp.Amount) AS TotalPaymentsAmount\nFROM \n    Customers c\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID\nLEFT JOIN \n    LoanPayments lp ON l.LoanID = lp.LoanID AND lp.Status = 'Завершено'\nWHERE \n    l.Status = 'Активно'\nGROUP BY \n    c.FirstName, c.LastName\nORDER BY \n    (SUM(l.PrincipalAmount) + COALESCE(SUM(lp.Amount), 0)) DESC\nLIMIT 10;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    c.FirstName,\n    c.LastName,\n    COUNT(DISTINCT l.LoanID) AS ActiveLoanCount,\n    SUM(l.PrincipalAmount) AS TotalLoanAmount,\n    COUNT(DISTINCT lp.PaymentID) AS CompletedPaymentCount,\n    SUM(lp.Amount) AS TotalPaymentAmount\nFROM\n    Customers c\nJOIN\n    Loans l ON c.CustomerID = l.CustomerID\nLEFT JOIN\n    LoanPayments lp ON l.LoanID = lp.LoanID AND lp.Status = 'Завершено'\nWHERE\n    l.Status = 'Активно'\nGROUP BY\n    c.CustomerID, c.FirstName, c.LastName\nORDER BY\n    TotalLoanAmount + TotalPaymentAmount DESC\nLIMIT 10;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    c.FirstName,\n    c.LastName,\n    COUNT(DISTINCT l.LoanID) AS ActiveLoansCount,\n    SUM(l.PrincipalAmount) AS TotalLoanAmount,\n    COUNT(DISTINCT lp.PaymentID) AS CompletedPaymentsCount,\n    SUM(lp.Amount) AS TotalPaymentsAmount\nFROM\n    Customers c\nJOIN\n    Loans l ON c.CustomerID = l.CustomerID\nLEFT JOIN\n    LoanPayments lp ON l.LoanID = lp.LoanID AND lp.Status = 'Завершено'\nWHERE\n    l.Status = 'Активно'\nGROUP BY\n    c.CustomerID, c.FirstName, c.LastName\nORDER BY\n    TotalLoanAmount + TotalPaymentsAmount DESC\nLIMIT 10;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    c.FirstName, \n    c.LastName, \n    COUNT(DISTINCT l.LoanID) AS ActiveLoansCount, \n    SUM(l.PrincipalAmount) AS TotalLoanAmount, \n    COUNT(lp.PaymentID) AS CompletedPaymentsCount, \n    SUM(lp.Amount) AS TotalPaymentAmount\nFROM \n    Customers c\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID\nJOIN \n    LoanPayments lp ON l.LoanID = lp.LoanID\nWHERE \n    l.Status = 'Активно' AND lp.Status = 'Завершено'\nGROUP BY \n    c.FirstName, c.LastName\nORDER BY \n    TotalLoanAmount DESC, TotalPaymentAmount DESC\nLIMIT 10;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    COUNT(l.LoanID) AS ActiveLoansCount, \n    SUM(l.PrincipalAmount) AS TotalLoanAmount, \n    COUNT(lp.PaymentID) AS CompletedPaymentsCount, \n    SUM(lp.Amount) AS TotalPaymentAmount\nFROM \n    Customers c\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID\nJOIN \n    LoanPayments lp ON l.LoanID = lp.LoanID\nWHERE \n    l.Status = 'Активно' AND lp.Status = 'Завершено'\nGROUP BY \n    c.FirstName, c.LastName\nORDER BY \n    TotalLoanAmount DESC, TotalPaymentAmount DESC\nLIMIT 10;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    c.FirstName, \n    c.LastName, \n    COUNT(l.LoanID) AS ActiveLoansCount, \n    SUM(l.PrincipalAmount) AS TotalLoanAmount, \n    COUNT(lp.PaymentID) AS CompletedPaymentsCount, \n    SUM(lp.Amount) AS TotalPaymentAmount\nFROM \n    Customers c\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID\nLEFT JOIN \n    LoanPayments lp ON l.LoanID = lp.LoanID AND lp.Status = 'Завершено'\nWHERE \n    l.Status = 'Активно'\nGROUP BY \n    c.CustomerID, c.FirstName, c.LastName\nORDER BY \n    TotalLoanAmount DESC, TotalPaymentAmount DESC\nLIMIT 10;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    COUNT(DISTINCT l.LoanID) AS ActiveLoansCount,\n    SUM(l.PrincipalAmount) AS TotalLoanAmount,\n    COUNT(DISTINCT lp.PaymentID) AS CompletedPaymentsCount,\n    SUM(lp.Amount) AS TotalPaymentAmount\nFROM \n    Customers c\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID\nLEFT JOIN \n    LoanPayments lp ON l.LoanID = lp.LoanID AND lp.Status = 'Завершено'\nWHERE \n    l.Status = 'Активно'\nGROUP BY \n    c.CustomerID, c.FirstName, c.LastName\nORDER BY \n    TotalLoanAmount DESC, TotalPaymentAmount DESC\nLIMIT 10;",
            "gigachat_response": "SELECT TOP 10\n    c.FirstName + ' ' + c.LastName AS FullName,\n    COUNT(DISTINCT l.LoanID) AS NumberOfActiveLoans,\n    SUM(l.PrincipalAmount) AS TotalPrincipalAmount,\n    COUNT(lp.PaymentID) AS NumberOfCompletedPayments,\n    SUM(lp.Amount) AS TotalPaidAmount\nFROM\n    Customers c\nINNER JOIN\n    Loans l ON c.CustomerID = l.CustomerID\nLEFT JOIN\n    LoanPayments lp ON l.LoanID = lp.LoanID\nWHERE\n    l.Status = 'Активно' AND lp.Status = 'Завершено'\nGROUP BY\n    c.FirstName, c.LastName\nORDER BY\n    TotalPrincipalAmount DESC;",
            "gigachat_response_ru": "SELECT TOP 10\n    c.FirstName + ' ' + c.LastName AS FullName,\n    COUNT(DISTINCT l.LoanID) AS NumberOfLoans,\n    SUM(l.PrincipalAmount) AS TotalPrincipalAmount,\n    COUNT(lp.PaymentID) AS NumberOfCompletedPayments,\n    SUM(lp.Amount) AS TotalPaidAmount\nFROM Customers c\nINNER JOIN Loans l ON c.CustomerID = l.CustomerID\nLEFT JOIN LoanPayments lp ON l.LoanID = lp.LoanID\nWHERE l.Status = 'Активно' AND lp.Status = 'Завершено'\nGROUP BY c.FirstName, c.LastName\nORDER BY TotalPrincipalAmount DESC;"
        },
        {
            "question": "Какие 5 сотрудников (банкиры и аналитики) имеют наибольший доход от услуг? Мне нужно получить имя и фамилию сотрудника, должность, количество управляемых услуг, общий доход от услуг и среднюю зарплату в филиале.",
            "sql_query": "SELECT e.FirstName, e.LastName, e.Position, (SELECT COUNT(*) FROM CustomerServices cs WHERE cs.CustomerID = e.EmployeeID AND cs.Status = 'активен') AS ManagedServices, (SELECT SUM(s.Fee) FROM Services s WHERE s.ServiceID IN (SELECT cs.ServiceID FROM CustomerServices cs WHERE cs.CustomerID = e.EmployeeID) AND s.Status = 'Активен') AS TotalServiceRevenue, (SELECT AVG(e2.Salary) FROM Employees e2 WHERE e2.BranchID = e.BranchID) AS BranchAverageSalary FROM Employees e WHERE e.Position IN ('Банкир', 'Аналитик') ORDER BY TotalServiceRevenue DESC LIMIT 5;",
            "gpt-4o_response": "SELECT e.FirstName, e.LastName, e.Position, \n       COUNT(cs.CustomerServiceID) AS ManagedServicesCount, \n       SUM(s.Fee) AS TotalServiceIncome, \n       (SELECT AVG(e2.Salary) \n        FROM Employees e2 \n        WHERE e2.BranchID = e.BranchID) AS AvgBranchSalary\nFROM Employees e\nJOIN Branches b ON e.BranchID = b.BranchID\nJOIN CustomerServices cs ON cs.CustomerID IN (\n    SELECT c.CustomerID \n    FROM Customers c \n    JOIN Accounts a ON c.CustomerID = a.CustomerID \n    WHERE a.AccountID IN (\n        SELECT t.AccountID \n        FROM Transactions t \n        WHERE t.TransactionType = 'Услуга'\n    )\n)\nJOIN Services s ON cs.ServiceID = s.ServiceID\nWHERE e.Position IN ('Банкир', 'Аналитик')\nGROUP BY e.FirstName, e.LastName, e.Position, e.BranchID\nORDER BY TotalServiceIncome DESC\nLIMIT 5;",
            "gpt-4o_response_ru": "SELECT \n    e.FirstName, \n    e.LastName, \n    e.Position, \n    COUNT(cs.CustomerServiceID) AS ManagedServicesCount, \n    SUM(s.Fee) AS TotalServiceIncome, \n    (SELECT AVG(e2.Salary) FROM Employees e2 WHERE e2.BranchID = e.BranchID) AS AvgBranchSalary\nFROM \n    Employees e\nJOIN \n    CustomerServices cs ON e.EmployeeID = cs.CustomerID\nJOIN \n    Services s ON cs.ServiceID = s.ServiceID\nWHERE \n    e.Position IN ('Банкир', 'Аналитик') \n    AND cs.Status = 'активен'\nGROUP BY \n    e.FirstName, e.LastName, e.Position, e.BranchID\nORDER BY \n    TotalServiceIncome DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    e.FirstName,\n    e.LastName,\n    e.Position,\n    COUNT(cs.CustomerServiceID) AS NumberOfServices,\n    SUM(s.Fee) AS TotalServiceIncome,\n    (SELECT AVG(Salary) FROM Employees WHERE BranchID = e.BranchID) AS AverageBranchSalary\nFROM\n    Employees e\nJOIN\n    Branches b ON e.BranchID = b.BranchID\nLEFT JOIN\n    CustomerServices cs ON e.EmployeeID = cs.CustomerID\nLEFT JOIN\n    Services s ON cs.ServiceID = s.ServiceID\nWHERE\n    e.Position IN ('Банкир', 'Аналитик')\nGROUP BY\n    e.EmployeeID, e.FirstName, e.LastName, e.Position, e.BranchID\nORDER BY\n    TotalServiceIncome DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    e.FirstName,\n    e.LastName,\n    e.Position,\n    COUNT(cs.CustomerServiceID) AS TotalServices,\n    SUM(s.Fee) AS TotalServiceIncome,\n    (SELECT AVG(Salary) FROM Employees WHERE BranchID = e.BranchID) AS AvgBranchSalary\nFROM\n    Employees e\nJOIN\n    CustomerServices cs ON e.EmployeeID = cs.CustomerID\nJOIN\n    Services s ON cs.ServiceID = s.ServiceID\nWHERE\n    e.Position IN ('Банкир', 'Аналитик')\nGROUP BY\n    e.EmployeeID, e.FirstName, e.LastName, e.Position, e.BranchID\nORDER BY\n    TotalServiceIncome DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    e.FirstName, \n    e.LastName, \n    e.Position, \n    COUNT(cs.CustomerServiceID) AS ManagedServices, \n    SUM(s.Fee) AS TotalServiceIncome, \n    AVG(e.Salary) AS AverageBranchSalary\nFROM \n    Employees e\nJOIN \n    Branches b ON e.BranchID = b.BranchID\nJOIN \n    CustomerServices cs ON e.EmployeeID = cs.CustomerID\nJOIN \n    Services s ON cs.ServiceID = s.ServiceID\nWHERE \n    e.Position IN ('Банкир', 'Аналитик')\nGROUP BY \n    e.FirstName, \n    e.LastName, \n    e.Position\nORDER BY \n    TotalServiceIncome DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    e.FirstName, \n    e.LastName, \n    e.Position, \n    COUNT(cs.CustomerServiceID) AS ManagedServices, \n    SUM(s.Fee) AS TotalRevenue, \n    AVG(e.Salary) AS AverageSalaryInBranch\nFROM \n    Employees e\nJOIN \n    Branches b ON e.BranchID = b.BranchID\nJOIN \n    CustomerServices cs ON e.EmployeeID = cs.CustomerID\nJOIN \n    Services s ON cs.ServiceID = s.ServiceID\nWHERE \n    e.Position IN ('Банкир', 'Аналитик')\nGROUP BY \n    e.FirstName, \n    e.LastName, \n    e.Position\nORDER BY \n    TotalRevenue DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    e.FirstName,\n    e.LastName,\n    e.Position,\n    COUNT(cs.CustomerServiceID) AS ManagedServicesCount,\n    SUM(s.Fee) AS TotalServiceRevenue,\n    AVG(e2.Salary) AS AverageBranchSalary\nFROM \n    Employees e\nJOIN \n    Branches b ON e.BranchID = b.BranchID\nJOIN \n    Employees e2 ON e2.BranchID = b.BranchID\nJOIN \n    CustomerServices cs ON cs.CustomerID = e.EmployeeID\nJOIN \n    Services s ON s.ServiceID = cs.ServiceID\nWHERE \n    e.Position IN ('Банкир', 'Аналитик')\n    AND cs.Status = 'активен'\nGROUP BY \n    e.EmployeeID, e.FirstName, e.LastName, e.Position\nORDER BY \n    TotalServiceRevenue DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    e.FirstName, \n    e.LastName, \n    e.Position, \n    COUNT(cs.CustomerServiceID) AS ManagedServices,\n    SUM(s.Fee) AS TotalRevenue,\n    AVG(e2.Salary) AS AvgBranchSalary\nFROM \n    Employees e\nJOIN \n    Branches b ON e.BranchID = b.BranchID\nJOIN \n    CustomerServices cs ON e.EmployeeID = cs.CustomerID\nJOIN \n    Services s ON cs.ServiceID = s.ServiceID\nJOIN \n    Employees e2 ON b.BranchID = e2.BranchID\nWHERE \n    e.Position IN ('Банкир', 'Аналитик')\nGROUP BY \n    e.EmployeeID, e.FirstName, e.LastName, e.Position\nORDER BY \n    TotalRevenue DESC\nLIMIT 5;",
            "gigachat_response": "WITH EmployeeServices AS (\n    SELECT \n        e.EmployeeID,\n        e.FirstName || ' ' || e.LastName AS FullName,\n        e.Position,\n        COUNT(DISTINCT cs.ServiceID) AS ManagedServicesCount,\n        SUM(s.Fee * COUNT(*)) OVER (PARTITION BY e.EmployeeID) AS TotalServiceIncome\n    FROM \n        Employees e\n    LEFT JOIN \n        CustomerServices cs ON e.EmployeeID = cs.EmployeeID\n    LEFT JOIN \n        Services s ON cs.ServiceID = s.ServiceID\n    WHERE \n        e.Position IN ('Банкир', 'Аналитик')\n    GROUP BY \n        e.EmployeeID, e.FirstName, e.LastName, e.Position\n), \nAverageSalaryPerBranch AS (\n    SELECT \n        BranchID,\n        AVG(Salary) AS AverageSalary\n    FROM \n        Employees\n    GROUP BY \n        BranchID\n)\nSELECT \n    es.FullName,\n    es.Position,\n    es.ManagedServicesCount,\n    es.TotalServiceIncome,\n    abs.AverageSalary\nFROM \n    EmployeeServices es\nLEFT JOIN \n    Employees emp ON es.EmployeeID = emp.EmployeeID\nLEFT JOIN \n    AverageSalaryPerBranch abs ON emp.BranchID = abs.BranchID\nORDER BY \n    es.TotalServiceIncome DESC\nLIMIT 5;",
            "gigachat_response_ru": "SELECT \n    e.FirstName, \n    e.LastName, \n    e.Position, \n    COUNT(DISTINCT cs.ServiceID) AS ManagedServicesCount,\n    SUM(s.Fee * COUNT(DISTINCT cs.ServiceID)) AS TotalRevenueFromServices,\n    AVG(e.Salary) OVER (PARTITION BY e.BranchID) AS AverageSalaryInBranch\nFROM \n    Employees e\nJOIN \n    CustomerServices cs ON e.EmployeeID = cs.CustomerID -- Предположим, что сотрудник управляет услугами клиента\nJOIN \n    Services s ON cs.ServiceID = s.ServiceID\nWHERE \n    e.Position IN ('Банкир', 'Аналитик')\nGROUP BY \n    e.FirstName, e.LastName, e.Position, e.BranchID, e.Salary\nORDER BY \n    TotalRevenueFromServices DESC\nLIMIT 5;"
        },
        {
            "question": "Какие 10 клиентов с активными счетами в нескольких валютах имеют наибольший общий баланс? Покажите имя и фамилию клиента, количество активных валют, общий баланс по счетам и общее количество транзакций.",
            "sql_query": "SELECT c.FirstName, c.LastName, (SELECT COUNT(DISTINCT a.Currency) FROM Accounts a WHERE a.CustomerID = c.CustomerID AND a.Status = 'Active') AS ActiveCurrencies, (SELECT SUM(a.Balance) FROM Accounts a WHERE a.CustomerID = c.CustomerID AND a.Status = 'Active') AS TotalBalance, (SELECT COUNT(*) FROM Transactions t WHERE t.AccountID IN (SELECT a.AccountID FROM Accounts a WHERE a.CustomerID = c.CustomerID) AND t.Status = 'Завершено') AS TotalTransactions FROM Customers c HAVING ActiveCurrencies > 1 ORDER BY TotalBalance DESC LIMIT 10;",
            "gpt-4o_response": "SELECT \n    c.FirstName, \n    c.LastName, \n    COUNT(DISTINCT a.Currency) AS ActiveCurrencies, \n    SUM(a.Balance) AS TotalBalance, \n    (SELECT COUNT(*) \n     FROM Transactions t \n     WHERE t.AccountID = a.AccountID AND t.Status = 'Завершено') AS TotalTransactions\nFROM \n    Customers c\nJOIN \n    Accounts a ON c.CustomerID = a.CustomerID\nWHERE \n    a.Status = 'Active'\nGROUP BY \n    c.CustomerID, c.FirstName, c.LastName\nORDER BY \n    TotalBalance DESC\nLIMIT 10;",
            "gpt-4o_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    COUNT(DISTINCT a.Currency) AS ActiveCurrencies,\n    SUM(a.Balance) AS TotalBalance,\n    (SELECT COUNT(*) FROM Transactions t WHERE t.AccountID = a.AccountID AND t.Status = 'Завершено') AS TotalTransactions\nFROM \n    Customers c\nJOIN \n    Accounts a ON c.CustomerID = a.CustomerID\nWHERE \n    a.Status = 'Active'\nGROUP BY \n    c.CustomerID, c.FirstName, c.LastName\nHAVING \n    COUNT(DISTINCT a.Currency) > 1\nORDER BY \n    TotalBalance DESC\nLIMIT 10;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    c.FirstName,\n    c.LastName,\n    COUNT(DISTINCT a.Currency) AS NumberOfCurrencies,\n    SUM(a.Balance) AS TotalBalance,\n    (SELECT COUNT(*) FROM Transactions t WHERE t.AccountID IN (SELECT AccountID FROM Accounts WHERE CustomerID = c.CustomerID)) AS TotalTransactions\nFROM\n    Customers c\nJOIN\n    Accounts a ON c.CustomerID = a.CustomerID\nWHERE\n    a.Status = 'Active'\nGROUP BY\n    c.CustomerID, c.FirstName, c.LastName\nHAVING\n    COUNT(DISTINCT a.Currency) > 1\nORDER BY\n    TotalBalance DESC\nLIMIT 10;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    c.FirstName,\n    c.LastName,\n    COUNT(DISTINCT a.Currency) AS NumberOfCurrencies,\n    SUM(a.Balance) AS TotalBalance,\n    (SELECT COUNT(*) FROM Transactions t WHERE t.AccountID IN (SELECT AccountID FROM Accounts WHERE CustomerID = c.CustomerID)) AS TotalTransactions\nFROM\n    Customers c\nJOIN\n    Accounts a ON c.CustomerID = a.CustomerID\nWHERE\n    a.Status = 'Active'\nGROUP BY\n    c.CustomerID, c.FirstName, c.LastName\nHAVING\n    COUNT(DISTINCT a.Currency) > 1\nORDER BY\n    TotalBalance DESC\nLIMIT 10;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    c.FirstName, \n    c.LastName, \n    COUNT(DISTINCT a.Currency) AS ActiveCurrencies, \n    SUM(a.Balance) AS TotalBalance, \n    COUNT(t.TransactionID) AS TotalTransactions\nFROM \n    Customers c\nJOIN \n    Accounts a ON c.CustomerID = a.CustomerID\nJOIN \n    Transactions t ON a.AccountID = t.AccountID\nWHERE \n    a.Status = 'Active'\nGROUP BY \n    c.FirstName, \n    c.LastName\nHAVING \n    COUNT(DISTINCT a.Currency) > 1\nORDER BY \n    TotalBalance DESC\nLIMIT 10;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    COUNT(DISTINCT a.Currency) AS ActiveCurrencies, \n    SUM(a.Balance) AS TotalBalance, \n    COUNT(t.TransactionID) AS TotalTransactions\nFROM \n    Customers c\nJOIN \n    Accounts a ON c.CustomerID = a.CustomerID\nJOIN \n    Transactions t ON a.AccountID = t.AccountID\nWHERE \n    a.Status = 'Active'\nGROUP BY \n    c.FirstName, \n    c.LastName\nHAVING \n    COUNT(DISTINCT a.Currency) > 1\nORDER BY \n    TotalBalance DESC\nLIMIT 10;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    c.FirstName, \n    c.LastName, \n    COUNT(DISTINCT a.Currency) AS ActiveCurrencies, \n    SUM(a.Balance) AS TotalBalance, \n    COUNT(t.TransactionID) AS TotalTransactions\nFROM \n    Customers c\nJOIN \n    Accounts a ON c.CustomerID = a.CustomerID\nLEFT JOIN \n    Transactions t ON a.AccountID = t.AccountID\nWHERE \n    a.Status = 'Active'\nGROUP BY \n    c.CustomerID, c.FirstName, c.LastName\nHAVING \n    COUNT(DISTINCT a.Currency) > 1\nORDER BY \n    TotalBalance DESC\nLIMIT 10;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    COUNT(DISTINCT a.Currency) AS ActiveCurrencies, \n    SUM(a.Balance) AS TotalBalance, \n    COUNT(t.TransactionID) AS TotalTransactions\nFROM \n    Customers c\nJOIN \n    Accounts a ON c.CustomerID = a.CustomerID\nLEFT JOIN \n    Transactions t ON a.AccountID = t.AccountID\nWHERE \n    a.Status = 'Active'\nGROUP BY \n    c.CustomerID, c.FirstName, c.LastName\nHAVING \n    COUNT(DISTINCT a.Currency) > 1\nORDER BY \n    TotalBalance DESC\nLIMIT 10;",
            "gigachat_response": "WITH ActiveAccounts AS (\n    SELECT \n        CustomerID, \n        AccountID, \n        AccountType, \n        Balance, \n        Currency\n    FROM Accounts\n    WHERE Status = 'Active'\n), \nCurrencyCount AS (\n    SELECT \n        CustomerID, \n        COUNT(DISTINCT Currency) AS NumCurrencies\n    FROM ActiveAccounts\n    GROUP BY CustomerID\n    HAVING COUNT(DISTINCT Currency) > 1\n), \nTotalBalance AS (\n    SELECT \n        aa.CustomerID, \n        SUM(aa.Balance) AS TotalBalance\n    FROM ActiveAccounts aa\n    INNER JOIN CurrencyCount cc ON aa.CustomerID = cc.CustomerID\n    GROUP BY aa.CustomerID\n), \nTransactionCount AS (\n    SELECT \n        CustomerID, \n        COUNT(TransactionID) AS TotalTransactions\n    FROM Transactions t\n    INNER JOIN ActiveAccounts aa ON t.AccountID = aa.AccountID\n    GROUP BY CustomerID\n)\nSELECT TOP 10\n    c.FirstName + ' ' + c.LastName AS FullName,\n    cc.NumCurrencies AS NumberOfCurrencies,\n    tb.TotalBalance AS TotalBalance,\n    tc.TotalTransactions AS TotalTransactions\nFROM Customers c\nINNER JOIN CurrencyCount cc ON c.CustomerID = cc.CustomerID\nINNER JOIN TotalBalance tb ON c.CustomerID = tb.CustomerID\nLEFT JOIN TransactionCount tc ON c.CustomerID = tc.CustomerID\nORDER BY tb.TotalBalance DESC;",
            "gigachat_response_ru": "SELECT TOP 10\n    c.FirstName + ' ' + c.LastName AS FullName,\n    COUNT(DISTINCT a.Currency) AS NumberOfCurrencies,\n    SUM(a.Balance) AS TotalBalance,\n    COUNT(t.TransactionID) AS TotalTransactions\nFROM\n    Customers c\nINNER JOIN\n    Accounts a ON c.CustomerID = a.CustomerID\nLEFT JOIN\n    Transactions t ON a.AccountID = t.AccountID\nWHERE\n    a.Status = 'Active'\nGROUP BY\n    c.FirstName, c.LastName\nHAVING\n    COUNT(DISTINCT a.Currency) > 1\nORDER BY\n    TotalBalance DESC;"
        },
        {
            "question": "Какие 5 филиалов банка имеют наибольшую сумму наличных в банкоматах? Покажите название отделения, количество активных банкоматов, общую сумму наличных в банкоматах и среднюю зарплату сотрудников.",
            "sql_query": "SELECT b.BranchName, (SELECT COUNT(*) FROM ATMs atm WHERE atm.BranchID = b.BranchID AND atm.Status = 'Active') AS ActiveATMs, (SELECT SUM(atm.CashAvailable) FROM ATMs atm WHERE atm.BranchID = b.BranchID AND atm.Status = 'Active') AS TotalCashAvailable, (SELECT AVG(e.Salary) FROM Employees e WHERE e.BranchID = b.BranchID) AS AverageEmployeeSalary FROM Branches b ORDER BY TotalCashAvailable DESC LIMIT 5;",
            "gpt-4o_response": "SELECT \n    b.BranchName, \n    COUNT(a.ATMID) AS ActiveATMs, \n    SUM(a.CashAvailable) AS TotalCashInATMs, \n    AVG(e.Salary) AS AverageEmployeeSalary\nFROM \n    Branches b\nJOIN \n    ATMs a ON b.BranchID = a.BranchID\nJOIN \n    Employees e ON b.BranchID = e.BranchID\nWHERE \n    a.Status = 'Active'\nGROUP BY \n    b.BranchName\nORDER BY \n    TotalCashInATMs DESC\nLIMIT 5;",
            "gpt-4o_response_ru": "SELECT \n    b.BranchName,\n    COUNT(a.ATMID) AS ActiveATMs,\n    SUM(a.CashAvailable) AS TotalCashInATMs,\n    AVG(e.Salary) AS AverageEmployeeSalary\nFROM \n    Branches b\nJOIN \n    ATMs a ON b.BranchID = a.BranchID\nJOIN \n    Employees e ON b.BranchID = e.BranchID\nWHERE \n    a.Status = 'Active'\nGROUP BY \n    b.BranchName\nORDER BY \n    TotalCashInATMs DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    b.BranchName,\n    COUNT(CASE WHEN atm.Status = 'Active' THEN atm.ATMID ELSE NULL END) AS ActiveATMsCount,\n    SUM(atm.CashAvailable) AS TotalCashAvailable,\n    AVG(e.Salary) AS AverageEmployeeSalary\nFROM\n    Branches b\nJOIN\n    ATMs atm ON b.BranchID = atm.BranchID\nLEFT JOIN\n    Employees e ON b.BranchID = e.BranchID\nGROUP BY\n    b.BranchName\nORDER BY\n    TotalCashAvailable DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    b.BranchName,\n    COUNT(CASE WHEN atm.Status = 'Active' THEN atm.ATMID ELSE NULL END) AS ActiveATMsCount,\n    SUM(atm.CashAvailable) AS TotalCashAvailable,\n    AVG(e.Salary) AS AverageEmployeeSalary\nFROM\n    Branches b\nLEFT JOIN\n    ATMs atm ON b.BranchID = atm.BranchID\nLEFT JOIN\n    Employees e ON b.BranchID = e.BranchID\nGROUP BY\n    b.BranchName\nORDER BY\n    TotalCashAvailable DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    b.BranchName, \n    COUNT(atm.ATMID) AS ActiveATMs, \n    SUM(atm.CashAvailable) AS TotalCash, \n    AVG(e.Salary) AS AverageSalary\nFROM \n    Branches b\nJOIN \n    ATMs atm ON b.BranchID = atm.BranchID\nJOIN \n    Employees e ON b.BranchID = e.BranchID\nWHERE \n    atm.Status = 'Active'\nGROUP BY \n    b.BranchName\nORDER BY \n    TotalCash DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    b.BranchName, \n    COUNT(atm.ATMID) AS ActiveATMs,\n    SUM(atm.CashAvailable) AS TotalCash,\n    AVG(e.Salary) AS AverageEmployeeSalary\nFROM \n    Branches b\nJOIN \n    ATMs atm ON b.BranchID = atm.BranchID\nJOIN \n    Employees e ON b.BranchID = e.BranchID\nWHERE \n    atm.Status = 'Active'\nGROUP BY \n    b.BranchName\nORDER BY \n    TotalCash DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    b.BranchName,\n    COUNT(a.ATMID) AS ActiveATMs,\n    SUM(a.CashAvailable) AS TotalCashAvailable,\n    AVG(e.Salary) AS AverageSalary\nFROM \n    Branches b\nJOIN \n    ATMs a ON b.BranchID = a.BranchID\nJOIN \n    Employees e ON b.BranchID = e.BranchID\nWHERE \n    a.Status = 'Active'\nGROUP BY \n    b.BranchName\nORDER BY \n    TotalCashAvailable DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    b.BranchName AS \"Название отделения\",\n    COUNT(DISTINCT a.ATMID) AS \"Количество активных банкоматов\",\n    SUM(a.CashAvailable) AS \"Общая сумма наличных в банкоматах\", \n    AVG(e.Salary) AS \"Средняя зарплата сотрудников\"\nFROM \n    Branches b\nJOIN \n    ATMs a ON b.BranchID = a.BranchID\nJOIN \n    Employees e ON b.BranchID = e.BranchID\nWHERE \n    a.Status = 'Active'\nGROUP BY \n    b.BranchID, b.BranchName\nORDER BY \n    SUM(a.CashAvailable) DESC\nLIMIT 5;",
            "gigachat_response": "SELECT \n    b.BranchName,\n    COUNT(a.ATMID) AS NumActiveATMs,\n    SUM(a.CashAvailable) AS TotalCashInATMs,\n    AVG(e.Salary) AS AverageSalary\nFROM \n    Branches b\nJOIN \n    ATMs a ON b.BranchID = a.BranchID\nJOIN \n    Employees e ON b.BranchID = e.BranchID\nWHERE \n    a.Status = 'Active'\nGROUP BY \n    b.BranchName\nORDER BY \n    TotalCashInATMs DESC\nLIMIT 5;",
            "gigachat_response_ru": "SELECT \n    b.BranchName,\n    COUNT(a.ATMID) AS ActiveATMsCount,\n    SUM(a.CashAvailable) AS TotalCashInATMs,\n    AVG(e.Salary) AS AverageSalary\nFROM \n    Branches b\nLEFT JOIN \n    ATMs a ON b.BranchID = a.BranchID AND a.Status = 'Active'\nLEFT JOIN \n    Employees e ON b.BranchID = e.BranchID\nGROUP BY \n    b.BranchName\nORDER BY \n    TotalCashInATMs DESC\nLIMIT 5;"
        },
        {
            "question": "Какие 10 клиентов с активными вкладами имеют наибольший расчетный годовой процентный доход? Покажите имя и фамилию клиента, количество активных вкладов, расчетный годовой процентный доход и общий объем операций по вкладам.",
            "sql_query": "SELECT c.FirstName, c.LastName, (SELECT COUNT(*) FROM Deposits d WHERE d.CustomerID = c.CustomerID AND d.Status = 'Активен') AS ActiveDeposits, (SELECT SUM(d.Amount * d.InterestRate / 100) FROM Deposits d WHERE d.CustomerID = c.CustomerID AND d.Status = 'Активен') AS EstimatedAnnualInterest, (SELECT SUM(dt.Amount) FROM DepositTransactions dt WHERE dt.DepositID IN (SELECT d.DepositID FROM Deposits d WHERE d.CustomerID = c.CustomerID) AND dt.Status = 'Завершено') AS TotalDepositTransactions FROM Customers c WHERE c.CustomerID IN (SELECT DISTINCT CustomerID FROM Deposits WHERE Status = 'Активен') ORDER BY EstimatedAnnualInterest DESC LIMIT 10;",
            "gpt-4o_response": "SELECT \n    c.FirstName, \n    c.LastName, \n    COUNT(d.DepositID) AS ActiveDepositsCount, \n    SUM(d.Amount * d.InterestRate / 100) AS EstimatedAnnualInterestIncome, \n    (SELECT SUM(dt.Amount) \n     FROM DepositTransactions dt \n     WHERE dt.DepositID = d.DepositID AND dt.Status = 'Завершено') AS TotalDepositTransactionVolume\nFROM \n    Customers c\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID\nWHERE \n    d.Status = 'Активен'\nGROUP BY \n    c.FirstName, c.LastName\nORDER BY \n    EstimatedAnnualInterestIncome DESC\nLIMIT 10;",
            "gpt-4o_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    COUNT(d.DepositID) AS ActiveDepositsCount,\n    SUM(d.Amount * d.InterestRate / 100) AS EstimatedAnnualInterestIncome,\n    COALESCE(SUM(dt.Amount), 0) AS TotalDepositTransactionVolume\nFROM \n    Customers c\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID\nLEFT JOIN \n    DepositTransactions dt ON d.DepositID = dt.DepositID AND dt.Status = 'Завершено'\nWHERE \n    d.Status = 'Активен'\nGROUP BY \n    c.FirstName, c.LastName\nORDER BY \n    EstimatedAnnualInterestIncome DESC\nLIMIT 10;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    c.FirstName,\n    c.LastName,\n    COUNT(d.DepositID) AS NumberOfActiveDeposits,\n    SUM(d.Amount * (d.InterestRate / 100)) AS EstimatedAnnualInterestIncome,\n    SUM(dt.Amount) AS TotalDepositTransactionAmount\nFROM\n    Customers c\nJOIN\n    Deposits d ON c.CustomerID = d.CustomerID\nLEFT JOIN\n    DepositTransactions dt ON d.DepositID = dt.DepositID\nWHERE\n    d.Status = 'Активен'\nGROUP BY\n    c.CustomerID, c.FirstName, c.LastName\nORDER BY\n    EstimatedAnnualInterestIncome DESC\nLIMIT 10;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    c.FirstName,\n    c.LastName,\n    COUNT(d.DepositID) AS ActiveDepositsCount,\n    SUM(d.Amount * (d.InterestRate / 100)) AS EstimatedAnnualInterestIncome,\n    (\n        SELECT\n            SUM(dt.Amount)\n        FROM\n            DepositTransactions dt\n        WHERE\n            dt.DepositID IN (SELECT DepositID FROM Deposits WHERE CustomerID = c.CustomerID AND Status = 'Активен')\n    ) AS TotalDepositTransactionsAmount\nFROM\n    Customers c\nJOIN\n    Deposits d ON c.CustomerID = d.CustomerID\nWHERE\n    d.Status = 'Активен'\nGROUP BY\n    c.CustomerID, c.FirstName, c.LastName\nORDER BY\n    EstimatedAnnualInterestIncome DESC\nLIMIT 10;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    c.FirstName, \n    c.LastName, \n    COUNT(d.DepositID) AS ActiveDeposits, \n    SUM(d.Amount * d.InterestRate) AS CalculatedAnnualInterestIncome, \n    SUM(dt.Amount) AS TotalDepositTransactionAmount\nFROM \n    Customers c\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID\nJOIN \n    DepositTransactions dt ON d.DepositID = dt.DepositID\nWHERE \n    d.Status = 'Активен'\nGROUP BY \n    c.FirstName, \n    c.LastName\nORDER BY \n    CalculatedAnnualInterestIncome DESC\nLIMIT 10;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    COUNT(d.DepositID) AS ActiveDepositsCount, \n    SUM(d.Amount * d.InterestRate) AS TotalYearlyInterestIncome, \n    SUM(d.Amount) AS TotalDepositsAmount\nFROM \n    Customers c\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID\nWHERE \n    d.Status = 'Активен'\nGROUP BY \n    c.FirstName, \n    c.LastName\nORDER BY \n    TotalYearlyInterestIncome DESC\nLIMIT 10;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    c.FirstName, \n    c.LastName, \n    COUNT(d.DepositID) AS ActiveDepositsCount, \n    SUM(d.Amount * d.InterestRate / 100) AS EstimatedAnnualIncome,\n    (SELECT SUM(dt.Amount) FROM DepositTransactions dt WHERE dt.DepositID IN (SELECT d2.DepositID FROM Deposits d2 WHERE d2.CustomerID = c.CustomerID AND d2.Status = 'Активен')) AS TotalDepositTransactions\nFROM \n    Customers c\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID\nWHERE \n    d.Status = 'Активен'\nGROUP BY \n    c.CustomerID, c.FirstName, c.LastName\nORDER BY \n    EstimatedAnnualIncome DESC\nLIMIT 10;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    COUNT(d.DepositID) AS ActiveDepositsCount,\n    SUM(d.Amount * d.InterestRate / 100) AS EstimatedAnnualIncome,\n    SUM(dt.Amount) AS TotalDepositTransactions\nFROM \n    Customers c\nJOIN \n    Deposits d ON c.CustomerID = d.CustomerID\nLEFT JOIN \n    DepositTransactions dt ON d.DepositID = dt.DepositID AND dt.Status = 'Завершено'\nWHERE \n    d.Status = 'Активен'\nGROUP BY \n    c.CustomerID, c.FirstName, c.LastName\nORDER BY \n    EstimatedAnnualIncome DESC\nLIMIT 10;",
            "gigachat_response": "WITH ActiveDeposits AS (\n    SELECT d.DepositID, d.CustomerID, d.InterestRate, d.Amount\n    FROM Deposits d\n    WHERE d.Status = 'Активен'\n), \nAnnualInterestIncome AS (\n    SELECT ad.CustomerID, \n           SUM(ad.Amount * ad.InterestRate / 100) AS AnnualInterestEarned,\n           COUNT(ad.DepositID) AS NumActiveDeposits,\n           SUM(dt.Amount) AS TotalDepositActivity\n    FROM ActiveDeposits ad\n    LEFT JOIN DepositTransactions dt ON ad.DepositID = dt.DepositID\n    GROUP BY ad.CustomerID\n)\nSELECT TOP 10 c.FirstName, c.LastName, \n               ad.NumActiveDeposits, \n               ad.AnnualInterestEarned, \n               ad.TotalDepositActivity\nFROM AnnualInterestIncome ad\nINNER JOIN Customers c ON ad.CustomerID = c.CustomerID\nORDER BY ad.AnnualInterestEarned DESC;",
            "gigachat_response_ru": "WITH ActiveDeposits AS (\n    SELECT d.DepositID, d.CustomerID, d.InterestRate, d.Amount\n    FROM Deposits d\n    WHERE d.Status = 'Активен'\n), \nTotalDepositOperations AS (\n    SELECT dt.DepositID, SUM(dt.Amount) AS TotalOperationAmount\n    FROM DepositTransactions dt\n    WHERE dt.Status = 'Завершено'\n    GROUP BY dt.DepositID\n), \nClientInfo AS (\n    SELECT c.CustomerID, c.FirstName, c.LastName, COUNT(d.DepositID) AS NumActiveDeposits, \n           ROUND(SUM(d.Amount * d.InterestRate / 100), 2) AS AnnualInterestIncome\n    FROM Customers c\n    LEFT JOIN ActiveDeposits d ON c.CustomerID = d.CustomerID\n    GROUP BY c.CustomerID, c.FirstName, c.LastName\n)\nSELECT ci.FirstName, ci.LastName, ci.NumActiveDeposits, ci.AnnualInterestIncome, COALESCE(td.TotalOperationAmount, 0) AS TotalDepositOperations\nFROM ClientInfo ci\nLEFT JOIN TotalDepositOperations td ON ci.CustomerID = td.DepositID\nORDER BY ci.AnnualInterestIncome DESC\nLIMIT 10;"
        },
        {
            "question": "Какие 5 банкиров имеют наибольшую сумму страхового покрытия по управляемым полисам? Покажите имя и фамилию сотрудника, должность, количество управляемых страховых полисов, общую сумму страхового покрытия и среднюю зарплату в филиале.",
            "sql_query": "SELECT e.FirstName, e.LastName, e.Position, (SELECT COUNT(*) FROM InsurancePolicies ip WHERE ip.CustomerID = e.EmployeeID AND ip.Status = 'Активен') AS ManagedPolicies, (SELECT SUM(ip.CoverageAmount) FROM InsurancePolicies ip WHERE ip.CustomerID = e.EmployeeID AND ip.Status = 'Активен') AS TotalCoverage, (SELECT AVG(e2.Salary) FROM Employees e2 WHERE e2.BranchID = e.BranchID) AS BranchAverageSalary FROM Employees e WHERE e.Position = 'Банкир' ORDER BY TotalCoverage DESC LIMIT 5;",
            "gpt-4o_response": "SELECT \n    e.FirstName, \n    e.LastName, \n    e.Position, \n    COUNT(ip.PolicyID) AS ManagedPoliciesCount, \n    SUM(ip.CoverageAmount) AS TotalCoverageAmount, \n    AVG(e.Salary) OVER (PARTITION BY e.BranchID) AS AvgBranchSalary\nFROM \n    Employees e\nJOIN \n    Branches b ON e.BranchID = b.BranchID\nJOIN \n    InsurancePolicies ip ON e.EmployeeID = ip.CustomerID\nWHERE \n    ip.Status = 'Активен'\nGROUP BY \n    e.FirstName, \n    e.LastName, \n    e.Position, \n    e.BranchID\nORDER BY \n    TotalCoverageAmount DESC\nLIMIT 5;",
            "gpt-4o_response_ru": "SELECT \n    e.FirstName, \n    e.LastName, \n    e.Position, \n    COUNT(ip.PolicyID) AS ManagedPoliciesCount, \n    SUM(ip.CoverageAmount) AS TotalCoverageAmount, \n    AVG(e.Salary) OVER (PARTITION BY e.BranchID) AS AverageBranchSalary\nFROM \n    Employees e\nJOIN \n    Branches b ON e.BranchID = b.BranchID\nJOIN \n    Customers c ON c.Address LIKE CONCAT('%', b.City, '%')\nJOIN \n    InsurancePolicies ip ON ip.CustomerID = c.CustomerID\nWHERE \n    ip.Status = 'Активен'\nGROUP BY \n    e.EmployeeID, e.FirstName, e.LastName, e.Position, e.BranchID\nORDER BY \n    TotalCoverageAmount DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    e.FirstName,\n    e.LastName,\n    e.Position,\n    COUNT(ip.PolicyID) AS ManagedPoliciesCount,\n    SUM(ip.CoverageAmount) AS TotalCoverageAmount,\n    AVG(e.Salary) OVER (PARTITION BY e.BranchID) AS AverageBranchSalary\nFROM\n    Employees e\nJOIN\n    Branches b ON e.BranchID = b.BranchID\nLEFT JOIN\n    InsurancePolicies ip ON e.EmployeeID = ip.CustomerID\nWHERE\n    e.Position = 'Банкир'\nGROUP BY\n    e.EmployeeID, e.FirstName, e.LastName, e.Position, e.BranchID\nORDER BY\n    TotalCoverageAmount DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    e.FirstName,\n    e.LastName,\n    e.Position,\n    COUNT(ip.PolicyID) AS PolicyCount,\n    SUM(ip.CoverageAmount) AS TotalCoverageAmount,\n    (SELECT AVG(Salary) FROM Employees WHERE BranchID = e.BranchID) AS AverageBranchSalary\nFROM Employees e\nJOIN Branches b ON e.BranchID = b.BranchID\nLEFT JOIN InsurancePolicies ip ON e.EmployeeID = ip.CustomerID\nWHERE e.Position = 'Банкир'\nGROUP BY e.EmployeeID, e.FirstName, e.LastName, e.Position, e.BranchID\nORDER BY TotalCoverageAmount DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    e.FirstName, \n    e.LastName, \n    e.Position, \n    COUNT(ip.PolicyID) AS TotalPolicies, \n    SUM(ip.CoverageAmount) AS TotalCoverageAmount, \n    AVG(e.Salary) AS AverageSalary\nFROM \n    Employees e\nJOIN \n    Branches b ON e.BranchID = b.BranchID\nJOIN \n    Customers c ON e.EmployeeID = c.CustomerID\nJOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nWHERE \n    e.Position = 'Банкир' AND \n    ip.Status = 'Активен'\nGROUP BY \n    e.FirstName, \n    e.LastName, \n    e.Position\nORDER BY \n    TotalCoverageAmount DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    e.FirstName, \n    e.LastName, \n    e.Position, \n    COUNT(ip.PolicyID) AS TotalPolicies, \n    SUM(ip.CoverageAmount) AS TotalCoverage, \n    AVG(e.Salary) AS AverageSalary\nFROM \n    Employees e\nJOIN \n    Branches b ON e.BranchID = b.BranchID\nJOIN \n    Customers c ON e.EmployeeID = c.CustomerID\nJOIN \n    InsurancePolicies ip ON c.CustomerID = ip.CustomerID\nWHERE \n    e.Position = 'Банкир' AND ip.Status = 'Активен'\nGROUP BY \n    e.FirstName, e.LastName, e.Position\nORDER BY \n    TotalCoverage DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    e.FirstName, \n    e.LastName, \n    e.Position, \n    COUNT(ip.PolicyID) AS ManagedPolicies,\n    SUM(ip.CoverageAmount) AS TotalCoverageAmount,\n    AVG(e2.Salary) AS AverageBranchSalary\nFROM \n    Employees e\nJOIN \n    Branches b ON e.BranchID = b.BranchID\nJOIN \n    InsurancePolicies ip ON e.EmployeeID = ip.CustomerID\nJOIN \n    Employees e2 ON e2.BranchID = b.BranchID\nWHERE \n    e.Position = 'Банкир' AND \n    ip.Status = 'Активен'\nGROUP BY \n    e.EmployeeID, e.FirstName, e.LastName, e.Position\nORDER BY \n    TotalCoverageAmount DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    e.FirstName,\n    e.LastName,\n    e.Position,\n    COUNT(ip.PolicyID) AS TotalPolicies,\n    SUM(ip.CoverageAmount) AS TotalCoverage,\n    AVG(e2.Salary) AS AverageBranchSalary\nFROM \n    Employees e\nJOIN \n    InsurancePolicies ip ON e.EmployeeID = ip.CustomerID\nJOIN \n    Branches b ON e.BranchID = b.BranchID\nJOIN \n    Employees e2 ON e2.BranchID = b.BranchID\nWHERE \n    e.Position = 'Банкир' AND \n    ip.Status = 'Активен'\nGROUP BY \n    e.EmployeeID, e.FirstName, e.LastName, e.Position\nORDER BY \n    TotalCoverage DESC\nLIMIT 5;",
            "gigachat_response": "SELECT TOP 5\n    e.FirstName + ' ' + e.LastName AS FullName,\n    e.Position,\n    COUNT(ip.PolicyID) AS ManagedInsurancePoliciesCount,\n    SUM(ip.CoverageAmount) AS TotalCoverageAmount,\n    AVG(e.Salary) OVER (PARTITION BY e.BranchID) AS AverageSalaryInBranch\nFROM\n    Employees e\nINNER JOIN\n    InsurancePolicies ip ON e.EmployeeID = ip.CustomerID -- Assuming employees manage policies directly linked to their ID\nWHERE\n    ip.Status = 'Активен'\nGROUP BY\n    e.FirstName, e.LastName, e.Position, e.BranchID, e.Salary\nORDER BY\n    TotalCoverageAmount DESC;",
            "gigachat_response_ru": "SELECT TOP 5\n    e.FirstName + ' ' + e.LastName AS FullName,\n    e.Position,\n    COUNT(ip.PolicyID) AS ManagedInsurancePolicesCount,\n    SUM(ip.CoverageAmount) AS TotalCoverageAmount,\n    AVG(e.Salary) OVER (PARTITION BY e.BranchID) AS AverageSalaryInBranch\nFROM Employees e\nINNER JOIN InsurancePolicies ip ON e.EmployeeID = ip.CustomerID\nWHERE ip.Status = 'Активен'\nGROUP BY e.FirstName, e.LastName, e.Position, e.BranchID\nORDER BY TotalCoverageAmount DESC;"
        },
        {
            "question": "Какие 10 клиентов с активными кредитами имеют наибольшие расходы по кредитным картам? Покажите имя и фамилию клиента, количество активных кредитов, количество активных кредитных карт, общую сумму расходов по кредитным картам и общую сумму кредитов.",
            "sql_query": "SELECT c.FirstName, c.LastName, (SELECT COUNT(*) FROM Loans l WHERE l.CustomerID = c.CustomerID AND l.Status = 'Активно') AS ActiveLoans, (SELECT COUNT(*) FROM CreditCards cc WHERE cc.CustomerID = c.CustomerID AND cc.Status = 'Активна') AS ActiveCreditCards, (SELECT SUM(ct.Amount) FROM CardTransactions ct WHERE ct.CardID IN (SELECT cc.CardID FROM CreditCards cc WHERE cc.CustomerID = c.CustomerID) AND ct.Status = 'Завершена') AS TotalCardSpending, (SELECT SUM(l.PrincipalAmount) FROM Loans l WHERE l.CustomerID = c.CustomerID AND l.Status = 'Активно') AS TotalLoanAmount FROM Customers c WHERE c.CustomerID IN (SELECT DISTINCT CustomerID FROM Loans WHERE Status = 'Активно') ORDER BY TotalCardSpending DESC LIMIT 10;",
            "gpt-4o_response": "SELECT \n    c.FirstName, \n    c.LastName, \n    COUNT(DISTINCT l.LoanID) AS ActiveLoansCount, \n    COUNT(DISTINCT cc.CardID) AS ActiveCreditCardsCount, \n    COALESCE(SUM(ct.Amount), 0) AS TotalCardExpenses, \n    SUM(l.PrincipalAmount) AS TotalLoanAmount\nFROM \n    Customers c\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID\nJOIN \n    CreditCards cc ON c.CustomerID = cc.CustomerID\nLEFT JOIN \n    CardTransactions ct ON cc.CardID = ct.CardID AND ct.Status = 'Завершена'\nWHERE \n    l.Status = 'Активно' \n    AND cc.Status = 'Активна'\nGROUP BY \n    c.FirstName, c.LastName\nORDER BY \n    TotalCardExpenses DESC\nLIMIT 10;",
            "gpt-4o_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    COUNT(DISTINCT l.LoanID) AS ActiveLoansCount,\n    COUNT(DISTINCT cc.CardID) AS ActiveCreditCardsCount,\n    SUM(ct.Amount) AS TotalCardExpenses,\n    SUM(l.PrincipalAmount) AS TotalLoanAmount\nFROM \n    Customers c\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID\nJOIN \n    CreditCards cc ON c.CustomerID = cc.CustomerID\nJOIN \n    CardTransactions ct ON cc.CardID = ct.CardID\nWHERE \n    l.Status = 'Активно' \n    AND cc.Status = 'Активна' \n    AND ct.Status = 'Завершена'\nGROUP BY \n    c.CustomerID, c.FirstName, c.LastName\nORDER BY \n    TotalCardExpenses DESC\nLIMIT 10;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    c.FirstName,\n    c.LastName,\n    (SELECT COUNT(*) FROM Loans l WHERE l.CustomerID = c.CustomerID AND l.Status = 'Активно') AS ActiveLoansCount,\n    (SELECT COUNT(*) FROM CreditCards cc WHERE cc.CustomerID = c.CustomerID AND cc.Status = 'Активна') AS ActiveCreditCardsCount,\n    (SELECT IFNULL(SUM(ct.Amount), 0) FROM CreditCards cc LEFT JOIN CardTransactions ct ON cc.CardID = ct.CardID WHERE cc.CustomerID = c.CustomerID) AS TotalCardTransactionAmount,\n    (SELECT IFNULL(SUM(l.PrincipalAmount), 0) FROM Loans l WHERE l.CustomerID = c.CustomerID AND l.Status = 'Активно') AS TotalLoanAmount\nFROM\n    Customers c\nWHERE c.CustomerID IN (SELECT DISTINCT CustomerID FROM Loans WHERE Status = 'Активно')\nORDER BY\n    TotalCardTransactionAmount DESC\nLIMIT 10;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    c.FirstName,\n    c.LastName,\n    (SELECT COUNT(*) FROM Loans l WHERE l.CustomerID = c.CustomerID AND l.Status = 'Активно') AS ActiveLoansCount,\n    (SELECT COUNT(*) FROM CreditCards cc WHERE cc.CustomerID = c.CustomerID AND cc.Status = 'Активна') AS ActiveCreditCardsCount,\n    (SELECT COALESCE(SUM(ct.Amount), 0) FROM CardTransactions ct WHERE ct.CardID IN (SELECT cc.CardID FROM CreditCards cc WHERE cc.CustomerID = c.CustomerID)) AS TotalCardTransactionAmount,\n    (SELECT COALESCE(SUM(l.PrincipalAmount), 0) FROM Loans l WHERE l.CustomerID = c.CustomerID AND l.Status = 'Активно') AS TotalLoanAmount\nFROM\n    Customers c\nWHERE\n    c.CustomerID IN (SELECT DISTINCT CustomerID FROM Loans WHERE Status = 'Активно')\nORDER BY\n    TotalCardTransactionAmount DESC\nLIMIT 10;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    c.FirstName, \n    c.LastName, \n    COUNT(DISTINCT l.LoanID) AS ActiveLoans, \n    COUNT(DISTINCT cc.CardID) AS ActiveCreditCards, \n    SUM(ct.Amount) AS TotalCardExpenses, \n    SUM(l.PrincipalAmount) AS TotalLoans\nFROM \n    Customers c\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID\nJOIN \n    CreditCards cc ON c.CustomerID = cc.CustomerID\nJOIN \n    CardTransactions ct ON cc.CardID = ct.CardID\nWHERE \n    l.Status = 'Активно' AND cc.Status = 'Активна' AND ct.Status = 'Завершена'\nGROUP BY \n    c.FirstName, c.LastName\nORDER BY \n    TotalCardExpenses DESC\nLIMIT 10;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    COUNT(DISTINCT l.LoanID) AS ActiveLoansCount, \n    COUNT(DISTINCT cc.CardID) AS ActiveCreditCardsCount, \n    SUM(ct.Amount) AS TotalCreditCardExpenses, \n    SUM(l.PrincipalAmount) AS TotalLoansAmount\nFROM \n    Customers c\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\nJOIN \n    CreditCards cc ON c.CustomerID = cc.CustomerID AND cc.Status = 'Активна'\nJOIN \n    CardTransactions ct ON cc.CardID = ct.CardID AND ct.Status = 'Завершена'\nGROUP BY \n    c.FirstName, \n    c.LastName\nORDER BY \n    TotalCreditCardExpenses DESC\nLIMIT 10;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    c.FirstName, \n    c.LastName, \n    COUNT(DISTINCT l.LoanID) AS ActiveLoansCount,\n    COUNT(DISTINCT cc.CardID) AS ActiveCreditCardsCount,\n    COALESCE(SUM(ct.Amount), 0) AS TotalCardExpenses,\n    COALESCE(SUM(l.PrincipalAmount), 0) AS TotalLoanAmount\nFROM \n    Customers c\nLEFT JOIN \n    Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\nLEFT JOIN \n    CreditCards cc ON c.CustomerID = cc.CustomerID AND cc.Status = 'Активна'\nLEFT JOIN \n    CardTransactions ct ON cc.CardID = ct.CardID AND ct.Status = 'Завершена'\nGROUP BY \n    c.CustomerID, c.FirstName, c.LastName\nHAVING \n    COUNT(DISTINCT l.LoanID) > 0\nORDER BY \n    TotalCardExpenses DESC\nLIMIT 10;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    c.FirstName,\n    c.LastName,\n    COUNT(DISTINCT l.LoanID) AS ActiveLoansCount,\n    COUNT(DISTINCT cc.CardID) AS ActiveCreditCardsCount,\n    COALESCE(SUM(ct.Amount), 0) AS TotalCardSpending,\n    COALESCE(SUM(l.PrincipalAmount), 0) AS TotalLoanAmount\nFROM \n    Customers c\nJOIN \n    Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\nLEFT JOIN \n    CreditCards cc ON c.CustomerID = cc.CustomerID AND cc.Status = 'Активна'\nLEFT JOIN \n    CardTransactions ct ON cc.CardID = ct.CardID AND ct.Status = 'Завершена'\nGROUP BY \n    c.CustomerID, c.FirstName, c.LastName\nORDER BY \n    TotalCardSpending DESC\nLIMIT 10;",
            "gigachat_response": "SELECT TOP 10\n    c.FirstName + ' ' + c.LastName AS FullName,\n    COUNT(DISTINCT l.LoanID) AS NumberOfActiveLoans,\n    COUNT(DISTINCT cc.CardID) AS NumberOfActiveCreditCards,\n    COALESCE(SUM(ct.Amount), 0) AS TotalCreditCardExpenses,\n    COALESCE(SUM(l.PrincipalAmount), 0) AS TotalLoanAmount\nFROM Customers c\nLEFT JOIN Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\nLEFT JOIN CreditCards cc ON c.CustomerID = cc.CustomerID AND cc.Status = 'Активна'\nLEFT JOIN CardTransactions ct ON cc.CardID = ct.CardID AND ct.Status = 'Завершена'\nGROUP BY c.FirstName, c.LastName\nORDER BY TotalCreditCardExpenses DESC;",
            "gigachat_response_ru": "SELECT TOP 10\n    c.FirstName + ' ' + c.LastName AS FullName,\n    COUNT(DISTINCT l.LoanID) AS NumberOfLoans,\n    COUNT(DISTINCT cc.CardID) AS NumberOfCreditCards,\n    COALESCE(SUM(ct.Amount), 0) AS TotalCardExpenses,\n    COALESCE(SUM(l.PrincipalAmount), 0) AS TotalLoanAmount\nFROM Customers c\nLEFT JOIN Loans l ON c.CustomerID = l.CustomerID AND l.Status = 'Активно'\nLEFT JOIN CreditCards cc ON c.CustomerID = cc.CustomerID AND cc.Status = 'Активна'\nLEFT JOIN CardTransactions ct ON cc.CardID = ct.CardID AND ct.Status = 'Завершена'\nGROUP BY c.FirstName, c.LastName\nORDER BY TotalCardExpenses DESC;"
        }
    ]
}