{
    "queries": [
        {
            "question": "Какие отделы имеют более 2 проектов в процессе?",
            "sql_query": "SELECT d.DepartmentName, COUNT(p.ProjectID) AS ProjectCount FROM Departments d JOIN Projects p ON d.DepartmentID = p.DepartmentID WHERE p.Status = 'В процессе' GROUP BY d.DepartmentName HAVING COUNT(p.ProjectID) > 2;",
            "gpt-4o_response": "SELECT \n    d.DepartmentName, \n    COUNT(p.ProjectID) AS ProjectCount\nFROM \n    Departments d\nJOIN \n    Projects p ON d.DepartmentID = p.DepartmentID\nWHERE \n    p.Status = 'В процессе'\nGROUP BY \n    d.DepartmentName\nHAVING \n    COUNT(p.ProjectID) > 2;",
            "gpt-4o_response_ru": "SELECT \n    d.DepartmentName,\n    COUNT(p.ProjectID) AS ProjectCount\nFROM \n    Departments d\nJOIN \n    Projects p ON d.DepartmentID = p.DepartmentID\nWHERE \n    p.Status = 'В процессе'\nGROUP BY \n    d.DepartmentName\nHAVING \n    COUNT(p.ProjectID) > 2;",
            "google/gemini-2.0-flash-001_response": "SELECT d.DepartmentName\nFROM Departments d\nJOIN Projects p ON d.DepartmentID = p.DepartmentID\nWHERE p.Status = 'В процессе'\nGROUP BY d.DepartmentName\nHAVING COUNT(p.ProjectID) > 2;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT d.DepartmentName, COUNT(p.ProjectID) AS NumberOfProjectsInProgress\nFROM Departments d\nJOIN Projects p ON d.DepartmentID = p.DepartmentID\nWHERE p.Status = 'В процессе'\nGROUP BY d.DepartmentName\nHAVING COUNT(p.ProjectID) > 2;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    d.DepartmentName, \n    COUNT(p.ProjectID) as ProjectCount\nFROM \n    Departments d \nJOIN \n    Projects p ON d.DepartmentID = p.DepartmentID\nWHERE \n    p.Status = 'В процессе'\nGROUP BY \n    d.DepartmentName\nHAVING \n    COUNT(p.ProjectID) > 2;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    d.DepartmentName, \n    COUNT(p.ProjectID) as ProjectCount\nFROM \n    Departments d\nJOIN \n    Projects p ON d.DepartmentID = p.DepartmentID\nWHERE \n    p.Status = 'В процессе'\nGROUP BY \n    d.DepartmentName\nHAVING \n    COUNT(p.ProjectID) > 2",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT d.DepartmentName, COUNT(p.ProjectID) AS ProjectCount \nFROM Departments d \nJOIN Projects p ON d.DepartmentID = p.DepartmentID \nWHERE p.Status = 'В процессе' \nGROUP BY d.DepartmentName \nHAVING COUNT(p.ProjectID) > 2;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT d.DepartmentName, COUNT(p.ProjectID) AS ProjectCount \nFROM Departments d \nJOIN Projects p ON d.DepartmentID = p.DepartmentID \nWHERE p.Status = 'В процессе' \nGROUP BY d.DepartmentName \nHAVING COUNT(p.ProjectID) > 2;",
            "gigachat_response": "SELECT d.DepartmentName, COUNT(p.ProjectID) AS ActiveProjects\nFROM Departments d\nJOIN Projects p ON d.DepartmentID = p.DepartmentID\nWHERE p.Status = 'В процессе'\nGROUP BY d.DepartmentName\nHAVING COUNT(p.ProjectID) > 2;",
            "gigachat_response_ru": "SELECT d.DepartmentName, COUNT(p.ProjectID) AS ProjectCount\nFROM Departments d\nJOIN Projects p ON d.DepartmentID = p.DepartmentID\nWHERE p.Status = 'В процессе'\nGROUP BY d.DepartmentName\nHAVING COUNT(p.ProjectID) > 2;"
        },
        {
            "question": "Какие клиенты имеют более 2 запланированных проектов?",
            "sql_query": "SELECT c.ClientName, COUNT(p.ProjectID) AS ProjectCount FROM Clients c JOIN Projects p ON c.ClientID = p.ClientID WHERE p.Status = 'Планируется' GROUP BY c.ClientName HAVING COUNT(p.ProjectID) > 2;",
            "gpt-4o_response": "SELECT \n    c.ClientName,\n    COUNT(p.ProjectID) AS PlannedProjectCount\nFROM \n    Clients c\nJOIN \n    Projects p ON c.ClientID = p.ClientID\nWHERE \n    p.Status = 'Планируется'\nGROUP BY \n    c.ClientName\nHAVING \n    COUNT(p.ProjectID) > 2;",
            "gpt-4o_response_ru": "SELECT \n    c.ClientName,\n    COUNT(p.ProjectID) AS PlannedProjectsCount\nFROM \n    Clients c\nJOIN \n    Projects p ON c.ClientID = p.ClientID\nWHERE \n    p.Status = 'Планируется'\nGROUP BY \n    c.ClientName\nHAVING \n    COUNT(p.ProjectID) > 2;",
            "google/gemini-2.0-flash-001_response": "SELECT \n    c.ClientName,\n    COUNT(p.ProjectID) AS PlannedProjectsCount\nFROM Clients c\nJOIN Projects p ON c.ClientID = p.ClientID\nWHERE p.Status = 'Планируется'\nGROUP BY c.ClientName\nHAVING COUNT(p.ProjectID) > 2;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT \n    c.ClientName,\n    COUNT(p.ProjectID) AS NumberOfProjects\nFROM Clients c\nJOIN Projects p ON c.ClientID = p.ClientID\nWHERE p.Status = 'Планируется'\nGROUP BY c.ClientName\nHAVING COUNT(p.ProjectID) > 2;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    c.ClientName, \n    COUNT(p.ProjectID) as PlannedProjectsCount\nFROM \n    Clients c\nJOIN \n    Projects p ON c.ClientID = p.ClientID\nWHERE \n    p.Status = 'Планируется'\nGROUP BY \n    c.ClientName\nHAVING \n    COUNT(p.ProjectID) > 2;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    c.ClientName, \n    COUNT(p.ProjectID) as ProjectCount\nFROM \n    Clients c\nJOIN \n    Projects p ON c.ClientID = p.ClientID\nWHERE \n    p.Status = 'В процессе'\nGROUP BY \n    c.ClientName\nHAVING \n    COUNT(p.ProjectID) > 2\nORDER BY \n    ProjectCount DESC;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    c.ClientName,\n    COUNT(p.ProjectID) AS ProjectCount\nFROM Clients c\nJOIN Projects p ON c.ClientID = p.ClientID\nWHERE p.Status = 'Планируется'\nGROUP BY c.ClientName\nHAVING COUNT(p.ProjectID) > 2;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    c.ClientName,\n    COUNT(p.ProjectID) AS ProjectCount\nFROM \n    Clients c\nJOIN \n    Projects p ON c.ClientID = p.ClientID\nWHERE \n    p.Status = 'Планируется'\nGROUP BY \n    c.ClientName\nHAVING \n    COUNT(p.ProjectID) > 2;",
            "gigachat_response": "SELECT \n    cl.ClientName,\n    COUNT(pr.ProjectID) AS PlannedProjectsCount\nFROM \n    Clients cl\nJOIN \n    Projects pr ON cl.ClientID = pr.ClientID\nWHERE \n    pr.Status = 'Планируется'\nGROUP BY \n    cl.ClientName\nHAVING \n    COUNT(pr.ProjectID) > 2;",
            "gigachat_response_ru": "SELECT c.ClientName, COUNT(p.ProjectID) AS PlannedProjects\nFROM Clients c\nJOIN Projects p ON c.ClientID = p.ClientID\nWHERE p.Status = 'Планируется'\nGROUP BY c.ClientName\nHAVING COUNT(p.ProjectID) > 2;"
        },
        {
            "question": "Какие проекты имеют утвержденные бюджеты с потраченными средствами более 5 миллионов?",
            "sql_query": "SELECT p.ProjectName, SUM(b.SpentAmount) AS TotalSpent FROM Projects p JOIN Budgets b ON p.ProjectID = b.ProjectID WHERE b.Status = 'Подтвержден' GROUP BY p.ProjectName HAVING SUM(b.SpentAmount) > 50000;",
            "gpt-4o_response": "SELECT \n    p.ProjectName,\n    p.Budget,\n    b.SpentAmount,\n    b.Status\nFROM \n    Projects p\nJOIN \n    Budgets b ON p.ProjectID = b.ProjectID\nWHERE \n    b.Status = 'Подтвержден' \n    AND b.SpentAmount > 5000000;",
            "gpt-4o_response_ru": "SELECT \n    p.ProjectName,\n    p.Budget,\n    b.SpentAmount\nFROM \n    Projects p\nJOIN \n    Budgets b ON p.ProjectID = b.ProjectID\nWHERE \n    b.Status = 'Подтвержден' \n    AND b.SpentAmount > 5000000;",
            "google/gemini-2.0-flash-001_response": "SELECT \n    p.ProjectName,\n    b.TotalBudget,\n    b.SpentAmount,\n    d.DepartmentName\nFROM Projects p\nJOIN Budgets b ON p.ProjectID = b.ProjectID\nJOIN Departments d ON b.DepartmentID = d.DepartmentID\nWHERE b.Status = 'Подтвержден' AND b.SpentAmount > 5000000;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    p.ProjectName,\n    b.TotalBudget,\n    b.SpentAmount,\n    d.DepartmentName\nFROM\n    Budgets b\nJOIN\n    Projects p ON b.ProjectID = p.ProjectID\nJOIN\n    Departments d ON b.DepartmentID = d.DepartmentID\nWHERE\n    b.Status = 'Подтвержден' AND b.SpentAmount > 5000000;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    p.ProjectName,\n    p.Budget,\n    b.SpentAmount,\n    b.RemainingAmount,\n    b.Status,\n    d.DepartmentName\nFROM \n    Projects p\nJOIN \n    Budgets b ON p.ProjectID = b.ProjectID\nJOIN \n    Departments d ON p.DepartmentID = d.DepartmentID\nWHERE \n    b.Status = 'Подтвержден'\nAND \n    b.SpentAmount > 5000000;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    p.ProjectName,\n    b.TotalBudget,\n    b.SpentAmount,\n    b.RemainingAmount,\n    b.Status,\n    d.DepartmentName,\n    e.FirstName,\n    e.LastName\nFROM \n    Projects p\nJOIN \n    Budgets b ON p.ProjectID = b.ProjectID\nJOIN \n    Departments d ON b.DepartmentID = d.DepartmentID\nJOIN \n    Engineers e ON p.ProjectManagerID = e.EngineerID\nWHERE \n    b.Status = 'Подтвержден' \n    AND b.SpentAmount > 5000000;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    p.ProjectID,\n    p.ProjectName,\n    p.StartDate,\n    p.EndDate,\n    p.Budget,\n    b.SpentAmount,\n    b.RemainingAmount,\n    d.DepartmentName,\n    c.ClientName\nFROM Projects p\nJOIN Budgets b ON p.ProjectID = b.ProjectID\nJOIN Departments d ON p.DepartmentID = d.DepartmentID\nJOIN Clients c ON p.ClientID = c.ClientID\nWHERE b.Status = 'Подтвержден'\nAND b.SpentAmount > 5000000;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    p.ProjectID,\n    p.ProjectName,\n    b.TotalBudget,\n    b.SpentAmount,\n    b.RemainingAmount\nFROM \n    Projects p\nJOIN \n    Budgets b ON p.ProjectID = b.ProjectID\nWHERE \n    b.Status = 'Подтвержден'\n    AND b.SpentAmount > 5000000;",
            "gigachat_response": "SELECT \n    pr.ProjectName,\n    bu.TotalBudget,\n    bu.SpentAmount\nFROM \n    Projects pr\nJOIN \n    Budgets bu ON pr.ProjectID = bu.ProjectID\nWHERE \n    bu.Status = 'Подтвержден' \nAND \n    bu.SpentAmount > 5000000;",
            "gigachat_response_ru": "SELECT p.ProjectName, b.TotalBudget, b.SpentAmount\nFROM Projects p\nINNER JOIN Budgets b ON p.ProjectID = b.ProjectID\nWHERE b.Status = 'Подтвержден' AND b.SpentAmount > 5000000;"
        },
        {
            "question": "Какие поставщики имеют общую стоимость материалов на складе более 10 тысяч?",
            "sql_query": "SELECT s.SupplierName, SUM(m.UnitPrice * m.QuantityInStock) AS TotalValue FROM Suppliers s JOIN Materials m ON s.SupplierID = m.SupplierID WHERE m.QuantityInStock > 50 GROUP BY s.SupplierName HAVING SUM(m.UnitPrice * m.QuantityInStock) > 10000;",
            "gpt-4o_response": "SELECT \n    s.SupplierName, \n    SUM(m.UnitPrice * m.QuantityInStock) AS TotalMaterialValue\nFROM \n    Suppliers s\nJOIN \n    Materials m ON s.SupplierID = m.SupplierID\nGROUP BY \n    s.SupplierName\nHAVING \n    SUM(m.UnitPrice * m.QuantityInStock) > 10000;",
            "gpt-4o_response_ru": "SELECT \n    s.SupplierName, \n    SUM(m.UnitPrice * m.QuantityInStock) AS TotalMaterialValue\nFROM \n    Suppliers s\nJOIN \n    Materials m ON s.SupplierID = m.SupplierID\nGROUP BY \n    s.SupplierName\nHAVING \n    SUM(m.UnitPrice * m.QuantityInStock) > 10000;",
            "google/gemini-2.0-flash-001_response": "SELECT \n    s.SupplierName,\n    SUM(m.UnitPrice * m.QuantityInStock) AS TotalStockValue\nFROM Suppliers s\nJOIN Materials m ON s.SupplierID = m.SupplierID\nGROUP BY s.SupplierName\nHAVING SUM(m.UnitPrice * m.QuantityInStock) > 10000;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT \n    s.SupplierName,\n    SUM(m.UnitPrice * m.QuantityInStock) AS TotalStockValue\nFROM Suppliers s\nJOIN Materials m ON s.SupplierID = m.SupplierID\nGROUP BY s.SupplierName\nHAVING SUM(m.UnitPrice * m.QuantityInStock) > 10000;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    s.SupplierName, \n    SUM(m.UnitPrice * m.QuantityInStock) as TotalMaterialCost\nFROM \n    Suppliers s\nJOIN \n    Materials m ON s.SupplierID = m.SupplierID\nGROUP BY \n    s.SupplierName\nHAVING \n    SUM(m.UnitPrice * m.QuantityInStock) > 10000",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    s.SupplierName, \n    SUM(m.UnitPrice * m.QuantityInStock) as TotalMaterialCost\nFROM \n    Suppliers s\nJOIN \n    Materials m ON s.SupplierID = m.SupplierID\nGROUP BY \n    s.SupplierName\nHAVING \n    SUM(m.UnitPrice * m.QuantityInStock) > 10000;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    s.SupplierName,\n    SUM(m.UnitPrice * m.QuantityInStock) AS TotalInventoryValue\nFROM \n    Suppliers s\nJOIN \n    Materials m ON s.SupplierID = m.SupplierID\nGROUP BY \n    s.SupplierName\nHAVING \n    SUM(m.UnitPrice * m.QuantityInStock) > 10000;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT s.SupplierName, SUM(m.UnitPrice * m.QuantityInStock) AS TotalStockValue\nFROM Suppliers s\nJOIN Materials m ON s.SupplierID = m.SupplierID\nGROUP BY s.SupplierName\nHAVING SUM(m.UnitPrice * m.QuantityInStock) > 10000;",
            "gigachat_response": "SELECT \n    s.SupplierName,\n    SUM(m.UnitPrice * m.QuantityInStock) AS TotalMaterialValue\nFROM \n    Suppliers s\nJOIN \n    Materials m ON s.SupplierID = m.SupplierID\nGROUP BY \n    s.SupplierName\nHAVING \n    SUM(m.UnitPrice * m.QuantityInStock) > 10000;",
            "gigachat_response_ru": "SELECT s.SupplierName, SUM(m.UnitPrice * m.QuantityInStock) AS TotalValue\nFROM Suppliers s\nJOIN Materials m ON s.SupplierID = m.SupplierID\nGROUP BY s.SupplierName\nHAVING TotalValue > 10000;"
        },
        {
            "question": "Получить список инженеров, работающих над проектами с бюджетом свыше 7 млн рублей и имеющих сертификаты уровня 'Продвинутый' или 'Эксперт'. В ответе будут показаны: ФИО инженера, должность, количество проектов, средний бюджет проектов и список сертификатов. Результаты отсортированы по среднему бюджету проектов, показаны топ-4 записи.",
            "sql_query": "WITH EngineerProjectStats AS (\n    SELECT \n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', e.LastName) as EngineerName,\n        e.Position,\n        COUNT(p.ProjectID) as ProjectCount,\n        AVG(p.Budget) as AvgProjectBudget,\n        GROUP_CONCAT(DISTINCT c.CertificationName) as Certifications\n    FROM Engineers e\n    JOIN Projects p ON p.ProjectManagerID = e.EngineerID\n    JOIN Certifications c ON c.EngineerID = e.EngineerID\n    WHERE p.Budget > 7000000\n    AND c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    GROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position\n)\nSELECT \n    EngineerName,\n    Position,\n    ProjectCount,\n    ROUND(AvgProjectBudget, 2) as AvgProjectBudget,\n    Certifications\nFROM EngineerProjectStats\nORDER BY AvgProjectBudget DESC\nLIMIT 4;",
            "gpt-4o_response": "WITH EngineerProjectStats AS (\n    SELECT \n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', e.LastName) as EngineerName,\n        e.Position,\n        COUNT(DISTINCT p.ProjectID) as ProjectCount,\n        AVG(p.Budget) as AvgProjectBudget,\n        GROUP_CONCAT(DISTINCT c.CertificationName) as Certifications\n    FROM Engineers e\n    JOIN Projects p ON p.ProjectManagerID = e.EngineerID\n    JOIN Certifications c ON c.EngineerID = e.EngineerID\n    WHERE p.Budget > 7000000\n    AND c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    GROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position\n)\nSELECT \n    EngineerName,\n    Position,\n    ProjectCount,\n    ROUND(AvgProjectBudget, 2) as AvgProjectBudget,\n    Certifications\nFROM EngineerProjectStats\nORDER BY AvgProjectBudget DESC\nLIMIT 4;",
            "gpt-4o_response_ru": "WITH EngineerProjectStats AS (\n    SELECT \n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', e.LastName) AS EngineerName,\n        e.Position,\n        COUNT(DISTINCT p.ProjectID) AS ProjectCount,\n        AVG(p.Budget) AS AvgProjectBudget,\n        GROUP_CONCAT(DISTINCT c.CertificationName) AS Certifications\n    FROM Engineers e\n    JOIN Tasks t ON e.EngineerID = t.AssignedTo\n    JOIN Projects p ON t.ProjectID = p.ProjectID\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE p.Budget > 7000000\n    AND c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    GROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position\n)\nSELECT \n    EngineerName,\n    Position,\n    ProjectCount,\n    ROUND(AvgProjectBudget, 2) AS AvgProjectBudget,\n    Certifications\nFROM EngineerProjectStats\nORDER BY AvgProjectBudget DESC\nLIMIT 4;",
            "google/gemini-2.0-flash-001_response": "WITH EngineerProjectCertifications AS (\n    SELECT \n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', e.LastName) AS EngineerName,\n        e.Position,\n        COUNT(DISTINCT p.ProjectID) AS ProjectCount,\n        AVG(p.Budget) AS AverageProjectBudget,\n        GROUP_CONCAT(DISTINCT c.CertificationName) AS Certifications\n    FROM Engineers e\n    JOIN Projects p ON e.EngineerID = p.ProjectManagerID\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE p.Budget > 7000000\n    AND c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    GROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position\n)\nSELECT \n    EngineerName,\n    Position,\n    ProjectCount,\n    ROUND(AverageProjectBudget, 2) AS AverageProjectBudget,\n    Certifications\nFROM EngineerProjectCertifications\nORDER BY AverageProjectBudget DESC\nLIMIT 4;",
            "google/gemini-2.0-flash-001_response_ru": "WITH EngineerProjectStats AS (\n    SELECT \n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', e.LastName) AS EngineerName,\n        e.Position,\n        COUNT(DISTINCT p.ProjectID) AS ProjectCount,\n        AVG(p.Budget) AS AverageBudget,\n        GROUP_CONCAT(DISTINCT c.CertificationName) AS Certifications\n    FROM Engineers e\n    JOIN Projects p ON e.EngineerID = p.ProjectManagerID\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE p.Budget > 7000000\n    AND c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    GROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position\n)\nSELECT \n    EngineerName,\n    Position,\n    ProjectCount,\n    ROUND(AverageBudget, 2) AS AverageBudget,\n    Certifications\nFROM EngineerProjectStats\nORDER BY AverageBudget DESC\nLIMIT 4;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH EngineerProjectStats AS (\n    SELECT \n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', e.MiddleName, ' ', e.LastName) as EngineerName,\n        e.Position,\n        COUNT(DISTINCT p.ProjectID) as ProjectCount,\n        AVG(p.Budget) as AvgProjectBudget,\n        GROUP_CONCAT(DISTINCT c.CertificationName) as Certifications\n    FROM Engineers e\n    JOIN Projects p ON e.EngineerID = p.ProjectManagerID\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE p.Budget > 7000000\n    AND c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    GROUP BY e.EngineerID, e.FirstName, e.MiddleName, e.LastName, e.Position\n)\nSELECT \n    EngineerName,\n    Position,\n    ProjectCount,\n    ROUND(AvgProjectBudget, 2) as AvgProjectBudget,\n    Certifications\nFROM EngineerProjectStats\nORDER BY AvgProjectBudget DESC\nLIMIT 4;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH EngineerProjectStats AS (\n    SELECT \n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', e.MiddleName, ' ', e.LastName) as EngineerName,\n        e.Position,\n        COUNT(DISTINCT p.ProjectID) as ProjectCount,\n        AVG(p.Budget) as AvgProjectBudget,\n        GROUP_CONCAT(DISTINCT c.CertificationName) as Certifications\n    FROM Engineers e\n    JOIN Projects p ON e.EngineerID = p.ProjectManagerID\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE p.Budget > 7000000\n    AND c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    GROUP BY e.EngineerID, e.FirstName, e.MiddleName, e.LastName, e.Position\n)\nSELECT \n    EngineerName,\n    Position,\n    ProjectCount,\n    ROUND(AvgProjectBudget, 2) as AvgProjectBudget,\n    Certifications\nFROM EngineerProjectStats\nORDER BY AvgProjectBudget DESC\nLIMIT 4;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH EngineerProjectStats AS (\n    SELECT \n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', COALESCE(e.MiddleName, ''), ' ', e.LastName) AS FullName,\n        e.Position,\n        COUNT(p.ProjectID) AS ProjectCount,\n        AVG(p.Budget) AS AvgProjectBudget,\n        GROUP_CONCAT(DISTINCT c.CertificationName) AS Certifications\n    FROM Engineers e\n    JOIN Projects p ON e.DepartmentID = p.DepartmentID\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE p.Budget > 7000000\n    AND c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    AND c.Status = 'Действителен'\n    GROUP BY e.EngineerID, e.FirstName, e.MiddleName, e.LastName, e.Position\n)\nSELECT \n    FullName,\n    Position,\n    ProjectCount,\n    ROUND(AvgProjectBudget, 2) AS AvgProjectBudget,\n    Certifications\nFROM EngineerProjectStats\nORDER BY AvgProjectBudget DESC\nLIMIT 4;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "WITH EngineerProjectStats AS (\n    SELECT \n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', COALESCE(e.MiddleName, ''), ' ', e.LastName) AS FullName,\n        e.Position,\n        COUNT(p.ProjectID) AS ProjectCount,\n        AVG(p.Budget) AS AvgProjectBudget,\n        GROUP_CONCAT(DISTINCT c.CertificationName) AS Certifications\n    FROM Engineers e\n    JOIN Projects p ON e.EngineerID = p.ProjectManagerID\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE p.Budget > 7000000\n    AND c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    AND c.Status = 'Действителен'\n    GROUP BY e.EngineerID, e.FirstName, e.MiddleName, e.LastName, e.Position\n)\nSELECT \n    FullName,\n    Position,\n    ProjectCount,\n    ROUND(AvgProjectBudget, 2) AS AvgProjectBudget,\n    Certifications\nFROM EngineerProjectStats\nORDER BY AvgProjectBudget DESC\nLIMIT 4;",
            "gigachat_response": "WITH CertifiedEngineers AS (\n    SELECT DISTINCT e.EngineerID, e.FirstName, e.MiddleName, e.LastName, e.Position\n    FROM Engineers e\n    INNER JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n      AND c.Status = 'Действителен'\n),\nProjectDetails AS (\n    SELECT p.ProjectID, p.ProjectName, p.Budget, pm.EngineerID\n    FROM Projects p\n    INNER JOIN Engineers pm ON p.ProjectManagerID = pm.EngineerID\n    WHERE p.Budget > 7000000\n),\nEngineerProjectCounts AS (\n    SELECT ce.EngineerID, COUNT(pd.ProjectID) AS ProjectCount, AVG(pd.Budget) AS AverageBudget\n    FROM CertifiedEngineers ce\n    INNER JOIN ProjectDetails pd ON ce.EngineerID = pd.EngineerID\n    GROUP BY ce.EngineerID\n),\nFinalResult AS (\n    SELECT \n        ce.FirstName || ' ' || COALESCE(ce.MiddleName, '') || ' ' || ce.LastName AS FullName,\n        ce.Position,\n        epc.ProjectCount,\n        ROUND(epc.AverageBudget, 2) AS AverageProjectBudget,\n        GROUP_CONCAT(c.CertificationName ORDER BY c.CertificationName SEPARATOR ', ') AS CertificateList\n    FROM CertifiedEngineers ce\n    INNER JOIN EngineerProjectCounts epc ON ce.EngineerID = epc.EngineerID\n    INNER JOIN Certifications c ON ce.EngineerID = c.EngineerID\n    WHERE c.CertificationLevel IN ('Продвинутый', 'Эксперт') AND c.Status = 'Действителен'\n    GROUP BY ce.EngineerID, ce.FirstName, ce.MiddleName, ce.LastName, ce.Position, epc.ProjectCount, epc.AverageBudget\n)\nSELECT *\nFROM FinalResult\nORDER BY AverageProjectBudget DESC\nLIMIT 4;",
            "gigachat_response_ru": "SELECT \n    e.FirstName || ' ' || e.MiddleName || ' ' || e.LastName AS FullName,\n    e.Position,\n    COUNT(DISTINCT p.ProjectID) AS ProjectCount,\n    ROUND(AVG(p.Budget), 2) AS AverageProjectBudget,\n    GROUP_CONCAT(c.CertificationName SEPARATOR ', ') AS CertificateList\nFROM Engineers e\nJOIN Projects p ON e.EngineerID = p.ProjectManagerID\nJOIN Certifications c ON e.EngineerID = c.EngineerID\nWHERE p.Budget > 7000000\nAND c.CertificationLevel IN ('Продвинутый', 'Эксперт')\nGROUP BY e.EngineerID, e.FirstName, e.MiddleName, e.LastName, e.Position\nORDER BY AverageProjectBudget DESC\nLIMIT 4;"
        },
        {
            "question": "Получить список отделов с наибольшим количеством инцидентов по технике безопасности, где средняя стоимость устранения превышает 2000 рублей. В ответе будут показаны: название отдела, количество инцидентов, средняя стоимость исправления, список ответственных инженеров и бюджет отдела. Учитываются только инциденты с высоким уровнем серьезности. Результаты отсортированы по количеству инцидентов, показаны топ-2 записи.",
            "sql_query": "WITH DepartmentSafetyStats AS (\n    SELECT \n        d.DepartmentID,\n        d.DepartmentName,\n        COUNT(s.IncidentID) as IncidentCount,\n        AVG(m.Cost) as AvgCorrectionCost,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as ResponsibleEngineers,\n        d.Budget as DepartmentBudget\n    FROM Departments d\n    JOIN Engineers e ON d.DepartmentID = e.DepartmentID\n    JOIN SafetyIncidents s ON s.EngineerID = e.EngineerID\n    JOIN MaintenanceRecords m ON m.EngineerID = e.EngineerID\n    WHERE s.SeverityLevel = 'Высокий'\n    GROUP BY d.DepartmentID, d.DepartmentName, d.Budget\n    HAVING AVG(m.Cost) > 2000\n)\nSELECT \n    DepartmentName,\n    IncidentCount,\n    ROUND(AvgCorrectionCost, 2) as AvgCorrectionCost,\n    ResponsibleEngineers,\n    DepartmentBudget\nFROM DepartmentSafetyStats\nORDER BY IncidentCount DESC\nLIMIT 2;",
            "gpt-4o_response": "WITH IncidentStats AS (\n    SELECT \n        d.DepartmentID,\n        d.DepartmentName,\n        COUNT(si.IncidentID) AS IncidentCount,\n        AVG(mr.Cost) AS AvgRepairCost,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS ResponsibleEngineers,\n        d.Budget\n    FROM SafetyIncidents si\n    JOIN Engineers e ON si.EngineerID = e.EngineerID\n    JOIN Departments d ON e.DepartmentID = d.DepartmentID\n    JOIN MaintenanceRecords mr ON si.EquipmentID = mr.EquipmentID\n    WHERE si.SeverityLevel = 'Высокий'\n    GROUP BY d.DepartmentID, d.DepartmentName, d.Budget\n    HAVING AVG(mr.Cost) > 2000\n)\nSELECT \n    DepartmentName,\n    IncidentCount,\n    ROUND(AvgRepairCost, 2) AS AvgRepairCost,\n    ResponsibleEngineers,\n    Budget\nFROM IncidentStats\nORDER BY IncidentCount DESC\nLIMIT 2;",
            "gpt-4o_response_ru": "WITH IncidentStats AS (\n    SELECT \n        d.DepartmentID,\n        d.DepartmentName,\n        COUNT(si.IncidentID) AS IncidentCount,\n        AVG(mr.Cost) AS AvgRepairCost,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS ResponsibleEngineers,\n        d.Budget\n    FROM SafetyIncidents si\n    JOIN Engineers e ON si.EngineerID = e.EngineerID\n    JOIN Departments d ON e.DepartmentID = d.DepartmentID\n    JOIN MaintenanceRecords mr ON si.EquipmentID = mr.EquipmentID\n    WHERE si.SeverityLevel = 'Высокий'\n    GROUP BY d.DepartmentID, d.DepartmentName, d.Budget\n    HAVING AVG(mr.Cost) > 2000\n)\nSELECT \n    DepartmentName,\n    IncidentCount,\n    ROUND(AvgRepairCost, 2) AS AvgRepairCost,\n    ResponsibleEngineers,\n    Budget\nFROM IncidentStats\nORDER BY IncidentCount DESC\nLIMIT 2;",
            "google/gemini-2.0-flash-001_response": "WITH DepartmentSafetyIncidents AS (\n    SELECT\n        d.DepartmentID,\n        d.DepartmentName,\n        COUNT(si.IncidentID) AS IncidentCount,\n        AVG(CASE WHEN si.CorrectiveActions IS NOT NULL THEN\n                 (SELECT SUM(mr.Cost) \n                  FROM MaintenanceRecords mr\n                  JOIN Equipment eq ON mr.EquipmentID = eq.EquipmentID\n                  WHERE eq.DepartmentID = d.DepartmentID\n                  AND si.EquipmentID = eq.EquipmentID)\n            ELSE 0 END) AS AvgCorrectiveCost,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS ResponsibleEngineers,\n        d.Budget AS DepartmentBudget\n    FROM Departments d\n    JOIN Engineers e ON d.DepartmentID = e.DepartmentID\n    LEFT JOIN SafetyIncidents si ON e.EngineerID = si.EngineerID\n    WHERE si.SeverityLevel = 'Высокий'\n    GROUP BY d.DepartmentID, d.DepartmentName, d.Budget\n    HAVING AVG(CASE WHEN si.CorrectiveActions IS NOT NULL THEN\n                 (SELECT SUM(mr.Cost) \n                  FROM MaintenanceRecords mr\n                  JOIN Equipment eq ON mr.EquipmentID = eq.EquipmentID\n                  WHERE eq.DepartmentID = d.DepartmentID\n                  AND si.EquipmentID = eq.EquipmentID)\n            ELSE 0 END) > 2000\n)\nSELECT\n    DepartmentName,\n    IncidentCount,\n    ROUND(AvgCorrectiveCost, 2) AS AvgCorrectiveCost,\n    ResponsibleEngineers,\n    DepartmentBudget\nFROM DepartmentSafetyIncidents\nORDER BY IncidentCount DESC\nLIMIT 2;",
            "google/gemini-2.0-flash-001_response_ru": "WITH DepartmentIncidentStats AS (\n    SELECT \n        d.DepartmentID,\n        d.DepartmentName,\n        COUNT(si.IncidentID) AS IncidentCount,\n        AVG(mr.Cost) AS AvgRepairCost,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS ResponsibleEngineers,\n        d.Budget AS DepartmentBudget\n    FROM Departments d\n    JOIN Engineers eng ON d.DepartmentID = eng.DepartmentID\n    JOIN SafetyIncidents si ON eng.EngineerID = si.EngineerID\n    LEFT JOIN MaintenanceRecords mr ON si.EquipmentID = mr.EquipmentID\n    LEFT JOIN Engineers e ON mr.EngineerID = e.EngineerID\n    WHERE si.SeverityLevel = 'Высокий'\n    GROUP BY d.DepartmentID, d.DepartmentName, d.Budget\n    HAVING AVG(mr.Cost) > 2000\n)\nSELECT \n    DepartmentName,\n    IncidentCount,\n    ROUND(AvgRepairCost, 2) AS AvgRepairCost,\n    ResponsibleEngineers,\n    DepartmentBudget\nFROM DepartmentIncidentStats\nORDER BY IncidentCount DESC\nLIMIT 2;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH DepartmentIncidentStats AS (\n    SELECT \n        d.DepartmentName,\n        COUNT(si.IncidentID) as IncidentCount,\n        AVG(si.Cost) as AvgRepairCost,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as ResponsibleEngineers,\n        d.Budget as DepartmentBudget\n    FROM Departments d\n    JOIN Engineers e ON d.DepartmentID = e.DepartmentID\n    JOIN SafetyIncidents si ON e.EngineerID = si.EngineerID\n    WHERE si.SeverityLevel = 'Высокий'\n    GROUP BY d.DepartmentName, d.Budget\n    HAVING AVG(si.Cost) > 2000\n)\nSELECT \n    DepartmentName,\n    IncidentCount,\n    ROUND(AvgRepairCost, 2) as AvgRepairCost,\n    ResponsibleEngineers,\n    DepartmentBudget\nFROM DepartmentIncidentStats\nORDER BY IncidentCount DESC\nLIMIT 2;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH DepartmentIncidentStats AS (\n    SELECT \n        d.DepartmentID,\n        d.DepartmentName,\n        COUNT(si.IncidentID) as IncidentCount,\n        AVG(si.Cost) as AvgRepairCost,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as ResponsibleEngineers,\n        d.Budget as DepartmentBudget\n    FROM Departments d\n    JOIN Equipment e ON d.DepartmentID = e.DepartmentID\n    JOIN SafetyIncidents si ON e.EquipmentID = si.EquipmentID\n    JOIN Engineers e ON si.EngineerID = e.EngineerID\n    WHERE si.SeverityLevel = 'Высокий'\n    GROUP BY d.DepartmentID, d.DepartmentName, d.Budget\n    HAVING AVG(si.Cost) > 2000\n)\nSELECT \n    DepartmentName,\n    IncidentCount,\n    ROUND(AvgRepairCost, 2) as AvgRepairCost,\n    ResponsibleEngineers,\n    DepartmentBudget\nFROM DepartmentIncidentStats\nORDER BY IncidentCount DESC\nLIMIT 2;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH DepartmentIncidents AS (\n    SELECT \n        d.DepartmentID,\n        d.DepartmentName,\n        d.Budget as DepartmentBudget,\n        COUNT(si.IncidentID) as IncidentCount,\n        AVG(mr.Cost) as AvgCorrectionCost,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as ResponsibleEngineers\n    FROM Departments d\n    JOIN Engineers e ON d.DepartmentID = e.DepartmentID\n    JOIN SafetyIncidents si ON e.EngineerID = si.EngineerID\n    JOIN MaintenanceRecords mr ON si.IncidentID = mr.MaintenanceID\n    WHERE si.SeverityLevel = 'Высокий'\n    GROUP BY d.DepartmentID, d.DepartmentName, d.Budget\n    HAVING AVG(mr.Cost) > 2000\n)\nSELECT \n    DepartmentName,\n    IncidentCount,\n    ROUND(AvgCorrectionCost, 2) as AvgCorrectionCost,\n    ResponsibleEngineers,\n    DepartmentBudget\nFROM DepartmentIncidents\nORDER BY IncidentCount DESC\nLIMIT 2;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "WITH DepartmentIncidentStats AS (\n    SELECT \n        d.DepartmentID,\n        d.DepartmentName,\n        d.Budget,\n        COUNT(si.IncidentID) as IncidentCount,\n        AVG(mr.Cost) as AvgCorrectionCost,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as ResponsibleEngineers\n    FROM Departments d\n    JOIN Engineers e ON d.DepartmentID = e.DepartmentID\n    JOIN SafetyIncidents si ON e.EngineerID = si.EngineerID\n    JOIN MaintenanceRecords mr ON si.EquipmentID = mr.EquipmentID\n    WHERE si.SeverityLevel = 'Высокий'\n    GROUP BY d.DepartmentID, d.DepartmentName, d.Budget\n    HAVING AVG(mr.Cost) > 2000\n)\nSELECT \n    DepartmentName,\n    IncidentCount,\n    ROUND(AvgCorrectionCost, 2) as AvgCorrectionCost,\n    ResponsibleEngineers,\n    Budget\nFROM DepartmentIncidentStats\nORDER BY IncidentCount DESC\nLIMIT 2;",
            "gigachat_response": "SELECT \n    d.DepartmentName,\n    COUNT(si.IncidentID) AS IncidentCount,\n    AVG(CASE WHEN si.CorrectiveActions IS NOT NULL THEN REPLACE(REPLACE(REPLACE(si.CorrectiveActions, '.', ''), ',', '.'), 'руб', '') ELSE 0 END)::DECIMAL(10,2) AS AverageCorrectionCost,\n    STRING_AGG(CONCAT(e.FirstName, ' ', e.LastName), ', ') AS ResponsibleEngineers,\n    d.Budget\nFROM Departments d\nJOIN SafetyIncidents si ON d.DepartmentID = si.DepartmentID\nLEFT JOIN Engineers e ON si.ReportedBy = e.EngineerID\nWHERE si.SeverityLevel = 'Высокий'\nGROUP BY d.DepartmentName, d.Budget\nHAVING AVG(CASE WHEN si.CorrectiveActions IS NOT NULL THEN REPLACE(REPLACE(REPLACE(si.CorrectiveActions, '.', ''), ',', '.'), 'руб', '') ELSE 0 END)::DECIMAL(10,2) > 2000\nORDER BY IncidentCount DESC\nLIMIT 2;",
            "gigachat_response_ru": "SELECT \n    d.DepartmentName,\n    COUNT(si.IncidentID) AS IncidentCount,\n    AVG(mr.Cost) AS AverageRepairCost,\n    GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.MiddleName, ' ', e.LastName)) AS ResponsibleEngineers,\n    d.Budget\nFROM Departments d\nLEFT JOIN SafetyIncidents si ON d.DepartmentID = si.DepartmentID\nLEFT JOIN MaintenanceRecords mr ON si.EquipmentID = mr.EquipmentID\nLEFT JOIN Engineers e ON si.ReportedBy = e.EngineerID\nWHERE si.SeverityLevel = 'Высокий'\nGROUP BY d.DepartmentID, d.DepartmentName, d.Budget\nHAVING AVG(mr.Cost) > 2000\nORDER BY IncidentCount DESC\nLIMIT 2;"
        },
        {
            "question": "Получить список поставщиков, у которых стоимость единицы материала превышает 500 рублей и общее количество материалов на складе более 100 единиц. В ответе будут показаны: название поставщика, контактное лицо, количество различных типов материалов, средняя стоимость материалов и общее количество на складе. Результаты отсортированы по средней стоимости материалов, показаны топ-3 записи.",
            "sql_query": "WITH SupplierMaterialStats AS (\n    SELECT \n        s.SupplierID,\n        s.SupplierName,\n        s.ContactName,\n        COUNT(m.MaterialID) as MaterialTypesCount,\n        AVG(m.UnitPrice) as AvgMaterialPrice,\n        SUM(m.QuantityInStock) as TotalStock\n    FROM Suppliers s\n    JOIN Materials m ON s.SupplierID = m.SupplierID\n    WHERE m.UnitPrice > 500\n    GROUP BY s.SupplierID, s.SupplierName, s.ContactName\n    HAVING SUM(m.QuantityInStock) > 100\n)\nSELECT \n    SupplierName,\n    ContactName,\n    MaterialTypesCount,\n    ROUND(AvgMaterialPrice, 2) as AvgMaterialPrice,\n    TotalStock\nFROM SupplierMaterialStats\nORDER BY AvgMaterialPrice DESC\nLIMIT 3;",
            "gpt-4o_response": "WITH SupplierMaterialStats AS (\n    SELECT \n        s.SupplierName,\n        s.ContactName,\n        COUNT(m.MaterialID) AS MaterialTypesCount,\n        AVG(m.UnitPrice) AS AvgMaterialPrice,\n        SUM(m.QuantityInStock) AS TotalQuantityInStock\n    FROM Suppliers s\n    JOIN Materials m ON s.SupplierID = m.SupplierID\n    WHERE m.UnitPrice > 500\n    AND m.QuantityInStock > 100\n    GROUP BY s.SupplierName, s.ContactName\n)\nSELECT \n    SupplierName,\n    ContactName,\n    MaterialTypesCount,\n    ROUND(AvgMaterialPrice, 2) AS AvgMaterialPrice,\n    TotalQuantityInStock\nFROM SupplierMaterialStats\nORDER BY AvgMaterialPrice DESC\nLIMIT 3;",
            "gpt-4o_response_ru": "SELECT \n    s.SupplierName, \n    s.ContactName, \n    COUNT(m.MaterialID) AS MaterialTypesCount, \n    AVG(m.UnitPrice) AS AvgMaterialPrice, \n    SUM(m.QuantityInStock) AS TotalQuantityInStock\nFROM \n    Suppliers s\nJOIN \n    Materials m ON s.SupplierID = m.SupplierID\nWHERE \n    m.UnitPrice > 500 \n    AND m.QuantityInStock > 100\nGROUP BY \n    s.SupplierName, \n    s.ContactName\nORDER BY \n    AvgMaterialPrice DESC\nLIMIT 3;",
            "google/gemini-2.0-flash-001_response": "SELECT \n    s.SupplierName,\n    s.ContactName,\n    COUNT(m.MaterialID) AS MaterialTypeCount,\n    AVG(m.UnitPrice) AS AverageMaterialPrice,\n    SUM(m.QuantityInStock) AS TotalQuantityInStock\nFROM Suppliers s\nJOIN Materials m ON s.SupplierID = m.SupplierID\nWHERE m.UnitPrice > 500\nGROUP BY s.SupplierName, s.ContactName\nHAVING SUM(m.QuantityInStock) > 100\nORDER BY AverageMaterialPrice\nLIMIT 3;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    s.SupplierName,\n    s.ContactName,\n    COUNT(DISTINCT m.MaterialID) AS MaterialTypeCount,\n    AVG(m.UnitPrice) AS AvgMaterialPrice,\n    SUM(m.QuantityInStock) AS TotalQuantityInStock\nFROM\n    Suppliers s\nJOIN\n    Materials m ON s.SupplierID = m.SupplierID\nWHERE\n    m.UnitPrice > 500\nGROUP BY\n    s.SupplierName, s.ContactName\nHAVING\n    SUM(m.QuantityInStock) > 100\nORDER BY\n    AvgMaterialPrice\nLIMIT 3;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH SupplierMaterialStats AS (\n    SELECT \n        s.SupplierName,\n        s.ContactName,\n        COUNT(DISTINCT m.MaterialName) as MaterialTypes,\n        AVG(m.UnitPrice) as AvgMaterialCost,\n        SUM(m.QuantityInStock) as TotalQuantity\n    FROM Suppliers s\n    JOIN Materials m ON s.SupplierID = m.SupplierID\n    WHERE m.UnitPrice > 500\n    GROUP BY s.SupplierName, s.ContactName\n    HAVING SUM(m.QuantityInStock) > 100\n)\nSELECT \n    SupplierName,\n    ContactName,\n    MaterialTypes,\n    ROUND(AvgMaterialCost, 2) as AvgMaterialCost,\n    TotalQuantity\nFROM SupplierMaterialStats\nORDER BY AvgMaterialCost DESC\nLIMIT 3;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    s.SupplierName,\n    s.ContactName,\n    COUNT(DISTINCT m.MaterialName) as MaterialTypes,\n    AVG(m.UnitPrice) as AverageMaterialCost,\n    SUM(m.QuantityInStock) as TotalMaterialsInStock\nFROM Suppliers s\nJOIN Materials m ON s.SupplierID = m.SupplierID\nWHERE m.UnitPrice > 500\nGROUP BY s.SupplierName, s.ContactName\nHAVING SUM(m.QuantityInStock) > 100\nORDER BY AverageMaterialCost DESC\nLIMIT 3;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    s.SupplierName,\n    s.ContactName,\n    COUNT(m.MaterialID) AS MaterialTypesCount,\n    AVG(m.UnitPrice) AS AvgMaterialPrice,\n    SUM(m.QuantityInStock) AS TotalQuantityInStock\nFROM Suppliers s\nJOIN Materials m ON s.SupplierID = m.SupplierID\nWHERE m.UnitPrice > 500\nGROUP BY s.SupplierName, s.ContactName\nHAVING SUM(m.QuantityInStock) > 100\nORDER BY AvgMaterialPrice DESC\nLIMIT 3;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    s.SupplierName,\n    s.ContactName,\n    COUNT(m.MaterialID) AS MaterialTypesCount,\n    AVG(m.UnitPrice) AS AvgMaterialPrice,\n    SUM(m.QuantityInStock) AS TotalQuantityInStock\nFROM Suppliers s\nJOIN Materials m ON s.SupplierID = m.SupplierID\nWHERE m.UnitPrice > 500\nGROUP BY s.SupplierID, s.SupplierName, s.ContactName\nHAVING SUM(m.QuantityInStock) > 100\nORDER BY AvgMaterialPrice DESC\nLIMIT 3;",
            "gigachat_response": "SELECT \n    s.SupplierName,\n    s.ContactName,\n    COUNT(DISTINCT m.MaterialID) AS DifferentMaterialTypes,\n    AVG(m.UnitPrice) AS AverageUnitPrice,\n    SUM(m.QuantityInStock) AS TotalQuantityOnStock\nFROM \n    Suppliers s\nJOIN \n    Materials m ON s.SupplierID = m.SupplierID\nWHERE \n    m.UnitPrice > 500 \n    AND m.QuantityInStock > 100\nGROUP BY \n    s.SupplierName, s.ContactName\nORDER BY \n    AverageUnitPrice DESC\nLIMIT 3;",
            "gigachat_response_ru": "SELECT \n    s.SupplierName,\n    s.ContactName,\n    COUNT(m.MaterialID) AS MaterialTypesCount,\n    AVG(m.UnitPrice) AS AverageUnitPrice,\n    SUM(m.QuantityInStock) AS TotalQuantityOnStock\nFROM Suppliers s\nJOIN Materials m ON s.SupplierID = m.SupplierID\nWHERE m.UnitPrice > 500 AND m.QuantityInStock > 100\nGROUP BY s.SupplierName, s.ContactName\nORDER BY AverageUnitPrice DESC\nLIMIT 3;"
        },
        {
            "question": "Получить список проектов, где количество документов проектирования превышает среднее значение по всем проектам. В ответе будут показаны: название проекта, количество документов, средняя версия документов, список авторов и бюджет проекта. Учитываются только документы в статусе 'Утвержден'. Результаты отсортированы по количеству документов, показаны топ-2 записи.",
            "sql_query": "WITH ProjectDocumentStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        COUNT(d.DocumentID) as DocumentCount,\n        AVG(CAST(d.Version AS DECIMAL(4,2))) as AvgVersion,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as Authors,\n        p.Budget as ProjectBudget\n    FROM Projects p\n    JOIN DesignDocuments d ON p.ProjectID = d.ProjectID\n    JOIN Engineers e ON d.AuthorID = e.EngineerID\n    WHERE d.Status = 'Утвержден'\n    GROUP BY p.ProjectID, p.ProjectName, p.Budget\n    HAVING COUNT(d.DocumentID) > (\n        SELECT AVG(DocumentCount)\n        FROM (\n            SELECT COUNT(DocumentID) as DocumentCount\n            FROM DesignDocuments\n            WHERE Status = 'Утвержден'\n            GROUP BY ProjectID\n        ) as AvgCounts\n    )\n)\nSELECT \n    ProjectName,\n    DocumentCount,\n    AvgVersion,\n    Authors,\n    ProjectBudget\nFROM ProjectDocumentStats\nORDER BY DocumentCount DESC\nLIMIT 2;",
            "gpt-4o_response": "WITH ProjectDocumentStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        COUNT(dd.DocumentID) AS DocumentCount,\n        AVG(CAST(SUBSTRING_INDEX(dd.Version, 'v', -1) AS DECIMAL(10,2))) AS AvgDocumentVersion,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS Authors,\n        p.Budget\n    FROM Projects p\n    JOIN DesignDocuments dd ON p.ProjectID = dd.ProjectID\n    JOIN Engineers e ON dd.AuthorID = e.EngineerID\n    WHERE dd.Status = 'Утвержден'\n    GROUP BY p.ProjectID, p.ProjectName, p.Budget\n),\nAverageDocumentCount AS (\n    SELECT AVG(DocumentCount) AS AvgDocumentCount\n    FROM ProjectDocumentStats\n)\nSELECT \n    pds.ProjectName,\n    pds.DocumentCount,\n    ROUND(pds.AvgDocumentVersion, 2) AS AvgDocumentVersion,\n    pds.Authors,\n    pds.Budget\nFROM ProjectDocumentStats pds\nJOIN AverageDocumentCount adc ON pds.DocumentCount > adc.AvgDocumentCount\nORDER BY pds.DocumentCount DESC\nLIMIT 2;",
            "gpt-4o_response_ru": "WITH DocumentStats AS (\n    SELECT \n        d.ProjectID,\n        COUNT(d.DocumentID) AS DocumentCount,\n        AVG(CAST(SUBSTRING_INDEX(d.Version, 'v', -1) AS DECIMAL(10,2))) AS AvgVersion\n    FROM DesignDocuments d\n    WHERE d.Status = 'Утвержден'\n    GROUP BY d.ProjectID\n),\nAverageDocumentCount AS (\n    SELECT AVG(DocumentCount) AS AvgDocumentCount\n    FROM DocumentStats\n),\nProjectDetails AS (\n    SELECT \n        p.ProjectName,\n        ds.DocumentCount,\n        ds.AvgVersion,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS Authors,\n        p.Budget\n    FROM Projects p\n    JOIN DocumentStats ds ON p.ProjectID = ds.ProjectID\n    JOIN DesignDocuments dd ON p.ProjectID = dd.ProjectID AND dd.Status = 'Утвержден'\n    JOIN Engineers e ON dd.AuthorID = e.EngineerID\n    WHERE ds.DocumentCount > (SELECT AvgDocumentCount FROM AverageDocumentCount)\n    GROUP BY p.ProjectID, p.ProjectName, ds.DocumentCount, ds.AvgVersion, p.Budget\n)\nSELECT \n    ProjectName,\n    DocumentCount,\n    ROUND(AvgVersion, 2) AS AvgVersion,\n    Authors,\n    Budget\nFROM ProjectDetails\nORDER BY DocumentCount DESC\nLIMIT 2;",
            "google/gemini-2.0-flash-001_response": "WITH ProjectDocumentCounts AS (\n    SELECT\n        ProjectID,\n        COUNT(*) AS DocumentCount,\n        AVG(Version) AS AverageVersion\n    FROM DesignDocuments\n    WHERE Status = 'Утвержден'\n    GROUP BY ProjectID\n),\nAverageDocumentCount AS (\n    SELECT AVG(DocumentCount) AS AvgDocCount FROM ProjectDocumentCounts\n)\nSELECT\n    p.ProjectName,\n    pdc.DocumentCount,\n    pdc.AverageVersion,\n    GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS Authors,\n    b.TotalBudget\nFROM Projects p\nJOIN ProjectDocumentCounts pdc ON p.ProjectID = pdc.ProjectID\nJOIN AverageDocumentCount adc ON 1=1\nLEFT JOIN DesignDocuments dd ON p.ProjectID = dd.ProjectID\nLEFT JOIN Engineers e ON dd.AuthorID = e.EngineerID\nLEFT JOIN Budgets b ON p.ProjectID = b.ProjectID\nWHERE pdc.DocumentCount > adc.AvgDocCount\nGROUP BY p.ProjectName, pdc.DocumentCount, pdc.AverageVersion, b.TotalBudget\nORDER BY pdc.DocumentCount DESC\nLIMIT 2;",
            "google/gemini-2.0-flash-001_response_ru": "WITH ProjectDocumentCounts AS (\n    SELECT \n        ProjectID,\n        COUNT(*) AS DocumentCount,\n        AVG(CAST(REPLACE(SUBSTRING(Version, 3), '.', '') AS UNSIGNED)) AS AvgVersion\n    FROM DesignDocuments\n    WHERE Status = 'Утвержден'\n    GROUP BY ProjectID\n),\nAverageDocumentCount AS (\n    SELECT AVG(DocumentCount) AS AvgCount FROM ProjectDocumentCounts\n)\nSELECT \n    p.ProjectName,\n    pdc.DocumentCount,\n    ROUND(pdc.AvgVersion, 2) AS AvgVersion,\n    GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS Authors,\n    b.TotalBudget\nFROM Projects p\nJOIN ProjectDocumentCounts pdc ON p.ProjectID = pdc.ProjectID\nJOIN AverageDocumentCount adc ON pdc.DocumentCount > adc.AvgCount\nJOIN DesignDocuments dd ON p.ProjectID = dd.ProjectID\nJOIN Engineers e ON dd.AuthorID = e.EngineerID\nJOIN Budgets b ON p.ProjectID = b.ProjectID\nWHERE dd.Status = 'Утвержден'\nGROUP BY p.ProjectName, pdc.DocumentCount, pdc.AvgVersion, b.TotalBudget\nORDER BY pdc.DocumentCount DESC\nLIMIT 2;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH ProjectDocumentStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        COUNT(dd.DocumentID) as DocumentCount,\n        AVG(dd.Version) as AvgDocumentVersion,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as Authors,\n        p.Budget as ProjectBudget\n    FROM Projects p\n    JOIN DesignDocuments dd ON p.ProjectID = dd.ProjectID\n    JOIN Engineers e ON dd.AuthorID = e.EngineerID\n    WHERE dd.Status = 'Утвержден'\n    GROUP BY p.ProjectID, p.ProjectName, p.Budget\n),\nAverageDocumentCount AS (\n    SELECT AVG(DocumentCount) as AvgCount\n    FROM ProjectDocumentStats\n)\nSELECT \n    ProjectName,\n    DocumentCount,\n    ROUND(AvgDocumentVersion, 2) as AvgDocumentVersion,\n    Authors,\n    ProjectBudget\nFROM ProjectDocumentStats\nWHERE DocumentCount > (SELECT AvgCount FROM AverageDocumentCount)\nORDER BY DocumentCount DESC\nLIMIT 2;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH ProjectDocumentStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        COUNT(dd.DocumentID) as DocumentCount,\n        AVG(dd.Version) as AvgDocumentVersion,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as Authors,\n        p.Budget as ProjectBudget\n    FROM Projects p\n    JOIN DesignDocuments dd ON p.ProjectID = dd.ProjectID\n    JOIN Engineers e ON dd.AuthorID = e.EngineerID\n    WHERE dd.Status = 'Утвержден'\n    GROUP BY p.ProjectID, p.ProjectName, p.Budget\n),\nAverageDocumentCount AS (\n    SELECT AVG(DocumentCount) as AvgCount\n    FROM ProjectDocumentStats\n)\nSELECT \n    ProjectName,\n    DocumentCount,\n    ROUND(AvgDocumentVersion, 2) as AvgDocumentVersion,\n    Authors,\n    ProjectBudget\nFROM ProjectDocumentStats\nWHERE DocumentCount > (SELECT AvgCount FROM AverageDocumentCount)\nORDER BY DocumentCount DESC\nLIMIT 2;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH ProjectDocumentStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        p.Budget as ProjectBudget,\n        COUNT(dd.DocumentID) as DocumentCount,\n        AVG(CAST(SUBSTRING(dd.Version, 2) AS DECIMAL(10,2))) as AvgVersion,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as Authors\n    FROM Projects p\n    JOIN DesignDocuments dd ON p.ProjectID = dd.ProjectID\n    JOIN Engineers e ON dd.AuthorID = e.EngineerID\n    WHERE dd.Status = 'Утвержден'\n    GROUP BY p.ProjectID, p.ProjectName, p.Budget\n),\nAvgDocumentCount AS (\n    SELECT AVG(DocumentCount) as AvgCount\n    FROM ProjectDocumentStats\n)\nSELECT \n    pds.ProjectName,\n    pds.DocumentCount,\n    ROUND(pds.AvgVersion, 2) as AvgVersion,\n    pds.Authors,\n    pds.ProjectBudget\nFROM ProjectDocumentStats pds, AvgDocumentCount adc\nWHERE pds.DocumentCount > adc.AvgCount\nORDER BY pds.DocumentCount DESC\nLIMIT 2;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "WITH ProjectDocumentStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        COUNT(dd.DocumentID) as DocumentCount,\n        AVG(SUBSTRING_INDEX(dd.Version, '.', 1)) as AvgVersion,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as Authors,\n        p.Budget\n    FROM Projects p\n    JOIN DesignDocuments dd ON p.ProjectID = dd.ProjectID\n    JOIN Engineers e ON dd.AuthorID = e.EngineerID\n    WHERE dd.Status = 'Утвержден'\n    GROUP BY p.ProjectID, p.ProjectName, p.Budget\n),\nAvgDocumentCount AS (\n    SELECT AVG(DocumentCount) as AvgCount\n    FROM ProjectDocumentStats\n)\nSELECT \n    pds.ProjectName,\n    pds.DocumentCount,\n    ROUND(pds.AvgVersion, 2) as AvgVersion,\n    pds.Authors,\n    pds.Budget\nFROM ProjectDocumentStats pds, AvgDocumentCount adc\nWHERE pds.DocumentCount > adc.AvgCount\nORDER BY pds.DocumentCount DESC\nLIMIT 2;",
            "gigachat_response": "WITH DocCounts AS (\n    SELECT \n        dd.ProjectID,\n        COUNT(dd.DocumentID) AS NumDocs,\n        AVG(CASE WHEN dd.Version LIKE '%.%' THEN CAST(SUBSTRING_INDEX(dd.Version, '.', 1) AS UNSIGNED) ELSE 0 END) AS AverageVersion,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.MiddleName, ' ', e.LastName)) AS AuthorsList,\n        b.TotalBudget\n    FROM DesignDocuments dd\n    INNER JOIN Projects p ON dd.ProjectID = p.ProjectID\n    INNER JOIN Engineers e ON dd.AuthorID = e.EngineerID\n    INNER JOIN Budgets b ON p.ProjectID = b.ProjectID\n    WHERE dd.Status = 'Утвержден'\n    GROUP BY dd.ProjectID\n),\nAverageDocCount AS (\n    SELECT AVG(NumDocs) AS AvgNumDocs FROM DocCounts\n)\nSELECT \n    p.ProjectName,\n    dc.NumDocs,\n    ROUND(dc.AverageVersion, 2) AS AverageVersion,\n    dc.AuthorsList,\n    dc.TotalBudget\nFROM DocCounts dc\nINNER JOIN Projects p ON dc.ProjectID = p.ProjectID\nWHERE dc.NumDocs > (SELECT AvgNumDocs FROM AverageDocCount)\nORDER BY dc.NumDocs DESC\nLIMIT 2;",
            "gigachat_response_ru": "WITH DocCounts AS (\n    SELECT \n        dd.ProjectID,\n        COUNT(dd.DocumentID) AS NumDocs,\n        AVG(CASE WHEN dd.Version LIKE '%.%' THEN CAST(SUBSTRING_INDEX(dd.Version, '.', 1) AS UNSIGNED) ELSE 0 END) AS AverageVersion,\n        GROUP_CONCAT(CONCAT(e.FirstName, ' ', e.LastName)) AS AuthorsList\n    FROM DesignDocuments dd\n    INNER JOIN Engineers e ON dd.AuthorID = e.EngineerID\n    WHERE dd.Status = 'Утвержден'\n    GROUP BY dd.ProjectID\n),\nAverageDocCount AS (\n    SELECT AVG(NumDocs) AS AvgNumDocs FROM DocCounts\n)\nSELECT \n    pr.ProjectName,\n    dc.NumDocs AS DocumentCount,\n    ROUND(dc.AverageVersion, 2) AS AverageVersion,\n    dc.AuthorsList AS Authors,\n    b.TotalBudget AS ProjectBudget\nFROM Projects pr\nINNER JOIN DocCounts dc ON pr.ProjectID = dc.ProjectID\nLEFT JOIN Budgets b ON pr.ProjectID = b.ProjectID\nWHERE dc.NumDocs > (SELECT AvgNumDocs FROM AverageDocCount)\nORDER BY dc.NumDocs DESC\nLIMIT 2;"
        },
        {
            "question": "Получить список проектов, где количество задач с высоким приоритетом превышает среднее значение по всем проектам. В ответе будут показаны: название проекта, количество высокоприоритетных задач, средняя продолжительность задач в днях, список ответственных инженеров и текущий статус проекта. Результаты отсортированы по количеству высокоприоритетных задач, показаны топ-3 записи.",
            "sql_query": "WITH HighPriorityTasks AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        COUNT(t.TaskID) as HighPriorityCount,\n        AVG(DATEDIFF(t.DueDate, t.StartDate)) as AvgTaskDuration,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as ResponsibleEngineers,\n        p.Status as ProjectStatus\n    FROM Projects p\n    JOIN Tasks t ON p.ProjectID = t.ProjectID\n    JOIN Engineers e ON t.AssignedTo = e.EngineerID\n    WHERE t.Priority = 'Высокий'\n    GROUP BY p.ProjectID, p.ProjectName, p.Status\n    HAVING COUNT(t.TaskID) > (\n        SELECT AVG(TaskCount)\n        FROM (\n            SELECT COUNT(TaskID) as TaskCount\n            FROM Tasks\n            WHERE Priority = 'Высокий'\n            GROUP BY ProjectID\n        ) as AvgCounts\n    )\n)\nSELECT \n    ProjectName,\n    HighPriorityCount,\n    ROUND(AvgTaskDuration, 2) as AvgTaskDuration,\n    ResponsibleEngineers,\n    ProjectStatus\nFROM HighPriorityTasks\nORDER BY HighPriorityCount DESC\nLIMIT 3;",
            "gpt-4o_response": "WITH HighPriorityTaskStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        COUNT(t.TaskID) AS HighPriorityTaskCount,\n        AVG(DATEDIFF(t.DueDate, t.StartDate)) AS AvgTaskDuration,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS ResponsibleEngineers,\n        p.Status AS ProjectStatus\n    FROM Projects p\n    LEFT JOIN Tasks t ON p.ProjectID = t.ProjectID\n    LEFT JOIN Engineers e ON t.AssignedTo = e.EngineerID\n    WHERE t.Priority = 'Высокий'\n    GROUP BY p.ProjectID, p.ProjectName, p.Status\n),\nAverageHighPriorityTasks AS (\n    SELECT AVG(HighPriorityTaskCount) AS AvgHighPriorityTaskCount\n    FROM HighPriorityTaskStats\n)\nSELECT \n    hpts.ProjectName,\n    hpts.HighPriorityTaskCount,\n    ROUND(hpts.AvgTaskDuration, 2) AS AvgTaskDuration,\n    hpts.ResponsibleEngineers,\n    hpts.ProjectStatus\nFROM HighPriorityTaskStats hpts\nJOIN AverageHighPriorityTasks aht ON hpts.HighPriorityTaskCount > aht.AvgHighPriorityTaskCount\nORDER BY hpts.HighPriorityTaskCount DESC\nLIMIT 3;",
            "gpt-4o_response_ru": "WITH HighPriorityTaskStats AS (\n    SELECT \n        t.ProjectID,\n        COUNT(t.TaskID) AS HighPriorityTaskCount\n    FROM Tasks t\n    WHERE t.Priority = 'Высокий'\n    GROUP BY t.ProjectID\n),\nAverageHighPriorityTasks AS (\n    SELECT AVG(HighPriorityTaskCount) AS AvgHighPriorityTasks\n    FROM HighPriorityTaskStats\n),\nProjectDetails AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        COUNT(t.TaskID) AS HighPriorityTaskCount,\n        AVG(DATEDIFF(t.DueDate, t.StartDate)) AS AvgTaskDuration,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS ResponsibleEngineers,\n        p.Status\n    FROM Projects p\n    JOIN Tasks t ON p.ProjectID = t.ProjectID\n    LEFT JOIN Engineers e ON t.AssignedTo = e.EngineerID\n    WHERE t.Priority = 'Высокий'\n    GROUP BY p.ProjectID, p.ProjectName, p.Status\n)\nSELECT \n    pd.ProjectName,\n    pd.HighPriorityTaskCount,\n    ROUND(pd.AvgTaskDuration, 2) AS AvgTaskDuration,\n    pd.ResponsibleEngineers,\n    pd.Status\nFROM ProjectDetails pd\nJOIN HighPriorityTaskStats hpts ON pd.ProjectID = hpts.ProjectID\nJOIN AverageHighPriorityTasks aht ON hpts.HighPriorityTaskCount > aht.AvgHighPriorityTasks\nORDER BY pd.HighPriorityTaskCount DESC\nLIMIT 3;",
            "google/gemini-2.0-flash-001_response": "WITH ProjectHighPriorityTasks AS (\n    SELECT\n        p.ProjectID,\n        p.ProjectName,\n        COUNT(CASE WHEN t.Priority = 'Высокий' THEN t.TaskID END) AS HighPriorityTaskCount,\n        AVG(JULIANDAY(t.DueDate) - JULIANDAY(t.StartDate)) AS AvgTaskDuration,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS AssignedEngineers,\n        p.Status AS ProjectStatus\n    FROM Projects p\n    JOIN Tasks t ON p.ProjectID = t.ProjectID\n    JOIN Engineers e ON t.AssignedTo = e.EngineerID\n    GROUP BY p.ProjectID, p.ProjectName, p.Status\n),\nAvgHighPriorityTasks AS (\n    SELECT AVG(HighPriorityTaskCount) AS AvgHighPriorityCount\n    FROM ProjectHighPriorityTasks\n)\nSELECT\n    p.ProjectName,\n    p.HighPriorityTaskCount,\n    ROUND(p.AvgTaskDuration, 2) AS AvgTaskDuration,\n    p.AssignedEngineers,\n    p.ProjectStatus\nFROM ProjectHighPriorityTasks p, AvgHighPriorityTasks a\nWHERE p.HighPriorityTaskCount > a.AvgHighPriorityCount\nORDER BY p.HighPriorityTaskCount DESC\nLIMIT 3;",
            "google/gemini-2.0-flash-001_response_ru": "WITH ProjectHighPriorityTasks AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        COUNT(CASE WHEN t.Priority = 'Высокий' THEN t.TaskID END) AS HighPriorityTaskCount,\n        AVG(DATEDIFF(t.DueDate, t.StartDate)) AS AvgTaskDuration,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS AssignedEngineers,\n        p.Status AS ProjectStatus\n    FROM Projects p\n    JOIN Tasks t ON p.ProjectID = t.ProjectID\n    LEFT JOIN Engineers e ON t.AssignedTo = e.EngineerID\n    GROUP BY p.ProjectID, p.ProjectName, p.Status\n),\nAvgHighPriorityTasks AS (\n    SELECT AVG(HighPriorityTaskCount) AS AvgCount FROM ProjectHighPriorityTasks\n)\nSELECT \n    p.ProjectName,\n    p.HighPriorityTaskCount,\n    ROUND(p.AvgTaskDuration, 2) AS AvgTaskDuration,\n    p.AssignedEngineers,\n    p.ProjectStatus\nFROM ProjectHighPriorityTasks p, AvgHighPriorityTasks a\nWHERE p.HighPriorityTaskCount > a.AvgCount\nORDER BY p.HighPriorityTaskCount DESC\nLIMIT 3;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH ProjectTaskStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        COUNT(CASE WHEN t.Priority = 'Высокий' THEN t.TaskID END) as HighPriorityTasks,\n        AVG(DATEDIFF(IFNULL(t.CompletionDate, t.DueDate), t.StartDate)) as AvgTaskDuration,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as ResponsibleEngineers,\n        p.Status as ProjectStatus\n    FROM Projects p\n    LEFT JOIN Tasks t ON p.ProjectID = t.ProjectID\n    LEFT JOIN Engineers e ON t.AssignedTo = e.EngineerID\n    GROUP BY p.ProjectID, p.ProjectName, p.Status\n),\nAverageHighPriorityTasks AS (\n    SELECT AVG(HighPriorityTasks) as AverageHighPriority\n    FROM ProjectTaskStats\n)\nSELECT \n    ProjectName,\n    HighPriorityTasks,\n    ROUND(AvgTaskDuration, 2) as AvgTaskDuration,\n    ResponsibleEngineers,\n    ProjectStatus\nFROM ProjectTaskStats\nWHERE HighPriorityTasks > (SELECT AverageHighPriority FROM AverageHighPriorityTasks)\nORDER BY HighPriorityTasks DESC\nLIMIT 3;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH ProjectTaskStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        COUNT(CASE WHEN t.Priority = 'Высокий' THEN t.TaskID END) as HighPriorityTaskCount,\n        AVG(DATEDIFF(COALESCE(t.CompletionDate, t.DueDate), t.StartDate)) as AvgTaskDuration,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as ResponsibleEngineers,\n        p.Status as ProjectStatus\n    FROM Projects p\n    LEFT JOIN Tasks t ON p.ProjectID = t.ProjectID\n    LEFT JOIN Engineers e ON t.AssignedTo = e.EngineerID\n    GROUP BY p.ProjectID, p.ProjectName, p.Status\n),\nAverageHighPriorityTasks AS (\n    SELECT AVG(HighPriorityTaskCount) as AverageHighPriorityTaskCount\n    FROM ProjectTaskStats\n)\nSELECT \n    pts.ProjectName,\n    pts.HighPriorityTaskCount,\n    ROUND(pts.AvgTaskDuration, 2) as AvgTaskDuration,\n    pts.ResponsibleEngineers,\n    pts.ProjectStatus\nFROM ProjectTaskStats pts\nCROSS JOIN AverageHighPriorityTasks aht\nWHERE pts.HighPriorityTaskCount > aht.AverageHighPriorityTaskCount\nORDER BY pts.HighPriorityTaskCount DESC\nLIMIT 3;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH HighPriorityTasksPerProject AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        p.Status as ProjectStatus,\n        COUNT(t.TaskID) as HighPriorityTaskCount,\n        AVG(DATEDIFF(t.DueDate, t.StartDate)) as AvgTaskDuration,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as ResponsibleEngineers\n    FROM Projects p\n    JOIN Tasks t ON p.ProjectID = t.ProjectID\n    JOIN Engineers e ON t.AssignedTo = e.EngineerID\n    WHERE t.Priority = 'Высокий'\n    GROUP BY p.ProjectID, p.ProjectName, p.Status\n),\nAvgHighPriorityTasks AS (\n    SELECT AVG(HighPriorityTaskCount) as AvgCount\n    FROM HighPriorityTasksPerProject\n)\nSELECT \n    h.ProjectName,\n    h.HighPriorityTaskCount,\n    ROUND(h.AvgTaskDuration, 2) as AvgTaskDuration,\n    h.ResponsibleEngineers,\n    h.ProjectStatus\nFROM HighPriorityTasksPerProject h, AvgHighPriorityTasks a\nWHERE h.HighPriorityTaskCount > a.AvgCount\nORDER BY h.HighPriorityTaskCount DESC\nLIMIT 3;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "WITH HighPriorityTasksPerProject AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        p.Status AS ProjectStatus,\n        COUNT(t.TaskID) AS HighPriorityTaskCount,\n        AVG(DATEDIFF(t.DueDate, t.StartDate)) AS AvgTaskDurationDays,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS ResponsibleEngineers\n    FROM Projects p\n    JOIN Tasks t ON p.ProjectID = t.ProjectID\n    JOIN Engineers e ON t.AssignedTo = e.EngineerID\n    WHERE t.Priority = 'Высокий'\n    GROUP BY p.ProjectID, p.ProjectName, p.Status\n),\nAvgHighPriorityTasks AS (\n    SELECT AVG(HighPriorityTaskCount) AS AvgHighPriorityTaskCount\n    FROM HighPriorityTasksPerProject\n)\nSELECT \n    hpt.ProjectName,\n    hpt.HighPriorityTaskCount,\n    ROUND(hpt.AvgTaskDurationDays, 2) AS AvgTaskDurationDays,\n    hpt.ResponsibleEngineers,\n    hpt.ProjectStatus\nFROM HighPriorityTasksPerProject hpt, AvgHighPriorityTasks aht\nWHERE hpt.HighPriorityTaskCount > aht.AvgHighPriorityTaskCount\nORDER BY hpt.HighPriorityTaskCount DESC\nLIMIT 3;",
            "gigachat_response": "WITH HighPriorityTasksPerProject AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        COUNT(*) AS HighPriorityTaskCount,\n        AVG(DATEDIFF(t.CompletionDate, t.StartDate)) AS AverageTaskDurationDays,\n        GROUP_CONCAT(CONCAT(e.FirstName, ' ', e.LastName)) AS ResponsibleEngineers,\n        p.Status\n    FROM Projects p\n    INNER JOIN Tasks t ON p.ProjectID = t.ProjectID\n    INNER JOIN Engineers e ON t.AssignedTo = e.EngineerID\n    WHERE t.Priority = 'Высокий'\n    GROUP BY p.ProjectID, p.ProjectName, p.Status\n),\nAverageHighPriorityTaskCount AS (\n    SELECT AVG(HighPriorityTaskCount) AS OverallAvgHighPriorityTaskCount\n    FROM HighPriorityTasksPerProject\n)\nSELECT \n    hppp.ProjectName,\n    hppp.HighPriorityTaskCount,\n    ROUND(hppp.AverageTaskDurationDays, 2) AS AverageTaskDurationDays,\n    hppp.ResponsibleEngineers,\n    hppp.Status\nFROM HighPriorityTasksPerProject hppp\nJOIN AverageHighPriorityTaskCount ahptc ON hppp.HighPriorityTaskCount > ahptc.OverallAvgHighPriorityTaskCount\nORDER BY hppp.HighPriorityTaskCount DESC\nLIMIT 3;",
            "gigachat_response_ru": "WITH HighPriorityTasks AS (\n    SELECT \n        ProjectID,\n        COUNT(TaskID) AS HighPriorityTaskCount\n    FROM Tasks\n    WHERE Priority = 'Высокий'\n    GROUP BY ProjectID\n),\nAverageHighPriorityTasks AS (\n    SELECT AVG(HighPriorityTaskCount) AS AverageHighPriorityTaskCount\n    FROM HighPriorityTasks\n),\nProjectDetails AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        hpt.HighPriorityTaskCount,\n        AVG(DATEDIFF(t.CompletionDate, t.StartDate)) AS AverageTaskDurationDays,\n        GROUP_CONCAT(CONCAT(e.FirstName, ' ', e.LastName)) AS ResponsibleEngineers,\n        p.Status\n    FROM Projects p\n    INNER JOIN HighPriorityTasks hpt ON p.ProjectID = hpt.ProjectID\n    INNER JOIN Tasks t ON p.ProjectID = t.ProjectID\n    INNER JOIN Engineers e ON t.AssignedTo = e.EngineerID\n    GROUP BY p.ProjectID, p.ProjectName, hpt.HighPriorityTaskCount, p.Status\n)\nSELECT \n    pd.ProjectName,\n    pd.HighPriorityTaskCount,\n    ROUND(pd.AverageTaskDurationDays, 2) AS AverageTaskDurationDays,\n    pd.ResponsibleEngineers,\n    pd.Status\nFROM ProjectDetails pd\nINNER JOIN AverageHighPriorityTasks aht ON pd.HighPriorityTaskCount > aht.AverageHighPriorityTaskCount\nORDER BY pd.HighPriorityTaskCount DESC\nLIMIT 3;"
        },
        {
            "question": "Получить список проектов, где количество документов проектирования в статусе 'На проверке' превышает количество утвержденных документов. В ответе будут показаны: название проекта, количество документов на проверке, количество утвержденных документов, список авторов и бюджет проекта. Результаты отсортированы по разнице между количеством документов на проверке и утвержденных документов, показаны топ-2 записи.",
            "sql_query": "WITH ProjectDocumentComparison AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        SUM(CASE WHEN d.Status = 'На проверке' THEN 1 ELSE 0 END) as PendingDocuments,\n        SUM(CASE WHEN d.Status = 'Утвержден' THEN 1 ELSE 0 END) as ApprovedDocuments,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as Authors,\n        p.Budget as ProjectBudget\n    FROM Projects p\n    JOIN DesignDocuments d ON p.ProjectID = d.ProjectID\n    JOIN Engineers e ON d.AuthorID = e.EngineerID\n    GROUP BY p.ProjectID, p.ProjectName, p.Budget\n    HAVING SUM(CASE WHEN d.Status = 'На проверке' THEN 1 ELSE 0 END) > \n           SUM(CASE WHEN d.Status = 'Утвержден' THEN 1 ELSE 0 END)\n)\nSELECT \n    ProjectName,\n    PendingDocuments,\n    ApprovedDocuments,\n    Authors,\n    ProjectBudget\nFROM ProjectDocumentComparison\nORDER BY (PendingDocuments - ApprovedDocuments) DESC\nLIMIT 2;",
            "gpt-4o_response": "WITH DocumentStatusCounts AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        COUNT(CASE WHEN dd.Status = 'На проверке' THEN 1 END) AS OnReviewCount,\n        COUNT(CASE WHEN dd.Status = 'Утвержден' THEN 1 END) AS ApprovedCount,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS Authors,\n        p.Budget\n    FROM Projects p\n    LEFT JOIN DesignDocuments dd ON p.ProjectID = dd.ProjectID\n    LEFT JOIN Engineers e ON dd.AuthorID = e.EngineerID\n    GROUP BY p.ProjectID, p.ProjectName, p.Budget\n    HAVING OnReviewCount > ApprovedCount\n)\nSELECT \n    ProjectName,\n    OnReviewCount,\n    ApprovedCount,\n    Authors,\n    Budget\nFROM DocumentStatusCounts\nORDER BY (OnReviewCount - ApprovedCount) DESC\nLIMIT 2;",
            "gpt-4o_response_ru": "WITH DocumentStatusCounts AS (\n    SELECT \n        d.ProjectID,\n        p.ProjectName,\n        SUM(CASE WHEN d.Status = 'На проверке' THEN 1 ELSE 0 END) AS ReviewCount,\n        SUM(CASE WHEN d.Status = 'Утвержден' THEN 1 ELSE 0 END) AS ApprovedCount,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS Authors,\n        p.Budget\n    FROM DesignDocuments d\n    JOIN Projects p ON d.ProjectID = p.ProjectID\n    JOIN Engineers e ON d.AuthorID = e.EngineerID\n    GROUP BY d.ProjectID, p.ProjectName, p.Budget\n    HAVING ReviewCount > ApprovedCount\n)\nSELECT \n    ProjectName,\n    ReviewCount,\n    ApprovedCount,\n    Authors,\n    Budget\nFROM DocumentStatusCounts\nORDER BY (ReviewCount - ApprovedCount) DESC\nLIMIT 2;",
            "google/gemini-2.0-flash-001_response": "WITH ProjectDocumentCounts AS (\n    SELECT\n        p.ProjectID,\n        p.ProjectName,\n        COUNT(CASE WHEN dd.Status = 'На проверке' THEN dd.DocumentID END) AS ReviewDocumentsCount,\n        COUNT(CASE WHEN dd.Status = 'Утвержден' THEN dd.DocumentID END) AS ApprovedDocumentsCount,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS AuthorsList,\n        b.TotalBudget AS ProjectBudget,\n        (COUNT(CASE WHEN dd.Status = 'На проверке' THEN dd.DocumentID END) - COUNT(CASE WHEN dd.Status = 'Утвержден' THEN dd.DocumentID END)) AS Difference\n    FROM Projects p\n    JOIN DesignDocuments dd ON p.ProjectID = dd.ProjectID\n    JOIN Engineers e ON dd.AuthorID = e.EngineerID\n    JOIN Budgets b ON p.ProjectID = b.ProjectID\n    GROUP BY p.ProjectID, p.ProjectName, b.TotalBudget\n    HAVING COUNT(CASE WHEN dd.Status = 'На проверке' THEN dd.DocumentID END) > COUNT(CASE WHEN dd.Status = 'Утвержден' THEN dd.DocumentID END)\n)\nSELECT\n    ProjectName,\n    ReviewDocumentsCount,\n    ApprovedDocumentsCount,\n    AuthorsList,\n    ProjectBudget\nFROM ProjectDocumentCounts\nORDER BY Difference DESC\nLIMIT 2;",
            "google/gemini-2.0-flash-001_response_ru": "WITH ProjectDocumentCounts AS (\n    SELECT\n        p.ProjectID,\n        p.ProjectName,\n        COUNT(CASE WHEN dd.Status = 'На проверке' THEN dd.DocumentID END) AS DocumentsForReviewCount,\n        COUNT(CASE WHEN dd.Status = 'Утвержден' THEN dd.DocumentID END) AS ApprovedDocumentsCount,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS Authors,\n        p.Budget AS ProjectBudget\n    FROM Projects p\n    JOIN DesignDocuments dd ON p.ProjectID = dd.ProjectID\n    JOIN Engineers e ON dd.AuthorID = e.EngineerID\n    GROUP BY p.ProjectID, p.ProjectName, p.Budget\n    HAVING COUNT(CASE WHEN dd.Status = 'На проверке' THEN dd.DocumentID END) > COUNT(CASE WHEN dd.Status = 'Утвержден' THEN dd.DocumentID END)\n)\nSELECT\n    pdc.ProjectName,\n    pdc.DocumentsForReviewCount,\n    pdc.ApprovedDocumentsCount,\n    pdc.Authors,\n    pdc.ProjectBudget,\n    (pdc.DocumentsForReviewCount - pdc.ApprovedDocumentsCount) AS Difference\nFROM ProjectDocumentCounts pdc\nORDER BY Difference DESC\nLIMIT 2;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH ProjectDocumentStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        SUM(CASE WHEN dd.Status = 'На проверке' THEN 1 ELSE 0 END) as DocumentsOnReview,\n        SUM(CASE WHEN dd.Status = 'Утвержден' THEN 1 ELSE 0 END) as ApprovedDocuments,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as Authors,\n        p.Budget as ProjectBudget\n    FROM Projects p\n    JOIN DesignDocuments dd ON p.ProjectID = dd.ProjectID\n    JOIN Engineers e ON dd.AuthorID = e.EngineerID\n    GROUP BY p.ProjectID, p.ProjectName, p.Budget\n    HAVING SUM(CASE WHEN dd.Status = 'На проверке' THEN 1 ELSE 0 END) > SUM(CASE WHEN dd.Status = 'Утвержден' THEN 1 ELSE 0 END)\n)\nSELECT \n    ProjectName,\n    DocumentsOnReview,\n    ApprovedDocuments,\n    Authors,\n    ProjectBudget\nFROM ProjectDocumentStats\nORDER BY DocumentsOnReview - ApprovedDocuments DESC\nLIMIT 2;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH ProjectDocumentStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        COUNT(CASE WHEN dd.Status = 'На проверке' THEN dd.DocumentID END) as DocumentsOnReview,\n        COUNT(CASE WHEN dd.Status = 'Утвержден' THEN dd.DocumentID END) as ApprovedDocuments,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as Authors,\n        p.Budget as ProjectBudget\n    FROM Projects p\n    JOIN DesignDocuments dd ON p.ProjectID = dd.ProjectID\n    JOIN Engineers e ON dd.AuthorID = e.EngineerID\n    GROUP BY p.ProjectID, p.ProjectName, p.Budget\n    HAVING COUNT(CASE WHEN dd.Status = 'На проверке' THEN dd.DocumentID END) > COUNT(CASE WHEN dd.Status = 'Утвержден' THEN dd.DocumentID END)\n)\nSELECT \n    ProjectName,\n    DocumentsOnReview,\n    ApprovedDocuments,\n    Authors,\n    ProjectBudget,\n    DocumentsOnReview - ApprovedDocuments as Difference\nFROM ProjectDocumentStats\nORDER BY Difference DESC\nLIMIT 2;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH DocumentStatusCounts AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        p.Budget,\n        SUM(CASE WHEN dd.Status = 'На проверке' THEN 1 ELSE 0 END) AS DocumentsUnderReview,\n        SUM(CASE WHEN dd.Status = 'Утвержден' THEN 1 ELSE 0 END) AS ApprovedDocuments,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS Authors\n    FROM Projects p\n    LEFT JOIN DesignDocuments dd ON p.ProjectID = dd.ProjectID\n    LEFT JOIN Engineers e ON dd.AuthorID = e.EngineerID\n    GROUP BY p.ProjectID, p.ProjectName, p.Budget\n    HAVING DocumentsUnderReview > ApprovedDocuments\n)\nSELECT \n    ProjectName,\n    DocumentsUnderReview,\n    ApprovedDocuments,\n    Authors,\n    Budget\nFROM DocumentStatusCounts\nORDER BY (DocumentsUnderReview - ApprovedDocuments) DESC\nLIMIT 2;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "WITH DocumentStatusCounts AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        p.Budget,\n        SUM(CASE WHEN dd.Status = 'На проверке' THEN 1 ELSE 0 END) AS DocumentsInReview,\n        SUM(CASE WHEN dd.Status = 'Утвержден' THEN 1 ELSE 0 END) AS ApprovedDocuments,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS Authors\n    FROM Projects p\n    JOIN DesignDocuments dd ON p.ProjectID = dd.ProjectID\n    JOIN Engineers e ON dd.AuthorID = e.EngineerID\n    GROUP BY p.ProjectID, p.ProjectName, p.Budget\n    HAVING DocumentsInReview > ApprovedDocuments\n)\nSELECT \n    ProjectName,\n    DocumentsInReview,\n    ApprovedDocuments,\n    Authors,\n    Budget,\n    (DocumentsInReview - ApprovedDocuments) AS Difference\nFROM DocumentStatusCounts\nORDER BY Difference DESC\nLIMIT 2;",
            "gigachat_response": "WITH DocStatusCounts AS (\n    SELECT \n        dd.ProjectID,\n        SUM(CASE WHEN dd.Status = 'На проверке' THEN 1 ELSE 0 END) AS PendingDocs,\n        SUM(CASE WHEN dd.Status = 'Утвержден' THEN 1 ELSE 0 END) AS ApprovedDocs\n    FROM DesignDocuments dd\n    GROUP BY dd.ProjectID\n    HAVING SUM(CASE WHEN dd.Status = 'На проверке' THEN 1 ELSE 0 END) > SUM(CASE WHEN dd.Status = 'Утвержден' THEN 1 ELSE 0 END)\n)\nSELECT \n    pr.ProjectName,\n    dsc.PendingDocs,\n    dsc.ApprovedDocs,\n    GROUP_CONCAT(CONCAT(e.FirstName, ' ', e.MiddleName, ' ', e.LastName)) AS AuthorsList,\n    b.TotalBudget\nFROM Projects pr\nJOIN DocStatusCounts dsc ON pr.ProjectID = dsc.ProjectID\nLEFT JOIN DesignDocuments dd ON pr.ProjectID = dd.ProjectID\nLEFT JOIN Engineers e ON dd.AuthorID = e.EngineerID\nLEFT JOIN Budgets b ON pr.ProjectID = b.ProjectID\nGROUP BY pr.ProjectID, pr.ProjectName, dsc.PendingDocs, dsc.ApprovedDocs, b.TotalBudget\nORDER BY (dsc.PendingDocs - dsc.ApprovedDocs) DESC\nLIMIT 2;",
            "gigachat_response_ru": "WITH DocStatusCounts AS (\n    SELECT \n        dd.ProjectID,\n        COUNT(CASE WHEN dd.Status = 'На проверке' THEN 1 END) AS PendingDocs,\n        COUNT(CASE WHEN dd.Status = 'Утвержден' THEN 1 END) AS ApprovedDocs\n    FROM DesignDocuments dd\n    GROUP BY dd.ProjectID\n),\nDocAuthors AS (\n    SELECT \n        dd.ProjectID,\n        GROUP_CONCAT(CONCAT(e.FirstName, ' ', e.MiddleName, ' ', e.LastName)) AS AuthorsList\n    FROM DesignDocuments dd\n    JOIN Engineers e ON dd.AuthorID = e.EngineerID\n    GROUP BY dd.ProjectID\n)\nSELECT \n    p.ProjectName,\n    dsc.PendingDocs,\n    dsc.ApprovedDocs,\n    da.AuthorsList,\n    b.TotalBudget\nFROM Projects p\nJOIN DocStatusCounts dsc ON p.ProjectID = dsc.ProjectID\nJOIN DocAuthors da ON p.ProjectID = da.ProjectID\nLEFT JOIN Budgets b ON p.ProjectID = b.ProjectID\nWHERE dsc.PendingDocs > dsc.ApprovedDocs\nORDER BY (dsc.PendingDocs - dsc.ApprovedDocs) DESC\nLIMIT 2;"
        },
        {
            "question": "Найти проекты, где количество инцидентов по технике безопасности с высоким уровнем серьезности превышает среднее по всем проектам. В ответе будут показаны: название проекта, количество инцидентов, средняя стоимость исправления (в рублях), список ответственных инженеров и текущий статус проекта. Результаты отсортированы по количеству инцидентов, показаны топ-3 записи.",
            "sql_query": "WITH ProjectSafetyStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        COUNT(s.IncidentID) as IncidentCount,\n        AVG(m.Cost) as AvgCorrectionCost,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as ResponsibleEngineers,\n        p.Status as ProjectStatus\n    FROM Projects p\n    JOIN SafetyIncidents s ON s.EngineerID IN (\n        SELECT EngineerID \n        FROM Tasks \n        WHERE ProjectID = p.ProjectID\n    )\n    JOIN MaintenanceRecords m ON m.EngineerID = s.EngineerID\n    JOIN Engineers e ON s.EngineerID = e.EngineerID\n    WHERE s.SeverityLevel = 'Высокий'\n    GROUP BY p.ProjectID, p.ProjectName, p.Status\n    HAVING COUNT(s.IncidentID) > (\n        SELECT AVG(IncidentCount)\n        FROM (\n            SELECT COUNT(IncidentID) as IncidentCount\n            FROM SafetyIncidents\n            WHERE SeverityLevel = 'Высокий'\n            GROUP BY EngineerID\n        ) as AvgCounts\n    )\n)\nSELECT \n    ProjectName,\n    IncidentCount,\n    ROUND(AvgCorrectionCost, 2) as AvgCorrectionCost,\n    ResponsibleEngineers,\n    ProjectStatus\nFROM ProjectSafetyStats\nORDER BY IncidentCount DESC\nLIMIT 3;",
            "gpt-4o_response": "WITH IncidentStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        COUNT(si.IncidentID) AS HighSeverityIncidents,\n        AVG(mr.Cost) AS AvgCorrectionCost,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS ResponsibleEngineers,\n        p.Status\n    FROM Projects p\n    JOIN SafetyIncidents si ON p.ProjectID = si.EquipmentID\n    JOIN MaintenanceRecords mr ON si.EquipmentID = mr.EquipmentID\n    JOIN Engineers e ON si.EngineerID = e.EngineerID\n    WHERE si.SeverityLevel = 'Высокий'\n    GROUP BY p.ProjectID, p.ProjectName, p.Status\n),\nAverageIncidents AS (\n    SELECT AVG(HighSeverityIncidents) AS AvgIncidents\n    FROM IncidentStats\n)\nSELECT \n    is.ProjectName,\n    is.HighSeverityIncidents,\n    ROUND(is.AvgCorrectionCost, 2) AS AvgCorrectionCost,\n    is.ResponsibleEngineers,\n    is.Status\nFROM IncidentStats is\nJOIN AverageIncidents ai ON is.HighSeverityIncidents > ai.AvgIncidents\nORDER BY is.HighSeverityIncidents DESC\nLIMIT 3;",
            "gpt-4o_response_ru": "WITH IncidentStats AS (\n    SELECT \n        si.ProjectID,\n        COUNT(si.IncidentID) AS HighSeverityIncidents,\n        AVG(mr.Cost) AS AvgCorrectionCost\n    FROM SafetyIncidents si\n    JOIN MaintenanceRecords mr ON si.EquipmentID = mr.EquipmentID\n    WHERE si.SeverityLevel = 'Высокий'\n    GROUP BY si.ProjectID\n),\nAverageIncidents AS (\n    SELECT AVG(HighSeverityIncidents) AS AvgIncidents\n    FROM IncidentStats\n)\nSELECT \n    p.ProjectName,\n    is.HighSeverityIncidents,\n    ROUND(is.AvgCorrectionCost, 2) AS AvgCorrectionCost,\n    GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS ResponsibleEngineers,\n    p.Status\nFROM IncidentStats is\nJOIN Projects p ON is.ProjectID = p.ProjectID\nJOIN Tasks t ON p.ProjectID = t.ProjectID\nJOIN Engineers e ON t.AssignedTo = e.EngineerID\nWHERE is.HighSeverityIncidents > (SELECT AvgIncidents FROM AverageIncidents)\nGROUP BY p.ProjectID, p.ProjectName, p.Status\nORDER BY is.HighSeverityIncidents DESC\nLIMIT 3;",
            "google/gemini-2.0-flash-001_response": "WITH ProjectIncidentStats AS (\n    SELECT\n        p.ProjectID,\n        p.ProjectName,\n        COUNT(si.IncidentID) AS IncidentCount,\n        AVG(CASE WHEN si.CorrectiveActions IS NOT NULL THEN LENGTH(si.CorrectiveActions) ELSE 0 END) AS AvgCorrectiveActionCost,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS ResponsibleEngineers,\n        p.Status AS ProjectStatus\n    FROM Projects p\n    LEFT JOIN SafetyIncidents si ON p.ProjectID = (SELECT ProjectID FROM Tasks WHERE AssignedTo = si.EngineerID LIMIT 1)\n    LEFT JOIN Engineers e ON si.EngineerID = e.EngineerID\n    WHERE si.SeverityLevel = 'Высокий'\n    GROUP BY p.ProjectID, p.ProjectName, p.Status\n),\nAvgIncidentCount AS (\n    SELECT AVG(IncidentCount) AS AverageIncidentCount FROM ProjectIncidentStats\n)\nSELECT\n    pis.ProjectName,\n    pis.IncidentCount,\n    ROUND(pis.AvgCorrectiveActionCost, 2) AS AvgCorrectiveActionCost,\n    pis.ResponsibleEngineers,\n    pis.ProjectStatus\nFROM ProjectIncidentStats pis, AvgIncidentCount aic\nWHERE pis.IncidentCount > aic.AverageIncidentCount\nORDER BY pis.IncidentCount DESC\nLIMIT 3;",
            "google/gemini-2.0-flash-001_response_ru": "WITH ProjectIncidentStats AS (\n    SELECT\n        p.ProjectID,\n        p.ProjectName,\n        COUNT(si.IncidentID) AS IncidentCount,\n        AVG(CASE WHEN si.CorrectiveActions IS NOT NULL THEN LENGTH(si.CorrectiveActions) ELSE 0 END) AS AvgCorrectiveActionCost,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS ResponsibleEngineers,\n        p.Status AS ProjectStatus\n    FROM Projects p\n    JOIN SafetyIncidents si ON p.ProjectID = si.EquipmentID\n    JOIN Engineers e ON si.EngineerID = e.EngineerID\n    WHERE si.SeverityLevel = 'Высокий'\n    GROUP BY p.ProjectID, p.ProjectName, p.Status\n),\nAvgIncidentCount AS (\n    SELECT AVG(IncidentCount) AS AvgIncidents FROM ProjectIncidentStats\n)\nSELECT\n    pis.ProjectName,\n    pis.IncidentCount,\n    ROUND(pis.AvgCorrectiveActionCost, 2) AS AvgCorrectiveActionCost,\n    pis.ResponsibleEngineers,\n    pis.ProjectStatus\nFROM ProjectIncidentStats pis, AvgIncidentCount aic\nWHERE pis.IncidentCount > aic.AvgIncidents\nORDER BY pis.IncidentCount DESC\nLIMIT 3;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH ProjectIncidentStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        COUNT(si.IncidentID) as IncidentCount,\n        AVG(si.Cost) as AvgIncidentCost,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as ResponsibleEngineers,\n        p.Status as ProjectStatus\n    FROM Projects p\n    JOIN SafetyIncidents si ON p.ProjectID = si.ProjectID\n    JOIN Engineers e ON si.EngineerID = e.EngineerID\n    WHERE si.SeverityLevel = 'Высокий'\n    GROUP BY p.ProjectID, p.ProjectName, p.Status\n),\nAverageIncidentCount AS (\n    SELECT AVG(IncidentCount) as AverageIncidents\n    FROM ProjectIncidentStats\n)\nSELECT \n    pis.ProjectName,\n    pis.IncidentCount,\n    ROUND(pis.AvgIncidentCost, 2) as AvgIncidentCost,\n    pis.ResponsibleEngineers,\n    pis.ProjectStatus\nFROM ProjectIncidentStats pis\nJOIN AverageIncidentCount aic ON 1 = 1\nWHERE pis.IncidentCount > aic.AverageIncidents\nORDER BY pis.IncidentCount DESC\nLIMIT 3;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH ProjectIncidentStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        COUNT(si.IncidentID) as IncidentCount,\n        AVG(si.Cost) as AvgIncidentCost,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as ResponsibleEngineers,\n        p.Status as ProjectStatus\n    FROM Projects p\n    JOIN SafetyIncidents si ON p.ProjectID = si.ProjectID\n    JOIN Engineers e ON si.EngineerID = e.EngineerID\n    WHERE si.SeverityLevel = 'Высокий'\n    GROUP BY p.ProjectID, p.ProjectName, p.Status\n),\nAverageIncidentCount AS (\n    SELECT AVG(IncidentCount) as AvgIncidentCount\n    FROM ProjectIncidentStats\n)\nSELECT \n    pis.ProjectName,\n    pis.IncidentCount,\n    ROUND(pis.AvgIncidentCost, 2) as AvgIncidentCost,\n    pis.ResponsibleEngineers,\n    pis.ProjectStatus\nFROM ProjectIncidentStats pis\nCROSS JOIN AverageIncidentCount aic\nWHERE pis.IncidentCount > aic.AvgIncidentCount\nORDER BY pis.IncidentCount DESC\nLIMIT 3;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH ProjectIncidentStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        COUNT(si.IncidentID) as IncidentCount,\n        AVG(mr.Cost) as AvgCorrectionCost,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as ResponsibleEngineers,\n        p.Status as ProjectStatus\n    FROM Projects p\n    LEFT JOIN Tasks t ON p.ProjectID = t.ProjectID\n    LEFT JOIN Engineers e ON t.AssignedTo = e.EngineerID\n    LEFT JOIN SafetyIncidents si ON si.EngineerID = e.EngineerID\n    LEFT JOIN MaintenanceRecords mr ON mr.EngineerID = e.EngineerID\n    WHERE si.SeverityLevel = 'Высокий'\n    GROUP BY p.ProjectID, p.ProjectName, p.Status\n),\nAverageIncidents AS (\n    SELECT AVG(IncidentCount) as AvgIncidents\n    FROM ProjectIncidentStats\n)\nSELECT \n    pis.ProjectName,\n    pis.IncidentCount,\n    ROUND(pis.AvgCorrectionCost, 2) as AvgCorrectionCost,\n    pis.ResponsibleEngineers,\n    pis.ProjectStatus\nFROM ProjectIncidentStats pis, AverageIncidents ai\nWHERE pis.IncidentCount > ai.AvgIncidents\nORDER BY pis.IncidentCount DESC\nLIMIT 3;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "WITH ProjectIncidentStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        p.Status as ProjectStatus,\n        COUNT(si.IncidentID) as IncidentCount,\n        AVG(mr.Cost) as AvgCorrectionCost,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as ResponsibleEngineers\n    FROM Projects p\n    JOIN SafetyIncidents si ON p.ProjectID = si.EquipmentID\n    JOIN MaintenanceRecords mr ON si.EquipmentID = mr.EquipmentID\n    JOIN Engineers e ON si.EngineerID = e.EngineerID\n    WHERE si.SeverityLevel = 'Высокий'\n    GROUP BY p.ProjectID, p.ProjectName, p.Status\n),\nAvgIncidents AS (\n    SELECT AVG(IncidentCount) as AvgIncidentCount\n    FROM ProjectIncidentStats\n)\nSELECT \n    pis.ProjectName,\n    pis.IncidentCount,\n    ROUND(pis.AvgCorrectionCost, 2) as AvgCorrectionCost,\n    pis.ResponsibleEngineers,\n    pis.ProjectStatus\nFROM ProjectIncidentStats pis, AvgIncidents ai\nWHERE pis.IncidentCount > ai.AvgIncidentCount\nORDER BY pis.IncidentCount DESC\nLIMIT 3;",
            "gigachat_response": "WITH HighSeverityIncidentsPerProject AS (\n    SELECT \n        si.EquipmentID,\n        pr.ProjectID,\n        COUNT(*) AS NumHighSeverityIncidents\n    FROM SafetyIncidents si\n    INNER JOIN Equipment eq ON si.EquipmentID = eq.EquipmentID\n    INNER JOIN Projects pr ON eq.DepartmentID = pr.DepartmentID\n    WHERE si.SeverityLevel = 'Высокий'\n    GROUP BY si.EquipmentID, pr.ProjectID\n),\nAverageHighSeverityIncidents AS (\n    SELECT AVG(NumHighSeverityIncidents) AS AverageNumHighSeverityIncidents\n    FROM HighSeverityIncidentsPerProject\n),\nFinalResult AS (\n    SELECT \n        pr.ProjectName,\n        hsi.NumHighSeverityIncidents,\n        AVG(mr.Cost) AS AverageRepairCost,\n        GROUP_CONCAT(CONCAT(e.FirstName, ' ', e.LastName)) AS ResponsibleEngineers,\n        pr.Status\n    FROM HighSeverityIncidentsPerProject hsi\n    INNER JOIN Projects pr ON hsi.ProjectID = pr.ProjectID\n    INNER JOIN MaintenanceRecords mr ON hsi.EquipmentID = mr.EquipmentID\n    INNER JOIN Engineers e ON mr.EngineerID = e.EngineerID\n    WHERE hsi.NumHighSeverityIncidents > (SELECT AverageNumHighSeverityIncidents FROM AverageHighSeverityIncidents)\n    GROUP BY pr.ProjectName, hsi.NumHighSeverityIncidents, pr.Status\n)\nSELECT *\nFROM FinalResult\nORDER BY NumHighSeverityIncidents DESC\nLIMIT 3;",
            "gigachat_response_ru": "WITH SafetyIncidentCounts AS (\n    SELECT \n        si.ProjectID,\n        COUNT(*) AS HighSeverityIncidents\n    FROM SafetyIncidents si\n    WHERE si.SeverityLevel = 'Высокий'\n    GROUP BY si.ProjectID\n),\nAverageHighSeverityIncidents AS (\n    SELECT AVG(HighSeverityIncidents) AS AverageHighSeverityIncidents\n    FROM SafetyIncidentCosts sic\n),\nSafetyIncidentCosts AS (\n    SELECT \n        si.ProjectID,\n        COUNT(*) AS HighSeverityIncidents,\n        AVG(CASE WHEN mr.Cost IS NOT NULL THEN mr.Cost ELSE 0 END) AS AverageRepairCost\n    FROM SafetyIncidents si\n    LEFT JOIN MaintenanceRecords mr ON si.EquipmentID = mr.EquipmentID\n    WHERE si.SeverityLevel = 'Высокий'\n    GROUP BY si.ProjectID\n),\nResponsibleEngineers AS (\n    SELECT \n        p.ProjectID,\n        GROUP_CONCAT(CONCAT(e.FirstName, ' ', e.LastName)) AS EngineersList\n    FROM Projects p\n    INNER JOIN Engineers e ON p.ProjectManagerID = e.EngineerID\n    GROUP BY p.ProjectID\n)\nSELECT \n    pr.ProjectName,\n    sic.HighSeverityIncidents,\n    ROUND(sic.AverageRepairCost, 2) AS AverageRepairCost,\n    re.EngineersList,\n    pr.Status\nFROM Projects pr\nINNER JOIN SafetyIncidentCounts sic ON pr.ProjectID = sic.ProjectID\nINNER JOIN ResponsibleEngineers re ON pr.ProjectID = re.ProjectID\nWHERE sic.HighSeverityIncidents > (SELECT AverageHighSeverityIncidents FROM AverageHighSeverityIncidents)\nORDER BY sic.HighSeverityIncidents DESC\nLIMIT 3;"
        },
        {
            "question": "Найти инженеров, работающих над проектами с бюджетом более 10 миллионов рублей, у которых истекает срок действия сертификатов в течение следующих 3 месяцев. В ответе будут показаны: ФИО инженера, должность, количество проектов и список сертификатов с истекающим сроком действия. Результаты отсортированы по количеству проектов, показаны топ-4 записи.",
            "sql_query": "WITH EngineerHighBudgetStats AS (\n    SELECT \n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', e.LastName) as EngineerName,\n        e.Position,\n        COUNT(p.ProjectID) as ProjectCount,\n        GROUP_CONCAT(DISTINCT c.CertificationName) as ExpiringCertifications\n    FROM Engineers e\n    JOIN Projects p ON p.ProjectManagerID = e.EngineerID\n    JOIN Certifications c ON c.EngineerID = e.EngineerID\n    WHERE p.Budget > 10000000\n    AND c.ExpiryDate BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 3 MONTH)\n    AND c.Status = 'Действителен'\n    GROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position\n)\nSELECT \n    EngineerName,\n    Position,\n    ProjectCount,\n    ExpiringCertifications\nFROM EngineerHighBudgetStats\nORDER BY ProjectCount DESC\nLIMIT 4;",
            "gpt-4o_response": "WITH EngineerProjectCertificationStats AS (\n    SELECT \n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', e.LastName) as EngineerName,\n        e.Position,\n        COUNT(DISTINCT p.ProjectID) as ProjectCount,\n        GROUP_CONCAT(DISTINCT c.CertificationName) as ExpiringCertifications\n    FROM Engineers e\n    JOIN Projects p ON p.ProjectManagerID = e.EngineerID\n    JOIN Certifications c ON c.EngineerID = e.EngineerID\n    WHERE p.Budget > 10000000\n    AND c.ExpiryDate BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 3 MONTH)\n    GROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position\n)\nSELECT \n    EngineerName,\n    Position,\n    ProjectCount,\n    ExpiringCertifications\nFROM EngineerProjectCertificationStats\nORDER BY ProjectCount DESC\nLIMIT 4;",
            "gpt-4o_response_ru": "WITH EngineerProjectStats AS (\n    SELECT \n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', e.LastName) as EngineerName,\n        e.Position,\n        COUNT(DISTINCT p.ProjectID) as ProjectCount,\n        GROUP_CONCAT(DISTINCT c.CertificationName) as ExpiringCertifications\n    FROM Engineers e\n    JOIN Projects p ON p.ProjectManagerID = e.EngineerID\n    JOIN Certifications c ON c.EngineerID = e.EngineerID\n    WHERE p.Budget > 10000000\n    AND c.ExpiryDate BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 3 MONTH)\n    AND c.Status = 'Действителен'\n    GROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position\n)\nSELECT \n    EngineerName,\n    Position,\n    ProjectCount,\n    ExpiringCertifications\nFROM EngineerProjectStats\nORDER BY ProjectCount DESC\nLIMIT 4;",
            "google/gemini-2.0-flash-001_response": "WITH EngineerProjectCertifications AS (\n    SELECT \n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', e.LastName) AS EngineerName,\n        e.Position,\n        COUNT(DISTINCT p.ProjectID) AS ProjectCount,\n        GROUP_CONCAT(DISTINCT c.CertificationName ORDER BY c.CertificationName) AS ExpiringCertifications\n    FROM Engineers e\n    JOIN Projects p ON e.EngineerID = p.ProjectManagerID\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE p.Budget > 10000000\n    AND c.ExpiryDate BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 3 MONTH)\n    GROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position\n)\nSELECT \n    EngineerName,\n    Position,\n    ProjectCount,\n    ExpiringCertifications\nFROM EngineerProjectCertifications\nORDER BY ProjectCount DESC\nLIMIT 4;",
            "google/gemini-2.0-flash-001_response_ru": "WITH EngineerCertificationStats AS (\n    SELECT \n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', e.LastName) as EngineerName,\n        e.Position,\n        COUNT(DISTINCT p.ProjectID) as ProjectCount,\n        GROUP_CONCAT(DISTINCT c.CertificationName) as ExpiringCertifications\n    FROM Engineers e\n    JOIN Projects p ON p.ProjectManagerID = e.EngineerID\n    JOIN Certifications c ON c.EngineerID = e.EngineerID\n    WHERE p.Budget > 10000000\n    AND c.ExpiryDate BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 3 MONTH)\n    GROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position\n)\nSELECT \n    EngineerName,\n    Position,\n    ProjectCount,\n    ExpiringCertifications\nFROM EngineerCertificationStats\nORDER BY ProjectCount DESC\nLIMIT 4;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH EngineerProjectStats AS (\n    SELECT \n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', e.LastName) as EngineerName,\n        e.Position,\n        COUNT(DISTINCT p.ProjectID) as ProjectCount,\n        GROUP_CONCAT(DISTINCT c.CertificationName) as ExpiringCertifications\n    FROM Engineers e\n    JOIN Projects p ON e.EngineerID = p.ProjectManagerID\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE p.Budget > 10000000\n    AND c.ExpiryDate BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 3 MONTH)\n    AND c.Status = 'Действителен'\n    GROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position\n)\nSELECT \n    EngineerName,\n    Position,\n    ProjectCount,\n    ExpiringCertifications\nFROM EngineerProjectStats\nORDER BY ProjectCount DESC\nLIMIT 4;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH EngineerProjectStats AS (\n    SELECT \n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', e.MiddleName, ' ', e.LastName) as EngineerName,\n        e.Position,\n        COUNT(DISTINCT p.ProjectID) as ProjectCount,\n        GROUP_CONCAT(DISTINCT c.CertificationName) as ExpiringCertifications\n    FROM Engineers e\n    JOIN Tasks t ON e.EngineerID = t.AssignedTo\n    JOIN Projects p ON t.ProjectID = p.ProjectID\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE p.Budget > 10000000\n    AND c.ExpiryDate BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 3 MONTH)\n    AND c.Status = 'Действителен'\n    GROUP BY e.EngineerID, e.FirstName, e.MiddleName, e.LastName, e.Position\n)\nSELECT \n    EngineerName,\n    Position,\n    ProjectCount,\n    ExpiringCertifications\nFROM EngineerProjectStats\nORDER BY ProjectCount DESC\nLIMIT 4;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH EngineerProjectCertification AS (\n    SELECT \n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', COALESCE(e.MiddleName, ''), ' ', e.LastName) AS FullName,\n        e.Position,\n        COUNT(DISTINCT p.ProjectID) AS ProjectCount,\n        GROUP_CONCAT(DISTINCT c.CertificationName) AS ExpiringCertifications\n    FROM Engineers e\n    JOIN Projects p ON e.EngineerID = p.ProjectManagerID\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE p.Budget > 10000000\n    AND c.ExpiryDate BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 3 MONTH)\n    AND c.Status = 'Действителен'\n    GROUP BY e.EngineerID, e.FirstName, e.MiddleName, e.LastName, e.Position\n)\nSELECT \n    FullName,\n    Position,\n    ProjectCount,\n    ExpiringCertifications\nFROM EngineerProjectCertification\nORDER BY ProjectCount DESC\nLIMIT 4;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "WITH EngineerProjectStats AS (\n    SELECT \n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', COALESCE(e.MiddleName, ''), ' ', e.LastName) as FullName,\n        e.Position,\n        COUNT(DISTINCT p.ProjectID) as ProjectCount,\n        GROUP_CONCAT(DISTINCT c.CertificationName) as ExpiringCertifications\n    FROM Engineers e\n    JOIN Projects p ON e.EngineerID = p.ProjectManagerID\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE p.Budget > 10000000\n    AND c.ExpiryDate BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 3 MONTH)\n    AND c.Status = 'Действителен'\n    GROUP BY e.EngineerID, e.FirstName, e.MiddleName, e.LastName, e.Position\n)\nSELECT \n    FullName,\n    Position,\n    ProjectCount,\n    ExpiringCertifications\nFROM EngineerProjectStats\nORDER BY ProjectCount DESC\nLIMIT 4;",
            "gigachat_response": "WITH EngineerProjectCertificationStats AS (\n    SELECT \n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', e.MiddleName, ' ', e.LastName) as FullName,\n        e.Position,\n        COUNT(DISTINCT p.ProjectID) as ProjectCount,\n        GROUP_CONCAT(c.CertificationName ORDER BY c.CertificationName SEPARATOR ', ') as ExpiringCertifications\n    FROM Engineers e\n    INNER JOIN Projects p ON e.EngineerID = p.ProjectManagerID\n    INNER JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE p.Budget > 10000000\n      AND c.ExpiryDate BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 3 MONTH)\n    GROUP BY e.EngineerID, e.FirstName, e.MiddleName, e.LastName, e.Position\n)\nSELECT \n    FullName,\n    Position,\n    ProjectCount,\n    ExpiringCertifications\nFROM EngineerProjectCertificationStats\nORDER BY ProjectCount DESC\nLIMIT 4;",
            "gigachat_response_ru": "WITH EngineerCertificationStats AS (\n    SELECT \n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', e.MiddleName, ' ', e.LastName) as FullName,\n        e.Position,\n        COUNT(DISTINCT p.ProjectID) as ProjectCount,\n        GROUP_CONCAT(c.CertificationName SEPARATOR ', ') as ExpiringCertifications\n    FROM Engineers e\n    INNER JOIN Projects p ON e.EngineerID = p.ProjectManagerID\n    INNER JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE p.Budget > 10000000\n      AND c.ExpiryDate BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 3 MONTH)\n      AND c.Status = 'Действителен'\n    GROUP BY e.EngineerID, e.FirstName, e.MiddleName, e.LastName, e.Position\n)\nSELECT \n    FullName,\n    Position,\n    ProjectCount,\n    ExpiringCertifications\nFROM EngineerCertificationStats\nORDER BY ProjectCount DESC\nLIMIT 4;"
        },
        {
            "question": "Найти проекты, где количество документов проектирования в статусе 'Черновик' превышает количество документов в статусе 'Утвержден'. В ответе будут показаны: название проекта, количество черновиков, количество утвержденных документов, список авторов и общий бюджет проекта (в рублях). Результаты отсортированы по разнице между количеством черновиков и утвержденных документов, показаны топ-2 записи.",
            "sql_query": "WITH ProjectDraftComparison AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        SUM(CASE WHEN d.Status = 'Черновик' THEN 1 ELSE 0 END) as DraftDocuments,\n        SUM(CASE WHEN d.Status = 'Утвержден' THEN 1 ELSE 0 END) as ApprovedDocuments,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as Authors,\n        p.Budget as ProjectBudget\n    FROM Projects p\n    JOIN DesignDocuments d ON p.ProjectID = d.ProjectID\n    JOIN Engineers e ON d.AuthorID = e.EngineerID\n    GROUP BY p.ProjectID, p.ProjectName, p.Budget\n    HAVING SUM(CASE WHEN d.Status = 'Черновик' THEN 1 ELSE 0 END) > \n           SUM(CASE WHEN d.Status = 'Утвержден' THEN 1 ELSE 0 END)\n)\nSELECT \n    ProjectName,\n    DraftDocuments,\n    ApprovedDocuments,\n    Authors,\n    ProjectBudget\nFROM ProjectDraftComparison\nORDER BY (DraftDocuments - ApprovedDocuments) DESC\nLIMIT 2;",
            "gpt-4o_response": "WITH DocumentStatusCounts AS (\n    SELECT \n        d.ProjectID,\n        p.ProjectName,\n        SUM(CASE WHEN d.Status = 'Черновик' THEN 1 ELSE 0 END) AS DraftCount,\n        SUM(CASE WHEN d.Status = 'Утвержден' THEN 1 ELSE 0 END) AS ApprovedCount,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS Authors,\n        p.Budget AS ProjectBudget\n    FROM DesignDocuments d\n    JOIN Projects p ON d.ProjectID = p.ProjectID\n    JOIN Engineers e ON d.AuthorID = e.EngineerID\n    GROUP BY d.ProjectID, p.ProjectName, p.Budget\n    HAVING DraftCount > ApprovedCount\n)\nSELECT \n    ProjectName,\n    DraftCount,\n    ApprovedCount,\n    Authors,\n    ProjectBudget\nFROM DocumentStatusCounts\nORDER BY (DraftCount - ApprovedCount) DESC\nLIMIT 2;",
            "gpt-4o_response_ru": "WITH DocumentStatusCounts AS (\n    SELECT \n        d.ProjectID,\n        SUM(CASE WHEN d.Status = 'Черновик' THEN 1 ELSE 0 END) AS DraftCount,\n        SUM(CASE WHEN d.Status = 'Утвержден' THEN 1 ELSE 0 END) AS ApprovedCount\n    FROM DesignDocuments d\n    GROUP BY d.ProjectID\n),\nProjectDetails AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        ds.DraftCount,\n        ds.ApprovedCount,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS Authors,\n        p.Budget\n    FROM Projects p\n    JOIN DocumentStatusCounts ds ON p.ProjectID = ds.ProjectID\n    JOIN DesignDocuments dd ON p.ProjectID = dd.ProjectID\n    JOIN Engineers e ON dd.AuthorID = e.EngineerID\n    WHERE ds.DraftCount > ds.ApprovedCount\n    GROUP BY p.ProjectID, p.ProjectName, ds.DraftCount, ds.ApprovedCount, p.Budget\n)\nSELECT \n    ProjectName,\n    DraftCount,\n    ApprovedCount,\n    Authors,\n    Budget\nFROM ProjectDetails\nORDER BY (DraftCount - ApprovedCount) DESC\nLIMIT 2;",
            "google/gemini-2.0-flash-001_response": "WITH DocumentCounts AS (\n    SELECT\n        ProjectID,\n        SUM(CASE WHEN Status = 'Черновик' THEN 1 ELSE 0 END) AS DraftCount,\n        SUM(CASE WHEN Status = 'Утвержден' THEN 1 ELSE 0 END) AS ApprovedCount\n    FROM DesignDocuments\n    GROUP BY ProjectID\n    HAVING SUM(CASE WHEN Status = 'Черновик' THEN 1 ELSE 0 END) > SUM(CASE WHEN Status = 'Утвержден' THEN 1 ELSE 0 END)\n)\nSELECT\n    p.ProjectName,\n    dc.DraftCount,\n    dc.ApprovedCount,\n    GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS Authors,\n    p.Budget AS TotalBudget\nFROM Projects p\nJOIN DocumentCounts dc ON p.ProjectID = dc.ProjectID\nLEFT JOIN DesignDocuments dd ON p.ProjectID = dd.ProjectID\nLEFT JOIN Engineers e ON dd.AuthorID = e.EngineerID\nGROUP BY p.ProjectID, p.ProjectName, dc.DraftCount, dc.ApprovedCount, p.Budget\nORDER BY (dc.DraftCount - dc.ApprovedCount) DESC\nLIMIT 2;",
            "google/gemini-2.0-flash-001_response_ru": "WITH ProjectDocumentCounts AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        COUNT(CASE WHEN dd.Status = 'Черновик' THEN dd.DocumentID END) AS DraftCount,\n        COUNT(CASE WHEN dd.Status = 'Утвержден' THEN dd.DocumentID END) AS ApprovedCount,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS Authors,\n        p.Budget\n    FROM Projects p\n    JOIN DesignDocuments dd ON p.ProjectID = dd.ProjectID\n    JOIN Engineers e ON dd.AuthorID = e.EngineerID\n    GROUP BY p.ProjectID, p.ProjectName, p.Budget\n    HAVING COUNT(CASE WHEN dd.Status = 'Черновик' THEN dd.DocumentID END) > COUNT(CASE WHEN dd.Status = 'Утвержден' THEN dd.DocumentID END)\n)\nSELECT \n    pdc.ProjectName,\n    pdc.DraftCount,\n    pdc.ApprovedCount,\n    pdc.Authors,\n    pdc.Budget\nFROM ProjectDocumentCounts pdc\nORDER BY (pdc.DraftCount - pdc.ApprovedCount) DESC\nLIMIT 2;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH ProjectDocumentStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        SUM(CASE WHEN dd.Status = 'Черновик' THEN 1 ELSE 0 END) as DraftCount,\n        SUM(CASE WHEN dd.Status = 'Утвержден' THEN 1 ELSE 0 END) as ApprovedCount,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as Authors,\n        p.Budget as ProjectBudget\n    FROM Projects p\n    JOIN DesignDocuments dd ON p.ProjectID = dd.ProjectID\n    JOIN Engineers e ON dd.AuthorID = e.EngineerID\n    GROUP BY p.ProjectID, p.ProjectName, p.Budget\n    HAVING SUM(CASE WHEN dd.Status = 'Черновик' THEN 1 ELSE 0 END) > SUM(CASE WHEN dd.Status = 'Утвержден' THEN 1 ELSE 0 END)\n)\nSELECT \n    ProjectName,\n    DraftCount,\n    ApprovedCount,\n    Authors,\n    ProjectBudget\nFROM ProjectDocumentStats\nORDER BY DraftCount - ApprovedCount DESC\nLIMIT 2;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH ProjectDocumentStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        COUNT(CASE WHEN dd.Status = 'Черновик' THEN dd.DocumentID END) as DraftCount,\n        COUNT(CASE WHEN dd.Status = 'Утвержден' THEN dd.DocumentID END) as ApprovedCount,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as Authors,\n        p.Budget as ProjectBudget\n    FROM Projects p\n    JOIN DesignDocuments dd ON p.ProjectID = dd.ProjectID\n    JOIN Engineers e ON dd.AuthorID = e.EngineerID\n    GROUP BY p.ProjectID, p.ProjectName, p.Budget\n    HAVING COUNT(CASE WHEN dd.Status = 'Черновик' THEN dd.DocumentID END) > COUNT(CASE WHEN dd.Status = 'Утвержден' THEN dd.DocumentID END)\n)\nSELECT \n    ProjectName,\n    DraftCount,\n    ApprovedCount,\n    Authors,\n    ProjectBudget\nFROM ProjectDocumentStats\nORDER BY DraftCount - ApprovedCount DESC\nLIMIT 2;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    p.ProjectName,\n    SUM(CASE WHEN dd.Status = 'Черновик' THEN 1 ELSE 0 END) AS DraftCount,\n    SUM(CASE WHEN dd.Status = 'Утвержден' THEN 1 ELSE 0 END) AS ApprovedCount,\n    GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS Authors,\n    p.Budget AS ProjectBudget,\n    SUM(CASE WHEN dd.Status = 'Черновик' THEN 1 ELSE 0 END) - \n    SUM(CASE WHEN dd.Status = 'Утвержден' THEN 1 ELSE 0 END) AS DraftMinusApproved\nFROM Projects p\nJOIN DesignDocuments dd ON p.ProjectID = dd.ProjectID\nJOIN Engineers e ON dd.AuthorID = e.EngineerID\nGROUP BY p.ProjectID, p.ProjectName, p.Budget\nHAVING DraftCount > ApprovedCount\nORDER BY DraftMinusApproved DESC\nLIMIT 2;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "WITH DraftDocuments AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        COUNT(dd.DocumentID) AS DraftCount\n    FROM Projects p\n    JOIN DesignDocuments dd ON p.ProjectID = dd.ProjectID\n    WHERE dd.Status = 'Черновик'\n    GROUP BY p.ProjectID, p.ProjectName\n),\nApprovedDocuments AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        COUNT(dd.DocumentID) AS ApprovedCount\n    FROM Projects p\n    JOIN DesignDocuments dd ON p.ProjectID = dd.ProjectID\n    WHERE dd.Status = 'Утвержден'\n    GROUP BY p.ProjectID, p.ProjectName\n),\nProjectAuthors AS (\n    SELECT \n        p.ProjectID,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS Authors\n    FROM Projects p\n    JOIN DesignDocuments dd ON p.ProjectID = dd.ProjectID\n    JOIN Engineers e ON dd.AuthorID = e.EngineerID\n    GROUP BY p.ProjectID\n)\nSELECT \n    d.ProjectName,\n    d.DraftCount,\n    COALESCE(a.ApprovedCount, 0) AS ApprovedCount,\n    pa.Authors,\n    p.Budget AS ProjectBudget,\n    (d.DraftCount - COALESCE(a.ApprovedCount, 0)) AS Difference\nFROM DraftDocuments d\nLEFT JOIN ApprovedDocuments a ON d.ProjectID = a.ProjectID\nJOIN Projects p ON d.ProjectID = p.ProjectID\nJOIN ProjectAuthors pa ON d.ProjectID = pa.ProjectID\nWHERE d.DraftCount > COALESCE(a.ApprovedCount, 0)\nORDER BY Difference DESC\nLIMIT 2;",
            "gigachat_response": "WITH DocStatusCounts AS (\n    SELECT \n        dd.ProjectID,\n        SUM(CASE WHEN dd.Status = 'Черновик' THEN 1 ELSE 0 END) AS DraftCount,\n        SUM(CASE WHEN dd.Status = 'Утвержден' THEN 1 ELSE 0 END) AS ApprovedCount,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS AuthorsList\n    FROM DesignDocuments dd\n    INNER JOIN Engineers e ON dd.AuthorID = e.EngineerID\n    GROUP BY dd.ProjectID\n),\nProjectDetails AS (\n    SELECT \n        p.ProjectName,\n        dsc.DraftCount,\n        dsc.ApprovedCount,\n        dsc.AuthorsList,\n        b.TotalBudget\n    FROM Projects p\n    INNER JOIN DocStatusCounts dsc ON p.ProjectID = dsc.ProjectID\n    INNER JOIN Budgets b ON p.ProjectID = b.ProjectID\n    WHERE dsc.DraftCount > dsc.ApprovedCount\n)\nSELECT *\nFROM ProjectDetails\nORDER BY (DraftCount - ApprovedCount) DESC\nLIMIT 2;",
            "gigachat_response_ru": "WITH DocStatusCounts AS (\n    SELECT \n        dd.ProjectID,\n        COUNT(CASE WHEN dd.Status = 'Черновик' THEN 1 END) AS DraftCount,\n        COUNT(CASE WHEN dd.Status = 'Утвержден' THEN 1 END) AS ApprovedCount,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.MiddleName, ' ', e.LastName)) AS AuthorsList\n    FROM DesignDocuments dd\n    INNER JOIN Engineers e ON dd.AuthorID = e.EngineerID\n    GROUP BY dd.ProjectID\n),\nProjectDetails AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        dsc.DraftCount,\n        dsc.ApprovedCount,\n        dsc.AuthorsList,\n        b.TotalBudget\n    FROM Projects p\n    INNER JOIN DocStatusCounts dsc ON p.ProjectID = dsc.ProjectID\n    INNER JOIN Budgets b ON p.ProjectID = b.ProjectID\n    WHERE dsc.DraftCount > dsc.ApprovedCount\n)\nSELECT \n    pd.ProjectName,\n    pd.DraftCount,\n    pd.ApprovedCount,\n    pd.AuthorsList,\n    pd.TotalBudget\nFROM ProjectDetails pd\nORDER BY (pd.DraftCount - pd.ApprovedCount) DESC\nLIMIT 2;"
        },
        {
            "question": "Найти инженеров, работающих над проектами с бюджетом более 7.5 миллионов рублей, имеющих сертификаты уровня 'Продвинутый' или 'Эксперт' и участвовавших в программах обучения стоимостью более 150000 рублей. В ответе будут показаны: ФИО инженера, должность, количество проектов, список сертификатов и список пройденных программ обучения. Результаты отсортированы по количеству проектов, показаны топ-3 записи.",
            "sql_query": "WITH QualifiedEngineers AS (\n    SELECT \n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', e.LastName) as EngineerName,\n        e.Position,\n        COUNT(p.ProjectID) as ProjectCount,\n        GROUP_CONCAT(DISTINCT c.CertificationName) as Certifications,\n        GROUP_CONCAT(DISTINCT t.ProgramName) as TrainingPrograms\n    FROM Engineers e\n    JOIN Projects p ON p.ProjectManagerID = e.EngineerID\n    JOIN Certifications c ON c.EngineerID = e.EngineerID\n    JOIN TrainingPrograms t ON t.EngineerID = e.EngineerID\n    WHERE p.Budget > 7500000\n    AND c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    AND t.Cost > 150000\n    AND t.Status = 'Завершено'\n    GROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position\n)\nSELECT \n    EngineerName,\n    Position,\n    ProjectCount,\n    Certifications,\n    TrainingPrograms\nFROM QualifiedEngineers\nORDER BY ProjectCount DESC\nLIMIT 3;",
            "gpt-4o_response": "WITH EngineerProjectStats AS (\n    SELECT \n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', e.LastName) AS EngineerName,\n        e.Position,\n        COUNT(DISTINCT p.ProjectID) AS ProjectCount,\n        GROUP_CONCAT(DISTINCT c.CertificationName) AS Certifications,\n        GROUP_CONCAT(DISTINCT tp.ProgramName) AS TrainingPrograms\n    FROM Engineers e\n    JOIN Projects p ON e.EngineerID = p.ProjectManagerID\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    JOIN TrainingPrograms tp ON e.EngineerID = tp.EngineerID\n    WHERE p.Budget > 7500000\n    AND (c.CertificationLevel = 'Продвинутый' OR c.CertificationLevel = 'Эксперт')\n    AND tp.Cost > 150000\n    GROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position\n)\nSELECT \n    EngineerName,\n    Position,\n    ProjectCount,\n    Certifications,\n    TrainingPrograms\nFROM EngineerProjectStats\nORDER BY ProjectCount DESC\nLIMIT 3;",
            "gpt-4o_response_ru": "WITH EngineerProjectStats AS (\n    SELECT \n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', e.LastName) AS EngineerName,\n        e.Position,\n        COUNT(DISTINCT p.ProjectID) AS ProjectCount,\n        GROUP_CONCAT(DISTINCT c.CertificationName) AS Certifications,\n        GROUP_CONCAT(DISTINCT tp.ProgramName) AS TrainingPrograms\n    FROM Engineers e\n    JOIN Projects p ON e.EngineerID = p.ProjectManagerID\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    JOIN TrainingPrograms tp ON e.EngineerID = tp.EngineerID\n    WHERE p.Budget > 7500000\n    AND (c.CertificationLevel = 'Продвинутый' OR c.CertificationLevel = 'Эксперт')\n    AND tp.Cost > 150000\n    GROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position\n)\nSELECT \n    EngineerName,\n    Position,\n    ProjectCount,\n    Certifications,\n    TrainingPrograms\nFROM EngineerProjectStats\nORDER BY ProjectCount DESC\nLIMIT 3;",
            "google/gemini-2.0-flash-001_response": "WITH QualifiedEngineers AS (\n    SELECT\n        e.EngineerID,\n        e.FirstName,\n        e.LastName,\n        e.Position\n    FROM Engineers e\n    WHERE e.EngineerID IN (SELECT DISTINCT EngineerID FROM Certifications WHERE CertificationLevel IN ('Продвинутый', 'Эксперт'))\n    AND e.EngineerID IN (SELECT DISTINCT EngineerID FROM TrainingPrograms WHERE Cost > 150000)\n),\nProjectCounts AS (\n    SELECT\n        qe.EngineerID,\n        COUNT(DISTINCT p.ProjectID) AS ProjectCount\n    FROM QualifiedEngineers qe\n    JOIN Projects p ON qe.EngineerID = p.ProjectManagerID\n    WHERE p.Budget > 7500000\n    GROUP BY qe.EngineerID\n),\nCertificationList AS (\n    SELECT\n        qe.EngineerID,\n        GROUP_CONCAT(DISTINCT c.CertificationName) AS CertificationList\n    FROM QualifiedEngineers qe\n    JOIN Certifications c ON qe.EngineerID = c.EngineerID\n    WHERE c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    GROUP BY qe.EngineerID\n),\nTrainingProgramList AS (\n    SELECT\n        qe.EngineerID,\n        GROUP_CONCAT(DISTINCT tp.ProgramName) AS TrainingProgramList\n    FROM QualifiedEngineers qe\n    JOIN TrainingPrograms tp ON qe.EngineerID = tp.EngineerID\n    WHERE tp.Cost > 150000\n    GROUP BY qe.EngineerID\n)\nSELECT\n    CONCAT(qe.FirstName, ' ', qe.LastName) AS EngineerName,\n    qe.Position,\n    pc.ProjectCount,\n    cl.CertificationList,\n    tpl.TrainingProgramList\nFROM QualifiedEngineers qe\nJOIN ProjectCounts pc ON qe.EngineerID = pc.EngineerID\nJOIN CertificationList cl ON qe.EngineerID = cl.EngineerID\nJOIN TrainingProgramList tpl ON qe.EngineerID = tpl.EngineerID\nORDER BY pc.ProjectCount DESC\nLIMIT 3;",
            "google/gemini-2.0-flash-001_response_ru": "WITH QualifiedEngineers AS (\n    SELECT\n        e.EngineerID,\n        e.FirstName,\n        e.LastName,\n        e.Position\n    FROM Engineers e\n    WHERE e.EngineerID IN (SELECT DISTINCT EngineerID FROM Certifications WHERE CertificationLevel IN ('Продвинутый', 'Эксперт'))\n    AND e.EngineerID IN (SELECT DISTINCT EngineerID FROM TrainingPrograms WHERE Cost > 150000)\n),\nProjectEngineers AS (\n    SELECT\n        qe.EngineerID,\n        qe.FirstName,\n        qe.LastName,\n        qe.Position,\n        COUNT(DISTINCT p.ProjectID) AS ProjectCount,\n        GROUP_CONCAT(DISTINCT c.CertificationName) AS Certifications,\n        GROUP_CONCAT(DISTINCT tp.ProgramName) AS TrainingPrograms\n    FROM QualifiedEngineers qe\n    JOIN Projects p ON qe.EngineerID = p.ProjectManagerID\n    JOIN Certifications c ON qe.EngineerID = c.EngineerID AND c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    JOIN TrainingPrograms tp ON qe.EngineerID = tp.EngineerID AND tp.Cost > 150000\n    WHERE p.Budget > 7500000\n    GROUP BY qe.EngineerID, qe.FirstName, qe.LastName, qe.Position\n)\nSELECT\n    pe.FirstName || ' ' || pe.LastName AS EngineerName,\n    pe.Position,\n    pe.ProjectCount,\n    pe.Certifications,\n    pe.TrainingPrograms\nFROM ProjectEngineers pe\nORDER BY pe.ProjectCount DESC\nLIMIT 3;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH EngineerProjectStats AS (\n    SELECT \n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', e.MiddleName, ' ', e.LastName) as EngineerName,\n        e.Position,\n        COUNT(DISTINCT p.ProjectID) as ProjectCount,\n        GROUP_CONCAT(DISTINCT c.CertificationName) as Certifications,\n        GROUP_CONCAT(DISTINCT tp.ProgramName) as TrainingPrograms\n    FROM Engineers e\n    JOIN Projects p ON e.EngineerID = p.ProjectManagerID\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    JOIN TrainingPrograms tp ON e.EngineerID = tp.EngineerID\n    WHERE p.Budget > 7500000\n    AND c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    AND tp.Cost > 150000\n    GROUP BY e.EngineerID, e.FirstName, e.MiddleName, e.LastName, e.Position\n)\nSELECT \n    EngineerName,\n    Position,\n    ProjectCount,\n    Certifications,\n    TrainingPrograms\nFROM EngineerProjectStats\nORDER BY ProjectCount DESC\nLIMIT 3;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH EngineerProjectStats AS (\n    SELECT \n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', e.MiddleName, ' ', e.LastName) as EngineerName,\n        e.Position,\n        COUNT(DISTINCT p.ProjectID) as ProjectCount,\n        GROUP_CONCAT(DISTINCT c.CertificationName) as Certifications,\n        GROUP_CONCAT(DISTINCT tp.ProgramName) as TrainingPrograms\n    FROM Engineers e\n    JOIN Projects p ON e.EngineerID = p.ProjectManagerID\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    JOIN TrainingPrograms tp ON e.EngineerID = tp.EngineerID\n    WHERE p.Budget > 7500000\n    AND c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    AND tp.Cost > 150000\n    GROUP BY e.EngineerID, e.FirstName, e.MiddleName, e.LastName, e.Position\n)\nSELECT \n    EngineerName,\n    Position,\n    ProjectCount,\n    Certifications,\n    TrainingPrograms\nFROM EngineerProjectStats\nORDER BY ProjectCount DESC\nLIMIT 3;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    CONCAT(e.FirstName, ' ', COALESCE(e.MiddleName, ''), ' ', e.LastName) AS FullName,\n    e.Position,\n    COUNT(DISTINCT p.ProjectID) AS ProjectCount,\n    GROUP_CONCAT(DISTINCT c.CertificationName) AS Certifications,\n    GROUP_CONCAT(DISTINCT tp.ProgramName) AS TrainingPrograms\nFROM Engineers e\nJOIN Projects p ON e.DepartmentID = p.DepartmentID\nJOIN Certifications c ON e.EngineerID = c.EngineerID\nJOIN TrainingPrograms tp ON e.EngineerID = tp.EngineerID\nWHERE p.Budget > 7500000\nAND c.CertificationLevel IN ('Продвинутый', 'Эксперт')\nAND c.Status = 'Действителен'\nAND tp.Cost > 150000\nGROUP BY e.EngineerID, e.FirstName, e.MiddleName, e.LastName, e.Position\nORDER BY ProjectCount DESC\nLIMIT 3;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "WITH QualifiedEngineers AS (\n    SELECT \n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', e.LastName) AS FullName,\n        e.Position,\n        COUNT(DISTINCT p.ProjectID) AS ProjectCount,\n        GROUP_CONCAT(DISTINCT c.CertificationName) AS Certifications,\n        GROUP_CONCAT(DISTINCT tp.ProgramName) AS TrainingPrograms\n    FROM Engineers e\n    JOIN Projects p ON e.EngineerID = p.ProjectManagerID\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    JOIN TrainingPrograms tp ON e.EngineerID = tp.EngineerID\n    WHERE p.Budget > 7500000\n    AND c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    AND tp.Cost > 150000\n    GROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position\n)\nSELECT \n    FullName,\n    Position,\n    ProjectCount,\n    Certifications,\n    TrainingPrograms\nFROM QualifiedEngineers\nORDER BY ProjectCount DESC\nLIMIT 3;",
            "gigachat_response": "WITH CertifiedAndTrainedEngineers AS (\n    SELECT DISTINCT\n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', e.MiddleName, ' ', e.LastName) AS FullName,\n        e.Position,\n        COUNT(DISTINCT p.ProjectID) OVER(PARTITION BY e.EngineerID) AS ProjectCount,\n        GROUP_CONCAT(DISTINCT c.CertificationName ORDER BY c.CertificationName SEPARATOR ', ') AS CertificateList,\n        GROUP_CONCAT(DISTINCT tp.ProgramName ORDER BY tp.ProgramName SEPARATOR ', ') AS TrainingList\n    FROM Engineers e\n    INNER JOIN Projects p ON e.EngineerID = p.ProjectManagerID OR e.EngineerID IN (SELECT AssignedTo FROM Tasks WHERE ProjectID = p.ProjectID)\n    INNER JOIN Certifications c ON e.EngineerID = c.EngineerID\n    INNER JOIN TrainingPrograms tp ON e.EngineerID = tp.EngineerID\n    WHERE p.Budget > 7500000\n      AND c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n      AND tp.Cost > 150000\n)\nSELECT *\nFROM CertifiedAndTrainedEngineers\nORDER BY ProjectCount DESC\nLIMIT 3;",
            "gigachat_response_ru": "SELECT \n    e.FirstName || ' ' || e.MiddleName || ' ' || e.LastName AS FullName,\n    e.Position,\n    COUNT(DISTINCT p.ProjectID) AS ProjectCount,\n    GROUP_CONCAT(DISTINCT c.CertificationName ORDER BY c.CertificationName SEPARATOR ', ') AS CertificateList,\n    GROUP_CONCAT(DISTINCT tp.ProgramName ORDER BY tp.ProgramName SEPARATOR ', ') AS TrainingList\nFROM Engineers e\nJOIN Projects p ON e.EngineerID = p.ProjectManagerID\nJOIN Certifications c ON e.EngineerID = c.EngineerID\nJOIN TrainingPrograms tp ON e.EngineerID = tp.EngineerID\nWHERE p.Budget > 7500000\nAND c.CertificationLevel IN ('Продвинутый', 'Эксперт')\nAND tp.Cost > 150000\nGROUP BY e.EngineerID, e.FirstName, e.MiddleName, e.LastName, e.Position\nORDER BY ProjectCount DESC\nLIMIT 3;"
        },
        {
            "question": "Найти отделы, где средняя стоимость обслуживания оборудования превышает 1500 рублей. В ответе будут показаны: название отдела, количество единиц оборудования, общая стоимость обслуживания за текущий месяц (в рублях), список производителей оборудования и процент выполненных работ по обслуживанию. Результаты отсортированы по общей стоимости обслуживания, показаны топ-4 записи.",
            "sql_query": "WITH DepartmentMaintenanceStats AS (\n    SELECT \n        d.DepartmentID,\n        d.DepartmentName,\n        COUNT(DISTINCT e.EquipmentID) as EquipmentCount,\n        SUM(m.Cost) as TotalMaintenanceCost,\n        GROUP_CONCAT(DISTINCT e.Manufacturer) as Manufacturers,\n        (COUNT(CASE WHEN m.Status = 'Выполнено' THEN 1 END) * 100.0 / COUNT(*)) as CompletionRate\n    FROM Departments d\n    JOIN Equipment e ON d.DepartmentID = e.DepartmentID\n    JOIN MaintenanceRecords m ON e.EquipmentID = m.EquipmentID\n    WHERE MONTH(m.MaintenanceDate) = MONTH(CURDATE())\n    AND YEAR(m.MaintenanceDate) = YEAR(CURDATE())\n    GROUP BY d.DepartmentID, d.DepartmentName\n    HAVING AVG(m.Cost) > 1500\n)\nSELECT \n    DepartmentName,\n    EquipmentCount,\n    ROUND(TotalMaintenanceCost, 2) as TotalMaintenanceCost,\n    Manufacturers,\n    ROUND(CompletionRate, 2) as CompletionRatePercent\nFROM DepartmentMaintenanceStats\nORDER BY TotalMaintenanceCost DESC\nLIMIT 4;",
            "gpt-4o_response": "WITH DepartmentMaintenanceStats AS (\n    SELECT \n        d.DepartmentID,\n        d.DepartmentName,\n        COUNT(e.EquipmentID) AS EquipmentCount,\n        SUM(mr.Cost) AS TotalMaintenanceCost,\n        GROUP_CONCAT(DISTINCT e.Manufacturer) AS EquipmentManufacturers,\n        (SUM(CASE WHEN mr.Status = 'Выполнено' THEN 1 ELSE 0 END) / COUNT(mr.MaintenanceID)) * 100 AS MaintenanceCompletionPercentage\n    FROM Departments d\n    JOIN Equipment e ON d.DepartmentID = e.DepartmentID\n    JOIN MaintenanceRecords mr ON e.EquipmentID = mr.EquipmentID\n    WHERE MONTH(mr.MaintenanceDate) = MONTH(CURDATE()) AND YEAR(mr.MaintenanceDate) = YEAR(CURDATE())\n    GROUP BY d.DepartmentID, d.DepartmentName\n    HAVING AVG(mr.Cost) > 1500\n)\nSELECT \n    DepartmentName,\n    EquipmentCount,\n    TotalMaintenanceCost,\n    EquipmentManufacturers,\n    ROUND(MaintenanceCompletionPercentage, 2) AS MaintenanceCompletionPercentage\nFROM DepartmentMaintenanceStats\nORDER BY TotalMaintenanceCost DESC\nLIMIT 4;",
            "gpt-4o_response_ru": "WITH MaintenanceStats AS (\n    SELECT \n        e.DepartmentID,\n        COUNT(DISTINCT eq.EquipmentID) AS EquipmentCount,\n        SUM(mr.Cost) AS TotalMaintenanceCost,\n        GROUP_CONCAT(DISTINCT eq.Manufacturer) AS Manufacturers,\n        SUM(CASE WHEN mr.Status = 'Выполнено' THEN 1 ELSE 0 END) / COUNT(mr.MaintenanceID) * 100 AS CompletionPercentage\n    FROM MaintenanceRecords mr\n    JOIN Equipment eq ON mr.EquipmentID = eq.EquipmentID\n    JOIN Departments e ON eq.DepartmentID = e.DepartmentID\n    WHERE MONTH(mr.MaintenanceDate) = MONTH(CURDATE()) AND YEAR(mr.MaintenanceDate) = YEAR(CURDATE())\n    GROUP BY e.DepartmentID\n    HAVING AVG(mr.Cost) > 1500\n)\nSELECT \n    d.DepartmentName,\n    ms.EquipmentCount,\n    ms.TotalMaintenanceCost,\n    ms.Manufacturers,\n    ROUND(ms.CompletionPercentage, 2) AS CompletionPercentage\nFROM MaintenanceStats ms\nJOIN Departments d ON ms.DepartmentID = d.DepartmentID\nORDER BY ms.TotalMaintenanceCost DESC\nLIMIT 4;",
            "google/gemini-2.0-flash-001_response": "WITH DepartmentMaintenance AS (\n    SELECT\n        d.DepartmentID,\n        d.DepartmentName,\n        COUNT(DISTINCT e.EquipmentID) AS EquipmentCount,\n        SUM(mr.Cost) AS TotalMaintenanceCost,\n        GROUP_CONCAT(DISTINCT e.Manufacturer) AS Manufacturers,\n        SUM(CASE WHEN mr.Status = 'Выполнено' THEN 1 ELSE 0 END) * 100.0 / COUNT(mr.MaintenanceID) AS CompletionPercentage\n    FROM Departments d\n    JOIN Equipment e ON d.DepartmentID = e.DepartmentID\n    JOIN MaintenanceRecords mr ON e.EquipmentID = mr.EquipmentID\n    WHERE strftime('%Y-%m', mr.MaintenanceDate) = strftime('%Y-%m', 'now')\n    GROUP BY d.DepartmentID, d.DepartmentName\n    HAVING AVG(mr.Cost) > 1500\n)\nSELECT\n    dm.DepartmentName,\n    dm.EquipmentCount,\n    ROUND(dm.TotalMaintenanceCost, 2) AS TotalMaintenanceCost,\n    dm.Manufacturers,\n    ROUND(dm.CompletionPercentage, 2) AS CompletionPercentage\nFROM DepartmentMaintenance dm\nORDER BY dm.TotalMaintenanceCost DESC\nLIMIT 4;",
            "google/gemini-2.0-flash-001_response_ru": "WITH DepartmentMaintenanceCosts AS (\n    SELECT\n        d.DepartmentID,\n        d.DepartmentName,\n        COUNT(DISTINCT e.EquipmentID) AS EquipmentCount,\n        SUM(mr.Cost) AS TotalMaintenanceCost,\n        GROUP_CONCAT(DISTINCT e.Manufacturer) AS EquipmentManufacturers,\n        SUM(CASE WHEN mr.Status = 'Выполнено' THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS CompletionPercentage\n    FROM Departments d\n    JOIN Equipment e ON d.DepartmentID = e.DepartmentID\n    JOIN MaintenanceRecords mr ON e.EquipmentID = mr.EquipmentID\n    WHERE strftime('%Y-%m', mr.MaintenanceDate) = strftime('%Y-%m', 'now')\n    GROUP BY d.DepartmentID, d.DepartmentName\n    HAVING AVG(mr.Cost) > 1500\n)\nSELECT\n    dmc.DepartmentName,\n    dmc.EquipmentCount,\n    ROUND(dmc.TotalMaintenanceCost, 2) AS TotalMaintenanceCost,\n    dmc.EquipmentManufacturers,\n    ROUND(dmc.CompletionPercentage, 2) AS CompletionPercentage\nFROM DepartmentMaintenanceCosts dmc\nORDER BY dmc.TotalMaintenanceCost DESC\nLIMIT 4;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH DepartmentMaintenanceStats AS (\n    SELECT \n        d.DepartmentName,\n        COUNT(e.EquipmentID) as EquipmentCount,\n        SUM(mr.Cost) as TotalMaintenanceCost,\n        GROUP_CONCAT(DISTINCT eq.Manufacturer) as Manufacturers,\n        ROUND(SUM(CASE WHEN mr.Status = 'Выполнено' THEN 1 ELSE 0 END) / COUNT(mr.MaintenanceID) * 100, 2) as CompletionPercentage\n    FROM Departments d\n    JOIN Equipment eq ON d.DepartmentID = eq.DepartmentID\n    JOIN MaintenanceRecords mr ON eq.EquipmentID = mr.EquipmentID\n    WHERE YEAR(mr.MaintenanceDate) = YEAR(CURDATE()) AND MONTH(mr.MaintenanceDate) = MONTH(CURDATE())\n    GROUP BY d.DepartmentName\n    HAVING AVG(mr.Cost) > 1500\n)\nSELECT \n    DepartmentName,\n    EquipmentCount,\n    TotalMaintenanceCost,\n    Manufacturers,\n    CompletionPercentage\nFROM DepartmentMaintenanceStats\nORDER BY TotalMaintenanceCost DESC\nLIMIT 4;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH DepartmentMaintenanceStats AS (\n    SELECT \n        d.DepartmentName,\n        COUNT(mr.MaintenanceID) as MaintenanceCount,\n        SUM(mr.Cost) as TotalMaintenanceCost,\n        GROUP_CONCAT(DISTINCT e.Manufacturer) as EquipmentManufacturers,\n        ROUND(SUM(CASE WHEN mr.Status = 'Выполнено' THEN 1 ELSE 0 END) / COUNT(mr.MaintenanceID) * 100, 2) as CompletionPercentage\n    FROM Departments d\n    JOIN Equipment e ON d.DepartmentID = e.DepartmentID\n    JOIN MaintenanceRecords mr ON e.EquipmentID = mr.EquipmentID\n    WHERE YEAR(mr.MaintenanceDate) = YEAR(CURDATE()) AND MONTH(mr.MaintenanceDate) = MONTH(CURDATE())\n    GROUP BY d.DepartmentName\n    HAVING AVG(mr.Cost) > 1500\n)\nSELECT \n    DepartmentName,\n    MaintenanceCount,\n    ROUND(TotalMaintenanceCost, 2) as TotalMaintenanceCost,\n    EquipmentManufacturers,\n    CompletionPercentage\nFROM DepartmentMaintenanceStats\nORDER BY TotalMaintenanceCost DESC\nLIMIT 4;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH DepartmentMaintenanceStats AS (\n    SELECT \n        d.DepartmentID,\n        d.DepartmentName,\n        COUNT(DISTINCT e.EquipmentID) AS EquipmentCount,\n        SUM(mr.Cost) AS TotalMaintenanceCost,\n        GROUP_CONCAT(DISTINCT e.Manufacturer) AS Manufacturers,\n        ROUND(100.0 * SUM(CASE WHEN mr.Status = 'Выполнено' THEN 1 ELSE 0 END) / COUNT(mr.MaintenanceID), 2) AS CompletionPercentage\n    FROM Departments d\n    JOIN Equipment e ON d.DepartmentID = e.DepartmentID\n    JOIN MaintenanceRecords mr ON e.EquipmentID = mr.EquipmentID\n    WHERE YEAR(mr.MaintenanceDate) = YEAR(CURDATE()) \n    AND MONTH(mr.MaintenanceDate) = MONTH(CURDATE())\n    GROUP BY d.DepartmentID, d.DepartmentName\n    HAVING AVG(mr.Cost) > 1500\n)\nSELECT \n    DepartmentName,\n    EquipmentCount,\n    TotalMaintenanceCost,\n    Manufacturers,\n    CompletionPercentage\nFROM DepartmentMaintenanceStats\nORDER BY TotalMaintenanceCost DESC\nLIMIT 4;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    d.DepartmentName,\n    COUNT(DISTINCT e.EquipmentID) AS EquipmentCount,\n    SUM(mr.Cost) AS TotalMaintenanceCost,\n    GROUP_CONCAT(DISTINCT e.Manufacturer) AS Manufacturers,\n    ROUND(100.0 * SUM(CASE WHEN mr.Status = 'Выполнено' THEN 1 ELSE 0 END) / COUNT(*), 2) AS CompletionPercentage\nFROM Departments d\nJOIN Equipment e ON d.DepartmentID = e.DepartmentID\nJOIN MaintenanceRecords mr ON e.EquipmentID = mr.EquipmentID\nWHERE MONTH(mr.MaintenanceDate) = MONTH(CURRENT_DATE())\nAND YEAR(mr.MaintenanceDate) = YEAR(CURRENT_DATE())\nGROUP BY d.DepartmentID, d.DepartmentName\nHAVING AVG(mr.Cost) > 1500\nORDER BY TotalMaintenanceCost DESC\nLIMIT 4;",
            "gigachat_response": "WITH DeptMaintenanceSummary AS (\n    SELECT \n        d.DepartmentID,\n        d.DepartmentName,\n        COUNT(DISTINCT eq.EquipmentID) AS EquipmentCount,\n        COALESCE(SUM(mr.Cost), 0) AS TotalMaintenanceCost,\n        GROUP_CONCAT(DISTINCT mr.MaintenanceType SEPARATOR ', ') AS MaintenanceTypes,\n        CASE WHEN SUM(CASE WHEN mr.Status = 'Выполнено' THEN 1 ELSE 0 END) > 0 THEN \n            ROUND((SUM(CASE WHEN mr.Status = 'Выполнено' THEN 1 ELSE 0 END) / COUNT(*)) * 100, 2)\n         ELSE 0 END AS PercentCompleted\n    FROM Departments d\n    INNER JOIN Equipment eq ON d.DepartmentID = eq.DepartmentID\n    LEFT JOIN MaintenanceRecords mr ON eq.EquipmentID = mr.EquipmentID\n    -- Filter records only from current month\n    WHERE YEAR(mr.MaintenanceDate) = YEAR(CURRENT_DATE()) AND MONTH(mr.MaintenanceDate) = MONTH(CURRENT_DATE())\n    GROUP BY d.DepartmentID, d.DepartmentName\n    HAVING AVG(COALESCE(mr.Cost, 0)) > 1500\n)\nSELECT *\nFROM DeptMaintenanceSummary\nORDER BY TotalMaintenanceCost DESC\nLIMIT 4;",
            "gigachat_response_ru": "SELECT \n    d.DepartmentName,\n    COUNT(eq.EquipmentID) AS EquipmentCount,\n    SUM(mr.Cost) AS TotalMaintenanceCost,\n    GROUP_CONCAT(DISTINCT eq.Manufacturer ORDER BY eq.Manufacturer SEPARATOR ', ') AS Manufacturers,\n    ROUND(SUM(CASE WHEN mr.Status = 'Выполнено' THEN 1 ELSE 0 END)/COUNT(*) * 100, 2) AS PercentCompleted\nFROM Departments d\nJOIN Equipment eq ON d.DepartmentID = eq.DepartmentID\nJOIN MaintenanceRecords mr ON eq.EquipmentID = mr.EquipmentID\nWHERE YEAR(mr.MaintenanceDate) = YEAR(CURRENT_DATE()) AND MONTH(mr.MaintenanceDate) = MONTH(CURRENT_DATE())\nGROUP BY d.DepartmentID\nHAVING AVG(mr.Cost) > 1500\nORDER BY TotalMaintenanceCost DESC\nLIMIT 4;"
        },
        {
            "question": "Получить список клиентов, у которых количество активных проектов превышает 2 и общий бюджет всех проектов превышает 15 миллионов рублей. В ответе будут показаны: название клиента, количество активных проектов, общий бюджет проектов, средняя продолжительность проектов в днях и список руководителей проектов. Результаты отсортированы по общему бюджету проектов, показаны топ-3 записи.",
            "sql_query": "WITH ClientProjectStats AS (\n    SELECT \n        c.ClientID,\n        c.ClientName,\n        COUNT(p.ProjectID) as ActiveProjectCount,\n        SUM(p.Budget) as TotalBudget,\n        AVG(DATEDIFF(p.EndDate, p.StartDate)) as AvgProjectDuration,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as ProjectManagers\n    FROM Clients c\n    JOIN Projects p ON c.ClientID = p.ClientID\n    JOIN Engineers e ON p.ProjectManagerID = e.EngineerID\n    WHERE p.Status = 'В процессе'\n    GROUP BY c.ClientID, c.ClientName\n    HAVING COUNT(p.ProjectID) > 2 AND SUM(p.Budget) > 15000000\n)\nSELECT \n    ClientName,\n    ActiveProjectCount,\n    ROUND(TotalBudget, 2) as TotalBudget,\n    ROUND(AvgProjectDuration, 1) as AvgProjectDurationDays,\n    ProjectManagers\nFROM ClientProjectStats\nORDER BY TotalBudget DESC\nLIMIT 3;",
            "gpt-4o_response": "WITH ClientProjectStats AS (\n    SELECT \n        c.ClientID,\n        c.ClientName,\n        COUNT(p.ProjectID) AS ActiveProjectCount,\n        SUM(p.Budget) AS TotalProjectBudget,\n        AVG(DATEDIFF(p.EndDate, p.StartDate)) AS AvgProjectDuration,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS ProjectManagers\n    FROM Clients c\n    JOIN Projects p ON c.ClientID = p.ClientID\n    JOIN Engineers e ON p.ProjectManagerID = e.EngineerID\n    WHERE p.Status = 'В процессе'\n    GROUP BY c.ClientID, c.ClientName\n    HAVING ActiveProjectCount > 2 AND TotalProjectBudget > 15000000\n)\nSELECT \n    ClientName,\n    ActiveProjectCount,\n    ROUND(TotalProjectBudget, 2) AS TotalProjectBudget,\n    ROUND(AvgProjectDuration, 2) AS AvgProjectDuration,\n    ProjectManagers\nFROM ClientProjectStats\nORDER BY TotalProjectBudget DESC\nLIMIT 3;",
            "gpt-4o_response_ru": "WITH ClientProjectStats AS (\n    SELECT \n        c.ClientID,\n        c.ClientName,\n        COUNT(p.ProjectID) AS ActiveProjectCount,\n        SUM(p.Budget) AS TotalProjectBudget,\n        AVG(DATEDIFF(p.EndDate, p.StartDate)) AS AvgProjectDuration,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS ProjectManagers\n    FROM Clients c\n    JOIN Projects p ON c.ClientID = p.ClientID\n    JOIN Engineers e ON p.ProjectManagerID = e.EngineerID\n    WHERE p.Status IN ('В процессе', 'Планируется')\n    GROUP BY c.ClientID, c.ClientName\n    HAVING ActiveProjectCount > 2 AND TotalProjectBudget > 15000000\n)\nSELECT \n    ClientName,\n    ActiveProjectCount,\n    ROUND(TotalProjectBudget, 2) AS TotalProjectBudget,\n    ROUND(AvgProjectDuration, 2) AS AvgProjectDuration,\n    ProjectManagers\nFROM ClientProjectStats\nORDER BY TotalProjectBudget DESC\nLIMIT 3;",
            "google/gemini-2.0-flash-001_response": "WITH ClientProjectStats AS (\n    SELECT \n        c.ClientID,\n        c.ClientName,\n        COUNT(CASE WHEN p.Status = 'В процессе' THEN p.ProjectID ELSE NULL END) AS ActiveProjectCount,\n        SUM(p.Budget) AS TotalBudget,\n        AVG(DATEDIFF(p.EndDate, p.StartDate)) AS AvgProjectDuration,\n        GROUP_CONCAT(DISTINCT e.FirstName || ' ' || e.LastName) AS ProjectManagers\n    FROM Clients c\n    JOIN Projects p ON c.ClientID = p.ClientID\n    LEFT JOIN Engineers e ON p.ProjectManagerID = e.EngineerID\n    GROUP BY c.ClientID, c.ClientName\n    HAVING COUNT(CASE WHEN p.Status = 'В процессе' THEN p.ProjectID ELSE NULL END) > 2 AND SUM(p.Budget) > 15000000\n)\nSELECT \n    ClientName,\n    ActiveProjectCount,\n    TotalBudget,\n    ROUND(AvgProjectDuration, 2) AS AvgProjectDuration,\n    ProjectManagers\nFROM ClientProjectStats\nORDER BY TotalBudget DESC\nLIMIT 3;",
            "google/gemini-2.0-flash-001_response_ru": "WITH ClientProjectStats AS (\n    SELECT \n        c.ClientID,\n        c.ClientName,\n        COUNT(CASE WHEN p.Status = 'В процессе' THEN p.ProjectID ELSE NULL END) AS ActiveProjectCount,\n        SUM(p.Budget) AS TotalBudget,\n        AVG(JULIANDAY(p.EndDate) - JULIANDAY(p.StartDate)) AS AvgProjectDuration,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS ProjectManagers\n    FROM Clients c\n    JOIN Projects p ON c.ClientID = p.ClientID\n    LEFT JOIN Engineers e ON p.ProjectManagerID = e.EngineerID\n    GROUP BY c.ClientID, c.ClientName\n    HAVING COUNT(CASE WHEN p.Status = 'В процессе' THEN p.ProjectID ELSE NULL END) > 2 AND SUM(p.Budget) > 15000000\n)\nSELECT \n    ClientName,\n    ActiveProjectCount,\n    TotalBudget,\n    ROUND(AvgProjectDuration, 2) AS AvgProjectDuration,\n    ProjectManagers\nFROM ClientProjectStats\nORDER BY TotalBudget DESC\nLIMIT 3;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH ClientProjectStats AS (\n    SELECT \n        c.ClientName,\n        COUNT(p.ProjectID) as ActiveProjectCount,\n        SUM(p.Budget) as TotalBudget,\n        AVG(DATEDIFF(p.EndDate, p.StartDate)) as AvgProjectDuration,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as ProjectManagers\n    FROM Clients c\n    JOIN Projects p ON c.ClientID = p.ClientID\n    JOIN Engineers e ON p.ProjectManagerID = e.EngineerID\n    WHERE p.Status = 'В процессе'\n    GROUP BY c.ClientName\n    HAVING COUNT(p.ProjectID) > 2 AND SUM(p.Budget) > 15000000\n)\nSELECT \n    ClientName,\n    ActiveProjectCount,\n    ROUND(TotalBudget, 2) as TotalBudget,\n    ROUND(AvgProjectDuration, 2) as AvgProjectDuration,\n    ProjectManagers\nFROM ClientProjectStats\nORDER BY TotalBudget DESC\nLIMIT 3;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH ClientProjectStats AS (\n    SELECT \n        c.ClientID,\n        c.ClientName,\n        COUNT(p.ProjectID) as ActiveProjectCount,\n        SUM(p.Budget) as TotalBudget,\n        AVG(DATEDIFF(COALESCE(p.EndDate, CURDATE()), p.StartDate)) as AvgProjectDuration,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as ProjectManagers\n    FROM Clients c\n    JOIN Projects p ON c.ClientID = p.ClientID\n    JOIN Engineers e ON p.ProjectManagerID = e.EngineerID\n    WHERE p.Status = 'В процессе'\n    GROUP BY c.ClientID, c.ClientName\n    HAVING COUNT(p.ProjectID) > 2 AND SUM(p.Budget) > 15000000\n)\nSELECT \n    ClientName,\n    ActiveProjectCount,\n    ROUND(TotalBudget, 2) as TotalBudget,\n    ROUND(AvgProjectDuration, 2) as AvgProjectDuration,\n    ProjectManagers\nFROM ClientProjectStats\nORDER BY TotalBudget DESC\nLIMIT 3;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH ClientProjectStats AS (\n    SELECT \n        c.ClientID,\n        c.ClientName,\n        COUNT(p.ProjectID) AS ActiveProjectCount,\n        SUM(p.Budget) AS TotalBudget,\n        AVG(DATEDIFF(p.EndDate, p.StartDate)) AS AvgProjectDuration,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS ProjectManagers\n    FROM Clients c\n    JOIN Projects p ON c.ClientID = p.ClientID\n    JOIN Engineers e ON p.ProjectManagerID = e.EngineerID\n    WHERE p.Status = 'В процессе'\n    GROUP BY c.ClientID, c.ClientName\n    HAVING COUNT(p.ProjectID) > 2 AND SUM(p.Budget) > 15000000\n)\nSELECT \n    ClientName,\n    ActiveProjectCount,\n    TotalBudget,\n    ROUND(AvgProjectDuration, 2) AS AvgProjectDuration,\n    ProjectManagers\nFROM ClientProjectStats\nORDER BY TotalBudget DESC\nLIMIT 3;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "WITH ClientProjectStats AS (\n    SELECT \n        c.ClientID,\n        c.ClientName,\n        COUNT(p.ProjectID) AS ActiveProjectCount,\n        SUM(p.Budget) AS TotalBudget,\n        AVG(DATEDIFF(p.EndDate, p.StartDate)) AS AvgProjectDuration,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS ProjectManagers\n    FROM Clients c\n    JOIN Projects p ON c.ClientID = p.ClientID\n    JOIN Engineers e ON p.ProjectManagerID = e.EngineerID\n    WHERE p.Status = 'В процессе'\n    GROUP BY c.ClientID, c.ClientName\n    HAVING COUNT(p.ProjectID) > 2 AND SUM(p.Budget) > 15000000\n)\nSELECT \n    ClientName,\n    ActiveProjectCount,\n    TotalBudget,\n    ROUND(AvgProjectDuration, 2) AS AvgProjectDurationDays,\n    ProjectManagers\nFROM ClientProjectStats\nORDER BY TotalBudget DESC\nLIMIT 3;",
            "gigachat_response": "WITH ActiveProjects AS (\n    SELECT \n        cl.ClientID,\n        cl.ClientName,\n        COUNT(pr.ProjectID) AS ActiveProjectCount,\n        SUM(pr.Budget) AS TotalProjectBudget,\n        AVG(DATEDIFF(pr.EndDate, pr.StartDate)) AS AverageProjectDurationDays,\n        GROUP_CONCAT(DISTINCT CONCAT(en.FirstName, ' ', en.LastName)) AS ProjectManagersList\n    FROM Clients cl\n    JOIN Projects pr ON cl.ClientID = pr.ClientID\n    JOIN Engineers en ON pr.ProjectManagerID = en.EngineerID\n    WHERE pr.Status IN ('В процессе', 'Планируется')\n    GROUP BY cl.ClientID, cl.ClientName\n    HAVING COUNT(pr.ProjectID) > 2 AND SUM(pr.Budget) > 15000000\n)\nSELECT *\nFROM ActiveProjects\nORDER BY TotalProjectBudget DESC\nLIMIT 3;",
            "gigachat_response_ru": "WITH ActiveProjects AS (\n    SELECT \n        cl.ClientID,\n        cl.ClientName,\n        COUNT(pr.ProjectID) AS ActiveProjectCount,\n        SUM(pr.Budget) AS TotalBudget,\n        AVG(DATEDIFF(pr.EndDate, pr.StartDate)) AS AverageProjectDurationDays,\n        GROUP_CONCAT(CONCAT(en.FirstName, ' ', en.LastName)) AS ProjectManagersList\n    FROM Clients cl\n    JOIN Projects pr ON cl.ClientID = pr.ClientID\n    JOIN Engineers en ON pr.ProjectManagerID = en.EngineerID\n    WHERE pr.Status IN ('В процессе', 'Планируется')\n    GROUP BY cl.ClientID, cl.ClientName\n    HAVING COUNT(pr.ProjectID) > 2 AND SUM(pr.Budget) > 15000000\n)\nSELECT *\nFROM ActiveProjects\nORDER BY TotalBudget DESC\nLIMIT 3;"
        },
        {
            "question": "Получить список отделов с наиболее эффективным использованием оборудования, где среднее время между обслуживанием минимально. В ответе будут показаны: название отдела, количество единиц оборудования, среднее время работы между обслуживанием в днях, список оборудования с производителями и общая стоимость обслуживания. Учитываются только отделы с двумя и более единицами оборудования. Результаты отсортированы по среднему времени между обслуживанием, показаны топ-3 записи.",
            "sql_query": "WITH EquipmentEfficiency AS (\n    SELECT \n        d.DepartmentID,\n        d.DepartmentName,\n        COUNT(DISTINCT e.EquipmentID) as EquipmentCount,\n        AVG(DATEDIFF(m2.MaintenanceDate, m1.MaintenanceDate)) as AvgDaysBetweenMaintenance,\n        GROUP_CONCAT(DISTINCT CONCAT(e.EquipmentName, ' (', e.Manufacturer, ')')) as EquipmentList,\n        SUM(m1.Cost) as TotalMaintenanceCost\n    FROM Departments d\n    JOIN Equipment e ON d.DepartmentID = e.DepartmentID\n    JOIN MaintenanceRecords m1 ON e.EquipmentID = m1.EquipmentID\n    LEFT JOIN MaintenanceRecords m2 ON e.EquipmentID = m2.EquipmentID\n    AND m2.MaintenanceDate > m1.MaintenanceDate\n    WHERE e.Status = 'В работе'\n    GROUP BY d.DepartmentID, d.DepartmentName\n    HAVING COUNT(DISTINCT e.EquipmentID) >= 2\n)\nSELECT \n    DepartmentName,\n    EquipmentCount,\n    ROUND(AvgDaysBetweenMaintenance, 1) as AvgDaysBetweenMaintenance,\n    EquipmentList,\n    ROUND(TotalMaintenanceCost, 2) as TotalMaintenanceCost\nFROM EquipmentEfficiency\nORDER BY AvgDaysBetweenMaintenance ASC\nLIMIT 3;",
            "gpt-4o_response": "WITH EquipmentMaintenanceStats AS (\n    SELECT \n        e.DepartmentID,\n        d.DepartmentName,\n        COUNT(e.EquipmentID) AS EquipmentCount,\n        AVG(DATEDIFF(m.NextScheduledDate, m.MaintenanceDate)) AS AvgDaysBetweenMaintenance,\n        GROUP_CONCAT(DISTINCT CONCAT(e.EquipmentName, ' (', e.Manufacturer, ')')) AS EquipmentList,\n        SUM(m.Cost) AS TotalMaintenanceCost\n    FROM Equipment e\n    JOIN MaintenanceRecords m ON e.EquipmentID = m.EquipmentID\n    JOIN Departments d ON e.DepartmentID = d.DepartmentID\n    GROUP BY e.DepartmentID, d.DepartmentName\n    HAVING COUNT(e.EquipmentID) >= 2\n)\nSELECT \n    DepartmentName,\n    EquipmentCount,\n    ROUND(AvgDaysBetweenMaintenance, 2) AS AvgDaysBetweenMaintenance,\n    EquipmentList,\n    ROUND(TotalMaintenanceCost, 2) AS TotalMaintenanceCost\nFROM EquipmentMaintenanceStats\nORDER BY AvgDaysBetweenMaintenance ASC\nLIMIT 3;",
            "gpt-4o_response_ru": "WITH EquipmentMaintenanceStats AS (\n    SELECT \n        e.DepartmentID,\n        d.DepartmentName,\n        COUNT(e.EquipmentID) AS EquipmentCount,\n        AVG(DATEDIFF(mr.MaintenanceDate, LAG(mr.MaintenanceDate) OVER (PARTITION BY mr.EquipmentID ORDER BY mr.MaintenanceDate))) AS AvgDaysBetweenMaintenance,\n        GROUP_CONCAT(DISTINCT CONCAT(e.EquipmentName, ' (', e.Manufacturer, ')')) AS EquipmentList,\n        SUM(mr.Cost) AS TotalMaintenanceCost\n    FROM Equipment e\n    JOIN MaintenanceRecords mr ON e.EquipmentID = mr.EquipmentID\n    JOIN Departments d ON e.DepartmentID = d.DepartmentID\n    GROUP BY e.DepartmentID, d.DepartmentName\n    HAVING COUNT(e.EquipmentID) >= 2\n)\nSELECT \n    DepartmentName,\n    EquipmentCount,\n    ROUND(AvgDaysBetweenMaintenance, 2) AS AvgDaysBetweenMaintenance,\n    EquipmentList,\n    ROUND(TotalMaintenanceCost, 2) AS TotalMaintenanceCost\nFROM EquipmentMaintenanceStats\nORDER BY AvgDaysBetweenMaintenance ASC\nLIMIT 3;",
            "google/gemini-2.0-flash-001_response": "WITH EquipmentMaintenance AS (\n    SELECT\n        e.DepartmentID,\n        d.DepartmentName,\n        e.EquipmentID,\n        e.EquipmentName,\n        e.Manufacturer,\n        mr.MaintenanceDate\n    FROM\n        Equipment e\n    JOIN\n        Departments d ON e.DepartmentID = d.DepartmentID\n    LEFT JOIN\n        MaintenanceRecords mr ON e.EquipmentID = mr.EquipmentID\n),\nMaintenanceIntervals AS (\n    SELECT\n        DepartmentID,\n        DepartmentName,\n        EquipmentID,\n        EquipmentName,\n        Manufacturer,\n        MaintenanceDate,\n        LAG(MaintenanceDate, 1, MaintenanceDate) OVER (PARTITION BY EquipmentID ORDER BY MaintenanceDate) AS PreviousMaintenanceDate\n    FROM\n        EquipmentMaintenance\n),\nIntervalDurations AS (\n    SELECT\n        DepartmentID,\n        DepartmentName,\n        EquipmentID,\n        EquipmentName,\n        Manufacturer,\n        MaintenanceDate,\n        PreviousMaintenanceDate,\n        DATEDIFF(MaintenanceDate, PreviousMaintenanceDate) AS MaintenanceInterval\n    FROM\n        MaintenanceIntervals\n),\nDepartmentEquipmentStats AS (\n    SELECT\n        DepartmentID,\n        DepartmentName,\n        COUNT(DISTINCT EquipmentID) AS EquipmentCount,\n        AVG(MaintenanceInterval) AS AvgMaintenanceInterval,\n        GROUP_CONCAT(DISTINCT CONCAT(EquipmentName, ' (', Manufacturer, ')')) AS EquipmentList\n    FROM\n        IntervalDurations\n    GROUP BY\n        DepartmentID,\n        DepartmentName\n    HAVING\n        COUNT(DISTINCT EquipmentID) >= 2\n),\nMaintenanceCosts AS (\n    SELECT\n        e.DepartmentID,\n        SUM(mr.Cost) AS TotalMaintenanceCost\n    FROM\n        Equipment e\n    JOIN\n        MaintenanceRecords mr ON e.EquipmentID = mr.EquipmentID\n    GROUP BY\n        e.DepartmentID\n)\nSELECT\n    des.DepartmentName,\n    des.EquipmentCount,\n    ROUND(des.AvgMaintenanceInterval, 2) AS AvgMaintenanceIntervalDays,\n    des.EquipmentList,\n    COALESCE(mc.TotalMaintenanceCost, 0) AS TotalMaintenanceCost\nFROM\n    DepartmentEquipmentStats des\nLEFT JOIN\n    MaintenanceCosts mc ON des.DepartmentID = mc.DepartmentID\nORDER BY\n    des.AvgMaintenanceInterval\nLIMIT 3;",
            "google/gemini-2.0-flash-001_response_ru": "WITH EquipmentMaintenance AS (\n    SELECT\n        e.DepartmentID,\n        d.DepartmentName,\n        e.EquipmentID,\n        e.EquipmentName,\n        e.Manufacturer,\n        mr.MaintenanceDate,\n        mr.Cost\n    FROM\n        Equipment e\n    JOIN\n        Departments d ON e.DepartmentID = d.DepartmentID\n    LEFT JOIN\n        MaintenanceRecords mr ON e.EquipmentID = mr.EquipmentID\n),\nMaintenanceIntervals AS (\n    SELECT\n        DepartmentID,\n        DepartmentName,\n        EquipmentID,\n        EquipmentName,\n        Manufacturer,\n        MaintenanceDate,\n        Cost,\n        LAG(MaintenanceDate, 1, MaintenanceDate) OVER (PARTITION BY EquipmentID ORDER BY MaintenanceDate) AS PreviousMaintenanceDate\n    FROM\n        EquipmentMaintenance\n),\nIntervalCalculations AS (\n    SELECT\n        DepartmentID,\n        DepartmentName,\n        EquipmentID,\n        EquipmentName,\n        Manufacturer,\n        MaintenanceDate,\n        Cost,\n        DATEDIFF(MaintenanceDate, PreviousMaintenanceDate) AS MaintenanceInterval\n    FROM\n        MaintenanceIntervals\n),\nDepartmentEquipmentStats AS (\n    SELECT\n        DepartmentID,\n        DepartmentName,\n        COUNT(DISTINCT EquipmentID) AS EquipmentCount,\n        AVG(MaintenanceInterval) AS AvgMaintenanceInterval,\n        SUM(Cost) AS TotalMaintenanceCost,\n        GROUP_CONCAT(DISTINCT CONCAT(EquipmentName, ' (', Manufacturer, ')')) AS EquipmentList\n    FROM\n        IntervalCalculations\n    GROUP BY\n        DepartmentID,\n        DepartmentName\n    HAVING\n        COUNT(DISTINCT EquipmentID) >= 2\n)\nSELECT\n    DepartmentName,\n    EquipmentCount,\n    ROUND(AvgMaintenanceInterval, 2) AS AvgMaintenanceInterval,\n    EquipmentList,\n    ROUND(TotalMaintenanceCost, 2) AS TotalMaintenanceCost\nFROM\n    DepartmentEquipmentStats\nORDER BY\n    AvgMaintenanceInterval ASC\nLIMIT 3;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH DepartmentEquipmentStats AS (\n    SELECT \n        d.DepartmentID,\n        d.DepartmentName,\n        COUNT(e.EquipmentID) as EquipmentCount,\n        AVG(DATEDIFF(mr.NextScheduledDate, mr.MaintenanceDate)) as AvgMaintenanceInterval,\n        GROUP_CONCAT(DISTINCT CONCAT(e.EquipmentName, ' (', e.Manufacturer, ')')) as EquipmentList,\n        SUM(mr.Cost) as TotalMaintenanceCost\n    FROM Departments d\n    JOIN Equipment e ON d.DepartmentID = e.DepartmentID\n    JOIN MaintenanceRecords mr ON e.EquipmentID = mr.EquipmentID\n    GROUP BY d.DepartmentID, d.DepartmentName\n    HAVING COUNT(e.EquipmentID) > 1\n)\nSELECT \n    DepartmentName,\n    EquipmentCount,\n    ROUND(AvgMaintenanceInterval, 2) as AvgMaintenanceInterval,\n    EquipmentList,\n    TotalMaintenanceCost\nFROM DepartmentEquipmentStats\nORDER BY AvgMaintenanceInterval ASC\nLIMIT 3;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH DepartmentEquipmentStats AS (\n    SELECT \n        d.DepartmentName,\n        COUNT(e.EquipmentID) as EquipmentCount,\n        AVG(DATEDIFF(mr.NextScheduledDate, mr.MaintenanceDate)) as AvgMaintenanceInterval,\n        GROUP_CONCAT(DISTINCT CONCAT(e.EquipmentName, ' (', e.Manufacturer, ')')) as EquipmentList,\n        SUM(mr.Cost) as TotalMaintenanceCost\n    FROM Departments d\n    JOIN Equipment e ON d.DepartmentID = e.DepartmentID\n    JOIN MaintenanceRecords mr ON e.EquipmentID = mr.EquipmentID\n    WHERE mr.Status = 'Выполнено'\n    GROUP BY d.DepartmentName\n    HAVING COUNT(e.EquipmentID) > 1\n)\nSELECT \n    DepartmentName,\n    EquipmentCount,\n    ROUND(AvgMaintenanceInterval, 2) as AvgMaintenanceInterval,\n    EquipmentList,\n    TotalMaintenanceCost\nFROM DepartmentEquipmentStats\nORDER BY AvgMaintenanceInterval\nLIMIT 3;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH DepartmentEquipmentStats AS (\n    SELECT \n        d.DepartmentID,\n        d.DepartmentName,\n        COUNT(e.EquipmentID) AS EquipmentCount,\n        AVG(DATEDIFF(mr.MaintenanceDate, LAG(mr.MaintenanceDate) OVER (PARTITION BY e.EquipmentID ORDER BY mr.MaintenanceDate))) AS AvgDaysBetweenMaintenance,\n        SUM(mr.Cost) AS TotalMaintenanceCost,\n        GROUP_CONCAT(DISTINCT CONCAT(e.EquipmentName, ' (', e.Manufacturer, ')') SEPARATOR ', ') AS EquipmentList\n    FROM Departments d\n    JOIN Equipment e ON d.DepartmentID = e.DepartmentID\n    JOIN MaintenanceRecords mr ON e.EquipmentID = mr.EquipmentID\n    GROUP BY d.DepartmentID, d.DepartmentName\n    HAVING COUNT(e.EquipmentID) >= 2\n)\nSELECT \n    DepartmentName,\n    EquipmentCount,\n    ROUND(AvgDaysBetweenMaintenance, 2) AS AvgDaysBetweenMaintenance,\n    EquipmentList,\n    TotalMaintenanceCost\nFROM DepartmentEquipmentStats\nWHERE AvgDaysBetweenMaintenance IS NOT NULL\nORDER BY AvgDaysBetweenMaintenance ASC\nLIMIT 3;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "WITH DepartmentEquipmentStats AS (\n    SELECT \n        d.DepartmentID,\n        d.DepartmentName,\n        COUNT(e.EquipmentID) AS EquipmentCount,\n        AVG(DATEDIFF(mr.MaintenanceDate, LAG(mr.MaintenanceDate) OVER (PARTITION BY e.EquipmentID ORDER BY mr.MaintenanceDate))) AS AvgDaysBetweenMaintenance,\n        SUM(mr.Cost) AS TotalMaintenanceCost,\n        GROUP_CONCAT(DISTINCT CONCAT(e.EquipmentName, ' (', e.Manufacturer, ')') SEPARATOR ', ') AS EquipmentList\n    FROM Departments d\n    JOIN Equipment e ON d.DepartmentID = e.DepartmentID\n    JOIN MaintenanceRecords mr ON e.EquipmentID = mr.EquipmentID\n    GROUP BY d.DepartmentID, d.DepartmentName\n    HAVING COUNT(e.EquipmentID) >= 2\n)\nSELECT \n    DepartmentName,\n    EquipmentCount,\n    ROUND(AvgDaysBetweenMaintenance, 2) AS AvgDaysBetweenMaintenance,\n    EquipmentList,\n    TotalMaintenanceCost\nFROM DepartmentEquipmentStats\nWHERE AvgDaysBetweenMaintenance IS NOT NULL\nORDER BY AvgDaysBetweenMaintenance ASC\nLIMIT 3;",
            "gigachat_response": "WITH EquipmentMaintenance AS (\n    SELECT \n        e.EquipmentID,\n        e.Manufacturer,\n        e.DepartmentID,\n        mr.MaintenanceDate,\n        LEAD(mr.MaintenanceDate) OVER(PARTITION BY e.EquipmentID ORDER BY mr.MaintenanceDate ASC) AS NextMaintenanceDate,\n        TIMESTAMPDIFF(DAY, mr.MaintenanceDate, LEAD(mr.MaintenanceDate) OVER(PARTITION BY e.EquipmentID ORDER BY mr.MaintenanceDate ASC)) AS DaysBetweenMaintenances,\n        mr.Cost\n    FROM Equipment e\n    INNER JOIN MaintenanceRecords mr ON e.EquipmentID = mr.EquipmentID\n),\nDepartmentMaintenanceSummary AS (\n    SELECT \n        em.DepartmentID,\n        d.DepartmentName,\n        COUNT(em.EquipmentID) AS EquipmentCount,\n        AVG(em.DaysBetweenMaintenances) AS AverageDaysBetweenMaintenances,\n        SUM(em.Cost) AS TotalMaintenanceCost,\n        GROUP_CONCAT(CONCAT('(',em.EquipmentID,')', '-', em.Manufacturer)) AS EquipmentList\n    FROM EquipmentMaintenance em\n    INNER JOIN Departments d ON em.DepartmentID = d.DepartmentID\n    GROUP BY em.DepartmentID, d.DepartmentName\n    HAVING COUNT(em.EquipmentID) >= 2 -- Only departments with at least two equipment units\n)\nSELECT \n    DepartmentName,\n    EquipmentCount,\n    ROUND(AverageDaysBetweenMaintenances, 2) AS AverageDaysBetweenMaintenances,\n    EquipmentList,\n    TotalMaintenanceCost\nFROM DepartmentMaintenanceSummary\nORDER BY AverageDaysBetweenMaintenances ASC\nLIMIT 3;",
            "gigachat_response_ru": "WITH EquipmentMaintenance AS (\n    SELECT \n        e.EquipmentID,\n        e.Manufacturer,\n        e.DepartmentID,\n        mr.MaintenanceDate,\n        LEAD(mr.MaintenanceDate) OVER(PARTITION BY e.EquipmentID ORDER BY mr.MaintenanceDate) AS NextMaintenanceDate,\n        TIMESTAMPDIFF(DAY, mr.MaintenanceDate, LEAD(mr.MaintenanceDate) OVER(PARTITION BY e.EquipmentID ORDER BY mr.MaintenanceDate)) AS DaysBetweenMaintenances,\n        mr.Cost\n    FROM Equipment e\n    INNER JOIN MaintenanceRecords mr ON e.EquipmentID = mr.EquipmentID\n),\nDepartmentMaintenanceSummary AS (\n    SELECT \n        em.DepartmentID,\n        d.DepartmentName,\n        COUNT(em.EquipmentID) AS EquipmentCount,\n        AVG(em.DaysBetweenMaintenances) AS AverageDaysBetweenMaintenances,\n        SUM(em.Cost) AS TotalMaintenanceCost,\n        GROUP_CONCAT(CONCAT('(',em.EquipmentID,')', ' Производитель:', em.Manufacturer)) AS EquipmentList\n    FROM EquipmentMaintenance em\n    INNER JOIN Departments d ON em.DepartmentID = d.DepartmentID\n    GROUP BY em.DepartmentID, d.DepartmentName\n    HAVING COUNT(em.EquipmentID) >= 2\n)\nSELECT *\nFROM DepartmentMaintenanceSummary\nORDER BY AverageDaysBetweenMaintenances ASC\nLIMIT 3;"
        },
        {
            "question": "Получить список оборудования с наибольшим количеством инцидентов безопасности и высокой стоимостью обслуживания. В ответе будут показаны: название оборудования, производитель, количество инцидентов, общая стоимость обслуживания, список ответственных инженеров и статус гарантии. Учитывается только оборудование в статусе 'В работе' с инцидентами высокого уровня серьезности и стоимостью обслуживания более 2000 рублей. Результаты отсортированы по количеству инцидентов и стоимости обслуживания, показаны топ-7 записей.",
            "sql_query": "WITH EquipmentIncidents AS (\n    SELECT \n        e.EquipmentID,\n        e.EquipmentName,\n        e.Manufacturer,\n        COUNT(DISTINCT si.IncidentID) as IncidentCount,\n        SUM(m.Cost) as MaintenanceCost,\n        GROUP_CONCAT(DISTINCT CONCAT(eng.FirstName, ' ', eng.LastName)) as ResponsibleEngineers,\n        CASE \n            WHEN e.WarrantyExpiryDate > CURDATE() THEN 'Действует'\n            ELSE 'Истекла'\n        END as WarrantyStatus\n    FROM Equipment e\n    JOIN SafetyIncidents si ON e.EquipmentID = si.EquipmentID\n    JOIN MaintenanceRecords m ON e.EquipmentID = m.EquipmentID\n    JOIN Engineers eng ON m.EngineerID = eng.EngineerID\n    WHERE si.SeverityLevel = 'Высокий'\n    AND e.Status = 'В работе'\n    GROUP BY e.EquipmentID, e.EquipmentName, e.Manufacturer, e.WarrantyExpiryDate\n    HAVING SUM(m.Cost) > 2000\n)\nSELECT \n    EquipmentName,\n    Manufacturer,\n    IncidentCount,\n    ROUND(MaintenanceCost, 2) as MaintenanceCost,\n    ResponsibleEngineers,\n    WarrantyStatus\nFROM EquipmentIncidents\nORDER BY IncidentCount DESC, MaintenanceCost DESC\nLIMIT 7;",
            "gpt-4o_response": "WITH EquipmentIncidentMaintenance AS (\n    SELECT \n        e.EquipmentID,\n        e.EquipmentName,\n        e.Manufacturer,\n        COUNT(si.IncidentID) AS IncidentCount,\n        SUM(mr.Cost) AS TotalMaintenanceCost,\n        GROUP_CONCAT(DISTINCT CONCAT(en.FirstName, ' ', en.LastName)) AS ResponsibleEngineers,\n        CASE \n            WHEN e.WarrantyExpiryDate > CURDATE() THEN 'В гарантии'\n            ELSE 'Не в гарантии'\n        END AS WarrantyStatus\n    FROM Equipment e\n    JOIN SafetyIncidents si ON e.EquipmentID = si.EquipmentID\n    JOIN MaintenanceRecords mr ON e.EquipmentID = mr.EquipmentID\n    JOIN Engineers en ON mr.EngineerID = en.EngineerID\n    WHERE e.Status = 'В работе'\n    AND si.SeverityLevel = 'Высокий'\n    AND mr.Cost > 2000\n    GROUP BY e.EquipmentID, e.EquipmentName, e.Manufacturer\n)\nSELECT \n    EquipmentName,\n    Manufacturer,\n    IncidentCount,\n    ROUND(TotalMaintenanceCost, 2) AS TotalMaintenanceCost,\n    ResponsibleEngineers,\n    WarrantyStatus\nFROM EquipmentIncidentMaintenance\nORDER BY IncidentCount DESC, TotalMaintenanceCost DESC\nLIMIT 7;",
            "gpt-4o_response_ru": "WITH EquipmentIncidentStats AS (\n    SELECT \n        e.EquipmentID,\n        e.EquipmentName,\n        e.Manufacturer,\n        COUNT(si.IncidentID) AS IncidentCount,\n        SUM(mr.Cost) AS TotalMaintenanceCost,\n        GROUP_CONCAT(DISTINCT CONCAT(en.FirstName, ' ', en.LastName)) AS ResponsibleEngineers,\n        e.WarrantyExpiryDate\n    FROM Equipment e\n    JOIN SafetyIncidents si ON e.EquipmentID = si.EquipmentID\n    JOIN MaintenanceRecords mr ON e.EquipmentID = mr.EquipmentID\n    JOIN Engineers en ON mr.EngineerID = en.EngineerID\n    WHERE e.Status = 'В работе'\n    AND si.SeverityLevel = 'Высокий'\n    AND mr.Cost > 2000\n    GROUP BY e.EquipmentID, e.EquipmentName, e.Manufacturer, e.WarrantyExpiryDate\n)\nSELECT \n    EquipmentName,\n    Manufacturer,\n    IncidentCount,\n    ROUND(TotalMaintenanceCost, 2) AS TotalMaintenanceCost,\n    ResponsibleEngineers,\n    CASE \n        WHEN WarrantyExpiryDate > CURDATE() THEN 'Действует'\n        ELSE 'Истекла'\n    END AS WarrantyStatus\nFROM EquipmentIncidentStats\nORDER BY IncidentCount DESC, TotalMaintenanceCost DESC\nLIMIT 7;",
            "google/gemini-2.0-flash-001_response": "WITH EquipmentIncidentCost AS (\n    SELECT\n        e.EquipmentID,\n        e.EquipmentName,\n        e.Manufacturer,\n        COUNT(si.IncidentID) AS IncidentCount,\n        SUM(mr.Cost) AS TotalMaintenanceCost,\n        GROUP_CONCAT(DISTINCT CONCAT(eng.FirstName, ' ', eng.LastName)) AS ResponsibleEngineers,\n        CASE\n            WHEN e.WarrantyExpiryDate >= CURDATE() THEN 'Действует'\n            ELSE 'Истек'\n        END AS WarrantyStatus\n    FROM Equipment e\n    JOIN SafetyIncidents si ON e.EquipmentID = si.EquipmentID\n    JOIN MaintenanceRecords mr ON e.EquipmentID = mr.EquipmentID\n    JOIN Engineers eng ON mr.EngineerID = eng.EngineerID\n    WHERE e.Status = 'В работе'\n    AND si.SeverityLevel = 'Высокий'\n    AND mr.Cost > 2000\n    GROUP BY e.EquipmentID, e.EquipmentName, e.Manufacturer, e.WarrantyExpiryDate\n)\nSELECT\n    EquipmentName,\n    Manufacturer,\n    IncidentCount,\n    ROUND(TotalMaintenanceCost, 2) AS TotalMaintenanceCost,\n    ResponsibleEngineers,\n    WarrantyStatus\nFROM EquipmentIncidentCost\nORDER BY IncidentCount DESC, TotalMaintenanceCost DESC\nLIMIT 7;",
            "google/gemini-2.0-flash-001_response_ru": "WITH EquipmentIncidentStats AS (\n    SELECT\n        e.EquipmentID,\n        e.EquipmentName,\n        e.Manufacturer,\n        COUNT(si.IncidentID) AS IncidentCount,\n        SUM(mr.Cost) AS TotalMaintenanceCost,\n        GROUP_CONCAT(DISTINCT CONCAT(eng.FirstName, ' ', eng.LastName)) AS ResponsibleEngineers\n    FROM Equipment e\n    JOIN SafetyIncidents si ON e.EquipmentID = si.EquipmentID\n    JOIN MaintenanceRecords mr ON e.EquipmentID = mr.EquipmentID\n    JOIN Engineers eng ON mr.EngineerID = eng.EngineerID\n    WHERE e.Status = 'В работе'\n    AND si.SeverityLevel = 'Высокий'\n    AND mr.Cost > 2000\n    GROUP BY e.EquipmentID, e.EquipmentName, e.Manufacturer\n),\nWarrantyStatus AS (\n    SELECT\n        EquipmentID,\n        CASE\n            WHEN WarrantyExpiryDate >= CURDATE() THEN 'Действует'\n            ELSE 'Истек'\n        END AS WarrantyStatus\n    FROM Equipment\n)\nSELECT\n    eis.EquipmentName,\n    eis.Manufacturer,\n    eis.IncidentCount,\n    ROUND(eis.TotalMaintenanceCost, 2) AS TotalMaintenanceCost,\n    eis.ResponsibleEngineers,\n    ws.WarrantyStatus\nFROM EquipmentIncidentStats eis\nJOIN WarrantyStatus ws ON eis.EquipmentID = ws.EquipmentID\nORDER BY eis.IncidentCount DESC, eis.TotalMaintenanceCost DESC\nLIMIT 7;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH EquipmentIncidentStats AS (\n    SELECT \n        e.EquipmentID,\n        e.EquipmentName,\n        e.Manufacturer,\n        COUNT(si.IncidentID) as IncidentCount,\n        SUM(mr.Cost) as TotalMaintenanceCost,\n        GROUP_CONCAT(DISTINCT e2.FirstName, ' ', e2.LastName) as ResponsibleEngineers,\n        e.WarrantyExpiryDate,\n        e.Status\n    FROM Equipment e\n    JOIN SafetyIncidents si ON e.EquipmentID = si.EquipmentID\n    JOIN MaintenanceRecords mr ON e.EquipmentID = mr.EquipmentID\n    JOIN Engineers e2 ON mr.EngineerID = e2.EngineerID\n    WHERE e.Status = 'В работе'\n    AND si.SeverityLevel = 'Высокий'\n    AND mr.Cost > 2000\n    GROUP BY e.EquipmentID, e.EquipmentName, e.Manufacturer, e.WarrantyExpiryDate, e.Status\n)\nSELECT \n    EquipmentName,\n    Manufacturer,\n    IncidentCount,\n    ROUND(TotalMaintenanceCost, 2) as TotalMaintenanceCost,\n    ResponsibleEngineers,\n    CASE \n        WHEN WarrantyExpiryDate > CURDATE() THEN 'Активна'\n        ELSE 'Истекла'\n    END as WarrantyStatus\nFROM EquipmentIncidentStats\nORDER BY IncidentCount DESC, TotalMaintenanceCost DESC\nLIMIT 7;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH EquipmentIncidentStats AS (\n    SELECT \n        e.EquipmentID,\n        e.EquipmentName,\n        e.Manufacturer,\n        COUNT(si.IncidentID) as IncidentCount,\n        SUM(mr.Cost) as TotalMaintenanceCost,\n        GROUP_CONCAT(DISTINCT CONCAT(eng.FirstName, ' ', eng.LastName)) as ResponsibleEngineers,\n        e.WarrantyExpiryDate,\n        e.Status\n    FROM Equipment e\n    LEFT JOIN SafetyIncidents si ON e.EquipmentID = si.EquipmentID\n    LEFT JOIN MaintenanceRecords mr ON e.EquipmentID = mr.EquipmentID\n    LEFT JOIN Engineers eng ON si.EngineerID = eng.EngineerID\n    WHERE e.Status = 'В работе'\n    AND si.SeverityLevel = 'Высокий'\n    AND mr.Cost > 2000\n    GROUP BY e.EquipmentID, e.EquipmentName, e.Manufacturer, e.WarrantyExpiryDate, e.Status\n)\nSELECT \n    EquipmentName,\n    Manufacturer,\n    IncidentCount,\n    ROUND(TotalMaintenanceCost, 2) as TotalMaintenanceCost,\n    ResponsibleEngineers,\n    WarrantyExpiryDate\nFROM EquipmentIncidentStats\nORDER BY IncidentCount DESC, TotalMaintenanceCost DESC\nLIMIT 7;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH EquipmentIncidents AS (\n    SELECT \n        e.EquipmentID,\n        e.EquipmentName,\n        e.Manufacturer,\n        e.Status,\n        e.WarrantyExpiryDate,\n        COUNT(si.IncidentID) AS IncidentCount,\n        SUM(mr.Cost) AS TotalMaintenanceCost,\n        GROUP_CONCAT(DISTINCT CONCAT(eng.FirstName, ' ', eng.LastName)) AS ResponsibleEngineers\n    FROM Equipment e\n    JOIN SafetyIncidents si ON e.EquipmentID = si.EquipmentID\n    JOIN MaintenanceRecords mr ON e.EquipmentID = mr.EquipmentID\n    JOIN Engineers eng ON mr.EngineerID = eng.EngineerID\n    WHERE e.Status = 'В работе'\n    AND si.SeverityLevel = 'Высокий'\n    AND mr.Cost > 2000\n    GROUP BY e.EquipmentID, e.EquipmentName, e.Manufacturer, e.Status, e.WarrantyExpiryDate\n    HAVING COUNT(si.IncidentID) > 0\n)\nSELECT \n    EquipmentName,\n    Manufacturer,\n    IncidentCount,\n    TotalMaintenanceCost,\n    ResponsibleEngineers,\n    CASE \n        WHEN WarrantyExpiryDate >= CURRENT_DATE THEN 'Действует'\n        ELSE 'Истек'\n    END AS WarrantyStatus\nFROM EquipmentIncidents\nORDER BY IncidentCount DESC, TotalMaintenanceCost DESC\nLIMIT 7;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    e.EquipmentName,\n    e.Manufacturer,\n    COUNT(si.IncidentID) AS IncidentCount,\n    SUM(mr.Cost) AS TotalMaintenanceCost,\n    GROUP_CONCAT(DISTINCT CONCAT(eng.FirstName, ' ', eng.LastName)) AS ResponsibleEngineers,\n    CASE \n        WHEN e.WarrantyExpiryDate >= CURDATE() THEN 'Действует' \n        ELSE 'Истек' \n    END AS WarrantyStatus\nFROM Equipment e\nJOIN SafetyIncidents si ON e.EquipmentID = si.EquipmentID\nJOIN MaintenanceRecords mr ON e.EquipmentID = mr.EquipmentID\nJOIN Engineers eng ON mr.EngineerID = eng.EngineerID\nWHERE e.Status = 'В работе'\nAND si.SeverityLevel = 'Высокий'\nAND mr.Cost > 2000\nGROUP BY e.EquipmentID, e.EquipmentName, e.Manufacturer, e.WarrantyExpiryDate\nORDER BY IncidentCount DESC, TotalMaintenanceCost DESC\nLIMIT 7;",
            "gigachat_response": "SELECT \n    eq.EquipmentName,\n    eq.Manufacturer,\n    COUNT(si.IncidentID) AS IncidentCount,\n    SUM(mr.Cost) AS TotalMaintenanceCost,\n    GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS ResponsibleEngineers,\n    CASE WHEN eq.WarrantyExpiryDate >= CURRENT_DATE THEN 'Активна' ELSE 'Просрочена' END AS WarrantyStatus\nFROM Equipment eq\nJOIN MaintenanceRecords mr ON eq.EquipmentID = mr.EquipmentID\nLEFT JOIN SafetyIncidents si ON eq.EquipmentID = si.EquipmentID\nLEFT JOIN Engineers e ON mr.EngineerID = e.EngineerID\nWHERE eq.Status = 'В работе'\nAND si.SeverityLevel = 'Высокий'\nGROUP BY eq.EquipmentID, eq.EquipmentName, eq.Manufacturer, eq.WarrantyExpiryDate\nHAVING COUNT(si.IncidentID) > 0 AND SUM(mr.Cost) > 2000\nORDER BY IncidentCount DESC, TotalMaintenanceCost DESC\nLIMIT 7;",
            "gigachat_response_ru": "SELECT \n    eq.EquipmentName,\n    eq.Manufacturer,\n    COUNT(si.IncidentID) AS IncidentCount,\n    SUM(mr.Cost) AS TotalMaintenanceCost,\n    GROUP_CONCAT(CONCAT(e.FirstName, ' ', e.LastName)) AS ResponsibleEngineers,\n    CASE WHEN eq.WarrantyExpiryDate >= CURRENT_DATE THEN 'Активна' ELSE 'Просрочена' END AS WarrantyStatus\nFROM Equipment eq\nLEFT JOIN SafetyIncidents si ON eq.EquipmentID = si.EquipmentID\nLEFT JOIN MaintenanceRecords mr ON eq.EquipmentID = mr.EquipmentID\nLEFT JOIN Engineers e ON mr.EngineerID = e.EngineerID\nWHERE eq.Status = 'В работе'\nAND si.SeverityLevel = 'Высокий'\nGROUP BY eq.EquipmentID, eq.EquipmentName, eq.Manufacturer, eq.WarrantyExpiryDate\nHAVING IncidentCount > 0 AND TotalMaintenanceCost > 2000\nORDER BY IncidentCount DESC, TotalMaintenanceCost DESC\nLIMIT 7;"
        },
        {
            "question": "Получить список проектов с наибольшим количеством документов проектирования в статусе 'Черновик' и 'На проверке'. В ответе будут показаны: название проекта, количество черновиков, количество документов на проверке, список авторов и общий бюджет проекта. Учитываются только проекты с хотя бы одним черновиком. Результаты отсортированы по общему количеству документов, показаны топ-4 записи.",
            "sql_query": "WITH ProjectDocumentStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        SUM(CASE WHEN d.Status = 'Черновик' THEN 1 ELSE 0 END) as DraftCount,\n        SUM(CASE WHEN d.Status = 'На проверке' THEN 1 ELSE 0 END) as ReviewCount,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as Authors,\n        p.Budget as ProjectBudget\n    FROM Projects p\n    JOIN DesignDocuments d ON p.ProjectID = d.ProjectID\n    JOIN Engineers e ON d.AuthorID = e.EngineerID\n    WHERE d.Status IN ('Черновик', 'На проверке')\n    GROUP BY p.ProjectID, p.ProjectName, p.Budget\n    HAVING SUM(CASE WHEN d.Status = 'Черновик' THEN 1 ELSE 0 END) > 0\n)\nSELECT \n    ProjectName,\n    DraftCount,\n    ReviewCount,\n    Authors,\n    ROUND(ProjectBudget, 2) as ProjectBudget\nFROM ProjectDocumentStats\nORDER BY (DraftCount + ReviewCount) DESC\nLIMIT 4;",
            "gpt-4o_response": "WITH ProjectDocumentStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        COUNT(CASE WHEN dd.Status = 'Черновик' THEN 1 END) AS DraftCount,\n        COUNT(CASE WHEN dd.Status = 'На проверке' THEN 1 END) AS ReviewCount,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS Authors,\n        p.Budget AS ProjectBudget\n    FROM Projects p\n    JOIN DesignDocuments dd ON p.ProjectID = dd.ProjectID\n    JOIN Engineers e ON dd.AuthorID = e.EngineerID\n    GROUP BY p.ProjectID, p.ProjectName, p.Budget\n    HAVING DraftCount > 0\n)\nSELECT \n    ProjectName,\n    DraftCount,\n    ReviewCount,\n    Authors,\n    ProjectBudget\nFROM ProjectDocumentStats\nORDER BY (DraftCount + ReviewCount) DESC\nLIMIT 4;",
            "gpt-4o_response_ru": "WITH ProjectDocumentStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        COUNT(CASE WHEN dd.Status = 'Черновик' THEN 1 END) AS DraftCount,\n        COUNT(CASE WHEN dd.Status = 'На проверке' THEN 1 END) AS ReviewCount,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS Authors,\n        p.Budget AS ProjectBudget\n    FROM Projects p\n    JOIN DesignDocuments dd ON p.ProjectID = dd.ProjectID\n    JOIN Engineers e ON dd.AuthorID = e.EngineerID\n    WHERE dd.Status IN ('Черновик', 'На проверке')\n    GROUP BY p.ProjectID, p.ProjectName, p.Budget\n    HAVING DraftCount > 0\n)\nSELECT \n    ProjectName,\n    DraftCount,\n    ReviewCount,\n    Authors,\n    ProjectBudget\nFROM ProjectDocumentStats\nORDER BY (DraftCount + ReviewCount) DESC\nLIMIT 4;",
            "google/gemini-2.0-flash-001_response": "WITH ProjectDocumentCounts AS (\n    SELECT\n        p.ProjectID,\n        p.ProjectName,\n        SUM(CASE WHEN dd.Status = 'Черновик' THEN 1 ELSE 0 END) AS DraftCount,\n        SUM(CASE WHEN dd.Status = 'На проверке' THEN 1 ELSE 0 END) AS ReviewCount,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS Authors,\n        p.Budget AS ProjectBudget\n    FROM Projects p\n    JOIN DesignDocuments dd ON p.ProjectID = dd.ProjectID\n    JOIN Engineers e ON dd.AuthorID = e.EngineerID\n    GROUP BY p.ProjectID, p.ProjectName, p.Budget\n    HAVING SUM(CASE WHEN dd.Status = 'Черновик' THEN 1 ELSE 0 END) > 0\n)\nSELECT\n    ProjectName,\n    DraftCount,\n    ReviewCount,\n    Authors,\n    ProjectBudget\nFROM ProjectDocumentCounts\nORDER BY (DraftCount + ReviewCount) DESC\nLIMIT 4;",
            "google/gemini-2.0-flash-001_response_ru": "WITH ProjectDocumentCounts AS (\n    SELECT\n        p.ProjectID,\n        p.ProjectName,\n        SUM(CASE WHEN dd.Status = 'Черновик' THEN 1 ELSE 0 END) AS DraftCount,\n        SUM(CASE WHEN dd.Status = 'На проверке' THEN 1 ELSE 0 END) AS ReviewCount,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS Authors,\n        p.Budget AS ProjectBudget\n    FROM Projects p\n    JOIN DesignDocuments dd ON p.ProjectID = dd.ProjectID\n    JOIN Engineers e ON dd.AuthorID = e.EngineerID\n    WHERE dd.Status IN ('Черновик', 'На проверке')\n    GROUP BY p.ProjectID, p.ProjectName, p.Budget\n    HAVING SUM(CASE WHEN dd.Status = 'Черновик' THEN 1 ELSE 0 END) > 0\n)\nSELECT\n    ProjectName,\n    DraftCount,\n    ReviewCount,\n    Authors,\n    ProjectBudget\nFROM ProjectDocumentCounts\nORDER BY (DraftCount + ReviewCount) DESC\nLIMIT 4;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH ProjectDocumentStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        SUM(CASE WHEN dd.Status = 'Черновик' THEN 1 ELSE 0 END) as DraftCount,\n        SUM(CASE WHEN dd.Status = 'На проверке' THEN 1 ELSE 0 END) as ReviewCount,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as Authors,\n        p.Budget as ProjectBudget\n    FROM Projects p\n    JOIN DesignDocuments dd ON p.ProjectID = dd.ProjectID\n    JOIN Engineers e ON dd.AuthorID = e.EngineerID\n    GROUP BY p.ProjectID, p.ProjectName, p.Budget\n    HAVING SUM(CASE WHEN dd.Status = 'Черновик' THEN 1 ELSE 0 END) > 0\n)\nSELECT \n    ProjectName,\n    DraftCount,\n    ReviewCount,\n    Authors,\n    ProjectBudget\nFROM ProjectDocumentStats\nORDER BY (DraftCount + ReviewCount) DESC\nLIMIT 4;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH ProjectDocumentStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        COUNT(CASE WHEN dd.Status = 'Черновик' THEN dd.DocumentID END) as DraftCount,\n        COUNT(CASE WHEN dd.Status = 'На проверке' THEN dd.DocumentID END) as ReviewCount,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as Authors,\n        p.Budget as ProjectBudget\n    FROM Projects p\n    JOIN DesignDocuments dd ON p.ProjectID = dd.ProjectID\n    JOIN Engineers e ON dd.AuthorID = e.EngineerID\n    GROUP BY p.ProjectID, p.ProjectName, p.Budget\n    HAVING COUNT(CASE WHEN dd.Status = 'Черновик' THEN dd.DocumentID END) > 0\n)\nSELECT \n    ProjectName,\n    DraftCount,\n    ReviewCount,\n    Authors,\n    ProjectBudget,\n    DraftCount + ReviewCount as TotalDocuments\nFROM ProjectDocumentStats\nORDER BY TotalDocuments DESC\nLIMIT 4;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH ProjectDocumentStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        SUM(CASE WHEN dd.Status = 'Черновик' THEN 1 ELSE 0 END) AS DraftCount,\n        SUM(CASE WHEN dd.Status = 'На проверке' THEN 1 ELSE 0 END) AS ReviewCount,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS Authors,\n        p.Budget AS ProjectBudget\n    FROM Projects p\n    JOIN DesignDocuments dd ON p.ProjectID = dd.ProjectID\n    JOIN Engineers e ON dd.AuthorID = e.EngineerID\n    WHERE dd.Status IN ('Черновик', 'На проверке')\n    GROUP BY p.ProjectID, p.ProjectName, p.Budget\n    HAVING SUM(CASE WHEN dd.Status = 'Черновик' THEN 1 ELSE 0 END) > 0\n)\nSELECT \n    ProjectName,\n    DraftCount,\n    ReviewCount,\n    Authors,\n    ProjectBudget\nFROM ProjectDocumentStats\nORDER BY (DraftCount + ReviewCount) DESC\nLIMIT 4;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "WITH ProjectDocumentStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        p.Budget,\n        SUM(CASE WHEN dd.Status = 'Черновик' THEN 1 ELSE 0 END) AS DraftCount,\n        SUM(CASE WHEN dd.Status = 'На проверке' THEN 1 ELSE 0 END) AS ReviewCount,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS Authors\n    FROM Projects p\n    JOIN DesignDocuments dd ON p.ProjectID = dd.ProjectID\n    JOIN Engineers e ON dd.AuthorID = e.EngineerID\n    WHERE dd.Status IN ('Черновик', 'На проверке')\n    GROUP BY p.ProjectID, p.ProjectName, p.Budget\n    HAVING SUM(CASE WHEN dd.Status = 'Черновик' THEN 1 ELSE 0 END) > 0\n)\nSELECT \n    ProjectName,\n    DraftCount,\n    ReviewCount,\n    Authors,\n    Budget,\n    (DraftCount + ReviewCount) AS TotalDocuments\nFROM ProjectDocumentStats\nORDER BY TotalDocuments DESC\nLIMIT 4;",
            "gigachat_response": "WITH DraftAndReviewDocs AS (\n    SELECT \n        dd.DocumentID,\n        dd.ProjectID,\n        CASE WHEN dd.Status = 'Черновик' THEN 1 ELSE 0 END AS IsDraft,\n        CASE WHEN dd.Status = 'На проверке' THEN 1 ELSE 0 END AS InReview\n    FROM DesignDocuments dd\n    WHERE dd.Status IN ('Черновик', 'На проверке')\n),\nProjectDocCounts AS (\n    SELECT \n        pd.ProjectID,\n        p.ProjectName,\n        SUM(pd.IsDraft) AS DraftCount,\n        SUM(pd.InReview) AS ReviewCount,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS AuthorsList,\n        b.TotalBudget\n    FROM DraftAndReviewDocs pd\n    INNER JOIN Projects p ON pd.ProjectID = p.ProjectID\n    INNER JOIN DesignDocuments dd ON pd.DocumentID = dd.DocumentID\n    INNER JOIN Engineers e ON dd.AuthorID = e.EngineerID\n    INNER JOIN Budgets b ON p.ProjectID = b.ProjectID\n    GROUP BY pd.ProjectID, p.ProjectName, b.TotalBudget\n    HAVING SUM(pd.IsDraft) >= 1\n)\nSELECT *\nFROM ProjectDocCounts\nORDER BY DraftCount + ReviewCount DESC\nLIMIT 4;",
            "gigachat_response_ru": "SELECT \n    pr.ProjectName,\n    COUNT(CASE WHEN dd.Status = 'Черновик' THEN 1 END) AS DraftCount,\n    COUNT(CASE WHEN dd.Status = 'На проверке' THEN 1 END) AS ReviewCount,\n    GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS AuthorsList,\n    b.TotalBudget\nFROM Projects pr\nLEFT JOIN DesignDocuments dd ON pr.ProjectID = dd.ProjectID\nLEFT JOIN Engineers e ON dd.AuthorID = e.EngineerID\nLEFT JOIN Budgets b ON pr.ProjectID = b.ProjectID\nWHERE dd.Status IN ('Черновик', 'На проверке')\nGROUP BY pr.ProjectID, pr.ProjectName, b.TotalBudget\nHAVING DraftCount >= 1\nORDER BY DraftCount + ReviewCount DESC\nLIMIT 4;"
        },
        {
            "question": "Получить список инженеров, работающих над проектами с бюджетом более 5 миллионов рублей и имеющих сертификаты уровня 'Продвинутый'. В ответе будут показаны: имя инженера, должность, количество проектов, список сертификатов и общий бюджет проектов. Учитываются только действующие сертификаты. Результаты отсортированы по общему бюджету проектов, показаны топ-5 записей.",
            "sql_query": "WITH EngineerProjectStats AS (\n    SELECT \n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', e.LastName) as EngineerName,\n        e.Position,\n        COUNT(DISTINCT p.ProjectID) as ProjectCount,\n        GROUP_CONCAT(DISTINCT c.CertificationName) as Certifications,\n        SUM(p.Budget) as TotalBudget\n    FROM Engineers e\n    JOIN Projects p ON p.ProjectManagerID = e.EngineerID\n    JOIN Certifications c ON c.EngineerID = e.EngineerID\n    WHERE p.Budget > 5000000\n    AND c.CertificationLevel = 'Продвинутый'\n    AND c.Status = 'Действителен'\n    GROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position\n)\nSELECT \n    EngineerName,\n    Position,\n    ProjectCount,\n    Certifications,\n    ROUND(TotalBudget, 2) as TotalBudget\nFROM EngineerProjectStats\nORDER BY TotalBudget DESC\nLIMIT 5;",
            "gpt-4o_response": "WITH EngineerProjectStats AS (\n    SELECT \n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', e.LastName) as EngineerName,\n        e.Position,\n        COUNT(DISTINCT p.ProjectID) as ProjectCount,\n        GROUP_CONCAT(DISTINCT c.CertificationName) as Certifications,\n        SUM(p.Budget) as TotalProjectBudget\n    FROM Engineers e\n    JOIN Projects p ON e.EngineerID = p.ProjectManagerID\n    JOIN Certifications c ON c.EngineerID = e.EngineerID\n    WHERE p.Budget > 5000000\n    AND c.CertificationLevel = 'Продвинутый'\n    AND c.Status = 'Действителен'\n    GROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position\n)\nSELECT \n    EngineerName,\n    Position,\n    ProjectCount,\n    Certifications,\n    ROUND(TotalProjectBudget, 2) as TotalProjectBudget\nFROM EngineerProjectStats\nORDER BY TotalProjectBudget DESC\nLIMIT 5;",
            "gpt-4o_response_ru": "WITH EngineerProjectStats AS (\n    SELECT \n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', e.LastName) AS EngineerName,\n        e.Position,\n        COUNT(DISTINCT p.ProjectID) AS ProjectCount,\n        GROUP_CONCAT(DISTINCT c.CertificationName) AS Certifications,\n        SUM(p.Budget) AS TotalProjectBudget\n    FROM Engineers e\n    JOIN Projects p ON e.EngineerID = p.ProjectManagerID\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE p.Budget > 5000000\n    AND c.CertificationLevel = 'Продвинутый'\n    AND c.Status = 'Действителен'\n    GROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position\n)\nSELECT \n    EngineerName,\n    Position,\n    ProjectCount,\n    Certifications,\n    TotalProjectBudget\nFROM EngineerProjectStats\nORDER BY TotalProjectBudget DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response": "WITH EngineerProjectCertifications AS (\n    SELECT \n        e.EngineerID,\n        e.FirstName,\n        e.LastName,\n        e.Position,\n        COUNT(DISTINCT p.ProjectID) AS ProjectCount,\n        SUM(p.Budget) AS TotalProjectBudget,\n        GROUP_CONCAT(DISTINCT c.CertificationName) AS CertificationList\n    FROM Engineers e\n    JOIN Projects p ON e.EngineerID = p.ProjectManagerID\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE p.Budget > 5000000\n    AND c.CertificationLevel = 'Продвинутый'\n    AND c.Status = 'Действителен'\n    GROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position\n)\nSELECT \n    FirstName,\n    LastName,\n    Position,\n    ProjectCount,\n    CertificationList,\n    TotalProjectBudget\nFROM EngineerProjectCertifications\nORDER BY TotalProjectBudget DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response_ru": "WITH EngineerProjectCertStats AS (\n    SELECT \n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', e.LastName) as EngineerName,\n        e.Position,\n        COUNT(DISTINCT p.ProjectID) as ProjectCount,\n        SUM(p.Budget) as TotalProjectBudget,\n        GROUP_CONCAT(DISTINCT c.CertificationName) as Certifications\n    FROM Engineers e\n    JOIN Projects p ON p.ProjectManagerID = e.EngineerID\n    JOIN Certifications c ON c.EngineerID = e.EngineerID\n    WHERE p.Budget > 5000000\n    AND c.CertificationLevel = 'Продвинутый'\n    AND c.Status = 'Действителен'\n    GROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position\n)\nSELECT \n    EngineerName,\n    Position,\n    ProjectCount,\n    Certifications,\n    ROUND(TotalProjectBudget, 2) as TotalProjectBudget\nFROM EngineerProjectCertStats\nORDER BY TotalProjectBudget DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH EngineerProjectStats AS (\n    SELECT \n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', e.LastName) as EngineerName,\n        e.Position,\n        COUNT(DISTINCT p.ProjectID) as ProjectCount,\n        SUM(p.Budget) as TotalBudget,\n        GROUP_CONCAT(DISTINCT c.CertificationName) as Certifications\n    FROM Engineers e\n    JOIN Projects p ON e.EngineerID = p.ProjectManagerID\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE p.Budget > 5000000\n    AND c.CertificationLevel = 'Продвинутый'\n    AND c.Status = 'Действителен'\n    GROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position\n)\nSELECT \n    EngineerName,\n    Position,\n    ProjectCount,\n    Certifications,\n    TotalBudget\nFROM EngineerProjectStats\nORDER BY TotalBudget DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH EngineerProjectStats AS (\n    SELECT \n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', e.LastName) as EngineerName,\n        e.Position,\n        COUNT(DISTINCT p.ProjectID) as ProjectCount,\n        SUM(p.Budget) as TotalBudget,\n        GROUP_CONCAT(DISTINCT c.CertificationName) as Certifications\n    FROM Engineers e\n    JOIN Projects p ON e.EngineerID = p.ProjectManagerID\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE p.Budget > 5000000\n    AND c.CertificationLevel = 'Продвинутый'\n    AND c.Status = 'Действителен'\n    GROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position\n)\nSELECT \n    EngineerName,\n    Position,\n    ProjectCount,\n    Certifications,\n    TotalBudget\nFROM EngineerProjectStats\nORDER BY TotalBudget DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH EngineerProjectStats AS (\n    SELECT \n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', e.LastName) AS EngineerName,\n        e.Position,\n        COUNT(DISTINCT p.ProjectID) AS ProjectCount,\n        GROUP_CONCAT(DISTINCT c.CertificationName) AS Certifications,\n        SUM(p.Budget) AS TotalBudget\n    FROM Engineers e\n    JOIN Projects p ON e.EngineerID = p.ProjectManagerID\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE p.Budget > 5000000\n    AND c.CertificationLevel = 'Продвинутый'\n    AND c.Status = 'Действителен'\n    GROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position\n)\nSELECT \n    EngineerName,\n    Position,\n    ProjectCount,\n    Certifications,\n    TotalBudget\nFROM EngineerProjectStats\nORDER BY TotalBudget DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    CONCAT(e.FirstName, ' ', e.LastName) AS EngineerName,\n    e.Position,\n    COUNT(DISTINCT p.ProjectID) AS ProjectCount,\n    GROUP_CONCAT(DISTINCT c.CertificationName) AS Certifications,\n    SUM(p.Budget) AS TotalBudget\nFROM Engineers e\nJOIN Projects p ON e.EngineerID = p.ProjectManagerID\nJOIN Certifications c ON e.EngineerID = c.EngineerID\nWHERE p.Budget > 5000000\nAND c.CertificationLevel = 'Продвинутый'\nAND c.Status = 'Действителен'\nGROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position\nORDER BY TotalBudget DESC\nLIMIT 5;",
            "gigachat_response": "WITH CertifiedEngineers AS (\n    SELECT DISTINCT e.EngineerID, e.FirstName, e.LastName, e.Position\n    FROM Engineers e\n    INNER JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE c.CertificationLevel = 'Продвинутый'\n      AND c.Status = 'Действителен'\n),\nProjectEngagement AS (\n    SELECT pe.EngineerID, COUNT(*) AS ProjectCount, SUM(p.Budget) AS TotalBudget\n    FROM CertifiedEngineers ce\n    INNER JOIN Projects p ON ce.EngineerID = p.ProjectManagerID\n    WHERE p.Budget > 5000000\n    GROUP BY pe.EngineerID\n),\nFinalResult AS (\n    SELECT \n        ce.FirstName || ' ' || ce.LastName AS FullName,\n        ce.Position,\n        pe.ProjectCount,\n        GROUP_CONCAT(c.CertificationName) AS CertificateList,\n        pe.TotalBudget\n    FROM CertifiedEngineers ce\n    INNER JOIN ProjectEngagement pe ON ce.EngineerID = pe.EngineerID\n    INNER JOIN Certifications c ON ce.EngineerID = c.EngineerID\n    WHERE c.CertificationLevel = 'Продвинутый'\n      AND c.Status = 'Действителен'\n    GROUP BY ce.FirstName, ce.LastName, ce.Position, pe.ProjectCount, pe.TotalBudget\n)\nSELECT *\nFROM FinalResult\nORDER BY TotalBudget DESC\nLIMIT 5;",
            "gigachat_response_ru": "SELECT \n    e.FirstName || ' ' || e.LastName AS EngineerFullName,\n    e.Position,\n    COUNT(DISTINCT p.ProjectID) AS ProjectCount,\n    GROUP_CONCAT(c.CertificationName SEPARATOR ', ') AS CertificateList,\n    SUM(p.Budget) AS TotalProjectBudget\nFROM Engineers e\nJOIN Projects p ON e.EngineerID = p.ProjectManagerID\nJOIN Certifications c ON e.EngineerID = c.EngineerID\nWHERE p.Budget > 5000000\nAND c.CertificationLevel = 'Продвинутый'\nAND c.Status = 'Действителен'\nGROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position\nORDER BY TotalProjectBudget DESC\nLIMIT 5;"
        },
        {
            "question": "Получить список оборудования с наибольшим количеством записей о техническом обслуживании, где общая стоимость обслуживания превышает 2000 рублей. В ответе будут показаны: название оборудования, производитель, количество проведенных обслуживаний, общая стоимость обслуживания, список ответственных инженеров и текущий статус оборудования. Результаты отсортированы по количеству обслуживаний и общей стоимости обслуживания, показаны топ-6 записей.",
            "sql_query": "WITH EquipmentMaintenance AS (\n    SELECT \n        e.EquipmentID,\n        e.EquipmentName,\n        e.Manufacturer,\n        COUNT(m.MaintenanceID) as MaintenanceCount,\n        SUM(m.Cost) as TotalMaintenanceCost,\n        GROUP_CONCAT(DISTINCT CONCAT(eng.FirstName, ' ', eng.LastName)) as ResponsibleEngineers,\n        e.Status as EquipmentStatus\n    FROM Equipment e\n    JOIN MaintenanceRecords m ON e.EquipmentID = m.EquipmentID\n    JOIN Engineers eng ON m.EngineerID = eng.EngineerID\n   GROUP BY e.EquipmentID, e.EquipmentName, e.Manufacturer, e.Status\n    HAVING SUM(m.Cost) > 2000\n)\nSELECT \n    EquipmentName,\n    Manufacturer,\n    MaintenanceCount,\n    ROUND(TotalMaintenanceCost, 2) as TotalMaintenanceCost,\n    ResponsibleEngineers,\n    EquipmentStatus\nFROM EquipmentMaintenance\nORDER BY MaintenanceCount DESC, TotalMaintenanceCost DESC\nLIMIT 6;",
            "gpt-4o_response": "WITH EquipmentMaintenanceStats AS (\n    SELECT \n        e.EquipmentID,\n        e.EquipmentName,\n        e.Manufacturer,\n        COUNT(m.MaintenanceID) AS MaintenanceCount,\n        SUM(m.Cost) AS TotalMaintenanceCost,\n        GROUP_CONCAT(DISTINCT CONCAT(en.FirstName, ' ', en.LastName)) AS ResponsibleEngineers,\n        e.Status AS EquipmentStatus\n    FROM Equipment e\n    JOIN MaintenanceRecords m ON e.EquipmentID = m.EquipmentID\n    JOIN Engineers en ON m.EngineerID = en.EngineerID\n    GROUP BY e.EquipmentID, e.EquipmentName, e.Manufacturer, e.Status\n    HAVING SUM(m.Cost) > 2000\n)\nSELECT \n    EquipmentName,\n    Manufacturer,\n    MaintenanceCount,\n    ROUND(TotalMaintenanceCost, 2) AS TotalMaintenanceCost,\n    ResponsibleEngineers,\n    EquipmentStatus\nFROM EquipmentMaintenanceStats\nORDER BY MaintenanceCount DESC, TotalMaintenanceCost DESC\nLIMIT 6;",
            "gpt-4o_response_ru": "WITH MaintenanceStats AS (\n    SELECT \n        e.EquipmentID,\n        eq.EquipmentName,\n        eq.Manufacturer,\n        COUNT(m.MaintenanceID) AS MaintenanceCount,\n        SUM(m.Cost) AS TotalMaintenanceCost,\n        GROUP_CONCAT(DISTINCT CONCAT(en.FirstName, ' ', en.LastName)) AS ResponsibleEngineers,\n        eq.Status\n    FROM MaintenanceRecords m\n    JOIN Equipment eq ON m.EquipmentID = eq.EquipmentID\n    JOIN Engineers en ON m.EngineerID = en.EngineerID\n    GROUP BY e.EquipmentID, eq.EquipmentName, eq.Manufacturer, eq.Status\n    HAVING SUM(m.Cost) > 2000\n)\nSELECT \n    EquipmentName,\n    Manufacturer,\n    MaintenanceCount,\n    ROUND(TotalMaintenanceCost, 2) AS TotalMaintenanceCost,\n    ResponsibleEngineers,\n    Status\nFROM MaintenanceStats\nORDER BY MaintenanceCount DESC, TotalMaintenanceCost DESC\nLIMIT 6;",
            "google/gemini-2.0-flash-001_response": "WITH EquipmentMaintenance AS (\n    SELECT\n        e.EquipmentID,\n        e.EquipmentName,\n        e.Manufacturer,\n        COUNT(mr.MaintenanceID) AS MaintenanceCount,\n        SUM(mr.Cost) AS TotalMaintenanceCost,\n        GROUP_CONCAT(DISTINCT CONCAT(eng.FirstName, ' ', eng.LastName)) AS EngineersList,\n        e.Status\n    FROM\n        Equipment e\n    JOIN\n        MaintenanceRecords mr ON e.EquipmentID = mr.EquipmentID\n    JOIN\n        Engineers eng ON mr.EngineerID = eng.EngineerID\n    GROUP BY\n        e.EquipmentID, e.EquipmentName, e.Manufacturer, e.Status\n    HAVING\n        SUM(mr.Cost) > 2000\n)\nSELECT\n    em.EquipmentName,\n    em.Manufacturer,\n    em.MaintenanceCount,\n    ROUND(em.TotalMaintenanceCost, 2) AS TotalMaintenanceCost,\n    em.EngineersList,\n    em.Status\nFROM\n    EquipmentMaintenance em\nORDER BY\n    em.MaintenanceCount DESC, em.TotalMaintenanceCost DESC\nLIMIT 6;",
            "google/gemini-2.0-flash-001_response_ru": "WITH EquipmentMaintenanceStats AS (\n    SELECT\n        e.EquipmentID,\n        e.EquipmentName,\n        e.Manufacturer,\n        COUNT(mr.MaintenanceID) AS MaintenanceCount,\n        SUM(mr.Cost) AS TotalMaintenanceCost,\n        GROUP_CONCAT(DISTINCT CONCAT(eng.FirstName, ' ', eng.LastName)) AS ResponsibleEngineers,\n        e.Status AS EquipmentStatus\n    FROM Equipment e\n    JOIN MaintenanceRecords mr ON e.EquipmentID = mr.EquipmentID\n    JOIN Engineers eng ON mr.EngineerID = eng.EngineerID\n    GROUP BY e.EquipmentID, e.EquipmentName, e.Manufacturer, e.Status\n    HAVING SUM(mr.Cost) > 2000\n)\nSELECT\n    ems.EquipmentName,\n    ems.Manufacturer,\n    ems.MaintenanceCount,\n    ROUND(ems.TotalMaintenanceCost, 2) AS TotalMaintenanceCost,\n    ems.ResponsibleEngineers,\n    ems.EquipmentStatus\nFROM EquipmentMaintenanceStats ems\nORDER BY ems.MaintenanceCount DESC, ems.TotalMaintenanceCost DESC\nLIMIT 6;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH EquipmentMaintenanceStats AS (\n    SELECT \n        e.EquipmentID,\n        e.EquipmentName,\n        e.Manufacturer,\n        COUNT(mr.MaintenanceID) as MaintenanceCount,\n        SUM(mr.Cost) as TotalMaintenanceCost,\n        GROUP_CONCAT(DISTINCT CONCAT(en.FirstName, ' ', en.LastName)) as ResponsibleEngineers,\n        e.Status\n    FROM Equipment e\n    JOIN MaintenanceRecords mr ON e.EquipmentID = mr.EquipmentID\n    JOIN Engineers en ON mr.EngineerID = en.EngineerID\n    GROUP BY e.EquipmentID, e.EquipmentName, e.Manufacturer, e.Status\n    HAVING SUM(mr.Cost) > 2000\n)\nSELECT \n    EquipmentName,\n    Manufacturer,\n    MaintenanceCount,\n    ROUND(TotalMaintenanceCost, 2) as TotalMaintenanceCost,\n    ResponsibleEngineers,\n    Status\nFROM EquipmentMaintenanceStats\nORDER BY MaintenanceCount DESC, TotalMaintenanceCost DESC\nLIMIT 6;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH EquipmentMaintenanceStats AS (\n    SELECT \n        e.EquipmentID,\n        e.EquipmentName,\n        e.Manufacturer,\n        COUNT(mr.MaintenanceID) as MaintenanceCount,\n        SUM(mr.Cost) as TotalMaintenanceCost,\n        GROUP_CONCAT(DISTINCT CONCAT(eng.FirstName, ' ', eng.LastName)) as ResponsibleEngineers,\n        e.Status\n    FROM Equipment e\n    JOIN MaintenanceRecords mr ON e.EquipmentID = mr.EquipmentID\n    JOIN Engineers eng ON mr.EngineerID = eng.EngineerID\n    GROUP BY e.EquipmentID, e.EquipmentName, e.Manufacturer, e.Status\n    HAVING SUM(mr.Cost) > 2000\n)\nSELECT \n    EquipmentName,\n    Manufacturer,\n    MaintenanceCount,\n    ROUND(TotalMaintenanceCost, 2) as TotalMaintenanceCost,\n    ResponsibleEngineers,\n    Status\nFROM EquipmentMaintenanceStats\nORDER BY MaintenanceCount DESC, TotalMaintenanceCost DESC\nLIMIT 6;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    e.EquipmentName,\n    e.Manufacturer,\n    COUNT(mr.MaintenanceID) AS MaintenanceCount,\n    SUM(mr.Cost) AS TotalMaintenanceCost,\n    GROUP_CONCAT(DISTINCT CONCAT(eng.FirstName, ' ', eng.LastName)) AS ResponsibleEngineers,\n    e.Status\nFROM \n    Equipment e\nJOIN \n    MaintenanceRecords mr ON e.EquipmentID = mr.EquipmentID\nJOIN \n    Engineers eng ON mr.EngineerID = eng.EngineerID\nGROUP BY \n    e.EquipmentID, e.EquipmentName, e.Manufacturer, e.Status\nHAVING \n    SUM(mr.Cost) > 2000\nORDER BY \n    MaintenanceCount DESC, TotalMaintenanceCost DESC\nLIMIT 6;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    e.EquipmentName,\n    e.Manufacturer,\n    COUNT(mr.MaintenanceID) AS MaintenanceCount,\n    SUM(mr.Cost) AS TotalMaintenanceCost,\n    GROUP_CONCAT(DISTINCT CONCAT(eng.FirstName, ' ', eng.LastName)) AS ResponsibleEngineers,\n    e.Status AS EquipmentStatus\nFROM Equipment e\nJOIN MaintenanceRecords mr ON e.EquipmentID = mr.EquipmentID\nJOIN Engineers eng ON mr.EngineerID = eng.EngineerID\nGROUP BY e.EquipmentID, e.EquipmentName, e.Manufacturer, e.Status\nHAVING SUM(mr.Cost) > 2000\nORDER BY MaintenanceCount DESC, TotalMaintenanceCost DESC\nLIMIT 6;",
            "gigachat_response": "SELECT \n    eq.EquipmentName,\n    eq.Manufacturer,\n    COUNT(mr.MaintenanceID) AS MaintenanceCount,\n    SUM(mr.Cost) AS TotalMaintenanceCost,\n    GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS ResponsibleEngineers,\n    eq.Status AS EquipmentStatus\nFROM Equipment eq\nJOIN MaintenanceRecords mr ON eq.EquipmentID = mr.EquipmentID\nJOIN Engineers e ON mr.EngineerID = e.EngineerID\nGROUP BY eq.EquipmentID, eq.EquipmentName, eq.Manufacturer, eq.Status\nHAVING SUM(mr.Cost) > 2000\nORDER BY MaintenanceCount DESC, TotalMaintenanceCost DESC\nLIMIT 6;",
            "gigachat_response_ru": "SELECT \n    eq.EquipmentName,\n    eq.Manufacturer,\n    COUNT(mr.MaintenanceID) AS MaintenanceCount,\n    SUM(mr.Cost) AS TotalMaintenanceCost,\n    GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS ResponsibleEngineers,\n    eq.Status\nFROM Equipment eq\nLEFT JOIN MaintenanceRecords mr ON eq.EquipmentID = mr.EquipmentID\nLEFT JOIN Engineers e ON mr.EngineerID = e.EngineerID\nGROUP BY eq.EquipmentID, eq.EquipmentName, eq.Manufacturer, eq.Status\nHAVING SUM(mr.Cost) > 2000\nORDER BY MaintenanceCount DESC, TotalMaintenanceCost DESC\nLIMIT 6;"
        },
        {
            "question": "Получить список клиентов с наибольшим количеством активных проектов, где общий бюджет превышает 15 миллионов рублей. В ответе будут показаны: название клиента, количество проектов в статусе 'В процессе', общий бюджет всех проектов, средняя продолжительность проектов в днях и список руководителей проектов. Результаты отсортированы по количеству активных проектов и общему бюджету, показаны топ-4 записи.",
            "sql_query": "WITH ClientActiveProjects AS (\n    SELECT \n        c.ClientID,\n        c.ClientName,\n        COUNT(p.ProjectID) as ActiveProjectCount,\n        SUM(p.Budget) as TotalBudget,\n        AVG(DATEDIFF(p.EndDate, p.StartDate)) as AvgProjectDuration,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as ProjectManagers\n    FROM Clients c\n    JOIN Projects p ON c.ClientID = p.ClientID\n    JOIN Engineers e ON p.ProjectManagerID = e.EngineerID\n    WHERE p.Status = 'В процессе'\n    GROUP BY c.ClientID, c.ClientName\n    HAVING SUM(p.Budget) > 15000000\n)\nSELECT \n    ClientName,\n    ActiveProjectCount,\n    ROUND(TotalBudget, 2) as TotalBudget,\n    ROUND(AvgProjectDuration, 1) as AvgProjectDurationDays,\n    ProjectManagers\nFROM ClientActiveProjects\nORDER BY ActiveProjectCount DESC, TotalBudget DESC\nLIMIT 4;",
            "gpt-4o_response": "WITH ClientProjectStats AS (\n    SELECT \n        c.ClientName,\n        COUNT(p.ProjectID) AS ActiveProjectCount,\n        SUM(p.Budget) AS TotalBudget,\n        AVG(DATEDIFF(p.EndDate, p.StartDate)) AS AvgProjectDuration,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS ProjectManagers\n    FROM Clients c\n    JOIN Projects p ON c.ClientID = p.ClientID\n    JOIN Engineers e ON p.ProjectManagerID = e.EngineerID\n    WHERE p.Status = 'В процессе'\n    GROUP BY c.ClientName\n    HAVING TotalBudget > 15000000\n)\nSELECT \n    ClientName,\n    ActiveProjectCount,\n    ROUND(TotalBudget, 2) AS TotalBudget,\n    ROUND(AvgProjectDuration, 2) AS AvgProjectDuration,\n    ProjectManagers\nFROM ClientProjectStats\nORDER BY ActiveProjectCount DESC, TotalBudget DESC\nLIMIT 4;",
            "gpt-4o_response_ru": "WITH ClientProjectStats AS (\n    SELECT \n        c.ClientID,\n        c.ClientName,\n        COUNT(p.ProjectID) AS ActiveProjectCount,\n        SUM(p.Budget) AS TotalBudget,\n        AVG(DATEDIFF(p.EndDate, p.StartDate)) AS AvgProjectDuration,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS ProjectManagers\n    FROM Clients c\n    JOIN Projects p ON c.ClientID = p.ClientID\n    JOIN Engineers e ON p.ProjectManagerID = e.EngineerID\n    WHERE p.Status = 'В процессе'\n    GROUP BY c.ClientID, c.ClientName\n    HAVING TotalBudget > 15000000\n)\nSELECT \n    ClientName,\n    ActiveProjectCount,\n    ROUND(TotalBudget, 2) AS TotalBudget,\n    ROUND(AvgProjectDuration, 2) AS AvgProjectDuration,\n    ProjectManagers\nFROM ClientProjectStats\nORDER BY ActiveProjectCount DESC, TotalBudget DESC\nLIMIT 4;",
            "google/gemini-2.0-flash-001_response": "WITH ClientProjectStats AS (\n    SELECT \n        c.ClientID,\n        c.ClientName,\n        COUNT(CASE WHEN p.Status = 'В процессе' THEN p.ProjectID ELSE NULL END) AS ActiveProjectCount,\n        SUM(p.Budget) AS TotalBudget,\n        AVG(DATEDIFF(p.EndDate, p.StartDate)) AS AvgProjectDuration,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS ProjectManagers\n    FROM Clients c\n    JOIN Projects p ON c.ClientID = p.ClientID\n    LEFT JOIN Engineers e ON p.ProjectManagerID = e.EngineerID\n    GROUP BY c.ClientID, c.ClientName\n    HAVING SUM(p.Budget) > 15000000\n)\nSELECT \n    ClientName,\n    ActiveProjectCount,\n    TotalBudget,\n    ROUND(AvgProjectDuration, 2) AS AvgProjectDuration,\n    ProjectManagers\nFROM ClientProjectStats\nORDER BY ActiveProjectCount DESC, TotalBudget DESC\nLIMIT 4;",
            "google/gemini-2.0-flash-001_response_ru": "WITH ClientProjectStats AS (\n    SELECT \n        c.ClientID,\n        c.ClientName,\n        COUNT(CASE WHEN p.Status = 'В процессе' THEN p.ProjectID END) AS ActiveProjectCount,\n        SUM(p.Budget) AS TotalBudget,\n        AVG(JULIANDAY(p.EndDate) - JULIANDAY(p.StartDate)) AS AvgProjectDuration,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS ProjectManagers\n    FROM Clients c\n    JOIN Projects p ON c.ClientID = p.ClientID\n    LEFT JOIN Engineers e ON p.ProjectManagerID = e.EngineerID\n    GROUP BY c.ClientID, c.ClientName\n    HAVING SUM(p.Budget) > 15000000\n)\nSELECT \n    cps.ClientName,\n    cps.ActiveProjectCount,\n    ROUND(cps.TotalBudget, 2) AS TotalBudget,\n    ROUND(cps.AvgProjectDuration, 2) AS AvgProjectDuration,\n    cps.ProjectManagers\nFROM ClientProjectStats cps\nORDER BY cps.ActiveProjectCount DESC, cps.TotalBudget DESC\nLIMIT 4;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH ClientProjectStats AS (\n    SELECT \n        c.ClientName,\n        COUNT(p.ProjectID) as ActiveProjectCount,\n        SUM(p.Budget) as TotalBudget,\n        AVG(DATEDIFF(p.EndDate, p.StartDate)) as AvgProjectDuration,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as ProjectManagers\n    FROM Clients c\n    JOIN Projects p ON c.ClientID = p.ClientID\n    JOIN Engineers e ON p.ProjectManagerID = e.EngineerID\n    WHERE p.Status = 'В процессе'\n    GROUP BY c.ClientName\n    HAVING SUM(p.Budget) > 15000000\n)\nSELECT \n    ClientName,\n    ActiveProjectCount,\n    ROUND(TotalBudget, 2) as TotalBudget,\n    ROUND(AvgProjectDuration, 2) as AvgProjectDuration,\n    ProjectManagers\nFROM ClientProjectStats\nORDER BY ActiveProjectCount DESC, TotalBudget DESC\nLIMIT 4;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH ClientProjectStats AS (\n    SELECT \n        c.ClientName,\n        COUNT(p.ProjectID) as ActiveProjectCount,\n        SUM(p.Budget) as TotalBudget,\n        AVG(DATEDIFF(p.EndDate, p.StartDate)) as AvgProjectDuration,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as ProjectManagers\n    FROM Clients c\n    JOIN Projects p ON c.ClientID = p.ClientID\n    JOIN Engineers e ON p.ProjectManagerID = e.EngineerID\n    WHERE p.Status = 'В процессе'\n    GROUP BY c.ClientName\n    HAVING SUM(p.Budget) > 15000000\n)\nSELECT \n    ClientName,\n    ActiveProjectCount,\n    ROUND(TotalBudget, 2) as TotalBudget,\n    ROUND(AvgProjectDuration, 2) as AvgProjectDuration,\n    ProjectManagers\nFROM ClientProjectStats\nORDER BY ActiveProjectCount DESC, TotalBudget DESC\nLIMIT 4;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH ClientProjectStats AS (\n    SELECT \n        c.ClientID,\n        c.ClientName,\n        COUNT(p.ProjectID) AS ActiveProjectCount,\n        SUM(p.Budget) AS TotalBudget,\n        AVG(DATEDIFF(p.EndDate, p.StartDate)) AS AvgProjectDuration,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS ProjectManagers\n    FROM Clients c\n    JOIN Projects p ON c.ClientID = p.ClientID\n    JOIN Engineers e ON p.ProjectManagerID = e.EngineerID\n    WHERE p.Status = 'В процессе'\n    GROUP BY c.ClientID, c.ClientName\n    HAVING SUM(p.Budget) > 15000000\n)\nSELECT \n    ClientName,\n    ActiveProjectCount,\n    TotalBudget,\n    ROUND(AvgProjectDuration, 2) AS AvgProjectDurationDays,\n    ProjectManagers\nFROM ClientProjectStats\nORDER BY ActiveProjectCount DESC, TotalBudget DESC\nLIMIT 4;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    c.ClientName,\n    COUNT(p.ProjectID) AS ActiveProjectsCount,\n    SUM(p.Budget) AS TotalBudget,\n    ROUND(AVG(DATEDIFF(p.EndDate, p.StartDate)), 2) AS AvgProjectDurationDays,\n    GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS ProjectManagers\nFROM Clients c\nJOIN Projects p ON c.ClientID = p.ClientID\nJOIN Engineers e ON p.ProjectManagerID = e.EngineerID\nWHERE p.Status = 'В процессе'\nGROUP BY c.ClientID, c.ClientName\nHAVING SUM(p.Budget) > 15000000\nORDER BY ActiveProjectsCount DESC, TotalBudget DESC\nLIMIT 4;",
            "gigachat_response": "WITH ActiveProjects AS (\n    SELECT \n        cl.ClientID,\n        cl.ClientName,\n        COUNT(pr.ProjectID) AS ActiveProjectCount,\n        SUM(pr.Budget) AS TotalBudget,\n        AVG(DATEDIFF(pr.EndDate, pr.StartDate)) AS AverageProjectDurationDays,\n        GROUP_CONCAT(CONCAT(en.FirstName, ' ', en.LastName)) AS ProjectManagersList\n    FROM Clients cl\n    JOIN Projects pr ON cl.ClientID = pr.ClientID\n    JOIN Engineers en ON pr.ProjectManagerID = en.EngineerID\n    WHERE pr.Status = 'В процессе'\n    GROUP BY cl.ClientID, cl.ClientName\n    HAVING SUM(pr.Budget) > 15000000\n)\nSELECT *\nFROM ActiveProjects\nORDER BY ActiveProjectCount DESC, TotalBudget DESC\nLIMIT 4;",
            "gigachat_response_ru": "WITH ActiveProjects AS (\n    SELECT \n        cl.ClientID,\n        cl.ClientName,\n        COUNT(pr.ProjectID) AS ActiveProjectCount,\n        SUM(pr.Budget) AS TotalBudget,\n        AVG(DATEDIFF(pr.EndDate, pr.StartDate)) AS AverageProjectDurationDays,\n        GROUP_CONCAT(CONCAT(en.FirstName, ' ', en.LastName)) AS ProjectManagersList\n    FROM Clients cl\n    JOIN Projects pr ON cl.ClientID = pr.ClientID\n    JOIN Engineers en ON pr.ProjectManagerID = en.EngineerID\n    WHERE pr.Status = 'В процессе'\n    GROUP BY cl.ClientID, cl.ClientName\n    HAVING SUM(pr.Budget) > 15000000\n)\nSELECT *\nFROM ActiveProjects\nORDER BY ActiveProjectCount DESC, TotalBudget DESC\nLIMIT 4;"
        },
        {
            "question": "Получить список отделов с наибольшим количеством инженеров, имеющих сертификаты уровня 'Продвинутый' или 'Эксперт'. В ответе будут показаны: название отдела, количество квалифицированных инженеров, список сертификатов, средний стаж работы инженеров в годах и общий бюджет отдела. Результаты отсортированы по количеству квалифицированных инженеров и бюджету отдела, показаны топ-4 записи.",
            "sql_query": "WITH DepartmentQualification AS (\n    SELECT \n        d.DepartmentID,\n        d.DepartmentName,\n        COUNT(DISTINCT e.EngineerID) as QualifiedEngineers,\n        GROUP_CONCAT(DISTINCT c.CertificationName) as Certifications,\n        AVG(DATEDIFF(CURDATE(), e.HireDate)) as AvgExperienceDays,\n        d.Budget as DepartmentBudget\n    FROM Departments d\n    JOIN Engineers e ON d.DepartmentID = e.DepartmentID\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    AND c.Status = 'Действителен'\n    GROUP BY d.DepartmentID, d.DepartmentName, d.Budget\n)\nSELECT \n    DepartmentName,\n    QualifiedEngineers,\n    Certifications,\n    ROUND(AvgExperienceDays/365, 1) as AvgExperienceYears,\n    ROUND(DepartmentBudget, 2) as DepartmentBudget\nFROM DepartmentQualification\nORDER BY QualifiedEngineers DESC, DepartmentBudget DESC\nLIMIT 4;",
            "gpt-4o_response": "WITH QualifiedEngineers AS (\n    SELECT \n        e.EngineerID,\n        e.DepartmentID,\n        DATEDIFF(CURDATE(), e.HireDate) / 365.25 AS YearsOfService\n    FROM Engineers e\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    AND c.Status = 'Действителен'\n),\nDepartmentStats AS (\n    SELECT \n        d.DepartmentName,\n        COUNT(qe.EngineerID) AS QualifiedEngineerCount,\n        GROUP_CONCAT(DISTINCT c.CertificationName) AS Certifications,\n        AVG(qe.YearsOfService) AS AvgYearsOfService,\n        d.Budget\n    FROM Departments d\n    JOIN QualifiedEngineers qe ON d.DepartmentID = qe.DepartmentID\n    JOIN Certifications c ON qe.EngineerID = c.EngineerID\n    GROUP BY d.DepartmentID, d.DepartmentName, d.Budget\n)\nSELECT \n    DepartmentName,\n    QualifiedEngineerCount,\n    Certifications,\n    ROUND(AvgYearsOfService, 2) AS AvgYearsOfService,\n    Budget\nFROM DepartmentStats\nORDER BY QualifiedEngineerCount DESC, Budget DESC\nLIMIT 4;",
            "gpt-4o_response_ru": "WITH QualifiedEngineers AS (\n    SELECT \n        e.EngineerID,\n        e.DepartmentID,\n        CONCAT(e.FirstName, ' ', e.LastName) AS EngineerName,\n        DATEDIFF(CURDATE(), e.HireDate) / 365 AS YearsOfService,\n        c.CertificationName\n    FROM Engineers e\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    AND c.Status = 'Действителен'\n),\nDepartmentStats AS (\n    SELECT \n        d.DepartmentID,\n        d.DepartmentName,\n        COUNT(DISTINCT qe.EngineerID) AS QualifiedEngineerCount,\n        GROUP_CONCAT(DISTINCT qe.CertificationName) AS Certifications,\n        AVG(qe.YearsOfService) AS AvgYearsOfService,\n        d.Budget\n    FROM Departments d\n    JOIN QualifiedEngineers qe ON d.DepartmentID = qe.DepartmentID\n    GROUP BY d.DepartmentID, d.DepartmentName, d.Budget\n)\nSELECT \n    DepartmentName,\n    QualifiedEngineerCount,\n    Certifications,\n    ROUND(AvgYearsOfService, 2) AS AvgYearsOfService,\n    Budget\nFROM DepartmentStats\nORDER BY QualifiedEngineerCount DESC, Budget DESC\nLIMIT 4;",
            "google/gemini-2.0-flash-001_response": "WITH QualifiedEngineers AS (\n    SELECT\n        e.EngineerID,\n        e.DepartmentID,\n        e.FirstName,\n        e.LastName,\n        e.HireDate,\n        c.CertificationName\n    FROM\n        Engineers e\n    JOIN\n        Certifications c ON e.EngineerID = c.EngineerID\n    WHERE\n        c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n),\nDepartmentStats AS (\n    SELECT\n        d.DepartmentID,\n        d.DepartmentName,\n        COUNT(DISTINCT qe.EngineerID) AS QualifiedEngineerCount,\n        GROUP_CONCAT(DISTINCT qe.CertificationName) AS CertificationList,\n        AVG(DATEDIFF(CURDATE(), qe.HireDate) / 365) AS AverageTenure,\n        d.Budget AS DepartmentBudget\n    FROM\n        Departments d\n    LEFT JOIN\n        QualifiedEngineers qe ON d.DepartmentID = qe.DepartmentID\n    GROUP BY\n        d.DepartmentID, d.DepartmentName, d.Budget\n)\nSELECT\n    ds.DepartmentName,\n    ds.QualifiedEngineerCount,\n    ds.CertificationList,\n    ROUND(ds.AverageTenure, 2) AS AverageTenure,\n    ds.DepartmentBudget\nFROM\n    DepartmentStats ds\nWHERE ds.QualifiedEngineerCount > 0\nORDER BY\n    ds.QualifiedEngineerCount DESC, ds.DepartmentBudget DESC\nLIMIT 4;",
            "google/gemini-2.0-flash-001_response_ru": "WITH QualifiedEngineers AS (\n    SELECT\n        e.EngineerID,\n        e.DepartmentID,\n        e.FirstName,\n        e.LastName,\n        e.HireDate\n    FROM Engineers e\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n),\nDepartmentStats AS (\n    SELECT\n        d.DepartmentID,\n        d.DepartmentName,\n        COUNT(qe.EngineerID) AS QualifiedEngineerCount,\n        GROUP_CONCAT(DISTINCT c.CertificationName) AS Certifications,\n        AVG(DATEDIFF(CURDATE(), qe.HireDate) / 365) AS AvgWorkExperience,\n        d.Budget AS DepartmentBudget\n    FROM Departments d\n    JOIN QualifiedEngineers qe ON d.DepartmentID = qe.DepartmentID\n    JOIN Engineers e ON qe.EngineerID = e.EngineerID\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    GROUP BY d.DepartmentID, d.DepartmentName, d.Budget\n)\nSELECT\n    ds.DepartmentName,\n    ds.QualifiedEngineerCount,\n    ds.Certifications,\n    ROUND(ds.AvgWorkExperience, 2) AS AvgWorkExperience,\n    ds.DepartmentBudget\nFROM DepartmentStats ds\nORDER BY ds.QualifiedEngineerCount DESC, ds.DepartmentBudget DESC\nLIMIT 4;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH DepartmentStats AS (\n    SELECT \n        d.DepartmentID,\n        d.DepartmentName,\n        COUNT(DISTINCT e.EngineerID) as QualifiedEngineerCount,\n        GROUP_CONCAT(DISTINCT c.CertificationName) as Certifications,\n        AVG(TIMESTAMPDIFF(YEAR, e.HireDate, CURDATE())) as AverageExperience,\n        d.Budget as DepartmentBudget\n    FROM Departments d\n    JOIN Engineers e ON d.DepartmentID = e.DepartmentID\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    GROUP BY d.DepartmentID, d.DepartmentName, d.Budget\n)\nSELECT \n    DepartmentName,\n    QualifiedEngineerCount,\n    Certifications,\n    ROUND(AverageExperience, 2) as AverageExperience,\n    DepartmentBudget\nFROM DepartmentStats\nORDER BY QualifiedEngineerCount DESC, DepartmentBudget DESC\nLIMIT 4;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH DepartmentEngineerStats AS (\n    SELECT \n        d.DepartmentID,\n        d.DepartmentName,\n        COUNT(DISTINCT e.EngineerID) as QualifiedEngineerCount,\n        GROUP_CONCAT(DISTINCT c.CertificationName) as Certifications,\n        AVG(TIMESTAMPDIFF(YEAR, e.HireDate, CURDATE())) as AverageExperience,\n        d.Budget as DepartmentBudget\n    FROM Departments d\n    JOIN Engineers e ON d.DepartmentID = e.DepartmentID\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    GROUP BY d.DepartmentID, d.DepartmentName, d.Budget\n)\nSELECT \n    DepartmentName,\n    QualifiedEngineerCount,\n    Certifications,\n    ROUND(AverageExperience, 2) as AverageExperience,\n    DepartmentBudget\nFROM DepartmentEngineerStats\nORDER BY QualifiedEngineerCount DESC, DepartmentBudget DESC\nLIMIT 4;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH CertifiedEngineers AS (\n    SELECT \n        e.EngineerID,\n        e.DepartmentID,\n        c.CertificationName,\n        DATEDIFF(CURDATE(), e.HireDate)/365 AS ExperienceYears\n    FROM Engineers e\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    AND c.Status = 'Действителен'\n),\nDepartmentStats AS (\n    SELECT \n        d.DepartmentID,\n        d.DepartmentName,\n        d.Budget,\n        COUNT(DISTINCT ce.EngineerID) AS CertifiedEngineerCount,\n        GROUP_CONCAT(DISTINCT ce.CertificationName) AS CertificationsList,\n        AVG(ce.ExperienceYears) AS AvgExperienceYears\n    FROM Departments d\n    LEFT JOIN CertifiedEngineers ce ON d.DepartmentID = ce.DepartmentID\n    GROUP BY d.DepartmentID, d.DepartmentName, d.Budget\n    HAVING COUNT(DISTINCT ce.EngineerID) > 0\n)\nSELECT \n    DepartmentName,\n    CertifiedEngineerCount,\n    CertificationsList,\n    ROUND(AvgExperienceYears, 2) AS AvgExperienceYears,\n    Budget\nFROM DepartmentStats\nORDER BY CertifiedEngineerCount DESC, Budget DESC\nLIMIT 4;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    d.DepartmentName,\n    COUNT(DISTINCT e.EngineerID) AS QualifiedEngineersCount,\n    GROUP_CONCAT(DISTINCT c.CertificationName) AS CertificationsList,\n    ROUND(AVG(DATEDIFF(CURDATE(), e.HireDate) / 365), 1) AS AverageExperienceYears,\n    d.Budget AS DepartmentBudget\nFROM Departments d\nJOIN Engineers e ON d.DepartmentID = e.DepartmentID\nJOIN Certifications c ON e.EngineerID = c.EngineerID\nWHERE c.CertificationLevel IN ('Продвинутый', 'Эксперт')\nAND c.Status = 'Действителен'\nGROUP BY d.DepartmentID, d.DepartmentName, d.Budget\nORDER BY QualifiedEngineersCount DESC, d.Budget DESC\nLIMIT 4;",
            "gigachat_response": "WITH QualifiedEngineersPerDept AS (\n    SELECT \n        d.DepartmentID,\n        d.DepartmentName,\n        COUNT(DISTINCT e.EngineerID) AS NumQualifiedEngineers,\n        STRING_AGG(c.CertificationName, ', ') WITHIN GROUP (ORDER BY c.CertificationName ASC) AS CertificateList,\n        AVG(YEAR(CURRENT_DATE()) - YEAR(e.HireDate)) AS AverageYearsExperience,\n        SUM(d.Budget) OVER(PARTITION BY d.DepartmentID) AS DeptTotalBudget\n    FROM Departments d\n    INNER JOIN Engineers e ON d.DepartmentID = e.DepartmentID\n    INNER JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    GROUP BY d.DepartmentID, d.DepartmentName\n)\nSELECT *\nFROM QualifiedEngineersPerDept\nORDER BY NumQualifiedEngineers DESC, DeptTotalBudget DESC\nLIMIT 4;",
            "gigachat_response_ru": "WITH QualifiedEngineersPerDept AS (\n    SELECT \n        d.DepartmentID,\n        d.DepartmentName,\n        COUNT(e.EngineerID) AS NumQualifiedEngineers,\n        STRING_AGG(c.CertificationName, ', ') WITHIN GROUP (ORDER BY c.CertificationName) AS CertificateList,\n        AVG(DATEDIFF(YEAR, e.HireDate, GETDATE())) AS AverageYearsExperience,\n        d.Budget AS DeptBudget\n    FROM Departments d\n    INNER JOIN Engineers e ON d.DepartmentID = e.DepartmentID\n    INNER JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    GROUP BY d.DepartmentID, d.DepartmentName, d.Budget\n)\nSELECT *\nFROM QualifiedEngineersPerDept\nORDER BY NumQualifiedEngineers DESC, DeptBudget DESC\nLIMIT 4;"
        },
        {
            "question": "Получить список проектов с наибольшим количеством задач с высоким приоритетом и просроченными сроками. В ответе будут показаны: название проекта, количество высокоприоритетных задач, количество просроченных задач, средняя продолжительность просрочки в днях и список ответственных инженеров. Результаты отсортированы по количеству высокоприоритетных и просроченных задач, показаны топ-5 записей.",
            "sql_query": "WITH ProjectTaskStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        SUM(CASE WHEN t.Priority = 'Высокий' THEN 1 ELSE 0 END) as HighPriorityTasks,\n        SUM(CASE WHEN t.DueDate < CURRENT_DATE AND t.Status = 'В процессе' THEN 1 ELSE 0 END) as OverdueTasks,\n        AVG(CASE WHEN t.DueDate < CURRENT_DATE THEN EXTRACT(DAY FROM (CURRENT_DATE - t.DueDate)) ELSE 0 END) as AvgOverdueDays,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as ResponsibleEngineers\n    FROM Projects p\n    JOIN Tasks t ON p.ProjectID = t.ProjectID\n    JOIN Engineers e ON t.AssignedTo = e.EngineerID\n    GROUP BY p.ProjectID, p.ProjectName\n    HAVING SUM(CASE WHEN t.Priority = 'Высокий' THEN 1 ELSE 0 END) > 0\n)\nSELECT \n    ProjectName,\n    HighPriorityTasks,\n    OverdueTasks,\n    AvgOverdueDays,\n    ResponsibleEngineers\nFROM ProjectTaskStats\nORDER BY HighPriorityTasks DESC, OverdueTasks DESC\nLIMIT 5;",
            "gpt-4o_response": "WITH TaskStats AS (\n    SELECT \n        t.ProjectID,\n        COUNT(CASE WHEN t.Priority = 'Высокий' THEN 1 END) AS HighPriorityTaskCount,\n        COUNT(CASE WHEN t.DueDate < CURDATE() THEN 1 END) AS OverdueTaskCount,\n        AVG(DATEDIFF(CURDATE(), t.DueDate)) AS AvgOverdueDays\n    FROM Tasks t\n    WHERE t.Priority = 'Высокий' OR t.DueDate < CURDATE()\n    GROUP BY t.ProjectID\n),\nProjectEngineerStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        ts.HighPriorityTaskCount,\n        ts.OverdueTaskCount,\n        ROUND(ts.AvgOverdueDays, 2) AS AvgOverdueDays,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS ResponsibleEngineers\n    FROM Projects p\n    JOIN TaskStats ts ON p.ProjectID = ts.ProjectID\n    LEFT JOIN Tasks t ON p.ProjectID = t.ProjectID\n    LEFT JOIN Engineers e ON t.AssignedTo = e.EngineerID\n    GROUP BY p.ProjectID, p.ProjectName, ts.HighPriorityTaskCount, ts.OverdueTaskCount, ts.AvgOverdueDays\n)\nSELECT \n    ProjectName,\n    HighPriorityTaskCount,\n    OverdueTaskCount,\n    AvgOverdueDays,\n    ResponsibleEngineers\nFROM ProjectEngineerStats\nORDER BY HighPriorityTaskCount DESC, OverdueTaskCount DESC\nLIMIT 5;",
            "gpt-4o_response_ru": "WITH TaskStats AS (\n    SELECT \n        t.ProjectID,\n        COUNT(CASE WHEN t.Priority = 'Высокий' THEN 1 END) AS HighPriorityTasks,\n        COUNT(CASE WHEN t.DueDate < CURDATE() THEN 1 END) AS OverdueTasks,\n        AVG(DATEDIFF(CURDATE(), t.DueDate)) AS AvgOverdueDays\n    FROM Tasks t\n    WHERE t.Priority = 'Высокий' OR t.DueDate < CURDATE()\n    GROUP BY t.ProjectID\n),\nProjectEngineerStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        ts.HighPriorityTasks,\n        ts.OverdueTasks,\n        ts.AvgOverdueDays,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS ResponsibleEngineers\n    FROM Projects p\n    JOIN TaskStats ts ON p.ProjectID = ts.ProjectID\n    LEFT JOIN Tasks t ON p.ProjectID = t.ProjectID\n    LEFT JOIN Engineers e ON t.AssignedTo = e.EngineerID\n    GROUP BY p.ProjectID, p.ProjectName, ts.HighPriorityTasks, ts.OverdueTasks, ts.AvgOverdueDays\n)\nSELECT \n    ProjectName,\n    HighPriorityTasks,\n    OverdueTasks,\n    ROUND(AvgOverdueDays, 2) AS AvgOverdueDays,\n    ResponsibleEngineers\nFROM ProjectEngineerStats\nORDER BY HighPriorityTasks DESC, OverdueTasks DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response": "WITH ProjectTaskData AS (\n    SELECT\n        p.ProjectID,\n        p.ProjectName,\n        SUM(CASE WHEN t.Priority = 'Высокий' THEN 1 ELSE 0 END) AS HighPriorityTaskCount,\n        SUM(CASE WHEN t.DueDate < CURDATE() THEN 1 ELSE 0 END) AS OverdueTaskCount,\n        AVG(CASE WHEN t.DueDate < CURDATE() THEN DATEDIFF(CURDATE(), t.DueDate) ELSE 0 END) AS AvgOverdueDateDifference,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS AssignedEngineers\n    FROM Projects p\n    JOIN Tasks t ON p.ProjectID = t.ProjectID\n    LEFT JOIN Engineers e ON t.AssignedTo = e.EngineerID\n    WHERE t.Priority = 'Высокий' OR t.DueDate < CURDATE()\n    GROUP BY p.ProjectID, p.ProjectName\n    HAVING SUM(CASE WHEN t.Priority = 'Высокий' THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN t.DueDate < CURDATE() THEN 1 ELSE 0 END) > 0\n)\nSELECT\n    ProjectName,\n    HighPriorityTaskCount,\n    OverdueTaskCount,\n    ROUND(AvgOverdueDateDifference, 2) AS AvgOverdueDateDifference,\n    AssignedEngineers\nFROM ProjectTaskData\nORDER BY HighPriorityTaskCount DESC, OverdueTaskCount DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response_ru": "WITH ProjectTaskStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        COUNT(CASE WHEN t.Priority = 'Высокий' THEN t.TaskID ELSE NULL END) AS HighPriorityTaskCount,\n        COUNT(CASE WHEN t.DueDate < CURDATE() THEN t.TaskID ELSE NULL END) AS OverdueTaskCount,\n        AVG(CASE WHEN t.DueDate < CURDATE() THEN DATEDIFF(CURDATE(), t.DueDate) ELSE NULL END) AS AvgOverdueDateDifference,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS ResponsibleEngineers\n    FROM Projects p\n    JOIN Tasks t ON p.ProjectID = t.ProjectID\n    JOIN Engineers e ON t.AssignedTo = e.EngineerID\n    WHERE t.Priority = 'Высокий' OR t.DueDate < CURDATE()\n    GROUP BY p.ProjectID, p.ProjectName\n    HAVING COUNT(CASE WHEN t.Priority = 'Высокий' THEN t.TaskID ELSE NULL END) > 0 AND COUNT(CASE WHEN t.DueDate < CURDATE() THEN t.TaskID ELSE NULL END) > 0\n)\nSELECT \n    ProjectName,\n    HighPriorityTaskCount,\n    OverdueTaskCount,\n    ROUND(AvgOverdueDateDifference, 2) AS AvgOverdueDateDifference,\n    ResponsibleEngineers\nFROM ProjectTaskStats\nORDER BY HighPriorityTaskCount DESC, OverdueTaskCount DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH ProjectTaskStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        COUNT(CASE WHEN t.Priority = 'Высокий' THEN t.TaskID END) as HighPriorityTaskCount,\n        COUNT(CASE WHEN t.DueDate < CURDATE() THEN t.TaskID END) as OverdueTaskCount,\n        AVG(DATEDIFF(CASE WHEN t.DueDate < CURDATE() THEN CURDATE() ELSE t.DueDate END, t.StartDate)) as AvgOverdueDuration,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as ResponsibleEngineers\n    FROM Projects p\n    LEFT JOIN Tasks t ON p.ProjectID = t.ProjectID\n    LEFT JOIN Engineers e ON t.AssignedTo = e.EngineerID\n    GROUP BY p.ProjectID, p.ProjectName\n),\nRankedProjectStats AS (\n    SELECT \n        ProjectName,\n        HighPriorityTaskCount,\n        OverdueTaskCount,\n        ROUND(AvgOverdueDuration, 2) as AvgOverdueDuration,\n        ResponsibleEngineers,\n        ROW_NUMBER() OVER (ORDER BY HighPriorityTaskCount DESC, OverdueTaskCount DESC) as Rank\n    FROM ProjectTaskStats\n)\nSELECT \n    ProjectName,\n    HighPriorityTaskCount,\n    OverdueTaskCount,\n    AvgOverdueDuration,\n    ResponsibleEngineers\nFROM RankedProjectStats\nWHERE Rank <= 5;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH ProjectTaskStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        COUNT(CASE WHEN t.Priority = 'Высокий' THEN t.TaskID END) as HighPriorityTaskCount,\n        COUNT(CASE WHEN t.DueDate < CURDATE() THEN t.TaskID END) as OverdueTaskCount,\n        AVG(DATEDIFF(COALESCE(t.CompletionDate, CURDATE()), t.DueDate)) as AvgOverdueDays,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as ResponsibleEngineers\n    FROM Projects p\n    JOIN Tasks t ON p.ProjectID = t.ProjectID\n    JOIN Engineers e ON t.AssignedTo = e.EngineerID\n    GROUP BY p.ProjectID, p.ProjectName\n),\nRankedProjectTaskStats AS (\n    SELECT \n        ProjectName,\n        HighPriorityTaskCount,\n        OverdueTaskCount,\n        AvgOverdueDays,\n        ResponsibleEngineers,\n        ROW_NUMBER() OVER (ORDER BY HighPriorityTaskCount DESC, OverdueTaskCount DESC) as RowNum\n    FROM ProjectTaskStats\n)\nSELECT \n    ProjectName,\n    HighPriorityTaskCount,\n    OverdueTaskCount,\n    ROUND(AvgOverdueDays, 2) as AvgOverdueDays,\n    ResponsibleEngineers\nFROM RankedProjectTaskStats\nWHERE RowNum <= 5\nORDER BY HighPriorityTaskCount DESC, OverdueTaskCount DESC;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH ProjectTaskStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        SUM(CASE WHEN t.Priority = 'Высокий' THEN 1 ELSE 0 END) as HighPriorityTasks,\n        SUM(CASE WHEN t.DueDate < CURDATE() AND t.Status != 'Завершено' THEN 1 ELSE 0 END) as OverdueTasks,\n        AVG(CASE WHEN t.DueDate < CURDATE() AND t.Status != 'Завершено' THEN DATEDIFF(CURDATE(), t.DueDate) ELSE NULL END) as AvgOverdueDays,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as ResponsibleEngineers\n    FROM Projects p\n    LEFT JOIN Tasks t ON p.ProjectID = t.ProjectID\n    LEFT JOIN Engineers e ON t.AssignedTo = e.EngineerID\n    GROUP BY p.ProjectID, p.ProjectName\n    HAVING HighPriorityTasks > 0 OR OverdueTasks > 0\n)\nSELECT \n    ProjectName,\n    HighPriorityTasks,\n    OverdueTasks,\n    ROUND(COALESCE(AvgOverdueDays, 0), 2) as AvgOverdueDays,\n    ResponsibleEngineers\nFROM ProjectTaskStats\nORDER BY HighPriorityTasks DESC, OverdueTasks DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    p.ProjectName,\n    SUM(CASE WHEN t.Priority = 'Высокий' THEN 1 ELSE 0 END) AS HighPriorityTasks,\n    SUM(CASE WHEN t.DueDate < CURDATE() AND t.Status != 'Завершено' THEN 1 ELSE 0 END) AS OverdueTasks,\n    ROUND(AVG(CASE WHEN t.DueDate < CURDATE() AND t.Status != 'Завершено' THEN DATEDIFF(CURDATE(), t.DueDate) ELSE NULL END), 1) AS AvgOverdueDays,\n    GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS ResponsibleEngineers\nFROM Projects p\nJOIN Tasks t ON p.ProjectID = t.ProjectID\nJOIN Engineers e ON t.AssignedTo = e.EngineerID\nGROUP BY p.ProjectID, p.ProjectName\nHAVING HighPriorityTasks > 0 OR OverdueTasks > 0\nORDER BY HighPriorityTasks DESC, OverdueTasks DESC\nLIMIT 5;",
            "gigachat_response": "WITH HighPriorityOverdueTasks AS (\n    SELECT \n        t.ProjectID,\n        COUNT(CASE WHEN t.Priority = 'Высокий' THEN 1 END) AS HighPriorityCount,\n        COUNT(CASE WHEN t.DueDate < CURRENT_DATE THEN 1 END) AS OverdueCount,\n        AVG(DATEDIFF(CURRENT_DATE, t.DueDate)) AS AverageDelayDays,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.MiddleName, ' ', e.LastName)) AS ResponsibleEngineers\n    FROM Tasks t\n    INNER JOIN Engineers e ON t.AssignedTo = e.EngineerID\n    GROUP BY t.ProjectID\n)\nSELECT \n    p.ProjectName,\n    h.HighPriorityCount,\n    h.OverdueCount,\n    ROUND(h.AverageDelayDays, 2) AS AverageDelayDays,\n    h.ResponsibleEngineers\nFROM Projects p\nINNER JOIN HighPriorityOverdueTasks h ON p.ProjectID = h.ProjectID\nWHERE h.HighPriorityCount > 0 OR h.OverdueCount > 0\nORDER BY h.HighPriorityCount DESC, h.OverdueCount DESC\nLIMIT 5;",
            "gigachat_response_ru": "WITH HighPriorityOverdueTasks AS (\n    SELECT \n        t.ProjectID,\n        COUNT(CASE WHEN t.Priority = 'Высокий' THEN 1 END) AS HighPriorityCount,\n        COUNT(CASE WHEN t.DueDate < CURRENT_DATE THEN 1 END) AS OverdueCount,\n        AVG(DATEDIFF(CURRENT_DATE, t.DueDate)) AS AverageDelayDays,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS ResponsibleEngineers\n    FROM Tasks t\n    LEFT JOIN Engineers e ON t.AssignedTo = e.EngineerID\n    GROUP BY t.ProjectID\n)\nSELECT \n    p.ProjectName,\n    h.HighPriorityCount,\n    h.OverdueCount,\n    ROUND(h.AverageDelayDays, 2) AS AverageDelayDays,\n    h.ResponsibleEngineers\nFROM Projects p\nINNER JOIN HighPriorityOverdueTasks h ON p.ProjectID = h.ProjectID\nWHERE h.HighPriorityCount > 0 OR h.OverdueCount > 0\nORDER BY h.HighPriorityCount DESC, h.OverdueCount DESC\nLIMIT 5;"
        },
        {
            "question": "Найти оборудование с наибольшим количеством инцидентов безопасности высокого уровня и стоимостью обслуживания более 2000 рублей. В ответе будут показаны: название оборудования, производитель, количество инцидентов, общая стоимость обслуживания, список ответственных инженеров и статус оборудования. Результаты отсортированы по количеству инцидентов и стоимости обслуживания, показаны топ-6 записей.",
            "sql_query": "WITH EquipmentSafetyStats AS (\n    SELECT \n        e.EquipmentID,\n        e.EquipmentName,\n        e.Manufacturer,\n        COUNT(DISTINCT si.IncidentID) as IncidentCount,\n        SUM(m.Cost) as TotalMaintenanceCost,\n        GROUP_CONCAT(DISTINCT CONCAT(eng.FirstName, ' ', eng.LastName)) as ResponsibleEngineers,\n        e.Status as EquipmentStatus\n    FROM Equipment e\n    JOIN SafetyIncidents si ON e.EquipmentID = si.EquipmentID\n    JOIN MaintenanceRecords m ON e.EquipmentID = m.EquipmentID\n    JOIN Engineers eng ON m.EngineerID = eng.EngineerID\n    WHERE si.SeverityLevel = 'Высокий'\n    AND m.Status = 'Выполнено'\n    GROUP BY e.EquipmentID, e.EquipmentName, e.Manufacturer, e.Status\n    HAVING SUM(m.Cost) > 2000\n)\nSELECT \n    EquipmentName,\n    Manufacturer,\n    IncidentCount,\n    ROUND(TotalMaintenanceCost, 2) as TotalMaintenanceCost,\n    ResponsibleEngineers,\n    EquipmentStatus\nFROM EquipmentSafetyStats\nORDER BY IncidentCount DESC, TotalMaintenanceCost DESC\nLIMIT 6;",
            "gpt-4o_response": "WITH EquipmentIncidentStats AS (\n    SELECT \n        e.EquipmentID,\n        e.EquipmentName,\n        e.Manufacturer,\n        COUNT(si.IncidentID) AS HighSeverityIncidentCount,\n        SUM(mr.Cost) AS TotalMaintenanceCost,\n        GROUP_CONCAT(DISTINCT CONCAT(en.FirstName, ' ', en.LastName)) AS ResponsibleEngineers,\n        e.Status\n    FROM Equipment e\n    JOIN SafetyIncidents si ON e.EquipmentID = si.EquipmentID\n    JOIN MaintenanceRecords mr ON e.EquipmentID = mr.EquipmentID\n    JOIN Engineers en ON mr.EngineerID = en.EngineerID\n    WHERE si.SeverityLevel = 'Высокий'\n    GROUP BY e.EquipmentID, e.EquipmentName, e.Manufacturer, e.Status\n    HAVING TotalMaintenanceCost > 2000\n)\nSELECT \n    EquipmentName,\n    Manufacturer,\n    HighSeverityIncidentCount,\n    ROUND(TotalMaintenanceCost, 2) AS TotalMaintenanceCost,\n    ResponsibleEngineers,\n    Status\nFROM EquipmentIncidentStats\nORDER BY HighSeverityIncidentCount DESC, TotalMaintenanceCost DESC\nLIMIT 6;",
            "gpt-4o_response_ru": "WITH SafetyIncidentStats AS (\n    SELECT \n        e.EquipmentID,\n        COUNT(si.IncidentID) AS HighSeverityIncidents\n    FROM Equipment e\n    JOIN SafetyIncidents si ON e.EquipmentID = si.EquipmentID\n    WHERE si.SeverityLevel = 'Высокий'\n    GROUP BY e.EquipmentID\n),\nMaintenanceCostStats AS (\n    SELECT \n        e.EquipmentID,\n        SUM(mr.Cost) AS TotalMaintenanceCost,\n        GROUP_CONCAT(DISTINCT CONCAT(en.FirstName, ' ', en.LastName)) AS ResponsibleEngineers\n    FROM Equipment e\n    JOIN MaintenanceRecords mr ON e.EquipmentID = mr.EquipmentID\n    JOIN Engineers en ON mr.EngineerID = en.EngineerID\n    WHERE mr.Cost > 2000\n    GROUP BY e.EquipmentID\n)\nSELECT \n    eq.EquipmentName,\n    eq.Manufacturer,\n    sis.HighSeverityIncidents,\n    mcs.TotalMaintenanceCost,\n    mcs.ResponsibleEngineers,\n    eq.Status\nFROM Equipment eq\nJOIN SafetyIncidentStats sis ON eq.EquipmentID = sis.EquipmentID\nJOIN MaintenanceCostStats mcs ON eq.EquipmentID = mcs.EquipmentID\nORDER BY sis.HighSeverityIncidents DESC, mcs.TotalMaintenanceCost DESC\nLIMIT 6;",
            "google/gemini-2.0-flash-001_response": "WITH EquipmentIncidents AS (\n    SELECT\n        ei.EquipmentID,\n        ei.EquipmentName,\n        ei.Manufacturer,\n        ei.Status,\n        COUNT(si.IncidentID) AS IncidentCount\n    FROM\n        Equipment ei\n    LEFT JOIN\n        SafetyIncidents si ON ei.EquipmentID = si.EquipmentID\n    WHERE si.SeverityLevel = 'Высокий'\n    GROUP BY\n        ei.EquipmentID, ei.EquipmentName, ei.Manufacturer, ei.Status\n),\nMaintenanceCosts AS (\n    SELECT\n        mr.EquipmentID,\n        SUM(mr.Cost) AS TotalMaintenanceCost\n    FROM\n        MaintenanceRecords mr\n    GROUP BY\n        mr.EquipmentID\n)\nSELECT\n    ei.EquipmentName,\n    ei.Manufacturer,\n    ei.IncidentCount,\n    mc.TotalMaintenanceCost,\n    GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS ResponsibleEngineers,\n    ei.Status\nFROM\n    EquipmentIncidents ei\nJOIN\n    MaintenanceCosts mc ON ei.EquipmentID = mc.EquipmentID\nLEFT JOIN\n    MaintenanceRecords mr ON ei.EquipmentID = mr.EquipmentID\nLEFT JOIN\n    Engineers e ON mr.EngineerID = e.EngineerID\nWHERE mc.TotalMaintenanceCost > 2000\nGROUP BY\n    ei.EquipmentName, ei.Manufacturer, ei.IncidentCount, mc.TotalMaintenanceCost, ei.Status\nORDER BY\n    ei.IncidentCount DESC, mc.TotalMaintenanceCost DESC\nLIMIT 6;",
            "google/gemini-2.0-flash-001_response_ru": "WITH EquipmentIncidents AS (\n    SELECT\n        si.EquipmentID,\n        COUNT(si.IncidentID) AS IncidentCount\n    FROM\n        SafetyIncidents si\n    WHERE\n        si.SeverityLevel = 'Высокий'\n    GROUP BY\n        si.EquipmentID\n),\nMaintenanceCosts AS (\n    SELECT\n        mr.EquipmentID,\n        SUM(mr.Cost) AS TotalMaintenanceCost\n    FROM\n        MaintenanceRecords mr\n    WHERE\n        mr.Cost > 2000\n    GROUP BY\n        mr.EquipmentID\n)\nSELECT\n    e.EquipmentName,\n    e.Manufacturer,\n    ei.IncidentCount,\n    mc.TotalMaintenanceCost,\n    GROUP_CONCAT(DISTINCT CONCAT(eng.FirstName, ' ', eng.LastName)) AS ResponsibleEngineers,\n    e.Status\nFROM\n    Equipment e\nJOIN\n    EquipmentIncidents ei ON e.EquipmentID = ei.EquipmentID\nJOIN\n    MaintenanceCosts mc ON e.EquipmentID = mc.EquipmentID\nLEFT JOIN\n    MaintenanceRecords mr ON e.EquipmentID = mr.EquipmentID\nLEFT JOIN\n    Engineers eng ON mr.EngineerID = eng.EngineerID\nGROUP BY\n    e.EquipmentName,\n    e.Manufacturer,\n    ei.IncidentCount,\n    mc.TotalMaintenanceCost,\n    e.Status\nORDER BY\n    ei.IncidentCount DESC,\n    mc.TotalMaintenanceCost DESC\nLIMIT 6;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH EquipmentIncidentStats AS (\n    SELECT \n        e.EquipmentID,\n        e.EquipmentName,\n        e.Manufacturer,\n        COUNT(si.IncidentID) as HighSeverityIncidents,\n        SUM(mr.Cost) as TotalMaintenanceCost,\n        GROUP_CONCAT(DISTINCT CONCAT(ee.FirstName, ' ', ee.LastName)) as ResponsibleEngineers,\n        e.Status\n    FROM Equipment e\n    JOIN SafetyIncidents si ON e.EquipmentID = si.EquipmentID\n    JOIN MaintenanceRecords mr ON e.EquipmentID = mr.EquipmentID\n    JOIN Engineers ee ON mr.EngineerID = ee.EngineerID\n    WHERE si.SeverityLevel = 'Высокий'\n    AND mr.Cost > 2000\n    GROUP BY e.EquipmentID, e.EquipmentName, e.Manufacturer, e.Status\n)\nSELECT \n    EquipmentName,\n    Manufacturer,\n    HighSeverityIncidents,\n    ROUND(TotalMaintenanceCost, 2) as TotalMaintenanceCost,\n    ResponsibleEngineers,\n    Status\nFROM EquipmentIncidentStats\nORDER BY HighSeverityIncidents DESC, TotalMaintenanceCost DESC\nLIMIT 6;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH EquipmentIncidentStats AS (\n    SELECT \n        e.EquipmentName,\n        e.Manufacturer,\n        COUNT(si.IncidentID) as HighSeverityIncidents,\n        SUM(mr.Cost) as TotalMaintenanceCost,\n        GROUP_CONCAT(DISTINCT CONCAT(en.FirstName, ' ', en.LastName)) as ResponsibleEngineers,\n        e.Status\n    FROM Equipment e\n    JOIN MaintenanceRecords mr ON e.EquipmentID = mr.EquipmentID\n    JOIN SafetyIncidents si ON e.EquipmentID = si.EquipmentID\n    JOIN Engineers en ON si.EngineerID = en.EngineerID\n    WHERE si.SeverityLevel = 'Высокий'\n    AND mr.Cost > 2000\n    GROUP BY e.EquipmentName, e.Manufacturer, e.Status\n),\nRankedEquipment AS (\n    SELECT \n        EquipmentName,\n        Manufacturer,\n        HighSeverityIncidents,\n        TotalMaintenanceCost,\n        ResponsibleEngineers,\n        Status,\n        ROW_NUMBER() OVER (ORDER BY HighSeverityIncidents DESC, TotalMaintenanceCost DESC) as RowNum\n    FROM EquipmentIncidentStats\n)\nSELECT \n    EquipmentName,\n    Manufacturer,\n    HighSeverityIncidents,\n    TotalMaintenanceCost,\n    ResponsibleEngineers,\n    Status\nFROM RankedEquipment\nWHERE RowNum <= 6\nORDER BY HighSeverityIncidents DESC, TotalMaintenanceCost DESC;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH EquipmentIncidents AS (\n    SELECT \n        e.EquipmentName,\n        e.Manufacturer,\n        e.Status,\n        COUNT(si.IncidentID) AS IncidentCount,\n        SUM(mr.Cost) AS TotalMaintenanceCost,\n        GROUP_CONCAT(DISTINCT CONCAT(eng.FirstName, ' ', eng.LastName)) AS ResponsibleEngineers\n    FROM Equipment e\n    JOIN SafetyIncidents si ON e.EquipmentID = si.EquipmentID\n    JOIN MaintenanceRecords mr ON e.EquipmentID = mr.EquipmentID\n    JOIN Engineers eng ON (si.EngineerID = eng.EngineerID OR mr.EngineerID = eng.EngineerID)\n    WHERE si.SeverityLevel = 'Высокий'\n    AND mr.Cost > 2000\n    GROUP BY e.EquipmentName, e.Manufacturer, e.Status\n)\nSELECT \n    EquipmentName,\n    Manufacturer,\n    IncidentCount,\n    TotalMaintenanceCost,\n    ResponsibleEngineers,\n    Status\nFROM EquipmentIncidents\nORDER BY IncidentCount DESC, TotalMaintenanceCost DESC\nLIMIT 6;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    e.EquipmentName,\n    e.Manufacturer,\n    COUNT(si.IncidentID) AS IncidentCount,\n    SUM(mr.Cost) AS TotalMaintenanceCost,\n    GROUP_CONCAT(DISTINCT CONCAT(eng.FirstName, ' ', eng.LastName)) AS ResponsibleEngineers,\n    e.Status\nFROM Equipment e\nJOIN SafetyIncidents si ON e.EquipmentID = si.EquipmentID\nJOIN MaintenanceRecords mr ON e.EquipmentID = mr.EquipmentID\nJOIN Engineers eng ON mr.EngineerID = eng.EngineerID\nWHERE si.SeverityLevel = 'Высокий'\nAND mr.Cost > 2000\nGROUP BY e.EquipmentID, e.EquipmentName, e.Manufacturer, e.Status\nORDER BY IncidentCount DESC, TotalMaintenanceCost DESC\nLIMIT 6;",
            "gigachat_response": "SELECT \n    eq.EquipmentName,\n    eq.Manufacturer,\n    COUNT(si.IncidentID) AS HighSeverityIncidentCount,\n    SUM(mr.Cost) AS TotalMaintenanceCost,\n    GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS ResponsibleEngineers,\n    eq.Status\nFROM Equipment eq\nJOIN MaintenanceRecords mr ON eq.EquipmentID = mr.EquipmentID\nLEFT JOIN SafetyIncidents si ON eq.EquipmentID = si.EquipmentID\nLEFT JOIN Engineers e ON mr.EngineerID = e.EngineerID\nWHERE si.SeverityLevel = 'Высокий'\nAND mr.Cost > 2000\nGROUP BY eq.EquipmentID, eq.EquipmentName, eq.Manufacturer, eq.Status\nORDER BY HighSeverityIncidentCount DESC, TotalMaintenanceCost DESC\nLIMIT 6;",
            "gigachat_response_ru": "SELECT \n    eq.EquipmentName,\n    eq.Manufacturer,\n    COUNT(si.IncidentID) AS HighSeverityIncidentCount,\n    SUM(mr.Cost) AS TotalMaintenanceCost,\n    GROUP_CONCAT(CONCAT(e.FirstName, ' ', e.LastName)) AS ResponsibleEngineers,\n    eq.Status\nFROM Equipment eq\nLEFT JOIN MaintenanceRecords mr ON eq.EquipmentID = mr.EquipmentID\nLEFT JOIN SafetyIncidents si ON eq.EquipmentID = si.EquipmentID\nLEFT JOIN Engineers e ON mr.EngineerID = e.EngineerID\nWHERE si.SeverityLevel = 'Высокий'\nAND mr.Cost > 2000\nGROUP BY eq.EquipmentID, eq.EquipmentName, eq.Manufacturer, eq.Status\nORDER BY HighSeverityIncidentCount DESC, TotalMaintenanceCost DESC\nLIMIT 6;"
        },
        {
            "question": "Найти клиентов с наибольшим количеством проектов в статусе 'В процессе' и общим бюджетом более 15 миллионов рублей. В ответе будут показаны: название клиента, количество активных проектов, общий бюджет проектов, средняя продолжительность проектов в днях и список руководителей проектов. Результаты отсортированы по количеству активных проектов и общему бюджету, показаны топ-4 записи.",
            "sql_query": "WITH ClientActiveProjects AS (\n    SELECT \n        c.ClientID,\n        c.ClientName,\n        COUNT(p.ProjectID) as ActiveProjectCount,\n        SUM(p.Budget) as TotalBudget,\n        AVG(DATEDIFF(p.EndDate, p.StartDate)) as AvgProjectDuration,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as ProjectManagers\n    FROM Clients c\n    JOIN Projects p ON c.ClientID = p.ClientID\n    JOIN Engineers e ON p.ProjectManagerID = e.EngineerID\n    WHERE p.Status = 'В процессе'\n    GROUP BY c.ClientID, c.ClientName\n    HAVING SUM(p.Budget) > 15000000\n)\nSELECT \n    ClientName,\n    ActiveProjectCount,\n    ROUND(TotalBudget, 2) as TotalBudget,\n    ROUND(AvgProjectDuration, 1) as AvgProjectDurationDays,\n    ProjectManagers\nFROM ClientActiveProjects\nORDER BY ActiveProjectCount DESC, TotalBudget DESC\nLIMIT 4;",
            "gpt-4o_response": "WITH ClientProjectStats AS (\n    SELECT \n        c.ClientID,\n        c.ClientName,\n        COUNT(p.ProjectID) AS ActiveProjectCount,\n        SUM(p.Budget) AS TotalBudget,\n        AVG(DATEDIFF(p.EndDate, p.StartDate)) AS AvgProjectDuration,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS ProjectManagers\n    FROM Clients c\n    JOIN Projects p ON c.ClientID = p.ClientID\n    LEFT JOIN Engineers e ON p.ProjectManagerID = e.EngineerID\n    WHERE p.Status = 'В процессе'\n    GROUP BY c.ClientID, c.ClientName\n    HAVING SUM(p.Budget) > 15000000\n)\nSELECT \n    ClientName,\n    ActiveProjectCount,\n    ROUND(TotalBudget, 2) AS TotalBudget,\n    ROUND(AvgProjectDuration, 2) AS AvgProjectDuration,\n    ProjectManagers\nFROM ClientProjectStats\nORDER BY ActiveProjectCount DESC, TotalBudget DESC\nLIMIT 4;",
            "gpt-4o_response_ru": "WITH ClientProjectStats AS (\n    SELECT \n        c.ClientID,\n        c.ClientName,\n        COUNT(p.ProjectID) AS ActiveProjectsCount,\n        SUM(p.Budget) AS TotalBudget,\n        AVG(DATEDIFF(p.EndDate, p.StartDate)) AS AvgProjectDuration,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS ProjectManagers\n    FROM Clients c\n    JOIN Projects p ON c.ClientID = p.ClientID\n    JOIN Engineers e ON p.ProjectManagerID = e.EngineerID\n    WHERE p.Status = 'В процессе'\n    GROUP BY c.ClientID, c.ClientName\n    HAVING SUM(p.Budget) > 15000000\n)\nSELECT \n    ClientName,\n    ActiveProjectsCount,\n    ROUND(TotalBudget, 2) AS TotalBudget,\n    ROUND(AvgProjectDuration, 2) AS AvgProjectDuration,\n    ProjectManagers\nFROM ClientProjectStats\nORDER BY ActiveProjectsCount DESC, TotalBudget DESC\nLIMIT 4;",
            "google/gemini-2.0-flash-001_response": "WITH ClientProjectStats AS (\n    SELECT \n        c.ClientID,\n        c.ClientName,\n        COUNT(p.ProjectID) AS ActiveProjectsCount,\n        SUM(p.Budget) AS TotalBudget,\n        AVG(JULIANDAY(p.EndDate) - JULIANDAY(p.StartDate)) AS AvgProjectDuration,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS ProjectManagers\n    FROM Clients c\n    JOIN Projects p ON c.ClientID = p.ClientID\n    JOIN Engineers e ON p.ProjectManagerID = e.EngineerID\n    WHERE p.Status = 'В процессе'\n    GROUP BY c.ClientID, c.ClientName\n    HAVING SUM(p.Budget) > 15000000\n)\nSELECT \n    ClientName,\n    ActiveProjectsCount,\n    TotalBudget,\n    ROUND(AvgProjectDuration, 2) AS AvgProjectDuration,\n    ProjectManagers\nFROM ClientProjectStats\nORDER BY ActiveProjectsCount DESC, TotalBudget DESC\nLIMIT 4;",
            "google/gemini-2.0-flash-001_response_ru": "WITH ClientProjectStats AS (\n    SELECT \n        c.ClientID,\n        c.ClientName,\n        COUNT(p.ProjectID) AS ActiveProjectCount,\n        SUM(p.Budget) AS TotalBudget,\n        AVG(DATEDIFF(p.EndDate, p.StartDate)) AS AvgProjectDuration,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS ProjectManagers\n    FROM Clients c\n    JOIN Projects p ON c.ClientID = p.ClientID\n    LEFT JOIN Engineers e ON p.ProjectManagerID = e.EngineerID\n    WHERE p.Status = 'В процессе'\n    GROUP BY c.ClientID, c.ClientName\n    HAVING SUM(p.Budget) > 15000000\n)\nSELECT \n    ClientName,\n    ActiveProjectCount,\n    ROUND(TotalBudget, 2) AS TotalBudget,\n    ROUND(AvgProjectDuration, 2) AS AvgProjectDuration,\n    ProjectManagers\nFROM ClientProjectStats\nORDER BY ActiveProjectCount DESC, TotalBudget DESC\nLIMIT 4;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH ClientProjectStats AS (\n    SELECT \n        c.ClientName,\n        COUNT(p.ProjectID) as ActiveProjectCount,\n        SUM(p.Budget) as TotalBudget,\n        AVG(DATEDIFF(p.EndDate, p.StartDate)) as AvgProjectDuration,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as ProjectManagers\n    FROM Clients c\n    JOIN Projects p ON c.ClientID = p.ClientID\n    JOIN Engineers e ON p.ProjectManagerID = e.EngineerID\n    WHERE p.Status = 'В процессе'\n    GROUP BY c.ClientName\n    HAVING SUM(p.Budget) > 15000000\n)\nSELECT \n    ClientName,\n    ActiveProjectCount,\n    ROUND(TotalBudget, 2) as TotalBudget,\n    ROUND(AvgProjectDuration, 2) as AvgProjectDuration,\n    ProjectManagers\nFROM ClientProjectStats\nORDER BY ActiveProjectCount DESC, TotalBudget DESC\nLIMIT 4;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH ClientProjectStats AS (\n    SELECT \n        c.ClientName,\n        COUNT(p.ProjectID) as ActiveProjectCount,\n        SUM(p.Budget) as TotalBudget,\n        AVG(DATEDIFF(p.EndDate, p.StartDate)) as AvgProjectDuration,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as ProjectManagers\n    FROM Clients c\n    JOIN Projects p ON c.ClientID = p.ClientID\n    JOIN Engineers e ON p.ProjectManagerID = e.EngineerID\n    WHERE p.Status = 'В процессе'\n    GROUP BY c.ClientName\n    HAVING SUM(p.Budget) > 15000000\n)\nSELECT \n    ClientName,\n    ActiveProjectCount,\n    ROUND(TotalBudget, 2) as TotalBudget,\n    ROUND(AvgProjectDuration, 2) as AvgProjectDuration,\n    ProjectManagers\nFROM ClientProjectStats\nORDER BY ActiveProjectCount DESC, TotalBudget DESC\nLIMIT 4;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH ClientProjectStats AS (\n    SELECT \n        c.ClientID,\n        c.ClientName,\n        COUNT(p.ProjectID) AS ActiveProjectCount,\n        SUM(p.Budget) AS TotalBudget,\n        AVG(DATEDIFF(p.EndDate, p.StartDate)) AS AvgProjectDuration,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS ProjectManagers\n    FROM Clients c\n    JOIN Projects p ON c.ClientID = p.ClientID\n    JOIN Engineers e ON p.ProjectManagerID = e.EngineerID\n    WHERE p.Status = 'В процессе'\n    GROUP BY c.ClientID, c.ClientName\n    HAVING SUM(p.Budget) > 15000000\n)\nSELECT \n    ClientName,\n    ActiveProjectCount,\n    TotalBudget,\n    ROUND(AvgProjectDuration, 2) AS AvgProjectDurationDays,\n    ProjectManagers\nFROM ClientProjectStats\nORDER BY ActiveProjectCount DESC, TotalBudget DESC\nLIMIT 4;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "WITH ClientProjectStats AS (\n    SELECT \n        c.ClientID,\n        c.ClientName,\n        COUNT(p.ProjectID) AS ActiveProjectCount,\n        SUM(p.Budget) AS TotalBudget,\n        AVG(DATEDIFF(p.EndDate, p.StartDate)) AS AvgProjectDuration,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS ProjectManagers\n    FROM Clients c\n    JOIN Projects p ON c.ClientID = p.ClientID\n    JOIN Engineers e ON p.ProjectManagerID = e.EngineerID\n    WHERE p.Status = 'В процессе'\n    GROUP BY c.ClientID, c.ClientName\n    HAVING SUM(p.Budget) > 15000000\n)\nSELECT \n    ClientName,\n    ActiveProjectCount,\n    TotalBudget,\n    ROUND(AvgProjectDuration, 2) AS AvgProjectDuration,\n    ProjectManagers\nFROM ClientProjectStats\nORDER BY ActiveProjectCount DESC, TotalBudget DESC\nLIMIT 4;",
            "gigachat_response": "WITH ActiveProjects AS (\n    SELECT \n        cl.ClientID,\n        cl.ClientName,\n        COUNT(pr.ProjectID) AS ActiveProjectCount,\n        SUM(pr.Budget) AS TotalBudget,\n        AVG(DATEDIFF(pr.EndDate, pr.StartDate)) AS AverageProjectDurationDays,\n        GROUP_CONCAT(CONCAT(en.FirstName, ' ', en.LastName)) AS ProjectManagersList\n    FROM Clients cl\n    JOIN Projects pr ON cl.ClientID = pr.ClientID\n    JOIN Engineers en ON pr.ProjectManagerID = en.EngineerID\n    WHERE pr.Status = 'В процессе'\n    GROUP BY cl.ClientID, cl.ClientName\n    HAVING SUM(pr.Budget) > 15000000\n)\nSELECT *\nFROM ActiveProjects\nORDER BY ActiveProjectCount DESC, TotalBudget DESC\nLIMIT 4;",
            "gigachat_response_ru": "WITH ActiveProjects AS (\n    SELECT \n        cl.ClientID,\n        cl.ClientName,\n        COUNT(pr.ProjectID) AS ProjectCount,\n        SUM(pr.Budget) AS TotalBudget,\n        AVG(DATEDIFF(pr.EndDate, pr.StartDate)) AS AverageProjectDurationDays,\n        GROUP_CONCAT(CONCAT(en.FirstName, ' ', en.LastName)) AS ProjectManagersList\n    FROM Clients cl\n    JOIN Projects pr ON cl.ClientID = pr.ClientID\n    JOIN Engineers en ON pr.ProjectManagerID = en.EngineerID\n    WHERE pr.Status = 'В процессе'\n    GROUP BY cl.ClientID, cl.ClientName\n    HAVING SUM(pr.Budget) > 15000000\n)\nSELECT *\nFROM ActiveProjects\nORDER BY ProjectCount DESC, TotalBudget DESC\nLIMIT 4;"
        },
        {
            "question": "Найти проекты, где количество инженеров с сертификатами уровня 'Продвинутый' или 'Эксперт' превышает среднее по всем проектам. В ответе будут показаны: название проекта, количество квалифицированных инженеров, средний стаж работы инженеров в годах, общий бюджет проекта и список сертификатов. Результаты отсортированы по количеству квалифицированных инженеров и бюджету проекта, показаны топ-3 записи.",
            "sql_query": "WITH ProjectEngineerStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        COUNT(DISTINCT e.EngineerID) as QualifiedEngineers,\n        AVG(DATEDIFF(CURDATE(), e.HireDate)) as AvgExperienceDays,\n        p.Budget as ProjectBudget,\n        GROUP_CONCAT(DISTINCT c.CertificationName) as Certifications\n    FROM Projects p\n    JOIN Engineers e ON e.DepartmentID = p.DepartmentID\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    AND c.Status = 'Действителен'\n    GROUP BY p.ProjectID, p.ProjectName, p.Budget\n    HAVING COUNT(DISTINCT e.EngineerID) > (\n        SELECT AVG(EngineerCount)\n        FROM (\n            SELECT COUNT(DISTINCT e.EngineerID) as EngineerCount\n            FROM Projects p\n            JOIN Engineers e ON e.DepartmentID = p.DepartmentID\n            JOIN Certifications c ON e.EngineerID = c.EngineerID\n            WHERE c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n            AND c.Status = 'Действителен'\n            GROUP BY p.ProjectID\n        ) as AvgCounts\n    )\n)\nSELECT \n    ProjectName,\n    QualifiedEngineers,\n    ROUND(AvgExperienceDays/365, 1) as AvgExperienceYears,\n    ROUND(ProjectBudget, 2) as ProjectBudget,\n    Certifications\nFROM ProjectEngineerStats\nORDER BY QualifiedEngineers DESC, ProjectBudget DESC\nLIMIT 3;",
            "gpt-4o_response": "WITH QualifiedEngineers AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        COUNT(DISTINCT e.EngineerID) AS QualifiedEngineerCount,\n        AVG(DATEDIFF(CURDATE(), e.HireDate) / 365) AS AvgExperienceYears,\n        p.Budget AS ProjectBudget,\n        GROUP_CONCAT(DISTINCT c.CertificationName) AS Certifications\n    FROM Projects p\n    JOIN Engineers e ON p.ProjectManagerID = e.EngineerID\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    GROUP BY p.ProjectID, p.ProjectName, p.Budget\n),\nAverageQualifiedEngineers AS (\n    SELECT AVG(QualifiedEngineerCount) AS AvgQualifiedEngineers\n    FROM QualifiedEngineers\n)\nSELECT \n    qe.ProjectName,\n    qe.QualifiedEngineerCount,\n    ROUND(qe.AvgExperienceYears, 2) AS AvgExperienceYears,\n    qe.ProjectBudget,\n    qe.Certifications\nFROM QualifiedEngineers qe\nJOIN AverageQualifiedEngineers aqe ON qe.QualifiedEngineerCount > aqe.AvgQualifiedEngineers\nORDER BY qe.QualifiedEngineerCount DESC, qe.ProjectBudget DESC\nLIMIT 3;",
            "gpt-4o_response_ru": "WITH QualifiedEngineers AS (\n    SELECT \n        c.EngineerID,\n        c.CertificationLevel,\n        c.CertificationName\n    FROM Certifications c\n    WHERE c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n),\nProjectEngineerStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        COUNT(DISTINCT qe.EngineerID) AS QualifiedEngineerCount,\n        AVG(DATEDIFF(CURDATE(), e.HireDate) / 365) AS AvgExperienceYears,\n        p.Budget AS ProjectBudget,\n        GROUP_CONCAT(DISTINCT qe.CertificationName) AS Certifications\n    FROM Projects p\n    JOIN Engineers e ON p.ProjectManagerID = e.EngineerID\n    JOIN QualifiedEngineers qe ON e.EngineerID = qe.EngineerID\n    GROUP BY p.ProjectID, p.ProjectName, p.Budget\n),\nAverageQualifiedEngineers AS (\n    SELECT AVG(QualifiedEngineerCount) AS AvgQualifiedEngineers\n    FROM ProjectEngineerStats\n)\nSELECT \n    pes.ProjectName,\n    pes.QualifiedEngineerCount,\n    ROUND(pes.AvgExperienceYears, 2) AS AvgExperienceYears,\n    pes.ProjectBudget,\n    pes.Certifications\nFROM ProjectEngineerStats pes\nJOIN AverageQualifiedEngineers aqe ON pes.QualifiedEngineerCount > aqe.AvgQualifiedEngineers\nORDER BY pes.QualifiedEngineerCount DESC, pes.ProjectBudget DESC\nLIMIT 3;",
            "google/gemini-2.0-flash-001_response": "WITH ProjectQualifiedEngineers AS (\n    SELECT\n        p.ProjectID,\n        p.ProjectName,\n        COUNT(DISTINCT c.EngineerID) AS QualifiedEngineersCount,\n        AVG(DATEDIFF(CURDATE(), e.HireDate)) / 365 AS AvgEngineerExperience,\n        p.Budget,\n        GROUP_CONCAT(DISTINCT c.CertificationName) AS CertificationsList\n    FROM Projects p\n    JOIN Tasks t ON p.ProjectID = t.ProjectID\n    JOIN Engineers e ON t.AssignedTo = e.EngineerID\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    GROUP BY p.ProjectID, p.ProjectName, p.Budget\n),\nAvgQualifiedEngineers AS (\n    SELECT AVG(QualifiedEngineersCount) AS AvgCount FROM ProjectQualifiedEngineers\n)\nSELECT\n    pqe.ProjectName,\n    pqe.QualifiedEngineersCount,\n    ROUND(pqe.AvgEngineerExperience, 2) AS AvgEngineerExperience,\n    pqe.Budget,\n    pqe.CertificationsList\nFROM ProjectQualifiedEngineers pqe, AvgQualifiedEngineers aqe\nWHERE pqe.QualifiedEngineersCount > aqe.AvgCount\nORDER BY pqe.QualifiedEngineersCount DESC, pqe.Budget DESC\nLIMIT 3;",
            "google/gemini-2.0-flash-001_response_ru": "WITH QualifiedEngineers AS (\n    SELECT\n        c.EngineerID,\n        COUNT(DISTINCT c.CertificationID) AS QualifiedCertifications\n    FROM Certifications c\n    WHERE c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    GROUP BY c.EngineerID\n),\nProjectQualifiedEngineers AS (\n    SELECT\n        p.ProjectID,\n        p.ProjectName,\n        COUNT(DISTINCT qe.EngineerID) AS QualifiedEngineersCount,\n        AVG(DATEDIFF(CURDATE(), e.HireDate) / 365) AS AvgEngineerExperience,\n        p.Budget AS ProjectBudget,\n        GROUP_CONCAT(DISTINCT c.CertificationName) AS CertificationList\n    FROM Projects p\n    JOIN Tasks t ON p.ProjectID = t.ProjectID\n    JOIN Engineers e ON t.AssignedTo = e.EngineerID\n    LEFT JOIN QualifiedEngineers qe ON e.EngineerID = qe.EngineerID\n    LEFT JOIN Certifications c ON e.EngineerID = c.EngineerID AND c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    WHERE qe.QualifiedCertifications > 0\n    GROUP BY p.ProjectID, p.ProjectName, p.Budget\n),\nAverageQualifiedEngineers AS (\n    SELECT AVG(QualifiedEngineersCount) AS AvgQualifiedEngineers\n    FROM ProjectQualifiedEngineers\n)\nSELECT\n    pqe.ProjectName,\n    pqe.QualifiedEngineersCount,\n    ROUND(pqe.AvgEngineerExperience, 2) AS AvgEngineerExperience,\n    pqe.ProjectBudget,\n    pqe.CertificationList\nFROM ProjectQualifiedEngineers pqe, AverageQualifiedEngineers aqe\nWHERE pqe.QualifiedEngineersCount > aqe.AvgQualifiedEngineers\nORDER BY pqe.QualifiedEngineersCount DESC, pqe.ProjectBudget DESC\nLIMIT 3;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH ProjectEngineerStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        COUNT(DISTINCT e.EngineerID) as QualifiedEngineerCount,\n        AVG(TIMESTAMPDIFF(YEAR, e.HireDate, CURDATE())) as AvgEngineerExperience,\n        p.Budget as ProjectBudget,\n        GROUP_CONCAT(DISTINCT c.CertificationName) as Certifications\n    FROM Projects p\n    JOIN Tasks t ON p.ProjectID = t.ProjectID\n    JOIN Engineers e ON t.AssignedTo = e.EngineerID\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    GROUP BY p.ProjectID, p.ProjectName, p.Budget\n),\nAverageQualifiedEngineers AS (\n    SELECT AVG(QualifiedEngineerCount) as AverageCount\n    FROM ProjectEngineerStats\n)\nSELECT \n    pes.ProjectName,\n    pes.QualifiedEngineerCount,\n    pes.AvgEngineerExperience,\n    pes.ProjectBudget,\n    pes.Certifications\nFROM ProjectEngineerStats pes\nJOIN AverageQualifiedEngineers aqe ON 1 = 1\nWHERE pes.QualifiedEngineerCount > aqe.AverageCount\nORDER BY pes.QualifiedEngineerCount DESC, pes.ProjectBudget DESC\nLIMIT 3;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH ProjectEngineerStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        COUNT(DISTINCT e.EngineerID) as QualifiedEngineerCount,\n        AVG(TIMESTAMPDIFF(YEAR, e.HireDate, CURDATE())) as AvgEngineerExperience,\n        p.Budget as ProjectBudget,\n        GROUP_CONCAT(DISTINCT c.CertificationName) as Certifications\n    FROM Projects p\n    JOIN Tasks t ON p.ProjectID = t.ProjectID\n    JOIN Engineers e ON t.AssignedTo = e.EngineerID\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    GROUP BY p.ProjectID, p.ProjectName, p.Budget\n),\nAverageQualifiedEngineers AS (\n    SELECT AVG(QualifiedEngineerCount) as AverageCount\n    FROM ProjectEngineerStats\n)\nSELECT \n    pes.ProjectName,\n    pes.QualifiedEngineerCount,\n    pes.AvgEngineerExperience,\n    pes.ProjectBudget,\n    pes.Certifications\nFROM ProjectEngineerStats pes\nJOIN AverageQualifiedEngineers aqe\nWHERE pes.QualifiedEngineerCount > aqe.AverageCount\nORDER BY pes.QualifiedEngineerCount DESC, pes.ProjectBudget DESC\nLIMIT 3;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH CertifiedEngineers AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        COUNT(DISTINCT e.EngineerID) AS CertifiedEngineerCount,\n        AVG(DATEDIFF(CURDATE(), e.HireDate)/365) AS AvgExperienceYears,\n        p.Budget,\n        GROUP_CONCAT(DISTINCT c.CertificationName) AS Certifications\n    FROM Projects p\n    JOIN Engineers e ON p.ProjectManagerID = e.EngineerID\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    AND c.Status = 'Действителен'\n    GROUP BY p.ProjectID, p.ProjectName, p.Budget\n),\nAvgCertifiedEngineers AS (\n    SELECT AVG(CertifiedEngineerCount) AS AvgCount\n    FROM CertifiedEngineers\n)\nSELECT \n    ce.ProjectName,\n    ce.CertifiedEngineerCount,\n    ROUND(ce.AvgExperienceYears, 2) AS AvgExperienceYears,\n    ce.Budget,\n    ce.Certifications\nFROM CertifiedEngineers ce, AvgCertifiedEngineers ace\nWHERE ce.CertifiedEngineerCount > ace.AvgCount\nORDER BY ce.CertifiedEngineerCount DESC, ce.Budget DESC\nLIMIT 3;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "WITH CertifiedEngineers AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        COUNT(DISTINCT e.EngineerID) AS CertifiedEngineerCount,\n        AVG(YEAR(CURDATE()) - YEAR(e.HireDate)) AS AvgExperience,\n        p.Budget,\n        GROUP_CONCAT(DISTINCT c.CertificationName) AS Certifications\n    FROM Projects p\n    JOIN Engineers e ON p.DepartmentID = e.DepartmentID\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    AND c.Status = 'Действителен'\n    GROUP BY p.ProjectID, p.ProjectName, p.Budget\n),\nAvgCertifiedEngineers AS (\n    SELECT AVG(CertifiedEngineerCount) AS AvgCount\n    FROM CertifiedEngineers\n)\nSELECT \n    ce.ProjectName,\n    ce.CertifiedEngineerCount,\n    ROUND(ce.AvgExperience, 2) AS AvgExperienceYears,\n    ce.Budget,\n    ce.Certifications\nFROM CertifiedEngineers ce, AvgCertifiedEngineers ace\nWHERE ce.CertifiedEngineerCount > ace.AvgCount\nORDER BY ce.CertifiedEngineerCount DESC, ce.Budget DESC\nLIMIT 3;",
            "gigachat_response": "WITH CertifiedEngineersPerProject AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        COUNT(DISTINCT e.EngineerID) AS QualifiedEngineersCount,\n        AVG(YEAR(CURRENT_DATE()) - YEAR(e.HireDate)) AS AverageExperienceYears,\n        p.Budget AS ProjectBudget,\n        GROUP_CONCAT(DISTINCT c.CertificationName ORDER BY c.CertificationName SEPARATOR ', ') AS CertificateList\n    FROM Projects p\n    INNER JOIN Engineers e ON p.ProjectManagerID = e.EngineerID OR p.ProjectID IN (\n        SELECT DISTINCT ProjectID FROM Tasks WHERE AssignedTo = e.EngineerID\n    )\n    INNER JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    GROUP BY p.ProjectID, p.ProjectName, p.Budget\n),\nAverageQualifiedEngineers AS (\n    SELECT AVG(QualifiedEngineersCount) AS AverageQualEngCount\n    FROM CertifiedEngineersPerProject\n)\nSELECT \n    ProjectName,\n    QualifiedEngineersCount,\n    ROUND(AverageExperienceYears, 2) AS AverageExperienceYears,\n    ProjectBudget,\n    CertificateList\nFROM CertifiedEngineersPerProject\nWHERE QualifiedEngineersCount > (SELECT AverageQualEngCount FROM AverageQualifiedEngineers)\nORDER BY QualifiedEngineersCount DESC, ProjectBudget DESC\nLIMIT 3;",
            "gigachat_response_ru": "WITH QualifiedEngineersPerProject AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        COUNT(DISTINCT e.EngineerID) AS NumQualifiedEngineers,\n        AVG(YEAR(CURRENT_DATE()) - YEAR(e.HireDate)) AS AverageExperienceYears,\n        p.Budget AS ProjectBudget,\n        GROUP_CONCAT(DISTINCT c.CertificationName ORDER BY c.CertificationName SEPARATOR ', ') AS CertificateList\n    FROM Projects p\n    INNER JOIN Engineers e ON p.ProjectManagerID = e.EngineerID OR p.ProjectID IN (\n        SELECT DISTINCT ProjectID FROM Tasks WHERE AssignedTo = e.EngineerID\n    )\n    INNER JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    GROUP BY p.ProjectID, p.ProjectName, p.Budget\n),\nAverageQualifiedEngineers AS (\n    SELECT AVG(NumQualifiedEngineers) AS AverageNumQualifiedEngineers\n    FROM QualifiedEngineersPerProject\n)\nSELECT \n    qepp.ProjectName,\n    qepp.NumQualifiedEngineers,\n    ROUND(qepp.AverageExperienceYears, 2) AS AverageExperienceYears,\n    qepp.ProjectBudget,\n    qepp.CertificateList\nFROM QualifiedEngineersPerProject qepp\nINNER JOIN AverageQualifiedEngineers aqe ON qepp.NumQualifiedEngineers > aqe.AverageNumQualifiedEngineers\nORDER BY qepp.NumQualifiedEngineers DESC, qepp.ProjectBudget DESC\nLIMIT 3;"
        },
        {
            "question": "Найти отделы с наибольшим количеством оборудования, требующего срочного обслуживания (следующее обслуживание в течение месяца). В ответе будут показаны: название отдела, количество единиц оборудования, общая стоимость предстоящего обслуживания, список оборудования с производителями и средний возраст оборудования в годах. Результаты отсортированы по количеству единиц оборудования и стоимости обслуживания, показаны топ-4 записи.",
            "sql_query": "WITH LatestMaintenance AS (\n    SELECT \n        EquipmentID,\n        Cost,\n        NextScheduledDate,\n        ROW_NUMBER() OVER (PARTITION BY EquipmentID ORDER BY MaintenanceDate DESC) as rn\n    FROM MaintenanceRecords\n),\nDepartmentEquipmentStats AS (\n    SELECT \n        d.DepartmentID,\n        d.DepartmentName,\n        COUNT(DISTINCT e.EquipmentID) as EquipmentCount,\n        SUM(lm.Cost) as TotalMaintenanceCost,\n        GROUP_CONCAT(DISTINCT CONCAT(e.EquipmentName, ' (', e.Manufacturer, ')')) as EquipmentList,\n        AVG(TIMESTAMPDIFF(YEAR, e.PurchaseDate, CURRENT_DATE)) as AvgEquipmentAge\n    FROM Departments d\n    JOIN Equipment e ON d.DepartmentID = e.DepartmentID\n    JOIN LatestMaintenance lm ON e.EquipmentID = lm.EquipmentID AND lm.rn = 1\n    WHERE lm.NextScheduledDate BETWEEN CURRENT_DATE AND DATE_ADD(CURRENT_DATE, INTERVAL 1 MONTH)\n    AND e.Status = 'В работе'\n    GROUP BY d.DepartmentID, d.DepartmentName\n)\nSELECT \n    DepartmentName,\n    EquipmentCount,\n    TotalMaintenanceCost,\n    EquipmentList,\n    ROUND(AvgEquipmentAge, 2) as AvgEquipmentAge\nFROM DepartmentEquipmentStats\nORDER BY EquipmentCount DESC, TotalMaintenanceCost DESC\nLIMIT 4;",
            "gpt-4o_response": "WITH EquipmentMaintenanceStats AS (\n    SELECT \n        e.DepartmentID,\n        d.DepartmentName,\n        COUNT(eq.EquipmentID) AS EquipmentCount,\n        SUM(mr.Cost) AS TotalMaintenanceCost,\n        GROUP_CONCAT(DISTINCT CONCAT(eq.EquipmentName, ' (', eq.Manufacturer, ')')) AS EquipmentList,\n        AVG(DATEDIFF(CURDATE(), eq.PurchaseDate) / 365) AS AvgEquipmentAge\n    FROM Equipment eq\n    JOIN Departments d ON eq.DepartmentID = d.DepartmentID\n    JOIN MaintenanceRecords mr ON eq.EquipmentID = mr.EquipmentID\n    WHERE mr.NextScheduledDate BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 MONTH)\n    GROUP BY e.DepartmentID, d.DepartmentName\n)\nSELECT \n    DepartmentName,\n    EquipmentCount,\n    ROUND(TotalMaintenanceCost, 2) AS TotalMaintenanceCost,\n    EquipmentList,\n    ROUND(AvgEquipmentAge, 2) AS AvgEquipmentAge\nFROM EquipmentMaintenanceStats\nORDER BY EquipmentCount DESC, TotalMaintenanceCost DESC\nLIMIT 4;",
            "gpt-4o_response_ru": "WITH EquipmentMaintenance AS (\n    SELECT \n        e.EquipmentID,\n        e.EquipmentName,\n        e.Manufacturer,\n        e.PurchaseDate,\n        e.DepartmentID,\n        DATEDIFF(CURDATE(), e.PurchaseDate) / 365 AS EquipmentAgeYears,\n        m.NextScheduledDate,\n        m.Cost\n    FROM Equipment e\n    JOIN MaintenanceRecords m ON e.EquipmentID = m.EquipmentID\n    WHERE m.NextScheduledDate BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 MONTH)\n),\nDepartmentEquipmentStats AS (\n    SELECT \n        d.DepartmentName,\n        COUNT(em.EquipmentID) AS EquipmentCount,\n        SUM(em.Cost) AS TotalMaintenanceCost,\n        GROUP_CONCAT(DISTINCT CONCAT(em.EquipmentName, ' (', em.Manufacturer, ')')) AS EquipmentList,\n        AVG(em.EquipmentAgeYears) AS AvgEquipmentAge\n    FROM Departments d\n    JOIN EquipmentMaintenance em ON d.DepartmentID = em.DepartmentID\n    GROUP BY d.DepartmentName\n)\nSELECT \n    DepartmentName,\n    EquipmentCount,\n    ROUND(TotalMaintenanceCost, 2) AS TotalMaintenanceCost,\n    EquipmentList,\n    ROUND(AvgEquipmentAge, 2) AS AvgEquipmentAge\nFROM DepartmentEquipmentStats\nORDER BY EquipmentCount DESC, TotalMaintenanceCost DESC\nLIMIT 4;",
            "google/gemini-2.0-flash-001_response": "WITH UpcomingMaintenance AS (\n    SELECT\n        e.DepartmentID,\n        e.EquipmentID,\n        e.EquipmentName,\n        e.Manufacturer,\n        mr.NextScheduledDate,\n        mr.Cost\n    FROM\n        Equipment e\n    JOIN\n        MaintenanceRecords mr ON e.EquipmentID = mr.EquipmentID\n    WHERE\n        mr.NextScheduledDate BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 MONTH)\n),\nDepartmentEquipment AS (\n    SELECT\n        d.DepartmentID,\n        d.DepartmentName,\n        COUNT(um.EquipmentID) AS EquipmentCount,\n        SUM(um.Cost) AS TotalMaintenanceCost,\n        GROUP_CONCAT(DISTINCT CONCAT(um.EquipmentName, ' (', um.Manufacturer, ')')) AS EquipmentList\n    FROM\n        Departments d\n    JOIN\n        UpcomingMaintenance um ON d.DepartmentID = um.DepartmentID\n    GROUP BY\n        d.DepartmentID, d.DepartmentName\n),\nEquipmentAge AS (\n    SELECT\n        e.DepartmentID,\n        AVG(YEAR(CURDATE()) - YEAR(e.PurchaseDate)) AS AverageEquipmentAge\n    FROM\n        Equipment e\n    GROUP BY\n        e.DepartmentID\n)\nSELECT\n    de.DepartmentName,\n    de.EquipmentCount,\n    ROUND(de.TotalMaintenanceCost, 2) AS TotalMaintenanceCost,\n    de.EquipmentList,\n    ROUND(ea.AverageEquipmentAge, 2) AS AverageEquipmentAge\nFROM\n    DepartmentEquipment de\nJOIN\n    EquipmentAge ea ON de.DepartmentID = ea.DepartmentID\nORDER BY\n    de.EquipmentCount DESC, de.TotalMaintenanceCost DESC\nLIMIT 4;",
            "google/gemini-2.0-flash-001_response_ru": "WITH UpcomingMaintenance AS (\n    SELECT\n        mr.EquipmentID,\n        mr.NextScheduledDate,\n        mr.Cost,\n        e.DepartmentID,\n        e.EquipmentName,\n        e.Manufacturer\n    FROM MaintenanceRecords mr\n    JOIN Equipment e ON mr.EquipmentID = e.EquipmentID\n    WHERE mr.NextScheduledDate BETWEEN DATE('now') AND DATE('now', '+1 month')\n),\nDepartmentEquipment AS (\n    SELECT\n        d.DepartmentID,\n        d.DepartmentName,\n        COUNT(um.EquipmentID) AS EquipmentCount,\n        SUM(um.Cost) AS TotalMaintenanceCost,\n        GROUP_CONCAT(DISTINCT um.EquipmentName || ' (' || um.Manufacturer || ')') AS EquipmentList\n    FROM Departments d\n    JOIN UpcomingMaintenance um ON d.DepartmentID = um.DepartmentID\n    GROUP BY d.DepartmentID, d.DepartmentName\n),\nEquipmentAges AS (\n    SELECT\n        e.DepartmentID,\n        AVG(CAST(strftime('%Y', 'now') AS INTEGER) - CAST(strftime('%Y', e.PurchaseDate) AS INTEGER)) AS AvgEquipmentAge\n    FROM Equipment e\n    WHERE e.EquipmentID IN (SELECT EquipmentID FROM UpcomingMaintenance)\n    GROUP BY e.DepartmentID\n)\nSELECT\n    de.DepartmentName,\n    de.EquipmentCount,\n    ROUND(de.TotalMaintenanceCost, 2) AS TotalMaintenanceCost,\n    de.EquipmentList,\n    ROUND(ea.AvgEquipmentAge, 2) AS AvgEquipmentAge\nFROM DepartmentEquipment de\nJOIN EquipmentAges ea ON de.DepartmentID = ea.DepartmentID\nORDER BY de.EquipmentCount DESC, de.TotalMaintenanceCost DESC\nLIMIT 4;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH DepartmentEquipmentStats AS (\n    SELECT \n        d.DepartmentID,\n        d.DepartmentName,\n        COUNT(e.EquipmentID) as EquipmentCount,\n        SUM(mr.Cost) as TotalMaintenanceCost,\n        GROUP_CONCAT(DISTINCT CONCAT(e.EquipmentName, ' (', e.Manufacturer, ')')) as EquipmentList,\n        AVG(TIMESTAMPDIFF(YEAR, e.PurchaseDate, CURDATE())) as AverageEquipmentAge\n    FROM Departments d\n    JOIN Equipment e ON d.DepartmentID = e.DepartmentID\n    JOIN MaintenanceRecords mr ON e.EquipmentID = mr.EquipmentID\n    WHERE mr.NextScheduledDate BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 MONTH)\n    GROUP BY d.DepartmentID, d.DepartmentName\n)\nSELECT \n    DepartmentName,\n    EquipmentCount,\n    ROUND(TotalMaintenanceCost, 2) as TotalMaintenanceCost,\n    EquipmentList,\n    ROUND(AverageEquipmentAge, 2) as AverageEquipmentAge\nFROM DepartmentEquipmentStats\nORDER BY EquipmentCount DESC, TotalMaintenanceCost DESC\nLIMIT 4;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH DepartmentEquipmentStats AS (\n    SELECT \n        d.DepartmentName,\n        COUNT(e.EquipmentID) as EquipmentCount,\n        SUM(mr.Cost) as TotalMaintenanceCost,\n        GROUP_CONCAT(DISTINCT CONCAT(e.EquipmentName, ' (', e.Manufacturer, ')')) as EquipmentList,\n        AVG(TIMESTAMPDIFF(YEAR, e.PurchaseDate, CURDATE())) as AverageEquipmentAge\n    FROM Departments d\n    JOIN Equipment e ON d.DepartmentID = e.DepartmentID\n    JOIN MaintenanceRecords mr ON e.EquipmentID = mr.EquipmentID\n    WHERE mr.NextScheduledDate BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 MONTH)\n    GROUP BY d.DepartmentName\n)\nSELECT \n    DepartmentName,\n    EquipmentCount,\n    ROUND(TotalMaintenanceCost, 2) as TotalMaintenanceCost,\n    EquipmentList,\n    ROUND(AverageEquipmentAge, 2) as AverageEquipmentAge\nFROM DepartmentEquipmentStats\nORDER BY EquipmentCount DESC, TotalMaintenanceCost DESC\nLIMIT 4;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    d.DepartmentName,\n    COUNT(e.EquipmentID) AS EquipmentCount,\n    SUM(mr.Cost) AS TotalMaintenanceCost,\n    GROUP_CONCAT(DISTINCT CONCAT(e.EquipmentName, ' (', e.Manufacturer, ')') SEPARATOR ', ') AS EquipmentList,\n    AVG(YEAR(CURDATE()) - YEAR(e.PurchaseDate)) AS AvgEquipmentAge\nFROM Departments d\nJOIN Equipment e ON d.DepartmentID = e.DepartmentID\nJOIN MaintenanceRecords mr ON e.EquipmentID = mr.EquipmentID\nWHERE mr.NextScheduledDate BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 MONTH)\nGROUP BY d.DepartmentID\nORDER BY EquipmentCount DESC, TotalMaintenanceCost DESC\nLIMIT 4;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "WITH CriticalMaintenanceEquipment AS (\n    SELECT \n        e.EquipmentID,\n        e.EquipmentName,\n        e.Manufacturer,\n        e.DepartmentID,\n        DATEDIFF(CURDATE(), e.PurchaseDate) / 365 AS EquipmentAge,\n        mr.Cost AS MaintenanceCost\n    FROM Equipment e\n    JOIN MaintenanceRecords mr ON e.EquipmentID = mr.EquipmentID\n    WHERE mr.NextScheduledDate BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 MONTH)\n)\nSELECT \n    d.DepartmentName,\n    COUNT(cme.EquipmentID) AS EquipmentCount,\n    SUM(cme.MaintenanceCost) AS TotalMaintenanceCost,\n    GROUP_CONCAT(DISTINCT CONCAT(cme.EquipmentName, ' (', cme.Manufacturer, ')') SEPARATOR ', ') AS EquipmentList,\n    ROUND(AVG(cme.EquipmentAge), 2) AS AvgEquipmentAge\nFROM Departments d\nJOIN CriticalMaintenanceEquipment cme ON d.DepartmentID = cme.DepartmentID\nGROUP BY d.DepartmentID, d.DepartmentName\nORDER BY EquipmentCount DESC, TotalMaintenanceCost DESC\nLIMIT 4;",
            "gigachat_response": "WITH EquipmentMaintenance AS (\n    SELECT \n        eq.EquipmentID,\n        eq.Manufacturer,\n        mr.MaintenanceDate,\n        TIMESTAMPDIFF(YEAR, eq.PurchaseDate, CURRENT_DATE()) AS AgeYears,\n        mr.NextScheduledDate,\n        mr.Cost\n    FROM Equipment eq\n    INNER JOIN MaintenanceRecords mr ON eq.EquipmentID = mr.EquipmentID\n    WHERE mr.NextScheduledDate <= DATE_ADD(CURRENT_DATE(), INTERVAL 1 MONTH)\n),\nDepartmentEquipmentCounts AS (\n    SELECT \n        de.DepartmentID,\n        de.DepartmentName,\n        COUNT(em.EquipmentID) AS EquipmentCount,\n        SUM(em.Cost) AS TotalMaintenanceCost,\n        GROUP_CONCAT(CONCAT('(', em.EquipmentID, ') Производитель:', em.Manufacturer)) AS EquipmentList,\n        AVG(em.AgeYears) AS AverageAgeYears\n    FROM Departments de\n    LEFT JOIN Equipment eq ON de.DepartmentID = eq.DepartmentID\n    LEFT JOIN EquipmentMaintenance em ON eq.EquipmentID = em.EquipmentID\n    GROUP BY de.DepartmentID, de.DepartmentName\n    ORDER BY EquipmentCount DESC, TotalMaintenanceCost DESC\n)\nSELECT *\nFROM DepartmentEquipmentCounts\nWHERE EquipmentCount > 0\nLIMIT 4;",
            "gigachat_response_ru": "WITH EquipmentMaintenance AS (\n    SELECT \n        eq.EquipmentID,\n        eq.Manufacturer,\n        eq.PurchaseDate,\n        mr.MaintenanceDate,\n        mr.NextScheduledDate,\n        mr.Cost\n    FROM Equipment eq\n    INNER JOIN MaintenanceRecords mr ON eq.EquipmentID = mr.EquipmentID\n    WHERE mr.NextScheduledDate <= DATE_ADD(CURDATE(), INTERVAL 1 MONTH)\n),\nDepartmentEquipmentCounts AS (\n    SELECT \n        de.DepartmentID,\n        de.DepartmentName,\n        COUNT(eq.EquipmentID) AS EquipmentCount,\n        SUM(em.Cost) AS TotalMaintenanceCost,\n        AVG(YEAR(CURDATE()) - YEAR(PurchaseDate)) AS AverageAgeYears\n    FROM Departments de\n    INNER JOIN Equipment eq ON de.DepartmentID = eq.DepartmentID\n    INNER JOIN EquipmentMaintenance em ON eq.EquipmentID = em.EquipmentID\n    GROUP BY de.DepartmentID, de.DepartmentName\n)\nSELECT \n    dec.DepartmentName,\n    dec.EquipmentCount,\n    dec.TotalMaintenanceCost,\n    GROUP_CONCAT(CONCAT('(', eq.EquipmentName, ') Производитель:', eq.Manufacturer)) AS EquipmentList,\n    dec.AverageAgeYears\nFROM DepartmentEquipmentCounts dec\nINNER JOIN Equipment eq ON dec.DepartmentID = eq.DepartmentID\nGROUP BY dec.DepartmentID, dec.DepartmentName, dec.EquipmentCount, dec.TotalMaintenanceCost, dec.AverageAgeYears\nORDER BY dec.EquipmentCount DESC, dec.TotalMaintenanceCost DESC\nLIMIT 4;"
        },
        {
            "question": "Найти инженеров, которые участвовали в проектах с бюджетом более 5 миллионов рублей и имеют сертификаты, срок действия которых истекает в течение следующих 3 месяцев, а также участвовали в инцидентах безопасности. В ответе будут показаны: имя инженера, должность, количество проектов, список сертификатов с истекающим сроком действия и количество инцидентов безопасности. Результаты отсортированы по количеству инцидентов и проектов, показаны топ-5 записей.",
            "sql_query": "WITH EngineerSafetyStats AS (\n    SELECT \n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', e.LastName) as EngineerName,\n        e.Position,\n        COUNT(DISTINCT p.ProjectID) as ProjectCount,\n        GROUP_CONCAT(DISTINCT c.CertificationName) as ExpiringCertifications,\n        COUNT(DISTINCT si.IncidentID) as IncidentCount\n    FROM Engineers e\n    JOIN Projects p ON p.ProjectManagerID = e.EngineerID\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    JOIN SafetyIncidents si ON e.EngineerID = si.EngineerID\n    WHERE p.Budget > 5000000\n    AND c.ExpiryDate BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 3 MONTH)\n    AND c.Status = 'Действителен'\n    AND si.SeverityLevel = 'Высокий'\n    GROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position\n)\nSELECT \n    EngineerName,\n    Position,\n    ProjectCount,\n    ExpiringCertifications,\n    IncidentCount\nFROM EngineerSafetyStats\nORDER BY IncidentCount DESC, ProjectCount DESC\nLIMIT 5;",
            "gpt-4o_response": "WITH EngineerProjectIncidentStats AS (\n    SELECT \n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', e.LastName) as EngineerName,\n        e.Position,\n        COUNT(DISTINCT p.ProjectID) as ProjectCount,\n        GROUP_CONCAT(DISTINCT c.CertificationName) as ExpiringCertifications,\n        COUNT(DISTINCT si.IncidentID) as IncidentCount\n    FROM Engineers e\n    JOIN Projects p ON p.ProjectManagerID = e.EngineerID\n    JOIN Certifications c ON c.EngineerID = e.EngineerID\n    JOIN SafetyIncidents si ON si.EngineerID = e.EngineerID\n    WHERE p.Budget > 5000000\n    AND c.ExpiryDate BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 3 MONTH)\n    AND c.Status = 'Действителен'\n    GROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position\n)\nSELECT \n    EngineerName,\n    Position,\n    ProjectCount,\n    ExpiringCertifications,\n    IncidentCount\nFROM EngineerProjectIncidentStats\nORDER BY IncidentCount DESC, ProjectCount DESC\nLIMIT 5;",
            "gpt-4o_response_ru": "WITH EngineerProjectCertIncidentStats AS (\n    SELECT \n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', e.LastName) AS EngineerName,\n        e.Position,\n        COUNT(DISTINCT p.ProjectID) AS ProjectCount,\n        GROUP_CONCAT(DISTINCT c.CertificationName) AS ExpiringCertifications,\n        COUNT(DISTINCT si.IncidentID) AS IncidentCount\n    FROM Engineers e\n    JOIN Projects p ON p.ProjectManagerID = e.EngineerID\n    JOIN Certifications c ON c.EngineerID = e.EngineerID\n    JOIN SafetyIncidents si ON si.EngineerID = e.EngineerID\n    WHERE p.Budget > 5000000\n    AND c.ExpiryDate BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 3 MONTH)\n    AND c.Status = 'Действителен'\n    GROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position\n)\nSELECT \n    EngineerName,\n    Position,\n    ProjectCount,\n    ExpiringCertifications,\n    IncidentCount\nFROM EngineerProjectCertIncidentStats\nORDER BY IncidentCount DESC, ProjectCount DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response": "WITH EngineerProjectCertIncident AS (\n    SELECT\n        e.EngineerID,\n        e.FirstName,\n        e.LastName,\n        e.Position,\n        COUNT(DISTINCT p.ProjectID) AS ProjectCount,\n        GROUP_CONCAT(DISTINCT CASE\n            WHEN c.ExpiryDate BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 3 MONTH) THEN c.CertificationName\n            ELSE NULL\n        END) AS ExpiringCertifications,\n        COUNT(DISTINCT si.IncidentID) AS IncidentCount\n    FROM Engineers e\n    JOIN Projects p ON e.EngineerID = p.ProjectManagerID\n    LEFT JOIN Certifications c ON e.EngineerID = c.EngineerID\n    LEFT JOIN SafetyIncidents si ON e.EngineerID = si.EngineerID\n    WHERE p.Budget > 5000000\n    GROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position\n    HAVING COUNT(DISTINCT si.IncidentID) > 0\n)\nSELECT\n    epci.FirstName || ' ' || epci.LastName AS EngineerName,\n    epci.Position,\n    epci.ProjectCount,\n    epci.ExpiringCertifications,\n    epci.IncidentCount\nFROM EngineerProjectCertIncident epci\nWHERE epci.ExpiringCertifications IS NOT NULL\nORDER BY epci.IncidentCount DESC, epci.ProjectCount DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response_ru": "WITH EngineerProject AS (\n  SELECT\n    e.EngineerID,\n    e.FirstName,\n    e.LastName,\n    e.Position,\n    COUNT(DISTINCT p.ProjectID) AS ProjectCount\n  FROM Engineers AS e\n  JOIN Projects AS p\n    ON e.EngineerID = p.ProjectManagerID\n  WHERE\n    p.Budget > 5000000\n  GROUP BY\n    e.EngineerID,\n    e.FirstName,\n    e.LastName,\n    e.Position\n), EngineerCertification AS (\n  SELECT\n    e.EngineerID,\n    GROUP_CONCAT(DISTINCT c.CertificationName) AS ExpiringCertifications\n  FROM Engineers AS e\n  JOIN Certifications AS c\n    ON e.EngineerID = c.EngineerID\n  WHERE\n    c.ExpiryDate BETWEEN DATE('now') AND DATE('now', '+3 months')\n  GROUP BY\n    e.EngineerID\n), EngineerSafetyIncidents AS (\n  SELECT\n    e.EngineerID,\n    COUNT(DISTINCT si.IncidentID) AS IncidentCount\n  FROM Engineers AS e\n  JOIN SafetyIncidents AS si\n    ON e.EngineerID = si.EngineerID\n  GROUP BY\n    e.EngineerID\n)\nSELECT\n  ep.FirstName || ' ' || ep.LastName AS EngineerName,\n  ep.Position,\n  ep.ProjectCount,\n  ec.ExpiringCertifications,\n  esi.IncidentCount\nFROM EngineerProject AS ep\nJOIN EngineerCertification AS ec\n  ON ep.EngineerID = ec.EngineerID\nJOIN EngineerSafetyIncidents AS esi\n  ON ep.EngineerID = esi.EngineerID\nORDER BY\n  esi.IncidentCount DESC,\n  ep.ProjectCount DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH EngineerProjectStats AS (\n    SELECT \n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', e.LastName) as EngineerName,\n        e.Position,\n        COUNT(DISTINCT p.ProjectID) as ProjectCount,\n        SUM(p.Budget) as TotalBudget\n    FROM Engineers e\n    JOIN Projects p ON e.EngineerID = p.ProjectManagerID\n    WHERE p.Budget > 5000000\n    GROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position\n),\nEngineerCertificationStats AS (\n    SELECT \n        e.EngineerID,\n        GROUP_CONCAT(DISTINCT c.CertificationName) as ExpiringCertifications\n    FROM Engineers e\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE c.ExpiryDate BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 3 MONTH)\n    AND c.Status = 'Действителен'\n    GROUP BY e.EngineerID\n),\nEngineerSafetyStats AS (\n    SELECT \n        e.EngineerID,\n        COUNT(si.IncidentID) as SafetyIncidentCount\n    FROM Engineers e\n    JOIN SafetyIncidents si ON e.EngineerID = si.EngineerID\n    GROUP BY e.EngineerID\n)\nSELECT \n    eps.EngineerName,\n    eps.Position,\n    eps.ProjectCount,\n    ecs.ExpiringCertifications,\n    ess.SafetyIncidentCount\nFROM EngineerProjectStats eps\nJOIN EngineerCertificationStats ecs ON eps.EngineerID = ecs.EngineerID\nJOIN EngineerSafetyStats ess ON eps.EngineerID = ess.EngineerID\nORDER BY ess.SafetyIncidentCount DESC, eps.ProjectCount DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH EngineerProjectStats AS (\n    SELECT \n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', e.LastName) as EngineerName,\n        e.Position,\n        COUNT(DISTINCT p.ProjectID) as ProjectCount,\n        SUM(p.Budget) as TotalBudget\n    FROM Engineers e\n    JOIN Tasks t ON e.EngineerID = t.AssignedTo\n    JOIN Projects p ON t.ProjectID = p.ProjectID\n    WHERE p.Budget > 5000000\n    GROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position\n),\nEngineerCertificationStats AS (\n    SELECT \n        e.EngineerID,\n        GROUP_CONCAT(DISTINCT c.CertificationName) as ExpiringCertifications\n    FROM Engineers e\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE c.ExpiryDate BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 3 MONTH)\n    AND c.Status = 'Действителен'\n    GROUP BY e.EngineerID\n),\nEngineerIncidentStats AS (\n    SELECT \n        e.EngineerID,\n        COUNT(si.IncidentID) as IncidentCount\n    FROM Engineers e\n    JOIN SafetyIncidents si ON e.EngineerID = si.EngineerID\n    GROUP BY e.EngineerID\n)\nSELECT \n    eps.EngineerName,\n    eps.Position,\n    eps.ProjectCount,\n    ecs.ExpiringCertifications,\n    eis.IncidentCount\nFROM EngineerProjectStats eps\nJOIN EngineerCertificationStats ecs ON eps.EngineerID = ecs.EngineerID\nJOIN EngineerIncidentStats eis ON eps.EngineerID = eis.EngineerID\nORDER BY eis.IncidentCount DESC, eps.ProjectCount DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH EngineerProjects AS (\n    SELECT \n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', e.LastName) AS EngineerName,\n        e.Position,\n        COUNT(DISTINCT p.ProjectID) AS ProjectCount\n    FROM Engineers e\n    JOIN Projects p ON p.ProjectManagerID = e.EngineerID\n    WHERE p.Budget > 5000000\n    GROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position\n),\nExpiringCertifications AS (\n    SELECT \n        c.EngineerID,\n        GROUP_CONCAT(DISTINCT c.CertificationName) AS ExpiringCerts\n    FROM Certifications c\n    WHERE c.ExpiryDate BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 3 MONTH)\n    AND c.Status = 'Действителен'\n    GROUP BY c.EngineerID\n),\nSafetyIncidentCounts AS (\n    SELECT \n        si.EngineerID,\n        COUNT(DISTINCT si.IncidentID) AS IncidentCount\n    FROM SafetyIncidents si\n    GROUP BY si.EngineerID\n)\nSELECT \n    ep.EngineerName,\n    ep.Position,\n    ep.ProjectCount,\n    ec.ExpiringCerts,\n    sic.IncidentCount\nFROM EngineerProjects ep\nJOIN ExpiringCertifications ec ON ep.EngineerID = ec.EngineerID\nJOIN SafetyIncidentCounts sic ON ep.EngineerID = sic.EngineerID\nORDER BY sic.IncidentCount DESC, ep.ProjectCount DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "WITH HighBudgetEngineers AS (\n    SELECT DISTINCT e.EngineerID, e.FirstName, e.LastName, e.Position\n    FROM Engineers e\n    JOIN Projects p ON e.EngineerID = p.ProjectManagerID\n    WHERE p.Budget > 5000000\n),\nExpiringCertifications AS (\n    SELECT c.EngineerID, GROUP_CONCAT(c.CertificationName) AS ExpiringCerts\n    FROM Certifications c\n    WHERE c.ExpiryDate BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 3 MONTH)\n    AND c.Status = 'Действителен'\n    GROUP BY c.EngineerID\n),\nEngineerIncidents AS (\n    SELECT si.EngineerID, COUNT(si.IncidentID) AS IncidentCount\n    FROM SafetyIncidents si\n    GROUP BY si.EngineerID\n),\nEngineerProjects AS (\n    SELECT e.EngineerID, COUNT(p.ProjectID) AS ProjectCount\n    FROM Engineers e\n    JOIN Projects p ON e.EngineerID = p.ProjectManagerID\n    WHERE p.Budget > 5000000\n    GROUP BY e.EngineerID\n)\nSELECT \n    CONCAT(hbe.FirstName, ' ', hbe.LastName) AS EngineerName,\n    hbe.Position,\n    ep.ProjectCount,\n    ec.ExpiringCerts,\n    ei.IncidentCount\nFROM HighBudgetEngineers hbe\nJOIN ExpiringCertifications ec ON hbe.EngineerID = ec.EngineerID\nJOIN EngineerIncidents ei ON hbe.EngineerID = ei.EngineerID\nJOIN EngineerProjects ep ON hbe.EngineerID = ep.EngineerID\nORDER BY ei.IncidentCount DESC, ep.ProjectCount DESC\nLIMIT 5;",
            "gigachat_response": "WITH EngineerSafetyIncidentCounts AS (\n    SELECT si.EngineerID, COUNT(si.IncidentID) AS IncidentCount\n    FROM SafetyIncidents si\n    GROUP BY si.EngineerID\n),\nEngineerProjectAndCertificationDetails AS (\n    SELECT \n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', e.MiddleName, ' ', e.LastName) AS FullName,\n        e.Position,\n        COUNT(DISTINCT p.ProjectID) AS ProjectCount,\n        GROUP_CONCAT(c.CertificationName SEPARATOR '; ') AS ExpiringCertificates\n    FROM Engineers e\n    INNER JOIN Projects p ON e.EngineerID = p.ProjectManagerID\n    INNER JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE p.Budget > 5000000\n      AND c.ExpiryDate <= DATE_ADD(CURDATE(), INTERVAL 3 MONTH)\n      AND c.Status = 'Действителен'\n    GROUP BY e.EngineerID, e.FirstName, e.MiddleName, e.LastName, e.Position\n)\nSELECT \n    epcd.FullName,\n    epcd.Position,\n    epcd.ProjectCount,\n    epcd.ExpiringCertificates,\n    COALESCE(esic.IncidentCount, 0) AS IncidentCount\nFROM EngineerProjectAndCertificationDetails epcd\nLEFT JOIN EngineerSafetyIncidentCounts esic ON epcd.EngineerID = esic.EngineerID\nORDER BY IncidentCount DESC, ProjectCount DESC\nLIMIT 5;",
            "gigachat_response_ru": "WITH EngineerProjectSafetyCertification AS (\n    SELECT DISTINCT\n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', e.MiddleName, ' ', e.LastName) AS FullName,\n        e.Position,\n        COUNT(DISTINCT p.ProjectID) OVER(PARTITION BY e.EngineerID) AS ProjectCount,\n        STRING_AGG(c.CertificationName, ', ') WITHIN GROUP (ORDER BY c.CertificationName) FILTER(WHERE c.ExpiryDate <= CURRENT_DATE + INTERVAL '3 months') AS ExpiringCertificates,\n        COUNT(si.IncidentID) OVER(PARTITION BY e.EngineerID) AS SafetyIncidentCount\n    FROM Engineers e\n    INNER JOIN Projects p ON e.EngineerID = p.ProjectManagerID OR e.EngineerID IN (SELECT AssignedTo FROM Tasks WHERE ProjectID = p.ProjectID)\n    INNER JOIN Certifications c ON e.EngineerID = c.EngineerID\n    LEFT JOIN SafetyIncidents si ON e.EngineerID = si.EngineerID\n    WHERE p.Budget > 5000000\n      AND c.Status = 'Действителен'\n)\nSELECT *\nFROM EngineerProjectSafetyCertification\nWHERE ExpiringCertificates IS NOT NULL AND SafetyIncidentCount > 0\nORDER BY SafetyIncidentCount DESC, ProjectCount DESC\nLIMIT 5;"
        },
        {
            "question": "Получить список проектов, где количество черновиков документов превышает количество утвержденных документов, и средняя стоимость материалов превышает 500 рублей. В ответе будут показаны: название проекта, количество черновиков, количество утвержденных документов, общая стоимость материалов и список авторов документов. Учитываются только материалы от поставщиков из Москвы и Санкт-Петербурга. Результаты отсортированы по разнице между количеством черновиков и утвержденных документов, показаны топ-3 записи.",
            "sql_query": "WITH ProjectDocumentMaterialStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        SUM(CASE WHEN d.Status = 'Черновик' THEN 1 ELSE 0 END) as DraftCount,\n        SUM(CASE WHEN d.Status = 'Утвержден' THEN 1 ELSE 0 END) as ApprovedCount,\n        SUM(m.UnitPrice) as TotalMaterialCost,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as Authors\n    FROM Projects p\n    JOIN DesignDocuments d ON p.ProjectID = d.ProjectID\n    JOIN Engineers e ON d.AuthorID = e.EngineerID\n    JOIN Materials m ON m.SupplierID IN (\n        SELECT SupplierID \n        FROM Suppliers \n        WHERE City IN ('Москва', 'Санкт-Петербург')\n    )\n    GROUP BY p.ProjectID, p.ProjectName\n    HAVING SUM(CASE WHEN d.Status = 'Черновик' THEN 1 ELSE 0 END) > \n           SUM(CASE WHEN d.Status = 'Утвержден' THEN 1 ELSE 0 END)\n    AND AVG(m.UnitPrice) > 500\n)\nSELECT \n    ProjectName,\n    DraftCount,\n    ApprovedCount,\n    TotalMaterialCost,\n    Authors\nFROM ProjectDocumentMaterialStats\nORDER BY (DraftCount - ApprovedCount) DESC\nLIMIT 3;",
            "gpt-4o_response": "WITH DocumentStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        SUM(CASE WHEN dd.Status = 'Черновик' THEN 1 ELSE 0 END) AS DraftCount,\n        SUM(CASE WHEN dd.Status = 'Утвержден' THEN 1 ELSE 0 END) AS ApprovedCount,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS Authors\n    FROM Projects p\n    JOIN DesignDocuments dd ON p.ProjectID = dd.ProjectID\n    JOIN Engineers e ON dd.AuthorID = e.EngineerID\n    GROUP BY p.ProjectID, p.ProjectName\n),\nMaterialStats AS (\n    SELECT \n        p.ProjectID,\n        AVG(m.UnitPrice) AS AvgMaterialCost\n    FROM Projects p\n    JOIN Materials m ON m.SupplierID IN (\n        SELECT SupplierID FROM Suppliers WHERE City IN ('Москва', 'Санкт-Петербург')\n    )\n    GROUP BY p.ProjectID\n)\nSELECT \n    ds.ProjectName,\n    ds.DraftCount,\n    ds.ApprovedCount,\n    ms.AvgMaterialCost,\n    ds.Authors\nFROM DocumentStats ds\nJOIN MaterialStats ms ON ds.ProjectID = ms.ProjectID\nWHERE ds.DraftCount > ds.ApprovedCount\nAND ms.AvgMaterialCost > 500\nORDER BY (ds.DraftCount - ds.ApprovedCount) DESC\nLIMIT 3;",
            "gpt-4o_response_ru": "WITH DocumentStats AS (\n    SELECT \n        d.ProjectID,\n        SUM(CASE WHEN dd.Status = 'Черновик' THEN 1 ELSE 0 END) AS DraftCount,\n        SUM(CASE WHEN dd.Status = 'Утвержден' THEN 1 ELSE 0 END) AS ApprovedCount,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS Authors\n    FROM DesignDocuments dd\n    JOIN Projects d ON dd.ProjectID = d.ProjectID\n    JOIN Engineers e ON dd.AuthorID = e.EngineerID\n    GROUP BY d.ProjectID\n),\nMaterialStats AS (\n    SELECT \n        p.ProjectID,\n        AVG(m.UnitPrice) AS AvgMaterialPrice,\n        SUM(m.UnitPrice * m.QuantityInStock) AS TotalMaterialCost\n    FROM Projects p\n    JOIN Materials m ON m.SupplierID IN (\n        SELECT SupplierID FROM Suppliers WHERE City IN ('Москва', 'Санкт-Петербург')\n    )\n    GROUP BY p.ProjectID\n)\nSELECT \n    p.ProjectName,\n    ds.DraftCount,\n    ds.ApprovedCount,\n    ms.TotalMaterialCost,\n    ds.Authors\nFROM Projects p\nJOIN DocumentStats ds ON p.ProjectID = ds.ProjectID\nJOIN MaterialStats ms ON p.ProjectID = ms.ProjectID\nWHERE ds.DraftCount > ds.ApprovedCount\nAND ms.AvgMaterialPrice > 500\nORDER BY (ds.DraftCount - ds.ApprovedCount) DESC\nLIMIT 3;",
            "google/gemini-2.0-flash-001_response": "WITH ProjectDocumentCounts AS (\n    SELECT\n        p.ProjectID,\n        p.ProjectName,\n        COUNT(CASE WHEN dd.Status = 'Черновик' THEN dd.DocumentID ELSE NULL END) AS DraftCount,\n        COUNT(CASE WHEN dd.Status = 'Утвержден' THEN dd.DocumentID ELSE NULL END) AS ApprovedCount,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS Authors\n    FROM Projects p\n    JOIN DesignDocuments dd ON p.ProjectID = dd.ProjectID\n    JOIN Engineers e ON dd.AuthorID = e.EngineerID\n    GROUP BY p.ProjectID, p.ProjectName\n    HAVING COUNT(CASE WHEN dd.Status = 'Черновик' THEN dd.DocumentID ELSE NULL END) > COUNT(CASE WHEN dd.Status = 'Утвержден' THEN dd.DocumentID ELSE NULL END)\n),\nMaterialCosts AS (\n    SELECT\n        m.MaterialID,\n        m.MaterialName,\n        m.UnitPrice\n    FROM Materials m\n    JOIN Suppliers s ON m.SupplierID = s.SupplierID\n    WHERE s.City IN ('Москва', 'Санкт-Петербург')\n),\nProjectMaterials AS (\n    SELECT\n        ProjectID,\n        SUM(UnitPrice) AS TotalMaterialCost\n    FROM ProjectDocumentCounts\n    CROSS JOIN MaterialCosts\n    GROUP BY ProjectID\n    HAVING SUM(UnitPrice) > 500\n)\nSELECT\n    pdc.ProjectName,\n    pdc.DraftCount,\n    pdc.ApprovedCount,\n    pm.TotalMaterialCost,\n    pdc.Authors,\n    (pdc.DraftCount - pdc.ApprovedCount) AS Difference\nFROM ProjectDocumentCounts pdc\nJOIN ProjectMaterials pm ON pdc.ProjectID = pm.ProjectID\nORDER BY Difference DESC\nLIMIT 3;",
            "google/gemini-2.0-flash-001_response_ru": "WITH ProjectDocumentStatus AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        SUM(CASE WHEN dd.Status = 'Черновик' THEN 1 ELSE 0 END) AS DraftCount,\n        SUM(CASE WHEN dd.Status = 'Утвержден' THEN 1 ELSE 0 END) AS ApprovedCount\n    FROM Projects p\n    JOIN DesignDocuments dd ON p.ProjectID = dd.ProjectID\n    GROUP BY p.ProjectID, p.ProjectName\n    HAVING SUM(CASE WHEN dd.Status = 'Черновик' THEN 1 ELSE 0 END) > SUM(CASE WHEN dd.Status = 'Утвержден' THEN 1 ELSE 0 END)\n),\nMaterialCost AS (\n    SELECT \n        m.MaterialID,\n        m.UnitPrice\n    FROM Materials m\n    JOIN Suppliers s ON m.SupplierID = s.SupplierID\n    WHERE s.City IN ('Москва', 'Санкт-Петербург')\n),\nProjectMaterials AS (\n    SELECT \n        dd.ProjectID,\n        SUM(mc.UnitPrice) AS TotalMaterialCost\n    FROM DesignDocuments dd\n    JOIN ProjectDocumentStatus pds ON dd.ProjectID = pds.ProjectID\n    JOIN MaterialCost mc ON 1=1\n    GROUP BY dd.ProjectID\n    HAVING SUM(mc.UnitPrice) / COUNT(DISTINCT mc.MaterialID) > 500\n)\nSELECT \n    pds.ProjectName,\n    pds.DraftCount,\n    pds.ApprovedCount,\n    pm.TotalMaterialCost,\n    GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS Authors,\n    (pds.DraftCount - pds.ApprovedCount) AS Difference\nFROM ProjectDocumentStatus pds\nJOIN DesignDocuments dd ON pds.ProjectID = dd.ProjectID\nJOIN Engineers e ON dd.AuthorID = e.EngineerID\nJOIN ProjectMaterials pm ON pds.ProjectID = pm.ProjectID\nGROUP BY pds.ProjectID, pds.ProjectName, pds.DraftCount, pds.ApprovedCount, pm.TotalMaterialCost\nORDER BY Difference DESC\nLIMIT 3;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH ProjectDocumentStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        SUM(CASE WHEN dd.Status = 'Черновик' THEN 1 ELSE 0 END) as DraftCount,\n        SUM(CASE WHEN dd.Status = 'Утвержден' THEN 1 ELSE 0 END) as ApprovedCount,\n        SUM(m.UnitPrice * m.QuantityInStock) as TotalMaterialCost,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as DocumentAuthors\n    FROM Projects p\n    JOIN DesignDocuments dd ON p.ProjectID = dd.ProjectID\n    JOIN Engineers e ON dd.AuthorID = e.EngineerID\n    JOIN Materials m ON p.ProjectID = m.ProjectID\n    JOIN Suppliers s ON m.SupplierID = s.SupplierID\n    WHERE s.City IN ('Москва', 'Санкт-Петербург')\n    GROUP BY p.ProjectID, p.ProjectName\n    HAVING SUM(m.UnitPrice * m.QuantityInStock) / COUNT(m.MaterialID) > 500\n),\nProjectStats AS (\n    SELECT \n        ProjectName,\n        DraftCount,\n        ApprovedCount,\n        TotalMaterialCost,\n        DocumentAuthors,\n        DraftCount - ApprovedCount as DraftApprovedDiff\n    FROM ProjectDocumentStats\n    WHERE DraftCount > ApprovedCount\n)\nSELECT \n    ProjectName,\n    DraftCount,\n    ApprovedCount,\n    TotalMaterialCost,\n    DocumentAuthors\nFROM ProjectStats\nORDER BY DraftApprovedDiff DESC\nLIMIT 3;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH ProjectDocumentStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        SUM(CASE WHEN dd.Status = 'Черновик' THEN 1 ELSE 0 END) as DraftCount,\n        SUM(CASE WHEN dd.Status = 'Утвержден' THEN 1 ELSE 0 END) as ApprovedCount,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as Authors\n    FROM Projects p\n    JOIN DesignDocuments dd ON p.ProjectID = dd.ProjectID\n    JOIN Engineers e ON dd.AuthorID = e.EngineerID\n    GROUP BY p.ProjectID, p.ProjectName\n),\nProjectMaterialStats AS (\n    SELECT \n        p.ProjectID,\n        SUM(m.UnitPrice * m.QuantityInStock) as TotalMaterialCost\n    FROM Projects p\n    JOIN Tasks t ON p.ProjectID = t.ProjectID\n    JOIN Materials m ON t.TaskID = m.TaskID\n    JOIN Suppliers s ON m.SupplierID = s.SupplierID\n    WHERE s.City IN ('Москва', 'Санкт-Петербург')\n    GROUP BY p.ProjectID\n)\nSELECT \n    pds.ProjectName,\n    pds.DraftCount,\n    pds.ApprovedCount,\n    pms.TotalMaterialCost,\n    pds.Authors,\n    pds.DraftCount - pds.ApprovedCount as DraftApprovedDiff\nFROM ProjectDocumentStats pds\nJOIN ProjectMaterialStats pms ON pds.ProjectID = pms.ProjectID\nWHERE pds.DraftCount > pds.ApprovedCount AND pms.TotalMaterialCost / (pds.DraftCount + pds.ApprovedCount) > 500\nORDER BY pds.DraftCount - pds.ApprovedCount DESC\nLIMIT 3;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH ProjectDocumentStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        SUM(CASE WHEN dd.Status = 'Черновик' THEN 1 ELSE 0 END) AS DraftCount,\n        SUM(CASE WHEN dd.Status = 'Утвержден' THEN 1 ELSE 0 END) AS ApprovedCount,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS Authors\n    FROM Projects p\n    JOIN DesignDocuments dd ON p.ProjectID = dd.ProjectID\n    JOIN Engineers e ON dd.AuthorID = e.EngineerID\n    GROUP BY p.ProjectID, p.ProjectName\n    HAVING DraftCount > ApprovedCount\n),\nProjectMaterialCost AS (\n    SELECT \n        p.ProjectID,\n        SUM(m.UnitPrice * m.QuantityInStock) AS TotalMaterialCost\n    FROM Projects p\n    JOIN Materials m ON 1=1\n    JOIN Suppliers s ON m.SupplierID = s.SupplierID\n    WHERE s.City IN ('Москва', 'Санкт-Петербург')\n    GROUP BY p.ProjectID\n    HAVING AVG(m.UnitPrice) > 500\n)\nSELECT \n    pds.ProjectName,\n    pds.DraftCount,\n    pds.ApprovedCount,\n    pmc.TotalMaterialCost,\n    pds.Authors\nFROM ProjectDocumentStats pds\nJOIN ProjectMaterialCost pmc ON pds.ProjectID = pmc.ProjectID\nORDER BY (pds.DraftCount - pds.ApprovedCount) DESC\nLIMIT 3;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "WITH ProjectDocumentStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        SUM(CASE WHEN dd.Status = 'Черновик' THEN 1 ELSE 0 END) AS DraftCount,\n        SUM(CASE WHEN dd.Status = 'Утвержден' THEN 1 ELSE 0 END) AS ApprovedCount,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS Authors\n    FROM Projects p\n    JOIN DesignDocuments dd ON p.ProjectID = dd.ProjectID\n    JOIN Engineers e ON dd.AuthorID = e.EngineerID\n    GROUP BY p.ProjectID, p.ProjectName\n    HAVING DraftCount > ApprovedCount\n),\nProjectMaterialCost AS (\n    SELECT \n        p.ProjectID,\n        SUM(m.UnitPrice * m.QuantityInStock) AS TotalMaterialCost\n    FROM Projects p\n    JOIN Materials m ON p.ProjectID = m.SupplierID\n    JOIN Suppliers s ON m.SupplierID = s.SupplierID\n    WHERE s.City IN ('Москва', 'Санкт-Петербург')\n    GROUP BY p.ProjectID\n    HAVING AVG(m.UnitPrice) > 500\n)\nSELECT \n    pds.ProjectName,\n    pds.DraftCount,\n    pds.ApprovedCount,\n    pmc.TotalMaterialCost,\n    pds.Authors,\n    (pds.DraftCount - pds.ApprovedCount) AS DraftApprovedDifference\nFROM ProjectDocumentStats pds\nJOIN ProjectMaterialCost pmc ON pds.ProjectID = pmc.ProjectID\nORDER BY DraftApprovedDifference DESC\nLIMIT 3;",
            "gigachat_response": "WITH DocStatusCounts AS (\n    SELECT \n        dd.ProjectID,\n        COUNT(CASE WHEN dd.Status = 'Черновик' THEN 1 END) AS DraftCount,\n        COUNT(CASE WHEN dd.Status = 'Утвержден' THEN 1 END) AS ApprovedCount,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS AuthorsList\n    FROM DesignDocuments dd\n    INNER JOIN Engineers e ON dd.AuthorID = e.EngineerID\n    GROUP BY dd.ProjectID\n),\nMaterialCosts AS (\n    SELECT \n        m.SupplierID,\n        AVG(m.UnitPrice * m.QuantityInStock) AS AverageCost\n    FROM Materials m\n    INNER JOIN Suppliers s ON m.SupplierID = s.SupplierID\n    WHERE s.City IN ('Москва', 'Санкт-Петербург')\n    GROUP BY m.SupplierID\n)\nSELECT \n    pr.ProjectName,\n    dsc.DraftCount,\n    dsc.ApprovedCount,\n    mc.AverageCost AS TotalMaterialsCost,\n    dsc.AuthorsList\nFROM Projects pr\nINNER JOIN DocStatusCounts dsc ON pr.ProjectID = dsc.ProjectID\nINNER JOIN MaterialCosts mc ON pr.ProjectID = mc.SupplierID\nWHERE dsc.DraftCount > dsc.ApprovedCount\nAND mc.AverageCost > 500\nORDER BY (dsc.DraftCount - dsc.ApprovedCount) DESC\nLIMIT 3;",
            "gigachat_response_ru": "WITH DocStatusCounts AS (\n    SELECT \n        dd.ProjectID,\n        COUNT(CASE WHEN dd.Status = 'Черновик' THEN 1 END) AS DraftCount,\n        COUNT(CASE WHEN dd.Status = 'Утвержден' THEN 1 END) AS ApprovedCount,\n        GROUP_CONCAT(CONCAT(e.FirstName, ' ', e.LastName)) AS AuthorsList\n    FROM DesignDocuments dd\n    INNER JOIN Engineers e ON dd.AuthorID = e.EngineerID\n    GROUP BY dd.ProjectID\n),\nMaterialCosts AS (\n    SELECT \n        m.SupplierID,\n        AVG(m.UnitPrice) AS AverageUnitPrice\n    FROM Materials m\n    INNER JOIN Suppliers s ON m.SupplierID = s.SupplierID\n    WHERE s.City IN ('Москва', 'Санкт-Петербург')\n    GROUP BY m.SupplierID\n)\nSELECT \n    p.ProjectName,\n    dsc.DraftCount,\n    dsc.ApprovedCount,\n    SUM(mc.AverageUnitPrice * m.QuantityInStock) AS TotalMaterialsCost,\n    dsc.AuthorsList\nFROM Projects p\nINNER JOIN DocStatusCounts dsc ON p.ProjectID = dsc.ProjectID\nINNER JOIN Materials m ON p.ProjectID = m.MaterialID\nINNER JOIN MaterialCosts mc ON m.SupplierID = mc.SupplierID\nWHERE dsc.DraftCount > dsc.ApprovedCount\nGROUP BY p.ProjectID, p.ProjectName, dsc.DraftCount, dsc.ApprovedCount, dsc.AuthorsList\nHAVING SUM(mc.AverageUnitPrice * m.QuantityInStock) > 500\nORDER BY (dsc.DraftCount - dsc.ApprovedCount) DESC\nLIMIT 3;"
        },
        {
            "question": "Получить список отделов с наибольшим количеством инженеров, участвующих в программах обучения стоимостью более 150000 рублей и имеющих действующие сертификаты уровня 'Продвинутый' или 'Эксперт'. В ответе будут показаны: название отдела, количество квалифицированных инженеров, общая стоимость обучения, список программ обучения и средний стаж работы инженеров в годах. Учитываются только завершенные программы обучения. Результаты отсортированы по количеству квалифицированных инженеров, показаны топ-4 записи.",
            "sql_query": "WITH DepartmentTrainingStats AS (\n    SELECT \n        d.DepartmentID,\n        d.DepartmentName,\n        COUNT(DISTINCT e.EngineerID) as QualifiedEngineers,\n        SUM(tp.Cost) as TotalTrainingCost,\n        GROUP_CONCAT(DISTINCT tp.ProgramName) as TrainingPrograms,\n        AVG(DATEDIFF(CURDATE(), e.HireDate)) as AvgExperienceDays\n    FROM Departments d\n    JOIN Engineers e ON d.DepartmentID = e.DepartmentID\n    JOIN TrainingPrograms tp ON e.EngineerID = tp.EngineerID\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE tp.Cost > 150000\n    AND c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    AND c.Status = 'Действителен'\n    AND tp.Status = 'Завершено'\n    GROUP BY d.DepartmentID, d.DepartmentName\n)\nSELECT \n    DepartmentName,\n    QualifiedEngineers,\n    ROUND(TotalTrainingCost, 2) as TotalTrainingCost,\n    TrainingPrograms,\n    ROUND(AvgExperienceDays/365, 1) as AvgExperienceYears\nFROM DepartmentTrainingStats\nORDER BY QualifiedEngineers DESC, TotalTrainingCost DESC\nLIMIT 4;",
            "gpt-4o_response": "WITH QualifiedEngineers AS (\n    SELECT \n        e.EngineerID,\n        e.DepartmentID,\n        CONCAT(e.FirstName, ' ', e.LastName) AS EngineerName,\n        DATEDIFF(CURDATE(), e.HireDate) / 365 AS YearsOfService\n    FROM Engineers e\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE c.Status = 'Действителен'\n    AND c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n),\nTrainingStats AS (\n    SELECT \n        qe.DepartmentID,\n        COUNT(DISTINCT qe.EngineerID) AS QualifiedEngineersCount,\n        SUM(tp.Cost) AS TotalTrainingCost,\n        GROUP_CONCAT(DISTINCT tp.ProgramName) AS TrainingPrograms,\n        AVG(qe.YearsOfService) AS AvgYearsOfService\n    FROM QualifiedEngineers qe\n    JOIN TrainingPrograms tp ON qe.EngineerID = tp.EngineerID\n    WHERE tp.Status = 'Завершено'\n    AND tp.Cost > 150000\n    GROUP BY qe.DepartmentID\n)\nSELECT \n    d.DepartmentName,\n    ts.QualifiedEngineersCount,\n    ROUND(ts.TotalTrainingCost, 2) AS TotalTrainingCost,\n    ts.TrainingPrograms,\n    ROUND(ts.AvgYearsOfService, 2) AS AvgYearsOfService\nFROM TrainingStats ts\nJOIN Departments d ON ts.DepartmentID = d.DepartmentID\nORDER BY ts.QualifiedEngineersCount DESC\nLIMIT 4;",
            "gpt-4o_response_ru": "WITH QualifiedEngineers AS (\n    SELECT \n        e.EngineerID,\n        e.DepartmentID,\n        SUM(tp.Cost) AS TotalTrainingCost,\n        AVG(DATEDIFF(CURDATE(), e.HireDate) / 365) AS AvgExperienceYears\n    FROM Engineers e\n    JOIN TrainingPrograms tp ON e.EngineerID = tp.EngineerID\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE tp.Status = 'Завершено'\n    AND tp.Cost > 150000\n    AND c.Status = 'Действителен'\n    AND c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    GROUP BY e.EngineerID, e.DepartmentID\n),\nDepartmentStats AS (\n    SELECT \n        d.DepartmentName,\n        COUNT(qe.EngineerID) AS QualifiedEngineersCount,\n        SUM(qe.TotalTrainingCost) AS TotalTrainingCost,\n        GROUP_CONCAT(DISTINCT tp.ProgramName) AS TrainingPrograms,\n        AVG(qe.AvgExperienceYears) AS AvgExperienceYears\n    FROM Departments d\n    JOIN QualifiedEngineers qe ON d.DepartmentID = qe.DepartmentID\n    JOIN TrainingPrograms tp ON qe.EngineerID = tp.EngineerID\n    WHERE tp.Status = 'Завершено'\n    GROUP BY d.DepartmentName\n)\nSELECT \n    DepartmentName,\n    QualifiedEngineersCount,\n    ROUND(TotalTrainingCost, 2) AS TotalTrainingCost,\n    TrainingPrograms,\n    ROUND(AvgExperienceYears, 2) AS AvgExperienceYears\nFROM DepartmentStats\nORDER BY QualifiedEngineersCount DESC\nLIMIT 4;",
            "google/gemini-2.0-flash-001_response": "WITH QualifiedEngineers AS (\n    SELECT\n        e.EngineerID,\n        e.DepartmentID,\n        CONCAT(e.FirstName, ' ', e.LastName) AS EngineerName,\n        e.HireDate\n    FROM Engineers e\n    JOIN TrainingPrograms tp ON e.EngineerID = tp.EngineerID\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE tp.Cost > 150000\n    AND c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    AND tp.Status = 'Завершено'\n),\nDepartmentTrainingInfo AS (\n    SELECT\n        d.DepartmentID,\n        d.DepartmentName,\n        COUNT(DISTINCT qe.EngineerID) AS QualifiedEngineersCount,\n        SUM(tp.Cost) AS TotalTrainingCost,\n        GROUP_CONCAT(DISTINCT tp.ProgramName) AS TrainingProgramsList,\n        AVG(DATEDIFF(CURDATE(), qe.HireDate) / 365) AS AverageSeniority\n    FROM Departments d\n    JOIN QualifiedEngineers qe ON d.DepartmentID = qe.DepartmentID\n    JOIN TrainingPrograms tp ON qe.EngineerID = tp.EngineerID\n    WHERE tp.Status = 'Завершено'\n    GROUP BY d.DepartmentID, d.DepartmentName\n)\nSELECT\n    dti.DepartmentName,\n    dti.QualifiedEngineersCount,\n    ROUND(dti.TotalTrainingCost, 2) AS TotalTrainingCost,\n    dti.TrainingProgramsList,\n    ROUND(dti.AverageSeniority, 2) AS AverageSeniority\nFROM DepartmentTrainingInfo dti\nORDER BY dti.QualifiedEngineersCount DESC\nLIMIT 4;",
            "google/gemini-2.0-flash-001_response_ru": "WITH DepartmentEngineerTraining AS (\n    SELECT\n        d.DepartmentID,\n        d.DepartmentName,\n        e.EngineerID,\n        e.FirstName,\n        e.LastName,\n        e.HireDate,\n        tp.ProgramName,\n        tp.Cost\n    FROM Departments d\n    JOIN Engineers e ON d.DepartmentID = e.DepartmentID\n    JOIN TrainingPrograms tp ON e.EngineerID = tp.EngineerID\n    WHERE tp.Cost > 150000 AND tp.Status = 'Завершено'\n),\nQualifiedEngineers AS (\n    SELECT\n        det.DepartmentID,\n        det.DepartmentName,\n        det.EngineerID,\n        det.FirstName,\n        det.LastName,\n        det.HireDate,\n        det.ProgramName,\n        det.Cost\n    FROM DepartmentEngineerTraining det\n    JOIN Certifications c ON det.EngineerID = c.EngineerID\n    WHERE c.CertificationLevel IN ('Продвинутый', 'Эксперт') AND c.Status = 'Действителен'\n),\nDepartmentStats AS (\n    SELECT\n        qe.DepartmentID,\n        qe.DepartmentName,\n        COUNT(DISTINCT qe.EngineerID) AS QualifiedEngineerCount,\n        SUM(qe.Cost) AS TotalTrainingCost,\n        GROUP_CONCAT(DISTINCT qe.ProgramName) AS TrainingPrograms,\n        AVG(DATEDIFF(CURDATE(), qe.HireDate) / 365) AS AverageTenure\n    FROM QualifiedEngineers qe\n    GROUP BY qe.DepartmentID, qe.DepartmentName\n)\nSELECT\n    ds.DepartmentName,\n    ds.QualifiedEngineerCount,\n    ROUND(ds.TotalTrainingCost, 2) AS TotalTrainingCost,\n    ds.TrainingPrograms,\n    ROUND(ds.AverageTenure, 2) AS AverageTenure\nFROM DepartmentStats ds\nORDER BY ds.QualifiedEngineerCount DESC\nLIMIT 4;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH DepartmentTrainingStats AS (\n    SELECT \n        d.DepartmentID,\n        d.DepartmentName,\n        COUNT(DISTINCT e.EngineerID) as QualifiedEngineers,\n        SUM(tp.Cost) as TotalTrainingCost,\n        GROUP_CONCAT(DISTINCT tp.ProgramName) as TrainingPrograms,\n        AVG(TIMESTAMPDIFF(YEAR, e.HireDate, CURDATE())) as AverageExperience\n    FROM Departments d\n    JOIN Engineers e ON d.DepartmentID = e.DepartmentID\n    JOIN TrainingPrograms tp ON e.EngineerID = tp.EngineerID\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE tp.Status = 'Завершено'\n    AND tp.Cost > 150000\n    AND c.Status = 'Действителен'\n    AND c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    GROUP BY d.DepartmentID, d.DepartmentName\n)\nSELECT \n    DepartmentName,\n    QualifiedEngineers,\n    ROUND(TotalTrainingCost, 2) as TotalTrainingCost,\n    TrainingPrograms,\n    ROUND(AverageExperience, 2) as AverageExperience\nFROM DepartmentTrainingStats\nORDER BY QualifiedEngineers DESC\nLIMIT 4",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH DepartmentEngineerStats AS (\n    SELECT \n        d.DepartmentName,\n        COUNT(DISTINCT e.EngineerID) as QualifiedEngineerCount,\n        SUM(tp.Cost) as TotalTrainingCost,\n        GROUP_CONCAT(DISTINCT tp.ProgramName) as TrainingPrograms,\n        AVG(TIMESTAMPDIFF(YEAR, e.HireDate, CURDATE())) as AverageExperience\n    FROM Departments d\n    JOIN Engineers e ON d.DepartmentID = e.DepartmentID\n    JOIN TrainingPrograms tp ON e.EngineerID = tp.EngineerID\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE tp.Status = 'Завершено'\n    AND tp.Cost > 150000\n    AND c.Status = 'Действителен'\n    AND c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    GROUP BY d.DepartmentName\n)\nSELECT \n    DepartmentName,\n    QualifiedEngineerCount,\n    ROUND(TotalTrainingCost, 2) as TotalTrainingCost,\n    TrainingPrograms,\n    ROUND(AverageExperience, 2) as AverageExperience\nFROM DepartmentEngineerStats\nORDER BY QualifiedEngineerCount DESC\nLIMIT 4;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH QualifiedEngineers AS (\n    SELECT \n        e.EngineerID,\n        e.DepartmentID,\n        d.DepartmentName,\n        DATEDIFF(CURDATE(), e.HireDate)/365 AS WorkExperience,\n        tp.TrainingID,\n        tp.ProgramName,\n        tp.Cost\n    FROM Engineers e\n    JOIN Departments d ON e.DepartmentID = d.DepartmentID\n    JOIN TrainingPrograms tp ON e.EngineerID = tp.EngineerID\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE tp.Status = 'Завершено'\n    AND tp.Cost > 150000\n    AND c.Status = 'Действителен'\n    AND (c.CertificationLevel = 'Продвинутый' OR c.CertificationLevel = 'Эксперт')\n)\nSELECT \n    DepartmentName,\n    COUNT(DISTINCT EngineerID) AS QualifiedEngineerCount,\n    ROUND(SUM(Cost), 2) AS TotalTrainingCost,\n    GROUP_CONCAT(DISTINCT ProgramName) AS TrainingPrograms,\n    ROUND(AVG(WorkExperience), 2) AS AverageWorkExperience\nFROM QualifiedEngineers\nGROUP BY DepartmentID, DepartmentName\nORDER BY QualifiedEngineerCount DESC\nLIMIT 4;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "WITH QualifiedEngineers AS (\n    SELECT \n        e.EngineerID,\n        e.DepartmentID,\n        CONCAT(e.FirstName, ' ', e.LastName) AS EngineerName,\n        DATEDIFF(CURDATE(), e.HireDate)/365 AS WorkExperience,\n        tp.TrainingID,\n        tp.ProgramName,\n        tp.Cost\n    FROM Engineers e\n    JOIN TrainingPrograms tp ON e.EngineerID = tp.EngineerID\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE tp.Status = 'Завершено'\n    AND tp.Cost > 150000\n    AND c.Status = 'Действителен'\n    AND c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n)\nSELECT \n    d.DepartmentName,\n    COUNT(DISTINCT qe.EngineerID) AS EngineerCount,\n    SUM(qe.Cost) AS TotalTrainingCost,\n    GROUP_CONCAT(DISTINCT qe.ProgramName) AS TrainingPrograms,\n    ROUND(AVG(qe.WorkExperience), 2) AS AvgWorkExperience\nFROM Departments d\nJOIN QualifiedEngineers qe ON d.DepartmentID = qe.DepartmentID\nGROUP BY d.DepartmentName\nORDER BY EngineerCount DESC\nLIMIT 4;",
            "gigachat_response": "WITH QualifiedEngineers AS (\n    SELECT \n        e.EngineerID,\n        e.DepartmentID,\n        COUNT(DISTINCT tp.TrainingID) AS NumCompletedTrainings,\n        SUM(tp.Cost) AS TotalTrainingCost,\n        GROUP_CONCAT(DISTINCT tp.ProgramName ORDER BY tp.ProgramName SEPARATOR ', ') AS TrainingPrograms,\n        TIMESTAMPDIFF(YEAR, e.HireDate, CURRENT_DATE()) AS YearsExperience\n    FROM Engineers e\n    INNER JOIN TrainingPrograms tp ON e.EngineerID = tp.EngineerID\n    INNER JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE tp.Status = 'Завершено'\n      AND tp.Cost > 150000\n      AND c.Status = 'Действителен'\n      AND c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    GROUP BY e.EngineerID, e.DepartmentID\n)\nSELECT \n    d.DepartmentName,\n    COUNT(qe.EngineerID) AS NumQualifiedEngineers,\n    SUM(qe.TotalTrainingCost) AS TotalTrainingCost,\n    GROUP_CONCAT(DISTINCT qe.TrainingPrograms ORDER BY qe.TrainingPrograms SEPARATOR '; ') AS TrainingProgramsList,\n    AVG(qe.YearsExperience) AS AverageYearsExperience\nFROM Departments d\nINNER JOIN QualifiedEngineers qe ON d.DepartmentID = qe.DepartmentID\nGROUP BY d.DepartmentName\nORDER BY NumQualifiedEngineers DESC\nLIMIT 4;",
            "gigachat_response_ru": "WITH QualifiedEngineers AS (\n    SELECT \n        e.EngineerID,\n        e.DepartmentID,\n        COUNT(DISTINCT tp.TrainingID) AS NumTrainings,\n        SUM(tp.Cost) AS TotalTrainingCost,\n        AVG(YEAR(CURRENT_DATE()) - YEAR(e.HireDate)) AS AverageYearsExperience\n    FROM Engineers e\n    INNER JOIN TrainingPrograms tp ON e.EngineerID = tp.EngineerID\n    INNER JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE tp.Status = 'Завершено'\n      AND tp.Cost > 150000\n      AND c.Status = 'Действителен'\n      AND c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    GROUP BY e.EngineerID, e.DepartmentID\n)\nSELECT \n    d.DepartmentName,\n    COUNT(qe.EngineerID) AS NumQualifiedEngineers,\n    SUM(qe.TotalTrainingCost) AS TotalTrainingCost,\n    GROUP_CONCAT(DISTINCT tp.ProgramName ORDER BY tp.ProgramName SEPARATOR ', ') AS TrainingProgramsList,\n    ROUND(AVG(qe.AverageYearsExperience), 2) AS AverageYearsExperience\nFROM Departments d\nINNER JOIN QualifiedEngineers qe ON d.DepartmentID = qe.DepartmentID\nLEFT JOIN TrainingPrograms tp ON qe.EngineerID = tp.EngineerID\nGROUP BY d.DepartmentName\nORDER BY NumQualifiedEngineers DESC\nLIMIT 4;"
        },
        {
            "question": "Получить список клиентов с наибольшим количеством активных проектов, где средняя стоимость материалов превышает 1000 рублей. В ответе будут показаны: название клиента, количество проектов, общий бюджет проектов, средняя стоимость материалов и список ответственных инженеров. Учитываются только проекты в статусе 'В процессе' и материалы от российских поставщиков. Результаты отсортированы по количеству проектов, показаны топ-5 записей.",
            "sql_query": "WITH ClientMaterialStats AS (\n    SELECT \n        c.ClientID,\n        c.ClientName,\n        COUNT(DISTINCT p.ProjectID) as ProjectCount,\n        SUM(p.Budget) as TotalBudget,\n        AVG(m.UnitPrice) as AvgMaterialPrice,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as ResponsibleEngineers\n    FROM Clients c\n    JOIN Projects p ON c.ClientID = p.ClientID\n    JOIN Materials m ON m.SupplierID IN (\n        SELECT SupplierID \n        FROM Suppliers \n        WHERE Country = 'Россия'\n    )\n    JOIN Engineers e ON p.ProjectManagerID = e.EngineerID\n    WHERE p.Status = 'В процессе'\n    GROUP BY c.ClientID, c.ClientName\n    HAVING AVG(m.UnitPrice) > 1000\n)\nSELECT \n    ClientName,\n    ProjectCount,\n    ROUND(TotalBudget, 2) as TotalBudget,\n    ROUND(AvgMaterialPrice, 2) as AvgMaterialPrice,\n    ResponsibleEngineers\nFROM ClientMaterialStats\nORDER BY ProjectCount DESC, TotalBudget DESC\nLIMIT 5;",
            "gpt-4o_response": "WITH ActiveProjects AS (\n    SELECT \n        p.ProjectID,\n        p.ClientID,\n        p.Budget,\n        p.ProjectManagerID\n    FROM Projects p\n    WHERE p.Status = 'В процессе'\n),\nRussianSuppliers AS (\n    SELECT \n        s.SupplierID\n    FROM Suppliers s\n    WHERE s.Country = 'Россия'\n),\nMaterialsAbove1000 AS (\n    SELECT \n        m.ProjectID,\n        AVG(m.UnitPrice) AS AvgMaterialPrice\n    FROM Materials m\n    JOIN RussianSuppliers rs ON m.SupplierID = rs.SupplierID\n    GROUP BY m.ProjectID\n    HAVING AVG(m.UnitPrice) > 1000\n),\nClientProjectStats AS (\n    SELECT \n        c.ClientName,\n        COUNT(ap.ProjectID) AS ProjectCount,\n        SUM(ap.Budget) AS TotalProjectBudget,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS ResponsibleEngineers\n    FROM ActiveProjects ap\n    JOIN Clients c ON ap.ClientID = c.ClientID\n    JOIN MaterialsAbove1000 ma ON ap.ProjectID = ma.ProjectID\n    LEFT JOIN Engineers e ON ap.ProjectManagerID = e.EngineerID\n    GROUP BY c.ClientName\n)\nSELECT \n    ClientName,\n    ProjectCount,\n    ROUND(TotalProjectBudget, 2) AS TotalProjectBudget,\n    ResponsibleEngineers\nFROM ClientProjectStats\nORDER BY ProjectCount DESC\nLIMIT 5;",
            "gpt-4o_response_ru": "WITH ActiveProjects AS (\n    SELECT \n        p.ClientID,\n        p.ProjectID,\n        p.Budget,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS ResponsibleEngineers\n    FROM Projects p\n    JOIN Tasks t ON p.ProjectID = t.ProjectID\n    JOIN Engineers e ON t.AssignedTo = e.EngineerID\n    WHERE p.Status = 'В процессе'\n    GROUP BY p.ClientID, p.ProjectID, p.Budget\n),\nMaterialStats AS (\n    SELECT \n        m.SupplierID,\n        AVG(m.UnitPrice) AS AvgMaterialPrice\n    FROM Materials m\n    JOIN Suppliers s ON m.SupplierID = s.SupplierID\n    WHERE s.Country = 'Россия'\n    GROUP BY m.SupplierID\n    HAVING AVG(m.UnitPrice) > 1000\n),\nClientProjectStats AS (\n    SELECT \n        ap.ClientID,\n        COUNT(ap.ProjectID) AS ProjectCount,\n        SUM(ap.Budget) AS TotalBudget,\n        GROUP_CONCAT(DISTINCT ap.ResponsibleEngineers) AS ResponsibleEngineers\n    FROM ActiveProjects ap\n    JOIN MaterialStats ms ON ap.ProjectID = ms.SupplierID\n    GROUP BY ap.ClientID\n)\nSELECT \n    c.ClientName,\n    cps.ProjectCount,\n    cps.TotalBudget,\n    cps.ResponsibleEngineers\nFROM ClientProjectStats cps\nJOIN Clients c ON cps.ClientID = c.ClientID\nORDER BY cps.ProjectCount DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response": "WITH ClientProjectMaterial AS (\n    SELECT\n        c.ClientID,\n        c.ClientName,\n        COUNT(DISTINCT p.ProjectID) AS ProjectCount,\n        SUM(p.Budget) AS TotalProjectBudget\n    FROM Clients c\n    JOIN Projects p ON c.ClientID = p.ClientID\n    WHERE p.Status = 'В процессе'\n    GROUP BY c.ClientID, c.ClientName\n),\nMaterialCost AS (\n    SELECT\n        m.SupplierID,\n        AVG(m.UnitPrice) AS AvgMaterialCost\n    FROM Materials m\n    GROUP BY m.SupplierID\n    HAVING AVG(m.UnitPrice) > 1000\n),\nRussianSuppliers AS (\n    SELECT\n        s.SupplierID\n    FROM Suppliers s\n    WHERE s.Country = 'Россия'\n),\nProjectEngineers AS (\n    SELECT\n        p.ClientID,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS ResponsibleEngineers\n    FROM Projects p\n    JOIN Tasks t ON p.ProjectID = t.ProjectID\n    JOIN Engineers e ON t.AssignedTo = e.EngineerID\n    WHERE p.Status = 'В процессе'\n    GROUP BY p.ClientID\n)\nSELECT\n    cpm.ClientName,\n    cpm.ProjectCount,\n    cpm.TotalProjectBudget,\n    m.AvgMaterialCost,\n    pe.ResponsibleEngineers\nFROM ClientProjectMaterial cpm\nJOIN Projects p ON cpm.ClientID = p.ClientID\nJOIN Tasks t ON p.ProjectID = t.ProjectID\nJOIN Materials m1 ON t.TaskID = m1.MaterialID\nJOIN MaterialCost m ON m1.SupplierID = m.SupplierID\nJOIN RussianSuppliers rs ON m1.SupplierID = rs.SupplierID\nJOIN ProjectEngineers pe ON cpm.ClientID = pe.ClientID\nGROUP BY cpm.ClientID, cpm.ClientName, cpm.ProjectCount, cpm.TotalProjectBudget, m.AvgMaterialCost, pe.ResponsibleEngineers\nORDER BY cpm.ProjectCount DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response_ru": "WITH ClientProjectMaterial AS (\n    SELECT\n        c.ClientID,\n        c.ClientName,\n        COUNT(DISTINCT p.ProjectID) AS ProjectCount,\n        SUM(p.Budget) AS TotalProjectBudget,\n        AVG(m.UnitPrice) AS AvgMaterialPrice,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS ResponsibleEngineers\n    FROM Clients c\n    JOIN Projects p ON c.ClientID = p.ClientID\n    JOIN Tasks t ON p.ProjectID = t.ProjectID\n    JOIN Engineers e ON t.AssignedTo = e.EngineerID\n    JOIN Budgets b ON p.ProjectID = b.ProjectID\n    JOIN Departments d ON b.DepartmentID = d.DepartmentID\n    LEFT JOIN Materials m ON m.SupplierID IN (SELECT SupplierID FROM Suppliers WHERE Country = 'Россия')\n    WHERE p.Status = 'В процессе'\n    AND m.SupplierID IN (SELECT SupplierID FROM Suppliers WHERE Country = 'Россия')\n    GROUP BY c.ClientID, c.ClientName\n    HAVING AVG(m.UnitPrice) > 1000\n)\nSELECT\n    ClientName,\n    ProjectCount,\n    TotalProjectBudget,\n    ROUND(AvgMaterialPrice, 2) AS AvgMaterialPrice,\n    ResponsibleEngineers\nFROM ClientProjectMaterial\nORDER BY ProjectCount DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH ClientProjectStats AS (\n    SELECT \n        c.ClientName,\n        COUNT(p.ProjectID) as ProjectCount,\n        SUM(p.Budget) as TotalBudget,\n        AVG(m.UnitPrice) as AvgMaterialCost,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as ResponsibleEngineers\n    FROM Clients c\n    JOIN Projects p ON c.ClientID = p.ClientID\n    JOIN Tasks t ON p.ProjectID = t.ProjectID\n    JOIN Engineers e ON t.AssignedTo = e.EngineerID\n    JOIN Materials m ON t.TaskID = m.MaterialID\n    JOIN Suppliers s ON m.SupplierID = s.SupplierID\n    WHERE p.Status = 'В процессе'\n    AND m.UnitPrice > 1000\n    AND s.Country = 'Россия'\n    GROUP BY c.ClientName\n    HAVING COUNT(p.ProjectID) > 0\n)\nSELECT \n    ClientName,\n    ProjectCount,\n    TotalBudget,\n    ROUND(AvgMaterialCost, 2) as AvgMaterialCost,\n    ResponsibleEngineers\nFROM ClientProjectStats\nORDER BY ProjectCount DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH ClientProjectStats AS (\n    SELECT \n        c.ClientName,\n        COUNT(p.ProjectID) as ProjectCount,\n        SUM(p.Budget) as TotalBudget,\n        AVG(m.UnitPrice) as AvgMaterialCost,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as ResponsibleEngineers\n    FROM Clients c\n    JOIN Projects p ON c.ClientID = p.ClientID\n    JOIN Tasks t ON p.ProjectID = t.ProjectID\n    JOIN Engineers e ON t.AssignedTo = e.EngineerID\n    JOIN Materials m ON t.TaskID = m.MaterialID\n    JOIN Suppliers s ON m.SupplierID = s.SupplierID\n    WHERE p.Status = 'В процессе'\n    AND m.UnitPrice > 1000\n    AND s.Country = 'Россия'\n    GROUP BY c.ClientName\n)\nSELECT \n    ClientName,\n    ProjectCount,\n    TotalBudget,\n    ROUND(AvgMaterialCost, 2) as AvgMaterialCost,\n    ResponsibleEngineers\nFROM ClientProjectStats\nORDER BY ProjectCount DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH RussianSuppliers AS (\n    SELECT SupplierID \n    FROM Suppliers \n    WHERE Country = 'Россия'\n),\nProjectMaterials AS (\n    SELECT \n        p.ProjectID,\n        p.ClientID,\n        AVG(m.UnitPrice) AS AvgMaterialPrice\n    FROM Projects p\n    JOIN Materials m ON 1=1\n    JOIN RussianSuppliers rs ON m.SupplierID = rs.SupplierID\n    WHERE p.Status = 'В процессе'\n    GROUP BY p.ProjectID, p.ClientID\n    HAVING AVG(m.UnitPrice) > 1000\n),\nClientProjectStats AS (\n    SELECT \n        c.ClientID,\n        c.ClientName,\n        COUNT(p.ProjectID) AS ProjectCount,\n        SUM(p.Budget) AS TotalBudget,\n        AVG(pm.AvgMaterialPrice) AS AvgMaterialCost,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS ResponsibleEngineers\n    FROM Clients c\n    JOIN Projects p ON c.ClientID = p.ClientID\n    JOIN ProjectMaterials pm ON p.ProjectID = pm.ProjectID\n    JOIN Tasks t ON p.ProjectID = t.ProjectID\n    JOIN Engineers e ON t.AssignedTo = e.EngineerID\n    WHERE p.Status = 'В процессе'\n    GROUP BY c.ClientID, c.ClientName\n)\nSELECT \n    ClientName,\n    ProjectCount,\n    TotalBudget,\n    ROUND(AvgMaterialCost, 2) AS AvgMaterialCost,\n    ResponsibleEngineers\nFROM ClientProjectStats\nORDER BY ProjectCount DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "WITH ProjectMaterials AS (\n    SELECT \n        p.ProjectID,\n        p.ClientID,\n        p.Budget as ProjectBudget,\n        AVG(m.UnitPrice) as AvgMaterialPrice\n    FROM Projects p\n    JOIN Tasks t ON p.ProjectID = t.ProjectID\n    JOIN Materials m ON m.SupplierID IN (\n        SELECT SupplierID FROM Suppliers WHERE Country = 'Россия'\n    )\n    WHERE p.Status = 'В процессе'\n    GROUP BY p.ProjectID, p.ClientID, p.Budget\n    HAVING AVG(m.UnitPrice) > 1000\n),\nClientEngineers AS (\n    SELECT \n        pm.ClientID,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as ResponsibleEngineers\n    FROM ProjectMaterials pm\n    JOIN Projects p ON pm.ProjectID = p.ProjectID\n    JOIN Tasks t ON p.ProjectID = t.ProjectID\n    JOIN Engineers e ON t.AssignedTo = e.EngineerID\n    GROUP BY pm.ClientID\n)\nSELECT \n    c.ClientName,\n    COUNT(pm.ProjectID) as ProjectCount,\n    SUM(pm.ProjectBudget) as TotalBudget,\n    ROUND(AVG(pm.AvgMaterialPrice), 2) as AvgMaterialPrice,\n    ce.ResponsibleEngineers\nFROM Clients c\nJOIN ProjectMaterials pm ON c.ClientID = pm.ClientID\nJOIN ClientEngineers ce ON c.ClientID = ce.ClientID\nGROUP BY c.ClientName, ce.ResponsibleEngineers\nORDER BY ProjectCount DESC\nLIMIT 5;",
            "gigachat_response": "WITH ActiveProjectsMaterials AS (\n    SELECT \n        cl.ClientID,\n        cl.ClientName,\n        COUNT(pr.ProjectID) AS ProjectCount,\n        SUM(pr.Budget) AS TotalBudget,\n        AVG(mat.UnitPrice) AS AverageMaterialCost,\n        GROUP_CONCAT(DISTINCT CONCAT(en.FirstName, ' ', en.LastName)) AS ResponsibleEngineers\n    FROM Clients cl\n    JOIN Projects pr ON cl.ClientID = pr.ClientID\n    JOIN Tasks tk ON pr.ProjectID = tk.ProjectID\n    JOIN Engineers en ON tk.AssignedTo = en.EngineerID\n    JOIN Materials mat ON pr.ProjectID IN (SELECT DISTINCT ProjectID FROM DesignDocuments dd WHERE dd.DocumentID IN (SELECT DISTINCT DocumentID FROM QualityAssurance qa))\n    JOIN Suppliers sup ON mat.SupplierID = sup.SupplierID\n    WHERE pr.Status = 'В процессе'\n      AND sup.Country = 'Россия'\n    GROUP BY cl.ClientID, cl.ClientName\n    HAVING AVG(mat.UnitPrice) > 1000\n)\nSELECT *\nFROM ActiveProjectsMaterials\nORDER BY ProjectCount DESC\nLIMIT 5;",
            "gigachat_response_ru": "WITH ActiveProjects AS (\n    SELECT \n        cl.ClientID,\n        cl.ClientName,\n        COUNT(pr.ProjectID) AS ProjectCount,\n        SUM(pr.Budget) AS TotalBudget,\n        AVG(mat.UnitPrice) AS AverageMaterialCost,\n        GROUP_CONCAT(DISTINCT CONCAT(en.FirstName, ' ', en.LastName)) AS ResponsibleEngineers\n    FROM Clients cl\n    JOIN Projects pr ON cl.ClientID = pr.ClientID\n    JOIN Tasks tk ON pr.ProjectID = tk.ProjectID\n    JOIN Engineers en ON tk.AssignedTo = en.EngineerID\n    JOIN Materials mat ON pr.ProjectID IN (SELECT DISTINCT ProjectID FROM DesignDocuments dd WHERE dd.DocumentID IN (SELECT DISTINCT DocumentID FROM QualityAssurance qa))\n    JOIN Suppliers sup ON mat.SupplierID = sup.SupplierID\n    WHERE pr.Status = 'В процессе'\n      AND sup.Country = 'Россия'\n    GROUP BY cl.ClientID, cl.ClientName\n    HAVING AVG(mat.UnitPrice) > 1000\n)\nSELECT *\nFROM ActiveProjects\nORDER BY ProjectCount DESC\nLIMIT 5;"
        },
        {
            "question": "Получить список оборудования с наибольшим количеством инцидентов безопасности высокого уровня и высокой стоимостью обслуживания, где последнее обслуживание было более 6 месяцев назад. В ответе будут показаны: название оборудования, производитель, количество инцидентов, общая стоимость обслуживания, дата последнего обслуживания и текущий статус оборудования. Учитываются только записи с общей стоимостью обслуживания более 2000 рублей. Результаты отсортированы по количеству инцидентов, показаны топ-6 записей.",
            "sql_query": "WITH EquipmentSafetyMaintenance AS (\n    SELECT \n        e.EquipmentID,\n        e.EquipmentName,\n        e.Manufacturer,\n        COUNT(DISTINCT si.IncidentID) as IncidentCount,\n        SUM(m.Cost) as TotalMaintenanceCost,\n        MAX(m.MaintenanceDate) as LastMaintenanceDate,\n        e.Status as EquipmentStatus\n    FROM Equipment e\n    JOIN SafetyIncidents si ON e.EquipmentID = si.EquipmentID\n    JOIN MaintenanceRecords m ON e.EquipmentID = m.EquipmentID\n    WHERE si.SeverityLevel = 'Высокий'\n    AND m.MaintenanceDate < DATE_SUB(CURDATE(), INTERVAL 6 MONTH)\n    GROUP BY e.EquipmentID, e.EquipmentName, e.Manufacturer, e.Status\n    HAVING SUM(m.Cost) > 2000\n)\nSELECT \n    EquipmentName,\n    Manufacturer,\n    IncidentCount,\n    ROUND(TotalMaintenanceCost, 2) as TotalMaintenanceCost,\n    LastMaintenanceDate,\n    EquipmentStatus\nFROM EquipmentSafetyMaintenance\nORDER BY IncidentCount DESC, TotalMaintenanceCost DESC\nLIMIT 6;",
            "gpt-4o_response": "WITH EquipmentIncidentMaintenance AS (\n    SELECT \n        e.EquipmentID,\n        e.EquipmentName,\n        e.Manufacturer,\n        COUNT(si.IncidentID) AS HighSeverityIncidents,\n        SUM(mr.Cost) AS TotalMaintenanceCost,\n        MAX(mr.MaintenanceDate) AS LastMaintenanceDate,\n        e.Status\n    FROM Equipment e\n    JOIN SafetyIncidents si ON e.EquipmentID = si.EquipmentID\n    JOIN MaintenanceRecords mr ON e.EquipmentID = mr.EquipmentID\n    WHERE si.SeverityLevel = 'Высокий'\n    AND mr.Cost > 2000\n    AND DATEDIFF(CURDATE(), mr.MaintenanceDate) > 180\n    GROUP BY e.EquipmentID, e.EquipmentName, e.Manufacturer, e.Status\n)\nSELECT \n    EquipmentName,\n    Manufacturer,\n    HighSeverityIncidents,\n    TotalMaintenanceCost,\n    LastMaintenanceDate,\n    Status\nFROM EquipmentIncidentMaintenance\nORDER BY HighSeverityIncidents DESC\nLIMIT 6;",
            "gpt-4o_response_ru": "WITH EquipmentIncidentMaintenance AS (\n    SELECT \n        e.EquipmentID,\n        e.EquipmentName,\n        e.Manufacturer,\n        COUNT(si.IncidentID) AS HighSeverityIncidents,\n        SUM(mr.Cost) AS TotalMaintenanceCost,\n        MAX(mr.MaintenanceDate) AS LastMaintenanceDate,\n        e.Status\n    FROM Equipment e\n    JOIN SafetyIncidents si ON e.EquipmentID = si.EquipmentID\n    JOIN MaintenanceRecords mr ON e.EquipmentID = mr.EquipmentID\n    WHERE si.SeverityLevel = 'Высокий'\n    AND mr.Cost > 2000\n    AND DATEDIFF(CURDATE(), mr.MaintenanceDate) > 180\n    GROUP BY e.EquipmentID, e.EquipmentName, e.Manufacturer, e.Status\n)\nSELECT \n    EquipmentName,\n    Manufacturer,\n    HighSeverityIncidents,\n    ROUND(TotalMaintenanceCost, 2) AS TotalMaintenanceCost,\n    LastMaintenanceDate,\n    Status\nFROM EquipmentIncidentMaintenance\nORDER BY HighSeverityIncidents DESC\nLIMIT 6;",
            "google/gemini-2.0-flash-001_response": "WITH EquipmentIncidents AS (\n    SELECT\n        e.EquipmentID,\n        e.EquipmentName,\n        e.Manufacturer,\n        e.Status AS EquipmentStatus,\n        COUNT(DISTINCT si.IncidentID) AS IncidentCount\n    FROM\n        Equipment e\n    JOIN\n        SafetyIncidents si ON e.EquipmentID = si.EquipmentID\n    WHERE\n        si.SeverityLevel = 'Высокий'\n    GROUP BY\n        e.EquipmentID, e.EquipmentName, e.Manufacturer, e.Status\n),\nMaintenanceCosts AS (\n    SELECT\n        EquipmentID,\n        SUM(Cost) AS TotalMaintenanceCost,\n        MAX(MaintenanceDate) AS LastMaintenanceDate\n    FROM\n        MaintenanceRecords\n    GROUP BY\n        EquipmentID\n)\nSELECT\n    ei.EquipmentName,\n    ei.Manufacturer,\n    ei.IncidentCount,\n    mc.TotalMaintenanceCost,\n    mc.LastMaintenanceDate,\n    ei.EquipmentStatus\nFROM\n    EquipmentIncidents ei\nJOIN\n    MaintenanceCosts mc ON ei.EquipmentID = mc.EquipmentID\nWHERE\n    mc.TotalMaintenanceCost > 2000\n    AND mc.LastMaintenanceDate < DATE('now', '-6 months')\nORDER BY\n    ei.IncidentCount DESC\nLIMIT 6;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT \n    e.EquipmentName,\n    e.Manufacturer,\n    COUNT(DISTINCT si.IncidentID) AS IncidentCount,\n    SUM(mr.Cost) AS TotalMaintenanceCost,\n    MAX(mr.MaintenanceDate) AS LastMaintenanceDate,\n    e.Status\nFROM Equipment e\nJOIN SafetyIncidents si ON e.EquipmentID = si.EquipmentID\nJOIN MaintenanceRecords mr ON e.EquipmentID = mr.EquipmentID\nWHERE si.SeverityLevel = 'Высокий'\nGROUP BY e.EquipmentID, e.EquipmentName, e.Manufacturer, e.Status\nHAVING SUM(mr.Cost) > 2000 AND MAX(mr.MaintenanceDate) < DATE('now', '-6 months')\nORDER BY IncidentCount DESC\nLIMIT 6;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH EquipmentIncidentStats AS (\n    SELECT \n        e.EquipmentID,\n        e.EquipmentName,\n        e.Manufacturer,\n        COUNT(si.IncidentID) as IncidentCount,\n        SUM(mr.Cost) as TotalMaintenanceCost,\n        MAX(mr.MaintenanceDate) as LastMaintenanceDate,\n        e.Status\n    FROM Equipment e\n    JOIN MaintenanceRecords mr ON e.EquipmentID = mr.EquipmentID\n    JOIN SafetyIncidents si ON e.EquipmentID = si.EquipmentID\n    WHERE si.SeverityLevel = 'Высокий'\n    AND mr.Cost > 2000\n    GROUP BY e.EquipmentID, e.EquipmentName, e.Manufacturer, e.Status\n    HAVING MAX(mr.MaintenanceDate) < DATE_SUB(CURDATE(), INTERVAL 6 MONTH)\n),\nRankedEquipment AS (\n    SELECT \n        EquipmentName,\n        Manufacturer,\n        IncidentCount,\n        TotalMaintenanceCost,\n        LastMaintenanceDate,\n        Status,\n        ROW_NUMBER() OVER (ORDER BY IncidentCount DESC) as RowNum\n    FROM EquipmentIncidentStats\n)\nSELECT \n    EquipmentName,\n    Manufacturer,\n    IncidentCount,\n    TotalMaintenanceCost,\n    LastMaintenanceDate,\n    Status\nFROM RankedEquipment\nWHERE RowNum <= 6\nORDER BY IncidentCount DESC;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH EquipmentIncidentStats AS (\n    SELECT \n        e.EquipmentID,\n        e.EquipmentName,\n        e.Manufacturer,\n        COUNT(si.IncidentID) as HighSeverityIncidents,\n        SUM(mr.Cost) as TotalMaintenanceCost,\n        MAX(mr.MaintenanceDate) as LastMaintenanceDate,\n        e.Status\n    FROM Equipment e\n    LEFT JOIN SafetyIncidents si ON e.EquipmentID = si.EquipmentID AND si.SeverityLevel = 'Высокий'\n    LEFT JOIN MaintenanceRecords mr ON e.EquipmentID = mr.EquipmentID\n    GROUP BY e.EquipmentID, e.EquipmentName, e.Manufacturer, e.Status\n    HAVING SUM(mr.Cost) > 2000 AND DATEDIFF(CURDATE(), MAX(mr.MaintenanceDate)) > 180\n)\nSELECT \n    EquipmentName,\n    Manufacturer,\n    HighSeverityIncidents,\n    ROUND(TotalMaintenanceCost, 2) as TotalMaintenanceCost,\n    LastMaintenanceDate,\n    Status\nFROM EquipmentIncidentStats\nORDER BY HighSeverityIncidents DESC\nLIMIT 6;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH EquipmentMaintenanceStats AS (\n    SELECT \n        e.EquipmentID,\n        e.EquipmentName,\n        e.Manufacturer,\n        e.Status,\n        COUNT(DISTINCT si.IncidentID) as IncidentCount,\n        SUM(mr.Cost) as TotalMaintenanceCost,\n        MAX(mr.MaintenanceDate) as LastMaintenanceDate\n    FROM Equipment e\n    JOIN SafetyIncidents si ON e.EquipmentID = si.EquipmentID\n    JOIN MaintenanceRecords mr ON e.EquipmentID = mr.EquipmentID\n    WHERE si.SeverityLevel = 'Высокий'\n    AND DATEDIFF(CURDATE(), mr.MaintenanceDate) > 180\n    GROUP BY e.EquipmentID, e.EquipmentName, e.Manufacturer, e.Status\n    HAVING SUM(mr.Cost) > 2000\n)\nSELECT \n    EquipmentName,\n    Manufacturer,\n    IncidentCount,\n    TotalMaintenanceCost,\n    LastMaintenanceDate,\n    Status\nFROM EquipmentMaintenanceStats\nORDER BY IncidentCount DESC\nLIMIT 6;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "WITH EquipmentIncidents AS (\n    SELECT \n        e.EquipmentID,\n        e.EquipmentName,\n        e.Manufacturer,\n        e.Status,\n        COUNT(si.IncidentID) AS IncidentCount\n    FROM Equipment e\n    JOIN SafetyIncidents si ON e.EquipmentID = si.EquipmentID\n    WHERE si.SeverityLevel = 'Высокий'\n    GROUP BY e.EquipmentID, e.EquipmentName, e.Manufacturer, e.Status\n),\nEquipmentMaintenance AS (\n    SELECT \n        e.EquipmentID,\n        SUM(mr.Cost) AS TotalMaintenanceCost,\n        MAX(mr.MaintenanceDate) AS LastMaintenanceDate\n    FROM Equipment e\n    JOIN MaintenanceRecords mr ON e.EquipmentID = mr.EquipmentID\n    GROUP BY e.EquipmentID\n    HAVING SUM(mr.Cost) > 2000\n)\nSELECT \n    ei.EquipmentName,\n    ei.Manufacturer,\n    ei.IncidentCount,\n    em.TotalMaintenanceCost,\n    em.LastMaintenanceDate,\n    ei.Status\nFROM EquipmentIncidents ei\nJOIN EquipmentMaintenance em ON ei.EquipmentID = em.EquipmentID\nWHERE em.LastMaintenanceDate < DATE_SUB(CURDATE(), INTERVAL 6 MONTH)\nORDER BY ei.IncidentCount DESC\nLIMIT 6;",
            "gigachat_response": "SELECT \n    eq.EquipmentName,\n    eq.Manufacturer,\n    COUNT(si.IncidentID) AS IncidentCount,\n    SUM(mr.Cost) AS TotalMaintenanceCost,\n    MAX(mr.MaintenanceDate) AS LastMaintenanceDate,\n    eq.Status\nFROM Equipment eq\nJOIN MaintenanceRecords mr ON eq.EquipmentID = mr.EquipmentID\nLEFT JOIN SafetyIncidents si ON eq.EquipmentID = si.EquipmentID\nWHERE si.SeverityLevel = 'Высокий'\nAND mr.Cost > 2000\nAND TIMESTAMPDIFF(MONTH, MAX(mr.MaintenanceDate), NOW()) >= 6\nGROUP BY eq.EquipmentID\nHAVING IncidentCount > 0\nORDER BY IncidentCount DESC\nLIMIT 6;",
            "gigachat_response_ru": "SELECT \n    eq.EquipmentName,\n    eq.Manufacturer,\n    COUNT(si.IncidentID) AS IncidentCount,\n    SUM(mr.Cost) AS TotalMaintenanceCost,\n    MAX(mr.MaintenanceDate) AS LastMaintenanceDate,\n    eq.Status\nFROM Equipment eq\nLEFT JOIN MaintenanceRecords mr ON eq.EquipmentID = mr.EquipmentID\nLEFT JOIN SafetyIncidents si ON eq.EquipmentID = si.EquipmentID\nWHERE si.SeverityLevel = 'Высокий'\nAND mr.Cost > 2000\nGROUP BY eq.EquipmentID, eq.EquipmentName, eq.Manufacturer, eq.Status\nHAVING COUNT(si.IncidentID) > 0\nAND TIMESTAMPDIFF(MONTH, MAX(mr.MaintenanceDate), NOW()) >= 6\nORDER BY IncidentCount DESC\nLIMIT 6;"
        },
        {
            "question": "Получить список инженеров, работающих над проектами с бюджетом более 7 миллионов рублей, имеющих действующие сертификаты уровня 'Продвинутый' или 'Эксперт' и участвовавших в программах обучения стоимостью более 150000 рублей. В ответе будут показаны: имя инженера, должность, количество проектов, список сертификатов и общая стоимость обучения. Учитываются только завершенные программы обучения. Результаты отсортированы по количеству проектов, показаны топ-4 записи.",
            "sql_query": "WITH EngineerProjectTraining AS (\n    SELECT \n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', e.LastName) as EngineerName,\n        e.Position,\n        COUNT(DISTINCT p.ProjectID) as ProjectCount,\n        GROUP_CONCAT(DISTINCT c.CertificationName) as Certifications,\n        SUM(tp.Cost) as TotalTrainingCost\n    FROM Engineers e\n    JOIN Projects p ON p.ProjectManagerID = e.EngineerID\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    JOIN TrainingPrograms tp ON e.EngineerID = tp.EngineerID\n    WHERE p.Budget > 7000000\n    AND c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    AND c.Status = 'Действителен'\n    AND tp.Cost > 150000\n    AND tp.Status = 'Завершено'\n    GROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position\n)\nSELECT \n    EngineerName,\n    Position,\n    ProjectCount,\n    Certifications,\n    ROUND(TotalTrainingCost, 2) as TotalTrainingCost\nFROM EngineerProjectTraining\nORDER BY ProjectCount DESC, TotalTrainingCost DESC\nLIMIT 4;",
            "gpt-4o_response": "WITH EngineerProjectStats AS (\n    SELECT \n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', e.LastName) AS EngineerName,\n        e.Position,\n        COUNT(DISTINCT p.ProjectID) AS ProjectCount,\n        GROUP_CONCAT(DISTINCT c.CertificationName) AS Certifications,\n        SUM(tp.Cost) AS TotalTrainingCost\n    FROM Engineers e\n    JOIN Projects p ON e.EngineerID = p.ProjectManagerID\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    JOIN TrainingPrograms tp ON e.EngineerID = tp.EngineerID\n    WHERE p.Budget > 7000000\n    AND c.Status = 'Действителен'\n    AND (c.CertificationLevel = 'Продвинутый' OR c.CertificationLevel = 'Эксперт')\n    AND tp.Status = 'Завершено'\n    AND tp.Cost > 150000\n    GROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position\n)\nSELECT \n    EngineerName,\n    Position,\n    ProjectCount,\n    Certifications,\n    ROUND(TotalTrainingCost, 2) AS TotalTrainingCost\nFROM EngineerProjectStats\nORDER BY ProjectCount DESC\nLIMIT 4;",
            "gpt-4o_response_ru": "WITH EngineerProjectStats AS (\n    SELECT \n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', e.LastName) AS EngineerName,\n        e.Position,\n        COUNT(DISTINCT p.ProjectID) AS ProjectCount\n    FROM Engineers e\n    JOIN Projects p ON e.EngineerID = p.ProjectManagerID\n    WHERE p.Budget > 7000000\n    GROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position\n),\nEngineerCertificationStats AS (\n    SELECT \n        e.EngineerID,\n        GROUP_CONCAT(DISTINCT c.CertificationName) AS Certifications\n    FROM Engineers e\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE c.Status = 'Действителен'\n    AND c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    GROUP BY e.EngineerID\n),\nEngineerTrainingStats AS (\n    SELECT \n        e.EngineerID,\n        SUM(tp.Cost) AS TotalTrainingCost\n    FROM Engineers e\n    JOIN TrainingPrograms tp ON e.EngineerID = tp.EngineerID\n    WHERE tp.Status = 'Завершено'\n    AND tp.Cost > 150000\n    GROUP BY e.EngineerID\n)\nSELECT \n    eps.EngineerName,\n    eps.Position,\n    eps.ProjectCount,\n    ecs.Certifications,\n    ROUND(ets.TotalTrainingCost, 2) AS TotalTrainingCost\nFROM EngineerProjectStats eps\nJOIN EngineerCertificationStats ecs ON eps.EngineerID = ecs.EngineerID\nJOIN EngineerTrainingStats ets ON eps.EngineerID = ets.EngineerID\nORDER BY eps.ProjectCount DESC\nLIMIT 4;",
            "google/gemini-2.0-flash-001_response": "WITH EngineerProjectCertTraining AS (\n    SELECT \n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', e.LastName) AS EngineerName,\n        e.Position,\n        COUNT(DISTINCT p.ProjectID) AS ProjectCount,\n        GROUP_CONCAT(DISTINCT c.CertificationName) AS Certifications,\n        SUM(tp.Cost) AS TotalTrainingCost\n    FROM Engineers e\n    JOIN Projects p ON p.ProjectManagerID = e.EngineerID\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    LEFT JOIN TrainingPrograms tp ON e.EngineerID = tp.EngineerID\n    WHERE p.Budget > 7000000\n    AND c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    AND tp.Cost > 150000\n    AND tp.Status = 'Завершено'\n    GROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position\n)\nSELECT \n    EngineerName,\n    Position,\n    ProjectCount,\n    Certifications,\n    ROUND(TotalTrainingCost, 2) AS TotalTrainingCost\nFROM EngineerProjectCertTraining\nORDER BY ProjectCount DESC\nLIMIT 4;",
            "google/gemini-2.0-flash-001_response_ru": "WITH EngineerProjectCertTraining AS (\n    SELECT\n        e.EngineerID,\n        e.FirstName,\n        e.LastName,\n        e.Position,\n        COUNT(DISTINCT p.ProjectID) AS ProjectCount,\n        GROUP_CONCAT(DISTINCT c.CertificationName) AS Certifications,\n        SUM(tp.Cost) AS TotalTrainingCost\n    FROM Engineers e\n    JOIN Projects p ON p.ProjectManagerID = e.EngineerID\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    JOIN TrainingPrograms tp ON e.EngineerID = tp.EngineerID\n    WHERE p.Budget > 7000000\n    AND c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    AND c.Status = 'Действителен'\n    AND tp.Cost > 150000\n    AND tp.Status = 'Завершено'\n    GROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position\n)\nSELECT\n    FirstName || ' ' || LastName AS EngineerName,\n    Position,\n    ProjectCount,\n    Certifications,\n    ROUND(TotalTrainingCost, 2) AS TotalTrainingCost\nFROM EngineerProjectCertTraining\nORDER BY ProjectCount DESC\nLIMIT 4;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH EngineerProjectStats AS (\n    SELECT \n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', e.LastName) as EngineerName,\n        e.Position,\n        COUNT(DISTINCT p.ProjectID) as ProjectCount,\n        GROUP_CONCAT(DISTINCT c.CertificationName) as Certifications,\n        SUM(tp.Cost) as TotalTrainingCost\n    FROM Engineers e\n    JOIN Projects p ON e.EngineerID = p.ProjectManagerID\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    JOIN TrainingPrograms tp ON e.EngineerID = tp.EngineerID\n    WHERE p.Budget > 7000000\n    AND c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    AND c.Status = 'Действителен'\n    AND tp.Status = 'Завершено'\n    AND tp.Cost > 150000\n    GROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position\n)\nSELECT \n    EngineerName,\n    Position,\n    ProjectCount,\n    Certifications,\n    ROUND(TotalTrainingCost, 2) as TotalTrainingCost\nFROM EngineerProjectStats\nORDER BY ProjectCount DESC\nLIMIT 4;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH EngineerProjectStats AS (\n    SELECT \n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', e.LastName) as EngineerName,\n        e.Position,\n        COUNT(DISTINCT p.ProjectID) as ProjectCount\n    FROM Engineers e\n    JOIN Projects p ON e.EngineerID = p.ProjectManagerID\n    WHERE p.Budget > 7000000\n    GROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position\n),\nEngineerCertificationStats AS (\n    SELECT \n        e.EngineerID,\n        GROUP_CONCAT(DISTINCT c.CertificationName) as Certifications\n    FROM Engineers e\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    AND c.Status = 'Действителен'\n    GROUP BY e.EngineerID\n),\nEngineerTrainingStats AS (\n    SELECT \n        e.EngineerID,\n        SUM(tp.Cost) as TotalTrainingCost\n    FROM Engineers e\n    JOIN TrainingPrograms tp ON e.EngineerID = tp.EngineerID\n    WHERE tp.Status = 'Завершено'\n    AND tp.Cost > 150000\n    GROUP BY e.EngineerID\n)\nSELECT \n    eps.EngineerName,\n    eps.Position,\n    eps.ProjectCount,\n    ecs.Certifications,\n    ets.TotalTrainingCost\nFROM EngineerProjectStats eps\nJOIN EngineerCertificationStats ecs ON eps.EngineerID = ecs.EngineerID\nJOIN EngineerTrainingStats ets ON eps.EngineerID = ets.EngineerID\nORDER BY eps.ProjectCount DESC\nLIMIT 4;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH EngineerProjectStats AS (\n    SELECT \n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', e.LastName) AS EngineerName,\n        e.Position,\n        COUNT(DISTINCT p.ProjectID) AS ProjectCount,\n        GROUP_CONCAT(DISTINCT c.CertificationName) AS Certifications,\n        SUM(tp.Cost) AS TotalTrainingCost\n    FROM Engineers e\n    JOIN Projects p ON e.EngineerID = p.ProjectManagerID\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    JOIN TrainingPrograms tp ON e.EngineerID = tp.EngineerID\n    WHERE p.Budget > 7000000\n    AND c.Status = 'Действителен'\n    AND c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    AND tp.Status = 'Завершено'\n    AND tp.Cost > 150000\n    GROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position\n)\nSELECT \n    EngineerName,\n    Position,\n    ProjectCount,\n    Certifications,\n    ROUND(TotalTrainingCost, 2) AS TotalTrainingCost\nFROM EngineerProjectStats\nORDER BY ProjectCount DESC\nLIMIT 4;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "WITH EngineerProjectStats AS (\n    SELECT \n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', e.LastName) AS EngineerName,\n        e.Position,\n        COUNT(DISTINCT p.ProjectID) AS ProjectCount,\n        GROUP_CONCAT(DISTINCT c.CertificationName) AS Certifications,\n        SUM(tp.Cost) AS TotalTrainingCost\n    FROM Engineers e\n    JOIN Projects p ON e.EngineerID = p.ProjectManagerID\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    JOIN TrainingPrograms tp ON e.EngineerID = tp.EngineerID\n    WHERE p.Budget > 7000000\n    AND c.Status = 'Действителен'\n    AND c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    AND tp.Status = 'Завершено'\n    AND tp.Cost > 150000\n    GROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position\n)\nSELECT \n    EngineerName,\n    Position,\n    ProjectCount,\n    Certifications,\n    ROUND(TotalTrainingCost, 2) AS TotalTrainingCost\nFROM EngineerProjectStats\nORDER BY ProjectCount DESC\nLIMIT 4;",
            "gigachat_response": "WITH CertifiedAndTrainedEngineers AS (\n    SELECT \n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', e.MiddleName, ' ', e.LastName) AS FullName,\n        e.Position,\n        COUNT(DISTINCT p.ProjectID) AS ProjectCount,\n        GROUP_CONCAT(DISTINCT c.CertificationName ORDER BY c.CertificationName SEPARATOR ', ') AS CertificateList,\n        SUM(tp.Cost) AS TotalTrainingCost\n    FROM Engineers e\n    INNER JOIN Projects p ON e.EngineerID = p.ProjectManagerID OR e.EngineerID IN (SELECT DISTINCT AssignedTo FROM Tasks WHERE ProjectID = p.ProjectID)\n    INNER JOIN Certifications c ON e.EngineerID = c.EngineerID\n    INNER JOIN TrainingPrograms tp ON e.EngineerID = tp.EngineerID\n    WHERE p.Budget > 7000000\n      AND c.Status = 'Действителен'\n      AND c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n      AND tp.Status = 'Завершено'\n      AND tp.Cost > 150000\n    GROUP BY e.EngineerID, e.FirstName, e.MiddleName, e.LastName, e.Position\n)\nSELECT *\nFROM CertifiedAndTrainedEngineers\nORDER BY ProjectCount DESC\nLIMIT 4;",
            "gigachat_response_ru": "WITH CertifiedAndTrainedEngineers AS (\n    SELECT DISTINCT\n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', e.MiddleName, ' ', e.LastName) AS FullName,\n        e.Position,\n        COUNT(DISTINCT p.ProjectID) OVER(PARTITION BY e.EngineerID) AS ProjectCount,\n        GROUP_CONCAT(DISTINCT c.CertificationName ORDER BY c.CertificationName SEPARATOR ', ') AS CertificateList,\n        SUM(tp.Cost) OVER(PARTITION BY e.EngineerID) AS TotalTrainingCost\n    FROM Engineers e\n    INNER JOIN Projects p ON e.EngineerID = p.ProjectManagerID OR e.EngineerID IN (SELECT AssignedTo FROM Tasks WHERE ProjectID = p.ProjectID)\n    INNER JOIN Certifications c ON e.EngineerID = c.EngineerID\n    INNER JOIN TrainingPrograms tp ON e.EngineerID = tp.EngineerID\n    WHERE p.Budget > 7000000\n      AND c.Status = 'Действителен'\n      AND c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n      AND tp.Status = 'Завершено'\n      AND tp.Cost > 150000\n)\nSELECT *\nFROM CertifiedAndTrainedEngineers\nORDER BY ProjectCount DESC\nLIMIT 4;"
        },
        {
            "question": "Определить проекты с превышающим среднее количество высокоприоритетных задач и средней продолжительностью выполнения более 10 дней. В ответе будут показаны: название проекта, количество высокоприоритетных задач, средняя продолжительность задач в днях, список ответственных инженеров и текущий статус проекта. Результаты отсортированы по количеству высокоприоритетных задач и средней продолжительности, показаны топ-3 записи.",
            "sql_query": "WITH ProjectTaskStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        SUM(CASE WHEN t.Priority = 'Высокий' THEN 1 ELSE 0 END) as HighPriorityTasks,\n        AVG(DATEDIFF(t.DueDate, t.StartDate)) as AvgTaskDuration,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as ResponsibleEngineers,\n        p.Status as ProjectStatus\n    FROM Projects p\n    JOIN Tasks t ON p.ProjectID = t.ProjectID\n    JOIN Engineers e ON t.AssignedTo = e.EngineerID\n    WHERE t.Status = 'В процессе'\n    GROUP BY p.ProjectID, p.ProjectName, p.Status\n    HAVING SUM(CASE WHEN t.Priority = 'Высокий' THEN 1 ELSE 0 END) > (\n        SELECT AVG(TaskCount)\n        FROM (\n            SELECT COUNT(TaskID) as TaskCount\n            FROM Tasks\n            WHERE Priority = 'Высокий'\n            GROUP BY ProjectID\n        ) as AvgCounts\n    )\n    AND AVG(DATEDIFF(t.DueDate, t.StartDate)) > 10\n)\nSELECT \n    ProjectName,\n    HighPriorityTasks,\n    ROUND(AvgTaskDuration, 1) as AvgTaskDurationDays,\n    ResponsibleEngineers,\n    ProjectStatus\nFROM ProjectTaskStats\nORDER BY HighPriorityTasks DESC, AvgTaskDuration DESC\nLIMIT 3;",
            "gpt-4o_response": "WITH HighPriorityTaskStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        COUNT(t.TaskID) AS HighPriorityTaskCount,\n        AVG(DATEDIFF(t.DueDate, t.StartDate)) AS AvgTaskDuration,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS ResponsibleEngineers,\n        p.Status AS ProjectStatus\n    FROM Projects p\n    LEFT JOIN Tasks t ON p.ProjectID = t.ProjectID\n    LEFT JOIN Engineers e ON t.AssignedTo = e.EngineerID\n    WHERE t.Priority = 'Высокий'\n    GROUP BY p.ProjectID, p.ProjectName, p.Status\n    HAVING HighPriorityTaskCount > (\n        SELECT AVG(HighPriorityTaskCount) \n        FROM (\n            SELECT COUNT(t.TaskID) AS HighPriorityTaskCount\n            FROM Tasks t\n            WHERE t.Priority = 'Высокий'\n            GROUP BY t.ProjectID\n        ) AS SubQuery\n    )\n    AND AvgTaskDuration > 10\n)\nSELECT \n    ProjectName,\n    HighPriorityTaskCount,\n    ROUND(AvgTaskDuration, 2) AS AvgTaskDuration,\n    ResponsibleEngineers,\n    ProjectStatus\nFROM HighPriorityTaskStats\nORDER BY HighPriorityTaskCount DESC, AvgTaskDuration DESC\nLIMIT 3;",
            "gpt-4o_response_ru": "WITH HighPriorityTaskStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        COUNT(t.TaskID) AS HighPriorityTaskCount,\n        AVG(DATEDIFF(t.DueDate, t.StartDate)) AS AvgTaskDuration,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS ResponsibleEngineers,\n        p.Status AS ProjectStatus\n    FROM Projects p\n    LEFT JOIN Tasks t ON p.ProjectID = t.ProjectID\n    LEFT JOIN Engineers e ON t.AssignedTo = e.EngineerID\n    WHERE t.Priority = 'Высокий'\n    GROUP BY p.ProjectID, p.ProjectName, p.Status\n),\nAverageHighPriorityTaskCount AS (\n    SELECT AVG(HighPriorityTaskCount) AS AvgHighPriorityTaskCount\n    FROM HighPriorityTaskStats\n)\nSELECT \n    hpts.ProjectName,\n    hpts.HighPriorityTaskCount,\n    ROUND(hpts.AvgTaskDuration, 2) AS AvgTaskDuration,\n    hpts.ResponsibleEngineers,\n    hpts.ProjectStatus\nFROM HighPriorityTaskStats hpts\nJOIN AverageHighPriorityTaskCount ahtc ON hpts.HighPriorityTaskCount > ahtc.AvgHighPriorityTaskCount\nWHERE hpts.AvgTaskDuration > 10\nORDER BY hpts.HighPriorityTaskCount DESC, hpts.AvgTaskDuration DESC\nLIMIT 3;",
            "google/gemini-2.0-flash-001_response": "WITH ProjectHighPriorityTasks AS (\n    SELECT\n        ProjectID,\n        COUNT(*) AS HighPriorityTaskCount\n    FROM Tasks\n    WHERE Priority = 'Высокий'\n    GROUP BY ProjectID\n),\nProjectTaskDurations AS (\n    SELECT\n        ProjectID,\n        AVG(DATEDIFF(DueDate, StartDate)) AS AvgTaskDuration\n    FROM Tasks\n    GROUP BY ProjectID\n),\nAverageHighPriorityTasks AS (\n    SELECT AVG(HighPriorityTaskCount) AS AvgHighPriorityTaskCount\n    FROM ProjectHighPriorityTasks\n),\nAverageTaskDuration AS (\n    SELECT AVG(AvgTaskDuration) AS AvgDuration\n    FROM ProjectTaskDurations\n)\nSELECT\n    p.ProjectName,\n    hp.HighPriorityTaskCount,\n    ROUND(dur.AvgTaskDuration, 2) AS AvgTaskDuration,\n    GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS AssignedEngineers,\n    p.Status\nFROM Projects p\nJOIN ProjectHighPriorityTasks hp ON p.ProjectID = hp.ProjectID\nJOIN ProjectTaskDurations dur ON p.ProjectID = dur.ProjectID\nLEFT JOIN Tasks t ON p.ProjectID = t.ProjectID\nLEFT JOIN Engineers e ON t.AssignedTo = e.EngineerID\nWHERE hp.HighPriorityTaskCount > (SELECT AvgHighPriorityTaskCount FROM AverageHighPriorityTasks)\nAND dur.AvgTaskDuration > 10\nGROUP BY p.ProjectID, p.ProjectName, hp.HighPriorityTaskCount, dur.AvgTaskDuration, p.Status\nORDER BY hp.HighPriorityTaskCount DESC, dur.AvgTaskDuration DESC\nLIMIT 3;",
            "google/gemini-2.0-flash-001_response_ru": "WITH ProjectHighPriorityTasks AS (\n    SELECT\n        p.ProjectID,\n        p.ProjectName,\n        COUNT(CASE WHEN t.Priority = 'Высокий' THEN t.TaskID END) AS HighPriorityTaskCount,\n        AVG(JULIANDAY(t.DueDate) - JULIANDAY(t.StartDate)) AS AvgTaskDuration,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS AssignedEngineers,\n        p.Status\n    FROM Projects p\n    JOIN Tasks t ON p.ProjectID = t.ProjectID\n    JOIN Engineers e ON t.AssignedTo = e.EngineerID\n    GROUP BY p.ProjectID, p.ProjectName, p.Status\n),\nAvgHighPriorityTasks AS (\n    SELECT AVG(HighPriorityTaskCount) AS AvgHighPriorityTaskCount\n    FROM ProjectHighPriorityTasks\n),\nFilteredProjects AS (\n    SELECT\n        pht.ProjectID,\n        pht.ProjectName,\n        pht.HighPriorityTaskCount,\n        pht.AvgTaskDuration,\n        pht.AssignedEngineers,\n        pht.Status\n    FROM ProjectHighPriorityTasks pht, AvgHighPriorityTasks aht\n    WHERE pht.HighPriorityTaskCount > aht.AvgHighPriorityTaskCount\n    AND pht.AvgTaskDuration > 10\n)\nSELECT\n    fp.ProjectName,\n    fp.HighPriorityTaskCount,\n    ROUND(fp.AvgTaskDuration, 2) AS AvgTaskDuration,\n    fp.AssignedEngineers,\n    fp.Status\nFROM FilteredProjects fp\nORDER BY fp.HighPriorityTaskCount DESC, fp.AvgTaskDuration DESC\nLIMIT 3;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH ProjectTaskStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        COUNT(CASE WHEN t.Priority = 'Высокий' THEN t.TaskID END) as HighPriorityTaskCount,\n        AVG(DATEDIFF(COALESCE(t.CompletionDate, t.DueDate), t.StartDate)) as AvgTaskDuration,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as ResponsibleEngineers,\n        p.Status as ProjectStatus\n    FROM Projects p\n    LEFT JOIN Tasks t ON p.ProjectID = t.ProjectID\n    LEFT JOIN Engineers e ON t.AssignedTo = e.EngineerID\n    GROUP BY p.ProjectID, p.ProjectName, p.Status\n),\nAverageStats AS (\n    SELECT \n        AVG(HighPriorityTaskCount) as AvgHighPriorityTaskCount,\n        AVG(AvgTaskDuration) as AvgAvgTaskDuration\n    FROM ProjectTaskStats\n)\nSELECT \n    ProjectName,\n    HighPriorityTaskCount,\n    ROUND(AvgTaskDuration, 2) as AvgTaskDuration,\n    ResponsibleEngineers,\n    ProjectStatus\nFROM ProjectTaskStats\nWHERE HighPriorityTaskCount > (SELECT AvgHighPriorityTaskCount FROM AverageStats)\nAND AvgTaskDuration > 10\nORDER BY HighPriorityTaskCount DESC, AvgTaskDuration DESC\nLIMIT 3;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH ProjectTaskStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        COUNT(CASE WHEN t.Priority = 'Высокий' THEN t.TaskID END) as HighPriorityTaskCount,\n        AVG(DATEDIFF(COALESCE(t.CompletionDate, t.DueDate), t.StartDate)) as AvgTaskDuration,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as ResponsibleEngineers,\n        p.Status as ProjectStatus\n    FROM Projects p\n    LEFT JOIN Tasks t ON p.ProjectID = t.ProjectID\n    LEFT JOIN Engineers e ON t.AssignedTo = e.EngineerID\n    GROUP BY p.ProjectID, p.ProjectName, p.Status\n),\nAverageStats AS (\n    SELECT \n        AVG(HighPriorityTaskCount) as AvgHighPriorityTaskCount,\n        AVG(AvgTaskDuration) as AvgAvgTaskDuration\n    FROM ProjectTaskStats\n)\nSELECT \n    pts.ProjectName,\n    pts.HighPriorityTaskCount,\n    ROUND(pts.AvgTaskDuration, 2) as AvgTaskDuration,\n    pts.ResponsibleEngineers,\n    pts.ProjectStatus\nFROM ProjectTaskStats pts\nCROSS JOIN AverageStats av\nWHERE pts.HighPriorityTaskCount > av.AvgHighPriorityTaskCount\nAND pts.AvgTaskDuration > 10\nORDER BY pts.HighPriorityTaskCount DESC, pts.AvgTaskDuration DESC\nLIMIT 3;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH ProjectHighPriorityTasks AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        p.Status as ProjectStatus,\n        COUNT(t.TaskID) as HighPriorityTaskCount,\n        AVG(DATEDIFF(t.DueDate, t.StartDate)) as AvgTaskDuration,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as ResponsibleEngineers\n    FROM Projects p\n    JOIN Tasks t ON p.ProjectID = t.ProjectID\n    JOIN Engineers e ON t.AssignedTo = e.EngineerID\n    WHERE t.Priority = 'Высокий'\n    GROUP BY p.ProjectID, p.ProjectName, p.Status\n    HAVING AVG(DATEDIFF(t.DueDate, t.StartDate)) > 10\n)\nSELECT \n    ProjectName,\n    HighPriorityTaskCount,\n    ROUND(AvgTaskDuration, 2) as AvgTaskDuration,\n    ResponsibleEngineers,\n    ProjectStatus\nFROM ProjectHighPriorityTasks\nWHERE HighPriorityTaskCount > (SELECT AVG(HighPriorityTaskCount) FROM ProjectHighPriorityTasks)\nORDER BY HighPriorityTaskCount DESC, AvgTaskDuration DESC\nLIMIT 3;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "WITH HighPriorityTasks AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        p.Status,\n        COUNT(t.TaskID) AS HighPriorityTaskCount,\n        AVG(DATEDIFF(t.DueDate, t.StartDate)) AS AvgTaskDuration,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS ResponsibleEngineers\n    FROM Projects p\n    JOIN Tasks t ON p.ProjectID = t.ProjectID\n    JOIN Engineers e ON t.AssignedTo = e.EngineerID\n    WHERE t.Priority = 'Высокий'\n    GROUP BY p.ProjectID, p.ProjectName, p.Status\n    HAVING AVG(DATEDIFF(t.DueDate, t.StartDate)) > 10\n    AND COUNT(t.TaskID) > (SELECT AVG(HighPriorityCount) FROM (SELECT COUNT(TaskID) AS HighPriorityCount FROM Tasks WHERE Priority = 'Высокий' GROUP BY ProjectID) AS AvgCount)\n)\nSELECT \n    ProjectName,\n    HighPriorityTaskCount,\n    ROUND(AvgTaskDuration, 2) AS AvgTaskDuration,\n    ResponsibleEngineers,\n    Status\nFROM HighPriorityTasks\nORDER BY HighPriorityTaskCount DESC, AvgTaskDuration DESC\nLIMIT 3;",
            "gigachat_response": "WITH HighPriorityTasks AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        COUNT(*) AS HighPriorityTaskCount,\n        AVG(DATEDIFF(t.DueDate, t.StartDate)) AS AverageTaskDurationDays,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS ResponsibleEngineers,\n        p.Status\n    FROM Projects p\n    INNER JOIN Tasks t ON p.ProjectID = t.ProjectID\n    INNER JOIN Engineers e ON t.AssignedTo = e.EngineerID\n    WHERE t.Priority = 'Высокий'\n    GROUP BY p.ProjectID, p.ProjectName, p.Status\n    HAVING COUNT(*) > (SELECT AVG(HighPriorityTaskCount) FROM (\n        SELECT COUNT(*) AS HighPriorityTaskCount \n        FROM Tasks \n        WHERE Priority = 'Высокий' \n        GROUP BY ProjectID\n    ) AS SubQuery)\n    AND AVG(DATEDIFF(t.DueDate, t.StartDate)) > 10\n)\nSELECT *\nFROM HighPriorityTasks\nORDER BY HighPriorityTaskCount DESC, AverageTaskDurationDays DESC\nLIMIT 3;",
            "gigachat_response_ru": "WITH HighPriorityTasks AS (\n    SELECT \n        t.ProjectID,\n        COUNT(*) AS HighPriorityTaskCount\n    FROM Tasks t\n    WHERE t.Priority = 'Высокий'\n    GROUP BY t.ProjectID\n),\nAverageTaskDuration AS (\n    SELECT \n        t.ProjectID,\n        AVG(DATEDIFF(t.CompletionDate, t.StartDate)) AS AverageDuration\n    FROM Tasks t\n    WHERE t.CompletionDate IS NOT NULL\n    GROUP BY t.ProjectID\n),\nProjectDetails AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        h.HighPriorityTaskCount,\n        a.AverageDuration,\n        p.Status,\n        GROUP_CONCAT(CONCAT(e.FirstName, ' ', e.LastName)) AS ResponsibleEngineers\n    FROM Projects p\n    INNER JOIN HighPriorityTasks h ON p.ProjectID = h.ProjectID\n    INNER JOIN AverageTaskDuration a ON p.ProjectID = a.ProjectID\n    INNER JOIN Tasks t ON p.ProjectID = t.ProjectID\n    INNER JOIN Engineers e ON t.AssignedTo = e.EngineerID\n    GROUP BY p.ProjectID, p.ProjectName, h.HighPriorityTaskCount, a.AverageDuration, p.Status\n)\nSELECT *\nFROM ProjectDetails pd\nWHERE pd.HighPriorityTaskCount > (SELECT AVG(HighPriorityTaskCount) FROM HighPriorityTasks)\nAND pd.AverageDuration > 10\nORDER BY pd.HighPriorityTaskCount DESC, pd.AverageDuration DESC\nLIMIT 3;"
        },
        {
            "question": "Выявить отделы с наибольшим количеством инженеров, имеющих сертификаты уровня 'Продвинутый' или 'Эксперт', и участвующих в проектах с бюджетом свыше 5 миллионов рублей. В ответе будут показаны: название отдела, количество квалифицированных инженеров, количество проектов, общий бюджет проектов и список имеющихся сертификатов. Результаты отсортированы по количеству квалифицированных инженеров и общему бюджету, показаны топ-4 записи.",
            "sql_query": "WITH DepartmentEngineerStats AS (\n    SELECT \n        d.DepartmentID,\n        d.DepartmentName,\n        COUNT(DISTINCT e.EngineerID) as QualifiedEngineers,\n        COUNT(DISTINCT p.ProjectID) as ProjectCount,\n        SUM(p.Budget) as TotalProjectBudget,\n        GROUP_CONCAT(DISTINCT c.CertificationName) as Certifications\n    FROM Departments d\n    JOIN Engineers e ON d.DepartmentID = e.DepartmentID\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    JOIN Projects p ON p.ProjectManagerID = e.EngineerID\n    WHERE c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    AND c.Status = 'Действителен'\n    AND p.Budget > 5000000\n    GROUP BY d.DepartmentID, d.DepartmentName\n)\nSELECT \n    DepartmentName,\n    QualifiedEngineers,\n    ProjectCount,\n    ROUND(TotalProjectBudget, 2) as TotalProjectBudget,\n    Certifications\nFROM DepartmentEngineerStats\nORDER BY QualifiedEngineers DESC, TotalProjectBudget DESC\nLIMIT 4;",
            "gpt-4o_response": "WITH QualifiedEngineers AS (\n    SELECT \n        e.EngineerID,\n        e.DepartmentID,\n        COUNT(DISTINCT c.CertificationID) AS CertificationCount,\n        GROUP_CONCAT(DISTINCT c.CertificationName) AS Certifications\n    FROM Engineers e\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    GROUP BY e.EngineerID, e.DepartmentID\n),\nDepartmentProjectStats AS (\n    SELECT \n        d.DepartmentID,\n        d.DepartmentName,\n        COUNT(DISTINCT p.ProjectID) AS ProjectCount,\n        SUM(p.Budget) AS TotalProjectBudget\n    FROM Departments d\n    JOIN Projects p ON d.DepartmentID = p.DepartmentID\n    WHERE p.Budget > 5000000\n    GROUP BY d.DepartmentID, d.DepartmentName\n),\nDepartmentQualifiedEngineers AS (\n    SELECT \n        qe.DepartmentID,\n        COUNT(DISTINCT qe.EngineerID) AS QualifiedEngineerCount,\n        GROUP_CONCAT(DISTINCT qe.Certifications) AS Certifications\n    FROM QualifiedEngineers qe\n    GROUP BY qe.DepartmentID\n)\nSELECT \n    dps.DepartmentName,\n    dqe.QualifiedEngineerCount,\n    dps.ProjectCount,\n    dps.TotalProjectBudget,\n    dqe.Certifications\nFROM DepartmentProjectStats dps\nJOIN DepartmentQualifiedEngineers dqe ON dps.DepartmentID = dqe.DepartmentID\nORDER BY dqe.QualifiedEngineerCount DESC, dps.TotalProjectBudget DESC\nLIMIT 4;",
            "gpt-4o_response_ru": "WITH QualifiedEngineers AS (\n    SELECT \n        e.EngineerID,\n        e.DepartmentID,\n        COUNT(DISTINCT c.CertificationID) AS CertificationCount,\n        GROUP_CONCAT(DISTINCT c.CertificationName) AS Certifications\n    FROM Engineers e\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    GROUP BY e.EngineerID, e.DepartmentID\n),\nDepartmentProjectStats AS (\n    SELECT \n        d.DepartmentID,\n        d.DepartmentName,\n        COUNT(DISTINCT p.ProjectID) AS ProjectCount,\n        SUM(p.Budget) AS TotalProjectBudget\n    FROM Departments d\n    JOIN Projects p ON d.DepartmentID = p.DepartmentID\n    WHERE p.Budget > 5000000\n    GROUP BY d.DepartmentID, d.DepartmentName\n),\nQualifiedDepartmentStats AS (\n    SELECT \n        qe.DepartmentID,\n        dp.DepartmentName,\n        COUNT(DISTINCT qe.EngineerID) AS QualifiedEngineerCount,\n        dp.ProjectCount,\n        dp.TotalProjectBudget,\n        GROUP_CONCAT(DISTINCT qe.Certifications) AS Certifications\n    FROM QualifiedEngineers qe\n    JOIN DepartmentProjectStats dp ON qe.DepartmentID = dp.DepartmentID\n    GROUP BY qe.DepartmentID, dp.DepartmentName, dp.ProjectCount, dp.TotalProjectBudget\n)\nSELECT \n    DepartmentName,\n    QualifiedEngineerCount,\n    ProjectCount,\n    ROUND(TotalProjectBudget, 2) AS TotalProjectBudget,\n    Certifications\nFROM QualifiedDepartmentStats\nORDER BY QualifiedEngineerCount DESC, TotalProjectBudget DESC\nLIMIT 4;",
            "google/gemini-2.0-flash-001_response": "WITH QualifiedEngineers AS (\n    SELECT\n        e.EngineerID,\n        e.DepartmentID,\n        CONCAT(e.FirstName, ' ', e.LastName) AS EngineerName,\n        GROUP_CONCAT(DISTINCT c.CertificationName) AS Certifications\n    FROM Engineers e\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    GROUP BY e.EngineerID, e.FirstName, e.LastName, e.DepartmentID\n),\nProjectBudgets AS (\n    SELECT\n        p.ProjectID,\n        p.DepartmentID,\n        p.ProjectName,\n        p.Budget\n    FROM Projects p\n    WHERE p.Budget > 5000000\n)\nSELECT\n    d.DepartmentName,\n    COUNT(DISTINCT qe.EngineerID) AS QualifiedEngineersCount,\n    COUNT(DISTINCT pb.ProjectID) AS ProjectCount,\n    SUM(pb.Budget) AS TotalProjectBudget,\n    GROUP_CONCAT(DISTINCT qe.Certifications) AS Certifications\nFROM Departments d\nJOIN QualifiedEngineers qe ON d.DepartmentID = qe.DepartmentID\nJOIN ProjectBudgets pb ON d.DepartmentID = pb.DepartmentID\nGROUP BY d.DepartmentName\nORDER BY QualifiedEngineersCount DESC, TotalProjectBudget DESC\nLIMIT 4;",
            "google/gemini-2.0-flash-001_response_ru": "WITH QualifiedEngineers AS (\n    SELECT\n        e.EngineerID,\n        e.DepartmentID,\n        CONCAT(e.FirstName, ' ', e.LastName) AS EngineerName,\n        GROUP_CONCAT(DISTINCT c.CertificationName) AS Certifications\n    FROM Engineers e\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    GROUP BY e.EngineerID, e.FirstName, e.LastName, e.DepartmentID\n),\nDepartmentProjectStats AS (\n    SELECT\n        d.DepartmentID,\n        d.DepartmentName,\n        COUNT(DISTINCT p.ProjectID) AS ProjectCount,\n        SUM(p.Budget) AS TotalBudget\n    FROM Departments d\n    JOIN Projects p ON d.DepartmentID = p.DepartmentID\n    WHERE p.Budget > 5000000\n    GROUP BY d.DepartmentID, d.DepartmentName\n)\nSELECT\n    dps.DepartmentName,\n    COUNT(DISTINCT qe.EngineerID) AS QualifiedEngineersCount,\n    dps.ProjectCount,\n    dps.TotalBudget,\n    GROUP_CONCAT(DISTINCT qe.Certifications) AS Certifications\nFROM DepartmentProjectStats dps\nJOIN QualifiedEngineers qe ON dps.DepartmentID = qe.DepartmentID\nGROUP BY dps.DepartmentName, dps.ProjectCount, dps.TotalBudget\nORDER BY QualifiedEngineersCount DESC, dps.TotalBudget DESC\nLIMIT 4;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH DepartmentStats AS (\n    SELECT \n        d.DepartmentName,\n        COUNT(DISTINCT e.EngineerID) as QualifiedEngineers,\n        COUNT(DISTINCT p.ProjectID) as ProjectCount,\n        SUM(p.Budget) as TotalBudget,\n        GROUP_CONCAT(DISTINCT c.CertificationName) as Certifications\n    FROM Departments d\n    JOIN Engineers e ON d.DepartmentID = e.DepartmentID\n    JOIN Projects p ON e.EngineerID = p.ProjectManagerID\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    AND p.Budget > 5000000\n    GROUP BY d.DepartmentName\n)\nSELECT \n    DepartmentName,\n    QualifiedEngineers,\n    ProjectCount,\n    ROUND(TotalBudget, 2) as TotalBudget,\n    Certifications\nFROM DepartmentStats\nORDER BY QualifiedEngineers DESC, TotalBudget DESC\nLIMIT 4;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH DepartmentEngineerStats AS (\n    SELECT \n        d.DepartmentName,\n        COUNT(DISTINCT e.EngineerID) as QualifiedEngineerCount,\n        COUNT(DISTINCT p.ProjectID) as ProjectCount,\n        SUM(p.Budget) as TotalBudget,\n        GROUP_CONCAT(DISTINCT c.CertificationName) as Certifications\n    FROM Departments d\n    JOIN Engineers e ON d.DepartmentID = e.DepartmentID\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    JOIN Projects p ON e.EngineerID = p.ProjectManagerID\n    WHERE c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    AND p.Budget > 5000000\n    GROUP BY d.DepartmentName\n)\nSELECT \n    DepartmentName,\n    QualifiedEngineerCount,\n    ProjectCount,\n    ROUND(TotalBudget, 2) as TotalBudget,\n    Certifications\nFROM DepartmentEngineerStats\nORDER BY QualifiedEngineerCount DESC, TotalBudget DESC\nLIMIT 4;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH QualifiedEngineers AS (\n    SELECT \n        e.EngineerID,\n        e.DepartmentID,\n        d.DepartmentName,\n        c.CertificationName\n    FROM Engineers e\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    JOIN Departments d ON e.DepartmentID = d.DepartmentID\n    WHERE c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    AND c.Status = 'Действителен'\n),\nHighBudgetProjects AS (\n    SELECT \n        p.ProjectID,\n        p.DepartmentID,\n        p.Budget\n    FROM Projects p\n    WHERE p.Budget > 5000000\n),\nDepartmentStats AS (\n    SELECT \n        qe.DepartmentID,\n        qe.DepartmentName,\n        COUNT(DISTINCT qe.EngineerID) AS QualifiedEngineerCount,\n        COUNT(DISTINCT hbp.ProjectID) AS ProjectCount,\n        SUM(hbp.Budget) AS TotalBudget,\n        GROUP_CONCAT(DISTINCT qe.CertificationName) AS Certifications\n    FROM QualifiedEngineers qe\n    JOIN HighBudgetProjects hbp ON qe.DepartmentID = hbp.DepartmentID\n    GROUP BY qe.DepartmentID, qe.DepartmentName\n)\nSELECT \n    DepartmentName,\n    QualifiedEngineerCount,\n    ProjectCount,\n    TotalBudget,\n    Certifications\nFROM DepartmentStats\nORDER BY QualifiedEngineerCount DESC, TotalBudget DESC\nLIMIT 4;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "WITH QualifiedEngineers AS (\n    SELECT \n        e.EngineerID,\n        e.DepartmentID,\n        c.CertificationName\n    FROM Engineers e\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    AND c.Status = 'Действителен'\n),\nDepartmentProjects AS (\n    SELECT \n        d.DepartmentID,\n        d.DepartmentName,\n        COUNT(DISTINCT p.ProjectID) AS ProjectCount,\n        SUM(p.Budget) AS TotalBudget\n    FROM Departments d\n    JOIN Projects p ON d.DepartmentID = p.DepartmentID\n    WHERE p.Budget > 5000000\n    GROUP BY d.DepartmentID, d.DepartmentName\n)\nSELECT \n    dp.DepartmentName,\n    COUNT(DISTINCT qe.EngineerID) AS QualifiedEngineersCount,\n    dp.ProjectCount,\n    dp.TotalBudget,\n    GROUP_CONCAT(DISTINCT qe.CertificationName) AS CertificationsList\nFROM DepartmentProjects dp\nJOIN QualifiedEngineers qe ON dp.DepartmentID = qe.DepartmentID\nGROUP BY dp.DepartmentName, dp.ProjectCount, dp.TotalBudget\nORDER BY QualifiedEngineersCount DESC, dp.TotalBudget DESC\nLIMIT 4;",
            "gigachat_response": "WITH QualifiedEngineers AS (\n    SELECT \n        e.EngineerID,\n        e.DepartmentID,\n        COUNT(c.CertificationID) AS CertifiedCount\n    FROM Engineers e\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n      AND c.Status = 'Действителен'\n    GROUP BY e.EngineerID, e.DepartmentID\n),\nQualifiedDepartments AS (\n    SELECT \n        de.DepartmentID,\n        de.DepartmentName,\n        COUNT(qe.EngineerID) AS NumQualifiedEngineers,\n        COUNT(DISTINCT pr.ProjectID) AS NumProjects,\n        SUM(pr.Budget) AS TotalProjectBudget,\n        GROUP_CONCAT(DISTINCT c.CertificationName ORDER BY c.CertificationName SEPARATOR ', ') AS CertificateList\n    FROM Departments de\n    JOIN QualifiedEngineers qe ON de.DepartmentID = qe.DepartmentID\n    JOIN Projects pr ON de.DepartmentID = pr.DepartmentID\n    JOIN Certifications c ON qe.EngineerID = c.EngineerID\n    WHERE pr.Budget > 5000000\n    GROUP BY de.DepartmentID, de.DepartmentName\n)\nSELECT *\nFROM QualifiedDepartments\nORDER BY NumQualifiedEngineers DESC, TotalProjectBudget DESC\nLIMIT 4;",
            "gigachat_response_ru": "WITH QualifiedEngineers AS (\n    SELECT DISTINCT e.EngineerID, e.DepartmentID\n    FROM Engineers e\n    INNER JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n      AND c.Status = 'Действителен'\n),\nQualifiedDepartments AS (\n    SELECT de.DepartmentID, COUNT(qe.EngineerID) AS NumQualifiedEngineers\n    FROM Departments de\n    INNER JOIN QualifiedEngineers qe ON de.DepartmentID = qe.DepartmentID\n    GROUP BY de.DepartmentID\n),\nHighBudgetProjects AS (\n    SELECT p.ProjectID, p.DepartmentID, p.Budget\n    FROM Projects p\n    WHERE p.Budget > 5000000\n),\nDepartmentProjectCounts AS (\n    SELECT dp.DepartmentID, COUNT(hbp.ProjectID) AS NumProjects, SUM(hbp.Budget) AS TotalBudget\n    FROM HighBudgetProjects hbp\n    INNER JOIN Departments dp ON hbp.DepartmentID = dp.DepartmentID\n    GROUP BY dp.DepartmentID\n)\nSELECT \n    d.DepartmentName,\n    qd.NumQualifiedEngineers,\n    dpc.NumProjects,\n    dpc.TotalBudget,\n    GROUP_CONCAT(DISTINCT c.CertificationName ORDER BY c.CertificationName SEPARATOR ', ') AS CertificateList\nFROM Departments d\nINNER JOIN QualifiedDepartments qd ON d.DepartmentID = qd.DepartmentID\nINNER JOIN DepartmentProjectCounts dpc ON d.DepartmentID = dpc.DepartmentID\nLEFT JOIN Engineers e ON d.DepartmentID = e.DepartmentID\nLEFT JOIN Certifications c ON e.EngineerID = c.EngineerID\nWHERE qd.NumQualifiedEngineers > 0\nGROUP BY d.DepartmentID, d.DepartmentName, qd.NumQualifiedEngineers, dpc.NumProjects, dpc.TotalBudget\nORDER BY qd.NumQualifiedEngineers DESC, dpc.TotalBudget DESC\nLIMIT 4;"
        },
        {
            "question": "Определить проекты с превышающим среднее количество инцидентов безопасности и средней стоимостью исправления свыше 2000 рублей. В ответе будут показаны: название проекта, количество инцидентов, средняя стоимость исправления в рублях, список ответственных инженеров и текущий статус проекта. Результаты отсортированы по количеству инцидентов и средней стоимости исправления, показаны топ-3 записи.",
            "sql_query": "WITH ProjectSafetyStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        COUNT(DISTINCT si.IncidentID) as IncidentCount,\n        AVG(m.Cost) as AvgCorrectionCost,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as ResponsibleEngineers,\n        p.Status as ProjectStatus\n    FROM Projects p\n    JOIN SafetyIncidents si ON si.EngineerID IN (\n        SELECT EngineerID \n        FROM Tasks \n        WHERE ProjectID = p.ProjectID\n    )\n    JOIN MaintenanceRecords m ON m.EngineerID = si.EngineerID\n    JOIN Engineers e ON si.EngineerID = e.EngineerID\n    WHERE si.SeverityLevel = 'Высокий'\n    GROUP BY p.ProjectID, p.ProjectName, p.Status\n    HAVING COUNT(DISTINCT si.IncidentID) > (\n        SELECT AVG(IncidentCount)\n        FROM (\n            SELECT COUNT(IncidentID) as IncidentCount\n            FROM SafetyIncidents\n            WHERE SeverityLevel = 'Высокий'\n            GROUP BY EngineerID\n        ) as AvgCounts\n    )\n    AND AVG(m.Cost) > 2000\n)\nSELECT \n    ProjectName,\n    IncidentCount,\n    ROUND(AvgCorrectionCost, 2) as AvgCorrectionCost,\n    ResponsibleEngineers,\n    ProjectStatus\nFROM ProjectSafetyStats\nORDER BY IncidentCount DESC, AvgCorrectionCost DESC\nLIMIT 3;",
            "gpt-4o_response": "WITH SafetyIncidentStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        COUNT(si.IncidentID) AS IncidentCount,\n        AVG(mr.Cost) AS AvgRepairCost,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS ResponsibleEngineers,\n        p.Status AS ProjectStatus\n    FROM Projects p\n    JOIN SafetyIncidents si ON p.ProjectID = si.EquipmentID\n    JOIN MaintenanceRecords mr ON si.EquipmentID = mr.EquipmentID\n    JOIN Engineers e ON si.EngineerID = e.EngineerID\n    GROUP BY p.ProjectID, p.ProjectName, p.Status\n    HAVING COUNT(si.IncidentID) > (SELECT AVG(IncidentCount) FROM (SELECT COUNT(IncidentID) AS IncidentCount FROM SafetyIncidents GROUP BY EquipmentID) AS AvgIncidents)\n    AND AVG(mr.Cost) > 2000\n)\nSELECT \n    ProjectName,\n    IncidentCount,\n    ROUND(AvgRepairCost, 2) AS AvgRepairCost,\n    ResponsibleEngineers,\n    ProjectStatus\nFROM SafetyIncidentStats\nORDER BY IncidentCount DESC, AvgRepairCost DESC\nLIMIT 3;",
            "gpt-4o_response_ru": "WITH IncidentStats AS (\n    SELECT \n        si.EquipmentID,\n        COUNT(si.IncidentID) AS IncidentCount,\n        AVG(mr.Cost) AS AvgRepairCost\n    FROM SafetyIncidents si\n    JOIN MaintenanceRecords mr ON si.EquipmentID = mr.EquipmentID\n    GROUP BY si.EquipmentID\n),\nProjectIncidentStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        COUNT(si.IncidentID) AS TotalIncidents,\n        AVG(mr.Cost) AS AvgRepairCost,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS ResponsibleEngineers,\n        p.Status\n    FROM Projects p\n    JOIN Tasks t ON p.ProjectID = t.ProjectID\n    JOIN SafetyIncidents si ON t.AssignedTo = si.EngineerID\n    JOIN MaintenanceRecords mr ON si.EquipmentID = mr.EquipmentID\n    JOIN Engineers e ON si.EngineerID = e.EngineerID\n    GROUP BY p.ProjectID, p.ProjectName, p.Status\n    HAVING COUNT(si.IncidentID) > (SELECT AVG(IncidentCount) FROM IncidentStats)\n    AND AVG(mr.Cost) > 2000\n)\nSELECT \n    ProjectName,\n    TotalIncidents,\n    ROUND(AvgRepairCost, 2) AS AvgRepairCost,\n    ResponsibleEngineers,\n    Status\nFROM ProjectIncidentStats\nORDER BY TotalIncidents DESC, AvgRepairCost DESC\nLIMIT 3;",
            "google/gemini-2.0-flash-001_response": "WITH ProjectIncidentStats AS (\n    SELECT\n        p.ProjectID,\n        p.ProjectName,\n        COUNT(si.IncidentID) AS IncidentCount,\n        AVG(CASE WHEN si.CorrectiveActions IS NOT NULL THEN 2001 ELSE NULL END) AS AvgCorrectiveActionCost,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS ResponsibleEngineers,\n        p.Status\n    FROM Projects p\n    LEFT JOIN Tasks t ON p.ProjectID = t.ProjectID\n    LEFT JOIN SafetyIncidents si ON t.AssignedTo = si.EngineerID\n    LEFT JOIN Engineers e ON si.EngineerID = e.EngineerID\n    GROUP BY p.ProjectID, p.ProjectName, p.Status\n    HAVING COUNT(si.IncidentID) > (SELECT AVG(IncidentCount) FROM (SELECT COUNT(IncidentID) AS IncidentCount FROM SafetyIncidents GROUP BY EngineerID) AS Subquery)\n)\nSELECT\n    ProjectName,\n    IncidentCount,\n    ROUND(AvgCorrectiveActionCost, 2) AS AvgCorrectiveActionCost,\n    ResponsibleEngineers,\n    Status\nFROM ProjectIncidentStats\nWHERE AvgCorrectiveActionCost > 2000\nORDER BY IncidentCount DESC, AvgCorrectiveActionCost DESC\nLIMIT 3;",
            "google/gemini-2.0-flash-001_response_ru": "WITH ProjectIncidentStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        COUNT(si.IncidentID) AS IncidentCount,\n        AVG(CASE WHEN si.EquipmentID IS NOT NULL THEN mr.Cost ELSE 0 END) AS AvgRepairCost,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS ResponsibleEngineers,\n        p.Status AS ProjectStatus\n    FROM Projects p\n    LEFT JOIN Tasks t ON p.ProjectID = t.ProjectID\n    LEFT JOIN Engineers e ON t.AssignedTo = e.EngineerID\n    LEFT JOIN SafetyIncidents si ON e.EngineerID = si.EngineerID\n    LEFT JOIN MaintenanceRecords mr ON si.EquipmentID = mr.EquipmentID\n    GROUP BY p.ProjectID, p.ProjectName, p.Status\n),\nAvgIncidentCount AS (\n    SELECT AVG(IncidentCount) AS AvgIncidents FROM ProjectIncidentStats\n)\nSELECT \n    pis.ProjectName,\n    pis.IncidentCount,\n    ROUND(pis.AvgRepairCost, 2) AS AvgRepairCost,\n    pis.ResponsibleEngineers,\n    pis.ProjectStatus\nFROM ProjectIncidentStats pis, AvgIncidentCount aic\nWHERE pis.IncidentCount > aic.AvgIncidents AND pis.AvgRepairCost > 2000\nORDER BY pis.IncidentCount DESC, pis.AvgRepairCost DESC\nLIMIT 3;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH ProjectSafetyStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        COUNT(si.IncidentID) as IncidentCount,\n        AVG(si.Cost) as AvgRepairCost,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as ResponsibleEngineers,\n        p.Status as ProjectStatus\n    FROM Projects p\n    JOIN SafetyIncidents si ON p.ProjectID = si.ProjectID\n    JOIN Engineers e ON si.EngineerID = e.EngineerID\n    GROUP BY p.ProjectID, p.ProjectName, p.Status\n)\nSELECT \n    ProjectName,\n    IncidentCount,\n    ROUND(AvgRepairCost, 2) as AvgRepairCost,\n    ResponsibleEngineers,\n    ProjectStatus\nFROM ProjectSafetyStats\nWHERE IncidentCount > (SELECT AVG(IncidentCount) FROM ProjectSafetyStats)\nAND AvgRepairCost > 2000\nORDER BY IncidentCount DESC, AvgRepairCost DESC\nLIMIT 3;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH ProjectIncidentStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        COUNT(si.IncidentID) as IncidentCount,\n        AVG(si.Cost) as AvgRepairCost,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as ResponsibleEngineers,\n        p.Status as ProjectStatus\n    FROM Projects p\n    LEFT JOIN SafetyIncidents si ON p.ProjectID = si.ProjectID\n    LEFT JOIN Engineers e ON si.EngineerID = e.EngineerID\n    GROUP BY p.ProjectID, p.ProjectName, p.Status\n),\nAverageIncidentCount AS (\n    SELECT AVG(IncidentCount) as AvgIncidentCount\n    FROM ProjectIncidentStats\n),\nAverageRepairCost AS (\n    SELECT AVG(AvgRepairCost) as AvgRepairCost\n    FROM ProjectIncidentStats\n)\nSELECT \n    pis.ProjectName,\n    pis.IncidentCount,\n    ROUND(pis.AvgRepairCost, 2) as AvgRepairCost,\n    pis.ResponsibleEngineers,\n    pis.ProjectStatus\nFROM ProjectIncidentStats pis\nWHERE pis.IncidentCount > (SELECT AvgIncidentCount FROM AverageIncidentCount)\nAND pis.AvgRepairCost > 2000\nORDER BY pis.IncidentCount DESC, pis.AvgRepairCost DESC\nLIMIT 3;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH ProjectSafetyStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        COUNT(si.IncidentID) AS IncidentCount,\n        AVG(si.Cost) AS AvgRepairCost,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS ResponsibleEngineers,\n        p.Status AS ProjectStatus\n    FROM Projects p\n    JOIN SafetyIncidents si ON p.ProjectID = si.EquipmentID\n    JOIN Engineers e ON si.EngineerID = e.EngineerID\n    GROUP BY p.ProjectID, p.ProjectName, p.Status\n    HAVING COUNT(si.IncidentID) > (SELECT AVG(IncidentCount) FROM (SELECT COUNT(IncidentID) AS IncidentCount FROM SafetyIncidents GROUP BY ProjectID) AS avg_incidents)\n    AND AVG(si.Cost) > 2000\n)\nSELECT \n    ProjectName,\n    IncidentCount,\n    ROUND(AvgRepairCost, 2) AS AvgRepairCost,\n    ResponsibleEngineers,\n    ProjectStatus\nFROM ProjectSafetyStats\nORDER BY IncidentCount DESC, AvgRepairCost DESC\nLIMIT 3;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "```sql\nWITH ProjectIncidentStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        p.Status AS ProjectStatus,\n        COUNT(si.IncidentID) AS IncidentCount,\n        AVG(mr.Cost) AS AvgCorrectionCost,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS ResponsibleEngineers\n    FROM Projects p\n    JOIN SafetyIncidents si ON p.ProjectID = si.ProjectID\n    JOIN MaintenanceRecords mr ON si.EquipmentID = mr.EquipmentID\n    JOIN Engineers e ON si.EngineerID = e.EngineerID\n    GROUP BY p.ProjectID, p.ProjectName, p.Status\n    HAVING COUNT(si.IncidentID) > (SELECT AVG(IncidentCount) FROM (SELECT COUNT(Incid",
            "gigachat_response": "WITH SafetyIncidentStats AS (\n    SELECT \n        si.ProjectID,\n        COUNT(si.IncidentID) AS IncidentCount,\n        AVG(CASE WHEN mi.Cost IS NOT NULL THEN mi.Cost ELSE 0 END) AS AverageRepairCost\n    FROM SafetyIncidents si\n    LEFT JOIN MaintenanceRecords mi ON si.EquipmentID = mi.EquipmentID\n    GROUP BY si.ProjectID\n    HAVING IncidentCount > (SELECT AVG(COUNT(*)) FROM SafetyIncidents GROUP BY ProjectID)\n       AND AverageRepairCost > 2000\n),\nProjectDetails AS (\n    SELECT \n        p.ProjectName,\n        sis.IncidentCount,\n        ROUND(sis.AverageRepairCost, 2) AS AverageRepairCost,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS ResponsibleEngineers,\n        p.Status\n    FROM Projects p\n    INNER JOIN SafetyIncidentStats sis ON p.ProjectID = sis.ProjectID\n    LEFT JOIN Engineers e ON p.ProjectManagerID = e.EngineerID\n    GROUP BY p.ProjectID, p.ProjectName, sis.IncidentCount, sis.AverageRepairCost, p.Status\n)\nSELECT *\nFROM ProjectDetails\nORDER BY IncidentCount DESC, AverageRepairCost DESC\nLIMIT 3;",
            "gigachat_response_ru": "WITH ProjectSafetyStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        COUNT(si.IncidentID) AS IncidentCount,\n        AVG(CASE WHEN mr.Cost IS NOT NULL THEN mr.Cost ELSE 0 END) AS AverageRepairCost,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) AS ResponsibleEngineers,\n        p.Status AS ProjectStatus\n    FROM Projects p\n    LEFT JOIN SafetyIncidents si ON p.ProjectID = si.EquipmentID OR p.ProjectID IN (SELECT ProjectID FROM Equipment WHERE EquipmentID = si.EquipmentID)\n    LEFT JOIN MaintenanceRecords mr ON si.IncidentID = mr.MaintenanceID\n    LEFT JOIN Engineers e ON si.ReportedBy = e.EngineerID\n    GROUP BY p.ProjectID, p.ProjectName, p.Status\n    HAVING IncidentCount > (SELECT AVG(COUNT(*)) FROM SafetyIncidents GROUP BY EquipmentID)\n       AND AverageRepairCost > 2000\n)\nSELECT \n    ProjectName,\n    IncidentCount,\n    ROUND(AverageRepairCost, 2) AS AverageRepairCost,\n    ResponsibleEngineers,\n    ProjectStatus\nFROM ProjectSafetyStats\nORDER BY IncidentCount DESC, AverageRepairCost DESC\nLIMIT 3;"
        },
        {
            "question": "Выявить инженеров, участвующих в проектах с бюджетом свыше 10 миллионов рублей, имеющих сертификаты с истекающим сроком действия в течение 3 месяцев, и прошедших обучение стоимостью более 200000 рублей. В ответе будут показаны: имя инженера, должность, количество проектов, список сертификатов с истекающим сроком и общая стоимость обучения в рублях. Результаты отсортированы по количеству проектов и общей стоимости обучения, показаны топ-5 записей.",
            "sql_query": "WITH EngineerProjectTraining AS (\n    SELECT \n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', e.LastName) as EngineerName,\n        e.Position,\n        COUNT(DISTINCT p.ProjectID) as ProjectCount,\n        GROUP_CONCAT(DISTINCT c.CertificationName) as ExpiringCertifications,\n        SUM(tp.Cost) as TotalTrainingCost\n    FROM Engineers e\n    JOIN Projects p ON p.ProjectManagerID = e.EngineerID\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    JOIN TrainingPrograms tp ON e.EngineerID = tp.EngineerID\n    WHERE p.Budget > 10000000\n    AND c.ExpiryDate BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 3 MONTH)\n    AND c.Status = 'Действителен'\n    AND tp.Cost > 200000\n    AND tp.Status = 'Завершено'\n    GROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position\n)\nSELECT \n    EngineerName,\n    Position,\n    ProjectCount,\n    ExpiringCertifications,\n    ROUND(TotalTrainingCost, 2) as TotalTrainingCost\nFROM EngineerProjectTraining\nORDER BY ProjectCount DESC, TotalTrainingCost DESC\nLIMIT 5;",
            "gpt-4o_response": "WITH EngineerProjectStats AS (\n    SELECT \n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', e.LastName) AS EngineerName,\n        e.Position,\n        COUNT(DISTINCT p.ProjectID) AS ProjectCount\n    FROM Engineers e\n    JOIN Projects p ON e.EngineerID = p.ProjectManagerID\n    WHERE p.Budget > 10000000\n    GROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position\n),\nExpiringCertifications AS (\n    SELECT \n        e.EngineerID,\n        GROUP_CONCAT(DISTINCT c.CertificationName) AS ExpiringCertifications\n    FROM Engineers e\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE c.ExpiryDate BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 3 MONTH)\n    AND c.Status = 'Действителен'\n    GROUP BY e.EngineerID\n),\nTrainingCostStats AS (\n    SELECT \n        e.EngineerID,\n        SUM(tp.Cost) AS TotalTrainingCost\n    FROM Engineers e\n    JOIN TrainingPrograms tp ON e.EngineerID = tp.EngineerID\n    WHERE tp.Cost > 200000\n    GROUP BY e.EngineerID\n)\nSELECT \n    eps.EngineerName,\n    eps.Position,\n    eps.ProjectCount,\n    ec.ExpiringCertifications,\n    ROUND(tcs.TotalTrainingCost, 2) AS TotalTrainingCost\nFROM EngineerProjectStats eps\nJOIN ExpiringCertifications ec ON eps.EngineerID = ec.EngineerID\nJOIN TrainingCostStats tcs ON eps.EngineerID = tcs.EngineerID\nORDER BY eps.ProjectCount DESC, tcs.TotalTrainingCost DESC\nLIMIT 5;",
            "gpt-4o_response_ru": "WITH EngineerProjectStats AS (\n    SELECT \n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', e.LastName) AS EngineerName,\n        e.Position,\n        COUNT(DISTINCT p.ProjectID) AS ProjectCount\n    FROM Engineers e\n    JOIN Projects p ON p.ProjectManagerID = e.EngineerID\n    WHERE p.Budget > 10000000\n    GROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position\n),\nEngineerCertificationStats AS (\n    SELECT \n        e.EngineerID,\n        GROUP_CONCAT(DISTINCT c.CertificationName) AS ExpiringCertifications\n    FROM Engineers e\n    JOIN Certifications c ON c.EngineerID = e.EngineerID\n    WHERE c.ExpiryDate BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 3 MONTH)\n    GROUP BY e.EngineerID\n),\nEngineerTrainingStats AS (\n    SELECT \n        e.EngineerID,\n        SUM(tp.Cost) AS TotalTrainingCost\n    FROM Engineers e\n    JOIN TrainingPrograms tp ON e.EngineerID = tp.EngineerID\n    WHERE tp.Cost > 200000\n    GROUP BY e.EngineerID\n)\nSELECT \n    eps.EngineerName,\n    eps.Position,\n    eps.ProjectCount,\n    ecs.ExpiringCertifications,\n    ROUND(ets.TotalTrainingCost, 2) AS TotalTrainingCost\nFROM EngineerProjectStats eps\nJOIN EngineerCertificationStats ecs ON eps.EngineerID = ecs.EngineerID\nJOIN EngineerTrainingStats ets ON eps.EngineerID = ets.EngineerID\nORDER BY eps.ProjectCount DESC, ets.TotalTrainingCost DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response": "WITH EngineerProjectCertTraining AS (\n    SELECT \n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', e.LastName) AS EngineerName,\n        e.Position,\n        COUNT(DISTINCT p.ProjectID) AS ProjectCount,\n        GROUP_CONCAT(DISTINCT CASE WHEN c.ExpiryDate BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 3 MONTH) THEN c.CertificationName ELSE NULL END) AS ExpiringCertifications,\n        SUM(tp.Cost) AS TotalTrainingCost\n    FROM Engineers e\n    JOIN Projects p ON e.EngineerID = p.ProjectManagerID\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    LEFT JOIN TrainingPrograms tp ON e.EngineerID = tp.EngineerID\n    WHERE p.Budget > 10000000\n    AND tp.Cost > 200000\n    GROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position\n)\nSELECT \n    EngineerName,\n    Position,\n    ProjectCount,\n    ExpiringCertifications,\n    ROUND(TotalTrainingCost, 2) AS TotalTrainingCost\nFROM EngineerProjectCertTraining\nORDER BY ProjectCount DESC, TotalTrainingCost DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response_ru": "WITH QualifiedEngineers AS (\n    SELECT\n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', e.LastName) AS EngineerName,\n        e.Position\n    FROM Engineers e\n    WHERE e.EngineerID IN (SELECT DISTINCT ProjectManagerID FROM Projects WHERE Budget > 10000000)\n    AND e.EngineerID IN (SELECT EngineerID FROM Certifications WHERE ExpiryDate BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 3 MONTH))\n    AND e.EngineerID IN (SELECT EngineerID FROM TrainingPrograms WHERE Cost > 200000)\n),\nProjectCounts AS (\n    SELECT\n        ProjectManagerID AS EngineerID,\n        COUNT(ProjectID) AS ProjectCount\n    FROM Projects\n    WHERE Budget > 10000000\n    GROUP BY ProjectManagerID\n),\nExpiringCertifications AS (\n    SELECT\n        EngineerID,\n        GROUP_CONCAT(CertificationName) AS ExpiringCertificationsList\n    FROM Certifications\n    WHERE ExpiryDate BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 3 MONTH)\n    GROUP BY EngineerID\n),\nTotalTrainingCosts AS (\n    SELECT\n        EngineerID,\n        SUM(Cost) AS TotalTrainingCost\n    FROM TrainingPrograms\n    WHERE Cost > 200000\n    GROUP BY EngineerID\n)\nSELECT\n    qe.EngineerName,\n    qe.Position,\n    COALESCE(pc.ProjectCount, 0) AS ProjectCount,\n    COALESCE(ec.ExpiringCertificationsList, 'N/A') AS ExpiringCertificationsList,\n    COALESCE(ttc.TotalTrainingCost, 0) AS TotalTrainingCost\nFROM QualifiedEngineers qe\nLEFT JOIN ProjectCounts pc ON qe.EngineerID = pc.EngineerID\nLEFT JOIN ExpiringCertifications ec ON qe.EngineerID = ec.EngineerID\nLEFT JOIN TotalTrainingCosts ttc ON qe.EngineerID = ttc.EngineerID\nORDER BY ProjectCount DESC, TotalTrainingCost DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH EngineerProjectStats AS (\n    SELECT \n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', e.LastName) as EngineerName,\n        e.Position,\n        COUNT(DISTINCT p.ProjectID) as ProjectCount,\n        SUM(p.Budget) as TotalBudget\n    FROM Engineers e\n    JOIN Tasks t ON e.EngineerID = t.AssignedTo\n    JOIN Projects p ON t.ProjectID = p.ProjectID\n    WHERE p.Budget > 10000000\n    GROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position\n),\nExpiringCertifications AS (\n    SELECT \n        c.EngineerID,\n        GROUP_CONCAT(DISTINCT c.CertificationName) as ExpiringCertifications\n    FROM Certifications c\n    WHERE c.ExpiryDate BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 3 MONTH)\n    AND c.Status = 'Действителен'\n    GROUP BY c.EngineerID\n),\nEngineerTrainingStats AS (\n    SELECT \n        e.EngineerID,\n        SUM(tp.Cost) as TotalTrainingCost\n    FROM Engineers e\n    JOIN TrainingPrograms tp ON e.EngineerID = tp.EngineerID\n    WHERE tp.Cost > 200000\n    GROUP BY e.EngineerID\n)\nSELECT \n    eps.EngineerName,\n    eps.Position,\n    eps.ProjectCount,\n    ec.ExpiringCertifications,\n    ets.TotalTrainingCost\nFROM EngineerProjectStats eps\nJOIN ExpiringCertifications ec ON eps.EngineerID = ec.EngineerID\nJOIN EngineerTrainingStats ets ON eps.EngineerID = ets.EngineerID\nORDER BY eps.ProjectCount DESC, ets.TotalTrainingCost DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH EngineerProjectStats AS (\n    SELECT \n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', e.LastName) as EngineerName,\n        e.Position,\n        COUNT(DISTINCT p.ProjectID) as ProjectCount,\n        SUM(p.Budget) as TotalProjectBudget\n    FROM Engineers e\n    JOIN Tasks t ON e.EngineerID = t.AssignedTo\n    JOIN Projects p ON t.ProjectID = p.ProjectID\n    WHERE p.Budget > 10000000\n    GROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position\n),\nExpiringCertifications AS (\n    SELECT \n        c.EngineerID,\n        GROUP_CONCAT(DISTINCT c.CertificationName) as ExpiringCertifications\n    FROM Certifications c\n    WHERE c.ExpiryDate BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 3 MONTH)\n    AND c.Status = 'Действителен'\n    GROUP BY c.EngineerID\n),\nEngineerTrainingStats AS (\n    SELECT \n        e.EngineerID,\n        SUM(tp.Cost) as TotalTrainingCost\n    FROM Engineers e\n    JOIN TrainingPrograms tp ON e.EngineerID = tp.EngineerID\n    WHERE tp.Cost > 200000\n    GROUP BY e.EngineerID\n)\nSELECT \n    eps.EngineerName,\n    eps.Position,\n    eps.ProjectCount,\n    ec.ExpiringCertifications,\n    ets.TotalTrainingCost\nFROM EngineerProjectStats eps\nJOIN ExpiringCertifications ec ON eps.EngineerID = ec.EngineerID\nJOIN EngineerTrainingStats ets ON eps.EngineerID = ets.EngineerID\nORDER BY eps.ProjectCount DESC, ets.TotalTrainingCost DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH HighBudgetEngineers AS (\n    SELECT DISTINCT e.EngineerID, e.FirstName, e.LastName, e.Position\n    FROM Engineers e\n    JOIN Projects p ON e.EngineerID = p.ProjectManagerID\n    WHERE p.Budget > 10000000\n),\nExpiringCertEngineers AS (\n    SELECT e.EngineerID, e.FirstName, e.LastName, e.Position,\n           GROUP_CONCAT(c.CertificationName) AS ExpiringCertifications\n    FROM Engineers e\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE c.ExpiryDate BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 3 MONTH)\n    AND c.Status = 'Действителен'\n    GROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position\n),\nExpensiveTrainingEngineers AS (\n    SELECT e.EngineerID, e.FirstName, e.LastName, e.Position,\n           SUM(tp.Cost) AS TotalTrainingCost\n    FROM Engineers e\n    JOIN TrainingPrograms tp ON e.EngineerID = tp.EngineerID\n    WHERE tp.Cost > 200000\n    GROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position\n)\nSELECT \n    h.FirstName,\n    h.LastName,\n    h.Position,\n    COUNT(p.ProjectID) AS ProjectCount,\n    e.ExpiringCertifications,\n    t.TotalTrainingCost\nFROM HighBudgetEngineers h\nJOIN ExpiringCertEngineers e ON h.EngineerID = e.EngineerID\nJOIN ExpensiveTrainingEngineers t ON h.EngineerID = t.EngineerID\nJOIN Projects p ON h.EngineerID = p.ProjectManagerID\nGROUP BY h.FirstName, h.LastName, h.Position, e.ExpiringCertifications, t.TotalTrainingCost\nORDER BY ProjectCount DESC, TotalTrainingCost DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "WITH HighBudgetProjects AS (\n    SELECT DISTINCT p.ProjectID, p.ProjectName, p.Budget, e.EngineerID\n    FROM Projects p\n    JOIN Tasks t ON p.ProjectID = t.ProjectID\n    JOIN Engineers e ON t.AssignedTo = e.EngineerID\n    WHERE p.Budget > 10000000\n),\nExpiringCertifications AS (\n    SELECT c.EngineerID, c.CertificationName\n    FROM Certifications c\n    WHERE c.ExpiryDate BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 3 MONTH)\n    AND c.Status = 'Действителен'\n),\nExpensiveTraining AS (\n    SELECT tp.EngineerID, SUM(tp.Cost) AS TotalTrainingCost\n    FROM TrainingPrograms tp\n    WHERE tp.Cost > 200000\n    GROUP BY tp.EngineerID\n)\nSELECT \n    CONCAT(e.FirstName, ' ', e.LastName) AS EngineerName,\n    e.Position,\n    COUNT(DISTINCT hbp.ProjectID) AS ProjectCount,\n    GROUP_CONCAT(DISTINCT ec.CertificationName) AS ExpiringCertificationsList,\n    et.TotalTrainingCost\nFROM Engineers e\nJOIN HighBudgetProjects hbp ON e.EngineerID = hbp.EngineerID\nJOIN ExpiringCertifications ec ON e.EngineerID = ec.EngineerID\nJOIN ExpensiveTraining et ON e.EngineerID = et.EngineerID\nGROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position, et.TotalTrainingCost\nORDER BY ProjectCount DESC, TotalTrainingCost DESC\nLIMIT 5;",
            "gigachat_response": "WITH EngineerProjectStats AS (\n    SELECT \n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', e.LastName) as EngineerName,\n        e.Position,\n        COUNT(DISTINCT p.ProjectID) as ProjectCount,\n        GROUP_CONCAT(DISTINCT c.CertificationName ORDER BY c.CertificationName SEPARATOR ', ') as ExpiringCertifications,\n        SUM(tp.Cost) as TotalTrainingCost\n    FROM Engineers e\n    JOIN Projects p ON p.ProjectManagerID = e.EngineerID OR e.EngineerID IN (SELECT DISTINCT AssignedTo FROM Tasks WHERE ProjectID = p.ProjectID)\n    JOIN Certifications c ON c.EngineerID = e.EngineerID\n    JOIN TrainingPrograms tp ON tp.EngineerID = e.EngineerID\n    WHERE p.Budget > 10000000\n      AND c.ExpiryDate BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 3 MONTH)\n      AND c.Status = 'Действителен'\n      AND tp.Cost > 200000\n    GROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position\n)\nSELECT \n    EngineerName,\n    Position,\n    ProjectCount,\n    ExpiringCertifications,\n    ROUND(TotalTrainingCost, 2) as TotalTrainingCost\nFROM EngineerProjectStats\nORDER BY ProjectCount DESC, TotalTrainingCost DESC\nLIMIT 5;",
            "gigachat_response_ru": "WITH EngineerProjectCertificationTraining AS (\n    SELECT \n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', e.MiddleName, ' ', e.LastName) AS FullName,\n        e.Position,\n        COUNT(DISTINCT p.ProjectID) AS ProjectCount,\n        GROUP_CONCAT(c.CertificationName SEPARATOR ', ') AS ExpiringCertificates,\n        SUM(tp.Cost) AS TotalTrainingCost\n    FROM Engineers e\n    INNER JOIN Projects p ON e.EngineerID = p.ProjectManagerID\n    INNER JOIN Certifications c ON e.EngineerID = c.EngineerID\n    INNER JOIN TrainingPrograms tp ON e.EngineerID = tp.EngineerID\n    WHERE p.Budget > 10000000\n      AND c.ExpiryDate <= DATE_ADD(CURDATE(), INTERVAL 3 MONTH)\n      AND c.Status = 'Действителен'\n      AND tp.Cost > 200000\n    GROUP BY e.EngineerID, e.FirstName, e.MiddleName, e.LastName, e.Position\n)\nSELECT *\nFROM EngineerProjectCertificationTraining\nORDER BY ProjectCount DESC, TotalTrainingCost DESC\nLIMIT 5;"
        },
        {
            "question": "Определить проекты с превышающим количество черновиков документов проектирования над утвержденными документами, средней стоимостью материалов свыше 500 рублей и наличием инцидентов безопасности высокого уровня. В ответе будут показаны: название проекта, количество черновиков, количество утвержденных документов, общая стоимость материалов в рублях и количество инцидентов безопасности. Результаты отсортированы по разнице между количеством черновиков и утвержденных документов и количеству инцидентов, показаны топ-4 записи.",
            "sql_query": "WITH ProjectDocumentMaterialSafety AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        SUM(CASE WHEN d.Status = 'Черновик' THEN 1 ELSE 0 END) as DraftCount,\n        SUM(CASE WHEN d.Status = 'Утвержден' THEN 1 ELSE 0 END) as ApprovedCount,\n        SUM(m.UnitPrice * m.QuantityInStock) as TotalMaterialCost,\n        COUNT(DISTINCT si.IncidentID) as SafetyIncidentCount\n    FROM Projects p\n    JOIN DesignDocuments d ON p.ProjectID = d.ProjectID\n    JOIN Materials m ON m.SupplierID IN (\n        SELECT SupplierID \n        FROM Suppliers \n        WHERE City IN ('Москва', 'Санкт-Петербург')\n    )\n    JOIN SafetyIncidents si ON si.EngineerID IN (\n        SELECT EngineerID \n        FROM Tasks \n        WHERE ProjectID = p.ProjectID\n    )\n    WHERE si.SeverityLevel = 'Высокий'\n    GROUP BY p.ProjectID, p.ProjectName\n    HAVING SUM(CASE WHEN d.Status = 'Черновик' THEN 1 ELSE 0 END) > \n           SUM(CASE WHEN d.Status = 'Утвержден' THEN 1 ELSE 0 END)\n    AND AVG(m.UnitPrice) > 500\n)\nSELECT \n    ProjectName,\n    DraftCount,\n    ApprovedCount,\n    ROUND(TotalMaterialCost, 2) as TotalMaterialCost,\n    SafetyIncidentCount\nFROM ProjectDocumentMaterialSafety\nORDER BY (DraftCount - ApprovedCount) DESC, SafetyIncidentCount DESC\nLIMIT 4;",
            "gpt-4o_response": "WITH DocumentStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        SUM(CASE WHEN dd.Status = 'Черновик' THEN 1 ELSE 0 END) AS DraftCount,\n        SUM(CASE WHEN dd.Status = 'Утвержден' THEN 1 ELSE 0 END) AS ApprovedCount\n    FROM Projects p\n    LEFT JOIN DesignDocuments dd ON p.ProjectID = dd.ProjectID\n    GROUP BY p.ProjectID, p.ProjectName\n),\nMaterialStats AS (\n    SELECT \n        p.ProjectID,\n        AVG(m.UnitPrice) AS AvgMaterialPrice\n    FROM Projects p\n    JOIN Materials m ON p.ProjectID = m.MaterialID\n    GROUP BY p.ProjectID\n),\nSafetyIncidentStats AS (\n    SELECT \n        p.ProjectID,\n        COUNT(si.IncidentID) AS HighSeverityIncidents\n    FROM Projects p\n    JOIN SafetyIncidents si ON p.ProjectID = si.EquipmentID\n    WHERE si.SeverityLevel = 'Высокий'\n    GROUP BY p.ProjectID\n)\nSELECT \n    ds.ProjectName,\n    ds.DraftCount,\n    ds.ApprovedCount,\n    ms.AvgMaterialPrice,\n    sis.HighSeverityIncidents\nFROM DocumentStats ds\nJOIN MaterialStats ms ON ds.ProjectID = ms.ProjectID\nJOIN SafetyIncidentStats sis ON ds.ProjectID = sis.ProjectID\nWHERE ds.DraftCount > ds.ApprovedCount\nAND ms.AvgMaterialPrice > 500\nORDER BY (ds.DraftCount - ds.ApprovedCount) DESC, sis.HighSeverityIncidents DESC\nLIMIT 4;",
            "gpt-4o_response_ru": "WITH DocumentStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        SUM(CASE WHEN dd.Status = 'Черновик' THEN 1 ELSE 0 END) AS DraftCount,\n        SUM(CASE WHEN dd.Status = 'Утвержден' THEN 1 ELSE 0 END) AS ApprovedCount\n    FROM Projects p\n    LEFT JOIN DesignDocuments dd ON p.ProjectID = dd.ProjectID\n    GROUP BY p.ProjectID, p.ProjectName\n),\nMaterialStats AS (\n    SELECT \n        p.ProjectID,\n        AVG(m.UnitPrice) AS AvgMaterialCost,\n        SUM(m.UnitPrice * m.QuantityInStock) AS TotalMaterialCost\n    FROM Projects p\n    JOIN Materials m ON p.ProjectID = m.MaterialID\n    GROUP BY p.ProjectID\n),\nIncidentStats AS (\n    SELECT \n        p.ProjectID,\n        COUNT(si.IncidentID) AS HighSeverityIncidents\n    FROM Projects p\n    JOIN SafetyIncidents si ON p.ProjectID = si.EquipmentID\n    WHERE si.SeverityLevel = 'Высокий'\n    GROUP BY p.ProjectID\n)\nSELECT \n    ds.ProjectName,\n    ds.DraftCount,\n    ds.ApprovedCount,\n    ms.TotalMaterialCost,\n    is.HighSeverityIncidents\nFROM DocumentStats ds\nJOIN MaterialStats ms ON ds.ProjectID = ms.ProjectID\nJOIN IncidentStats is ON ds.ProjectID = is.ProjectID\nWHERE ds.DraftCount > ds.ApprovedCount\nAND ms.AvgMaterialCost > 500\nORDER BY (ds.DraftCount - ds.ApprovedCount) DESC, is.HighSeverityIncidents DESC\nLIMIT 4;",
            "google/gemini-2.0-flash-001_response": "WITH ProjectDocumentStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        SUM(CASE WHEN dd.Status = 'Черновик' THEN 1 ELSE 0 END) AS DraftCount,\n        SUM(CASE WHEN dd.Status = 'Утвержден' THEN 1 ELSE 0 END) AS ApprovedCount\n    FROM Projects p\n    JOIN DesignDocuments dd ON p.ProjectID = dd.ProjectID\n    GROUP BY p.ProjectID, p.ProjectName\n    HAVING SUM(CASE WHEN dd.Status = 'Черновик' THEN 1 ELSE 0 END) > SUM(CASE WHEN dd.Status = 'Утвержден' THEN 1 ELSE 0 END)\n),\nMaterialCostStats AS (\n    SELECT \n        p.ProjectID,\n        SUM(m.UnitPrice) AS TotalMaterialCost\n    FROM Projects p\n    JOIN Tasks t ON p.ProjectID = t.ProjectID\n    JOIN Engineers e ON t.AssignedTo = e.EngineerID\n    JOIN Departments d ON p.DepartmentID = d.DepartmentID\n    JOIN Equipment eq ON d.DepartmentID = eq.DepartmentID\n    JOIN MaintenanceRecords mr ON eq.EquipmentID = mr.EquipmentID\n    JOIN Suppliers s ON mr.SupplierID = s.SupplierID\n    JOIN Materials m ON s.SupplierID = m.SupplierID\n    GROUP BY p.ProjectID\n    HAVING AVG(m.UnitPrice) > 500\n),\nSafetyIncidentStats AS (\n    SELECT \n        p.ProjectID,\n        COUNT(si.IncidentID) AS HighSeverityIncidentCount\n    FROM Projects p\n    JOIN Tasks t ON p.ProjectID = t.ProjectID\n    JOIN Engineers e ON t.AssignedTo = e.EngineerID\n    JOIN SafetyIncidents si ON e.EngineerID = si.EngineerID\n    WHERE si.SeverityLevel = 'Высокий'\n    GROUP BY p.ProjectID\n)\nSELECT \n    pds.ProjectName,\n    pds.DraftCount,\n    pds.ApprovedCount,\n    mcs.TotalMaterialCost,\n    sis.HighSeverityIncidentCount\nFROM ProjectDocumentStats pds\nJOIN MaterialCostStats mcs ON pds.ProjectID = mcs.ProjectID\nJOIN SafetyIncidentStats sis ON pds.ProjectID = sis.ProjectID\nORDER BY (pds.DraftCount - pds.ApprovedCount) DESC, sis.HighSeverityIncidentCount DESC\nLIMIT 4;",
            "google/gemini-2.0-flash-001_response_ru": "WITH ProjectDocumentStats AS (\n    SELECT\n        p.ProjectID,\n        p.ProjectName,\n        SUM(CASE WHEN dd.Status = 'Черновик' THEN 1 ELSE 0 END) AS DraftCount,\n        SUM(CASE WHEN dd.Status = 'Утвержден' THEN 1 ELSE 0 END) AS ApprovedCount\n    FROM Projects p\n    JOIN DesignDocuments dd ON p.ProjectID = dd.ProjectID\n    GROUP BY p.ProjectID, p.ProjectName\n    HAVING SUM(CASE WHEN dd.Status = 'Черновик' THEN 1 ELSE 0 END) > SUM(CASE WHEN dd.Status = 'Утвержден' THEN 1 ELSE 0 END)\n),\nMaterialCostStats AS (\n    SELECT\n        p.ProjectID,\n        SUM(m.UnitPrice) AS TotalMaterialCost\n    FROM Projects p\n    JOIN Tasks t ON p.ProjectID = t.ProjectID\n    JOIN Materials m ON m.MaterialID > 0  -- Фиктивный JOIN, чтобы избежать проблем, если нет связи напрямую\n    GROUP BY p.ProjectID\n    HAVING SUM(m.UnitPrice) > 500\n),\nHighSeverityIncidents AS (\n    SELECT\n        e.EngineerID,\n        COUNT(si.IncidentID) AS HighSeverityIncidentCount\n    FROM Engineers e\n    JOIN SafetyIncidents si ON e.EngineerID = si.EngineerID\n    WHERE si.SeverityLevel = 'Высокий'\n    GROUP BY e.EngineerID\n),\nCombinedData AS (\n    SELECT\n        pds.ProjectName,\n        pds.DraftCount,\n        pds.ApprovedCount,\n        mcs.TotalMaterialCost,\n        COALESCE(SUM(hsi.HighSeverityIncidentCount), 0) AS TotalHighSeverityIncidents,\n        (pds.DraftCount - pds.ApprovedCount) AS DraftApprovedDifference\n    FROM ProjectDocumentStats pds\n    JOIN MaterialCostStats mcs ON pds.ProjectID = mcs.ProjectID\n    LEFT JOIN Projects proj ON pds.ProjectID = proj.ProjectID\n    LEFT JOIN Tasks t ON proj.ProjectID = t.ProjectID\n    LEFT JOIN Engineers eng ON t.AssignedTo = eng.EngineerID\n    LEFT JOIN HighSeverityIncidents hsi ON eng.EngineerID = hsi.EngineerID\n    GROUP BY pds.ProjectName, pds.DraftCount, pds.ApprovedCount, mcs.TotalMaterialCost, pds.DraftApprovedDifference\n)\nSELECT\n    cd.ProjectName,\n    cd.DraftCount,\n    cd.ApprovedCount,\n    cd.TotalMaterialCost,\n    cd.TotalHighSeverityIncidents\nFROM CombinedData cd\nORDER BY cd.DraftApprovedDifference DESC, cd.TotalHighSeverityIncidents DESC\nLIMIT 4;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH ProjectStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        COUNT(CASE WHEN dd.Status = 'Черновик' THEN 1 END) as DraftCount,\n        COUNT(CASE WHEN dd.Status = 'Утвержден' THEN 1 END) as ApprovedCount,\n        SUM(m.UnitPrice * m.QuantityInStock) as TotalMaterialCost,\n        COUNT(si.IncidentID) as SafetyIncidentCount\n    FROM Projects p\n    LEFT JOIN DesignDocuments dd ON p.ProjectID = dd.ProjectID\n    LEFT JOIN Materials m ON p.ProjectID = m.ProjectID\n    LEFT JOIN SafetyIncidents si ON p.ProjectID = si.ProjectID AND si.SeverityLevel = 'Высокий'\n    GROUP BY p.ProjectID, p.ProjectName\n    HAVING COUNT(CASE WHEN dd.Status = 'Черновик' THEN 1 END) > COUNT(CASE WHEN dd.Status = 'Утвержден' THEN 1 END)\n    AND SUM(m.UnitPrice * m.QuantityInStock) > 500\n    AND COUNT(si.IncidentID) > 0\n)\nSELECT \n    ProjectName,\n    DraftCount,\n    ApprovedCount,\n    TotalMaterialCost,\n    SafetyIncidentCount\nFROM ProjectStats\nORDER BY DraftCount - ApprovedCount DESC, SafetyIncidentCount DESC\nLIMIT 4;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH ProjectStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        SUM(CASE WHEN dd.Status = 'Черновик' THEN 1 ELSE 0 END) as DraftCount,\n        SUM(CASE WHEN dd.Status = 'Утвержден' THEN 1 ELSE 0 END) as ApprovedCount,\n        SUM(m.UnitPrice * m.QuantityInStock) as TotalMaterialCost,\n        COUNT(si.IncidentID) as HighSeverityIncidents\n    FROM Projects p\n    LEFT JOIN DesignDocuments dd ON p.ProjectID = dd.ProjectID\n    LEFT JOIN Materials m ON p.ProjectID = m.ProjectID\n    LEFT JOIN SafetyIncidents si ON p.ProjectID = si.ProjectID AND si.SeverityLevel = 'Высокий'\n    GROUP BY p.ProjectID, p.ProjectName\n    HAVING SUM(CASE WHEN dd.Status = 'Черновик' THEN 1 ELSE 0 END) > SUM(CASE WHEN dd.Status = 'Утвержден' THEN 1 ELSE 0 END)\n    AND SUM(m.UnitPrice * m.QuantityInStock) > 500\n    AND COUNT(si.IncidentID) > 0\n)\nSELECT \n    ProjectName,\n    DraftCount,\n    ApprovedCount,\n    TotalMaterialCost,\n    HighSeverityIncidents\nFROM ProjectStats\nORDER BY DraftCount - ApprovedCount DESC, HighSeverityIncidents DESC\nLIMIT 4;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH ProjectDocumentStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        SUM(CASE WHEN dd.Status = 'Черновик' THEN 1 ELSE 0 END) AS DraftCount,\n        SUM(CASE WHEN dd.Status = 'Утвержден' THEN 1 ELSE 0 END) AS ApprovedCount\n    FROM Projects p\n    LEFT JOIN DesignDocuments dd ON p.ProjectID = dd.ProjectID\n    GROUP BY p.ProjectID, p.ProjectName\n    HAVING DraftCount > ApprovedCount\n),\nProjectMaterialCost AS (\n    SELECT \n        p.ProjectID,\n        SUM(m.UnitPrice * m.QuantityInStock) AS TotalMaterialCost\n    FROM Projects p\n    JOIN Materials m ON 1=1\n    GROUP BY p.ProjectID\n    HAVING AVG(m.UnitPrice) > 500\n),\nProjectSafetyIncidents AS (\n    SELECT \n        p.ProjectID,\n        COUNT(si.IncidentID) AS HighSeverityIncidents\n    FROM Projects p\n    JOIN SafetyIncidents si ON 1=1\n    WHERE si.SeverityLevel = 'Высокий'\n    GROUP BY p.ProjectID\n)\nSELECT \n    pds.ProjectName,\n    pds.DraftCount,\n    pds.ApprovedCount,\n    pmc.TotalMaterialCost,\n    psi.HighSeverityIncidents\nFROM ProjectDocumentStats pds\nJOIN ProjectMaterialCost pmc ON pds.ProjectID = pmc.ProjectID\nJOIN ProjectSafetyIncidents psi ON pds.ProjectID = psi.ProjectID\nORDER BY (pds.DraftCount - pds.ApprovedCount) DESC, psi.HighSeverityIncidents DESC\nLIMIT 4;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "WITH ProjectDrafts AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        SUM(CASE WHEN dd.Status = 'Черновик' THEN 1 ELSE 0 END) AS DraftCount,\n        SUM(CASE WHEN dd.Status = 'Утвержден' THEN 1 ELSE 0 END) AS ApprovedCount\n    FROM Projects p\n    JOIN DesignDocuments dd ON p.ProjectID = dd.ProjectID\n    GROUP BY p.ProjectID, p.ProjectName\n    HAVING SUM(CASE WHEN dd.Status = 'Черновик' THEN 1 ELSE 0 END) > SUM(CASE WHEN dd.Status = 'Утвержден' THEN 1 ELSE 0 END)\n),\nProjectMaterials AS (\n    SELECT \n        p.ProjectID,\n        SUM(m.UnitPrice * m.QuantityInStock) AS TotalMaterialCost\n    FROM Projects p\n    JOIN Materials m ON 1=1\n    GROUP BY p.ProjectID\n    HAVING AVG(m.UnitPrice) > 500\n),\nProjectIncidents AS (\n    SELECT \n        p.ProjectID,\n        COUNT(si.IncidentID) AS HighSeverityIncidents\n    FROM Projects p\n    JOIN SafetyIncidents si ON 1=1\n    WHERE si.SeverityLevel = 'Высокий'\n    GROUP BY p.ProjectID\n)\nSELECT \n    pd.ProjectName,\n    pd.DraftCount,\n    pd.ApprovedCount,\n    pm.TotalMaterialCost,\n    pi.HighSeverityIncidents,\n    (pd.DraftCount - pd.ApprovedCount) AS DraftApprovedDifference\nFROM ProjectDrafts pd\nJOIN ProjectMaterials pm ON pd.ProjectID = pm.ProjectID\nJOIN ProjectIncidents pi ON pd.ProjectID = pi.ProjectID\nORDER BY DraftApprovedDifference DESC, pi.HighSeverityIncidents DESC\nLIMIT 4;",
            "gigachat_response": "WITH DocStatusCounts AS (\n    SELECT \n        dd.ProjectID,\n        SUM(CASE WHEN dd.Status = 'Черновик' THEN 1 ELSE 0 END) AS DraftCount,\n        SUM(CASE WHEN dd.Status = 'Утвержден' THEN 1 ELSE 0 END) AS ApprovedCount\n    FROM DesignDocuments dd\n    GROUP BY dd.ProjectID\n),\nMaterialCosts AS (\n    SELECT \n        p.ProjectID,\n        SUM(m.UnitPrice * m.QuantityInStock) AS TotalMaterialCost\n    FROM Projects p\n    INNER JOIN Materials m ON p.ClientID = m.SupplierID -- Assuming client ID matches supplier ID for simplicity\n    GROUP BY p.ProjectID\n),\nSafetyIncidentCounts AS (\n    SELECT \n        si.EquipmentID,\n        COUNT(*) AS HighSeverityIncidents\n    FROM SafetyIncidents si\n    WHERE si.SeverityLevel = 'Высокий'\n    GROUP BY si.EquipmentID\n),\nProjectDetails AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        dsc.DraftCount,\n        dsc.ApprovedCount,\n        mc.TotalMaterialCost,\n        sic.HighSeverityIncidents\n    FROM Projects p\n    INNER JOIN DocStatusCounts dsc ON p.ProjectID = dsc.ProjectID\n    INNER JOIN MaterialCosts mc ON p.ProjectID = mc.ProjectID\n    LEFT JOIN SafetyIncidentCounts sic ON p.ProjectID = sic.EquipmentID\n)\nSELECT \n    pd.ProjectName,\n    pd.DraftCount,\n    pd.ApprovedCount,\n    pd.TotalMaterialCost,\n    COALESCE(pd.HighSeverityIncidents, 0) AS HighSeverityIncidents\nFROM ProjectDetails pd\nWHERE pd.DraftCount > pd.ApprovedCount\nAND pd.TotalMaterialCost > 500\nORDER BY (pd.DraftCount - pd.ApprovedCount) DESC, pd.HighSeverityIncidents DESC\nLIMIT 4;",
            "gigachat_response_ru": "SELECT \n    pr.ProjectName,\n    COUNT(CASE WHEN dd.Status = 'Черновик' THEN 1 END) AS DraftCount,\n    COUNT(CASE WHEN dd.Status = 'Утвержден' THEN 1 END) AS ApprovedCount,\n    SUM(mat.UnitPrice * mat.QuantityInStock) AS TotalMaterialCost,\n    COUNT(si.IncidentID) AS HighSeverityIncidents\nFROM Projects pr\nLEFT JOIN DesignDocuments dd ON pr.ProjectID = dd.ProjectID\nLEFT JOIN Materials mat ON pr.ProjectID IN (SELECT ProjectID FROM Tasks WHERE TaskID = mat.MaterialID)\nLEFT JOIN SafetyIncidents si ON pr.ProjectID IN (SELECT ProjectID FROM Tasks WHERE TaskID = si.EquipmentID)\nWHERE AVG(mat.UnitPrice) > 500\nAND si.SeverityLevel = 'Высокий'\nGROUP BY pr.ProjectID, pr.ProjectName\nHAVING DraftCount > ApprovedCount\nORDER BY (DraftCount - ApprovedCount) DESC, HighSeverityIncidents DESC\nLIMIT 4;"
        },
        {
            "question": "Найти отделы с наибольшим количеством инженеров, имеющих сертификаты уровня 'Продвинутый' или 'Эксперт', и участвующих в проектах с бюджетом более 5 миллионов рублей, а также участвовавших в программах обучения стоимостью более 150000 рублей. В ответе будут показаны: название отдела, количество квалифицированных инженеров, количество проектов, общий бюджет проектов и общая стоимость обучения. Учитываются только завершенные программы обучения и действующие сертификаты. Результаты отсортированы по количеству квалифицированных инженеров и общему бюджету проектов, показаны топ-3 записи.",
            "sql_query": "WITH DepartmentEngineerTraining AS (\n    SELECT \n        d.DepartmentID,\n        d.DepartmentName,\n        COUNT(DISTINCT e.EngineerID) as QualifiedEngineers,\n        COUNT(DISTINCT p.ProjectID) as ProjectCount,\n        SUM(p.Budget) as TotalProjectBudget,\n        SUM(tp.Cost) as TotalTrainingCost\n    FROM Departments d\n    JOIN Engineers e ON d.DepartmentID = e.DepartmentID\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    JOIN Projects p ON p.ProjectManagerID = e.EngineerID\n    JOIN TrainingPrograms tp ON e.EngineerID = tp.EngineerID\n    WHERE c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    AND c.Status = 'Действителен'\n    AND p.Budget > 5000000\n    AND tp.Cost > 150000\n    AND tp.Status = 'Завершено'\n    GROUP BY d.DepartmentID, d.DepartmentName\n)\nSELECT \n    DepartmentName,\n    QualifiedEngineers,\n    ProjectCount,\n    ROUND(TotalProjectBudget, 2) as TotalProjectBudget,\n    ROUND(TotalTrainingCost, 2) as TotalTrainingCost\nFROM DepartmentEngineerTraining\nORDER BY QualifiedEngineers DESC, TotalProjectBudget DESC\nLIMIT 3;",
            "gpt-4o_response": "WITH QualifiedEngineers AS (\n    SELECT \n        e.EngineerID,\n        e.DepartmentID\n    FROM Engineers e\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    AND c.Status = 'Действителен'\n),\nProjectsOverBudget AS (\n    SELECT \n        p.ProjectID,\n        p.DepartmentID,\n        p.Budget\n    FROM Projects p\n    WHERE p.Budget > 5000000\n),\nCompletedTrainings AS (\n    SELECT \n        tp.EngineerID,\n        SUM(tp.Cost) AS TotalTrainingCost\n    FROM TrainingPrograms tp\n    WHERE tp.Status = 'Завершено'\n    AND tp.Cost > 150000\n    GROUP BY tp.EngineerID\n),\nDepartmentStats AS (\n    SELECT \n        d.DepartmentName,\n        COUNT(DISTINCT qe.EngineerID) AS QualifiedEngineersCount,\n        COUNT(DISTINCT pob.ProjectID) AS ProjectCount,\n        SUM(pob.Budget) AS TotalProjectBudget,\n        SUM(ct.TotalTrainingCost) AS TotalTrainingCost\n    FROM Departments d\n    JOIN QualifiedEngineers qe ON d.DepartmentID = qe.DepartmentID\n    JOIN ProjectsOverBudget pob ON d.DepartmentID = pob.DepartmentID\n    JOIN CompletedTrainings ct ON qe.EngineerID = ct.EngineerID\n    GROUP BY d.DepartmentName\n)\nSELECT \n    DepartmentName,\n    QualifiedEngineersCount,\n    ProjectCount,\n    ROUND(TotalProjectBudget, 2) AS TotalProjectBudget,\n    ROUND(TotalTrainingCost, 2) AS TotalTrainingCost\nFROM DepartmentStats\nORDER BY QualifiedEngineersCount DESC, TotalProjectBudget DESC\nLIMIT 3;",
            "gpt-4o_response_ru": "WITH QualifiedEngineers AS (\n    SELECT \n        e.EngineerID,\n        e.DepartmentID\n    FROM Engineers e\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    AND c.Status = 'Действителен'\n),\nProjectStats AS (\n    SELECT \n        p.DepartmentID,\n        COUNT(DISTINCT p.ProjectID) AS ProjectCount,\n        SUM(p.Budget) AS TotalProjectBudget\n    FROM Projects p\n    WHERE p.Budget > 5000000\n    GROUP BY p.DepartmentID\n),\nTrainingStats AS (\n    SELECT \n        e.DepartmentID,\n        COUNT(DISTINCT tp.TrainingID) AS CompletedTrainings,\n        SUM(tp.Cost) AS TotalTrainingCost\n    FROM TrainingPrograms tp\n    JOIN Engineers e ON tp.EngineerID = e.EngineerID\n    WHERE tp.Cost > 150000\n    AND tp.Status = 'Завершено'\n    GROUP BY e.DepartmentID\n)\nSELECT \n    d.DepartmentName,\n    COUNT(DISTINCT qe.EngineerID) AS QualifiedEngineersCount,\n    ps.ProjectCount,\n    ps.TotalProjectBudget,\n    ts.TotalTrainingCost\nFROM Departments d\nJOIN QualifiedEngineers qe ON d.DepartmentID = qe.DepartmentID\nJOIN ProjectStats ps ON d.DepartmentID = ps.DepartmentID\nJOIN TrainingStats ts ON d.DepartmentID = ts.DepartmentID\nGROUP BY d.DepartmentName, ps.ProjectCount, ps.TotalProjectBudget, ts.TotalTrainingCost\nORDER BY QualifiedEngineersCount DESC, ps.TotalProjectBudget DESC\nLIMIT 3;",
            "google/gemini-2.0-flash-001_response": "WITH QualifiedEngineers AS (\n    SELECT\n        e.EngineerID,\n        e.DepartmentID\n    FROM\n        Engineers e\n    JOIN\n        Certifications c ON e.EngineerID = c.EngineerID\n    WHERE\n        c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n        AND c.Status = 'Действителен'\n),\nRelevantProjects AS (\n    SELECT\n        ProjectID,\n        DepartmentID,\n        Budget\n    FROM\n        Projects\n    WHERE\n        Budget > 5000000\n),\nRelevantTraining AS (\n    SELECT\n        tp.EngineerID,\n        tp.Cost\n    FROM\n        TrainingPrograms tp\n    WHERE\n        tp.Cost > 150000\n        AND tp.Status = 'Завершено'\n),\nDepartmentStats AS (\n    SELECT\n        d.DepartmentID,\n        d.DepartmentName,\n        COUNT(DISTINCT qe.EngineerID) AS QualifiedEngineerCount,\n        COUNT(DISTINCT rp.ProjectID) AS ProjectCount,\n        SUM(rp.Budget) AS TotalProjectBudget,\n        SUM(rt.Cost) AS TotalTrainingCost\n    FROM\n        Departments d\n    LEFT JOIN\n        QualifiedEngineers qe ON d.DepartmentID = qe.DepartmentID\n    LEFT JOIN\n        RelevantProjects rp ON d.DepartmentID = rp.DepartmentID\n    LEFT JOIN\n        RelevantTraining rt ON qe.EngineerID = rt.EngineerID\n    GROUP BY\n        d.DepartmentID, d.DepartmentName\n)\nSELECT\n    ds.DepartmentName,\n    ds.QualifiedEngineerCount,\n    ds.ProjectCount,\n    ds.TotalProjectBudget,\n    ds.TotalTrainingCost\nFROM\n    DepartmentStats ds\nWHERE ds.QualifiedEngineerCount > 0\nORDER BY\n    ds.QualifiedEngineerCount DESC, ds.TotalProjectBudget DESC\nLIMIT 3;",
            "google/gemini-2.0-flash-001_response_ru": "WITH QualifiedEngineers AS (\n    SELECT\n        e.EngineerID,\n        e.DepartmentID\n    FROM Engineers e\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    AND c.Status = 'Действителен'\n),\nRelevantProjects AS (\n    SELECT\n        p.ProjectID,\n        p.DepartmentID,\n        p.Budget\n    FROM Projects p\n    WHERE p.Budget > 5000000\n),\nRelevantTraining AS (\n    SELECT\n        tp.EngineerID,\n        tp.Cost\n    FROM TrainingPrograms tp\n    WHERE tp.Cost > 150000\n    AND tp.Status = 'Завершено'\n)\nSELECT\n    d.DepartmentName,\n    COUNT(DISTINCT qe.EngineerID) AS QualifiedEngineersCount,\n    COUNT(DISTINCT rp.ProjectID) AS ProjectCount,\n    SUM(rp.Budget) AS TotalProjectBudget,\n    SUM(rt.Cost) AS TotalTrainingCost\nFROM Departments d\nJOIN QualifiedEngineers qe ON d.DepartmentID = qe.DepartmentID\nJOIN RelevantProjects rp ON d.DepartmentID = rp.DepartmentID\nJOIN RelevantTraining rt ON qe.EngineerID = rt.EngineerID\nGROUP BY d.DepartmentName\nORDER BY QualifiedEngineersCount DESC, TotalProjectBudget DESC\nLIMIT 3;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH DepartmentEngineerStats AS (\n    SELECT \n        d.DepartmentID,\n        d.DepartmentName,\n        COUNT(DISTINCT e.EngineerID) as QualifiedEngineers,\n        COUNT(DISTINCT p.ProjectID) as ProjectCount,\n        SUM(p.Budget) as TotalBudget,\n        SUM(tp.Cost) as TotalTrainingCost\n    FROM Departments d\n    JOIN Engineers e ON d.DepartmentID = e.DepartmentID\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    JOIN Projects p ON e.EngineerID = p.ProjectManagerID\n    JOIN TrainingPrograms tp ON e.EngineerID = tp.EngineerID\n    WHERE c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    AND c.Status = 'Действителен'\n    AND p.Budget > 5000000\n    AND tp.Status = 'Завершено'\n    AND tp.Cost > 150000\n    GROUP BY d.DepartmentID, d.DepartmentName\n)\nSELECT \n    DepartmentName,\n    QualifiedEngineers,\n    ProjectCount,\n    TotalBudget,\n    TotalTrainingCost\nFROM DepartmentEngineerStats\nORDER BY QualifiedEngineers DESC, TotalBudget DESC\nLIMIT 3;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH DepartmentStats AS (\n    SELECT \n        d.DepartmentName,\n        COUNT(DISTINCT e.EngineerID) as QualifiedEngineers,\n        COUNT(DISTINCT p.ProjectID) as ProjectCount,\n        SUM(p.Budget) as TotalBudget,\n        SUM(tp.Cost) as TotalTrainingCost\n    FROM Departments d\n    JOIN Engineers e ON d.DepartmentID = e.DepartmentID\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    JOIN Projects p ON e.EngineerID = p.ProjectManagerID\n    JOIN TrainingPrograms tp ON e.EngineerID = tp.EngineerID\n    WHERE c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    AND c.Status = 'Действителен'\n    AND p.Budget > 5000000\n    AND tp.Status = 'Завершено'\n    AND tp.Cost > 150000\n    GROUP BY d.DepartmentName\n)\nSELECT \n    DepartmentName,\n    QualifiedEngineers,\n    ProjectCount,\n    ROUND(TotalBudget, 2) as TotalBudget,\n    ROUND(TotalTrainingCost, 2) as TotalTrainingCost\nFROM DepartmentStats\nORDER BY QualifiedEngineers DESC, TotalBudget DESC\nLIMIT 3;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH QualifiedEngineers AS (\n    SELECT \n        e.EngineerID,\n        e.DepartmentID,\n        COUNT(DISTINCT c.CertificationID) AS CertCount\n    FROM Engineers e\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    AND c.Status = 'Действителен'\n    GROUP BY e.EngineerID, e.DepartmentID\n),\nEngineerProjects AS (\n    SELECT \n        e.EngineerID,\n        e.DepartmentID,\n        COUNT(DISTINCT p.ProjectID) AS ProjectCount,\n        SUM(p.Budget) AS TotalProjectBudget\n    FROM Engineers e\n    JOIN Projects p ON e.EngineerID = p.ProjectManagerID\n    WHERE p.Budget > 5000000\n    GROUP BY e.EngineerID, e.DepartmentID\n),\nEngineerTraining AS (\n    SELECT \n        e.EngineerID,\n        e.DepartmentID,\n        COUNT(DISTINCT tp.TrainingID) AS TrainingCount,\n        SUM(tp.Cost) AS TotalTrainingCost\n    FROM Engineers e\n JOIN TrainingPrograms tp ON e.EngineerID = tp.EngineerID\n    WHERE tp.Cost > 150000\n    AND tp.Status = 'Завершено'\n    GROUP BY e.EngineerID, e.DepartmentID\n),\nDepartmentStats AS (\n    SELECT \n        d.DepartmentID,\n        d.DepartmentName,\n        COUNT(DISTINCT qe.EngineerID) AS QualifiedEngineerCount,\n        SUM(ep.ProjectCount) AS TotalProjectCount,\n        SUM(ep.TotalProjectBudget) AS TotalProjectBudget,\n        SUM(et.TotalTrainingCost) AS TotalTrainingCost\n    FROM Departments d\n    JOIN QualifiedEngineers qe ON d.DepartmentID = qe.DepartmentID\n    JOIN EngineerProjects ep ON qe.EngineerID = ep.EngineerID\n    JOIN EngineerTraining et ON qe.EngineerID = et.EngineerID\n    GROUP BY d.DepartmentID, d.DepartmentName\n)\nSELECT \n    DepartmentName,\n    QualifiedEngineerCount,\n    TotalProjectCount,\n    TotalProjectBudget,\n    TotalTrainingCost\nFROM DepartmentStats\nORDER BY QualifiedEngineerCount DESC, TotalProjectBudget DESC\nLIMIT 3;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "WITH QualifiedEngineers AS (\n    SELECT \n        e.EngineerID,\n        e.DepartmentID,\n        COUNT(DISTINCT c.CertificationID) AS CertCount\n    FROM Engineers e\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    AND c.Status = 'Действителен'\n    GROUP BY e.EngineerID, e.DepartmentID\n),\nDepartmentEngineerStats AS (\n    SELECT \n        d.DepartmentID,\n        d.DepartmentName,\n        COUNT(DISTINCT qe.EngineerID) AS QualifiedEngineerCount\n    FROM Departments d\n    JOIN QualifiedEngineers qe ON d.DepartmentID = qe.DepartmentID\n    GROUP BY d.DepartmentID, d.DepartmentName\n),\nProjectStats AS (\n    SELECT \n        p.DepartmentID,\n        COUNT(DISTINCT p.ProjectID) AS ProjectCount,\n        SUM(p.Budget) AS TotalProjectBudget\n    FROM Projects p\n    WHERE p.Budget > 5000000\n    GROUP BY p.DepartmentID\n),\nTrainingStats AS (\n    SELECT \n        e.DepartmentID,\n        SUM(tp.Cost) AS TotalTrainingCost\n    FROM Engineers e\n    JOIN TrainingPrograms tp ON e.EngineerID = tp.EngineerID\n    WHERE tp.Status = 'Завершено'\n    AND tp.Cost > 150000\n    GROUP BY e.DepartmentID\n)\nSELECT \n    des.DepartmentName,\n    des.QualifiedEngineerCount,\n    ps.ProjectCount,\n    ps.TotalProjectBudget,\n    ts.TotalTrainingCost\nFROM DepartmentEngineerStats des\nJOIN ProjectStats ps ON des.DepartmentID = ps.DepartmentID\nJOIN TrainingStats ts ON des.DepartmentID = ts.DepartmentID\nORDER BY des.QualifiedEngineerCount DESC, ps.TotalProjectBudget DESC\nLIMIT 3;",
            "gigachat_response": "WITH QualifiedEngineers AS (\n    SELECT \n        e.EngineerID,\n        e.DepartmentID,\n        COUNT(c.CertificationID) AS CertifiedCount\n    FROM Engineers e\n    INNER JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n      AND c.Status = 'Действителен'\n    GROUP BY e.EngineerID, e.DepartmentID\n),\n\nRelevantProjects AS (\n    SELECT \n        p.ProjectID,\n        p.DepartmentID,\n        p.Budget\n    FROM Projects p\n    WHERE p.Budget > 5000000\n),\n\nCompletedTrainings AS (\n    SELECT \n        tp.EngineerID,\n        COUNT(tp.TrainingID) AS TrainingCount,\n        SUM(tp.Cost) AS TotalTrainingCost\n    FROM TrainingPrograms tp\n    WHERE tp.Status = 'Завершено'\n      AND tp.Cost > 150000\n    GROUP BY tp.EngineerID\n),\n\nQualifiedDepartments AS (\n    SELECT \n        depts.DepartmentID,\n        depts.DepartmentName,\n        COUNT(qe.EngineerID) AS NumQualifiedEngineers,\n        COUNT(DISTINCT rp.ProjectID) AS NumProjects,\n        SUM(rp.Budget) AS TotalProjectBudget,\n        SUM(ct.TotalTrainingCost) AS TotalTrainingExpenditure\n    FROM Departments depts\n    LEFT JOIN QualifiedEngineers qe ON depts.DepartmentID = qe.DepartmentID\n    LEFT JOIN RelevantProjects rp ON depts.DepartmentID = rp.DepartmentID\n    LEFT JOIN CompletedTrainings ct ON qe.EngineerID = ct.EngineerID\n    GROUP BY depts.DepartmentID, depts.DepartmentName\n)\n\nSELECT *\nFROM QualifiedDepartments\nWHERE NumQualifiedEngineers > 0\nORDER BY NumQualifiedEngineers DESC, TotalProjectBudget DESC\nLIMIT 3;",
            "gigachat_response_ru": "WITH QualifiedEngineers AS (\n    SELECT DISTINCT e.EngineerID, e.DepartmentID\n    FROM Engineers e\n    INNER JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n      AND c.Status = 'Действителен'\n),\nQualifiedDepartments AS (\n    SELECT de.DepartmentID, COUNT(qe.EngineerID) AS NumQualifiedEngineers\n    FROM Departments de\n    INNER JOIN QualifiedEngineers qe ON de.DepartmentID = qe.DepartmentID\n    GROUP BY de.DepartmentID\n),\nHighBudgetProjects AS (\n    SELECT p.ProjectID, p.DepartmentID, p.Budget\n    FROM Projects p\n    WHERE p.Budget > 5000000\n),\nCompletedExpensiveTrainings AS (\n    SELECT te.EngineerID, te.DepartmentID, COUNT(*) AS NumTrainings, SUM(tp.Cost) AS TotalTrainingCost\n    FROM TrainingPrograms tp\n    INNER JOIN Engineers te ON tp.EngineerID = te.EngineerID\n    WHERE tp.Status = 'Завершено'\n      AND tp.Cost > 150000\n    GROUP BY te.EngineerID, te.DepartmentID\n),\nFinalResult AS (\n    SELECT \n        d.DepartmentName,\n        COALESCE(qd.NumQualifiedEngineers, 0) AS NumQualifiedEngineers,\n        COUNT(hbp.ProjectID) AS NumProjects,\n        SUM(hbp.Budget) AS TotalProjectBudget,\n        COALESCE(SUM(ct.TotalTrainingCost), 0) AS TotalTrainingCost\n    FROM Departments d\n    LEFT JOIN HighBudgetProjects hbp ON d.DepartmentID = hbp.DepartmentID\n    LEFT JOIN QualifiedDepartments qd ON d.DepartmentID = qd.DepartmentID\n    LEFT JOIN CompletedExpensiveTrainings ct ON d.DepartmentID = ct.DepartmentID\n    GROUP BY d.DepartmentName, qd.NumQualifiedEngineers\n)\nSELECT *\nFROM FinalResult\nWHERE NumQualifiedEngineers > 0\nORDER BY NumQualifiedEngineers DESC, TotalProjectBudget DESC\nLIMIT 3;"
        },
        {
            "question": "Найти топ-3 инженеров с наибольшим количеством сертификатов и их общей стоимостью обучения, работающих в отделах с бюджетом более 3 000 000 рублей. В ответе будут показаны: идентификатор инженера, имя, фамилия, должность, название отдела, количество сертификатов и общая стоимость обучения. Результаты отсортированы по количеству сертификатов и общей стоимости обучения, показаны топ-17 записей.",
            "sql_query": "SELECT e.EngineerID, e.FirstName, e.LastName, e.Position, d.DepartmentName, \n       COUNT(c.CertificationID) AS CertificationCount, \n       COALESCE(SUM(tp.Cost), 0) AS TotalTrainingCost\nFROM Engineers e\nJOIN Departments d ON e.DepartmentID = d.DepartmentID\nLEFT JOIN Certifications c ON e.EngineerID = c.EngineerID\nLEFT JOIN TrainingPrograms tp ON e.EngineerID = tp.EngineerID\nWHERE d.Budget > 3000000.00\nGROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position, d.DepartmentName\nORDER BY CertificationCount DESC, TotalTrainingCost DESC\nLIMIT 17",
            "gpt-4o_response": "WITH EngineerCertificationTraining AS (\n    SELECT \n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', e.LastName) AS EngineerName,\n        e.Position,\n        d.DepartmentName,\n        COUNT(c.CertificationID) AS CertificationCount,\n        SUM(tp.Cost) AS TotalTrainingCost\n    FROM Engineers e\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    JOIN TrainingPrograms tp ON e.EngineerID = tp.EngineerID\n    JOIN Departments d ON e.DepartmentID = d.DepartmentID\n    WHERE d.Budget > 3000000\n    GROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position, d.DepartmentName\n)\nSELECT \n    EngineerID,\n    EngineerName,\n    Position,\n    DepartmentName,\n    CertificationCount,\n    ROUND(TotalTrainingCost, 2) AS TotalTrainingCost\nFROM EngineerCertificationTraining\nORDER BY CertificationCount DESC, TotalTrainingCost DESC\nLIMIT 3;",
            "gpt-4o_response_ru": "WITH EngineerCertifications AS (\n    SELECT \n        e.EngineerID,\n        e.FirstName,\n        e.LastName,\n        e.Position,\n        d.DepartmentName,\n        COUNT(c.CertificationID) AS CertificationCount,\n        SUM(tp.Cost) AS TotalTrainingCost\n    FROM Engineers e\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    JOIN Departments d ON e.DepartmentID = d.DepartmentID\n    LEFT JOIN TrainingPrograms tp ON e.EngineerID = tp.EngineerID\n    WHERE d.Budget > 3000000\n    GROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position, d.DepartmentName\n)\nSELECT \n    EngineerID,\n    FirstName,\n    LastName,\n    Position,\n    DepartmentName,\n    CertificationCount,\n    COALESCE(TotalTrainingCost, 0) AS TotalTrainingCost\nFROM EngineerCertifications\nORDER BY CertificationCount DESC, TotalTrainingCost DESC\nLIMIT 3;",
            "google/gemini-2.0-flash-001_response": "WITH EngineerCertificationTraining AS (\n    SELECT\n        e.EngineerID,\n        e.FirstName,\n        e.LastName,\n        e.Position,\n        d.DepartmentName,\n        COUNT(DISTINCT c.CertificationID) AS CertificationCount,\n        SUM(tp.Cost) AS TotalTrainingCost\n    FROM Engineers e\n    JOIN Departments d ON e.DepartmentID = d.DepartmentID\n    LEFT JOIN Certifications c ON e.EngineerID = c.EngineerID\n    LEFT JOIN TrainingPrograms tp ON e.EngineerID = tp.EngineerID\n    WHERE d.Budget > 3000000\n    GROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position, d.DepartmentName\n)\nSELECT\n    EngineerID,\n    FirstName,\n    LastName,\n    Position,\n    DepartmentName,\n    CertificationCount,\n    TotalTrainingCost\nFROM EngineerCertificationTraining\nORDER BY CertificationCount DESC, TotalTrainingCost DESC\nLIMIT 17;",
            "google/gemini-2.0-flash-001_response_ru": "WITH EngineerCertificationTraining AS (\n    SELECT\n        e.EngineerID,\n        e.FirstName,\n        e.LastName,\n        e.Position,\n        d.DepartmentName,\n        COUNT(DISTINCT c.CertificationID) AS CertificationCount,\n        SUM(tp.Cost) AS TotalTrainingCost\n    FROM Engineers e\n    JOIN Departments d ON e.DepartmentID = d.DepartmentID\n    LEFT JOIN Certifications c ON e.EngineerID = c.EngineerID\n    LEFT JOIN TrainingPrograms tp ON e.EngineerID = tp.EngineerID\n    WHERE d.Budget > 3000000\n    GROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position, d.DepartmentName\n)\nSELECT\n    EngineerID,\n    FirstName,\n    LastName,\n    Position,\n    DepartmentName,\n    CertificationCount,\n    TotalTrainingCost\nFROM EngineerCertificationTraining\nORDER BY CertificationCount DESC, TotalTrainingCost DESC\nLIMIT 17;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH EngineerCertificationStats AS (\n    SELECT \n        e.EngineerID,\n        e.FirstName,\n        e.LastName,\n        e.Position,\n        d.DepartmentName,\n        COUNT(c.CertificationID) as CertificationCount,\n        SUM(tp.Cost) as TotalTrainingCost\n    FROM Engineers e\n    JOIN Departments d ON e.DepartmentID = d.DepartmentID\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    LEFT JOIN TrainingPrograms tp ON c.CertificationID = tp.CertificationID\n    WHERE d.Budget > 3000000\n    GROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position, d.DepartmentName\n)\nSELECT \n    EngineerID,\n    FirstName,\n    LastName,\n    Position,\n    DepartmentName,\n    CertificationCount,\n    TotalTrainingCost\nFROM EngineerCertificationStats\nORDER BY CertificationCount DESC, TotalTrainingCost DESC\nLIMIT 17;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH EngineerCertificationStats AS (\n    SELECT \n        e.EngineerID,\n        e.FirstName,\n        e.LastName,\n        e.Position,\n        d.DepartmentName,\n        COUNT(c.CertificationID) as CertificationCount,\n        SUM(tp.Cost) as TotalTrainingCost\n    FROM Engineers e\n    JOIN Departments d ON e.DepartmentID = d.DepartmentID\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    LEFT JOIN TrainingPrograms tp ON c.CertificationID = tp.CertificationID\n    WHERE d.Budget > 3000000\n    GROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position, d.DepartmentName\n)\nSELECT \n    EngineerID,\n    FirstName,\n    LastName,\n    Position,\n    DepartmentName,\n    CertificationCount,\n    TotalTrainingCost\nFROM EngineerCertificationStats\nORDER BY CertificationCount DESC, TotalTrainingCost DESC\nLIMIT 17;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH DepartmentFilter AS (\n    SELECT DepartmentID \n    FROM Departments \n    WHERE Budget > 3000000\n),\nEngineerCertCount AS (\n    SELECT \n        e.EngineerID,\n        e.FirstName,\n        e.LastName,\n        e.Position,\n        d.DepartmentName,\n        COUNT(c.CertificationID) AS CertificationCount,\n        SUM(COALESCE(tp.Cost, 0)) AS TotalTrainingCost\n    FROM Engineers e\n    JOIN DepartmentFilter df ON e.DepartmentID = df.DepartmentID\n    JOIN Departments d ON e.DepartmentID = d.DepartmentID\n    LEFT JOIN Certifications c ON e.EngineerID = c.EngineerID\n    LEFT JOIN TrainingPrograms tp ON e.EngineerID = tp.EngineerID\n    GROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position, d.DepartmentName\n)\nSELECT \n    EngineerID,\n    FirstName,\n    LastName,\n    Position,\n    DepartmentName,\n    CertificationCount,\n    TotalTrainingCost\nFROM EngineerCertCount\nORDER BY CertificationCount DESC, TotalTrainingCost DESC\nLIMIT 17;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    e.EngineerID,\n    e.FirstName,\n    e.LastName,\n    e.Position,\n    d.DepartmentName,\n    COUNT(c.CertificationID) AS CertificationCount,\n    SUM(tp.Cost) AS TotalTrainingCost\nFROM Engineers e\nJOIN Departments d ON e.DepartmentID = d.DepartmentID\nJOIN Certifications c ON e.EngineerID = c.EngineerID\nLEFT JOIN TrainingPrograms tp ON e.EngineerID = tp.EngineerID\nWHERE d.Budget > 3000000\nGROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position, d.DepartmentName\nORDER BY CertificationCount DESC, TotalTrainingCost DESC\nLIMIT 3;",
            "gigachat_response": "SELECT \n    e.EngineerID,\n    e.FirstName,\n    e.LastName,\n    e.Position,\n    d.DepartmentName,\n    COUNT(c.CertificationID) AS CertificateCount,\n    COALESCE(SUM(tp.Cost), 0) AS TotalTrainingCost\nFROM Engineers e\nJOIN Departments d ON e.DepartmentID = d.DepartmentID\nLEFT JOIN Certifications c ON e.EngineerID = c.EngineerID\nLEFT JOIN TrainingPrograms tp ON e.EngineerID = tp.EngineerID\nWHERE d.Budget > 3000000\nGROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position, d.DepartmentName\nORDER BY CertificateCount DESC, TotalTrainingCost DESC\nLIMIT 17;",
            "gigachat_response_ru": "SELECT TOP 17\n    e.EngineerID,\n    e.FirstName + ' ' + e.LastName AS FullName,\n    e.Position,\n    d.DepartmentName,\n    COUNT(c.CertificationID) AS CertificateCount,\n    SUM(tp.Cost) AS TotalTrainingCost\nFROM Engineers e\nINNER JOIN Departments d ON e.DepartmentID = d.DepartmentID\nLEFT JOIN Certifications c ON e.EngineerID = c.EngineerID\nLEFT JOIN TrainingPrograms tp ON e.EngineerID = tp.EngineerID\nWHERE d.Budget > 3000000\nGROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position, d.DepartmentName\nORDER BY CertificateCount DESC, TotalTrainingCost DESC;"
        },
        {
            "question": "Определить проекты с самыми дорогими материалами, где общая стоимость материалов превышает средний бюджет проекта. В ответе будут показаны: название проекта, бюджет проекта, общая стоимость материалов и название поставщика. Результаты отсортированы по общей стоимости материалов, показаны топ-23 записи.",
            "sql_query": "WITH ProjectMaterialCost AS (\n    SELECT p.ProjectID, p.ProjectName, p.Budget,\n           SUM(m.UnitPrice * m.QuantityInStock) AS TotalMaterialCost,\n           s.SupplierName\n    FROM Projects p\n    JOIN Materials m ON m.MaterialID IN (\n        SELECT MaterialID FROM Materials \n        WHERE SupplierID IN (SELECT SupplierID FROM Suppliers)\n    )\n    JOIN Suppliers s ON m.SupplierID = s.SupplierID\n    GROUP BY p.ProjectID, p.ProjectName, p.Budget, s.SupplierName\n)\nSELECT ProjectName, Budget, TotalMaterialCost, SupplierName\nFROM ProjectMaterialCost\nWHERE TotalMaterialCost > (\n    SELECT AVG(Budget) FROM Projects\n)\nORDER BY TotalMaterialCost DESC\nLIMIT 23",
            "gpt-4o_response": "WITH MaterialCosts AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        p.Budget AS ProjectBudget,\n        SUM(m.UnitPrice * m.QuantityInStock) AS TotalMaterialCost,\n        s.SupplierName\n    FROM Projects p\n    JOIN Materials m ON p.ProjectID = m.MaterialID\n    JOIN Suppliers s ON m.SupplierID = s.SupplierID\n    GROUP BY p.ProjectID, p.ProjectName, p.Budget, s.SupplierName\n),\nAverageProjectBudget AS (\n    SELECT AVG(Budget) AS AvgBudget FROM Projects\n)\nSELECT \n    mc.ProjectName,\n    mc.ProjectBudget,\n    mc.TotalMaterialCost,\n    mc.SupplierName\nFROM MaterialCosts mc\nJOIN AverageProjectBudget apb ON mc.TotalMaterialCost > apb.AvgBudget\nORDER BY mc.TotalMaterialCost DESC\nLIMIT 23;",
            "gpt-4o_response_ru": "WITH ProjectMaterialCosts AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        p.Budget AS ProjectBudget,\n        SUM(m.UnitPrice * m.QuantityInStock) AS TotalMaterialCost,\n        s.SupplierName\n    FROM Projects p\n    JOIN Materials m ON p.ProjectID = m.MaterialID\n    JOIN Suppliers s ON m.SupplierID = s.SupplierID\n    GROUP BY p.ProjectID, p.ProjectName, p.Budget, s.SupplierName\n),\nAverageProjectBudget AS (\n    SELECT AVG(Budget) AS AvgBudget FROM Projects\n)\nSELECT \n    pmc.ProjectName,\n    pmc.ProjectBudget,\n    pmc.TotalMaterialCost,\n    pmc.SupplierName\nFROM ProjectMaterialCosts pmc\nJOIN AverageProjectBudget apb ON pmc.TotalMaterialCost > apb.AvgBudget\nORDER BY pmc.TotalMaterialCost DESC\nLIMIT 23;",
            "google/gemini-2.0-flash-001_response": "WITH MaterialCosts AS (\n    SELECT\n        p.ProjectID,\n        p.ProjectName,\n        p.Budget AS ProjectBudget,\n        SUM(m.UnitPrice * m.QuantityInStock) AS TotalMaterialCost\n    FROM Projects p\n    JOIN Tasks t ON p.ProjectID = t.ProjectID\n    JOIN Materials m ON m.MaterialID > 0  -- Assuming all materials are relevant\n    GROUP BY p.ProjectID, p.ProjectName, p.Budget\n),\nAvgProjectBudget AS (\n    SELECT AVG(Budget) AS AverageBudget FROM Projects\n)\nSELECT\n    mc.ProjectName,\n    mc.ProjectBudget,\n    mc.TotalMaterialCost,\n    s.SupplierName\nFROM MaterialCosts mc\nJOIN Tasks t ON mc.ProjectID = t.ProjectID\nJOIN Materials m ON m.MaterialID > 0  -- Assuming all materials are relevant\nJOIN Suppliers s ON m.SupplierID = s.SupplierID\nWHERE mc.TotalMaterialCost > (SELECT AverageBudget FROM AvgProjectBudget)\nORDER BY mc.TotalMaterialCost DESC\nLIMIT 23;",
            "google/gemini-2.0-flash-001_response_ru": "WITH ProjectMaterialCost AS (\n    SELECT\n        p.ProjectID,\n        p.ProjectName,\n        p.Budget,\n        SUM(m.UnitPrice * m.QuantityInStock) AS TotalMaterialCost\n    FROM Projects p\n    JOIN Tasks t ON p.ProjectID = t.ProjectID\n    JOIN Materials m ON m.MaterialID > 0  -- Фиктивное условие, чтобы можно было использовать таблицу Materials\n    GROUP BY p.ProjectID, p.ProjectName, p.Budget\n),\nAverageProjectBudget AS (\n    SELECT AVG(Budget) AS AvgBudget FROM Projects\n)\nSELECT\n    pm.ProjectName,\n    pm.Budget,\n    pm.TotalMaterialCost,\n    s.SupplierName\nFROM ProjectMaterialCost pm\nJOIN Tasks t ON pm.ProjectID = t.ProjectID\nJOIN Materials m ON m.MaterialID > 0  -- Фиктивное условие, чтобы можно было использовать таблицу Materials\nJOIN Suppliers s ON m.SupplierID = s.SupplierID\nWHERE pm.TotalMaterialCost > (SELECT AvgBudget FROM AverageProjectBudget)\nORDER BY pm.TotalMaterialCost DESC\nLIMIT 23;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH ProjectMaterialCosts AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        p.Budget,\n        SUM(m.UnitPrice * m.QuantityInStock) as TotalMaterialCost,\n        s.SupplierName\n    FROM Projects p\n    JOIN Tasks t ON p.ProjectID = t.ProjectID\n    JOIN Materials m ON t.TaskID = m.MaterialID\n    JOIN Suppliers s ON m.SupplierID = s.SupplierID\n    GROUP BY p.ProjectID, p.ProjectName, p.Budget, s.SupplierName\n    HAVING SUM(m.UnitPrice * m.QuantityInStock) > (SELECT AVG(Budget) FROM Projects)\n)\nSELECT \n    ProjectName,\n    Budget,\n    TotalMaterialCost,\n    SupplierName\nFROM ProjectMaterialCosts\nORDER BY TotalMaterialCost DESC\nLIMIT 23;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH ProjectMaterialCosts AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        p.Budget,\n        SUM(m.UnitPrice * m.QuantityInStock) as TotalMaterialCost,\n        s.SupplierName\n    FROM Projects p\n    JOIN Tasks t ON p.ProjectID = t.ProjectID\n    JOIN Materials m ON t.TaskID = m.MaterialID\n    JOIN Suppliers s ON m.SupplierID = s.SupplierID\n    GROUP BY p.ProjectID, p.ProjectName, p.Budget, s.SupplierName\n    HAVING SUM(m.UnitPrice * m.QuantityInStock) > (SELECT AVG(Budget) FROM Projects)\n)\nSELECT \n    ProjectName,\n    Budget,\n    TotalMaterialCost,\n    SupplierName\nFROM ProjectMaterialCosts\nORDER BY TotalMaterialCost DESC\nLIMIT 23;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH ProjectMaterialCosts AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        p.Budget AS ProjectBudget,\n        SUM(m.UnitPrice * m.QuantityInStock) AS TotalMaterialCost,\n        s.SupplierName\n    FROM Projects p\n    JOIN Materials m ON 1=1\n    JOIN Suppliers s ON m.SupplierID = s.SupplierID\n    GROUP BY p.ProjectID, p.ProjectName, p.Budget, s.SupplierName\n    HAVING SUM(m.UnitPrice * m.QuantityInStock) > (SELECT AVG(Budget) FROM Projects)\n)\nSELECT \n    ProjectName,\n    ProjectBudget,\n    TotalMaterialCost,\n    SupplierName\nFROM ProjectMaterialCosts\nORDER BY TotalMaterialCost DESC\nLIMIT 23;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "WITH ProjectMaterialCosts AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        p.Budget AS ProjectBudget,\n        SUM(m.UnitPrice * m.QuantityInStock) AS TotalMaterialCost,\n        s.SupplierName\n    FROM Projects p\n    JOIN Materials m ON 1=1\n    JOIN Suppliers s ON m.SupplierID = s.SupplierID\n    GROUP BY p.ProjectID, p.ProjectName, p.Budget, s.SupplierName\n    HAVING SUM(m.UnitPrice * m.QuantityInStock) > (SELECT AVG(Budget) FROM Projects)\n)\nSELECT \n    ProjectName,\n    ProjectBudget,\n    TotalMaterialCost,\n    SupplierName\nFROM ProjectMaterialCosts\nORDER BY TotalMaterialCost DESC\nLIMIT 23;",
            "gigachat_response": "WITH ProjectMaterialCosts AS (\n    SELECT \n        pr.ProjectID,\n        pr.ProjectName,\n        pr.Budget,\n        SUM(mat.UnitPrice * mat.QuantityInStock) AS TotalMaterialCost,\n        sup.SupplierName\n    FROM Projects pr\n    INNER JOIN Tasks tk ON pr.ProjectID = tk.ProjectID\n    INNER JOIN Materials mat ON tk.ProjectID = mat.MaterialID\n    INNER JOIN Suppliers sup ON mat.SupplierID = sup.SupplierID\n    GROUP BY pr.ProjectID, pr.ProjectName, pr.Budget, sup.SupplierName\n)\nSELECT \n    pmc.ProjectName,\n    pmc.Budget,\n    pmc.TotalMaterialCost,\n    pmc.SupplierName\nFROM ProjectMaterialCosts pmc\nWHERE pmc.TotalMaterialCost > (SELECT AVG(Budget) FROM Projects)\nORDER BY pmc.TotalMaterialCost DESC\nLIMIT 23;",
            "gigachat_response_ru": "WITH ProjectMaterialCosts AS (\n    SELECT \n        pr.ProjectID,\n        pr.ProjectName,\n        pr.Budget,\n        SUM(mat.UnitPrice * mat.QuantityInStock) AS TotalMaterialCost,\n        sup.SupplierName\n    FROM Projects pr\n    INNER JOIN Tasks tk ON pr.ProjectID = tk.ProjectID\n    INNER JOIN Materials mat ON tk.ProjectID = mat.MaterialID\n    INNER JOIN Suppliers sup ON mat.SupplierID = sup.SupplierID\n    GROUP BY pr.ProjectID, pr.ProjectName, pr.Budget, sup.SupplierName\n)\nSELECT \n    pmc.ProjectName,\n    pmc.Budget,\n    pmc.TotalMaterialCost,\n    pmc.SupplierName\nFROM ProjectMaterialCosts pmc\nWHERE pmc.TotalMaterialCost > (SELECT AVG(Budget) FROM Projects)\nORDER BY pmc.TotalMaterialCost DESC\nLIMIT 23;"
        },
        {
            "question": "Найти инженеров, которые участвовали в проектах с высоким приоритетом и имеют более 2 сертификатов. В ответе будут показаны: идентификатор инженера, имя, фамилия, количество сертификатов, количество инцидентов безопасности и уровень безопасности на рабочем месте. Уровень безопасности определяется по количеству инцидентов: 0 - высокий уровень, 1 - средний уровень, более 1 - низкий уровень. Результаты отсортированы по количеству инцидентов безопасности, показаны топ-19 записей.",
            "sql_query": "WITH EngineerProjectSafety AS (\n    SELECT e.EngineerID, e.FirstName, e.LastName, \n           COUNT(DISTINCT c.CertificationID) AS CertCount,\n           COUNT(DISTINCT si.IncidentID) AS SafetyIncidentCount\n    FROM Engineers e\n    JOIN Projects p ON p.ProjectManagerID = e.EngineerID\n    JOIN Tasks t ON t.ProjectID = p.ProjectID\n    LEFT JOIN Certifications c ON c.EngineerID = e.EngineerID\n    LEFT JOIN SafetyIncidents si ON si.EngineerID = e.EngineerID\n    WHERE t.Priority = 'Высокий'\n    GROUP BY e.EngineerID, e.FirstName, e.LastName\n    HAVING COUNT(DISTINCT c.CertificationID) > 2\n)\nSELECT EngineerID, FirstName, LastName, \n       CertCount, SafetyIncidentCount,\n       CASE \n           WHEN SafetyIncidentCount = 0 THEN 'Высокий уровень безопасности'\n           WHEN SafetyIncidentCount <= 1 THEN 'Средний уровень безопасности'\n           ELSE 'Низкий уровень безопасности'\n       END AS SafetyRating\nFROM EngineerProjectSafety\nORDER BY SafetyIncidentCount\nLIMIT 19",
            "gpt-4o_response": "WITH EngineerCertifications AS (\n    SELECT \n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', e.LastName) AS EngineerName,\n        e.FirstName,\n        e.LastName,\n        COUNT(c.CertificationID) AS CertificationCount\n    FROM Engineers e\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    GROUP BY e.EngineerID, e.FirstName, e.LastName\n    HAVING COUNT(c.CertificationID) > 2\n),\nEngineerTasks AS (\n    SELECT \n        e.EngineerID,\n        COUNT(DISTINCT t.TaskID) AS HighPriorityTaskCount\n    FROM Engineers e\n    JOIN Tasks t ON e.EngineerID = t.AssignedTo\n    WHERE t.Priority = 'Высокий'\n    GROUP BY e.EngineerID\n),\nEngineerSafetyIncidents AS (\n    SELECT \n        e.EngineerID,\n        COUNT(si.IncidentID) AS SafetyIncidentCount\n    FROM Engineers e\n    LEFT JOIN SafetyIncidents si ON e.EngineerID = si.EngineerID\n    GROUP BY e.EngineerID\n),\nEngineerSafetyLevel AS (\n    SELECT \n        e.EngineerID,\n        CASE \n            WHEN esi.SafetyIncidentCount = 0 THEN 'Высокий'\n            WHEN esi.SafetyIncidentCount = 1 THEN 'Средний'\n            ELSE 'Низкий'\n        END AS SafetyLevel\n    FROM Engineers e\n    JOIN EngineerSafetyIncidents esi ON e.EngineerID = esi.EngineerID\n)\nSELECT \n    ec.EngineerID,\n    ec.FirstName,\n    ec.LastName,\n    ec.CertificationCount,\n    esi.SafetyIncidentCount,\n    esl.SafetyLevel\nFROM EngineerCertifications ec\nJOIN EngineerTasks et ON ec.EngineerID = et.EngineerID\nJOIN EngineerSafetyIncidents esi ON ec.EngineerID = esi.EngineerID\nJOIN EngineerSafetyLevel esl ON ec.EngineerID = esl.EngineerID\nWHERE et.HighPriorityTaskCount > 0\nORDER BY esi.SafetyIncidentCount\nLIMIT 19;",
            "gpt-4o_response_ru": "WITH EngineerCertifications AS (\n    SELECT \n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', e.LastName) AS EngineerName,\n        COUNT(c.CertificationID) AS CertificationCount\n    FROM Engineers e\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    GROUP BY e.EngineerID\n    HAVING COUNT(c.CertificationID) > 2\n),\nEngineerTasks AS (\n    SELECT \n        e.EngineerID,\n        COUNT(DISTINCT t.TaskID) AS HighPriorityTaskCount\n    FROM Engineers e\n    JOIN Tasks t ON e.EngineerID = t.AssignedTo\n    WHERE t.Priority = 'Высокий'\n    GROUP BY e.EngineerID\n),\nEngineerIncidents AS (\n    SELECT \n        e.EngineerID,\n        COUNT(si.IncidentID) AS IncidentCount\n    FROM Engineers e\n    LEFT JOIN SafetyIncidents si ON e.EngineerID = si.EngineerID\n    GROUP BY e.EngineerID\n),\nEngineerSafetyLevel AS (\n    SELECT \n        ei.EngineerID,\n        ei.IncidentCount,\n        CASE \n            WHEN ei.IncidentCount = 0 THEN 'Высокий'\n            WHEN ei.IncidentCount = 1 THEN 'Средний'\n            ELSE 'Низкий'\n        END AS SafetyLevel\n    FROM EngineerIncidents ei\n)\nSELECT \n    ec.EngineerID,\n    ec.EngineerName,\n    ec.CertificationCount,\n    COALESCE(ei.IncidentCount, 0) AS IncidentCount,\n    esl.SafetyLevel\nFROM EngineerCertifications ec\nJOIN EngineerTasks et ON ec.EngineerID = et.EngineerID\nJOIN EngineerSafetyLevel esl ON ec.EngineerID = esl.EngineerID\nLEFT JOIN EngineerIncidents ei ON ec.EngineerID = ei.EngineerID\nWHERE et.HighPriorityTaskCount > 0\nORDER BY ei.IncidentCount ASC\nLIMIT 19;",
            "google/gemini-2.0-flash-001_response": "WITH EngineerTaskCert AS (\n    SELECT\n        e.EngineerID,\n        e.FirstName,\n        e.LastName,\n        COUNT(DISTINCT c.CertificationID) AS CertificationCount,\n        COUNT(DISTINCT si.IncidentID) AS IncidentCount\n    FROM Engineers e\n    JOIN Tasks t ON e.EngineerID = t.AssignedTo\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    LEFT JOIN SafetyIncidents si ON e.EngineerID = si.EngineerID\n    WHERE t.Priority = 'Высокий'\n    GROUP BY e.EngineerID, e.FirstName, e.LastName\n    HAVING COUNT(DISTINCT c.CertificationID) > 2\n)\nSELECT\n    etc.EngineerID,\n    etc.FirstName,\n    etc.LastName,\n    etc.CertificationCount,\n    etc.IncidentCount,\n    CASE\n        WHEN etc.IncidentCount = 0 THEN 'Высокий уровень'\n        WHEN etc.IncidentCount = 1 THEN 'Средний уровень'\n        ELSE 'Низкий уровень'\n    END AS SafetyLevel\nFROM EngineerTaskCert etc\nORDER BY etc.IncidentCount\nLIMIT 19;",
            "google/gemini-2.0-flash-001_response_ru": "WITH EngineerTaskCert AS (\n  SELECT\n    e.EngineerID,\n    e.FirstName,\n    e.LastName,\n    COUNT(DISTINCT c.CertificationID) AS CertificationCount,\n    SUM(CASE WHEN t.Priority = 'Высокий' THEN 1 ELSE 0 END) AS HighPriorityTaskCount\n  FROM Engineers AS e\n  LEFT JOIN Certifications AS c\n    ON e.EngineerID = c.EngineerID\n  LEFT JOIN Tasks AS t\n    ON e.EngineerID = t.AssignedTo\n  GROUP BY\n    e.EngineerID,\n    e.FirstName,\n    e.LastName\n  HAVING\n    COUNT(DISTINCT c.CertificationID) > 2\n    AND SUM(CASE WHEN t.Priority = 'Высокий' THEN 1 ELSE 0 END) > 0\n), EngineerSafety AS (\n  SELECT\n    EngineerID,\n    COUNT(*) AS IncidentCount\n  FROM SafetyIncidents\n  GROUP BY\n    EngineerID\n)\nSELECT\n  etc.EngineerID,\n  etc.FirstName,\n  etc.LastName,\n  etc.CertificationCount,\n  COALESCE(es.IncidentCount, 0) AS IncidentCount,\n  CASE\n    WHEN COALESCE(es.IncidentCount, 0) = 0\n    THEN 'высокий уровень'\n    WHEN COALESCE(es.IncidentCount, 0) = 1\n    THEN 'средний уровень'\n    ELSE 'низкий уровень'\n  END AS SafetyLevel\nFROM EngineerTaskCert AS etc\nLEFT JOIN EngineerSafety AS es\n  ON etc.EngineerID = es.EngineerID\nORDER BY\n  IncidentCount\nLIMIT 19;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH EngineerProjectStats AS (\n    SELECT \n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', e.LastName) as EngineerName,\n        COUNT(DISTINCT c.CertificationID) as CertificationCount,\n        COUNT(DISTINCT si.IncidentID) as IncidentCount\n    FROM Engineers e\n    JOIN Tasks t ON e.EngineerID = t.AssignedTo\n    JOIN Projects p ON t.ProjectID = p.ProjectID\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    LEFT JOIN SafetyIncidents si ON e.EngineerID = si.EngineerID\n    WHERE t.Priority = 'Высокий'\n    GROUP BY e.EngineerID, e.FirstName, e.LastName\n    HAVING COUNT(DISTINCT c.CertificationID) > 2\n),\nSafetyLevel AS (\n    SELECT \n        EngineerID,\n        CASE \n            WHEN IncidentCount = 0 THEN 'Высокий'\n            WHEN IncidentCount = 1 THEN 'Средний'\n            ELSE 'Низкий'\n        END as SafetyLevel\n    FROM EngineerProjectStats\n)\nSELECT \n    eps.EngineerID,\n    eps.EngineerName,\n    eps.CertificationCount,\n    eps.IncidentCount,\n    sl.SafetyLevel\nFROM EngineerProjectStats eps\nJOIN SafetyLevel sl ON eps.EngineerID = sl.EngineerID\nORDER BY eps.IncidentCount\nLIMIT 19;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH EngineerProjectStats AS (\n    SELECT \n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', e.LastName) as EngineerName,\n        COUNT(DISTINCT c.CertificationID) as CertificationCount,\n        COUNT(DISTINCT si.IncidentID) as IncidentCount\n    FROM Engineers e\n    JOIN Tasks t ON e.EngineerID = t.AssignedTo\n    JOIN Projects p ON t.ProjectID = p.ProjectID\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    LEFT JOIN SafetyIncidents si ON e.EngineerID = si.EngineerID\n    WHERE t.Priority = 'Высокий'\n    GROUP BY e.EngineerID, e.FirstName, e.LastName\n    HAVING COUNT(DISTINCT c.CertificationID) > 2\n),\nSafetyLevel AS (\n    SELECT \n        EngineerID,\n        CASE \n            WHEN IncidentCount = 0 THEN 'Высокий'\n            WHEN IncidentCount = 1 THEN 'Средний'\n            ELSE 'Низкий'\n        END as SafetyLevel\n    FROM EngineerProjectStats\n)\nSELECT \n    eps.EngineerID,\n    eps.EngineerName,\n    eps.CertificationCount,\n    eps.IncidentCount,\n    sl.SafetyLevel\nFROM EngineerProjectStats eps\nJOIN SafetyLevel sl ON eps.EngineerID = sl.EngineerID\nORDER BY eps.IncidentCount\nLIMIT 19;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH EngineerCertCount AS (\n    SELECT \n        e.EngineerID,\n        e.FirstName,\n        e.LastName,\n        COUNT(c.CertificationID) AS CertificationCount\n    FROM Engineers e\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    GROUP BY e.EngineerID, e.FirstName, e.LastName\n    HAVING COUNT(c.CertificationID) > 2\n),\nEngineerIncidentCount AS (\n    SELECT \n        e.EngineerID,\n        COUNT(si.IncidentID) AS IncidentCount,\n        CASE \n            WHEN COUNT(si.IncidentID) = 0 THEN 'Высокий'\n            WHEN COUNT(si.IncidentID) = 1 THEN 'Средний'\n            ELSE 'Низкий'\n        END AS SafetyLevel\n    FROM Engineers e\n    LEFT JOIN SafetyIncidents si ON e.EngineerID = si.EngineerID\n    GROUP BY e.EngineerID\n),\nHighPriorityProjects AS (\n    SELECT DISTINCT t.AssignedTo\n    FROM Tasks t\n    WHERE t.Priority = 'Высокий'\n)\nSELECT \n    ecc.EngineerID,\n    ecc.FirstName,\n    ecc.LastName,\n    ecc.CertificationCount,\n    eic.IncidentCount,\n    eic.SafetyLevel\nFROM EngineerCertCount ecc\nJOIN HighPriorityProjects hpp ON ecc.EngineerID = hpp.AssignedTo\nJOIN EngineerIncidentCount eic ON ecc.EngineerID = eic.EngineerID\nORDER BY eic.IncidentCount\nLIMIT 19;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "WITH HighPriorityProjects AS (\n    SELECT DISTINCT p.ProjectID, p.ProjectName\n    FROM Projects p\n    JOIN Tasks t ON p.ProjectID = t.ProjectID\n    WHERE t.Priority = 'Высокий'\n),\nEngineerCertCount AS (\n    SELECT \n        e.EngineerID,\n        e.FirstName,\n        e.LastName,\n        COUNT(c.CertificationID) AS CertificationCount\n    FROM Engineers e\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    GROUP BY e.EngineerID, e.FirstName, e.LastName\n    HAVING COUNT(c.CertificationID) > 2\n),\nEngineerIncidentCount AS (\n    SELECT \n        e.EngineerID,\n        COUNT(si.IncidentID) AS IncidentCount,\n        CASE \n            WHEN COUNT(si.IncidentID) = 0 THEN 'Высокий'\n            WHEN COUNT(si.IncidentID) = 1 THEN 'Средний'\n            ELSE 'Низкий'\n        END AS SafetyLevel\n    FROM Engineers e\n    LEFT JOIN SafetyIncidents si ON e.EngineerID = si.EngineerID\n    GROUP BY e.EngineerID\n)\nSELECT \n    ec.EngineerID,\n    ec.FirstName,\n    ec.LastName,\n    ec.CertificationCount,\n    COALESCE(eic.IncidentCount, 0) AS IncidentCount,\n    COALESCE(eic.SafetyLevel, 'Высокий') AS SafetyLevel\nFROM EngineerCertCount ec\nJOIN HighPriorityProjects hpp ON 1=1\nJOIN Projects p ON hpp.ProjectID = p.ProjectID\nJOIN Engineers e ON p.ProjectManagerID = e.EngineerID OR EXISTS (\n    SELECT 1 FROM Tasks t \n    WHERE t.ProjectID = p.ProjectID AND t.AssignedTo = e.EngineerID\n)\nLEFT JOIN EngineerIncidentCount eic ON ec.EngineerID = eic.EngineerID\nWHERE ec.EngineerID = e.EngineerID\nGROUP BY ec.EngineerID, ec.FirstName, ec.LastName, ec.CertificationCount, eic.IncidentCount, eic.SafetyLevel\nORDER BY IncidentCount\nLIMIT 19;",
            "gigachat_response": "SELECT \n    e.EngineerID,\n    e.FirstName,\n    e.LastName,\n    COUNT(c.CertificationID) AS CertificateCount,\n    COUNT(si.IncidentID) AS SafetyIncidentCount,\n    CASE WHEN COUNT(si.IncidentID) = 0 THEN 'Высокий'\n         WHEN COUNT(si.IncidentID) = 1 THEN 'Средний'\n         ELSE 'Низкий' END AS SafetyLevel\nFROM Engineers e\nJOIN Tasks t ON e.EngineerID = t.AssignedTo\nLEFT JOIN Certifications c ON e.EngineerID = c.EngineerID\nLEFT JOIN SafetyIncidents si ON e.EngineerID = si.EngineerID\nWHERE t.Priority = 'Высокий'\nGROUP BY e.EngineerID, e.FirstName, e.LastName\nHAVING COUNT(c.CertificationID) > 2\nORDER BY SafetyIncidentCount ASC\nLIMIT 19;",
            "gigachat_response_ru": "SELECT \n    e.EngineerID,\n    e.FirstName,\n    e.LastName,\n    COUNT(c.CertificationID) AS CertificateCount,\n    COUNT(si.IncidentID) AS SafetyIncidentCount,\n    CASE WHEN COUNT(si.IncidentID) = 0 THEN 'Высокий'\n         WHEN COUNT(si.IncidentID) = 1 THEN 'Средний'\n         ELSE 'Низкий' END AS SafetyLevel\nFROM Engineers e\nLEFT JOIN Certifications c ON e.EngineerID = c.EngineerID\nLEFT JOIN SafetyIncidents si ON e.EngineerID = si.EngineerID\nWHERE e.EngineerID IN (\n    SELECT DISTINCT t.AssignedTo\n    FROM Tasks t\n    JOIN Projects p ON t.ProjectID = p.ProjectID\n    WHERE p.Status = 'В процессе' AND t.Priority = 'Высокий'\n)\nGROUP BY e.EngineerID, e.FirstName, e.LastName\nHAVING COUNT(c.CertificationID) > 2\nORDER BY SafetyIncidentCount ASC\nLIMIT 19;"
        },
        {
            "question": "Рассчитать коэффициент эффективности оборудования для каждого отдела на основе количества ремонтов и текущего статуса оборудования. В ответе будут показаны: идентификатор отдела, название отдела, общее количество оборудования, количество работающего оборудования, количество ремонтов, процент эффективности (отношение работающего оборудования к общему количеству) и коэффициент обслуживания (отношение количества ремонтов к общему количеству оборудования). Результаты отсортированы по проценту эффективности, показаны топ-13 записей.",
            "sql_query": "WITH EquipmentEfficiency AS (\n    SELECT d.DepartmentID, d.DepartmentName,\n           COUNT(e.EquipmentID) AS TotalEquipment,\n           SUM(CASE WHEN e.Status = 'В работе' THEN 1 ELSE 0 END) AS WorkingEquipment,\n           COUNT(mr.MaintenanceID) AS MaintenanceCount\n    FROM Departments d\n    LEFT JOIN Equipment e ON d.DepartmentID = e.DepartmentID\n    LEFT JOIN MaintenanceRecords mr ON e.EquipmentID = mr.EquipmentID\n    GROUP BY d.DepartmentID, d.DepartmentName\n)\nSELECT DepartmentID, DepartmentName,\n       TotalEquipment,\n       WorkingEquipment,\n       MaintenanceCount,\n       ROUND(WorkingEquipment * 1.0 / NULLIF(TotalEquipment, 0) * 100, 2) AS EfficiencyPercentage,\n       ROUND(MaintenanceCount * 1.0 / NULLIF(TotalEquipment, 0), 2) AS MaintenanceRatio\nFROM EquipmentEfficiency\nORDER BY EfficiencyPercentage DESC\nLIMIT 13",
            "gpt-4o_response": "WITH EquipmentStats AS (\n    SELECT \n        e.DepartmentID,\n        COUNT(e.EquipmentID) AS TotalEquipment,\n        SUM(CASE WHEN e.Status = 'В работе' THEN 1 ELSE 0 END) AS WorkingEquipment\n    FROM Equipment e\n    GROUP BY e.DepartmentID\n),\nMaintenanceStats AS (\n    SELECT \n        e.DepartmentID,\n        COUNT(m.MaintenanceID) AS TotalRepairs\n    FROM Equipment e\n    LEFT JOIN MaintenanceRecords m ON e.EquipmentID = m.EquipmentID\n    GROUP BY e.DepartmentID\n)\nSELECT \n    d.DepartmentID,\n    d.DepartmentName,\n    COALESCE(es.TotalEquipment, 0) AS TotalEquipment,\n    COALESCE(es.WorkingEquipment, 0) AS WorkingEquipment,\n    COALESCE(ms.TotalRepairs, 0) AS TotalRepairs,\n    ROUND(COALESCE(es.WorkingEquipment, 0) / NULLIF(es.TotalEquipment, 0) * 100, 2) AS EfficiencyPercentage,\n    ROUND(COALESCE(ms.TotalRepairs, 0) / NULLIF(es.TotalEquipment, 0), 2) AS MaintenanceCoefficient\nFROM Departments d\nLEFT JOIN EquipmentStats es ON d.DepartmentID = es.DepartmentID\nLEFT JOIN MaintenanceStats ms ON d.DepartmentID = ms.DepartmentID\nORDER BY EfficiencyPercentage DESC\nLIMIT 13;",
            "gpt-4o_response_ru": "SELECT \n    d.DepartmentID,\n    d.DepartmentName,\n    COUNT(e.EquipmentID) AS TotalEquipment,\n    SUM(CASE WHEN e.Status = 'В работе' THEN 1 ELSE 0 END) AS WorkingEquipment,\n    COUNT(m.MaintenanceID) AS TotalRepairs,\n    ROUND(SUM(CASE WHEN e.Status = 'В работе' THEN 1 ELSE 0 END) / COUNT(e.EquipmentID) * 100, 2) AS EfficiencyPercentage,\n    ROUND(COUNT(m.MaintenanceID) / COUNT(e.EquipmentID) * 100, 2) AS MaintenanceCoefficient\nFROM \n    Departments d\nLEFT JOIN \n    Equipment e ON d.DepartmentID = e.DepartmentID\nLEFT JOIN \n    MaintenanceRecords m ON e.EquipmentID = m.EquipmentID\nGROUP BY \n    d.DepartmentID, d.DepartmentName\nORDER BY \n    EfficiencyPercentage DESC\nLIMIT 13;",
            "google/gemini-2.0-flash-001_response": "WITH DepartmentEquipment AS (\n    SELECT\n        d.DepartmentID,\n        d.DepartmentName,\n        COUNT(e.EquipmentID) AS TotalEquipment,\n        SUM(CASE WHEN e.Status = 'В работе' THEN 1 ELSE 0 END) AS WorkingEquipment\n    FROM\n        Departments d\n    LEFT JOIN\n        Equipment e ON d.DepartmentID = e.DepartmentID\n    GROUP BY\n        d.DepartmentID, d.DepartmentName\n),\nDepartmentMaintenance AS (\n    SELECT\n        d.DepartmentID,\n        COUNT(mr.MaintenanceID) AS TotalMaintenances\n    FROM\n        Departments d\n    LEFT JOIN\n        Equipment e ON d.DepartmentID = e.DepartmentID\n    LEFT JOIN\n        MaintenanceRecords mr ON e.EquipmentID = mr.EquipmentID\n    GROUP BY\n        d.DepartmentID\n)\nSELECT\n    de.DepartmentID,\n    de.DepartmentName,\n    de.TotalEquipment,\n    de.WorkingEquipment,\n    COALESCE(dm.TotalMaintenances, 0) AS TotalMaintenances,\n    CASE\n        WHEN de.TotalEquipment > 0 THEN ROUND((de.WorkingEquipment * 100.0 / de.TotalEquipment), 2)\n        ELSE 0\n    END AS EfficiencyPercentage,\n    CASE\n        WHEN de.TotalEquipment > 0 THEN ROUND((COALESCE(dm.TotalMaintenances, 0) * 1.0 / de.TotalEquipment), 2)\n        ELSE 0\n    END AS MaintenanceCoefficient\nFROM\n    DepartmentEquipment de\nLEFT JOIN\n    DepartmentMaintenance dm ON de.DepartmentID = dm.DepartmentID\nORDER BY\n    EfficiencyPercentage DESC\nLIMIT 13;",
            "google/gemini-2.0-flash-001_response_ru": "WITH DepartmentEquipmentStats AS (\n    SELECT\n        d.DepartmentID,\n        d.DepartmentName,\n        COUNT(e.EquipmentID) AS TotalEquipment,\n        SUM(CASE WHEN e.Status = 'В работе' THEN 1 ELSE 0 END) AS WorkingEquipment,\n        SUM(CASE WHEN e.Status = 'В ремонте' THEN 1 ELSE 0 END) AS RepairingEquipment\n    FROM Departments d\n    LEFT JOIN Equipment e ON d.DepartmentID = e.DepartmentID\n    GROUP BY d.DepartmentID, d.DepartmentName\n),\nMaintenanceCounts AS (\n    SELECT\n        e.DepartmentID,\n        COUNT(mr.MaintenanceID) AS TotalMaintenances\n    FROM Equipment e\n    LEFT JOIN MaintenanceRecords mr ON e.EquipmentID = mr.EquipmentID\n    GROUP BY e.DepartmentID\n)\nSELECT\n    des.DepartmentID,\n    des.DepartmentName,\n    des.TotalEquipment,\n    des.WorkingEquipment,\n    COALESCE(mc.TotalMaintenances, 0) AS TotalMaintenances,\n    CASE\n        WHEN des.TotalEquipment > 0 THEN ROUND((des.WorkingEquipment * 100.0 / des.TotalEquipment), 2)\n        ELSE 0\n    END AS EfficiencyPercentage,\n    CASE\n        WHEN des.TotalEquipment > 0 THEN ROUND((COALESCE(mc.TotalMaintenances, 0) * 1.0 / des.TotalEquipment), 2)\n        ELSE 0\n    END AS MaintenanceCoefficient\nFROM DepartmentEquipmentStats des\nLEFT JOIN MaintenanceCounts mc ON des.DepartmentID = mc.DepartmentID\nORDER BY EfficiencyPercentage DESC\nLIMIT 13;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH DepartmentEquipmentStats AS (\n    SELECT \n        d.DepartmentID,\n        d.DepartmentName,\n        COUNT(e.EquipmentID) as TotalEquipment,\n        SUM(CASE WHEN e.Status = 'В работе' THEN 1 ELSE 0 END) as WorkingEquipment,\n        SUM(CASE WHEN mr.MaintenanceID IS NOT NULL THEN 1 ELSE 0 END) as MaintenanceCount\n    FROM Departments d\n    LEFT JOIN Equipment e ON d.DepartmentID = e.DepartmentID\n    LEFT JOIN MaintenanceRecords mr ON e.EquipmentID = mr.EquipmentID\n    GROUP BY d.DepartmentID, d.DepartmentName\n)\nSELECT \n    DepartmentID,\n    DepartmentName,\n    TotalEquipment,\n    WorkingEquipment,\n    MaintenanceCount,\n    ROUND((WorkingEquipment / TotalEquipment) * 100, 2) as EfficiencyPercentage,\n    ROUND((MaintenanceCount / TotalEquipment) * 100, 2) as MaintenanceCoefficient\nFROM DepartmentEquipmentStats\nORDER BY EfficiencyPercentage DESC\nLIMIT 13;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH DepartmentEquipmentStats AS (\n    SELECT \n        d.DepartmentID,\n        d.DepartmentName,\n        COUNT(e.EquipmentID) as TotalEquipment,\n        SUM(CASE WHEN e.Status = 'В работе' THEN 1 ELSE 0 END) as WorkingEquipment,\n        SUM(CASE WHEN e.Status = 'В ремонте' THEN 1 ELSE 0 END) as Repairs,\n        ROUND(SUM(CASE WHEN e.Status = 'В работе' THEN 1.0 ELSE 0 END) / COUNT(e.EquipmentID) * 100, 2) as EfficiencyPercentage,\n        ROUND(SUM(CASE WHEN e.Status = 'В ремонте' THEN 1.0 ELSE 0 END) / COUNT(e.EquipmentID) * 100, 2) as MaintenanceCoefficient\n    FROM Departments d\n    JOIN Equipment e ON d.DepartmentID = e.DepartmentID\n    GROUP BY d.DepartmentID, d.DepartmentName\n)\nSELECT \n    DepartmentID,\n    DepartmentName,\n    TotalEquipment,\n    WorkingEquipment,\n    Repairs,\n    EfficiencyPercentage,\n    MaintenanceCoefficient\nFROM DepartmentEquipmentStats\nORDER BY EfficiencyPercentage DESC\nLIMIT 13;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    d.DepartmentID,\n    d.DepartmentName,\n    COUNT(eq.EquipmentID) AS TotalEquipment,\n    SUM(CASE WHEN eq.Status = 'В работе' THEN 1 ELSE 0 END) AS WorkingEquipment,\n    COUNT(mr.MaintenanceID) AS MaintenanceCount,\n    ROUND(SUM(CASE WHEN eq.Status = 'В работе' THEN 1 ELSE 0 END) * 100.0 / COUNT(eq.EquipmentID), 2) AS EfficiencyPercentage,\n    ROUND(COUNT(mr.MaintenanceID) * 1.0 / COUNT(eq.EquipmentID), 2) AS MaintenanceCoefficient\nFROM Departments d\nLEFT JOIN Equipment eq ON d.DepartmentID = eq.DepartmentID\nLEFT JOIN MaintenanceRecords mr ON eq.EquipmentID = mr.EquipmentID\nGROUP BY d.DepartmentID, d.DepartmentName\nORDER BY EfficiencyPercentage DESC\nLIMIT 13;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    d.DepartmentID,\n    d.DepartmentName,\n    COUNT(eq.EquipmentID) AS TotalEquipment,\n    SUM(CASE WHEN eq.Status = 'В работе' THEN 1 ELSE 0 END) AS WorkingEquipment,\n    COUNT(mr.MaintenanceID) AS MaintenanceCount,\n    ROUND(SUM(CASE WHEN eq.Status = 'В работе' THEN 1 ELSE 0 END) * 100.0 / COUNT(eq.EquipmentID), 2) AS EfficiencyPercentage,\n    ROUND(COUNT(mr.MaintenanceID) * 1.0 / COUNT(eq.EquipmentID), 2) AS MaintenanceCoefficient\nFROM Departments d\nLEFT JOIN Equipment eq ON d.DepartmentID = eq.DepartmentID\nLEFT JOIN MaintenanceRecords mr ON eq.EquipmentID = mr.EquipmentID\nGROUP BY d.DepartmentID, d.DepartmentName\nORDER BY EfficiencyPercentage DESC\nLIMIT 13;",
            "gigachat_response": "WITH EquipmentStatus AS (\n    SELECT \n        e.DepartmentID,\n        COUNT(*) AS TotalEquipment,\n        SUM(CASE WHEN e.Status = 'В работе' THEN 1 ELSE 0 END) AS WorkingEquipment,\n        COUNT(m.MaintenanceID) AS RepairCount\n    FROM Equipment e\n    LEFT JOIN MaintenanceRecords m ON e.EquipmentID = m.EquipmentID\n    GROUP BY e.DepartmentID\n)\nSELECT \n    d.DepartmentID,\n    d.DepartmentName,\n    es.TotalEquipment,\n    es.WorkingEquipment,\n    es.RepairCount,\n    ROUND((es.WorkingEquipment / es.TotalEquipment * 100), 2) AS EffectivenessPercentage,\n    ROUND(es.RepairCount / es.TotalEquipment, 2) AS ServiceFactor\nFROM Departments d\nJOIN EquipmentStatus es ON d.DepartmentID = es.DepartmentID\nORDER BY EffectivenessPercentage DESC\nLIMIT 13;",
            "gigachat_response_ru": "SELECT \n    d.DepartmentID,\n    d.DepartmentName,\n    COUNT(eq.EquipmentID) AS TotalEquipment,\n    SUM(CASE WHEN eq.Status = 'В работе' THEN 1 ELSE 0 END) AS WorkingEquipment,\n    COUNT(mr.MaintenanceID) AS TotalMaintenance,\n    ROUND((SUM(CASE WHEN eq.Status = 'В работе' THEN 1 ELSE 0 END) / COUNT(eq.EquipmentID)) * 100, 2) AS EffectivenessPercentage,\n    ROUND(COUNT(mr.MaintenanceID) / COUNT(eq.EquipmentID), 2) AS ServiceFactor\nFROM Departments d\nLEFT JOIN Equipment eq ON d.DepartmentID = eq.DepartmentID\nLEFT JOIN MaintenanceRecords mr ON eq.EquipmentID = mr.EquipmentID\nGROUP BY d.DepartmentID, d.DepartmentName\nHAVING COUNT(eq.EquipmentID) > 0\nORDER BY EffectivenessPercentage DESC\nLIMIT 13;"
        },
        {
            "question": "Выявить проекты с наибольшим количеством задач высокого приоритета и их связь с качественным обеспечением и сертификацией инженеров. В ответе будут показаны: идентификатор проекта, название проекта, статус проекта, количество задач высокого приоритета, количество проверок качества, количество сертификатов инженеров и комплексный показатель сложности проекта (рассчитывается как взвешенная сумма: 50% от количества задач высокого приоритета, 30% от количества проверок качества и 20% от количества сертификатов). Учитываются только проекты с хотя бы одной задачей высокого приоритета. Результаты отсортированы по комплексному показателю сложности, показаны топ-11 записей.",
            "sql_query": "WITH ProjectTaskAnalysis AS (\n    SELECT p.ProjectID, p.ProjectName, p.Status AS ProjectStatus,\n           COUNT(t.TaskID) AS HighPriorityTaskCount,\n           COUNT(DISTINCT qa.QAID) AS QualityAssuranceCount,\n           COUNT(DISTINCT c.CertificationID) AS EngineerCertificationCount\n    FROM Projects p\n    LEFT JOIN Tasks t ON p.ProjectID = t.ProjectID\n    LEFT JOIN QualityAssurance qa ON p.ProjectID = qa.ProjectID\n    LEFT JOIN Engineers e ON p.ProjectManagerID = e.EngineerID\n    LEFT JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE t.Priority = 'Высокий'\n    GROUP BY p.ProjectID, p.ProjectName, p.Status\n)\nSELECT ProjectID, ProjectName, ProjectStatus,\n       HighPriorityTaskCount,\n       QualityAssuranceCount,\n       EngineerCertificationCount,\n       ROUND((HighPriorityTaskCount * 0.5 + QualityAssuranceCount * 0.3 + EngineerCertificationCount * 0.2), 2) AS ProjectComplexityScore\nFROM ProjectTaskAnalysis\nWHERE HighPriorityTaskCount > 0\nORDER BY ProjectComplexityScore DESC\nLIMIT 11",
            "gpt-4o_response": "WITH ProjectHighPriorityTasks AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        p.Status AS ProjectStatus,\n        COUNT(t.TaskID) AS HighPriorityTaskCount\n    FROM Projects p\n    JOIN Tasks t ON p.ProjectID = t.ProjectID\n    WHERE t.Priority = 'Высокий'\n    GROUP BY p.ProjectID, p.ProjectName, p.Status\n),\nProjectQualityAssurance AS (\n    SELECT \n        p.ProjectID,\n        COUNT(qa.QAID) AS QualityAssuranceCount\n    FROM Projects p\n    LEFT JOIN QualityAssurance qa ON p.ProjectID = qa.ProjectID\n    GROUP BY p.ProjectID\n),\nProjectEngineerCertifications AS (\n    SELECT \n        p.ProjectID,\n        COUNT(DISTINCT c.CertificationID) AS EngineerCertificationCount\n    FROM Projects p\n    LEFT JOIN Engineers e ON p.ProjectManagerID = e.EngineerID\n    LEFT JOIN Certifications c ON e.EngineerID = c.EngineerID\n    GROUP BY p.ProjectID\n),\nProjectComplexity AS (\n    SELECT \n        pht.ProjectID,\n        pht.ProjectName,\n        pht.ProjectStatus,\n        pht.HighPriorityTaskCount,\n        pqa.QualityAssuranceCount,\n        pec.EngineerCertificationCount,\n        (0.5 * pht.HighPriorityTaskCount + 0.3 * pqa.QualityAssuranceCount + 0.2 * pec.EngineerCertificationCount) AS ComplexityScore\n    FROM ProjectHighPriorityTasks pht\n    LEFT JOIN ProjectQualityAssurance pqa ON pht.ProjectID = pqa.ProjectID\n    LEFT JOIN ProjectEngineerCertifications pec ON pht.ProjectID = pec.ProjectID\n)\nSELECT \n    ProjectID,\n    ProjectName,\n    ProjectStatus,\n    HighPriorityTaskCount,\n    QualityAssuranceCount,\n    EngineerCertificationCount,\n    ROUND(ComplexityScore, 2) AS ComplexityScore\nFROM ProjectComplexity\nWHERE HighPriorityTaskCount > 0\nORDER BY ComplexityScore DESC\nLIMIT 11;",
            "gpt-4o_response_ru": "WITH HighPriorityTasks AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        p.Status AS ProjectStatus,\n        COUNT(t.TaskID) AS HighPriorityTaskCount\n    FROM Projects p\n    JOIN Tasks t ON p.ProjectID = t.ProjectID\n    WHERE t.Priority = 'Высокий'\n    GROUP BY p.ProjectID, p.ProjectName, p.Status\n),\nQualityAssuranceCounts AS (\n    SELECT \n        p.ProjectID,\n        COUNT(qa.QAID) AS QualityAssuranceCount\n    FROM Projects p\n    LEFT JOIN QualityAssurance qa ON p.ProjectID = qa.ProjectID\n    GROUP BY p.ProjectID\n),\nEngineerCertifications AS (\n    SELECT \n        p.ProjectID,\n        COUNT(DISTINCT c.CertificationID) AS CertificationCount\n    FROM Projects p\n    LEFT JOIN Engineers e ON p.ProjectManagerID = e.EngineerID\n    LEFT JOIN Certifications c ON e.EngineerID = c.EngineerID\n    GROUP BY p.ProjectID\n),\nProjectComplexity AS (\n    SELECT \n        hpt.ProjectID,\n        hpt.ProjectName,\n        hpt.ProjectStatus,\n        hpt.HighPriorityTaskCount,\n        COALESCE(qac.QualityAssuranceCount, 0) AS QualityAssuranceCount,\n        COALESCE(ec.CertificationCount, 0) AS CertificationCount,\n        (0.5 * hpt.HighPriorityTaskCount + 0.3 * COALESCE(qac.QualityAssuranceCount, 0) + 0.2 * COALESCE(ec.CertificationCount, 0)) AS ComplexityScore\n    FROM HighPriorityTasks hpt\n    LEFT JOIN QualityAssuranceCounts qac ON hpt.ProjectID = qac.ProjectID\n    LEFT JOIN EngineerCertifications ec ON hpt.ProjectID = ec.ProjectID\n)\nSELECT \n    ProjectID,\n    ProjectName,\n    ProjectStatus,\n    HighPriorityTaskCount,\n    QualityAssuranceCount,\n    CertificationCount,\n    ROUND(ComplexityScore, 2) AS ComplexityScore\nFROM ProjectComplexity\nORDER BY ComplexityScore DESC\nLIMIT 11;",
            "google/gemini-2.0-flash-001_response": "WITH ProjectHighPriorityTasks AS (\n    SELECT\n        ProjectID,\n        COUNT(*) AS HighPriorityTaskCount\n    FROM Tasks\n    WHERE Priority = 'Высокий'\n    GROUP BY ProjectID\n    HAVING COUNT(*) > 0\n),\nProjectQA AS (\n    SELECT\n        ProjectID,\n        COUNT(*) AS QACount\n    FROM QualityAssurance\n    GROUP BY ProjectID\n),\nEngineerCerts AS (\n    SELECT\n        e.EngineerID,\n        COUNT(c.CertificationID) AS CertificationCount\n    FROM Engineers e\n    LEFT JOIN Certifications c ON e.EngineerID = c.EngineerID\n    GROUP BY e.EngineerID\n),\nProjectEngineers AS (\n    SELECT\n        p.ProjectID,\n        SUM(ec.CertificationCount) AS TotalCertificationCount\n    FROM Projects p\n    JOIN Tasks t ON p.ProjectID = t.ProjectID\n    JOIN Engineers e ON t.AssignedTo = e.EngineerID\n    LEFT JOIN EngineerCerts ec ON e.EngineerID = ec.EngineerID\n    GROUP BY p.ProjectID\n)\nSELECT\n    p.ProjectID,\n    p.ProjectName,\n    p.Status,\n    COALESCE(hp.HighPriorityTaskCount, 0) AS HighPriorityTaskCount,\n    COALESCE(qa.QACount, 0) AS QACount,\n    COALESCE(pe.TotalCertificationCount, 0) AS TotalCertificationCount,\n    (0.5 * COALESCE(hp.HighPriorityTaskCount, 0) + 0.3 * COALESCE(qa.QACount, 0) + 0.2 * COALESCE(pe.TotalCertificationCount, 0)) AS ComplexityScore\nFROM Projects p\nLEFT JOIN ProjectHighPriorityTasks hp ON p.ProjectID = hp.ProjectID\nLEFT JOIN ProjectQA qa ON p.ProjectID = qa.ProjectID\nLEFT JOIN ProjectEngineers pe ON p.ProjectID = pe.ProjectID\nWHERE hp.ProjectID IS NOT NULL\nORDER BY ComplexityScore DESC\nLIMIT 11;",
            "google/gemini-2.0-flash-001_response_ru": "WITH ProjectHighPriorityTasks AS (\n    SELECT\n        p.ProjectID,\n        p.ProjectName,\n        p.Status AS ProjectStatus,\n        COUNT(CASE WHEN t.Priority = 'Высокий' THEN t.TaskID END) AS HighPriorityTaskCount\n    FROM Projects p\n    LEFT JOIN Tasks t ON p.ProjectID = t.ProjectID\n    GROUP BY p.ProjectID, p.ProjectName, p.Status\n    HAVING COUNT(CASE WHEN t.Priority = 'Высокий' THEN t.TaskID END) > 0\n),\nProjectQualityAssurance AS (\n    SELECT\n        ProjectID,\n        COUNT(*) AS QualityAssuranceCount\n    FROM QualityAssurance\n    GROUP BY ProjectID\n),\nEngineerCertificationCounts AS (\n    SELECT\n        e.EngineerID,\n        COUNT(c.CertificationID) AS CertificationCount\n    FROM Engineers e\n    LEFT JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE c.Status = 'Действителен'\n    GROUP BY e.EngineerID\n),\nProjectEngineerCertifications AS (\n    SELECT\n        p.ProjectID,\n        SUM(ecc.CertificationCount) AS TotalCertificationCount\n    FROM Projects p\n    LEFT JOIN Tasks t ON p.ProjectID = t.ProjectID\n    LEFT JOIN EngineerCertificationCounts ecc ON t.AssignedTo = ecc.EngineerID\n    GROUP BY p.ProjectID\n)\nSELECT\n    phpt.ProjectID,\n    phpt.ProjectName,\n    phpt.ProjectStatus,\n    phpt.HighPriorityTaskCount,\n    COALESCE(pqa.QualityAssuranceCount, 0) AS QualityAssuranceCount,\n    COALESCE(pec.TotalCertificationCount, 0) AS EngineerCertificationCount,\n    (0.5 * phpt.HighPriorityTaskCount + 0.3 * COALESCE(pqa.QualityAssuranceCount, 0) + 0.2 * COALESCE(pec.TotalCertificationCount, 0)) AS ComplexityScore\nFROM ProjectHighPriorityTasks phpt\nLEFT JOIN ProjectQualityAssurance pqa ON phpt.ProjectID = pqa.ProjectID\nLEFT JOIN ProjectEngineerCertifications pec ON phpt.ProjectID = pec.ProjectID\nORDER BY ComplexityScore DESC\nLIMIT 11;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH ProjectTaskStats AS (SELECT p.ProjectID, p.ProjectName, p.Status, COUNT(t.TaskID) as HighPriorityTasks FROM Projects p JOIN Tasks t ON p.ProjectID = t.ProjectID WHERE t.Priority = 'Высокий' GROUP BY p.ProjectID, p.ProjectName, p.Status HAVING COUNT(t.TaskID) > 0), QualityAssuranceStats AS (SELECT qa.ProjectID, COUNT(qa.QAID) as QualityChecks FROM QualityAssurance qa GROUP BY qa.ProjectID), EngineerCertificationStats AS (SELECT c.ProjectID, COUNT(c.CertificationID) as EngineerCertifications FROM Certifications c JOIN Engineers e ON c.EngineerID = e.EngineerID JOIN Projects p ON e.EngineerID = p.ProjectManagerID GROUP BY c.ProjectID) SELECT pts.ProjectID, pts.ProjectName, pts.Status, pts.HighPriorityTasks, qa.QualityChecks, ec.EngineerCertifications, 0.5 * pts.HighPriorityTasks + 0.3 * qa.QualityChecks + 0.2 * ec.EngineerCertifications as ComplexityIndex FROM ProjectTaskStats pts JOIN QualityAssuranceStats qa ON pts.ProjectID = qa.ProjectID JOIN EngineerCertificationStats ec ON pts.ProjectID = ec.ProjectID ORDER BY ComplexityIndex DESC LIMIT 11;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH ProjectHighPriorityTasks AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        p.Status,\n        COUNT(t.TaskID) as HighPriorityTaskCount\n    FROM Projects p\n    JOIN Tasks t ON p.ProjectID = t.ProjectID\n    WHERE t.Priority = 'Высокий'\n    GROUP BY p.ProjectID, p.ProjectName, p.Status\n),\nProjectQualityAssurance AS (\n    SELECT \n        p.ProjectID,\n        COUNT(qa.QAID) as QualityAssuranceCount\n    FROM Projects p\n    JOIN QualityAssurance qa ON p.ProjectID = qa.ProjectID\n    GROUP BY p.ProjectID\n),\nProjectEngineerCertifications AS (\n    SELECT \n        p.ProjectID,\n        COUNT(c.CertificationID) as EngineerCertificationCount\n    FROM Projects p\n    JOIN Tasks t ON p.ProjectID = t.ProjectID\n    JOIN Engineers e ON t.AssignedTo = e.EngineerID\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    GROUP BY p.ProjectID\n)\nSELECT \n    pht.ProjectID,\n    pht.ProjectName,\n    pht.Status,\n    pht.HighPriorityTaskCount,\n    pq.QualityAssuranceCount,\n    pec.EngineerCertificationCount,\n    0.5 * pht.HighPriorityTaskCount + 0.3 * pq.QualityAssuranceCount + 0.2 * pec.EngineerCertificationCount as ComplexityIndex\nFROM ProjectHighPriorityTasks pht\nJOIN ProjectQualityAssurance pq ON pht.ProjectID = pq.ProjectID\nJOIN ProjectEngineerCertifications pec ON pht.ProjectID = pec.ProjectID\nWHERE pht.HighPriorityTaskCount > 0\nORDER BY ComplexityIndex DESC\nLIMIT 11;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH HighPriorityTasks AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        p.Status,\n        COUNT(t.TaskID) AS HighPriorityTaskCount\n    FROM Projects p\n    JOIN Tasks t ON p.ProjectID = t.ProjectID\n    WHERE t.Priority = 'Высокий'\n    GROUP BY p.ProjectID, p.ProjectName, p.Status\n),\nQualityChecks AS (\n    SELECT \n        p.ProjectID,\n        COUNT(qa.QAID) AS QualityCheckCount\n    FROM Projects p\n    LEFT JOIN QualityAssurance qa ON p.ProjectID = qa.ProjectID\n    GROUP BY p.ProjectID\n),\nEngineerCertifications AS (\n    SELECT \n        p.ProjectID,\n        COUNT(DISTINCT c.CertificationID) AS CertificationCount\n    FROM Projects p\n    JOIN Engineers e ON p.ProjectManagerID = e.EngineerID\n    LEFT JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE c.Status = 'Действителен'\n    GROUP BY p.ProjectID\n)\nSELECT \n    hpt.ProjectID,\n    hpt.ProjectName,\n    hpt.Status,\n    hpt.HighPriorityTaskCount,\n    COALESCE(qc.QualityCheckCount, 0) AS QualityCheckCount,\n    COALESCE(ec.CertificationCount, 0) AS CertificationCount,\n    ROUND((0.5 * hpt.HighPriorityTaskCount) + (0.3 * COALESCE(qc.QualityCheckCount, 0)) + (0.2 * COALESCE(ec.CertificationCount, 0)), 2) AS ComplexityScore\nFROM HighPriorityTasks hpt\nLEFT JOIN QualityChecks qc ON hpt.ProjectID = qc.ProjectID\nLEFT JOIN EngineerCertifications ec ON hpt.ProjectID = ec.ProjectID\nORDER BY ComplexityScore DESC\nLIMIT 11;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    p.ProjectID,\n    p.ProjectName,\n    p.Status AS ProjectStatus,\n    COUNT(DISTINCT t.TaskID) AS HighPriorityTasksCount,\n    COUNT(DISTINCT qa.QAID) AS QualityChecksCount,\n    COUNT(DISTINCT c.CertificationID) AS EngineerCertificationsCount,\n    ROUND((0.5 * COUNT(DISTINCT t.TaskID)) + (0.3 * COUNT(DISTINCT qa.QAID)) + (0.2 * COUNT(DISTINCT c.CertificationID)), 2) AS ComplexityScore\nFROM Projects p\nJOIN Tasks t ON p.ProjectID = t.ProjectID AND t.Priority = 'Высокий'\nLEFT JOIN QualityAssurance qa ON p.ProjectID = qa.ProjectID\nLEFT JOIN Engineers e ON p.ProjectManagerID = e.EngineerID\nLEFT JOIN Certifications c ON e.EngineerID = c.EngineerID AND c.Status = 'Действителен'\nGROUP BY p.ProjectID, p.ProjectName, p.Status\nHAVING HighPriorityTasksCount > 0\nORDER BY ComplexityScore DESC\nLIMIT 11;",
            "gigachat_response": "WITH HighPriorityTasks AS (\n    SELECT \n        ProjectID, \n        COUNT(TaskID) AS HighPriorityTaskCount\n    FROM Tasks\n    WHERE Priority = 'Высокий'\n    GROUP BY ProjectID\n),\nQualityChecks AS (\n    SELECT \n        ProjectID, \n        COUNT(QAID) AS QualityCheckCount\n    FROM QualityAssurance\n    GROUP BY ProjectID\n),\nEngineerCertificates AS (\n    SELECT \n        ProjectID, \n        COUNT(DISTINCT CertificationID) AS CertificateCount\n    FROM Projects p\n    INNER JOIN Engineers e ON p.ProjectManagerID = e.EngineerID\n    INNER JOIN Certifications c ON e.EngineerID = c.EngineerID\n    GROUP BY ProjectID\n),\nComplexityScore AS (\n    SELECT \n        hpt.ProjectID,\n        p.ProjectName,\n        p.Status,\n        hpt.HighPriorityTaskCount,\n        qc.QualityCheckCount,\n        ec.CertificateCount,\n        (hpt.HighPriorityTaskCount * 0.5 + qc.QualityCheckCount * 0.3 + ec.CertificateCount * 0.2) AS ComplexityScore\n    FROM HighPriorityTasks hpt\n    INNER JOIN Projects p ON hpt.ProjectID = p.ProjectID\n    LEFT JOIN QualityChecks qc ON hpt.ProjectID = qc.ProjectID\n    LEFT JOIN EngineerCertificates ec ON hpt.ProjectID = ec.ProjectID\n    ORDER BY ComplexityScore DESC\n    LIMIT 11\n)\nSELECT *\nFROM ComplexityScore;",
            "gigachat_response_ru": "WITH HighPriorityTasks AS (\n    SELECT \n        ProjectID, \n        COUNT(TaskID) AS HighPriorityTaskCount\n    FROM Tasks\n    WHERE Priority = 'Высокий'\n    GROUP BY ProjectID\n),\nQualityChecks AS (\n    SELECT \n        ProjectID, \n        COUNT(QAID) AS QualityCheckCount\n    FROM QualityAssurance\n    GROUP BY ProjectID\n),\nEngineerCertificates AS (\n    SELECT \n        ProjectID, \n        COUNT(DISTINCT CertificationID) AS CertificateCount\n    FROM Projects p\n    INNER JOIN Engineers e ON p.ProjectManagerID = e.EngineerID\n    INNER JOIN Certifications c ON e.EngineerID = c.EngineerID\n    GROUP BY ProjectID\n),\nComplexityScore AS (\n    SELECT \n        hpt.ProjectID,\n        p.ProjectName,\n        p.Status,\n        hpt.HighPriorityTaskCount,\n        qc.QualityCheckCount,\n        ec.CertificateCount,\n        (hpt.HighPriorityTaskCount * 0.5 + qc.QualityCheckCount * 0.3 + ec.CertificateCount * 0.2) AS ComplexityScore\n    FROM HighPriorityTasks hpt\n    INNER JOIN Projects p ON hpt.ProjectID = p.ProjectID\n    LEFT JOIN QualityChecks qc ON hpt.ProjectID = qc.ProjectID\n    LEFT JOIN EngineerCertificates ec ON hpt.ProjectID = ec.ProjectID\n)\nSELECT *\nFROM ComplexityScore\nWHERE HighPriorityTaskCount > 0\nORDER BY ComplexityScore DESC\nLIMIT 11;"
        }
    ]
}