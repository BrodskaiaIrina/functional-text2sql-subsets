{
    "queries": [
        {
            "question": "Какие компании в Москве имеют общий бюджет проектов более 100 миллионов?",
            "sql_query": "SELECT c.CompanyName, SUM(p.Budget) AS TotalBudget FROM Clients c JOIN Projects p ON c.ClientID = p.ClientID WHERE c.City = 'Москва' GROUP BY c.CompanyName HAVING SUM(p.Budget) > 100000000;",
            "gpt-4o_response": "SELECT c.CompanyName, SUM(p.Budget) AS TotalBudget\nFROM Clients c\nJOIN Projects p ON c.ClientID = p.ClientID\nWHERE c.City = 'Москва'\nGROUP BY c.CompanyName\nHAVING SUM(p.Budget) > 100000000;",
            "gpt-4o_response_ru": "SELECT c.CompanyName, SUM(p.Budget) AS TotalBudget\nFROM Clients c\nJOIN Projects p ON c.ClientID = p.ClientID\nWHERE c.City = 'Москва'\nGROUP BY c.CompanyName\nHAVING SUM(p.Budget) > 100000000;",
            "google/gemini-2.0-flash-001_response": "SELECT \n    c.CompanyName\nFROM \n    Clients c\nJOIN \n    Projects p ON c.ClientID = p.ClientID\nWHERE \n    c.City = 'Москва'\nGROUP BY \n    c.CompanyName\nHAVING \n    SUM(p.Budget) > 100000000;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT \n    c.CompanyName,\n    SUM(p.Budget) AS TotalBudget\nFROM Clients c\nJOIN Projects p ON c.ClientID = p.ClientID\nWHERE c.City = 'Москва'\nGROUP BY c.CompanyName\nHAVING SUM(p.Budget) > 100000000;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT c.CompanyName, SUM(p.Budget) AS TotalBudget \nFROM Clients c \nJOIN Projects p ON c.ClientID = p.ClientID \nWHERE c.City = 'Москва' \nGROUP BY c.CompanyName \nHAVING SUM(p.Budget) > 100000000;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT c.CompanyName, SUM(p.Budget) AS TotalBudget \nFROM Clients c \nJOIN Projects p ON c.ClientID = p.ClientID \nWHERE c.City = 'Москва' \nGROUP BY c.CompanyName \nHAVING SUM(p.Budget) > 100000000;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT c.CompanyName, SUM(p.Budget) AS TotalBudget \nFROM Clients c \nJOIN Projects p ON c.ClientID = p.ClientID \nWHERE c.City = 'Москва' \nGROUP BY c.CompanyName \nHAVING SUM(p.Budget) > 100000000;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT c.CompanyName, SUM(p.Budget) AS TotalBudget\nFROM Clients c\nJOIN Projects p ON c.ClientID = p.ClientID\nWHERE c.City = 'Москва'\nGROUP BY c.CompanyName\nHAVING SUM(p.Budget) > 100000000;",
            "gigachat_response": "SELECT c.CompanyName, SUM(p.Budget) AS TotalBudget\nFROM Clients c\nJOIN Projects p ON c.ClientID = p.ClientID\nWHERE c.City = 'Москва'\nGROUP BY c.CompanyName\nHAVING SUM(p.Budget) > 100000000;",
            "gigachat_response_ru": "SELECT c.CompanyName, SUM(p.Budget) AS TotalBudget\nFROM Clients c\nJOIN Projects p ON c.ClientID = p.ClientID\nWHERE c.City = 'Москва'\nGROUP BY c.CompanyName\nHAVING SUM(p.Budget) > 100000000;"
        },
        {
            "question": "Какие поставщики из России поставляют более пяти видов материалов?",
            "sql_query": "SELECT s.SupplierName, COUNT(m.MaterialID) AS MaterialCount FROM Suppliers s JOIN Materials m ON s.SupplierID = m.SupplierID WHERE s.Country = 'Россия' GROUP BY s.SupplierName HAVING COUNT(m.MaterialID) > 5;",
            "gpt-4o_response": "SELECT s.SupplierName, COUNT(m.MaterialID) AS MaterialCount\nFROM Suppliers s\nJOIN Materials m ON s.SupplierID = m.SupplierID\nWHERE s.Country = 'Россия'\nGROUP BY s.SupplierName\nHAVING COUNT(m.MaterialID) > 5;",
            "gpt-4o_response_ru": "SELECT s.SupplierName, COUNT(m.MaterialID) AS MaterialCount\nFROM Suppliers s\nJOIN Materials m ON s.SupplierID = m.SupplierID\nWHERE s.Country = 'Россия'\nGROUP BY s.SupplierName\nHAVING COUNT(m.MaterialID) > 5;",
            "google/gemini-2.0-flash-001_response": "SELECT s.SupplierName\nFROM Suppliers s\nJOIN Materials m ON s.SupplierID = m.SupplierID\nWHERE s.Country = 'Россия'\nGROUP BY s.SupplierName\nHAVING COUNT(DISTINCT m.MaterialID) > 5;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT s.SupplierName\nFROM Suppliers s\nJOIN Materials m ON s.SupplierID = m.SupplierID\nWHERE s.Country = 'Россия'\nGROUP BY s.SupplierName\nHAVING COUNT(DISTINCT m.MaterialID) > 5;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT s.SupplierName, COUNT(DISTINCT m.MaterialName) AS MaterialCount \nFROM Suppliers s \nJOIN Materials m ON s.SupplierID = m.SupplierID \nWHERE s.Country = 'Россия' \nGROUP BY s.SupplierName \nHAVING COUNT(DISTINCT m.MaterialName) > 5;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT s.SupplierName, COUNT(DISTINCT m.MaterialID) AS MaterialCount \nFROM Suppliers s \nJOIN Materials m ON s.SupplierID = m.SupplierID \nWHERE s.Country = 'Россия' \nGROUP BY s.SupplierName \nHAVING COUNT(DISTINCT m.MaterialID) > 5;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT s.SupplierName, COUNT(m.MaterialID) AS MaterialCount \nFROM Suppliers s \nJOIN Materials m ON s.SupplierID = m.SupplierID \nWHERE s.Country = 'Россия' \nGROUP BY s.SupplierName \nHAVING COUNT(m.MaterialID) > 5;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT s.SupplierName, COUNT(m.MaterialID) AS MaterialCount \nFROM Suppliers s \nJOIN Materials m ON s.SupplierID = m.SupplierID \nWHERE s.Country = 'Россия' \nGROUP BY s.SupplierName \nHAVING COUNT(m.MaterialID) > 5;",
            "gigachat_response": "SELECT s.SupplierName, COUNT(DISTINCT m.MaterialID) AS MaterialCount\nFROM Suppliers s\nJOIN Materials m ON s.SupplierID = m.SupplierID\nWHERE s.Country = 'Россия'\nGROUP BY s.SupplierName\nHAVING COUNT(DISTINCT m.MaterialID) > 5;",
            "gigachat_response_ru": "SELECT s.SupplierName\nFROM Suppliers s\nJOIN Materials m ON s.SupplierID = m.SupplierID\nWHERE s.Country = 'Россия'\nGROUP BY s.SupplierName\nHAVING COUNT(DISTINCT m.MaterialID) > 5;"
        },
        {
            "question": "Какие архитекторы получили более одной награды после 2010 года?",
            "sql_query": "SELECT a.FirstName, a.LastName, COUNT(aw.AwardID) AS AwardCount FROM Architects a JOIN Awards aw ON a.ArchitectID = aw.ArchitectID WHERE aw.Year > 2010 GROUP BY a.FirstName, a.LastName HAVING COUNT(aw.AwardID) > 1;",
            "gpt-4o_response": "SELECT a.FirstName, a.LastName, COUNT(aw.AwardID) AS AwardCount\nFROM Architects a\nJOIN Awards aw ON a.ArchitectID = aw.ArchitectID\nWHERE aw.Year > 2010\nGROUP BY a.FirstName, a.LastName\nHAVING COUNT(aw.AwardID) > 1;",
            "gpt-4o_response_ru": "SELECT a.FirstName, a.LastName, COUNT(aw.AwardID) AS AwardCount\nFROM Architects a\nJOIN Awards aw ON a.ArchitectID = aw.ArchitectID\nWHERE aw.Year > 2010\nGROUP BY a.FirstName, a.LastName\nHAVING COUNT(aw.AwardID) > 1;",
            "google/gemini-2.0-flash-001_response": "SELECT a.FirstName, a.LastName, COUNT(aw.AwardID) AS AwardCount\nFROM Architects a\nJOIN Awards aw ON a.ArchitectID = aw.ArchitectID\nWHERE aw.Year > 2010\nGROUP BY a.ArchitectID, a.FirstName, a.LastName\nHAVING COUNT(aw.AwardID) > 1;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT a.FirstName, a.LastName, COUNT(aw.AwardID) AS AwardCount\nFROM Architects a\nJOIN Awards aw ON a.ArchitectID = aw.ArchitectID\nWHERE aw.Year > 2010\nGROUP BY a.ArchitectID, a.FirstName, a.LastName\nHAVING COUNT(aw.AwardID) > 1;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT a.FirstName, a.LastName, COUNT(DISTINCT aw.AwardID) AS AwardCount\nFROM Architects a\nJOIN Awards aw ON a.ArchitectID = aw.ArchitectID\nWHERE aw.Year > 2010\nGROUP BY a.FirstName, a.LastName\nHAVING COUNT(DISTINCT aw.AwardID) > 1;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT a.FirstName, a.LastName, COUNT(DISTINCT aw.AwardID) AS AwardCount\nFROM Architects a\nJOIN Awards aw ON a.ArchitectID = aw.ArchitectID\nWHERE aw.Year > 2010\nGROUP BY a.FirstName, a.LastName\nHAVING COUNT(DISTINCT aw.AwardID) > 1\nORDER BY AwardCount DESC;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT a.FirstName, a.LastName, COUNT(aw.AwardID) AS AwardCount \nFROM Architects a \nJOIN Awards aw ON a.ArchitectID = aw.ArchitectID \nWHERE aw.Year > 2010 \nGROUP BY a.FirstName, a.LastName \nHAVING COUNT(aw.AwardID) > 1;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT a.FirstName, a.LastName, COUNT(aw.AwardID) AS AwardCount\nFROM Architects a\nJOIN Awards aw ON a.ArchitectID = aw.ArchitectID\nWHERE aw.Year > 2010\nGROUP BY a.FirstName, a.LastName\nHAVING COUNT(aw.AwardID) > 1;",
            "gigachat_response": "SELECT a.FirstName, a.LastName, COUNT(*) AS NumberOfAwards\nFROM Architects a\nJOIN Awards aw ON a.ArchitectID = aw.ArchitectID\nWHERE aw.Year > 2010\nGROUP BY a.FirstName, a.LastName\nHAVING COUNT(*) > 1;",
            "gigachat_response_ru": "SELECT a.FirstName, a.LastName\nFROM Architects a\nJOIN Awards aw ON a.ArchitectID = aw.ArchitectID\nWHERE aw.Year > 2010\nGROUP BY a.FirstName, a.LastName\nHAVING COUNT(*) > 1;"
        },
        {
            "question": "Какие проекты имеют более двух успешных инспекций?",
            "sql_query": "SELECT p.ProjectName, COUNT(i.InspectionID) AS InspectionCount FROM Projects p JOIN Inspections i ON p.ProjectID = i.ProjectID WHERE i.Result = 'Успешно' GROUP BY p.ProjectName HAVING COUNT(i.InspectionID) > 2;",
            "gpt-4o_response": "SELECT p.ProjectName, COUNT(i.InspectionID) AS SuccessfulInspections\nFROM Projects p\nJOIN Inspections i ON p.ProjectID = i.ProjectID\nWHERE i.Result = 'Успешно'\nGROUP BY p.ProjectName\nHAVING COUNT(i.InspectionID) > 2;",
            "gpt-4o_response_ru": "SELECT p.ProjectName, COUNT(i.InspectionID) AS SuccessfulInspections\nFROM Projects p\nJOIN Inspections i ON p.ProjectID = i.ProjectID\nWHERE i.Result = 'Успешно'\nGROUP BY p.ProjectID, p.ProjectName\nHAVING COUNT(i.InspectionID) > 2;",
            "google/gemini-2.0-flash-001_response": "SELECT p.ProjectName\nFROM Projects p\nJOIN (\n    SELECT ProjectID, COUNT(*) AS SuccessfulInspectionsCount\n    FROM Inspections\n    WHERE Result = 'Успешно'\n    GROUP BY ProjectID\n    HAVING COUNT(*) > 2\n) AS SuccessfulProjectInspections ON p.ProjectID = SuccessfulProjectInspections.ProjectID;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT \n    p.ProjectName,\n    COUNT(i.InspectionID) AS SuccessfulInspectionsCount\nFROM Projects p\nJOIN Inspections i ON p.ProjectID = i.ProjectID\nWHERE i.Result = 'Успешно'\nGROUP BY p.ProjectName\nHAVING COUNT(i.InspectionID) > 2;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT p.ProjectName, COUNT(i.InspectionID) AS SuccessfulInspections \nFROM Projects p \nJOIN Inspections i ON p.ProjectID = i.ProjectID \nWHERE i.Result = 'Успешно' \nGROUP BY p.ProjectName \nHAVING COUNT(i.InspectionID) > 2;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT p.ProjectName, COUNT(i.InspectionID) AS SuccessfulInspections\nFROM Projects p\nJOIN Inspections i ON p.ProjectID = i.ProjectID\nWHERE i.Result = 'Успешно'\nGROUP BY p.ProjectName\nHAVING COUNT(i.InspectionID) > 2;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT p.ProjectID, p.ProjectName, COUNT(i.InspectionID) AS SuccessfulInspectionsCount \nFROM Projects p \nJOIN Inspections i ON p.ProjectID = i.ProjectID \nWHERE i.Result = 'Успешно' \nGROUP BY p.ProjectID, p.ProjectName \nHAVING COUNT(i.InspectionID) > 2;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT p.ProjectID, p.ProjectName, COUNT(i.InspectionID) AS SuccessfulInspectionsCount\nFROM Projects p\nJOIN Inspections i ON p.ProjectID = i.ProjectID\nWHERE i.Result = 'Успешно'\nGROUP BY p.ProjectID, p.ProjectName\nHAVING COUNT(i.InspectionID) > 2;",
            "gigachat_response": "SELECT p.ProjectName, COUNT(i.InspectionID) AS NumberOfSuccessfulInspections\nFROM Projects p\nJOIN Inspections i ON p.ProjectID = i.ProjectID\nWHERE i.Result = 'Успешно'\nGROUP BY p.ProjectName\nHAVING COUNT(i.InspectionID) > 2;",
            "gigachat_response_ru": "SELECT p.ProjectName, COUNT(i.InspectionID) AS SuccessfulInspectionCount\nFROM Projects p\nJOIN Inspections i ON p.ProjectID = i.ProjectID\nWHERE i.Result = 'Успешно'\nGROUP BY p.ProjectName\nHAVING COUNT(i.InspectionID) > 2;"
        },
        {
            "question": "Какие дизайны в стиле модерн имеют более одного здания?",
            "sql_query": "SELECT d.DesignName, COUNT(b.BuildingID) AS BuildingCount FROM Designs d JOIN Projects p ON d.ProjectID = p.ProjectID JOIN Buildings b ON p.ProjectID = b.ProjectID WHERE d.Style = 'Модерн' GROUP BY d.DesignName HAVING COUNT(b.BuildingID) > 1;",
            "gpt-4o_response": "SELECT d.DesignName, COUNT(b.BuildingID) AS BuildingCount\nFROM Designs d\nJOIN Projects p ON d.ProjectID = p.ProjectID\nJOIN Buildings b ON p.ProjectID = b.ProjectID\nWHERE d.Style = 'Модерн'\nGROUP BY d.DesignName\nHAVING COUNT(b.BuildingID) > 1;",
            "gpt-4o_response_ru": "SELECT d.DesignName, COUNT(b.BuildingID) AS BuildingCount\nFROM Designs d\nJOIN Projects p ON d.ProjectID = p.ProjectID\nJOIN Buildings b ON p.ProjectID = b.ProjectID\nWHERE d.Style = 'Модерн'\nGROUP BY d.DesignName\nHAVING COUNT(b.BuildingID) > 1;",
            "google/gemini-2.0-flash-001_response": "SELECT d.DesignName, COUNT(b.BuildingID) AS BuildingCount\nFROM Designs d\nJOIN Projects p ON d.ProjectID = p.ProjectID\nJOIN Buildings b ON p.ProjectID = b.ProjectID\nWHERE d.Style = 'Модерн'\nGROUP BY d.DesignName\nHAVING COUNT(b.BuildingID) > 1;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT d.DesignName\nFROM Designs d\nJOIN Projects p ON d.ProjectID = p.ProjectID\nWHERE d.Style = 'Модерн'\nGROUP BY d.DesignName\nHAVING COUNT(DISTINCT p.ProjectID) > 1;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT d.DesignName, d.DesignDate, a.FirstName, a.LastName, COUNT(b.BuildingID) AS BuildingCount \nFROM Designs d \nJOIN Architects a ON d.ArchitectID = a.ArchitectID \nJOIN Projects p ON d.ProjectID = p.ProjectID \nJOIN Buildings b ON p.ProjectID = b.ProjectID \nWHERE d.Style = 'Современный' \nGROUP BY d.DesignName, d.DesignDate, a.FirstName, a.LastName \nHAVING COUNT(b.BuildingID) > 1;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT d.DesignName, COUNT(b.BuildingID) AS BuildingCount \nFROM Designs d \nJOIN Projects p ON d.ProjectID = p.ProjectID \nJOIN Buildings b ON p.ProjectID = b.ProjectID \nWHERE d.Style = 'Модерн' \nGROUP BY d.DesignName \nHAVING COUNT(b.BuildingID) > 1;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT d.DesignName, d.Style, COUNT(b.BuildingID) AS BuildingCount \nFROM Designs d \nJOIN Projects p ON d.ProjectID = p.ProjectID \nJOIN Buildings b ON p.ProjectID = b.ProjectID \nWHERE d.Style = 'Модерн' \nGROUP BY d.DesignName, d.Style \nHAVING COUNT(b.BuildingID) > 1;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT d.DesignName, COUNT(b.BuildingID) AS BuildingCount \nFROM Designs d \nJOIN Projects p ON d.ProjectID = p.ProjectID \nJOIN Buildings b ON p.ProjectID = b.ProjectID \nWHERE d.Style = 'Модерн' \nGROUP BY d.DesignName \nHAVING COUNT(b.BuildingID) > 1;",
            "gigachat_response": "SELECT d.DesignName, COUNT(b.BuildingID) AS BuildingCount\nFROM Designs d\nJOIN Projects p ON d.ProjectID = p.ProjectID\nJOIN Buildings b ON p.ProjectID = b.ProjectID\nWHERE d.Style = 'Модерн'\nGROUP BY d.DesignName\nHAVING COUNT(b.BuildingID) > 1;",
            "gigachat_response_ru": "SELECT d.DesignName, COUNT(b.BuildingID) AS BuildingCount\nFROM Designs d\nJOIN Projects p ON d.ProjectID = p.ProjectID\nJOIN Buildings b ON p.ProjectID = b.ProjectID\nWHERE d.Style = 'Модерн'\nGROUP BY d.DesignName\nHAVING COUNT(b.BuildingID) > 1;"
        },
        {
            "question": "Какие компании имеют средний расход более 10 тысяч?",
            "sql_query": "SELECT c.CompanyName, AVG(f.Amount) AS AvgTransaction FROM Clients c JOIN Projects p ON c.ClientID = p.ClientID JOIN Finances f ON p.ProjectID = f.ProjectID WHERE f.Amount < 0 GROUP BY c.CompanyName HAVING AVG(f.Amount) < -10000;",
            "gpt-4o_response": "SELECT c.CompanyName, AVG(f.Amount) AS AverageExpense\nFROM Clients c\nJOIN Projects p ON c.ClientID = p.ClientID\nJOIN Finances f ON p.ProjectID = f.ProjectID\nWHERE f.TransactionType LIKE 'Расходы%'\nGROUP BY c.CompanyName\nHAVING AVG(f.Amount) > 10000;",
            "gpt-4o_response_ru": "SELECT c.CompanyName, AVG(f.Amount) AS AverageExpense\nFROM Clients c\nJOIN Contracts ct ON c.ClientID = ct.ClientID\nJOIN Finances f ON ct.ProjectID = f.ProjectID\nWHERE f.Amount < 0\nGROUP BY c.CompanyName\nHAVING AVG(f.Amount) < -10000;",
            "google/gemini-2.0-flash-001_response": "SELECT c.CompanyName\nFROM Clients c\nJOIN Contracts ct ON c.ClientID = ct.ClientID\nGROUP BY c.CompanyName\nHAVING AVG(ct.Amount) > 10000;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT \n    s.SupplierName\nFROM \n    Suppliers s\nJOIN \n    Materials m ON s.SupplierID = m.SupplierID\nGROUP BY \n    s.SupplierName\nHAVING \n    AVG(m.CostPerUnit * (1 - (CAST(m.QuantityInStock AS DECIMAL(10,2))/(m.QuantityInStock + 1)))) > 10000;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT c.CompanyName, AVG(f.Amount) AS Средний_расход \nFROM Clients c \nJOIN Contracts con ON c.ClientID = con.ClientID \nJOIN Finances f ON con.ProjectID = f.ProjectID \nWHERE f.TransactionType = 'Расходы' \nGROUP BY c.CompanyName \nHAVING AVG(f.Amount) > 10000;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT c.CompanyName, AVG(f.Amount) AS Средний_расход \nFROM Clients c \nJOIN Contracts con ON c.ClientID = con.ClientID \nJOIN Finances f ON con.ProjectID = f.ProjectID \nWHERE f.TransactionType = 'Расходы' \nGROUP BY c.CompanyName \nHAVING AVG(f.Amount) > 10000;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT c.CompanyName, AVG(f.Amount) AS AverageExpense \nFROM Clients c \nJOIN Projects p ON c.ClientID = p.ClientID \nJOIN Finances f ON p.ProjectID = f.ProjectID \nWHERE f.TransactionType = 'Расходы на материалы' \nGROUP BY c.CompanyName \nHAVING AVG(f.Amount) > 10000;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT c.CompanyName, AVG(f.Amount) AS AvgExpense\nFROM Clients c\nJOIN Projects p ON c.ClientID = p.ClientID\nJOIN Finances f ON p.ProjectID = f.ProjectID\nWHERE f.TransactionType = 'Расходы на материалы' OR f.TransactionType = 'Расходы на маркетинг'\nGROUP BY c.CompanyName\nHAVING AVG(f.Amount) > 10000;",
            "gigachat_response": "SELECT c.CompanyName, AVG(f.Amount) AS AverageExpense\nFROM Clients c\nJOIN Projects p ON c.ClientID = p.ClientID\nJOIN Finances f ON p.ProjectID = f.ProjectID\nGROUP BY c.CompanyName\nHAVING AVG(f.Amount) > 10000\nORDER BY AverageExpense DESC;",
            "gigachat_response_ru": "SELECT c.CompanyName, AVG(f.Amount) AS AverageExpense\nFROM Clients c\nJOIN Projects p ON c.ClientID = p.ClientID\nJOIN Finances f ON p.ProjectID = f.ProjectID\nGROUP BY c.CompanyName\nHAVING AVG(f.Amount) > 10000\nORDER BY AverageExpense DESC;"
        },
        {
            "question": "Какие материалы в Москве имеют общий запас более 1000 единиц?",
            "sql_query": "SELECT m.MaterialName, SUM(m.QuantityInStock) AS TotalStock FROM Materials m JOIN Suppliers s ON m.SupplierID = s.SupplierID WHERE s.City = 'Москва' GROUP BY m.MaterialName HAVING SUM(m.QuantityInStock) > 1000;",
            "gpt-4o_response": "SELECT m.MaterialName, SUM(m.QuantityInStock) AS TotalStock\nFROM Materials m\nJOIN Suppliers s ON m.SupplierID = s.SupplierID\nWHERE s.City = 'Москва'\nGROUP BY m.MaterialName\nHAVING SUM(m.QuantityInStock) > 1000;",
            "gpt-4o_response_ru": "SELECT m.MaterialName, SUM(m.QuantityInStock) AS TotalStock\nFROM Materials m\nJOIN Suppliers s ON m.SupplierID = s.SupplierID\nWHERE s.City = 'Москва'\nGROUP BY m.MaterialName\nHAVING SUM(m.QuantityInStock) > 1000;",
            "google/gemini-2.0-flash-001_response": "SELECT m.MaterialName\nFROM Materials m\nJOIN Suppliers s ON m.SupplierID = s.SupplierID\nWHERE s.City = 'Москва'\nGROUP BY m.MaterialName\nHAVING SUM(m.QuantityInStock) > 1000;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT m.MaterialName\nFROM Materials m\nJOIN Suppliers s ON m.SupplierID = s.SupplierID\nWHERE s.City = 'Москва'\nGROUP BY m.MaterialName\nHAVING SUM(m.QuantityInStock) > 1000;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT m.MaterialName, s.SupplierName, m.QuantityInStock, m.CostPerUnit, m.Unit \nFROM Materials m \nJOIN Suppliers s ON m.SupplierID = s.SupplierID \nWHERE m.QuantityInStock > 1000 AND s.City = 'Москва';",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT m.MaterialName, s.City, m.QuantityInStock, m.CostPerUnit \nFROM Materials m \nJOIN Suppliers s ON m.SupplierID = s.SupplierID \nWHERE s.City = 'Москва' AND m.QuantityInStock > 1000;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT m.MaterialName, m.QuantityInStock, s.SupplierName, s.City \nFROM Materials m \nJOIN Suppliers s ON m.SupplierID = s.SupplierID \nWHERE s.City = 'Москва' AND m.QuantityInStock > 1000;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT m.MaterialName, m.QuantityInStock, s.SupplierName, s.City \nFROM Materials m \nJOIN Suppliers s ON m.SupplierID = s.SupplierID \nWHERE s.City = 'Москва' AND m.QuantityInStock > 1000;",
            "gigachat_response": "SELECT m.MaterialName, SUM(m.QuantityInStock) AS TotalQuantity\nFROM Materials m\nJOIN Buildings b ON m.MaterialID = b.Material -- Assuming material ID is linked directly to buildings\nWHERE b.Location = 'Москва'\nGROUP BY m.MaterialName\nHAVING SUM(m.QuantityInStock) > 1000;",
            "gigachat_response_ru": "SELECT m.MaterialName, SUM(m.QuantityInStock) AS TotalQuantity\nFROM Materials m\nJOIN Suppliers s ON m.SupplierID = s.SupplierID\nWHERE s.City = 'Москва'\nGROUP BY m.MaterialName\nHAVING SUM(m.QuantityInStock) > 1000;"
        },
        {
            "question": "Какие проекты имеют более одного действующего разрешения?",
            "sql_query": "SELECT p.ProjectName, COUNT(pe.PermitID) AS PermitCount FROM Projects p JOIN Permits pe ON p.ProjectID = pe.ProjectID WHERE pe.Status = 'Действующий' GROUP BY p.ProjectName HAVING COUNT(pe.PermitID) > 1;",
            "gpt-4o_response": "SELECT p.ProjectName, COUNT(pe.PermitID) AS ActivePermitsCount\nFROM Projects p\nJOIN Permits pe ON p.ProjectID = pe.ProjectID\nWHERE pe.Status = 'Действующий'\nGROUP BY p.ProjectName\nHAVING COUNT(pe.PermitID) > 1;",
            "gpt-4o_response_ru": "SELECT \n    p.ProjectID, \n    p.ProjectName, \n    COUNT(pe.PermitID) AS ActivePermitsCount\nFROM \n    Projects p\nJOIN \n    Permits pe ON p.ProjectID = pe.ProjectID\nWHERE \n    pe.Status = 'Действующий'\nGROUP BY \n    p.ProjectID, \n    p.ProjectName\nHAVING \n    COUNT(pe.PermitID) > 1;",
            "google/gemini-2.0-flash-001_response": "SELECT \n    p.ProjectName\nFROM \n    Projects p\nJOIN \n    Permits pe ON p.ProjectID = pe.ProjectID\nWHERE \n    pe.Status = 'Действующий'\nGROUP BY \n    p.ProjectName\nHAVING \n    COUNT(DISTINCT pe.PermitID) > 1;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    p.ProjectName\nFROM\n    Projects p\nJOIN\n    Permits pe ON p.ProjectID = pe.ProjectID\nWHERE\n    pe.Status = 'Действующий'\nGROUP BY\n    p.ProjectName\nHAVING\n    COUNT(DISTINCT pe.PermitID) > 1;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT p.ProjectID, p.ProjectName, COUNT(pr.PermitID) AS PermitCount \nFROM Projects p \nJOIN Permits pr ON p.ProjectID = pr.ProjectID \nWHERE pr.Status = 'Действующий' \nGROUP BY p.ProjectID, p.ProjectName \nHAVING COUNT(pr.PermitID) > 1;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT p.ProjectName, COUNT(DISTINCT pe.PermitID) AS PermitCount \nFROM Projects p \nJOIN Permits pe ON p.ProjectID = pe.ProjectID \nWHERE pe.Status = 'Действующий' \nGROUP BY p.ProjectName \nHAVING COUNT(DISTINCT pe.PermitID) > 1;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT p.ProjectID, p.ProjectName, COUNT(per.PermitID) AS ActivePermitsCount \nFROM Projects p \nJOIN Permits per ON p.ProjectID = per.ProjectID \nWHERE per.Status = 'Действующий' \nGROUP BY p.ProjectID, p.ProjectName \nHAVING COUNT(per.PermitID) > 1;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT p.ProjectID, p.ProjectName, COUNT(per.PermitID) AS ActivePermitsCount\nFROM Projects p\nJOIN Permits per ON p.ProjectID = per.ProjectID\nWHERE per.Status = 'Действующий'\nGROUP BY p.ProjectID, p.ProjectName\nHAVING COUNT(per.PermitID) > 1;",
            "gigachat_response": "SELECT p.ProjectName, COUNT(pe.PermitID) AS ActivePermitsCount\nFROM Projects p\nJOIN Permits pe ON p.ProjectID = pe.ProjectID\nWHERE pe.Status = 'Действующий'\nGROUP BY p.ProjectName\nHAVING COUNT(pe.PermitID) > 1;",
            "gigachat_response_ru": "SELECT p.ProjectName, COUNT(pe.PermitID) AS ActivePermitsCount\nFROM Projects p\nJOIN Permits pe ON p.ProjectID = pe.ProjectID\nWHERE pe.Status = 'Действующий'\nGROUP BY p.ProjectName\nHAVING COUNT(pe.PermitID) > 1;"
        },
        {
            "question": "Какие поставщики имеют более двух единиц оборудования в эксплуатации?",
            "sql_query": "SELECT s.SupplierName, COUNT(e.EquipmentID) AS EquipmentCount FROM Suppliers s JOIN Equipment e ON s.SupplierID = e.SupplierID WHERE e.Status = 'В эксплуатации' GROUP BY s.SupplierName HAVING COUNT(e.EquipmentID) > 2;",
            "gpt-4o_response": "SELECT s.SupplierName, COUNT(e.EquipmentID) AS EquipmentCount \nFROM Suppliers s \nJOIN Equipment e ON s.SupplierID = e.SupplierID \nWHERE e.Status = 'в эксплуатации' \nGROUP BY s.SupplierName \nHAVING COUNT(e.EquipmentID) > 2;",
            "gpt-4o_response_ru": "SELECT s.SupplierName, COUNT(e.EquipmentID) AS EquipmentCount\nFROM Suppliers s\nJOIN Equipment e ON s.SupplierID = e.SupplierID\nWHERE e.Status = 'в эксплуатации'\nGROUP BY s.SupplierName\nHAVING COUNT(e.EquipmentID) > 2;",
            "google/gemini-2.0-flash-001_response": "SELECT s.SupplierName, COUNT(e.EquipmentID) AS EquipmentCount FROM Suppliers s JOIN Equipment e ON s.SupplierID = e.SupplierID WHERE e.Status = 'в эксплуатации' GROUP BY s.SupplierName HAVING COUNT(e.EquipmentID) > 2;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT s.SupplierName\nFROM Suppliers s\nJOIN Equipment e ON s.SupplierID = e.SupplierID\nWHERE e.Status = 'в эксплуатации'\nGROUP BY s.SupplierName\nHAVING COUNT(e.EquipmentID) > 2;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT s.SupplierName, COUNT(e.EquipmentID) AS EquipmentCount \nFROM Suppliers s \nJOIN Equipment e ON s.SupplierID = e.SupplierID \nWHERE e.Status = 'в эксплуатации' \nGROUP BY s.SupplierName \nHAVING COUNT(e.EquipmentID) > 2;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT s.SupplierName, COUNT(e.EquipmentID) AS EquipmentCount \nFROM Suppliers s \nJOIN Equipment e ON s.SupplierID = e.SupplierID \nWHERE e.Status = 'в эксплуатации' \nGROUP BY s.SupplierName \nHAVING COUNT(e.EquipmentID) > 2;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT s.SupplierName, COUNT(e.EquipmentID) AS EquipmentCount \nFROM Suppliers s \nJOIN Equipment e ON s.SupplierID = e.SupplierID \nWHERE e.Status = 'в эксплуатации' \nGROUP BY s.SupplierName \nHAVING COUNT(e.EquipmentID) > 2;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT s.SupplierName, COUNT(e.EquipmentID) AS EquipmentCount \nFROM Suppliers s \nJOIN Equipment e ON s.SupplierID = e.SupplierID \nWHERE e.Status = 'в эксплуатации' \nGROUP BY s.SupplierName \nHAVING COUNT(e.EquipmentID) > 2;",
            "gigachat_response": "SELECT s.SupplierName, COUNT(e.EquipmentID) AS EquipmentCount\nFROM Suppliers s\nJOIN Equipment e ON s.SupplierID = e.SupplierID\nWHERE e.Status = 'В эксплуатации'\nGROUP BY s.SupplierName\nHAVING COUNT(e.EquipmentID) > 2;",
            "gigachat_response_ru": "SELECT s.SupplierName, COUNT(e.EquipmentID) AS EquipmentCount\nFROM Suppliers s\nJOIN Equipment e ON s.SupplierID = e.SupplierID\nWHERE e.Status = 'В эксплуатации'\nGROUP BY s.SupplierName\nHAVING COUNT(e.EquipmentID) > 2;"
        },
        {
            "question": "Какие проекты имеют общий доход более 150 тысяч?",
            "sql_query": "SELECT p.ProjectName, SUM(f.Amount) AS TotalIncome FROM Projects p JOIN Finances f ON p.ProjectID = f.ProjectID WHERE f.Amount > 0 GROUP BY p.ProjectName HAVING SUM(f.Amount) > 150000;",
            "gpt-4o_response": "SELECT p.ProjectName, SUM(f.Amount) AS TotalIncome\nFROM Projects p\nJOIN Finances f ON p.ProjectID = f.ProjectID\nWHERE f.TransactionType = 'Операционный доход'\nGROUP BY p.ProjectName\nHAVING SUM(f.Amount) > 150000;",
            "gpt-4o_response_ru": "SELECT \n    p.ProjectName, \n    SUM(f.Amount) AS TotalIncome\nFROM \n    Projects p\nJOIN \n    Finances f ON p.ProjectID = f.ProjectID\nWHERE \n    f.TransactionType = 'Операционный доход'\nGROUP BY \n    p.ProjectName\nHAVING \n    SUM(f.Amount) > 150000;",
            "google/gemini-2.0-flash-001_response": "SELECT p.ProjectName\nFROM Projects p\nJOIN Finances f ON p.ProjectID = f.ProjectID\nGROUP BY p.ProjectName\nHAVING SUM(CASE WHEN f.TransactionType = 'Операционный доход' OR f.TransactionType = 'Разовоe поступление' THEN f.Amount ELSE 0 END) > 150000;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT \n    p.ProjectName,\n    SUM(f.Amount) AS TotalIncome\nFROM \n    Projects p\nJOIN \n    Finances f ON p.ProjectID = f.ProjectID\nWHERE \n    f.TransactionType = 'Операционный доход'\nGROUP BY \n    p.ProjectName\nHAVING \n    SUM(f.Amount) > 150000;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT p.ProjectID, p.ProjectName, SUM(f.Amount) AS TotalIncome\nFROM Projects p\nJOIN Finances f ON p.ProjectID = f.ProjectID\nWHERE f.TransactionType = 'Операционный доход'\nGROUP BY p.ProjectID, p.ProjectName\nHAVING SUM(f.Amount) > 150000;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT p.ProjectName, SUM(f.Amount) AS TotalIncome\nFROM Projects p\nJOIN Finances f ON p.ProjectID = f.ProjectID\nWHERE f.TransactionType = 'Операционный доход' OR f.TransactionType = 'Разовоe поступление'\nGROUP BY p.ProjectName\nHAVING SUM(f.Amount) > 150000;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT p.ProjectID, p.ProjectName, SUM(f.Amount) AS TotalIncome\nFROM Projects p\nJOIN Finances f ON p.ProjectID = f.ProjectID\nWHERE f.TransactionType = 'Операционный доход' OR f.TransactionType = 'Разовоe поступление'\nGROUP BY p.ProjectID, p.ProjectName\nHAVING SUM(f.Amount) > 150000;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT p.ProjectID, p.ProjectName, SUM(f.Amount) AS TotalIncome\nFROM Projects p\nJOIN Finances f ON p.ProjectID = f.ProjectID\nWHERE f.TransactionType = 'Операционный доход' OR f.TransactionType = 'Разовоe поступление'\nGROUP BY p.ProjectID, p.ProjectName\nHAVING SUM(f.Amount) > 150000;",
            "gigachat_response": "SELECT p.ProjectName, SUM(f.Amount) AS TotalIncome\nFROM Projects p\nJOIN Finances f ON p.ProjectID = f.ProjectID\nGROUP BY p.ProjectName\nHAVING TotalIncome > 150000;",
            "gigachat_response_ru": "SELECT f.ProjectID, p.ProjectName, SUM(f.Amount) AS TotalIncome\nFROM Finances f\nJOIN Projects p ON f.ProjectID = p.ProjectID\nGROUP BY f.ProjectID, p.ProjectName\nHAVING SUM(f.Amount) > 150000;"
        },
        {
            "question": "Какие компании имеют более одного контракта по консультированию?",
            "sql_query": "SELECT c.CompanyName, COUNT(co.ContractID) AS ContractCount FROM Clients c JOIN Contracts co ON c.ClientID = co.ClientID WHERE co.Terms LIKE '%Консультирование%' GROUP BY c.CompanyName HAVING COUNT(co.ContractID) > 1;",
            "gpt-4o_response": "SELECT c.CompanyName, COUNT(ct.ContractID) AS ContractCount\nFROM Clients c\nJOIN Contracts ct ON c.ClientID = ct.ClientID\nWHERE ct.Terms LIKE '%консультационные услуги%'\nGROUP BY c.CompanyName\nHAVING COUNT(ct.ContractID) > 1;",
            "gpt-4o_response_ru": "SELECT c.CompanyName, COUNT(ct.ContractID) AS ContractCount\nFROM Clients c\nJOIN Contracts ct ON c.ClientID = ct.ClientID\nWHERE ct.Terms LIKE '%консультационные услуги%'\nGROUP BY c.CompanyName\nHAVING COUNT(ct.ContractID) > 1;",
            "google/gemini-2.0-flash-001_response": "SELECT c.CompanyName\nFROM Clients c\nJOIN Contracts con ON c.ClientID = con.ClientID\nWHERE con.Terms LIKE '%Консультационные услуги%'\nGROUP BY c.CompanyName\nHAVING COUNT(con.ContractID) > 1;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT c.CompanyName\nFROM Clients c\nJOIN Contracts ct ON c.ClientID = ct.ClientID\nWHERE ct.Terms = 'Консультационные услуги'\nGROUP BY c.CompanyName\nHAVING COUNT(ct.ContractID) > 1;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT c.ClientName, COUNT(con.ContractID) AS ContractCount \nFROM Contracts con \nJOIN Clients c ON con.ClientID = c.ClientID \nWHERE con.Terms = 'Консультационные услуги' \nGROUP BY c.ClientName \nHAVING COUNT(con.ContractID) > 1;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT c.CompanyName, COUNT(con.ContractID) AS ContractCount\nFROM Clients c\nJOIN Contracts con ON c.ClientID = con.ClientID\nWHERE con.Terms = 'Консультационные услуги'\nGROUP BY c.CompanyName\nHAVING COUNT(con.ContractID) > 1;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT c.CompanyName, COUNT(ct.ContractID) AS ContractCount \nFROM Clients c \nJOIN Contracts ct ON c.ClientID = ct.ClientID \nWHERE ct.Terms LIKE '%консультирование%' \nGROUP BY c.CompanyName \nHAVING COUNT(ct.ContractID) > 1;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT c.CompanyName, COUNT(ct.ContractID) AS ContractCount \nFROM Clients c \nJOIN Contracts ct ON c.ClientID = ct.ClientID \nWHERE ct.Terms LIKE '%Консультационные услуги%' \nGROUP BY c.CompanyName \nHAVING COUNT(ct.ContractID) > 1;",
            "gigachat_response": "SELECT c.CompanyName, COUNT(co.ContractID) AS ContractCount\nFROM Clients c\nJOIN Contracts co ON c.ClientID = co.ClientID\nWHERE co.Terms LIKE '%консультирован%'\nGROUP BY c.CompanyName\nHAVING COUNT(co.ContractID) > 1;",
            "gigachat_response_ru": "SELECT c.CompanyName, COUNT(co.ContractID) AS ContractCount\nFROM Clients c\nJOIN Contracts co ON c.ClientID = co.ClientID\nWHERE co.Terms LIKE '%консультирован%'\nGROUP BY c.CompanyName\nHAVING COUNT(co.ContractID) > 1;"
        },
        {
            "question": "Какие архитекторы в стиле минимализм имеют более одного дизайна?",
            "sql_query": "SELECT a.FirstName, a.LastName, COUNT(d.DesignID) AS DesignCount FROM Architects a JOIN Designs d ON a.ArchitectID = d.ArchitectID WHERE d.Style = 'Минимализм' GROUP BY a.FirstName, a.LastName HAVING COUNT(d.DesignID) > 1;",
            "gpt-4o_response": "SELECT a.FirstName, a.LastName, COUNT(d.DesignID) AS DesignCount\nFROM Architects a\nJOIN Designs d ON a.ArchitectID = d.ArchitectID\nWHERE d.Style = 'Минимализм'\nGROUP BY a.FirstName, a.LastName\nHAVING COUNT(d.DesignID) > 1;",
            "gpt-4o_response_ru": "SELECT a.FirstName, a.LastName, COUNT(d.DesignID) AS DesignCount\nFROM Architects a\nJOIN Designs d ON a.ArchitectID = d.ArchitectID\nWHERE d.Style = 'Минимализм'\nGROUP BY a.FirstName, a.LastName\nHAVING COUNT(d.DesignID) > 1;",
            "google/gemini-2.0-flash-001_response": "SELECT a.FirstName, a.LastName\nFROM Architects a\nJOIN Designs d ON a.ArchitectID = d.ArchitectID\nWHERE d.Style = 'Минимализм'\nGROUP BY a.ArchitectID, a.FirstName, a.LastName\nHAVING COUNT(d.DesignID) > 1;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT a.FirstName, a.LastName\nFROM Architects a\nJOIN Designs d ON a.ArchitectID = d.ArchitectID\nWHERE d.Style = 'Минимализм'\nGROUP BY a.ArchitectID, a.FirstName, a.LastName\nHAVING COUNT(d.DesignID) > 1;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT a.FirstName, a.LastName, COUNT(d.DesignID) AS DesignCount \nFROM Architects a \nJOIN Designs d ON a.ArchitectID = d.ArchitectID \nWHERE d.Style = 'Минимализм' \nGROUP BY a.FirstName, a.LastName \nHAVING COUNT(d.DesignID) > 1;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT a.FirstName, a.LastName, COUNT(d.DesignID) AS DesignCount\nFROM Architects a\nJOIN Designs d ON a.ArchitectID = d.ArchitectID\nWHERE d.Style = 'Минимализм'\nGROUP BY a.FirstName, a.LastName\nHAVING COUNT(d.DesignID) > 1;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT a.FirstName, a.LastName, COUNT(d.DesignID) AS DesignCount \nFROM Architects a \nJOIN Designs d ON a.ArchitectID = d.ArchitectID \nWHERE d.Style = 'Минимализм' \nGROUP BY a.FirstName, a.LastName \nHAVING COUNT(d.DesignID) > 1;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT a.FirstName, a.LastName, COUNT(d.DesignID) AS DesignCount \nFROM Architects a \nJOIN Designs d ON a.ArchitectID = d.ArchitectID \nWHERE d.Style = 'Минимализм' \nGROUP BY a.FirstName, a.LastName \nHAVING COUNT(d.DesignID) > 1;",
            "gigachat_response": "SELECT d.ArchitectID, a.FirstName, a.LastName, COUNT(d.DesignID) AS NumberOfDesigns\nFROM Designs d\nJOIN Architects a ON d.ArchitectID = a.ArchitectID\nWHERE d.Style = 'Минимализм'\nGROUP BY d.ArchitectID, a.FirstName, a.LastName\nHAVING COUNT(d.DesignID) > 1;",
            "gigachat_response_ru": "SELECT d.ArchitectID, a.FirstName, a.LastName\nFROM Designs d\nJOIN Architects a ON d.ArchitectID = a.ArchitectID\nWHERE d.Style = 'Минимализм'\nGROUP BY d.ArchitectID, a.FirstName, a.LastName\nHAVING COUNT(d.DesignID) > 1;"
        },
        {
            "question": "Какие проекты имеют более одной неудовлетворительной инспекции?",
            "sql_query": "SELECT p.ProjectName, COUNT(i.InspectionID) AS InspectionCount FROM Projects p JOIN Inspections i ON p.ProjectID = i.ProjectID WHERE i.Result = 'Неуспешно' GROUP BY p.ProjectName HAVING COUNT(i.InspectionID) > 1;",
            "gpt-4o_response": "SELECT p.ProjectName, COUNT(i.InspectionID) AS UnsuccessfulInspections\nFROM Projects p\nJOIN Inspections i ON p.ProjectID = i.ProjectID\nWHERE i.Result = 'Неуспешно'\nGROUP BY p.ProjectName\nHAVING COUNT(i.InspectionID) > 1;",
            "gpt-4o_response_ru": "SELECT p.ProjectID, p.ProjectName, COUNT(i.InspectionID) AS UnsuccessfulInspections\nFROM Projects p\nJOIN Inspections i ON p.ProjectID = i.ProjectID\nWHERE i.Result = 'Неуспешно'\nGROUP BY p.ProjectID, p.ProjectName\nHAVING COUNT(i.InspectionID) > 1;",
            "google/gemini-2.0-flash-001_response": "SELECT p.ProjectName\nFROM Projects p\nJOIN Inspections i ON p.ProjectID = i.ProjectID\nWHERE i.Result = 'Неуспешно'\nGROUP BY p.ProjectID, p.ProjectName\nHAVING COUNT(i.InspectionID) > 1;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT \n    p.ProjectName,\n    COUNT(i.InspectionID) AS Количество_неудовлетворительных_инспекций\nFROM Projects p\nJOIN Inspections i ON p.ProjectID = i.ProjectID\nWHERE i.Result = 'Неуспешно'\nGROUP BY p.ProjectName\nHAVING COUNT(i.InspectionID) > 1;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT p.ProjectName, COUNT(i.InspectionID) AS NumberOfInspections, p.Budget, p.Location \nFROM Projects p \nJOIN Inspections i ON p.ProjectID = i.ProjectID \nWHERE i.Result = 'Неуспешно' \nGROUP BY p.ProjectName, p.Budget, p.Location \nHAVING COUNT(i.InspectionID) > 1;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    p.ProjectName, \n    COUNT(i.InspectionID) AS NumberOfInspections, \n    SUM(CASE WHEN i.Result = 'Неуспешно' THEN 1 ELSE 0 END) AS NumberOfUnsuccessfulInspections\nFROM \n    Projects p \nJOIN \n    Inspections i ON p.ProjectID = i.ProjectID\nGROUP BY \n    p.ProjectName\nHAVING \n    SUM(CASE WHEN i.Result = 'Неуспешно' THEN 1 ELSE 0 END) > 1",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT p.ProjectID, p.ProjectName, COUNT(i.InspectionID) AS FailedInspectionsCount \nFROM Projects p \nJOIN Inspections i ON p.ProjectID = i.ProjectID \nWHERE i.Result = 'Неуспешно' \nGROUP BY p.ProjectID, p.ProjectName \nHAVING COUNT(i.InspectionID) > 1;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT p.ProjectID, p.ProjectName, COUNT(i.InspectionID) AS FailedInspectionsCount\nFROM Projects p\nJOIN Inspections i ON p.ProjectID = i.ProjectID\nWHERE i.Result = 'Неуспешно'\nGROUP BY p.ProjectID, p.ProjectName\nHAVING COUNT(i.InspectionID) > 1;",
            "gigachat_response": "SELECT p.ProjectName, COUNT(i.InspectionID) AS FailedInspections\nFROM Projects p\nJOIN Inspections i ON p.ProjectID = i.ProjectID\nWHERE i.Result = 'Неуспешно'\nGROUP BY p.ProjectName\nHAVING COUNT(i.InspectionID) > 1;",
            "gigachat_response_ru": "SELECT p.ProjectName, COUNT(i.InspectionID) AS FailedInspections\nFROM Projects p\nJOIN Inspections i ON p.ProjectID = i.ProjectID\nWHERE i.Result = 'Неуспешно'\nGROUP BY p.ProjectName\nHAVING COUNT(i.InspectionID) > 1;"
        },
        {
            "question": "Какие поставщики имеют среднюю стоимость материалов более 1000 при качестве выше 8?",
            "sql_query": "SELECT s.SupplierName, AVG(m.CostPerUnit) AS AvgCost FROM Suppliers s JOIN Materials m ON s.SupplierID = m.SupplierID WHERE m.QualityRating > 8 GROUP BY s.SupplierName HAVING AVG(m.CostPerUnit) > 1000;",
            "gpt-4o_response": "SELECT s.SupplierName, AVG(m.CostPerUnit) AS AverageCost, m.QualityRating\nFROM Suppliers s\nJOIN Materials m ON s.SupplierID = m.SupplierID\nWHERE m.QualityRating > 8\nGROUP BY s.SupplierName, m.QualityRating\nHAVING AVG(m.CostPerUnit) > 1000;",
            "gpt-4o_response_ru": "SELECT s.SupplierName, AVG(m.CostPerUnit) AS AverageCost\nFROM Suppliers s\nJOIN Materials m ON s.SupplierID = m.SupplierID\nWHERE m.QualityRating > 8\nGROUP BY s.SupplierName\nHAVING AVG(m.CostPerUnit) > 1000;",
            "google/gemini-2.0-flash-001_response": "SELECT s.SupplierName\nFROM Suppliers s\nJOIN Materials m ON s.SupplierID = m.SupplierID\nWHERE m.QualityRating > 8\nGROUP BY s.SupplierName\nHAVING AVG(m.CostPerUnit) > 1000;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT s.SupplierName\nFROM Suppliers s\nJOIN Materials m ON s.SupplierID = m.SupplierID\nWHERE m.QualityRating > 8\nGROUP BY s.SupplierName\nHAVING AVG(m.CostPerUnit) > 1000;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT s.SupplierName, AVG(m.CostPerUnit) AS AverageMaterialCost, COUNT(DISTINCT m.MaterialID) AS MaterialCount\nFROM Suppliers s\nJOIN Materials m ON s.SupplierID = m.SupplierID\nWHERE m.QualityRating > 8\nGROUP BY s.SupplierName\nHAVING AVG(m.CostPerUnit) > 1000\nORDER BY AverageMaterialCost DESC;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT s.SupplierName, AVG(m.CostPerUnit) AS AverageCost\nFROM Suppliers s\nJOIN Materials m ON s.SupplierID = m.SupplierID\nWHERE m.QualityRating > 8\nGROUP BY s.SupplierName\nHAVING AVG(m.CostPerUnit) > 1000\nORDER BY AverageCost DESC;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT s.SupplierName, AVG(m.CostPerUnit) AS AvgCost, m.QualityRating \nFROM Suppliers s \nJOIN Materials m ON s.SupplierID = m.SupplierID \nWHERE m.QualityRating > 8 \nGROUP BY s.SupplierName, m.QualityRating \nHAVING AVG(m.CostPerUnit) > 1000;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT s.SupplierName, AVG(m.CostPerUnit) AS AvgMaterialCost\nFROM Suppliers s\nJOIN Materials m ON s.SupplierID = m.SupplierID\nWHERE m.QualityRating > 8\nGROUP BY s.SupplierName\nHAVING AVG(m.CostPerUnit) > 1000;",
            "gigachat_response": "SELECT s.SupplierName\nFROM Suppliers s\nJOIN Materials m ON s.SupplierID = m.SupplierID\nGROUP BY s.SupplierName\nHAVING AVG(m.CostPerUnit) > 1000 AND MAX(m.QualityRating) > 8;",
            "gigachat_response_ru": "SELECT s.SupplierName\nFROM Suppliers s\nJOIN Materials m ON s.SupplierID = m.SupplierID\nWHERE m.QualityRating > 8\nGROUP BY s.SupplierName\nHAVING AVG(m.CostPerUnit) > 1000;"
        },
        {
            "question": "Какие инженеры участвуют более чем в одном проекте?",
            "sql_query": "SELECT e.FirstName, e.LastName, COUNT(p.ProjectID) AS ProjectCount FROM Employees e JOIN Departments d ON e.DepartmentID = d.DepartmentID JOIN Projects p ON d.DepartmentID = p.ProjectID WHERE e.Position = 'Инженер' GROUP BY e.FirstName, e.LastName HAVING COUNT(p.ProjectID) > 1;",
            "gpt-4o_response": "SELECT e.FirstName, e.LastName, COUNT(DISTINCT p.ProjectID) AS ProjectCount\nFROM Employees e\nJOIN Projects p ON e.EmployeeID = p.ArchitectID\nWHERE e.Position = 'Инженер'\nGROUP BY e.FirstName, e.LastName\nHAVING COUNT(DISTINCT p.ProjectID) > 1;",
            "gpt-4o_response_ru": "SELECT e.FirstName, e.LastName, COUNT(DISTINCT p.ProjectID) AS ProjectCount\nFROM Employees e\nJOIN Projects p ON e.EmployeeID = p.ArchitectID\nWHERE e.Position = 'Инженер'\nGROUP BY e.FirstName, e.LastName\nHAVING COUNT(DISTINCT p.ProjectID) > 1;",
            "google/gemini-2.0-flash-001_response": "SELECT e.FirstName, e.LastName\nFROM Employees e\nWHERE e.Position = 'Инженер'\nAND e.EmployeeID IN (SELECT p.ArchitectID FROM Projects p GROUP BY p.ArchitectID HAVING COUNT(DISTINCT p.ProjectID) > 1);",
            "google/gemini-2.0-flash-001_response_ru": "SELECT e.FirstName, e.LastName\nFROM Employees e\nWHERE e.Position = 'Инженер'\nAND e.EmployeeID IN (SELECT DISTINCT EmployeeID FROM Employees em JOIN Departments d ON em.DepartmentID = d.DepartmentID)\nAND EXISTS (SELECT 1 FROM Projects p JOIN Departments d ON p.ProjectID > 0 WHERE e.DepartmentID = d.DepartmentID GROUP BY e.EmployeeID HAVING COUNT(DISTINCT p.ProjectID) > 1);",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT e.FirstName, e.LastName, COUNT(DISTINCT p.ProjectID) AS ProjectCount \nFROM Employees e \nJOIN Projects p ON e.EmployeeID = p.ArchitectID \nWHERE e.Position = 'Инженер' \nGROUP BY e.FirstName, e.LastName \nHAVING COUNT(DISTINCT p.ProjectID) > 1;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT e.FirstName, e.LastName, COUNT(DISTINCT p.ProjectID) AS ProjectCount \nFROM Employees e \nJOIN Projects p ON e.EmployeeID = p.ArchitectID \nWHERE e.Position = 'Инженер' \nGROUP BY e.FirstName, e.LastName \nHAVING COUNT(DISTINCT p.ProjectID) > 1;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT e.FirstName, e.LastName, e.Position, COUNT(DISTINCT p.ProjectID) AS ProjectCount \nFROM Employees e \nJOIN Projects p ON e.EmployeeID = p.ArchitectID \nWHERE e.Position = 'Инженер' \nGROUP BY e.FirstName, e.LastName, e.Position \nHAVING COUNT(DISTINCT p.ProjectID) > 1;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT e.FirstName, e.LastName, e.Position, COUNT(DISTINCT p.ProjectID) AS ProjectCount\nFROM Employees e\nJOIN Projects p ON e.EmployeeID = p.ArchitectID\nWHERE e.Position = 'Инженер'\nGROUP BY e.FirstName, e.LastName, e.Position\nHAVING COUNT(DISTINCT p.ProjectID) > 1;",
            "gigachat_response": "SELECT e.FirstName, e.LastName, COUNT(DISTINCT p.ProjectID) AS ProjectCount\nFROM Employees e\nJOIN Projects p ON e.EmployeeID = p.ArchitectID OR e.EmployeeID = ANY(SELECT d.ManagerID FROM Departments d WHERE d.DepartmentID = e.DepartmentID)\nWHERE e.Position = 'Инженер'\nGROUP BY e.FirstName, e.LastName\nHAVING COUNT(DISTINCT p.ProjectID) > 1;",
            "gigachat_response_ru": "SELECT e.FirstName, e.LastName, COUNT(DISTINCT p.ProjectID) AS ProjectCount\nFROM Employees e\nJOIN Projects p ON e.EmployeeID = p.ArchitectID OR e.EmployeeID IN (SELECT ArchitectID FROM Designs d WHERE d.ProjectID = p.ProjectID)\nWHERE e.Position = 'Инженер'\nGROUP BY e.FirstName, e.LastName\nHAVING COUNT(DISTINCT p.ProjectID) > 1;"
        },
        {
            "question": "Какие здания в Санкт-Петербурге имеют среднее количество этажей более 40?",
            "sql_query": "SELECT b.BuildingName, AVG(b.Floors) AS AvgFloors FROM Buildings b JOIN Projects p ON b.ProjectID = p.ProjectID WHERE p.Location = 'Санкт-Петербург' GROUP BY b.BuildingName HAVING AVG(b.Floors) > 40;",
            "gpt-4o_response": "SELECT b.BuildingName, b.Floors, b.Height, b.Style, b.Usage\nFROM Buildings b\nJOIN Projects p ON b.ProjectID = p.ProjectID\nWHERE p.Location = 'Санкт-Петербург'\nGROUP BY b.BuildingName, b.Floors, b.Height, b.Style, b.Usage\nHAVING AVG(b.Floors) > 40;",
            "gpt-4o_response_ru": "SELECT b.BuildingName, b.Floors, p.Location\nFROM Buildings b\nJOIN Projects p ON b.ProjectID = p.ProjectID\nWHERE p.Location = 'Санкт-Петербург'\nGROUP BY b.BuildingName, b.Floors, p.Location\nHAVING AVG(b.Floors) > 40;",
            "google/gemini-2.0-flash-001_response": "SELECT BuildingName, Floors\nFROM Buildings\nWHERE City = 'Санкт-Петербург'\nGROUP BY BuildingName, Floors\nHAVING AVG(Floors) > 40;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT BuildingName, Floors\nFROM Buildings\nWHERE (SELECT City FROM Projects WHERE ProjectID = Buildings.ProjectID) = 'Санкт-Петербург'\nGROUP BY BuildingName, Floors\nHAVING AVG(Floors) > 40;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT b.BuildingName, AVG(b.Floors) AS Среднее_количество_этажей, p.Location \nFROM Buildings b \nJOIN Projects p ON b.ProjectID = p.ProjectID \nWHERE p.Location = 'Санкт-Петербург' \nGROUP BY b.BuildingName, p.Location \nHAVING AVG(b.Floors) > 40;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT b.BuildingName, AVG(b.Floors) AS Среднее_количество_этажей\nFROM Buildings b\nJOIN Projects p ON b.ProjectID = p.ProjectID\nWHERE p.Location = 'Санкт-Петербург'\nGROUP BY b.BuildingName\nHAVING AVG(b.Floors) > 40;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT b.BuildingName, b.Floors, p.Location \nFROM Buildings b \nJOIN Projects p ON b.ProjectID = p.ProjectID \nWHERE p.Location = 'Санкт-Петербург' AND b.Floors > 40;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT b.BuildingName, b.Floors, p.Location \nFROM Buildings b \nJOIN Projects p ON b.ProjectID = p.ProjectID \nWHERE p.Location = 'Санкт-Петербург' AND b.Floors > 40 \nORDER BY b.Floors DESC;",
            "gigachat_response": "SELECT b.BuildingName, b.Floors \nFROM Buildings b \nJOIN Projects p ON b.ProjectID = p.ProjectID \nWHERE p.Location = 'Санкт-Петербург' AND b.Floors > 40;",
            "gigachat_response_ru": "SELECT b.BuildingName, b.Floors \nFROM Buildings b \nJOIN Projects p ON b.ProjectID = p.ProjectID \nWHERE p.Location = 'Санкт-Петербург' AND b.Floors > 40;"
        },
        {
            "question": "Какие проекты имеют более трех успешных инспекций?",
            "sql_query": "SELECT p.ProjectName, COUNT(i.InspectionID) AS InspectionCount FROM Projects p JOIN Inspections i ON p.ProjectID = i.ProjectID WHERE i.Result = 'Успешно' GROUP BY p.ProjectName HAVING COUNT(i.InspectionID) > 3;",
            "gpt-4o_response": "SELECT p.ProjectName, COUNT(i.InspectionID) AS SuccessfulInspections\nFROM Projects p\nJOIN Inspections i ON p.ProjectID = i.ProjectID\nWHERE i.Result = 'Успешно'\nGROUP BY p.ProjectName\nHAVING COUNT(i.InspectionID) > 3;",
            "gpt-4o_response_ru": "SELECT p.ProjectID, p.ProjectName, COUNT(i.InspectionID) AS SuccessfulInspections\nFROM Projects p\nJOIN Inspections i ON p.ProjectID = i.ProjectID\nWHERE i.Result = 'Успешно'\nGROUP BY p.ProjectID, p.ProjectName\nHAVING COUNT(i.InspectionID) > 3;",
            "google/gemini-2.0-flash-001_response": "SELECT p.ProjectName\nFROM Projects p\nJOIN Inspections i ON p.ProjectID = i.ProjectID\nWHERE i.Result = 'Успешно'\nGROUP BY p.ProjectName\nHAVING COUNT(CASE WHEN i.Result = 'Успешно' THEN 1 END) > 3;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT p.ProjectName\nFROM Projects p\nJOIN Inspections i ON p.ProjectID = i.ProjectID\nWHERE i.Result = 'Успешно'\nGROUP BY p.ProjectName\nHAVING COUNT(i.InspectionID) > 3;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT p.ProjectName, COUNT(i.InspectionID) AS SuccessfulInspections \nFROM Projects p \nJOIN Inspections i ON p.ProjectID = i.ProjectID \nWHERE i.Result = 'Успешно' \nGROUP BY p.ProjectName \nHAVING COUNT(i.InspectionID) > 3;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT p.ProjectName, COUNT(i.InspectionID) AS SuccessfulInspections\nFROM Projects p\nJOIN Inspections i ON p.ProjectID = i.ProjectID\nWHERE i.Result = 'Успешно'\nGROUP BY p.ProjectName\nHAVING COUNT(i.InspectionID) > 3;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT p.ProjectID, p.ProjectName, COUNT(i.InspectionID) AS SuccessfulInspectionsCount\nFROM Projects p\nJOIN Inspections i ON p.ProjectID = i.ProjectID\nWHERE i.Result = 'Успешно'\nGROUP BY p.ProjectID, p.ProjectName\nHAVING COUNT(i.InspectionID) > 3;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT p.ProjectID, p.ProjectName, COUNT(i.InspectionID) AS SuccessfulInspectionsCount\nFROM Projects p\nJOIN Inspections i ON p.ProjectID = i.ProjectID\nWHERE i.Result = 'Успешно'\nGROUP BY p.ProjectID, p.ProjectName\nHAVING COUNT(i.InspectionID) > 3;",
            "gigachat_response": "SELECT p.ProjectName, COUNT(i.InspectionID) AS SuccessfulInspectionCount\nFROM Projects p\nJOIN Inspections i ON p.ProjectID = i.ProjectID\nWHERE i.Result = 'Успешно'\nGROUP BY p.ProjectName\nHAVING COUNT(i.InspectionID) > 3;",
            "gigachat_response_ru": "SELECT p.ProjectName, COUNT(i.InspectionID) AS SuccessfulInspectionCount\nFROM Projects p\nJOIN Inspections i ON p.ProjectID = i.ProjectID\nWHERE i.Result = 'Успешно'\nGROUP BY p.ProjectName\nHAVING COUNT(i.InspectionID) > 3;"
        },
        {
            "question": "Какие поставщики имеют среднюю стоимость материалов более 800 при качестве выше 7?",
            "sql_query": "SELECT s.SupplierName, AVG(m.CostPerUnit) AS AvgCost FROM Suppliers s JOIN Materials m ON s.SupplierID = m.SupplierID WHERE m.QualityRating > 7 GROUP BY s.SupplierName HAVING AVG(m.CostPerUnit) > 800;",
            "gpt-4o_response": "SELECT s.SupplierName, AVG(m.CostPerUnit) AS AverageCost, m.QualityRating\nFROM Suppliers s\nJOIN Materials m ON s.SupplierID = m.SupplierID\nWHERE m.QualityRating > 7\nGROUP BY s.SupplierName, m.QualityRating\nHAVING AVG(m.CostPerUnit) > 800;",
            "gpt-4o_response_ru": "SELECT s.SupplierName, AVG(m.CostPerUnit) AS AverageCost\nFROM Suppliers s\nJOIN Materials m ON s.SupplierID = m.SupplierID\nWHERE m.QualityRating > 7\nGROUP BY s.SupplierName\nHAVING AVG(m.CostPerUnit) > 800;",
            "google/gemini-2.0-flash-001_response": "SELECT s.SupplierName\nFROM Suppliers s\nJOIN Materials m ON s.SupplierID = m.SupplierID\nWHERE m.QualityRating > 7\nGROUP BY s.SupplierName\nHAVING AVG(m.CostPerUnit) > 800;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT s.SupplierName\nFROM Suppliers s\nJOIN Materials m ON s.SupplierID = m.SupplierID\nWHERE m.QualityRating > 7\nGROUP BY s.SupplierName\nHAVING AVG(m.CostPerUnit) > 800;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT s.SupplierName, AVG(m.CostPerUnit) AS AverageMaterialCost, AVG(m.QualityRating) AS AverageQualityRating\nFROM Suppliers s\nJOIN Materials m ON s.SupplierID = m.SupplierID\nWHERE m.QualityRating > 7\nGROUP BY s.SupplierName\nHAVING AVG(m.CostPerUnit) > 800\nORDER BY AverageMaterialCost DESC;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT s.SupplierName, AVG(m.CostPerUnit) AS Средняя_стоимость_материалов\nFROM Suppliers s\nJOIN Materials m ON s.SupplierID = m.SupplierID\nWHERE m.QualityRating > 7\nGROUP BY s.SupplierName\nHAVING AVG(m.CostPerUnit) > 800;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT s.SupplierID, s.SupplierName, AVG(m.CostPerUnit) AS AvgCost, m.QualityRating \nFROM Suppliers s \nJOIN Materials m ON s.SupplierID = m.SupplierID \nWHERE m.QualityRating > 7 \nGROUP BY s.SupplierID, s.SupplierName, m.QualityRating \nHAVING AVG(m.CostPerUnit) > 800;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT s.SupplierName, AVG(m.CostPerUnit) AS AvgCost, m.QualityRating \nFROM Suppliers s \nJOIN Materials m ON s.SupplierID = m.SupplierID \nWHERE m.QualityRating > 7 \nGROUP BY s.SupplierName, m.QualityRating \nHAVING AVG(m.CostPerUnit) > 800;",
            "gigachat_response": "SELECT s.SupplierName\nFROM Suppliers s\nJOIN Materials m ON s.SupplierID = m.SupplierID\nWHERE m.QualityRating > 7\nGROUP BY s.SupplierName\nHAVING AVG(m.CostPerUnit) > 800;",
            "gigachat_response_ru": "SELECT s.SupplierName\nFROM Suppliers s\nJOIN Materials m ON s.SupplierID = m.SupplierID\nWHERE m.QualityRating > 7\nGROUP BY s.SupplierName\nHAVING AVG(m.CostPerUnit) > 800;"
        },
        {
            "question": "Какие материалы из России имеют общий запас более 300 единиц?",
            "sql_query": "SELECT m.MaterialName, SUM(m.QuantityInStock) AS TotalStock FROM Materials m JOIN Suppliers s ON m.SupplierID = s.SupplierID WHERE s.Country = 'Россия' GROUP BY m.MaterialName HAVING SUM(m.QuantityInStock) > 300;",
            "gpt-4o_response": "SELECT m.MaterialName, s.Country, m.QuantityInStock \nFROM Materials m \nJOIN Suppliers s ON m.SupplierID = s.SupplierID \nWHERE s.Country = 'Россия' \nAND m.QuantityInStock > 300;",
            "gpt-4o_response_ru": "SELECT m.MaterialName, m.QuantityInStock, s.Country\nFROM Materials m\nJOIN Suppliers s ON m.SupplierID = s.SupplierID\nWHERE s.Country = 'Россия' AND m.QuantityInStock > 300;",
            "google/gemini-2.0-flash-001_response": "SELECT m.MaterialName\nFROM Materials m\nJOIN Suppliers s ON m.SupplierID = s.SupplierID\nWHERE s.Country = 'Россия'\nGROUP BY m.MaterialName\nHAVING SUM(m.QuantityInStock) > 300;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT MaterialName\nFROM Materials\nWHERE SupplierID IN (SELECT SupplierID FROM Suppliers WHERE Country = 'Россия')\nGROUP BY MaterialName\nHAVING SUM(QuantityInStock) > 300;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT m.MaterialName, s.SupplierName, m.QuantityInStock, m.CostPerUnit, m.Unit, s.Country \nFROM Materials m \nJOIN Suppliers s ON m.SupplierID = s.SupplierID \nWHERE s.Country = 'Россия' AND m.QuantityInStock > 300;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT m.MaterialName, s.Country, m.QuantityInStock, m.Unit \nFROM Materials m \nJOIN Suppliers s ON m.SupplierID = s.SupplierID \nWHERE s.Country = 'Россия' AND m.QuantityInStock > 300;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT m.MaterialName, m.QuantityInStock, s.Country \nFROM Materials m \nJOIN Suppliers s ON m.SupplierID = s.SupplierID \nWHERE s.Country = 'Россия' AND m.QuantityInStock > 300;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT m.MaterialName, m.QuantityInStock, s.SupplierName, s.Country \nFROM Materials m \nJOIN Suppliers s ON m.SupplierID = s.SupplierID \nWHERE s.Country = 'Россия' AND m.QuantityInStock > 300;",
            "gigachat_response": "SELECT m.MaterialName, SUM(m.QuantityInStock) AS TotalQuantity\nFROM Materials m\nJOIN Suppliers s ON m.SupplierID = s.SupplierID\nWHERE s.Country = 'Россия'\nGROUP BY m.MaterialName\nHAVING SUM(m.QuantityInStock) > 300;",
            "gigachat_response_ru": "SELECT m.MaterialName, SUM(m.QuantityInStock) AS TotalQuantity\nFROM Materials m\nJOIN Suppliers s ON m.SupplierID = s.SupplierID\nWHERE s.Country = 'Россия'\nGROUP BY m.MaterialName\nHAVING SUM(m.QuantityInStock) > 300;"
        },
        {
            "question": "Какие поставщики материалов с качеством выше 8 поставляют материалы для проектов в Москве и Санкт-Петербурге? Показать топ-5 по средней стоимости материалов.",
            "sql_query": "SELECT s.SupplierName, AVG(m.CostPerUnit) AS AvgCost, COUNT(DISTINCT p.ProjectID) AS ProjectCount FROM Suppliers s JOIN Materials m ON s.SupplierID = m.SupplierID JOIN Projects p ON p.Location IN ('Москва', 'Санкт-Петербург') WHERE m.QualityRating > 8 GROUP BY s.SupplierName HAVING COUNT(DISTINCT p.ProjectID) > 0 ORDER BY AvgCost DESC LIMIT 5;",
            "gpt-4o_response": "SELECT s.SupplierName, AVG(m.CostPerUnit) AS AvgMaterialCost\nFROM Suppliers s\nJOIN Materials m ON s.SupplierID = m.SupplierID\nJOIN Projects p ON p.Location IN ('Москва', 'Санкт-Петербург')\nWHERE m.QualityRating > 8\nGROUP BY s.SupplierName\nORDER BY AvgMaterialCost DESC\nLIMIT 5;",
            "gpt-4o_response_ru": "SELECT s.SupplierName, AVG(m.CostPerUnit) AS AvgMaterialCost\nFROM Suppliers s\nJOIN Materials m ON s.SupplierID = m.SupplierID\nJOIN Projects p ON p.ProjectID IN (\n    SELECT DISTINCT b.ProjectID\n    FROM Buildings b\n    WHERE b.ProjectID = p.ProjectID\n)\nWHERE m.QualityRating > 8\nAND p.Location IN ('Москва', 'Санкт-Петербург')\nGROUP BY s.SupplierName\nORDER BY AvgMaterialCost DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response": "SELECT \n    s.SupplierName,\n    AVG(m.CostPerUnit) AS AverageMaterialCost\nFROM Suppliers s\nJOIN Materials m ON s.SupplierID = m.SupplierID\nJOIN Buildings b ON m.MaterialName = b.Material\nJOIN Projects p ON b.ProjectID = p.ProjectID\nWHERE m.QualityRating > 8\nAND p.Location IN ('Москва', 'Санкт-Петербург')\nGROUP BY s.SupplierName\nORDER BY AverageMaterialCost\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT \n    s.SupplierName,\n    s.ContactName,\n    AVG(m.CostPerUnit) AS AverageMaterialCost\nFROM Suppliers s\nJOIN Materials m ON s.SupplierID = m.SupplierID\nJOIN Buildings b ON m.MaterialName = b.Material\nJOIN Projects p ON b.ProjectID = p.ProjectID\nWHERE m.QualityRating > 8\n  AND (p.Location = 'Москва' OR p.Location = 'Санкт-Петербург')\nGROUP BY s.SupplierName, s.ContactName\nORDER BY AverageMaterialCost\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    s.SupplierName, \n    AVG(m.CostPerUnit) AS AverageMaterialCost, \n    COUNT(DISTINCT p.ProjectID) AS ProjectCount\nFROM \n    Suppliers s\nJOIN \n    Materials m ON s.SupplierID = m.SupplierID\nJOIN \n    Projects p ON m.MaterialID IN (SELECT MaterialID FROM Materials WHERE SupplierID = s.SupplierID)\nWHERE \n    m.QualityRating > 8 AND \n    p.Location IN ('Москва', 'Санкт-Петербург')\nGROUP BY \n    s.SupplierName\nORDER BY \n    AverageMaterialCost DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT s.SupplierName, AVG(m.CostPerUnit) AS AverageCost, m.MaterialName, m.QualityRating\nFROM Suppliers s\nJOIN Materials m ON s.SupplierID = m.SupplierID\nJOIN Projects p ON m.MaterialID IN (SELECT MaterialID FROM Materials WHERE ProjectID = p.ProjectID)\nWHERE m.QualityRating > 8 AND (p.Location = 'Москва' OR p.Location = 'Санкт-Петербург')\nGROUP BY s.SupplierName, m.MaterialName, m.QualityRating\nORDER BY AverageCost DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT s.SupplierName, AVG(m.CostPerUnit) AS AvgMaterialCost\nFROM Suppliers s\nJOIN Materials m ON s.SupplierID = m.SupplierID\nJOIN Projects p ON p.Location IN ('Москва', 'Санкт-Петербург')\nWHERE m.QualityRating > 8\nGROUP BY s.SupplierName\nORDER BY AvgMaterialCost DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT s.SupplierName, AVG(m.CostPerUnit) AS AvgMaterialCost\nFROM Suppliers s\nJOIN Materials m ON s.SupplierID = m.SupplierID\nJOIN Projects p ON p.ProjectID IN (\n    SELECT DISTINCT b.ProjectID \n    FROM Buildings b \n    JOIN Projects pr ON b.ProjectID = pr.ProjectID \n    WHERE pr.Location IN ('Москва', 'Санкт-Петербург')\n)\nWHERE m.QualityRating > 8\nGROUP BY s.SupplierName\nORDER BY AvgMaterialCost DESC\nLIMIT 5;",
            "gigachat_response": "SELECT \n    s.SupplierName,\n    AVG(m.CostPerUnit) AS AverageCost\nFROM \n    Suppliers s\nJOIN \n    Materials m ON s.SupplierID = m.SupplierID\nJOIN \n    Buildings b ON m.MaterialID = ANY(SELECT MaterialID FROM Buildings WHERE ProjectID = b.ProjectID)\nJOIN \n    Projects p ON b.ProjectID = p.ProjectID\nWHERE \n    m.QualityRating > 8 \n    AND p.Location IN ('Москва', 'Санкт-Петербург')\nGROUP BY \n    s.SupplierName\nORDER BY \n    AverageCost ASC\nLIMIT 5;",
            "gigachat_response_ru": "SELECT \n    sup.SupplierName,\n    AVG(mat.CostPerUnit) AS AverageCost\nFROM \n    Suppliers sup\nJOIN \n    Materials mat ON sup.SupplierID = mat.SupplierID\nJOIN \n    Projects prj ON mat.MaterialID IN (SELECT MaterialID FROM Materials WHERE SupplierID = sup.SupplierID)\nWHERE \n    mat.QualityRating > 8 \n    AND prj.Location IN ('Москва', 'Санкт-Петербург')\nGROUP BY \n    sup.SupplierName\nORDER BY \n    AverageCost DESC\nLIMIT 5;"
        },
        {
            "question": "Какие проекты имеют более одного действующего разрешения и успешную инспекцию, при этом их бюджет превышает средний бюджет по всем проектам? Показать топ-4 результата.",
            "sql_query": "SELECT p.ProjectName, p.Budget, COUNT(pe.PermitID) AS PermitCount FROM Projects p JOIN Permits pe ON p.ProjectID = pe.ProjectID JOIN Inspections i ON p.ProjectID = i.ProjectID WHERE pe.Status = 'Действующий' AND i.Result = 'Успешно' AND p.Budget > (SELECT AVG(Budget) FROM Projects) GROUP BY p.ProjectName, p.Budget HAVING COUNT(pe.PermitID) > 1 ORDER BY p.Budget DESC LIMIT 4;",
            "gpt-4o_response": "WITH ActivePermits AS (\n    SELECT ProjectID, COUNT(PermitID) AS ActivePermitCount\n    FROM Permits\n    WHERE Status = 'Действующий'\n    GROUP BY ProjectID\n    HAVING COUNT(PermitID) > 1\n),\nSuccessfulInspections AS (\n    SELECT ProjectID\n    FROM Inspections\n    WHERE Result = 'Успешно'\n    GROUP BY ProjectID\n),\nAverageBudget AS (\n    SELECT AVG(Budget) AS AvgBudget\n    FROM Projects\n)\nSELECT p.ProjectName, p.Budget, p.Location, a.FirstName AS ArchitectFirstName, a.LastName AS ArchitectLastName, c.FirstName AS ClientFirstName, c.LastName AS ClientLastName\nFROM Projects p\nJOIN ActivePermits ap ON p.ProjectID = ap.ProjectID\nJOIN SuccessfulInspections si ON p.ProjectID = si.ProjectID\nJOIN AverageBudget ab ON p.Budget > ab.AvgBudget\nJOIN Architects a ON p.ArchitectID = a.ArchitectID\nJOIN Clients c ON p.ClientID = c.ClientID\nORDER BY p.Budget DESC\nLIMIT 4;",
            "gpt-4o_response_ru": "SELECT \n    p.ProjectName, \n    p.Budget, \n    COUNT(DISTINCT pe.PermitID) AS ActivePermitsCount, \n    i.InspectionDate, \n    i.Result\nFROM \n    Projects p\nJOIN \n    Permits pe ON p.ProjectID = pe.ProjectID\nJOIN \n    Inspections i ON p.ProjectID = i.ProjectID\nWHERE \n    pe.Status = 'Действующий' \n    AND i.Result = 'Успешно'\nGROUP BY \n    p.ProjectID, p.ProjectName, p.Budget, i.InspectionDate, i.Result\nHAVING \n    COUNT(DISTINCT pe.PermitID) > 1 \n    AND p.Budget > (SELECT AVG(Budget) FROM Projects)\nORDER BY \n    p.Budget DESC\nLIMIT 4;",
            "google/gemini-2.0-flash-001_response": "SELECT \n    p.ProjectName,\n    COUNT(DISTINCT pe.PermitID) AS NumberOfActivePermits,\n    i.Result,\n    p.Budget\nFROM \n    Projects p\nJOIN \n    Permits pe ON p.ProjectID = pe.ProjectID\nJOIN \n    Inspections i ON p.ProjectID = i.ProjectID\nWHERE \n    pe.Status = 'Действующий' AND i.Result = 'Успешно'\nGROUP BY \n    p.ProjectName, i.Result, p.Budget\nHAVING \n    COUNT(DISTINCT pe.PermitID) > 1 AND p.Budget > (SELECT AVG(Budget) FROM Projects)\nORDER BY \n    NumberOfActivePermits DESC\nLIMIT 4;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT p.ProjectName, p.Budget, COUNT(DISTINCT pe.PermitID) AS NumberOfPermits, i.Result\nFROM Projects p\nJOIN Permits pe ON p.ProjectID = pe.ProjectID\nJOIN Inspections i ON p.ProjectID = i.ProjectID\nWHERE pe.Status = 'Действующий' AND i.Result = 'Успешно'\nGROUP BY p.ProjectID, p.ProjectName, p.Budget, i.Result\nHAVING COUNT(DISTINCT pe.PermitID) > 1 AND p.Budget > (SELECT AVG(Budget) FROM Projects)\nORDER BY p.Budget DESC\nLIMIT 4;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH ProjectPermits AS (\n  SELECT p.ProjectID, COUNT(pr.PermitID) AS PermitCount\n  FROM Projects p\n  JOIN Permits pr ON p.ProjectID = pr.ProjectID\n  WHERE pr.Status = 'Действующий'\n  GROUP BY p.ProjectID\n),\nProjectInspections AS (\n  SELECT p.ProjectID, COUNT(i.InspectionID) AS InspectionCount\n  FROM Projects p\n  JOIN Inspections i ON p.ProjectID = i.ProjectID\n  WHERE i.Result = 'Успешно'\n  GROUP BY p.ProjectID\n),\nAverageBudget AS (\n  SELECT AVG(Budget) AS AvgBudget\n  FROM Projects\n)\nSELECT \n  p.ProjectName, \n  p.Budget, \n  pp.PermitCount, \n  pi.InspectionCount\nFROM Projects p\nJOIN ProjectPermits pp ON p.ProjectID = pp.ProjectID\nJOIN ProjectInspections pi ON p.ProjectID = pi.ProjectID\nJOIN AverageBudget ab ON p.Budget > ab.AvgBudget\nWHERE pp.PermitCount > 1 AND pi.InspectionCount > 0\nORDER BY p.Budget DESC\nLIMIT 4;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH ProjectPermits AS (\n  SELECT p.ProjectID, COUNT(pr.PermitID) AS PermitCount\n  FROM Projects p\n  JOIN Permits pr ON p.ProjectID = pr.ProjectID\n  WHERE pr.Status = 'Действующий'\n  GROUP BY p.ProjectID\n),\nProjectInspections AS (\n  SELECT p.ProjectID, COUNT(i.InspectionID) AS InspectionCount, i.Result\n  FROM Projects p\n  JOIN Inspections i ON p.ProjectID = i.ProjectID\n  WHERE i.Result = 'Успешно'\n  GROUP BY p.ProjectID, i.Result\n),\nAverageBudget AS (\n  SELECT AVG(Budget) AS AvgBudget\n  FROM Projects\n)\nSELECT \n  p.ProjectName, \n  p.Budget, \n  pp.PermitCount, \n  pi.InspectionCount, \n  c.ClientName\nFROM Projects p\nJOIN ProjectPermits pp ON p.ProjectID = pp.ProjectID\nJOIN ProjectInspections pi ON p.ProjectID = pi.ProjectID\nJOIN Clients c ON p.ClientID = c.ClientID\nJOIN AverageBudget ab ON 1 = 1\nWHERE pp.PermitCount > 1 AND p.Budget > ab.AvgBudget\nORDER BY p.Budget DESC\nLIMIT 4;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT p.ProjectID, p.ProjectName, p.Budget, COUNT(DISTINCT pe.PermitID) AS PermitCount\nFROM Projects p\nJOIN Permits pe ON p.ProjectID = pe.ProjectID AND pe.Status = 'Действующий'\nJOIN Inspections i ON p.ProjectID = i.ProjectID AND i.Result = 'Успешно'\nWHERE p.Budget > (SELECT AVG(Budget) FROM Projects)\nGROUP BY p.ProjectID, p.ProjectName, p.Budget\nHAVING COUNT(DISTINCT pe.PermitID) > 1\nORDER BY p.Budget DESC\nLIMIT 4;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT p.ProjectID, p.ProjectName, p.Budget, COUNT(DISTINCT per.PermitID) AS ActivePermits\nFROM Projects p\nJOIN Permits per ON p.ProjectID = per.ProjectID AND per.Status = 'Действующий'\nJOIN Inspections i ON p.ProjectID = i.ProjectID AND i.Result = 'Успешно'\nWHERE p.Budget > (SELECT AVG(Budget) FROM Projects)\nGROUP BY p.ProjectID, p.ProjectName, p.Budget\nHAVING COUNT(DISTINCT per.PermitID) > 1\nORDER BY p.Budget DESC\nLIMIT 4;",
            "gigachat_response": "WITH ActivePermits AS (\n    SELECT ProjectID, COUNT(*) AS NumActivePermits\n    FROM Permits\n    WHERE Status = 'Действующий'\n    GROUP BY ProjectID\n    HAVING COUNT(*) > 1\n),\nSuccessfulInspections AS (\n    SELECT ProjectID\n    FROM Inspections\n    WHERE Result = 'Успешно'\n),\nAverageBudget AS (\n    SELECT AVG(Budget) AS AverageBudget\n    FROM Projects\n)\nSELECT p.ProjectID, p.ProjectName, p.Budget, p.Location\nFROM Projects p\nJOIN ActivePermits ap ON p.ProjectID = ap.ProjectID\nJOIN SuccessfulInspections si ON p.ProjectID = si.ProjectID\nCROSS JOIN AverageBudget ab\nWHERE p.Budget > ab.AverageBudget\nORDER BY p.Budget DESC\nLIMIT 4;",
            "gigachat_response_ru": "SELECT p.ProjectName, p.Budget, COUNT(pe.PermitID) AS ActivePermits, i.Result\nFROM Projects p\nJOIN Permits pe ON p.ProjectID = pe.ProjectID\nJOIN Inspections i ON p.ProjectID = i.ProjectID\nWHERE pe.Status = 'Действующий'\nAND i.Result = 'Успешно'\nGROUP BY p.ProjectID, p.ProjectName, p.Budget, i.Result\nHAVING COUNT(pe.PermitID) > 1\nAND p.Budget > (SELECT AVG(Budget) FROM Projects)\nORDER BY p.Budget DESC\nLIMIT 4;"
        },
        {
            "question": "Какие архитекторы, специализирующиеся на жилищной архитектуре, имеют награды после 2010 года и работают над проектами с бюджетом более 50 миллионов? Показать топ-3 результата.",
            "sql_query": "SELECT DISTINCT a.FirstName, a.LastName, a.Specialization, COUNT(aw.AwardID) AS AwardCount, SUM(p.Budget) AS TotalBudget FROM Architects a JOIN Awards aw ON a.ArchitectID = aw.ArchitectID JOIN Projects p ON a.ArchitectID = p.ArchitectID WHERE a.Specialization = 'Жилищная архитектура' AND aw.Year > 2010 AND p.Budget > 50000000 GROUP BY a.FirstName, a.LastName, a.Specialization HAVING COUNT(aw.AwardID) > 0 ORDER BY TotalBudget DESC LIMIT 3;",
            "gpt-4o_response": "SELECT a.FirstName, a.LastName, a.Specialization, aw.AwardName, aw.Year, p.ProjectName, p.Budget\nFROM Architects a\nJOIN Awards aw ON a.ArchitectID = aw.ArchitectID\nJOIN Projects p ON a.ArchitectID = p.ArchitectID\nWHERE a.Specialization = 'Жилищная архитектура'\nAND aw.Year > 2010\nAND p.Budget > 50000000\nORDER BY aw.Year DESC, p.Budget DESC\nLIMIT 3;",
            "gpt-4o_response_ru": "SELECT a.FirstName, a.LastName, a.Specialization, p.ProjectName, p.Budget, aw.AwardName, aw.Year\nFROM Architects a\nJOIN Projects p ON a.ArchitectID = p.ArchitectID\nJOIN Awards aw ON a.ArchitectID = aw.ArchitectID\nWHERE a.Specialization = 'Жилищная архитектура'\nAND aw.Year > 2010\nAND p.Budget > 50000000\nORDER BY p.Budget DESC\nLIMIT 3;",
            "google/gemini-2.0-flash-001_response": "SELECT a.FirstName, a.LastName, a.Specialization, aw.AwardName, p.ProjectName, p.Budget\nFROM Architects a\nJOIN Awards aw ON a.ArchitectID = aw.ArchitectID\nJOIN Projects p ON a.ArchitectID = p.ArchitectID\nWHERE a.Specialization = 'Жилищная архитектура'\n  AND aw.Year > 2010\n  AND p.Budget > 50000000\nORDER BY p.Budget DESC\nLIMIT 3;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT a.FirstName, a.LastName, a.Specialization, aw.AwardName, p.ProjectName, p.Budget\nFROM Architects a\nJOIN Awards aw ON a.ArchitectID = aw.ArchitectID\nJOIN Projects p ON a.ArchitectID = p.ArchitectID\nWHERE a.Specialization = 'Жилищная архитектура'\n  AND aw.Year > 2010\n  AND p.Budget > 50000000\nORDER BY p.Budget DESC\nLIMIT 3;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT DISTINCT a.FirstName, a.LastName, a.Specialization, p.ProjectName, p.Budget, aw.AwardName, aw.Year \nFROM Architects a \nJOIN Projects p ON a.ArchitectID = p.ArchitectID \nJOIN Awards aw ON a.ArchitectID = aw.ArchitectID \nWHERE a.Specialization = 'Жилищная архитектура' AND aw.Year > 2010 AND p.Budget > 50000000 \nORDER BY p.Budget DESC \nLIMIT 3;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT DISTINCT a.FirstName, a.LastName, a.Specialization, p.ProjectName, p.Budget, aw.AwardName, aw.Year\nFROM Architects a\nJOIN Projects p ON a.ArchitectID = p.ArchitectID\nJOIN Awards aw ON a.ArchitectID = aw.ArchitectID\nWHERE a.Specialization = 'Жилищная архитектура' AND aw.Year > 2010 AND p.Budget > 50000000\nORDER BY p.Budget DESC\nLIMIT 3;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT DISTINCT a.FirstName, a.LastName, a.Specialization, p.ProjectName, p.Budget, aw.AwardName, aw.Year \nFROM Architects a \nJOIN Projects p ON a.ArchitectID = p.ArchitectID \nJOIN Awards aw ON a.ArchitectID = aw.ArchitectID \nWHERE a.Specialization = 'Жилищная архитектура' \nAND aw.Year > 2010 \nAND p.Budget > 50000000 \nORDER BY p.Budget DESC \nLIMIT 3;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT DISTINCT a.FirstName, a.LastName, a.Specialization, p.ProjectName, p.Budget, aw.AwardName, aw.Year \nFROM Architects a \nJOIN Projects p ON a.ArchitectID = p.ArchitectID \nJOIN Awards aw ON a.ArchitectID = aw.ArchitectID \nWHERE a.Specialization = 'Жилищная архитектура' \nAND aw.Year > 2010 \nAND p.Budget > 50000000 \nORDER BY p.Budget DESC \nLIMIT 3;",
            "gigachat_response": "SELECT \n    a.FirstName, \n    a.LastName, \n    a.Specialization, \n    aw.Year, \n    p.ProjectName, \n    p.Budget\nFROM \n    Architects a\nJOIN \n    Awards aw ON a.ArchitectID = aw.ArchitectID\nJOIN \n    Projects p ON a.ArchitectID = p.ArchitectID\nWHERE \n    a.Specialization = 'Жилищная архитектура'\nAND \n    aw.Year > 2010\nAND \n    p.Budget > 50000000\nORDER BY \n    p.Budget DESC\nLIMIT 3;",
            "gigachat_response_ru": "SELECT \n    a.FirstName, \n    a.LastName, \n    a.Specialization, \n    aw.Year, \n    p.ProjectName, \n    p.Budget\nFROM \n    Architects a\nJOIN \n    Awards aw ON a.ArchitectID = aw.ArchitectID\nJOIN \n    Projects p ON a.ArchitectID = p.ArchitectID\nWHERE \n    a.Specialization = 'Жилищная архитектура'\nAND \n    aw.Year > 2010\nAND \n    p.Budget > 50000000\nORDER BY \n    p.Budget DESC\nLIMIT 3;"
        },
        {
            "question": "Какие проекты имеют оборудование в эксплуатации стоимостью более 500 тысяч рублей и успешные инспекции? Показать топ-5 по общей стоимости оборудования.",
            "sql_query": "SELECT p.ProjectName, SUM(e.Cost) AS TotalEquipmentCost, COUNT(DISTINCT i.InspectionID) AS SuccessfulInspections FROM Projects p JOIN Equipment e ON e.Status = 'в эксплуатации' JOIN Inspections i ON p.ProjectID = i.ProjectID WHERE e.Cost > 500000 AND i.Result = 'Успешно' GROUP BY p.ProjectName HAVING COUNT(DISTINCT i.InspectionID) > 0 ORDER BY TotalEquipmentCost DESC LIMIT 5;",
            "gpt-4o_response": "SELECT p.ProjectName, p.Location, SUM(e.Cost) AS TotalEquipmentCost\nFROM Projects p\nJOIN Equipment e ON p.ProjectID = e.EquipmentID\nJOIN Inspections i ON p.ProjectID = i.ProjectID\nWHERE e.Status = 'в эксплуатации' AND e.Cost > 500000 AND i.Result = 'Успешно'\nGROUP BY p.ProjectID, p.ProjectName, p.Location\nORDER BY TotalEquipmentCost DESC\nLIMIT 5;",
            "gpt-4o_response_ru": "SELECT \n    p.ProjectName,\n    SUM(e.Cost) AS TotalEquipmentCost\nFROM \n    Projects p\nJOIN \n    Equipment e ON p.ProjectID = e.SupplierID\nJOIN \n    Inspections i ON p.ProjectID = i.ProjectID\nWHERE \n    e.Status = 'в эксплуатации' \n    AND e.Cost > 500000 \n    AND i.Result = 'Успешно'\nGROUP BY \n    p.ProjectName\nORDER BY \n    TotalEquipmentCost DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response": "SELECT \n    p.ProjectName,\n    SUM(e.Cost) AS TotalEquipmentCost\nFROM \n    Projects p\nJOIN \n    Permits pe ON p.ProjectID = pe.ProjectID\nJOIN \n    Inspections i ON p.ProjectID = i.ProjectID\nJOIN \n    Buildings b ON p.ProjectID = b.ProjectID\nJOIN \n    Equipment e ON e.EquipmentID > 0  \nWHERE \n    e.Status = 'в эксплуатации' AND e.Cost > 500000 AND i.Result = 'Успешно'\nGROUP BY \n    p.ProjectName\nORDER BY \n    TotalEquipmentCost DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    p.ProjectName,\n    SUM(e.Cost) AS TotalEquipmentCost\nFROM\n    Projects p\nJOIN\n    Inspections i ON p.ProjectID = i.ProjectID\nJOIN\n    Permits pe ON p.ProjectID = pe.ProjectID\nJOIN\n    Equipment e ON e.SupplierID IN (SELECT SupplierID FROM Suppliers)\nWHERE\n    e.Cost > 500000\n    AND e.Status = 'в эксплуатации'\n    AND i.Result = 'Успешно'\nGROUP BY\n    p.ProjectName\nORDER BY\n    TotalEquipmentCost DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    p.ProjectName, \n    p.Budget, \n    e.EquipmentName, \n    e.Cost, \n    i.Result, \n    i.InspectionDate\nFROM \n    Projects p\nJOIN \n    Equipment e ON p.ProjectID = e.EquipmentID\nJOIN \n    Inspections i ON p.ProjectID = i.ProjectID\nWHERE \n    e.Status = 'в эксплуатации' \n    AND e.Cost > 500000 \n    AND i.Result = 'Успешно'\nORDER BY \n    e.Cost DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    p.ProjectName, \n    p.Budget, \n    e.EquipmentName, \n    e.Cost, \n    i.Result, \n    SUM(e.Cost) OVER (PARTITION BY p.ProjectID) AS TotalEquipmentCost\nFROM \n    Projects p\nJOIN \n    Equipment e ON p.ProjectID = e.EquipmentID\nJOIN \n    Inspections i ON p.ProjectID = i.ProjectID\nWHERE \n    e.Status = 'в эксплуатации' AND e.Cost > 500000 AND i.Result = 'Успешно'\nORDER BY \n    TotalEquipmentCost DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT p.ProjectID, p.ProjectName, SUM(e.Cost) AS TotalEquipmentCost\nFROM Projects p\nJOIN Equipment e ON e.Status = 'в эксплуатации' AND e.Cost > 500000\nJOIN Inspections i ON p.ProjectID = i.ProjectID AND i.Result = 'Успешно'\nGROUP BY p.ProjectID, p.ProjectName\nHAVING SUM(e.Cost) > 500000\nORDER BY TotalEquipmentCost DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT p.ProjectID, p.ProjectName, SUM(e.Cost) AS TotalEquipmentCost\nFROM Projects p\nJOIN Equipment e ON e.Status = 'в эксплуатации' AND e.Cost > 500000\nJOIN Inspections i ON p.ProjectID = i.ProjectID AND i.Result = 'Успешно'\nGROUP BY p.ProjectID, p.ProjectName\nHAVING SUM(e.Cost) > 500000\nORDER BY TotalEquipmentCost DESC\nLIMIT 5;",
            "gigachat_response": "SELECT \n    pr.ProjectName,\n    SUM(eq.Cost) AS TotalEquipmentCost,\n    COUNT(i.InspectionID) AS NumberOfSuccessfulInspections\nFROM \n    Projects pr\nJOIN \n    Equipment eq ON pr.ProjectID = eq.ProjectID\nJOIN \n    Inspections i ON pr.ProjectID = i.ProjectID\nWHERE \n    eq.Status = 'в эксплуатации'\nAND \n    eq.Cost > 500000\nAND \n    i.Result = 'Успешно'\nGROUP BY \n    pr.ProjectName\nORDER BY \n    TotalEquipmentCost DESC\nLIMIT 5;",
            "gigachat_response_ru": "SELECT pr.ProjectName, SUM(eq.Cost) AS TotalEquipmentCost\nFROM Projects pr\nINNER JOIN Equipment eq ON pr.ProjectID = eq.ProjectID\nINNER JOIN Inspections ins ON pr.ProjectID = ins.ProjectID\nWHERE eq.Status = 'В эксплуатации' AND eq.Cost > 500000 AND ins.Result = 'Успешно'\nGROUP BY pr.ProjectName\nORDER BY TotalEquipmentCost DESC\nLIMIT 5;"
        },
        {
            "question": "Какие проекты имеют более двух успешных инспекций, оборудование стоимостью более 700 тысяч рублей и действующие разрешения? Показать топ-4 по общему бюджету.",
            "sql_query": "SELECT p.ProjectName, p.Budget, COUNT(DISTINCT i.InspectionID) AS SuccessfulInspections, COUNT(DISTINCT pe.PermitID) AS ActivePermits, SUM(e.Cost) AS EquipmentCost FROM Projects p JOIN Inspections i ON p.ProjectID = i.ProjectID JOIN Permits pe ON p.ProjectID = pe.ProjectID JOIN Equipment e ON e.Status = 'в эксплуатации' WHERE i.Result = 'Успешно' AND pe.Status = 'Действующий' AND e.Cost > 700000 GROUP BY p.ProjectName, p.Budget HAVING COUNT(DISTINCT i.InspectionID) > 2 AND COUNT(DISTINCT pe.PermitID) > 0 ORDER BY p.Budget DESC LIMIT 4;",
            "gpt-4o_response": "SELECT p.ProjectName, p.Budget, COUNT(DISTINCT i.InspectionID) AS SuccessfulInspections, COUNT(DISTINCT e.EquipmentID) AS ExpensiveEquipmentCount, COUNT(DISTINCT pe.PermitID) AS ActivePermits\nFROM Projects p\nJOIN Inspections i ON p.ProjectID = i.ProjectID\nJOIN Equipment e ON e.Cost > 700000\nJOIN Permits pe ON p.ProjectID = pe.ProjectID\nWHERE i.Result = 'Успешно' AND pe.Status = 'Действующий'\nGROUP BY p.ProjectID, p.ProjectName, p.Budget\nHAVING COUNT(DISTINCT i.InspectionID) > 2\nORDER BY p.Budget DESC\nLIMIT 4;",
            "gpt-4o_response_ru": "SELECT p.ProjectName, p.Budget, COUNT(DISTINCT i.InspectionID) AS SuccessfulInspections, COUNT(DISTINCT e.EquipmentID) AS ExpensiveEquipment, COUNT(DISTINCT pe.PermitID) AS ActivePermits\nFROM Projects p\nJOIN Inspections i ON p.ProjectID = i.ProjectID\nJOIN Equipment e ON e.Cost > 700000\nJOIN Permits pe ON p.ProjectID = pe.ProjectID\nWHERE i.Result = 'Успешно' AND pe.Status = 'Действующий'\nGROUP BY p.ProjectID, p.ProjectName, p.Budget\nHAVING COUNT(DISTINCT i.InspectionID) > 2\nORDER BY p.Budget DESC\nLIMIT 4;",
            "google/gemini-2.0-flash-001_response": "SELECT \n    p.ProjectName,\n    p.Budget,\n    COUNT(DISTINCT i.InspectionID) AS SuccessfulInspectionCount,\n    e.EquipmentName,\n    e.Cost,\n    pm.PermitType,\n    pm.Status\nFROM Projects p\nJOIN Inspections i ON p.ProjectID = i.ProjectID AND i.Result = 'Успешно'\nJOIN (\n    SELECT DISTINCT ProjectID\n    FROM Equipment e\n    JOIN Buildings b ON e.SupplierID = b.BuildingID  -- Assuming Equipment is somehow related to Buildings through SupplierID\n    WHERE e.Cost > 700000\n) AS ExpensiveEquipmentProjects ON p.ProjectID = ExpensiveEquipmentProjects.ProjectID\nJOIN Equipment e ON e.SupplierID > 0  -- Assuming Equipment is somehow related to Projects\nJOIN Permits pm ON p.ProjectID = pm.ProjectID AND pm.Status = 'Действующий'\nWHERE p.ProjectID IN (SELECT ProjectID FROM Inspections WHERE Result = 'Успешно' GROUP BY ProjectID HAVING COUNT(*) > 2)\nGROUP BY p.ProjectName, p.Budget, e.EquipmentName, e.Cost, pm.PermitType, pm.Status\nHAVING COUNT(DISTINCT i.InspectionID) > 2\nORDER BY p.Budget DESC\nLIMIT 4;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT p.ProjectName, p.Budget\nFROM Projects p\nJOIN Inspections i ON p.ProjectID = i.ProjectID\nJOIN Equipment e ON e.SupplierID IN (SELECT SupplierID FROM Materials WHERE MaterialID IN (SELECT BuildingID FROM Buildings WHERE ProjectID = p.ProjectID))\nJOIN Permits pe ON p.ProjectID = pe.ProjectID\nWHERE i.Result = 'Успешно'\n  AND e.Cost > 700000\n  AND pe.Status = 'Действующий'\nGROUP BY p.ProjectID, p.ProjectName, p.Budget\nHAVING COUNT(DISTINCT i.InspectionID) > 2\nORDER BY p.Budget DESC\nLIMIT 4;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT p.ProjectName, p.Budget, COUNT(i.InspectionID) AS SuccessfulInspections, SUM(e.Cost) AS TotalEquipmentCost, COUNT(DISTINCT pe.PermitID) AS ActivePermits\nFROM Projects p\nJOIN Inspections i ON p.ProjectID = i.ProjectID AND i.Result = 'Успешно'\nJOIN Equipment e ON p.ProjectID = e.ProjectID AND e.Cost > 700000\nJOIN Permits pe ON p.ProjectID = pe.ProjectID AND pe.Status = 'Действующий'\nGROUP BY p.ProjectName, p.Budget\nHAVING COUNT(i.InspectionID) > 2\nORDER BY p.Budget DESC\nLIMIT 4;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    p.ProjectName, \n    p.Budget, \n    COUNT(DISTINCT i.InspectionID) AS SuccessfulInspections, \n    SUM(e.Cost) AS TotalEquipmentCost, \n    COUNT(DISTINCT pe.PermitID) AS ActivePermits\nFROM \n    Projects p\nJOIN \n    Inspections i ON p.ProjectID = i.ProjectID AND i.Result = 'Успешно'\nJOIN \n    Equipment e ON p.ProjectID = e.EquipmentID AND e.Cost > 700000\nJOIN \n    Permits pe ON p.ProjectID = pe.ProjectID AND pe.Status = 'Действующий'\nGROUP BY \n    p.ProjectName, \n    p.Budget\nHAVING \n    COUNT(DISTINCT i.InspectionID) > 2\nORDER BY \n    p.Budget DESC\nLIMIT 4;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT p.ProjectID, p.ProjectName, p.Budget, COUNT(DISTINCT i.InspectionID) AS SuccessfulInspections\nFROM Projects p\nJOIN Inspections i ON p.ProjectID = i.ProjectID\nJOIN Equipment e ON e.EquipmentID > 0\nJOIN Permits pe ON p.ProjectID = pe.ProjectID\nWHERE i.Result = 'Успешно'\nAND e.Cost > 700000\nAND pe.Status = 'Действующий'\nGROUP BY p.ProjectID, p.ProjectName, p.Budget\nHAVING COUNT(DISTINCT i.InspectionID) > 2\nORDER BY p.Budget DESC\nLIMIT 4;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    p.ProjectID,\n    p.ProjectName,\n    p.Budget,\n    p.Location,\n    COUNT(DISTINCT i.InspectionID) AS SuccessfulInspectionsCount\nFROM \n    Projects p\nJOIN \n    Inspections i ON p.ProjectID = i.ProjectID\nJOIN \n    Equipment e ON p.ProjectID = e.EquipmentID\nJOIN \n    Permits per ON p.ProjectID = per.ProjectID\nWHERE \n    i.Result = 'Успешно'\n    AND e.Cost > 700000\n    AND per.Status = 'Действующий'\nGROUP BY \n    p.ProjectID, p.ProjectName, p.Budget, p.Location\nHAVING \n    COUNT(DISTINCT i.InspectionID) > 2\nORDER BY \n    p.Budget DESC\nLIMIT 4;",
            "gigachat_response": "SELECT TOP 4 \n    pr.ProjectName, \n    pr.Budget, \n    COUNT(i.InspectionID) AS NumSuccessfulInspections, \n    eq.EquipmentName, \n    eq.Cost, \n    pe.PermitType, \n    pe.Status\nFROM \n    Projects pr\nJOIN \n    Inspections i ON pr.ProjectID = i.ProjectID\nJOIN \n    Equipment eq ON pr.ProjectID = eq.ProjectID\nJOIN \n    Permits pe ON pr.ProjectID = pe.ProjectID\nWHERE \n    i.Result = 'Успешно'\nAND \n    eq.Cost > 700000\nAND \n    pe.Status = 'Действующий'\nGROUP BY \n    pr.ProjectName, \n    pr.Budget, \n    eq.EquipmentName, \n    eq.Cost, \n    pe.PermitType, \n    pe.Status\nHAVING \n    COUNT(i.InspectionID) > 2\nORDER BY \n    pr.Budget DESC;",
            "gigachat_response_ru": "SELECT pr.ProjectName, pr.Budget\nFROM Projects pr\nINNER JOIN (\n    SELECT ProjectID, COUNT(*) as SuccessCount\n    FROM Inspections\n    WHERE Result = 'Успешно'\n    GROUP BY ProjectID\n    HAVING COUNT(*) > 2\n) ins ON pr.ProjectID = ins.ProjectID\nINNER JOIN (\n    SELECT ProjectID\n    FROM Equipment eq\n    INNER JOIN Buildings bu ON eq.EquipmentID = bu.BuildingID\n    WHERE eq.Cost > 700000\n) equ ON pr.ProjectID = equ.ProjectID\nINNER JOIN (\n    SELECT ProjectID\n    FROM Permits\n    WHERE Status = 'Действующий'\n) per ON pr.ProjectID = per.ProjectID\nORDER BY pr.Budget DESC\nLIMIT 4;"
        },
        {
            "question": "Какие архитекторы, работающие над проектами в стиле 'Современный' или 'Классический', имеют награды после 2012 года и средний бюджет проектов более 80 миллионов? Показать топ-3 результата.",
            "sql_query": "SELECT a.FirstName, a.LastName, COUNT(DISTINCT aw.AwardID) AS AwardCount, AVG(p.Budget) AS AvgBudget FROM Architects a JOIN Projects p ON a.ArchitectID = p.ArchitectID JOIN Designs d ON p.ProjectID = d.ProjectID JOIN Awards aw ON a.ArchitectID = aw.ArchitectID WHERE d.Style IN ('Современный', 'Классический') AND aw.Year > 2012 GROUP BY a.FirstName, a.LastName HAVING AVG(p.Budget) > 80000000 ORDER BY AwardCount DESC, AvgBudget DESC LIMIT 3;",
            "gpt-4o_response": "SELECT a.FirstName, a.LastName, AVG(p.Budget) AS AverageBudget, COUNT(DISTINCT aw.AwardID) AS AwardCount\nFROM Architects a\nJOIN Projects p ON a.ArchitectID = p.ArchitectID\nJOIN Designs d ON p.ProjectID = d.ProjectID\nJOIN Awards aw ON a.ArchitectID = aw.ArchitectID\nWHERE d.Style IN ('Современный', 'Классический')\nAND aw.Year > 2012\nGROUP BY a.FirstName, a.LastName\nHAVING AVG(p.Budget) > 80000000\nORDER BY AwardCount DESC, AverageBudget DESC\nLIMIT 3;",
            "gpt-4o_response_ru": "SELECT a.FirstName, a.LastName, AVG(p.Budget) AS AvgBudget\nFROM Architects a\nJOIN Projects p ON a.ArchitectID = p.ArchitectID\nJOIN Designs d ON p.ProjectID = d.ProjectID\nJOIN Awards aw ON a.ArchitectID = aw.ArchitectID\nWHERE d.Style IN ('Современный', 'Классический')\nAND aw.Year > 2012\nGROUP BY a.FirstName, a.LastName\nHAVING AVG(p.Budget) > 80000000\nORDER BY AvgBudget DESC\nLIMIT 3;",
            "google/gemini-2.0-flash-001_response": "SELECT a.FirstName, a.LastName, AVG(p.Budget) AS AverageBudget\nFROM Architects a\nJOIN Projects p ON a.ArchitectID = p.ArchitectID\nJOIN Designs d ON p.ProjectID = d.ProjectID\nJOIN Awards aw ON a.ArchitectID = aw.ArchitectID\nWHERE d.Style IN ('Современный', 'Классический')\nAND aw.Year > 2012\nGROUP BY a.ArchitectID, a.FirstName, a.LastName\nHAVING AVG(p.Budget) > 80000000\nORDER BY AverageBudget DESC\nLIMIT 3;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT a.FirstName, a.LastName, AVG(p.Budget) AS AverageBudget\nFROM Architects a\nJOIN Projects p ON a.ArchitectID = p.ArchitectID\nJOIN Designs d ON p.ProjectID = d.ProjectID\nJOIN Awards aw ON a.ArchitectID = aw.ArchitectID\nWHERE d.Style IN ('Современный', 'Классический')\n  AND aw.Year > 2012\nGROUP BY a.ArchitectID, a.FirstName, a.LastName\nHAVING AVG(p.Budget) > 80000000\nORDER BY AverageBudget DESC\nLIMIT 3;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT DISTINCT a.FirstName, a.LastName, AVG(p.Budget) AS AverageBudget, COUNT(DISTINCT d.DesignID) AS DesignCount, COUNT(DISTINCT aw.AwardID) AS AwardCount\nFROM Architects a\nJOIN Designs d ON a.ArchitectID = d.ArchitectID\nJOIN Projects p ON d.ProjectID = p.ProjectID\nJOIN Awards aw ON a.ArchitectID = aw.ArchitectID\nWHERE d.Style IN ('Современный', 'Классический') AND aw.Year > 2012 AND p.Budget > 80000000\nGROUP BY a.FirstName, a.LastName\nORDER BY AverageBudget DESC\nLIMIT 3;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    a.FirstName, \n    a.LastName, \n    AVG(p.Budget) AS AverageBudget,\n    COUNT(DISTINCT aw.AwardID) AS AwardCount\nFROM \n    Architects a\nJOIN \n    Projects p ON a.ArchitectID = p.ArchitectID\nJOIN \n    Designs d ON p.ProjectID = d.ProjectID\nJOIN \n    Awards aw ON a.ArchitectID = aw.ArchitectID\nWHERE \n    d.Style IN ('Современный', 'Классический') \n    AND aw.Year > 2012\nGROUP BY \n    a.FirstName, \n    a.LastName\nHAVING \n    AVG(p.Budget) > 80000000\nORDER BY \n    AwardCount DESC, \n    AverageBudget DESC\nLIMIT 3;",
            "deepseek/deepseek-chat-v3-0324_response": "```\nSELECT SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL Server SQL",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT a.FirstName, a.LastName, COUNT(DISTINCT aw.AwardID) AS AwardCount, AVG(p.Budget) AS AvgBudget\nFROM Architects a\nJOIN Projects p ON a.ArchitectID = p.ArchitectID\nJOIN Designs d ON p.ProjectID = d.ProjectID AND a.ArchitectID = d.ArchitectID\nJOIN Awards aw ON a.ArchitectID = aw.ArchitectID\nWHERE d.Style IN ('Современный', 'Классический') \n  AND aw.Year > 2012\nGROUP BY a.ArchitectID, a.FirstName, a.LastName\nHAVING AVG(p.Budget) > 80000000\nORDER BY AvgBudget DESC\nLIMIT 3;",
            "gigachat_response": "SELECT \n    a.FirstName, \n    a.LastName, \n    d.DesignStyle, \n    AVG(p.Budget) AS AverageBudget\nFROM \n    Architects a\nJOIN \n    Projects p ON a.ArchitectID = p.ArchitectID\nJOIN \n    Designs d ON p.ProjectID = d.ProjectID\nJOIN \n    Awards aw ON a.ArchitectID = aw.ArchitectID\nWHERE \n    d.Style IN ('Современный', 'Классический')\nAND \n    aw.Year > 2012\nGROUP BY \n    a.FirstName, \n    a.LastName, \n    d.DesignStyle\nHAVING \n    AVG(p.Budget) > 80000000\nORDER BY \n    AverageBudget DESC\nLIMIT 3;",
            "gigachat_response_ru": "SELECT \n    a.FirstName, \n    a.LastName, \n    AVG(p.Budget) AS AverageBudget\nFROM \n    Architects a\nJOIN \n    Projects p ON a.ArchitectID = p.ArchitectID\nJOIN \n    Designs d ON p.ProjectID = d.ProjectID\nLEFT JOIN \n    Awards aw ON a.ArchitectID = aw.ArchitectID\nWHERE \n    d.Style IN ('Современный', 'Классический')\nAND \n    aw.Year > 2012\nGROUP BY \n    a.FirstName, a.LastName\nHAVING \n    AVG(p.Budget) > 80000000\nORDER BY \n    AverageBudget DESC\nLIMIT 3;"
        },
        {
            "question": "Какие поставщики, поставляющие материалы с качеством выше 7, имеют оборудование в эксплуатации и работают над проектами с успешными инспекциями? Показать топ-5 по общему количеству проектов.",
            "sql_query": "SELECT s.SupplierName, COUNT(DISTINCT p.ProjectID) AS ProjectCount, COUNT(DISTINCT e.EquipmentID) AS EquipmentCount FROM Suppliers s JOIN Materials m ON s.SupplierID = m.SupplierID JOIN Projects p ON p.Location IN (SELECT DISTINCT Location FROM Projects) JOIN Equipment e ON s.SupplierID = e.SupplierID JOIN Inspections i ON p.ProjectID = i.ProjectID WHERE m.QualityRating > 7 AND e.Status = 'в эксплуатации' AND i.Result = 'Успешно' GROUP BY s.SupplierName HAVING COUNT(DISTINCT p.ProjectID) > 0 ORDER BY ProjectCount DESC LIMIT 5;",
            "gpt-4o_response": "SELECT s.SupplierName, COUNT(DISTINCT p.ProjectID) AS ProjectCount\nFROM Suppliers s\nJOIN Materials m ON s.SupplierID = m.SupplierID\nJOIN Equipment e ON s.SupplierID = e.SupplierID\nJOIN Projects p ON m.MaterialID > 0\nJOIN Inspections i ON p.ProjectID = i.ProjectID\nWHERE m.QualityRating > 7\nAND e.Status = 'в эксплуатации'\nAND i.Result = 'Успешно'\nGROUP BY s.SupplierName\nORDER BY ProjectCount DESC\nLIMIT 5;",
            "gpt-4o_response_ru": "SELECT s.SupplierName, COUNT(DISTINCT p.ProjectID) AS ProjectCount\nFROM Suppliers s\nJOIN Materials m ON s.SupplierID = m.SupplierID\nJOIN Equipment e ON s.SupplierID = e.SupplierID\nJOIN Projects p ON p.ProjectID IN (\n    SELECT i.ProjectID\n    FROM Inspections i\n    WHERE i.Result = 'Успешно'\n)\nWHERE m.QualityRating > 7\nAND e.Status = 'в эксплуатации'\nGROUP BY s.SupplierName\nORDER BY ProjectCount DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    s.SupplierName,\n    COUNT(DISTINCT p.ProjectID) AS TotalProjects\nFROM\n    Suppliers s\nJOIN\n    Materials m ON s.SupplierID = m.SupplierID\nJOIN\n    Equipment e ON s.SupplierID = e.SupplierID\nJOIN\n    Projects p ON p.ProjectID IN (SELECT ProjectID FROM Inspections WHERE Result = 'Успешно')\nWHERE\n    m.QualityRating > 7\n    AND e.Status = 'в эксплуатации'\nGROUP BY\n    s.SupplierName\nORDER BY\n    TotalProjects DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    s.SupplierName,\n    s.ContactName,\n    COUNT(DISTINCT p.ProjectID) AS TotalProjects\nFROM Suppliers s\nJOIN Materials m ON s.SupplierID = m.SupplierID\nJOIN Equipment e ON s.SupplierID = e.SupplierID\nJOIN Projects p ON p.ProjectID IN (SELECT ProjectID FROM Inspections WHERE Result = 'Успешно')\nWHERE m.QualityRating > 7\n  AND e.Status = 'в эксплуатации'\nGROUP BY s.SupplierName, s.ContactName\nORDER BY TotalProjects DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    s.SupplierName, \n    COUNT(DISTINCT p.ProjectID) AS ProjectCount,\n    COUNT(DISTINCT e.EquipmentID) AS EquipmentCount,\n    COUNT(DISTINCT i.InspectionID) AS InspectionCount\nFROM \n    Suppliers s\nJOIN \n    Materials m ON s.SupplierID = m.SupplierID\nJOIN \n    Projects p ON m.MaterialID IN (SELECT MaterialID FROM Materials WHERE SupplierID = s.SupplierID)\nJOIN \n    Inspections i ON p.ProjectID = i.ProjectID\nJOIN \n    Equipment e ON s.SupplierID = e.SupplierID\nWHERE \n    m.QualityRating > 7 \n    AND e.Status = 'в эксплуатации' \n    AND i.Result = 'Успешно'\nGROUP BY \n    s.SupplierName\nORDER BY \n    ProjectCount DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    s.SupplierName, \n    COUNT(DISTINCT p.ProjectID) AS ProjectCount\nFROM \n    Suppliers s\nJOIN \n    Materials m ON s.SupplierID = m.SupplierID\nJOIN \n    Equipment e ON s.SupplierID = e.SupplierID\nJOIN \n    Projects p ON e.EquipmentID IN (SELECT EquipmentID FROM Equipment WHERE Status = 'в эксплуатации' AND SupplierID = s.SupplierID)\nJOIN \n    Inspections i ON p.ProjectID = i.ProjectID\nWHERE \n    m.QualityRating > 7 AND i.Result = 'Успешно'\nGROUP BY \n    s.SupplierName\nORDER BY \n    ProjectCount DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response": "**SQL Query**:\n```sql\nSELECT s.SupplierName, s.SupplierID FROM Suppliers JOIN Projects ON Suppliers.SupplierID = Projects.SupplierID WHERE Projects.QuantityInStock > 7 AND Projects.QuantityInStock > 7 AND Projects.ORDERID > 7 AND Projects.QuantityInStock > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID > 7 AND Projects.ORDERID",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT s.SupplierName, COUNT(DISTINCT p.ProjectID) AS ProjectCount\nFROM Suppliers s\nJOIN Materials m ON s.SupplierID = m.SupplierID\nJOIN Equipment e ON s.SupplierID = e.SupplierID\nJOIN Projects p ON p.ProjectID IN (\n    SELECT DISTINCT i.ProjectID \n    FROM Inspections i \n    WHERE i.Result = 'Успешно'\n)\nWHERE m.QualityRating > 7 \nAND e.Status = 'в эксплуатации'\nGROUP BY s.SupplierName\nORDER BY ProjectCount DESC\nLIMIT 5;",
            "gigachat_response": "SELECT TOP 5 \n    s.SupplierName,\n    COUNT(DISTINCT p.ProjectID) AS TotalProjects\nFROM \n    Suppliers s\nJOIN \n    Materials m ON s.SupplierID = m.SupplierID\nJOIN \n    Equipment eq ON s.SupplierID = eq.SupplierID\nJOIN \n    Projects p ON m.MaterialID IN (SELECT MaterialID FROM Buildings WHERE ProjectID = p.ProjectID)\nJOIN \n    Inspections i ON p.ProjectID = i.ProjectID\nWHERE \n    m.QualityRating > 7 \nAND \n    eq.Status = 'в эксплуатации'\nAND \n    i.Result = 'Успешно'\nGROUP BY \n    s.SupplierName\nORDER BY \n    TotalProjects DESC;",
            "gigachat_response_ru": "SELECT TOP 5 s.SupplierName, COUNT(DISTINCT p.ProjectID) AS ProjectCount\nFROM Suppliers s\nJOIN Materials m ON s.SupplierID = m.SupplierID\nJOIN Equipment eq ON s.SupplierID = eq.SupplierID\nJOIN Projects p ON p.ProjectID IN (SELECT ProjectID FROM Inspections WHERE Result = 'Успешно')\nWHERE m.QualityRating > 7 AND eq.Status = 'В эксплуатации'\nGROUP BY s.SupplierName\nORDER BY ProjectCount DESC;"
        },
        {
            "question": "Какие проекты имеют более одного действующего разрешения, успешные инспекции и используют материалы с качеством выше 8? Показать топ-4 по общей стоимости материалов.",
            "sql_query": "SELECT p.ProjectName, COUNT(DISTINCT pe.PermitID) AS PermitCount, COUNT(DISTINCT i.InspectionID) AS SuccessfulInspections, SUM(m.CostPerUnit * m.QuantityInStock) AS TotalMaterialCost FROM Projects p JOIN Permits pe ON p.ProjectID = pe.ProjectID JOIN Inspections i ON p.ProjectID = i.ProjectID JOIN Materials m ON m.QualityRating > 8 WHERE pe.Status = 'Действующий' AND i.Result = 'Успешно' GROUP BY p.ProjectName HAVING COUNT(DISTINCT pe.PermitID) > 1 AND COUNT(DISTINCT i.InspectionID) > 0 ORDER BY TotalMaterialCost DESC LIMIT 4;",
            "gpt-4o_response": "WITH ActivePermits AS (\n    SELECT ProjectID\n    FROM Permits\n    WHERE Status = 'Действующий'\n    GROUP BY ProjectID\n    HAVING COUNT(PermitID) > 1\n),\nSuccessfulInspections AS (\n    SELECT DISTINCT ProjectID\n    FROM Inspections\n    WHERE Result = 'Успешно'\n),\nHighQualityMaterials AS (\n    SELECT m.MaterialID, m.CostPerUnit * m.QuantityInStock AS TotalMaterialCost\n    FROM Materials m\n    WHERE m.QualityRating > 8\n),\nProjectMaterialCosts AS (\n    SELECT p.ProjectID, SUM(hqm.TotalMaterialCost) AS TotalMaterialCost\n    FROM Projects p\n    JOIN Buildings b ON p.ProjectID = b.ProjectID\n    JOIN HighQualityMaterials hqm ON b.Material = hqm.MaterialID\n    GROUP BY p.ProjectID\n)\nSELECT p.ProjectID, p.ProjectName, p.Budget, pmc.TotalMaterialCost\nFROM Projects p\nJOIN ActivePermits ap ON p.ProjectID = ap.ProjectID\nJOIN SuccessfulInspections si ON p.ProjectID = si.ProjectID\nJOIN ProjectMaterialCosts pmc ON p.ProjectID = pmc.ProjectID\nORDER BY pmc.TotalMaterialCost DESC\nLIMIT 4;",
            "gpt-4o_response_ru": "SELECT \n    p.ProjectName,\n    COUNT(DISTINCT pe.PermitID) AS ActivePermits,\n    COUNT(DISTINCT i.InspectionID) AS SuccessfulInspections,\n    SUM(m.CostPerUnit * m.QuantityInStock) AS TotalMaterialCost\nFROM \n    Projects p\nJOIN \n    Permits pe ON p.ProjectID = pe.ProjectID\nJOIN \n    Inspections i ON p.ProjectID = i.ProjectID\nJOIN \n    Materials m ON m.QualityRating > 8\nWHERE \n    pe.Status = 'Действующий' AND \n    i.Result = 'Успешно'\nGROUP BY \n    p.ProjectID\nHAVING \n    COUNT(DISTINCT pe.PermitID) > 1\nORDER BY \n    TotalMaterialCost DESC\nLIMIT 4;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    p.ProjectName,\n    COUNT(DISTINCT pe.PermitID) AS NumberOfActivePermits,\n    COUNT(DISTINCT i.InspectionID) AS NumberOfSuccessfulInspections,\n    SUM(m.CostPerUnit * m.QuantityInStock) AS TotalMaterialCost\nFROM\n    Projects p\nJOIN\n    Permits pe ON p.ProjectID = pe.ProjectID\nJOIN\n    Inspections i ON p.ProjectID = i.ProjectID\nJOIN\n    Buildings b ON p.ProjectID = b.ProjectID\nJOIN\n    Materials m ON b.Material = m.MaterialName\nWHERE\n    pe.Status = 'Действующий' AND i.Result = 'Успешно' AND m.QualityRating > 8\nGROUP BY\n    p.ProjectName\nHAVING\n    COUNT(DISTINCT pe.PermitID) > 1\nORDER BY\n    TotalMaterialCost DESC\nLIMIT 4;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    p.ProjectName,\n    COUNT(DISTINCT pe.PermitID) AS NumberOfActivePermits,\n    SUM(m.CostPerUnit * m.QuantityInStock) AS TotalMaterialCost\nFROM\n    Projects p\nJOIN\n    Permits pe ON p.ProjectID = pe.ProjectID\nJOIN\n    Inspections i ON p.ProjectID = i.ProjectID\nJOIN\n    Buildings b ON p.ProjectID = b.ProjectID\nJOIN\n    Materials m ON b.Material = m.MaterialName  \nWHERE\n    pe.Status = 'Действующий'\n    AND i.Result = 'Успешно'\n    AND m.QualityRating > 8\nGROUP BY\n    p.ProjectName\nHAVING\n    COUNT(DISTINCT pe.PermitID) > 1\nORDER BY\n    TotalMaterialCost DESC\nLIMIT 4;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH ProjectPermits AS (\n  SELECT p.ProjectID, COUNT(pr.PermitID) AS PermitCount\n  FROM Projects p\n  JOIN Permits pr ON p.ProjectID = pr.ProjectID\n  WHERE pr.Status = 'Действующий'\n  GROUP BY p.ProjectID\n),\nProjectInspections AS (\n  SELECT p.ProjectID, COUNT(i.InspectionID) AS InspectionCount\n  FROM Projects p\n  JOIN Inspections i ON p.ProjectID = i.ProjectID\n  WHERE i.Result = 'Успешно'\n  GROUP BY p.ProjectID\n),\nProjectMaterials AS (\n  SELECT p.ProjectID, SUM(m.CostPerUnit * m.QuantityInStock) AS MaterialCost\n  FROM Projects p\n  JOIN Buildings b ON p.ProjectID = b.ProjectID\n  JOIN Materials m ON b.Material = m.MaterialName\n  WHERE m.QualityRating > 8\n  GROUP BY p.ProjectID\n)\nSELECT \n  p.ProjectName, \n  p.Budget, \n  pp.PermitCount, \n  pi.InspectionCount, \n  pm.MaterialCost\nFROM Projects p\nJOIN ProjectPermits pp ON p.ProjectID = pp.ProjectID\nJOIN ProjectInspections pi ON p.ProjectID = pi.ProjectID\nJOIN ProjectMaterials pm ON p.ProjectID = pm.ProjectID\nWHERE pp.PermitCount > 1 AND pi.InspectionCount > 0\nORDER BY pm.MaterialCost DESC\nLIMIT 4;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    p.ProjectName, \n    COUNT(DISTINCT pe.PermitID) AS PermitCount, \n    COUNT(DISTINCT i.InspectionID) AS InspectionCount, \n    SUM(m.CostPerUnit * m.QuantityInStock) AS TotalMaterialCost\nFROM \n    Projects p\nJOIN \n    Permits pe ON p.ProjectID = pe.ProjectID AND pe.Status = 'Действующий'\nJOIN \n    Inspections i ON p.ProjectID = i.ProjectID AND i.Result = 'Успешно'\nJOIN \n    Buildings b ON p.ProjectID = b.ProjectID\nJOIN \n    Materials m ON b.Material = m.MaterialName AND m.QualityRating > 8\nGROUP BY \n    p.ProjectName\nHAVING \n    COUNT(DISTINCT pe.PermitID) > 1 AND COUNT(DISTINCT i.InspectionID) > 0\nORDER BY \n    TotalMaterialCost DESC\nLIMIT 4;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT p.ProjectID, p.ProjectName, COUNT(DISTINCT per.PermitID) AS ActivePermits, COUNT(DISTINCT i.InspectionID) AS SuccessfulInspections, SUM(m.CostPerUnit * m.QuantityInStock) AS TotalMaterialCost\nFROM Projects p\nJOIN Permits per ON p.ProjectID = per.ProjectID\nJOIN Inspections i ON p.ProjectID = i.ProjectID\nJOIN Buildings b ON p.ProjectID = b.ProjectID\nJOIN Materials m ON m.QualityRating > 8\nWHERE per.Status = 'Действующий' AND i.Result = 'Успешно'\nGROUP BY p.ProjectID, p.ProjectName\nHAVING COUNT(DISTINCT per.PermitID) > 1 AND COUNT(DISTINCT i.InspectionID) > 0\nORDER BY TotalMaterialCost DESC\nLIMIT 4;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    p.ProjectID,\n    p.ProjectName,\n    SUM(m.CostPerUnit * m.QuantityInStock) AS TotalMaterialCost\nFROM \n    Projects p\nJOIN Buildings b ON p.ProjectID = b.ProjectID\nJOIN Materials m ON m.QualityRating > 8\nJOIN (\n    SELECT \n        ProjectID, \n        COUNT(*) AS PermitCount\n    FROM \n        Permits\n    WHERE \n        Status = 'Действующий'\n    GROUP BY \n        ProjectID\n    HAVING \n        COUNT(*) > 1\n) AS PermitStats ON p.ProjectID = PermitStats.ProjectID\nJOIN (\n    SELECT \n        ProjectID\n    FROM \n        Inspections\n    WHERE \n        Result = 'Успешно'\n    GROUP BY \n        ProjectID\n) AS InspectionStats ON p.ProjectID = InspectionStats.ProjectID\nGROUP BY \n    p.ProjectID, p.ProjectName\nORDER BY \n    TotalMaterialCost DESC\nLIMIT 4;",
            "gigachat_response": "SELECT \n    pr.ProjectName,\n    pr.Location,\n    SUM(mat.CostPerUnit * mat.QuantityInStock) AS TotalMaterialCost\nFROM \n    Projects pr\nJOIN \n    Buildings bu ON pr.ProjectID = bu.ProjectID\nJOIN \n    Materials mat ON bu.Material = mat.MaterialName\nJOIN \n    Permits pe ON pr.ProjectID = pe.ProjectID\nJOIN \n    Inspections ins ON pr.ProjectID = ins.ProjectID\nWHERE \n    -- More than one active permit per project\n    (SELECT COUNT(*) FROM Permits WHERE ProjectID = pr.ProjectID AND Status = 'Действующий') > 1\nAND \n    -- Only successful inspections\n    ins.Result = 'Успешно'\nAND \n    -- Materials quality above 8\n    mat.QualityRating > 8\nGROUP BY \n    pr.ProjectName, pr.Location\nORDER BY \n    TotalMaterialCost DESC\nLIMIT 4;",
            "gigachat_response_ru": "SELECT TOP 4 \n    pr.ProjectName,\n    SUM(mat.CostPerUnit * mat.QuantityInStock) AS TotalMaterialCost\nFROM \n    Projects pr\nINNER JOIN \n    Buildings bu ON pr.ProjectID = bu.ProjectID\nINNER JOIN \n    Materials mat ON bu.Material = mat.MaterialName\nINNER JOIN \n    Permits pe ON pr.ProjectID = pe.ProjectID\nINNER JOIN \n    Inspections ins ON pr.ProjectID = ins.ProjectID\nWHERE \n    pe.Status = 'Действующий'\nAND \n    ins.Result = 'Успешно'\nAND \n    mat.QualityRating > 8\nGROUP BY \n    pr.ProjectName\nHAVING \n    COUNT(DISTINCT pe.PermitID) > 1\nORDER BY \n    TotalMaterialCost DESC;"
        },
        {
            "question": "Какие архитекторы, специализирующиеся на жилищной или ландшафтной архитектуре, имеют проекты с бюджетом более 100 миллионов и успешные инспекции? Показать топ-3 по общему количеству успешных инспекций.",
            "sql_query": "SELECT a.FirstName, a.LastName, a.Specialization, COUNT(DISTINCT i.InspectionID) AS SuccessfulInspections, SUM(p.Budget) AS TotalBudget FROM Architects a JOIN Projects p ON a.ArchitectID = p.ArchitectID JOIN Inspections i ON p.ProjectID = i.ProjectID WHERE a.Specialization IN ('Жилищная архитектура', 'Ландшафтная архитектура') AND p.Budget > 100000000 AND i.Result = 'Успешно' GROUP BY a.FirstName, a.LastName, a.Specialization HAVING COUNT(DISTINCT i.InspectionID) > 0 ORDER BY SuccessfulInspections DESC LIMIT 3;",
            "gpt-4o_response": "SELECT a.FirstName, a.LastName, a.Specialization, COUNT(DISTINCT i.InspectionID) AS SuccessfulInspections\nFROM Architects a\nJOIN Projects p ON a.ArchitectID = p.ArchitectID\nJOIN Inspections i ON p.ProjectID = i.ProjectID\nWHERE a.Specialization IN ('Жилищная архитектура', 'Ландшафтная архитектура')\nAND p.Budget > 100000000\nAND i.Result = 'Успешно'\nGROUP BY a.FirstName, a.LastName, a.Specialization\nORDER BY SuccessfulInspections DESC\nLIMIT 3;",
            "gpt-4o_response_ru": "SELECT a.FirstName, a.LastName, a.Specialization, COUNT(DISTINCT i.InspectionID) AS SuccessfulInspections\nFROM Architects a\nJOIN Projects p ON a.ArchitectID = p.ArchitectID\nJOIN Inspections i ON p.ProjectID = i.ProjectID\nWHERE a.Specialization IN ('Жилищная архитектура', 'Ландшафтная архитектура')\nAND p.Budget > 100000000\nAND i.Result = 'Успешно'\nGROUP BY a.FirstName, a.LastName, a.Specialization\nORDER BY SuccessfulInspections DESC\nLIMIT 3;",
            "google/gemini-2.0-flash-001_response": "SELECT a.FirstName, a.LastName, a.Specialization, COUNT(i.InspectionID) AS SuccessfulInspections\nFROM Architects a\nJOIN Projects p ON a.ArchitectID = p.ArchitectID\nJOIN Inspections i ON p.ProjectID = i.ProjectID\nWHERE a.Specialization IN ('Жилищная архитектура', 'Ландшафтная архитектура')\n  AND p.Budget > 100000000\n  AND i.Result = 'Успешно'\nGROUP BY a.FirstName, a.LastName, a.Specialization\nORDER BY SuccessfulInspections DESC\nLIMIT 3;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    a.FirstName,\n    a.LastName,\n    COUNT(i.InspectionID) AS SuccessfulInspections\nFROM\n    Architects a\nJOIN\n    Projects p ON a.ArchitectID = p.ArchitectID\nJOIN\n    Inspections i ON p.ProjectID = i.ProjectID\nWHERE\n    a.Specialization IN ('Жилищная архитектура', 'Ландшафтная архитектура')\n    AND p.Budget > 100000000\n    AND i.Result = 'Успешно'\nGROUP BY\n    a.ArchitectID, a.FirstName, a.LastName\nORDER BY\n    SuccessfulInspections DESC\nLIMIT 3;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    a.FirstName, \n    a.LastName, \n    a.Specialization, \n    COUNT(DISTINCT i.InspectionID) AS SuccessfulInspections\nFROM \n    Architects a \nJOIN \n    Projects p ON a.ArchitectID = p.ArchitectID \nJOIN \n    Inspections i ON p.ProjectID = i.ProjectID \nWHERE \n    a.Specialization IN ('Жилищная архитектура', 'Ландшафтная архитектура') \n    AND p.Budget > 100000000 \n    AND i.Result = 'Успешно' \nGROUP BY \n    a.FirstName, \n    a.LastName, \n    a.Specialization \nORDER BY \n    SuccessfulInspections DESC \nLIMIT 3;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    a.FirstName, \n    a.LastName, \n    a.Specialization, \n    COUNT(DISTINCT i.InspectionID) AS SuccessfulInspections\nFROM \n    Architects a\nJOIN \n    Projects p ON a.ArchitectID = p.ArchitectID\nJOIN \n    Inspections i ON p.ProjectID = i.ProjectID\nWHERE \n    a.Specialization IN ('Жилищная архитектура', 'Ландшафтная архитектура') \n    AND p.Budget > 100000000 \n    AND i.Result = 'Успешно'\nGROUP BY \n    a.FirstName, \n    a.LastName, \n    a.Specialization\nORDER BY \n    SuccessfulInspections DESC\nLIMIT 3;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT a.FirstName, a.LastName, a.Specialization, COUNT(DISTINCT i.ProjectID) AS SuccessfulInspections, SUM(p.Budget) AS TotalBudget FROM Architects a JOIN Projects p ON a.ArchitectID = p.ArchitectID JOIN Inspections i ON p.ProjectID i.ProjectID WHERE a.Specialization IN ('Жили', 'Landscape') AND p.Budget > 200000000 AND i.Result = 'Successful' GROUP BY a.FirstName, a.LastName, a.Specialization HAVING COUNT(DISTINCT i.ProjectID) > 0 ORDER BY SuccessfulInspections DESC, TotalBudget DESC LIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT a.FirstName, a.LastName, a.Specialization, COUNT(i.InspectionID) AS SuccessfulInspections \nFROM Architects a \nJOIN Projects p ON a.ArchitectID = p.ArchitectID \nJOIN Inspections i ON p.ProjectID = i.ProjectID \nWHERE a.Specialization IN ('Жилищная архитектура', 'Ландшафтная архитектура') \nAND p.Budget > 100000000 \nAND i.Result = 'Успешно' \nGROUP BY a.FirstName, a.LastName, a.Specialization \nORDER BY SuccessfulInspections DESC \nLIMIT 3;",
            "gigachat_response": "SELECT \n    a.FirstName, \n    a.LastName, \n    a.Specialization, \n    COUNT(i.InspectionID) AS SuccessfulInspections\nFROM \n    Architects a \nJOIN \n    Projects p ON a.ArchitectID = p.ArchitectID \nJOIN \n    Inspections i ON p.ProjectID = i.ProjectID \nWHERE \n    a.Specialization IN ('Жилищная архитектура', 'Ландшафтная архитектура') \n    AND p.Budget > 100000000 \n    AND i.Result = 'Успешно'\nGROUP BY \n    a.FirstName, \n    a.LastName, \n    a.Specialization\nORDER BY \n    SuccessfulInspections DESC \nLIMIT 3;",
            "gigachat_response_ru": "SELECT \n    a.FirstName, \n    a.LastName, \n    COUNT(i.InspectionID) AS SuccessfulInspections\nFROM \n    Architects a\nJOIN \n    Projects p ON a.ArchitectID = p.ArchitectID\nJOIN \n    Inspections i ON p.ProjectID = i.ProjectID\nWHERE \n    a.Specialization IN ('Жилищная архитектура', 'Ландшафтная архитектура')\nAND \n    p.Budget > 100000000\nAND \n    i.Result = 'Успешно'\nGROUP BY \n    a.FirstName, a.LastName\nORDER BY \n    SuccessfulInspections DESC\nLIMIT 3;"
        },
        {
            "question": "Какие проекты имеют оборудование в эксплуатации стоимостью более 800 тысяч рублей, успешные инспекции и используют материалы с качеством выше 8? Показать топ-5 по общему бюджету и количеству успешных инспекций.",
            "sql_query": "SELECT p.ProjectName, p.Budget, COUNT(DISTINCT i.InspectionID) AS SuccessfulInspections, SUM(e.Cost) AS TotalEquipmentCost FROM Projects p JOIN Equipment e ON e.Status = 'в эксплуатации' JOIN Inspections i ON p.ProjectID = i.ProjectID JOIN Materials m ON m.QualityRating > 8 WHERE e.Cost > 800000 AND i.Result = 'Успешно' GROUP BY p.ProjectName, p.Budget HAVING COUNT(DISTINCT i.InspectionID) > 0 ORDER BY p.Budget DESC, SuccessfulInspections DESC LIMIT 5;",
            "gpt-4o_response": "SELECT \n    p.ProjectName,\n    p.Budget,\n    COUNT(DISTINCT i.InspectionID) AS SuccessfulInspections,\n    SUM(m.CostPerUnit * m.QuantityInStock) AS TotalMaterialCost\nFROM \n    Projects p\nJOIN \n    Equipment e ON p.ProjectID = e.EquipmentID\nJOIN \n    Inspections i ON p.ProjectID = i.ProjectID\nJOIN \n    Materials m ON m.MaterialID > 0\nWHERE \n    e.Status = 'в эксплуатации' \n    AND e.Cost > 800000 \n    AND i.Result = 'Успешно' \n    AND m.QualityRating > 8\nGROUP BY \n    p.ProjectName, p.Budget\nORDER BY \n    p.Budget DESC, SuccessfulInspections DESC\nLIMIT 5;",
            "gpt-4o_response_ru": "SELECT \n    p.ProjectName,\n    p.Budget,\n    COUNT(DISTINCT i.InspectionID) AS SuccessfulInspections,\n    SUM(e.Cost) AS TotalEquipmentCost\nFROM \n    Projects p\nJOIN \n    Equipment e ON p.ProjectID = e.SupplierID\nJOIN \n    Inspections i ON p.ProjectID = i.ProjectID\nJOIN \n    Materials m ON e.SupplierID = m.SupplierID\nWHERE \n    e.Status = 'в эксплуатации' \n    AND e.Cost > 800000 \n    AND i.Result = 'Успешно' \n    AND m.QualityRating > 8\nGROUP BY \n    p.ProjectID, p.ProjectName, p.Budget\nORDER BY \n    p.Budget DESC, SuccessfulInspections DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response": "SELECT \n    p.ProjectName,\n    e.EquipmentName,\n    e.Cost,\n    m.MaterialName,\n    m.QualityRating,\n    COUNT(DISTINCT i.InspectionID) AS SuccessfulInspections,\n    p.Budget\nFROM Projects p\nJOIN Buildings b ON p.ProjectID = b.ProjectID\nJOIN Inspections i ON p.ProjectID = i.ProjectID\nJOIN Equipment e ON e.SupplierID IN (SELECT SupplierID FROM Materials m WHERE m.MaterialID > 0)\nJOIN Materials m ON m.SupplierID = e.SupplierID\nWHERE e.Cost > 800000\n  AND e.Status = 'в эксплуатации'\n  AND i.Result = 'Успешно'\n  AND m.QualityRating > 8\nGROUP BY p.ProjectName, e.EquipmentName, e.Cost, m.MaterialName, m.QualityRating, p.Budget\nORDER BY p.Budget DESC, SuccessfulInspections DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT \n    p.ProjectName,\n    e.EquipmentName,\n    m.MaterialName,\n    p.Budget,\n    COUNT(i.InspectionID) AS SuccessfulInspections\nFROM Projects p\nJOIN Buildings b ON p.ProjectID = b.ProjectID\nJOIN Equipment e ON e.SupplierID > 0\nJOIN Inspections i ON p.ProjectID = i.ProjectID\nJOIN Materials m ON m.MaterialID > 0\nJOIN Suppliers s ON m.SupplierID = s.SupplierID\nWHERE e.Cost > 800000\n  AND e.Status = 'в эксплуатации'\n  AND i.Result = 'Успешно'\n  AND m.QualityRating > 8\nGROUP BY p.ProjectName, e.EquipmentName, m.MaterialName, p.Budget\nORDER BY p.Budget DESC, SuccessfulInspections DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    p.ProjectName, \n    p.Budget, \n    COUNT(DISTINCT i.InspectionID) AS SuccessfulInspections, \n    SUM(e.Cost) AS TotalEquipmentCost\nFROM \n    Projects p\nJOIN \n    Equipment e ON p.ProjectID = e.EquipmentID\nJOIN \n    Inspections i ON p.ProjectID = i.ProjectID\nJOIN \n    Materials m ON p.ProjectID = m.ProjectID\nWHERE \n    e.Status = 'в эксплуатации' \n    AND e.Cost > 800000 \n    AND i.Result = 'Успешно' \n    AND m.QualityRating > 8\nGROUP BY \n    p.ProjectName, \n    p.Budget\nORDER BY \n    p.Budget DESC, \n    SuccessfulInspections DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    p.ProjectName, \n    p.Budget, \n    COUNT(DISTINCT i.InspectionID) AS SuccessfulInspections,\n    SUM(e.Cost) AS TotalEquipmentCost\nFROM \n    Projects p\nJOIN \n    Inspections i ON p.ProjectID = i.ProjectID\nJOIN \n    Equipment e ON p.ProjectID = e.EquipmentID\nJOIN \n    Materials m ON p.ProjectID = m.ProjectID\nWHERE \n    e.Status = 'в эксплуатации' AND \n    e.Cost > 800000 AND \n    i.Result = 'Успешно' AND \n    m.QualityRating > 8\nGROUP BY \n    p.ProjectName, \n    p.Budget\nORDER BY \n    p.Budget DESC, \n    SuccessfulInspections DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    p.ProjectID,\n    p.ProjectName,\n    p.Budget,\n    COUNT(DISTINCT i.InspectionID) AS SuccessfulInspectionsCount\nFROM \n    Projects p\nJOIN \n    Equipment e ON p.ProjectID = e.ProjectID\nJOIN \n    Inspections i ON p.ProjectID = i.ProjectID\nJOIN \n    Buildings b ON p.ProjectID = b.ProjectID\nJOIN \n    Materials m ON b.Material = m.MaterialName\nWHERE \n    e.Cost > 800000 \n    AND e.Status = 'в эксплуатации'\n    AND i.Result = 'Успешно'\n    AND m.QualityRating > 8\nGROUP BY \n    p.ProjectID, p.ProjectName, p.Budget\nORDER BY \n    p.Budget DESC, SuccessfulInspectionsCount DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    p.ProjectID,\n    p.ProjectName,\n    p.Budget,\n    COUNT(DISTINCT i.InspectionID) AS SuccessfulInspectionsCount\nFROM \n    Projects p\nJOIN \n    Equipment e ON p.ProjectID = e.ProjectID\nJOIN \n    Inspections i ON p.ProjectID = i.ProjectID\nJOIN \n    Buildings b ON p.ProjectID = b.ProjectID\nJOIN \n    Materials m ON b.Material = m.MaterialName\nWHERE \n    e.Cost > 800000 \n    AND e.Status = 'в эксплуатации'\n    AND i.Result = 'Успешно'\n    AND m.QualityRating > 8\nGROUP BY \n    p.ProjectID, p.ProjectName, p.Budget\nORDER BY \n    p.Budget DESC, SuccessfulInspectionsCount DESC\nLIMIT 5;",
            "gigachat_response": "SELECT \n    pr.ProjectName,\n    pr.Budget,\n    COUNT(i.InspectionID) AS SuccessfulInspections\nFROM \n    Projects pr\nJOIN \n    Equipment eq ON pr.ProjectID = eq.ProjectID\nJOIN \n    Inspections i ON pr.ProjectID = i.ProjectID\nJOIN \n    Materials mat ON pr.ProjectID = mat.ProjectID\nWHERE \n    eq.Status = 'В эксплуатации'\nAND \n    eq.Cost > 800000\nAND \n    i.Result = 'Успешно'\nAND \n    mat.QualityRating > 8\nGROUP BY \n    pr.ProjectName, pr.Budget\nORDER BY \n    pr.Budget DESC, SuccessfulInspections DESC\nLIMIT 5;",
            "gigachat_response_ru": "SELECT \n    pr.ProjectName,\n    pr.Budget,\n    COUNT(i.InspectionID) AS NumSuccessfulInspections\nFROM \n    Projects pr\nJOIN \n    Equipment eq ON pr.ProjectID = eq.ProjectID\nJOIN \n    Inspections i ON pr.ProjectID = i.ProjectID\nJOIN \n    Buildings bu ON pr.ProjectID = bu.ProjectID\nWHERE \n    eq.Cost > 800000 \n    AND eq.Status = 'в эксплуатации'\n    AND i.Result = 'Успешно'\n    AND bu.Material IN (SELECT MaterialName FROM Materials WHERE QualityRating > 8)\nGROUP BY \n    pr.ProjectName, pr.Budget\nORDER BY \n    pr.Budget DESC, NumSuccessfulInspections DESC\nLIMIT 5;"
        },
        {
            "question": "Какие архитекторы, имеющие более 20 лет опыта и награды после 2010 года, работают над проектами в стиле 'Современный' или 'Классический' с бюджетом более 150 миллионов? Показать топ-4 по общему количеству проектов.",
            "sql_query": "SELECT a.FirstName, a.LastName, a.YearsOfExperience, COUNT(DISTINCT p.ProjectID) AS ProjectCount, SUM(p.Budget) AS TotalBudget FROM Architects a JOIN Projects p ON a.ArchitectID = p.ArchitectID JOIN Designs d ON p.ProjectID = d.ProjectID JOIN Awards aw ON a.ArchitectID = aw.ArchitectID WHERE a.YearsOfExperience > 20 AND aw.Year > 2010 AND d.Style IN ('Современный', 'Классический') AND p.Budget > 150000000 GROUP BY a.FirstName, a.LastName, a.YearsOfExperience HAVING COUNT(DISTINCT p.ProjectID) > 0 ORDER BY ProjectCount DESC LIMIT 4;",
            "gpt-4o_response": "SELECT a.FirstName, a.LastName, a.YearsOfExperience, COUNT(DISTINCT p.ProjectID) AS ProjectCount\nFROM Architects a\nJOIN Projects p ON a.ArchitectID = p.ArchitectID\nJOIN Designs d ON p.ProjectID = d.ProjectID\nJOIN Awards aw ON a.ArchitectID = aw.ArchitectID\nWHERE a.YearsOfExperience > 20\nAND aw.Year > 2010\nAND d.Style IN ('Современный', 'Классический')\nAND p.Budget > 150000000\nGROUP BY a.FirstName, a.LastName, a.YearsOfExperience\nORDER BY ProjectCount DESC\nLIMIT 4;",
            "gpt-4o_response_ru": "SELECT a.FirstName, a.LastName, COUNT(p.ProjectID) AS ProjectCount\nFROM Architects a\nJOIN Awards aw ON a.ArchitectID = aw.ArchitectID\nJOIN Projects p ON a.ArchitectID = p.ArchitectID\nJOIN Designs d ON p.ProjectID = d.ProjectID\nWHERE a.YearsOfExperience > 20\nAND aw.Year > 2010\nAND d.Style IN ('Современный', 'Классический')\nAND p.Budget > 150000000\nGROUP BY a.FirstName, a.LastName\nORDER BY ProjectCount DESC\nLIMIT 4;",
            "google/gemini-2.0-flash-001_response": "SELECT A.FirstName, A.LastName, COUNT(DISTINCT P.ProjectID) AS ProjectCount\nFROM Architects A\nJOIN Projects P ON A.ArchitectID = P.ArchitectID\nJOIN Designs D ON P.ProjectID = D.ProjectID\nLEFT JOIN Awards AW ON A.ArchitectID = AW.ArchitectID\nWHERE A.YearsOfExperience > 20\nAND AW.Year > 2010\nAND D.Style IN ('Современный', 'Классический')\nAND P.Budget > 150000000\nGROUP BY A.FirstName, A.LastName\nORDER BY ProjectCount DESC\nLIMIT 4;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    a.FirstName,\n    a.LastName,\n    COUNT(DISTINCT p.ProjectID) AS TotalProjects\nFROM\n    Architects a\nJOIN\n    Projects p ON a.ArchitectID = p.ArchitectID\nJOIN\n    Designs d ON p.ProjectID = d.ProjectID\nLEFT JOIN\n    Awards aw ON a.ArchitectID = aw.ArchitectID\nWHERE\n    a.YearsOfExperience > 20\n    AND aw.Year > 2010\n    AND d.Style IN ('Современный', 'Классический')\n    AND p.Budget > 150000000\nGROUP BY\n    a.ArchitectID, a.FirstName, a.LastName\nORDER BY\n    TotalProjects DESC\nLIMIT 4;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    a.FirstName, \n    a.LastName, \n    COUNT(DISTINCT p.ProjectID) AS ProjectCount\nFROM \n    Architects a\nJOIN \n    Projects p ON a.ArchitectID = p.ArchitectID\nJOIN \n    Designs d ON p.ProjectID = d.ProjectID\nJOIN \n    Awards aw ON a.ArchitectID = aw.ArchitectID\nWHERE \n    a.YearsOfExperience > 20 \n    AND aw.Year > 2010 \n    AND p.Budget > 150000000 \n    AND d.Style IN ('Современный', 'Классический')\nGROUP BY \n    a.FirstName, \n    a.LastName\nORDER BY \n    ProjectCount DESC\nLIMIT 4;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    a.FirstName, \n    a.LastName, \n    COUNT(DISTINCT p.ProjectID) AS ProjectCount\nFROM \n    Architects a\nJOIN \n    Projects p ON a.ArchitectID = p.ArchitectID\nJOIN \n    Designs d ON p.ProjectID = d.ProjectID\nJOIN \n    Awards aw ON a.ArchitectID = aw.ArchitectID\nWHERE \n    a.YearsOfExperience > 20 \n    AND aw.Year > 2010 \n    AND p.Budget > 150000000 \n    AND d.Style IN ('Современный', 'Классический')\nGROUP BY \n    a.FirstName, \n    a.LastName\nORDER BY \n    ProjectCount DESC\nLIMIT 4;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT a.FirstName, a.LastName, a.YearsOfExperience, COUNT(p.ProjectID) AS ProjectCount\nFROM Architects a\nJOIN Projects p ON a.ArchitectID = p.ArchitectID\nJOIN Awards aw ON a.ArchitectID = aw.ArchitectID\nJOIN Designs d ON p.ProjectID = d.ProjectID AND a.ArchitectID = d.ArchitectID\nWHERE a.YearsOfExperience > 20\n  AND aw.Year > 2010\n  AND d.Style IN ('Современный', 'Классический')\n  AND p.Budget > 150000000\nGROUP BY a.FirstName, a.LastName, a.YearsOfExperience\nORDER BY ProjectCount DESC\nLIMIT 4;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT a.FirstName, a.LastName, COUNT(p.ProjectID) AS ProjectCount\nFROM Architects a\nJOIN Projects p ON a.ArchitectID = p.ArchitectID\nJOIN Awards aw ON a.ArchitectID = aw.ArchitectID\nJOIN Designs d ON p.ProjectID = d.ProjectID AND a.ArchitectID = d.ArchitectID\nWHERE a.YearsOfExperience > 20\n  AND aw.Year > 2010\n  AND d.Style IN ('Современный', 'Классический')\n  AND p.Budget > 150000000\nGROUP BY a.FirstName, a.LastName\nORDER BY ProjectCount DESC\nLIMIT 4;",
            "gigachat_response": "SELECT TOP 4 \n    a.FirstName, \n    a.LastName, \n    a.YearsOfExperience, \n    d.DesignStyle, \n    COUNT(p.ProjectID) AS NumberOfProjects\nFROM \n    Architects a\nJOIN \n    Awards aw ON a.ArchitectID = aw.ArchitectID\nJOIN \n    Designs d ON a.ArchitectID = d.ArchitectID\nJOIN \n    Projects p ON d.ProjectID = p.ProjectID\nWHERE \n    a.YearsOfExperience > 20 \nAND \n    aw.Year > 2010 \nAND \n    d.Style IN ('Современный', 'Классический')\nAND \n    p.Budget > 150000000\nGROUP BY \n    a.FirstName, \n    a.LastName, \n    a.YearsOfExperience, \n    d.DesignStyle\nORDER BY \n    NumberOfProjects DESC;",
            "gigachat_response_ru": "SELECT TOP 4 \n       a.FirstName, \n       a.LastName, \n       a.YearsOfExperience, \n       COUNT(p.ProjectID) AS ProjectCount\nFROM Architects a\nJOIN Projects p ON a.ArchitectID = p.ArchitectID\nJOIN Designs d ON p.ProjectID = d.DesignID\nWHERE a.YearsOfExperience > 20 \n      AND EXISTS (SELECT 1 FROM Awards aw WHERE aw.ArchitectID = a.ArchitectID AND aw.Year > 2010)\n      AND d.Style IN ('Современный', 'Классический')\n      AND p.Budget > 150000000\nGROUP BY a.FirstName, a.LastName, a.YearsOfExperience\nORDER BY ProjectCount DESC;"
        },
        {
            "question": "Какие поставщики, имеющие оборудование в эксплуатации и поставляющие материалы с качеством выше 8, работают над проектами с успешными инспекциями и действующими разрешениями? Показать топ-3 по средней стоимости материалов.",
            "sql_query": "SELECT s.SupplierName, AVG(m.CostPerUnit) AS AvgMaterialCost, COUNT(DISTINCT p.ProjectID) AS ProjectCount FROM Suppliers s JOIN Materials m ON s.SupplierID = m.SupplierID JOIN Equipment e ON s.SupplierID = e.SupplierID JOIN Projects p ON p.Location IN (SELECT DISTINCT Location FROM Projects) JOIN Inspections i ON p.ProjectID = i.ProjectID JOIN Permits pe ON p.ProjectID = pe.ProjectID WHERE m.QualityRating > 8 AND e.Status = 'в эксплуатации' AND i.Result = 'Успешно' AND pe.Status = 'Действующий' GROUP BY s.SupplierName HAVING COUNT(DISTINCT p.ProjectID) > 0 ORDER BY AvgMaterialCost DESC LIMIT 3;",
            "gpt-4o_response": "SELECT s.SupplierName, s.ContactName, s.Email, s.PhoneNumber, AVG(m.CostPerUnit) AS AvgMaterialCost\nFROM Suppliers s\nJOIN Equipment e ON s.SupplierID = e.SupplierID\nJOIN Materials m ON s.SupplierID = m.SupplierID\nJOIN Projects p ON p.ProjectID IN (\n    SELECT DISTINCT i.ProjectID\n    FROM Inspections i\n    WHERE i.Result = 'Успешно'\n)\nJOIN Permits pe ON p.ProjectID = pe.ProjectID\nWHERE e.Status = 'в эксплуатации'\nAND m.QualityRating > 8\nAND pe.Status = 'Действующий'\nGROUP BY s.SupplierName, s.ContactName, s.Email, s.PhoneNumber\nORDER BY AvgMaterialCost DESC\nLIMIT 3;",
            "gpt-4o_response_ru": "SELECT s.SupplierName, AVG(m.CostPerUnit) AS AvgMaterialCost\nFROM Suppliers s\nJOIN Equipment e ON s.SupplierID = e.SupplierID\nJOIN Materials m ON s.SupplierID = m.SupplierID\nJOIN Projects p ON p.ProjectID IN (\n    SELECT DISTINCT p.ProjectID\n    FROM Projects p\n    JOIN Inspections i ON p.ProjectID = i.ProjectID\n    JOIN Permits pe ON p.ProjectID = pe.ProjectID\n    WHERE i.Result = 'Успешно' AND pe.Status = 'Действующий'\n)\nWHERE e.Status = 'в эксплуатации' AND m.QualityRating > 8\nGROUP BY s.SupplierName\nORDER BY AvgMaterialCost DESC\nLIMIT 3;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    s.SupplierName,\n    AVG(m.CostPerUnit) AS AverageMaterialCost\nFROM\n    Suppliers s\nJOIN\n    Equipment e ON s.SupplierID = e.SupplierID\nJOIN\n    Materials m ON s.SupplierID = m.SupplierID\nJOIN\n    Projects p ON m.MaterialID > 0  -- Linking through a condition, as there's no direct FK\nJOIN\n    Inspections i ON p.ProjectID = i.ProjectID\nJOIN\n    Permits per ON p.ProjectID = per.ProjectID\nWHERE\n    e.Status = 'в эксплуатации'\n    AND m.QualityRating > 8\n    AND i.Result = 'Успешно'\n    AND per.Status = 'Действующий'\nGROUP BY\n    s.SupplierName\nORDER BY\n    AverageMaterialCost DESC\nLIMIT 3;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    s.SupplierName,\n    s.ContactName,\n    AVG(m.CostPerUnit) AS AverageMaterialCost\nFROM\n    Suppliers s\nJOIN\n    Equipment e ON s.SupplierID = e.SupplierID\nJOIN\n    Materials m ON s.SupplierID = m.SupplierID\nJOIN\n    Projects p ON m.MaterialID > 0  -- Используем условие m.MaterialID > 0 для связи с проектами, т.к. прямой связи нет\nJOIN\n    Inspections i ON p.ProjectID = i.ProjectID\nJOIN\n    Permits pe ON p.ProjectID = pe.ProjectID\nWHERE\n    e.Status = 'в эксплуатации'\n    AND m.QualityRating > 8\n    AND i.Result = 'Успешно'\n    AND pe.Status = 'Действующий'\nGROUP BY\n    s.SupplierName,\n    s.ContactName\nORDER BY\n    AverageMaterialCost\nLIMIT 3;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    s.SupplierName, \n    AVG(m.CostPerUnit) AS Средняя_стоимость_материалов,\n    COUNT(DISTINCT p.ProjectID) AS Количество_проектов,\n    COUNT(DISTINCT i.InspectionID) AS Количество_успешных_инспекций,\n    COUNT(DISTINCT pe.PermitID) AS Количество_действующих_разрешений\nFROM \n    Suppliers s\nJOIN \n    Equipment e ON s.SupplierID = e.SupplierID\nJOIN \n    Materials m ON s.SupplierID = m.SupplierID\nJOIN \n    Projects p ON m.MaterialID IN (SELECT MaterialID FROM Materials WHERE SupplierID = s.SupplierID)\nJOIN \n    Inspections i ON p.ProjectID = i.ProjectID AND i.Result = 'Успешно'\nJOIN \n    Permits pe ON p.ProjectID = pe.ProjectID AND pe.Status = 'Действующий'\nWHERE \n    e.Status = 'в эксплуатации' AND m.QualityRating > 8\nGROUP BY \n    s.SupplierName\nORDER BY \n    Средняя_стоимость_материалов DESC\nLIMIT 3;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    s.SupplierName, \n    AVG(m.CostPerUnit) AS AverageMaterialCost,\n    COUNT(DISTINCT p.ProjectID) AS ProjectCount\nFROM \n    Suppliers s\nJOIN \n    Equipment e ON s.SupplierID = e.SupplierID\nJOIN \n    Materials m ON s.SupplierID = m.SupplierID\nJOIN \n    Projects p ON m.MaterialID IN (SELECT MaterialID FROM Materials WHERE SupplierID = s.SupplierID)\nJOIN \n    Inspections i ON p.ProjectID = i.ProjectID\nJOIN \n    Permits pe ON p.ProjectID = pe.ProjectID\nWHERE \n    e.Status = 'в эксплуатации' \n    AND m.QualityRating > 8 \n    AND i.Result = 'Успешно' \n    AND pe.Status = 'Действующий'\nGROUP BY \n    s.SupplierName\nORDER BY \n    AverageMaterialCost DESC\nLIMIT 3;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT s.SupplierName, AVG(m.CostPerUnit) AS AvgMaterialCost\nFROM Suppliers s\nJOIN Equipment e ON s.SupplierID = e.SupplierID\nJOIN Materials m ON s.SupplierID = m.SupplierID\nJOIN Projects p ON p.ProjectID IN (\n    SELECT DISTINCT i.ProjectID \n    FROM Inspections i \n    WHERE i.Result = 'Успешно'\n    INTERSECT\n    SELECT DISTINCT pr.ProjectID \n    FROM Permits pr \n    WHERE pr.Status = 'Действующий'\n)\nWHERE e.Status = 'в эксплуатации' AND m.QualityRating > 8\nGROUP BY s.SupplierName\nORDER BY AvgMaterialCost DESC\nLIMIT 3;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT s.SupplierID, s.SupplierName, AVG(m.CostPerUnit) AS AvgMaterialCost\nFROM Suppliers s\nJOIN Equipment e ON s.SupplierID = e.SupplierID\nJOIN Materials m ON s.SupplierID = m.SupplierID\nJOIN Projects p ON p.ProjectID IN (\n    SELECT DISTINCT i.ProjectID \n    FROM Inspections i \n    WHERE i.Result = 'Успешно'\n)\nJOIN Permits pe ON p.ProjectID = pe.ProjectID AND pe.Status = 'Действующий'\nWHERE e.Status = 'в эксплуатации' AND m.QualityRating > 8\nGROUP BY s.SupplierID, s.SupplierName\nORDER BY AvgMaterialCost DESC\nLIMIT 3;",
            "gigachat_response": "SELECT TOP 3\n    s.SupplierName,\n    AVG(m.CostPerUnit) AS AverageMaterialCost\nFROM\n    Suppliers s\nJOIN\n    Equipment eq ON s.SupplierID = eq.SupplierID\nJOIN\n    Materials m ON s.SupplierID = m.SupplierID\nJOIN\n    Projects prj ON m.MaterialID IN (SELECT MaterialID FROM Buildings WHERE ProjectID = prj.ProjectID)\nJOIN\n    Inspections ins ON prj.ProjectID = ins.ProjectID\nJOIN\n    Permits perm ON prj.ProjectID = perm.ProjectID\nWHERE\n    eq.Status = 'В эксплуатации'\nAND\n    m.QualityRating > 8\nAND\n    ins.Result = 'Успешно'\nAND\n    perm.Status = 'Действующий'\nGROUP BY\n    s.SupplierName\nORDER BY\n    AverageMaterialCost DESC;",
            "gigachat_response_ru": "SELECT \n    s.SupplierName,\n    AVG(m.CostPerUnit) AS AverageMaterialCost\nFROM \n    Suppliers s\nJOIN \n    Equipment e ON s.SupplierID = e.SupplierID\nJOIN \n    Materials m ON s.SupplierID = m.SupplierID\nJOIN \n    Projects p ON e.PurchaseDate BETWEEN p.StartDate AND p.EndDate OR m.DeliveryTime BETWEEN p.StartDate AND p.EndDate\nJOIN \n    Inspections i ON p.ProjectID = i.ProjectID\nJOIN \n    Permits pr ON p.ProjectID = pr.ProjectID\nWHERE \n    e.Status = 'В эксплуатации'\nAND \n    m.QualityRating > 8\nAND \n    i.Result = 'Успешно'\nAND \n    pr.Status = 'Действующий'\nGROUP BY \n    s.SupplierName\nORDER BY \n    AverageMaterialCost DESC\nLIMIT 3;"
        },
        {
            "question": "Какие проекты имеют более двух успешных инспекций, оборудование стоимостью более 900 тысяч рублей и используют материалы с качеством выше 8? Показать топ-4 по общему количеству материалов.",
            "sql_query": "SELECT p.ProjectName, COUNT(DISTINCT i.InspectionID) AS SuccessfulInspections, SUM(m.QuantityInStock) AS TotalMaterials, SUM(e.Cost) AS EquipmentCost FROM Projects p JOIN Inspections i ON p.ProjectID = i.ProjectID JOIN Materials m ON m.QualityRating > 8 JOIN Equipment e ON e.Status = 'в эксплуатации' WHERE i.Result = 'Успешно' AND e.Cost > 900000 GROUP BY p.ProjectName HAVING COUNT(DISTINCT i.InspectionID) > 2 ORDER BY TotalMaterials DESC LIMIT 4;",
            "gpt-4o_response": "SELECT p.ProjectName, COUNT(DISTINCT i.InspectionID) AS SuccessfulInspections, COUNT(DISTINCT m.MaterialID) AS MaterialCount\nFROM Projects p\nJOIN Inspections i ON p.ProjectID = i.ProjectID\nJOIN Equipment e ON p.ProjectID = e.EquipmentID\nJOIN Materials m ON m.SupplierID = e.SupplierID\nWHERE i.Result = 'Успешно'\nAND e.Cost > 900000\nAND m.QualityRating > 8\nGROUP BY p.ProjectName\nHAVING COUNT(DISTINCT i.InspectionID) > 2\nORDER BY MaterialCount DESC\nLIMIT 4;",
            "gpt-4o_response_ru": "SELECT \n    p.ProjectName,\n    COUNT(DISTINCT i.InspectionID) AS SuccessfulInspections,\n    COUNT(DISTINCT m.MaterialID) AS MaterialCount\nFROM \n    Projects p\nJOIN \n    Inspections i ON p.ProjectID = i.ProjectID\nJOIN \n    Equipment e ON p.ProjectID = e.EquipmentID\nJOIN \n    Materials m ON m.SupplierID = e.SupplierID\nWHERE \n    i.Result = 'Успешно'\n    AND e.Cost > 900000\n    AND m.QualityRating > 8\nGROUP BY \n    p.ProjectName\nHAVING \n    COUNT(DISTINCT i.InspectionID) > 2\nORDER BY \n    MaterialCount DESC\nLIMIT 4;",
            "google/gemini-2.0-flash-001_response": "SELECT \n    p.ProjectName,\n    COUNT(DISTINCT i.InspectionID) AS SuccessfulInspectionCount,\n    e.EquipmentName,\n    e.Cost AS EquipmentCost,\n    m.MaterialName,\n    SUM(m.QuantityInStock) AS TotalMaterialQuantity\nFROM Projects p\nJOIN Inspections i ON p.ProjectID = i.ProjectID\nJOIN Buildings b ON p.ProjectID = b.ProjectID\nJOIN Equipment e ON e.SupplierID IN (SELECT SupplierID FROM Materials GROUP BY SupplierID)\nJOIN Materials m ON b.Material = m.MaterialName\nWHERE i.Result = 'Успешно'\nAND e.Cost > 900000\nAND m.QualityRating > 8\nGROUP BY p.ProjectName, e.EquipmentName, e.Cost, m.MaterialName\nHAVING COUNT(DISTINCT i.InspectionID) > 2\nORDER BY TotalMaterialQuantity DESC\nLIMIT 4;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT \n    p.ProjectName,\n    COUNT(DISTINCT i.InspectionID) AS SuccessfulInspectionsCount,\n    SUM(m.CostPerUnit * m.QuantityInStock) AS TotalMaterialCost\nFROM Projects p\nJOIN Inspections i ON p.ProjectID = i.ProjectID\nJOIN Buildings b ON p.ProjectID = b.ProjectID\nJOIN Materials m ON b.Material = m.MaterialName  \nJOIN Equipment e ON e.SupplierID = m.SupplierID\nWHERE i.Result = 'Успешно'\nAND e.Cost > 900000\nAND m.QualityRating > 8\nGROUP BY p.ProjectName\nHAVING COUNT(DISTINCT i.InspectionID) > 2\nORDER BY TotalMaterialCost DESC\nLIMIT 4;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH SuccessfulInspections AS (\n  SELECT ProjectID, COUNT(InspectionID) AS SuccessfulInspectionCount\n  FROM Inspections\n  WHERE Result = 'Успешно'\n  GROUP BY ProjectID\n  HAVING COUNT(InspectionID) > 2\n),\nEquipmentCost AS (\n  SELECT ProjectID, SUM(Cost) AS TotalEquipmentCost\n  FROM Equipment\n  JOIN Projects ON Equipment.ProjectID = Projects.ProjectID\n  GROUP BY ProjectID\n  HAVING SUM(Cost) > 900000\n),\nMaterialQuality AS (\n  SELECT ProjectID, COUNT(MaterialID) AS MaterialCount\n  FROM Materials\n  JOIN Buildings ON Materials.MaterialID = Buildings.MaterialID\n  JOIN Projects ON Buildings.ProjectID = Projects.ProjectID\n  WHERE QualityRating > 8\n  GROUP BY ProjectID\n)\nSELECT \n  p.ProjectName, \n  p.Budget, \n  p.Location, \n  si.SuccessfulInspectionCount, \n  ec.TotalEquipmentCost, \n  mq.MaterialCount\nFROM Projects p\nJOIN SuccessfulInspections si ON p.ProjectID = si.ProjectID\nJOIN EquipmentCost ec ON p.ProjectID = ec.ProjectID\nJOIN MaterialQuality mq ON p.ProjectID = mq.ProjectID\nORDER BY mq.MaterialCount DESC\nLIMIT 4;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH SuccessfulInspections AS (\n  SELECT p.ProjectID, COUNT(i.InspectionID) AS SuccessfulInspectionCount\n  FROM Projects p\n  JOIN Inspections i ON p.ProjectID = i.ProjectID\n  WHERE i.Result = 'Успешно'\n  GROUP BY p.ProjectID\n),\nEquipmentCost AS (\n  SELECT p.ProjectID, SUM(e.Cost) AS TotalEquipmentCost\n  FROM Projects p\n  JOIN Equipment e ON p.ProjectID = e.EquipmentID\n  GROUP BY p.ProjectID\n),\nMaterialQuality AS (\n  SELECT p.ProjectID, COUNT(m.MaterialID) AS MaterialCount\n  FROM Projects p\n  JOIN Buildings b ON p.ProjectID = b.ProjectID\n  JOIN Materials m ON b.BuildingID = m.MaterialID\n  WHERE m.QualityRating > 8\n  GROUP BY p.ProjectID\n)\nSELECT \n  p.ProjectName, \n  si.SuccessfulInspectionCount, \n  ec.TotalEquipmentCost, \n  mq.MaterialCount\nFROM Projects p\nJOIN SuccessfulInspections si ON p.ProjectID = si.ProjectID\nJOIN EquipmentCost ec ON p.ProjectID = ec.ProjectID\nJOIN MaterialQuality mq ON p.ProjectID = mq.ProjectID\nWHERE si.SuccessfulInspectionCount > 2 AND ec.TotalEquipmentCost > 900000 AND mq.MaterialCount > 0\nORDER BY mq.MaterialCount DESC\nLIMIT 4;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT p.ProjectID, p.ProjectName, COUNT(DISTINCT i.InspectionID) AS SuccessfulInspections, COUNT(DISTINCT m.MaterialID) AS MaterialCount\nFROM Projects p\nJOIN Inspections i ON p.ProjectID = i.ProjectID\nJOIN Buildings b ON p.ProjectID = b.ProjectID\nJOIN Materials m ON m.QualityRating > 8\nJOIN Equipment e ON e.Cost > 900000\nWHERE i.Result = 'Успешно'\nGROUP BY p.ProjectID, p.ProjectName\nHAVING COUNT(DISTINCT i.InspectionID) > 2\nORDER BY MaterialCount DESC\nLIMIT 4;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT p.ProjectID, p.ProjectName, COUNT(DISTINCT i.InspectionID) AS SuccessfulInspectionsCount, COUNT(DISTINCT m.MaterialID) AS MaterialsCount\nFROM Projects p\nJOIN Inspections i ON p.ProjectID = i.ProjectID AND i.Result = 'Успешно'\nJOIN Buildings b ON p.ProjectID = b.ProjectID\nJOIN Materials m ON m.QualityRating > 8\nJOIN Equipment e ON e.Cost > 900000\nGROUP BY p.ProjectID, p.ProjectName\nHAVING COUNT(DISTINCT i.InspectionID) > 2\nORDER BY MaterialsCount DESC\nLIMIT 4;",
            "gigachat_response": "SELECT \n    pr.ProjectName,\n    COUNT(i.InspectionID) AS NumSuccessfulInspections,\n    SUM(eq.Cost) AS TotalEquipmentCost,\n    SUM(mat.QualityRating) AS TotalQualityRating,\n    COUNT(mat.MaterialID) AS TotalMaterials\nFROM \n    Projects pr\nJOIN \n    Inspections i ON pr.ProjectID = i.ProjectID\nJOIN \n    Equipment eq ON pr.ProjectID = eq.ProjectID\nJOIN \n    Materials mat ON pr.ProjectID = mat.ProjectID\nWHERE \n    i.Result = 'Успешно'\nAND \n    eq.Cost > 900000\nAND \n    mat.QualityRating > 8\nGROUP BY \n    pr.ProjectName\nHAVING \n    COUNT(i.InspectionID) > 2\nORDER BY \n    TotalMaterials DESC\nLIMIT 4;",
            "gigachat_response_ru": "SELECT pr.ProjectName, COUNT(i.InspectionID) AS NumSuccessfulInspections, SUM(eq.Cost) AS TotalEquipmentCost, SUM(mat.QualityRating) AS TotalQualityRating\nFROM Projects pr\nJOIN Inspections i ON pr.ProjectID = i.ProjectID\nJOIN Buildings bu ON pr.ProjectID = bu.ProjectID\nJOIN Equipment eq ON bu.BuildingID = eq.EquipmentID\nJOIN Materials mat ON bu.Material = mat.MaterialName\nWHERE i.Result = 'Успешно'\nAND eq.Cost > 900000\nAND mat.QualityRating > 8\nGROUP BY pr.ProjectName\nHAVING COUNT(i.InspectionID) > 2\nORDER BY SUM(mat.QuantityInStock) DESC\nLIMIT 4;"
        },
        {
            "question": "Какие проекты имеют оборудование в эксплуатации стоимостью более 1 миллиона рублей, успешные инспекции, действующие разрешения и используют материалы с качеством выше 8? Показать топ-4 по общему бюджету и количеству успешных инспекций.",
            "sql_query": "SELECT p.ProjectName, p.Budget, COUNT(DISTINCT i.InspectionID) AS SuccessfulInspections, COUNT(DISTINCT pe.PermitID) AS ActivePermits, SUM(e.Cost) AS TotalEquipmentCost FROM Projects p JOIN Equipment e ON e.Status = 'в эксплуатации' JOIN Inspections i ON p.ProjectID = i.ProjectID JOIN Permits pe ON p.ProjectID = pe.ProjectID JOIN Materials m ON m.QualityRating > 8 WHERE e.Cost > 1000000 AND i.Result = 'Успешно' AND pe.Status = 'Действующий' GROUP BY p.ProjectName, p.Budget HAVING COUNT(DISTINCT i.InspectionID) > 0 AND COUNT(DISTINCT pe.PermitID) > 0 ORDER BY p.Budget DESC, SuccessfulInspections DESC LIMIT 4;",
            "gpt-4o_response": "SELECT \n    p.ProjectName,\n    p.Budget,\n    COUNT(DISTINCT i.InspectionID) AS SuccessfulInspections,\n    COUNT(DISTINCT e.EquipmentID) AS EquipmentCount,\n    COUNT(DISTINCT m.MaterialID) AS MaterialCount\nFROM \n    Projects p\nJOIN \n    Equipment e ON p.ProjectID = e.SupplierID\nJOIN \n    Inspections i ON p.ProjectID = i.ProjectID\nJOIN \n    Permits pe ON p.ProjectID = pe.ProjectID\nJOIN \n    Materials m ON m.SupplierID = e.SupplierID\nWHERE \n    e.Status = 'в эксплуатации' \n    AND e.Cost > 1000000\n    AND i.Result = 'Успешно'\n    AND pe.Status = 'Действующий'\n    AND m.QualityRating > 8\nGROUP BY \n    p.ProjectName, p.Budget\nORDER BY \n    p.Budget DESC, SuccessfulInspections DESC\nLIMIT 4;",
            "gpt-4o_response_ru": "SELECT \n    p.ProjectName,\n    p.Budget,\n    COUNT(DISTINCT i.InspectionID) AS SuccessfulInspections\nFROM \n    Projects p\nJOIN \n    Equipment e ON p.ProjectID = e.EquipmentID\nJOIN \n    Inspections i ON p.ProjectID = i.ProjectID\nJOIN \n    Permits pe ON p.ProjectID = pe.ProjectID\nJOIN \n    Materials m ON m.MaterialID > 0\nWHERE \n    e.Status = 'в эксплуатации' \n    AND e.Cost > 1000000\n    AND i.Result = 'Успешно'\n    AND pe.Status = 'Действующий'\n    AND m.QualityRating > 8\nGROUP BY \n    p.ProjectID, p.ProjectName, p.Budget\nORDER BY \n    p.Budget DESC, SuccessfulInspections DESC\nLIMIT 4;",
            "google/gemini-2.0-flash-001_response": "SELECT \n    p.ProjectName,\n    e.EquipmentName,\n    pm.PermitType,\n    i.InspectorName,\n    m.MaterialName,\n    p.Budget,\n    COUNT(i.InspectionID) AS SuccessfulInspections\nFROM Projects p\nJOIN Equipment e ON e.SupplierID > 0\nJOIN Permits pm ON p.ProjectID = pm.ProjectID\nJOIN Inspections i ON p.ProjectID = i.ProjectID\nJOIN Buildings b ON p.ProjectID = b.ProjectID\nJOIN Materials m ON b.Material = m.MaterialName\nWHERE e.Cost > 1000000\n  AND i.Result = 'Успешно'\n  AND pm.Status = 'Действующий'\n  AND m.QualityRating > 8\nGROUP BY p.ProjectName, e.EquipmentName, pm.PermitType, i.InspectorName, m.MaterialName, p.Budget\nORDER BY p.Budget DESC, SuccessfulInspections DESC\nLIMIT 4;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    p.ProjectName,\n    e.EquipmentName,\n    e.Cost AS EquipmentCost,\n    COUNT(DISTINCT i.InspectionID) AS SuccessfulInspections,\n    SUM(p.Budget) AS TotalBudget\nFROM\n    Projects p\nJOIN\n    Equipment e ON 1=1  -- Нет прямой связи, поэтому CROSS JOIN\nJOIN\n    Inspections i ON p.ProjectID = i.ProjectID\nJOIN\n    Permits pe ON p.ProjectID = pe.ProjectID\nJOIN\n    Buildings b ON p.ProjectID = b.ProjectID\nJOIN\n    Materials m ON b.Material = m.MaterialName  -- Предполагаем, что Material в Buildings соответствует MaterialName в Materials\nWHERE\n    e.Cost > 1000000\n    AND e.Status = 'в эксплуатации'\n    AND i.Result = 'Успешно'\n    AND pe.Status = 'Действующий'\n    AND m.QualityRating > 8\nGROUP BY\n    p.ProjectName,\n    e.EquipmentName,\n    e.Cost\nORDER BY\n    TotalBudget DESC,\n    SuccessfulInspections DESC\nLIMIT 4;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    p.ProjectName, \n    p.Budget, \n    COUNT(DISTINCT i.InspectionID) AS SuccessfulInspections, \n    COUNT(DISTINCT e.EquipmentID) AS EquipmentCount, \n    COUNT(DISTINCT m.MaterialID) AS MaterialCount\nFROM \n    Projects p\nJOIN \n    Inspections i ON p.ProjectID = i.ProjectID AND i.Result = 'Успешно'\nJOIN \n    Permits pe ON p.ProjectID = pe.ProjectID AND pe.Status = 'Действующий'\nJOIN \n    Equipment e ON p.ProjectID = e.EquipmentID AND e.Status = 'В эксплуатации' AND e.Cost > 1000000\nJOIN \n    Materials m ON p.ProjectID = m.ProjectID AND m.QualityRating > 8\nGROUP BY \n    p.ProjectName, \n    p.Budget\nORDER BY \n    p.Budget DESC, \n    SuccessfulInspections DESC\nLIMIT 4;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    p.ProjectName, \n    p.Budget, \n    COUNT(DISTINCT i.InspectionID) AS SuccessfulInspections,\n    e.Cost,\n    m.MaterialName,\n    m.QualityRating\nFROM \n    Projects p\nJOIN \n    Equipment e ON p.ProjectID = e.EquipmentID\nJOIN \n    Materials m ON e.EquipmentID = m.MaterialID\nJOIN \n    Inspections i ON p.ProjectID = i.ProjectID\nJOIN \n    Permits pe ON p.ProjectID = pe.ProjectID\nWHERE \n    e.Status = 'в эксплуатации' \n    AND e.Cost > 1000000 \n    AND i.Result = 'Успешно' \n    AND pe.Status = 'Действующий'\n    AND m.QualityRating > 8\nGROUP BY \n    p.ProjectName, \n    p.Budget, \n    e.Cost, \n    m.MaterialName, \n    m.QualityRating\nORDER BY \n    p.Budget DESC, \n    SuccessfulInspections DESC\nLIMIT 4;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    p.ProjectID,\n    p.ProjectName,\n    p.Budget,\n    COUNT(DISTINCT i.InspectionID) AS SuccessfulInspectionsCount\nFROM \n    Projects p\nJOIN \n    Equipment e ON p.ProjectID = e.ProjectID\nJOIN \n    Inspections i ON p.ProjectID = i.ProjectID AND i.Result = 'Успешно'\nJOIN \n    Permits pe ON p.ProjectID = pe.ProjectID AND pe.Status = 'Действующий'\nJOIN \n    Buildings b ON p.ProjectID = b.ProjectID\nJOIN \n    Materials m ON m.QualityRating > 8\nWHERE \n    e.Cost > 1000000 AND e.Status = 'в эксплуатации'\nGROUP BY \n    p.ProjectID, p.ProjectName, p.Budget\nORDER BY \n    p.Budget DESC, SuccessfulInspectionsCount DESC\nLIMIT 4;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    p.ProjectID,\n    p.ProjectName,\n    p.Budget,\n    COUNT(DISTINCT i.InspectionID) AS SuccessfulInspectionsCount\nFROM \n    Projects p\nJOIN \n    Equipment e ON p.ProjectID = e.ProjectID\nJOIN \n    Inspections i ON p.ProjectID = i.ProjectID AND i.Result = 'Успешно'\nJOIN \n    Permits pe ON p.ProjectID = pe.ProjectID AND pe.Status = 'Действующий'\nJOIN \n    Buildings b ON p.ProjectID = b.ProjectID\nJOIN \n    Materials m ON b.Material = m.MaterialName AND m.QualityRating > 8\nWHERE \n    e.Cost > 1000000 AND e.Status = 'в эксплуатации'\nGROUP BY \n    p.ProjectID, p.ProjectName, p.Budget\nORDER BY \n    p.Budget DESC, SuccessfulInspectionsCount DESC\nLIMIT 4;",
            "gigachat_response": "SELECT \n    pr.ProjectID, \n    pr.ProjectName, \n    pr.Budget, \n    COUNT(i.InspectionID) AS NumSuccessfulInspections\nFROM \n    Projects pr\nJOIN \n    Buildings bu ON pr.ProjectID = bu.ProjectID\nJOIN \n    Materials ma ON bu.Material = ma.MaterialName\nJOIN \n    Equipment eq ON pr.ProjectID = eq.ProjectID\nJOIN \n    Inspections i ON pr.ProjectID = i.ProjectID\nJOIN \n    Permits pe ON pr.ProjectID = pe.ProjectID\nWHERE \n    eq.Cost > 1000000 \n    AND eq.Status = 'в эксплуатации'\n    AND i.Result = 'Успешно'\n    AND pe.Status = 'Действующий'\n    AND ma.QualityRating > 8\nGROUP BY \n    pr.ProjectID, pr.ProjectName, pr.Budget\nORDER BY \n    pr.Budget DESC, NumSuccessfulInspections DESC\nLIMIT 4;",
            "gigachat_response_ru": "SELECT \n    pr.ProjectName,\n    pr.Budget,\n    COUNT(i.InspectionID) AS SuccessfulInspections\nFROM \n    Projects pr\nINNER JOIN \n    Buildings bu ON pr.ProjectID = bu.ProjectID\nINNER JOIN \n    Materials ma ON bu.Material = ma.MaterialName\nINNER JOIN \n    Equipment eq ON pr.ProjectID = eq.ProjectID\nINNER JOIN \n    Inspections i ON pr.ProjectID = i.ProjectID\nINNER JOIN \n    Permits pe ON pr.ProjectID = pe.ProjectID\nWHERE \n    eq.Cost > 1000000 \n    AND eq.Status = 'в эксплуатации'\n    AND i.Result = 'Успешно'\n    AND pe.Status = 'Действующий'\n    AND ma.QualityRating > 8\nGROUP BY \n    pr.ProjectID, pr.ProjectName, pr.Budget\nORDER BY \n    pr.Budget DESC, SuccessfulInspections DESC\nLIMIT 4;"
        },
        {
            "question": "Какие архитекторы, имеющие более 25 лет опыта и награды после 2011 года, работают над проектами в стиле 'Современный' или 'Классический' с бюджетом более 180 миллионов? Показать топ-3 по общему количеству проектов и наград.",
            "sql_query": "SELECT a.FirstName, a.LastName, a.YearsOfExperience, COUNT(DISTINCT p.ProjectID) AS ProjectCount, COUNT(DISTINCT aw.AwardID) AS AwardCount FROM Architects a JOIN Projects p ON a.ArchitectID = p.ArchitectID JOIN Designs d ON p.ProjectID = d.ProjectID JOIN Awards aw ON a.ArchitectID = aw.ArchitectID WHERE a.YearsOfExperience > 25 AND aw.Year > 2011 AND d.Style IN ('Современный', 'Классический') AND p.Budget > 180000000 GROUP BY a.FirstName, a.LastName, a.YearsOfExperience HAVING COUNT(DISTINCT p.ProjectID) > 0 ORDER BY ProjectCount DESC, AwardCount DESC LIMIT 3;",
            "gpt-4o_response": "SELECT a.FirstName, a.LastName, a.YearsOfExperience, COUNT(DISTINCT p.ProjectID) AS ProjectCount, COUNT(DISTINCT aw.AwardID) AS AwardCount\nFROM Architects a\nJOIN Projects p ON a.ArchitectID = p.ArchitectID\nJOIN Designs d ON p.ProjectID = d.ProjectID\nJOIN Awards aw ON a.ArchitectID = aw.ArchitectID\nWHERE a.YearsOfExperience > 25\nAND aw.Year > 2011\nAND d.Style IN ('Современный', 'Классический')\nAND p.Budget > 180000000\nGROUP BY a.FirstName, a.LastName, a.YearsOfExperience\nORDER BY (COUNT(DISTINCT p.ProjectID) + COUNT(DISTINCT aw.AwardID)) DESC\nLIMIT 3;",
            "gpt-4o_response_ru": "SELECT a.FirstName, a.LastName, COUNT(DISTINCT p.ProjectID) AS ProjectCount, COUNT(DISTINCT aw.AwardID) AS AwardCount\nFROM Architects a\nJOIN Projects p ON a.ArchitectID = p.ArchitectID\nJOIN Designs d ON p.ProjectID = d.ProjectID\nJOIN Awards aw ON a.ArchitectID = aw.ArchitectID\nWHERE a.YearsOfExperience > 25\nAND aw.Year > 2011\nAND d.Style IN ('Современный', 'Классический')\nAND p.Budget > 180000000\nGROUP BY a.FirstName, a.LastName\nORDER BY (COUNT(DISTINCT p.ProjectID) + COUNT(DISTINCT aw.AwardID)) DESC\nLIMIT 3;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    a.FirstName,\n    a.LastName,\n    COUNT(DISTINCT p.ProjectID) AS TotalProjects,\n    COUNT(DISTINCT aw.AwardID) AS TotalAwards\nFROM\n    Architects a\nJOIN\n    Projects p ON a.ArchitectID = p.ArchitectID\nLEFT JOIN\n    Awards aw ON a.ArchitectID = aw.ArchitectID AND aw.Year > 2011\nJOIN\n    Designs d ON p.ProjectID = d.ProjectID AND a.ArchitectID = d.ArchitectID\nWHERE\n    a.YearsOfExperience > 25\n    AND d.Style IN ('Современный', 'Классический')\n    AND p.Budget > 180000000\nGROUP BY\n    a.ArchitectID, a.FirstName, a.LastName\nORDER BY\n    TotalProjects DESC,\n    TotalAwards DESC\nLIMIT 3;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    a.FirstName,\n    a.LastName,\n    COUNT(DISTINCT p.ProjectID) AS TotalProjects,\n    COUNT(DISTINCT aw.AwardID) AS TotalAwards\nFROM\n    Architects a\nJOIN\n    Projects p ON a.ArchitectID = p.ArchitectID\nLEFT JOIN\n    Awards aw ON a.ArchitectID = aw.ArchitectID AND aw.Year > 2011\nJOIN\n    Designs d ON p.ProjectID = d.ProjectID AND a.ArchitectID = d.ArchitectID\nWHERE\n    a.YearsOfExperience > 25\n    AND d.Style IN ('Современный', 'Классический')\n    AND p.Budget > 180000000\nGROUP BY\n    a.ArchitectID, a.FirstName, a.LastName\nORDER BY\n    TotalProjects DESC, TotalAwards DESC\nLIMIT 3;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    a.FirstName, \n    a.LastName, \n    COUNT(DISTINCT p.ProjectID) AS ProjectCount, \n    COUNT(DISTINCT aw.AwardID) AS AwardCount\nFROM \n    Architects a\nJOIN \n    Projects p ON a.ArchitectID = p.ArchitectID\nJOIN \n    Designs d ON p.ProjectID = d.ProjectID\nJOIN \n    Awards aw ON a.ArchitectID = aw.ArchitectID\nWHERE \n    a.YearsOfExperience > 25 \n    AND d.Style IN ('Современный', 'Классический') \n    AND p.Budget > 180000000 \n    AND aw.Year > 2011\nGROUP BY \n    a.FirstName, \n    a.LastName\nORDER BY \n    ProjectCount DESC, \n    AwardCount DESC\nLIMIT 3;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    a.FirstName, \n    a.LastName, \n    COUNT(DISTINCT p.ProjectID) AS ProjectCount, \n    COUNT(DISTINCT aw.AwardID) AS AwardCount\nFROM \n    Architects a\nJOIN \n    Projects p ON a.ArchitectID = p.ArchitectID\nJOIN \n    Designs d ON p.ProjectID = d.ProjectID\nJOIN \n    Awards aw ON a.ArchitectID = aw.ArchitectID\nWHERE \n    a.YearsOfExperience > 25 \n    AND aw.Year > 2011 \n    AND (d.Style = 'Современный' OR d.Style = 'Классический')\n    AND p.Budget > 180000000\nGROUP BY \n    a.FirstName, \n    a.LastName\nORDER BY \n    ProjectCount DESC, \n    AwardCount DESC\nLIMIT 3;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT a.FirstName, a.LastName, a.YearsOfExperience, COUNT(DISTINCT p.ProjectID) AS ProjectCount, COUNT(DISTINCT aw.AwardID) AS AwardCount\nFROM Architects a\nJOIN Projects p ON a.ArchitectID = p.ArchitectID\nJOIN Designs d ON p.ProjectID = d.ProjectID AND a.ArchitectID = d.ArchitectID\nJOIN Awards aw ON a.ArchitectID = aw.ArchitectID\nWHERE a.YearsOfExperience > 25\nAND aw.Year > 2011\nAND d.Style IN ('Современный', 'Классический')\nAND p.Budget > 180000000\nGROUP BY a.FirstName, a.LastName, a.YearsOfExperience\nORDER BY ProjectCount DESC, AwardCount DESC\nLIMIT 3;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT a.FirstName, a.LastName, COUNT(DISTINCT p.ProjectID) AS ProjectCount, COUNT(DISTINCT aw.AwardID) AS AwardCount\nFROM Architects a\nJOIN Projects p ON a.ArchitectID = p.ArchitectID\nJOIN Awards aw ON a.ArchitectID = aw.ArchitectID\nJOIN Designs d ON p.ProjectID = d.ProjectID AND a.ArchitectID = d.ArchitectID\nWHERE a.YearsOfExperience > 25\n  AND aw.Year > 2011\n  AND d.Style IN ('Современный', 'Классический')\n  AND p.Budget > 180000000\nGROUP BY a.FirstName, a.LastName\nORDER BY ProjectCount DESC, AwardCount DESC\nLIMIT 3;",
            "gigachat_response": "SELECT TOP 3\n    a.FirstName,\n    a.LastName,\n    a.YearsOfExperience,\n    COUNT(DISTINCT d.DesignID) AS NumberOfProjects,\n    COUNT(DISTINCT aw.AwardID) AS NumberOfAwards\nFROM\n    Architects a\nJOIN\n    Designs d ON a.ArchitectID = d.ArchitectID\nJOIN\n    Projects p ON d.ProjectID = p.ProjectID\nLEFT JOIN\n    Awards aw ON a.ArchitectID = aw.ArchitectID\nWHERE\n    a.YearsOfExperience > 25\nAND\n    aw.Year > 2011\nAND\n    p.Style IN ('Современный', 'Классический')\nAND\n    p.Budget > 180000000\nGROUP BY\n    a.FirstName,\n    a.LastName,\n    a.YearsOfExperience\nORDER BY\n    NumberOfProjects DESC,\n    NumberOfAwards DESC;",
            "gigachat_response_ru": "SELECT TOP 3 \n       a.FirstName, \n       a.LastName, \n       COUNT(DISTINCT p.ProjectID) AS ProjectCount, \n       COUNT(DISTINCT aw.AwardID) AS AwardCount\nFROM Architects a\nJOIN Projects p ON a.ArchitectID = p.ArchitectID\nLEFT JOIN Awards aw ON a.ArchitectID = aw.ArchitectID\nWHERE a.YearsOfExperience > 25 \n      AND aw.Year > 2011 \n      AND p.Style IN ('Современный', 'Классический')\n      AND p.Budget > 180000000\nGROUP BY a.FirstName, a.LastName\nORDER BY ProjectCount DESC, AwardCount DESC;"
        },
        {
            "question": "Какие проекты имеют соотношение бюджета к количеству успешных инспекций выше среднего по всем проектам, и при этом используют материалы с самым высоким рейтингом качества? Показать топ-6 проектов с детализацией расходов и состояния разрешений. [Ожидаемые колонки: Название проекта, Бюджет, Количество инспекций, Соотношение бюджета к инспекциям, Максимальное качество материалов, Количество разрешений, Статус разрешений, Общие расходы]",
            "sql_query": "WITH ProjectMetrics AS (SELECT p.ProjectID, p.ProjectName, p.Budget, COUNT(DISTINCT i.InspectionID) AS InspectionCount, p.Budget / NULLIF(COUNT(DISTINCT i.InspectionID), 0) AS BudgetPerInspection, MAX(m.QualityRating) AS MaxMaterialQuality, COUNT(DISTINCT pe.PermitID) AS PermitCount FROM Projects p LEFT JOIN Inspections i ON p.ProjectID = i.ProjectID AND i.Result = 'Успешно' LEFT JOIN Materials m ON m.QualityRating IS NOT NULL LEFT JOIN Permits pe ON p.ProjectID = pe.ProjectID GROUP BY p.ProjectID, p.ProjectName, p.Budget), AvgMetrics AS (SELECT AVG(BudgetPerInspection) AS AvgBudgetPerInspection, AVG(MaxMaterialQuality) AS AvgMaxMaterialQuality FROM ProjectMetrics) SELECT pm.ProjectName, pm.Budget, pm.InspectionCount, pm.BudgetPerInspection, pm.MaxMaterialQuality, pm.PermitCount, CASE WHEN pe.Status = 'Действующий' THEN 'Активно' WHEN pe.Status = 'Ожидает проверки' THEN 'В процессе' ELSE 'Не активно' END AS PermitStatus, COALESCE(SUM(CASE WHEN f.Amount < 0 THEN ABS(f.Amount) ELSE 0 END), 0) AS TotalExpenses FROM ProjectMetrics pm JOIN Projects p ON pm.ProjectID = p.ProjectID LEFT JOIN Permits pe ON p.ProjectID = pe.ProjectID LEFT JOIN Finances f ON p.ProjectID = f.ProjectID, AvgMetrics WHERE pm.BudgetPerInspection > AvgMetrics.AvgBudgetPerInspection AND pm.MaxMaterialQuality = (SELECT MAX(QualityRating) FROM Materials) GROUP BY pm.ProjectName, pm.Budget, pm.InspectionCount, pm.BudgetPerInspection, pm.MaxMaterialQuality, pm.PermitCount, pe.Status ORDER BY pm.BudgetPerInspection DESC, TotalExpenses DESC LIMIT 6;",
            "gpt-4o_response": "WITH ProjectInspectionStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        p.Budget,\n        COUNT(i.InspectionID) AS SuccessfulInspections,\n        CASE WHEN COUNT(i.InspectionID) > 0 THEN p.Budget / COUNT(i.InspectionID) ELSE 0 END AS BudgetToInspectionRatio\n    FROM \n        Projects p\n    LEFT JOIN \n        Inspections i ON p.ProjectID = i.ProjectID AND i.Result = 'Успешно'\n    GROUP BY \n        p.ProjectID, p.ProjectName, p.Budget\n),\nAverageBudgetToInspection AS (\n    SELECT \n        AVG(BudgetToInspectionRatio) AS AvgBudgetToInspectionRatio\n    FROM \n        ProjectInspectionStats\n),\nTopQualityMaterials AS (\n    SELECT \n        MAX(m.QualityRating) AS MaxQualityRating\n    FROM \n        Materials m\n),\nProjectMaterialQuality AS (\n    SELECT \n        p.ProjectID,\n        MAX(m.QualityRating) AS MaxMaterialQuality\n    FROM \n        Projects p\n    JOIN \n        Buildings b ON p.ProjectID = b.ProjectID\n    JOIN \n        Materials m ON b.Material = m.MaterialName\n    GROUP BY \n        p.ProjectID\n),\nPermitStats AS (\n    SELECT \n        p.ProjectID,\n        COUNT(pe.PermitID) AS PermitCount,\n        GROUP_CONCAT(DISTINCT pe.Status) AS PermitStatuses\n    FROM \n        Projects p\n    LEFT JOIN \n        Permits pe ON p.ProjectID = pe.ProjectID\n    GROUP BY \n        p.ProjectID\n),\nProjectExpenses AS (\n    SELECT \n        f.ProjectID,\n        SUM(CASE WHEN f.Amount < 0 THEN -f.Amount ELSE 0 END) AS TotalExpenses\n    FROM \n        Finances f\n    GROUP BY \n        f.ProjectID\n)\nSELECT \n    pis.ProjectName,\n    pis.Budget,\n    pis.SuccessfulInspections,\n    pis.BudgetToInspectionRatio,\n    pmq.MaxMaterialQuality,\n    ps.PermitCount,\n    ps.PermitStatuses,\n    pe.TotalExpenses\nFROM \n    ProjectInspectionStats pis\nJOIN \n    AverageBudgetToInspection abi ON pis.BudgetToInspectionRatio > abi.AvgBudgetToInspectionRatio\nJOIN \n    ProjectMaterialQuality pmq ON pis.ProjectID = pmq.ProjectID\nJOIN \n    TopQualityMaterials tqm ON pmq.MaxMaterialQuality = tqm.MaxQualityRating\nLEFT JOIN \n    PermitStats ps ON pis.ProjectID = ps.ProjectID\nLEFT JOIN \n    ProjectExpenses pe ON pis.ProjectID = pe.ProjectID\nORDER BY \n    pis.BudgetToInspectionRatio DESC\nLIMIT 6;",
            "gpt-4o_response_ru": "WITH AvgBudgetToInspections AS (\n    SELECT AVG(p.Budget / NULLIF(COUNT(i.InspectionID), 0)) AS AvgRatio\n    FROM Projects p\n    LEFT JOIN Inspections i ON p.ProjectID = i.ProjectID\n    GROUP BY p.ProjectID\n),\nProjectStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        p.Budget,\n        COUNT(i.InspectionID) AS InspectionCount,\n        p.Budget / NULLIF(COUNT(i.InspectionID), 0) AS BudgetToInspectionsRatio,\n        MAX(m.QualityRating) AS MaxMaterialQuality,\n        COUNT(DISTINCT pe.PermitID) AS PermitCount,\n        GROUP_CONCAT(DISTINCT pe.Status) AS PermitStatuses,\n        SUM(CASE WHEN f.TransactionType LIKE 'Расходы%' THEN f.Amount ELSE 0 END) AS TotalExpenses\n    FROM Projects p\n    LEFT JOIN Inspections i ON p.ProjectID = i.ProjectID AND i.Result = 'Успешно'\n    LEFT JOIN Buildings b ON p.ProjectID = b.ProjectID\n    LEFT JOIN Materials m ON b.Material = m.MaterialName\n    LEFT JOIN Permits pe ON p.ProjectID = pe.ProjectID\n    LEFT JOIN Finances f ON p.ProjectID = f.ProjectID\n    GROUP BY p.ProjectID\n),\nFilteredProjects AS (\n    SELECT \n        ps.ProjectID,\n        ps.ProjectName,\n        ps.Budget,\n        ps.InspectionCount,\n        ps.BudgetToInspectionsRatio,\n        ps.MaxMaterialQuality,\n        ps.PermitCount,\n        ps.PermitStatuses,\n        ps.TotalExpenses\n    FROM ProjectStats ps, AvgBudgetToInspections abi\n    WHERE ps.BudgetToInspectionsRatio > abi.AvgRatio\n    AND ps.MaxMaterialQuality = (SELECT MAX(QualityRating) FROM Materials)\n)\nSELECT \n    ProjectName AS Название_проекта,\n    Budget AS Бюджет,\n    InspectionCount AS Количество_инспекций,\n    BudgetToInspectionsRatio AS Соотношение_бюджета_к_инспекциям,\n    MaxMaterialQuality AS Максимальное_качество_материалов,\n    PermitCount AS Количество_разрешений,\n    PermitStatuses AS Статус_разрешений,\n    TotalExpenses AS Общие_расходы\nFROM FilteredProjects\nORDER BY BudgetToInspectionsRatio DESC\nLIMIT 6;",
            "google/gemini-2.0-flash-001_response": "WITH ProjectInspectionCounts AS (\n    SELECT\n        ProjectID,\n        COUNT(InspectionID) AS InspectionCount\n    FROM Inspections\n    WHERE Result = 'Успешно'\n    GROUP BY ProjectID\n),\nMaterialQuality AS (\n    SELECT\n        b.ProjectID,\n        MAX(m.QualityRating) AS MaxQualityRating\n    FROM Buildings b\n    JOIN Projects p ON b.ProjectID = p.ProjectID\n    JOIN Materials m ON b.Material = m.MaterialName\n    GROUP BY b.ProjectID\n),\nProjectFinances AS (\n    SELECT\n        ProjectID,\n        SUM(Amount) AS TotalExpenses\n    FROM Finances\n    WHERE TransactionType LIKE '%Расходы%'\n    GROUP BY ProjectID\n),\nPermitStatuses AS (\n    SELECT\n        ProjectID,\n        COUNT(PermitID) AS PermitCount,\n        GROUP_CONCAT(DISTINCT Status) AS PermitStatuses\n    FROM Permits\n    GROUP BY ProjectID\n),\nProjectRatios AS (\n    SELECT\n        p.ProjectID,\n        p.ProjectName,\n        p.Budget,\n        COALESCE(pic.InspectionCount, 0) AS InspectionCount,\n        CASE\n            WHEN COALESCE(pic.InspectionCount, 0) = 0 THEN 0\n            ELSE p.Budget / COALESCE(pic.InspectionCount, 0)\n        END AS BudgetToInspectionRatio,\n        COALESCE(mq.MaxQualityRating, 0) AS MaxQualityRating,\n        COALESCE(pf.TotalExpenses, 0) AS TotalExpenses,\n        COALESCE(ps.PermitCount, 0) AS PermitCount,\n        COALESCE(ps.PermitStatuses, 'N/A') AS PermitStatuses\n    FROM Projects p\n    LEFT JOIN ProjectInspectionCounts pic ON p.ProjectID = pic.ProjectID\n    LEFT JOIN MaterialQuality mq ON p.ProjectID = mq.ProjectID\n    LEFT JOIN ProjectFinances pf ON p.ProjectID = pf.ProjectID\n    LEFT JOIN PermitStatuses ps ON p.ProjectID = ps.ProjectID\n),\nAverageRatio AS (\n    SELECT AVG(BudgetToInspectionRatio) AS AvgBudgetToInspectionRatio FROM ProjectRatios\n)\nSELECT\n    pr.ProjectName AS Название_проекта,\n    pr.Budget AS Бюджет,\n    pr.InspectionCount AS Количество_инспекций,\n    pr.BudgetToInspectionRatio AS Соотношение_бюджета_к_инспекциям,\n    pr.MaxQualityRating AS Максимальное_качество_материалов,\n    pr.PermitCount AS Количество_разрешений,\n    pr.PermitStatuses AS Статус_разрешений,\n    pr.TotalExpenses AS Общие_расходы\nFROM ProjectRatios pr\nJOIN AverageRatio ar ON 1=1\nWHERE pr.BudgetToInspectionRatio > ar.AvgBudgetToInspectionRatio\nAND pr.MaxQualityRating = (SELECT MAX(MaxQualityRating) FROM ProjectRatios)\nORDER BY pr.BudgetToInspectionRatio DESC\nLIMIT 6;",
            "google/gemini-2.0-flash-001_response_ru": "WITH ProjectInspectionStats AS (\n    SELECT\n        p.ProjectID,\n        p.ProjectName,\n        p.Budget,\n        COUNT(i.InspectionID) AS InspectionCount,\n        CASE WHEN COUNT(i.InspectionID) > 0 THEN p.Budget / COUNT(i.InspectionID) ELSE p.Budget END AS BudgetPerInspection\n    FROM\n        Projects p\n    LEFT JOIN\n        Inspections i ON p.ProjectID = i.ProjectID AND i.Result = 'Успешно'\n    GROUP BY\n        p.ProjectID, p.ProjectName, p.Budget\n),\nMaterialQuality AS (\n    SELECT\n        b.ProjectID,\n        MAX(m.QualityRating) AS MaxQualityRating\n    FROM\n        Buildings b\n    JOIN\n        Materials m ON b.Material = m.MaterialName\n    GROUP BY\n        b.ProjectID\n),\nPermitStatus AS (\n    SELECT\n        p.ProjectID,\n        COUNT(pe.PermitID) AS PermitCount,\n        GROUP_CONCAT(DISTINCT pe.Status) AS PermitStatuses\n    FROM\n        Projects p\n    LEFT JOIN\n        Permits pe ON p.ProjectID = pe.ProjectID\n    GROUP BY\n        p.ProjectID\n),\nFinanceTotals AS (\n    SELECT\n        ProjectID,\n        SUM(Amount) AS TotalExpenses\n    FROM\n        Finances\n    GROUP BY\n        ProjectID\n),\nAvgBudgetPerInspection AS (\n    SELECT AVG(BudgetPerInspection) AS AvgBudgetPerInspection FROM ProjectInspectionStats\n)\nSELECT\n    pis.ProjectName AS Название_проекта,\n    pis.Budget AS Бюджет,\n    pis.InspectionCount AS Количество_инспекций,\n    pis.BudgetPerInspection AS Соотношение_бюджета_к_инспекциям,\n    mq.MaxQualityRating AS Максимальное_качество_материалов,\n    ps.PermitCount AS Количество_разрешений,\n    ps.PermitStatuses AS Статус_разрешений,\n    ft.TotalExpenses AS Общие_расходы\nFROM\n    ProjectInspectionStats pis\nJOIN\n    MaterialQuality mq ON pis.ProjectID = mq.ProjectID\nJOIN\n    PermitStatus ps ON pis.ProjectID = ps.ProjectID\nJOIN\n    FinanceTotals ft ON pis.ProjectID = ft.ProjectID\nJOIN\n    AvgBudgetPerInspection abpi ON 1=1\nWHERE pis.BudgetPerInspection > abpi.AvgBudgetPerInspection\nORDER BY\n    mq.MaxQualityRating DESC\nLIMIT 6;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH SuccessfulInspections AS (\n  SELECT ProjectID, COUNT(InspectionID) AS SuccessfulInspectionCount\n  FROM Inspections\n  WHERE Result = 'Успешно'\n  GROUP BY ProjectID\n),\nProjectBudgets AS (\n  SELECT p.ProjectID, p.Budget, p.ProjectName\n  FROM Projects p\n),\nMaterialQuality AS (\n  SELECT m.MaterialID, m.QualityRating\n  FROM Materials m\n),\nProjectMaterials AS (\n  SELECT p.ProjectID, MAX(m.QualityRating) AS MaxMaterialQuality\n  FROM Projects p\n  JOIN Buildings b ON p.ProjectID = b.ProjectID\n  JOIN Materials m ON b.Material = m.MaterialName\n  GROUP BY p.ProjectID\n),\nPermitStatus AS (\n  SELECT p.ProjectID, COUNT(PermitID) AS PermitCount, \n         CASE \n           WHEN COUNT(CASE WHEN Status = 'Действующий' THEN 1 END) > 0 THEN 'Действующие'\n           WHEN COUNT(CASE WHEN Status = 'Ожидает проверки' THEN 1 END) > 0 THEN 'Ожидает проверки'\n           WHEN COUNT(CASE WHEN Status = 'Одобрено' THEN 1 END) > 0 THEN 'Одобрено'\n           ELSE 'Отменен'\n         END AS PermitStatus\n  FROM Projects p\n  JOIN Permits pe ON p.ProjectID = pe.ProjectID\n  GROUP BY p.ProjectID\n),\nFinanceExpenses AS (\n  SELECT f.ProjectID, SUM(f.Amount) AS TotalExpenses\n  FROM Finances f\n  WHERE f.TransactionType = 'Расходы на материалы'\n  GROUP BY f.ProjectID\n)\nSELECT \n  pb.ProjectName, \n  pb.Budget, \n  si.SuccessfulInspectionCount, \n  pb.Budget / si.SuccessfulInspectionCount AS BudgetToInspectionRatio,\n  pm.MaxMaterialQuality, \n  ps.PermitCount, \n  ps.PermitStatus, \n  fe.TotalExpenses\nFROM ProjectBudgets pb\nJOIN SuccessfulInspections si ON pb.ProjectID = si.ProjectID\nJOIN ProjectMaterials pm ON pb.ProjectID = pm.ProjectID\nJOIN PermitStatus ps ON pb.ProjectID = ps.ProjectID\nJOIN FinanceExpenses fe ON pb.ProjectID = fe.ProjectID\nWHERE pm.MaxMaterialQuality = (SELECT MAX(QualityRating) FROM Materials)\nAND pb.Budget / si.SuccessfulInspectionCount > (SELECT AVG(Budget / SuccessfulInspectionCount) \n                                               FROM ProjectBudgets pb\n                                               JOIN SuccessfulInspections si ON pb.ProjectID = si.ProjectID)\nORDER BY BudgetToInspectionRatio DESC\nLIMIT 6;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH SuccessfulInspections AS (\n    SELECT ProjectID, COUNT(InspectionID) AS SuccessfulInspectionCount\n    FROM Inspections\n    WHERE Result = 'Успешно'\n    GROUP BY ProjectID\n),\nProjectBudgetInspections AS (\n    SELECT p.ProjectID, p.ProjectName, p.Budget, COALESCE(si.SuccessfulInspectionCount, 0) AS SuccessfulInspectionCount\n    FROM Projects p\n    LEFT JOIN SuccessfulInspections si ON p.ProjectID = si.ProjectID\n),\nBestMaterials AS (\n    SELECT m.MaterialID, m.MaterialName, m.QualityRating\n    FROM Materials m\n    ORDER BY m.QualityRating DESC\n    LIMIT 1\n),\nProjectMaterials AS (\n    SELECT p.ProjectID, p.ProjectName, p.Budget, COALESCE(si.SuccessfulInspectionCount, 0) AS SuccessfulInspectionCount,\n           COALESCE(bm.MaterialName, '') AS BestMaterialName, COALESCE(bm.QualityRating, 0) AS BestMaterialQualityRating\n    FROM Projects p\n    LEFT JOIN SuccessfulInspections si ON p.ProjectID = si.ProjectID\n    LEFT JOIN BestMaterials bm ON 1 = 1\n),\nProjectPermits AS (\n    SELECT p.ProjectID, COUNT(pr.PermitID) AS PermitCount,\n           CASE WHEN COUNT(pr.PermitID) > 0 THEN 'Действующие' ELSE 'Отсутствуют' END AS PermitStatus\n    FROM Projects p\n    LEFT JOIN Permits pr ON p.ProjectID = pr.ProjectID\n    GROUP BY p.ProjectID\n),\nProjectExpenses AS (\n    SELECT f.ProjectID, SUM(f.Amount) AS TotalExpenses\n    FROM Finances f\n    WHERE f.TransactionType = 'Расходы'\n    GROUP BY f.ProjectID\n)\nSELECT pm.ProjectName, pm.Budget, pm.SuccessfulInspectionCount,\n       CASE WHEN pm.SuccessfulInspectionCount > 0 THEN pm.Budget / pm.SuccessfulInspectionCount ELSE 0 END AS BudgetToInspectionRatio,\n       pm.BestMaterialQualityRating, pp.PermitCount, pp.PermitStatus, COALESCE(pe.TotalExpenses, 0) AS TotalExpenses\nFROM ProjectMaterials pm\nJOIN ProjectPermits pp ON pm.ProjectID = pp.ProjectID\nLEFT JOIN ProjectExpenses pe ON pm.ProjectID = pe.ProjectID\nWHERE pm.Budget / pm.SuccessfulInspectionCount > (SELECT AVG(BudgetToInspectionRatio) FROM (\n    SELECT p.Budget, COALESCE(si.SuccessfulInspectionCount, 0) AS SuccessfulInspectionCount,\n           CASE WHEN COALESCE(si.SuccessfulInspectionCount, 0) > 0 THEN p.Budget / COALESCE(si.SuccessfulInspectionCount, 0) ELSE 0 END AS BudgetToInspectionRatio\n    FROM Projects p\n    LEFT JOIN SuccessfulInspections si ON p.ProjectID = si.ProjectID\n) t)\nORDER BY BudgetToInspectionRatio DESC\nLIMIT 6;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH SuccessfulInspections AS (\n    SELECT \n        ProjectID, \n        COUNT(*) AS InspectionCount\n    FROM \n        Inspections\n    WHERE \n        Result = 'Успешно'\n    GROUP BY \n        ProjectID\n),\nProjectMaterialQuality AS (\n    SELECT \n        p.ProjectID,\n        MAX(m.QualityRating) AS MaxMaterialQuality\n    FROM \n        Projects p\n    JOIN \n        Buildings b ON p.ProjectID = b.ProjectID\n    JOIN \n        Materials m ON m.MaterialID > 0\n    GROUP BY \n        p.ProjectID\n),\nProjectPermits AS (\n    SELECT \n        ProjectID,\n        COUNT(*) AS PermitCount,\n        GROUP_CONCAT(Status) AS PermitStatuses\n    FROM \n        Permits\n    GROUP BY \n        ProjectID\n),\nProjectExpenses AS (\n    SELECT \n        ProjectID,\n        SUM(Amount) AS TotalExpenses\n    FROM \n        Finances\n    WHERE \n        TransactionType LIKE '%Расходы%'\n    GROUP BY \n        ProjectID\n),\nProjectStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        p.Budget,\n        COALESCE(si.InspectionCount, 0) AS InspectionCount,\n        CASE \n            WHEN COALESCE(si.InspectionCount, 0) = 0 THEN NULL\n            ELSE p.Budget / COALESCE(si.InspectionCount, 0)\n        END AS BudgetToInspectionRatio,\n        pmq.MaxMaterialQuality,\n        COALESCE(pp.PermitCount, 0) AS PermitCount,\n        COALESCE(pp.PermitStatuses, 'Нет разрешений') AS PermitStatuses,\n        COALESCE(pe.TotalExpenses, 0) AS TotalExpenses\n    FROM \n        Projects p\n    LEFT JOIN \n        SuccessfulInspections si ON p.ProjectID = si.ProjectID\n    LEFT JOIN \n        ProjectMaterialQuality pmq ON p.ProjectID = pmq.ProjectID\n    LEFT JOIN \n        ProjectPermits pp ON p.ProjectID = pp.ProjectID\n    LEFT JOIN \n        ProjectExpenses pe ON p.ProjectID = pe.ProjectID\n    WHERE \n        pmq.MaxMaterialQuality = (SELECT MAX(QualityRating) FROM Materials)\n),\nAvgBudgetToInspectionRatio AS (\n    SELECT \n        AVG(BudgetToInspectionRatio) AS AvgRatio\n    FROM \n        ProjectStats\n    WHERE \n        BudgetToInspectionRatio IS NOT NULL\n)\nSELECT \n    ps.ProjectName AS Название_проекта,\n    ps.Budget AS Бюджет,\n    ps.InspectionCount AS Количество_инспекций,\n    ps.BudgetToInspectionRatio AS Соотношение_бюджета_к_инспекциям,\n    ps.MaxMaterialQuality AS Максимальное_качество_материалов,\n    ps.PermitCount AS Количество_разрешений,\n    ps.PermitStatuses AS Статус_разрешений,\n    ps.TotalExpenses AS Общие_расходы\nFROM \n    ProjectStats ps, AvgBudgetToInspectionRatio avg\nWHERE \n    ps.BudgetToInspectionRatio > avg.AvgRatio\nORDER BY \n    ps.BudgetToInspectionRatio DESC\nLIMIT 6;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "WITH ProjectInspections AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        p.Budget,\n        COUNT(i.InspectionID) AS SuccessfulInspections,\n        CASE \n            WHEN COUNT(i.InspectionID) > 0 THEN p.Budget / COUNT(i.InspectionID)\n            ELSE NULL\n        END AS BudgetPerInspection\n    FROM \n        Projects p\n    LEFT JOIN \n        Inspections i ON p.ProjectID = i.ProjectID AND i.Result = 'Успешно'\n    GROUP BY \n        p.ProjectID, p.ProjectName, p.Budget\n),\nAvgBudgetPerInspection AS (\n    SELECT \n        AVG(BudgetPerInspection) AS AvgRatio\n    FROM \n        ProjectInspections\n    WHERE \n        BudgetPerInspection IS NOT NULL\n),\nProjectMaterials AS (\n    SELECT \n        p.ProjectID,\n        MAX(m.QualityRating) AS MaxMaterialQuality\n    FROM \n        Projects p\n    JOIN \n        Buildings b ON p.ProjectID = b.ProjectID\n    JOIN \n        Materials m ON m.MaterialID > 0\n    GROUP BY \n        p.ProjectID\n),\nProjectPermits AS (\n    SELECT \n        p.ProjectID,\n        COUNT(pe.PermitID) AS PermitCount,\n        GROUP_CONCAT(pe.Status) AS PermitStatuses\n    FROM \n        Projects p\n    LEFT JOIN \n        Permits pe ON p.ProjectID = pe.ProjectID\n    GROUP BY \n        p.ProjectID\n),\nProjectExpenses AS (\n    SELECT \n        p.ProjectID,\n        SUM(f.Amount) AS TotalExpenses\n    FROM \n        Projects p\n    LEFT JOIN \n        Finances f ON p.ProjectID = f.ProjectID AND f.TransactionType LIKE '%Расход%'\n    GROUP BY \n        p.ProjectID\n)\nSELECT \n    pi.ProjectName AS Название_проекта,\n    pi.Budget AS Бюджет,\n    pi.SuccessfulInspections AS Количество_инспекций,\n    pi.BudgetPerInspection AS Соотношение_бюджета_к_инспекциям,\n    pm.MaxMaterialQuality AS Максимальное_качество_материалов,\n    pp.PermitCount AS Количество_разрешений,\n    pp.PermitStatuses AS Статус_разрешений,\n    pe.TotalExpenses AS Общие_расходы\nFROM \n    ProjectInspections pi\nJOIN \n    ProjectMaterials pm ON pi.ProjectID = pm.ProjectID\nJOIN \n    ProjectPermits pp ON pi.ProjectID = pp.ProjectID\nJOIN \n    ProjectExpenses pe ON pi.ProjectID = pe.ProjectID\nWHERE \n    pi.BudgetPerInspection > (SELECT AvgRatio FROM AvgBudgetPerInspection)\n    AND pm.MaxMaterialQuality = (SELECT MAX(QualityRating) FROM Materials)\nORDER BY \n    pi.BudgetPerInspection DESC\nLIMIT 6;",
            "gigachat_response": "WITH ProjectDetails AS (\n    SELECT \n        pr.ProjectID,\n        pr.ProjectName,\n        pr.Budget,\n        COUNT(i.InspectionID) FILTER(WHERE i.Result = 'Успешно') AS NumSuccessfulInspections,\n        MAX(m.QualityRating) AS MaxQualityRating,\n        COUNT(DISTINCT pe.PermitID) AS NumPermits,\n        STRING_AGG(pe.Status, ', ') AS PermitStatuses,\n        SUM(f.Amount) AS TotalExpenses\n    FROM \n        Projects pr\n    LEFT JOIN \n        Inspections i ON pr.ProjectID = i.ProjectID\n    LEFT JOIN \n        Buildings bu ON pr.ProjectID = bu.ProjectID\n    LEFT JOIN \n        Materials m ON bu.Material = m.MaterialName\n    LEFT JOIN \n        Permits pe ON pr.ProjectID = pe.ProjectID\n    LEFT JOIN \n        Finances f ON pr.ProjectID = f.ProjectID\n    GROUP BY \n        pr.ProjectID, pr.ProjectName, pr.Budget\n),\nAverageBudgetToInspectionRatio AS (\n    SELECT \n        AVG(Budget / NULLIF(NumSuccessfulInspections, 0)) AS AverageRatio\n    FROM \n        ProjectDetails\n)\nSELECT \n    pd.ProjectName AS НазваниеПроекта,\n    pd.Budget AS Бюджет,\n    pd.NumSuccessfulInspections AS КоличествоИнспекций,\n    pd.Budget / NULLIF(pd.NumSuccessfulInspections, 0) AS СоотношениеБюджетаКИнспекциям,\n    pd.MaxQualityRating AS МаксимальноеКачествоМатериалы,\n    pd.NumPermits AS КоличествоРазрешений,\n    pd.PermitStatuses AS СтатусыРазрешений,\n    pd.TotalExpenses AS ОбщиеРасходы\nFROM \n    ProjectDetails pd,\n    AverageBudgetToInspectionRatio abtir\nWHERE \n    pd.Budget / NULLIF(pd.NumSuccessfulInspections, 0) > abtir.AverageRatio\n    AND pd.MaxQualityRating IS NOT NULL -- Ensure materials quality rating exists\nORDER BY \n    pd.Budget / NULLIF(pd.NumSuccessfulInspections, 0) DESC\nLIMIT 6;",
            "gigachat_response_ru": "WITH ProjectDetails AS (\n    SELECT \n        pr.ProjectID,\n        pr.ProjectName,\n        pr.Budget,\n        COUNT(i.InspectionID) FILTER(WHERE i.Result = 'Успешно') AS NumSuccessfulInspections,\n        MAX(m.QualityRating) AS MaxQualityRating,\n        COUNT(DISTINCT pe.PermitID) AS NumPermits,\n        STRING_AGG(DISTINCT pe.Status, ', ') AS PermitStatuses,\n        SUM(f.Amount) AS TotalExpenses\n    FROM \n        Projects pr\n    LEFT JOIN \n        Inspections i ON pr.ProjectID = i.ProjectID\n    LEFT JOIN \n        Buildings bu ON pr.ProjectID = bu.ProjectID\n    LEFT JOIN \n        Materials m ON bu.Material = m.MaterialName\n    LEFT JOIN \n        Permits pe ON pr.ProjectID = pe.ProjectID\n    LEFT JOIN \n        Finances f ON pr.ProjectID = f.ProjectID\n    GROUP BY \n        pr.ProjectID, pr.ProjectName, pr.Budget\n),\nAverageBudgetToInspectionRatio AS (\n    SELECT \n        AVG(CASE WHEN NumSuccessfulInspections > 0 THEN Budget::NUMERIC / NumSuccessfulInspections ELSE NULL END) AS AverageRatio\n    FROM \n        ProjectDetails\n)\nSELECT \n    pd.ProjectName AS \"Название проекта\",\n    pd.Budget AS \"Бюджет\",\n    pd.NumSuccessfulInspections AS \"Количество инспекций\",\n    CASE WHEN pd.NumSuccessfulInspections > 0 THEN pd.Budget::NUMERIC / pd.NumSuccessfulInspections ELSE NULL END AS \"Соотношение бюджета к инспекциям\",\n    pd.MaxQualityRating AS \"Максимальное качество материалов\",\n    pd.NumPermits AS \"Количество разрешений\",\n    pd.PermitStatuses AS \"Статус разрешений\",\n    pd.TotalExpenses AS \"Общие расходы\"\nFROM \n    ProjectDetails pd,\n    AverageBudgetToInspectionRatio abtir\nWHERE \n    CASE WHEN pd.NumSuccessfulInspections > 0 THEN pd.Budget::NUMERIC / pd.NumSuccessfulInspections ELSE NULL END > abtir.AverageRatio\nAND \n    pd.MaxQualityRating IS NOT NULL -- Используются материалы с максимальным качеством\nORDER BY \n    \"Соотношение бюджета к инспекциям\" DESC\nLIMIT 6;"
        },
        {
            "question": "Какие архитекторы входят в топ-10% по опыту работы, при этом имеют награды после 2012 года и руководят проектами, по которым процент успешных инспекций составляет не менее 80%? Показать топ-4 архитекторов с рейтингом их эффективности. [Ожидаемые колонки: Имя, Фамилия, Стаж работы, Специализация, Количество наград, Средний процент успешных инспекций, Количество проектов, Общий бюджет, Рейтинг эффективности]",
            "sql_query": "WITH ExperiencePercentile AS (SELECT ArchitectID, FirstName, LastName, YearsOfExperience, PERCENT_RANK() OVER (ORDER BY YearsOfExperience) AS ExpPercentile FROM Architects), ProjectStats AS (SELECT p.ArchitectID, p.ProjectID, COUNT(DISTINCT i.InspectionID) AS TotalInspections, SUM(CASE WHEN i.Result = 'Успешно' THEN 1 ELSE 0 END) AS SuccessfulInspections, CASE WHEN COUNT(DISTINCT i.InspectionID) > 0 THEN (SUM(CASE WHEN i.Result = 'Успешно' THEN 1 ELSE 0 END) * 100.0 / COUNT(DISTINCT i.InspectionID)) ELSE 0 END AS SuccessRate FROM Projects p LEFT JOIN Inspections i ON p.ProjectID = i.ProjectID GROUP BY p.ArchitectID, p.ProjectID), ArchitectEfficiency AS (SELECT a.ArchitectID, a.FirstName, a.LastName, a.YearsOfExperience, a.Specialization, COUNT(DISTINCT aw.AwardID) AS AwardCount, AVG(ps.SuccessRate) AS AvgSuccessRate, COUNT(DISTINCT p.ProjectID) AS ProjectCount, SUM(p.Budget) AS TotalBudget, (COUNT(DISTINCT aw.AwardID) * a.YearsOfExperience * AVG(ps.SuccessRate)) / 100 AS EfficiencyScore FROM Architects a JOIN ExperiencePercentile ep ON a.ArchitectID = ep.ArchitectID JOIN Awards aw ON a.ArchitectID = aw.ArchitectID JOIN Projects p ON a.ArchitectID = p.ArchitectID JOIN ProjectStats ps ON p.ProjectID = ps.ProjectID WHERE ep.ExpPercentile >= 0.9 AND aw.Year > 2012 GROUP BY a.ArchitectID, a.FirstName, a.LastName, a.YearsOfExperience, a.Specialization HAVING AVG(ps.SuccessRate) >= 80) SELECT ae.FirstName, ae.LastName, ae.YearsOfExperience, ae.Specialization, ae.AwardCount, ROUND(ae.AvgSuccessRate, 2) AS AvgSuccessRate, ae.ProjectCount, ae.TotalBudget, ROUND(ae.EfficiencyScore, 2) AS EfficiencyScore FROM ArchitectEfficiency ae ORDER BY ae.EfficiencyScore DESC, ae.YearsOfExperience DESC LIMIT 4;",
            "gpt-4o_response": "WITH TopExperiencedArchitects AS (\n    SELECT a.ArchitectID, a.FirstName, a.LastName, a.YearsOfExperience, a.Specialization\n    FROM Architects a\n    WHERE a.YearsOfExperience >= (\n        SELECT PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY YearsOfExperience) FROM Architects\n    )\n),\nArchitectAwards AS (\n    SELECT a.ArchitectID, COUNT(aw.AwardID) AS AwardCount\n    FROM TopExperiencedArchitects a\n    JOIN Awards aw ON a.ArchitectID = aw.ArchitectID\n    WHERE aw.Year > 2012\n    GROUP BY a.ArchitectID\n),\nProjectInspections AS (\n    SELECT p.ArchitectID, p.ProjectID, COUNT(i.InspectionID) AS TotalInspections,\n           SUM(CASE WHEN i.Result = 'Успешно' THEN 1 ELSE 0 END) AS SuccessfulInspections\n    FROM Projects p\n    JOIN Inspections i ON p.ProjectID = i.ProjectID\n    GROUP BY p.ArchitectID, p.ProjectID\n),\nArchitectProjectStats AS (\n    SELECT pi.ArchitectID, COUNT(DISTINCT pi.ProjectID) AS ProjectCount,\n           SUM(p.Budget) AS TotalBudget,\n           AVG(CASE WHEN pi.TotalInspections > 0 THEN (pi.SuccessfulInspections * 100.0 / pi.TotalInspections) ELSE 0 END) AS AvgSuccessRate\n    FROM ProjectInspections pi\n    JOIN Projects p ON pi.ProjectID = p.ProjectID\n    WHERE (pi.SuccessfulInspections * 100.0 / pi.TotalInspections) >= 80\n    GROUP BY pi.ArchitectID\n),\nArchitectEfficiency AS (\n    SELECT a.FirstName, a.LastName, a.YearsOfExperience, a.Specialization,\n           aw.AwardCount, aps.AvgSuccessRate, aps.ProjectCount, aps.TotalBudget,\n           ROUND((aps.AvgSuccessRate * 0.4) + (aw.AwardCount * 0.3) + (aps.ProjectCount * 0.2) + (aps.TotalBudget / 1000000 * 0.1), 2) AS EfficiencyRating\n    FROM TopExperiencedArchitects a\n    JOIN ArchitectAwards aw ON a.ArchitectID = aw.ArchitectID\n    JOIN ArchitectProjectStats aps ON a.ArchitectID = aps.ArchitectID\n)\nSELECT ae.FirstName, ae.LastName, ae.YearsOfExperience, ae.Specialization,\n       ae.AwardCount, ae.AvgSuccessRate, ae.ProjectCount, ae.TotalBudget, ae.EfficiencyRating\nFROM ArchitectEfficiency ae\nORDER BY ae.EfficiencyRating DESC\nLIMIT 4;",
            "gpt-4o_response_ru": "WITH TopExperiencedArchitects AS (\n    SELECT a.ArchitectID, a.FirstName, a.LastName, a.YearsOfExperience, a.Specialization\n    FROM Architects a\n    WHERE a.YearsOfExperience >= (\n        SELECT PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY YearsOfExperience) FROM Architects\n    )\n),\nArchitectAwards AS (\n    SELECT a.ArchitectID, COUNT(aw.AwardID) AS AwardCount\n    FROM TopExperiencedArchitects a\n    JOIN Awards aw ON a.ArchitectID = aw.ArchitectID\n    WHERE aw.Year > 2012\n    GROUP BY a.ArchitectID\n),\nProjectInspections AS (\n    SELECT p.ArchitectID, p.ProjectID, \n           AVG(CASE WHEN i.Result = 'Успешно' THEN 1 ELSE 0 END) * 100 AS SuccessRate\n    FROM Projects p\n    JOIN Inspections i ON p.ProjectID = i.ProjectID\n    GROUP BY p.ArchitectID, p.ProjectID\n),\nQualifiedArchitects AS (\n    SELECT a.ArchitectID, a.FirstName, a.LastName, a.YearsOfExperience, a.Specialization, \n           aw.AwardCount, AVG(pi.SuccessRate) AS AvgSuccessRate, COUNT(DISTINCT p.ProjectID) AS ProjectCount, \n           SUM(p.Budget) AS TotalBudget\n    FROM TopExperiencedArchitects a\n    JOIN ArchitectAwards aw ON a.ArchitectID = aw.ArchitectID\n    JOIN Projects p ON a.ArchitectID = p.ArchitectID\n    JOIN ProjectInspections pi ON p.ArchitectID = pi.ArchitectID AND p.ProjectID = pi.ProjectID\n    WHERE pi.SuccessRate >= 80\n    GROUP BY a.ArchitectID, a.FirstName, a.LastName, a.YearsOfExperience, a.Specialization, aw.AwardCount\n),\nArchitectEfficiency AS (\n    SELECT qa.ArchitectID, qa.FirstName, qa.LastName, qa.YearsOfExperience, qa.Specialization, \n           qa.AwardCount, qa.AvgSuccessRate, qa.ProjectCount, qa.TotalBudget,\n           (qa.AwardCount * 0.3 + qa.AvgSuccessRate * 0.4 + qa.ProjectCount * 0.2 + qa.TotalBudget / 1000000 * 0.1) AS EfficiencyRating\n    FROM QualifiedArchitects qa\n)\nSELECT ae.FirstName, ae.LastName, ae.YearsOfExperience, ae.Specialization, ae.AwardCount, \n       ae.AvgSuccessRate, ae.ProjectCount, ae.TotalBudget, ae.EfficiencyRating\nFROM ArchitectEfficiency ae\nORDER BY ae.EfficiencyRating DESC\nLIMIT 4;",
            "google/gemini-2.0-flash-001_response": "WITH TopArchitects AS (\n    SELECT\n        ArchitectID,\n        FirstName,\n        LastName,\n        YearsOfExperience,\n        Specialization\n    FROM Architects\n    WHERE\n        YearsOfExperience >= (SELECT PERCENTILE_CONT(0.90) WITHIN GROUP (ORDER BY YearsOfExperience) FROM Architects)\n),\nAwardedArchitects AS (\n    SELECT\n        ArchitectID,\n        COUNT(AwardID) AS AwardCount\n    FROM Awards\n    WHERE\n        Year > 2012\n    GROUP BY\n        ArchitectID\n),\nProjectInspectionStats AS (\n    SELECT\n        p.ArchitectID,\n        p.ProjectID,\n        COUNT(CASE WHEN i.Result = 'Успешно' THEN 1 ELSE NULL END) * 100.0 / COUNT(i.InspectionID) AS SuccessRate\n    FROM Projects p\n    JOIN Inspections i ON p.ProjectID = i.ProjectID\n    GROUP BY\n        p.ArchitectID,\n        p.ProjectID\n    HAVING\n        COUNT(i.InspectionID) > 0\n),\nQualifiedProjects AS (\n    SELECT\n        ArchitectID,\n        ProjectID\n    FROM ProjectInspectionStats\n    WHERE\n        SuccessRate >= 80\n),\nArchitectProjectSummary AS (\n    SELECT\n        a.ArchitectID,\n        COUNT(DISTINCT qp.ProjectID) AS ProjectCount,\n        SUM(p.Budget) AS TotalBudget,\n        AVG(pis.SuccessRate) AS AvgSuccessRate\n    FROM TopArchitects a\n    JOIN QualifiedProjects qp ON a.ArchitectID = qp.ArchitectID\n    JOIN Projects p ON qp.ProjectID = p.ProjectID\n    LEFT JOIN ProjectInspectionStats pis ON p.ProjectID = pis.ProjectID AND a.ArchitectID = pis.ArchitectID\n    GROUP BY\n        a.ArchitectID\n),\nFinalArchitects AS (\n    SELECT\n        ta.FirstName,\n        ta.LastName,\n        ta.YearsOfExperience,\n        ta.Specialization,\n        COALESCE(aa.AwardCount, 0) AS AwardCount,\n        COALESCE(aps.AvgSuccessRate, 0) AS AvgSuccessRate,\n        COALESCE(aps.ProjectCount, 0) AS ProjectCount,\n        COALESCE(aps.TotalBudget, 0) AS TotalBudget\n    FROM TopArchitects ta\n    LEFT JOIN AwardedArchitects aa ON ta.ArchitectID = aa.ArchitectID\n    LEFT JOIN ArchitectProjectSummary aps ON ta.ArchitectID = aps.ArchitectID\n    WHERE aa.AwardCount > 0 AND aps.ProjectCount > 0\n)\nSELECT\n    FirstName,\n    LastName,\n    YearsOfExperience,\n    Specialization,\n    AwardCount,\n    AvgSuccessRate,\n    ProjectCount,\n    TotalBudget,\n    (YearsOfExperience * 0.3 + AwardCount * 0.3 + AvgSuccessRate * 0.2 + ProjectCount * 0.2) AS EfficiencyRating\nFROM FinalArchitects\nORDER BY\n    EfficiencyRating DESC\nLIMIT 4;",
            "google/gemini-2.0-flash-001_response_ru": "WITH TopArchitects AS (\n    SELECT\n        ArchitectID,\n        FirstName,\n        LastName,\n        YearsOfExperience,\n        Specialization\n    FROM Architects\n    WHERE YearsOfExperience >= (SELECT PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY YearsOfExperience) FROM Architects)\n),\nAwardedArchitects AS (\n    SELECT\n        ArchitectID,\n        COUNT(AwardID) AS AwardCount\n    FROM Awards\n    WHERE Year > 2012\n    GROUP BY ArchitectID\n),\nProjectInspectionStats AS (\n    SELECT\n        ProjectID,\n        SUM(CASE WHEN Result = 'Успешно' THEN 1 ELSE 0 END) * 1.0 / COUNT(*) AS SuccessRate\n    FROM Inspections\n    GROUP BY ProjectID\n    HAVING COUNT(*) > 0\n),\nQualifiedProjects AS (\n    SELECT\n        p.ArchitectID,\n        p.ProjectID,\n        p.Budget\n    FROM Projects p\n    JOIN ProjectInspectionStats pis ON p.ProjectID = pis.ProjectID\n    WHERE pis.SuccessRate >= 0.8\n),\nArchitectProjectSummary AS (\n    SELECT\n        ta.ArchitectID,\n        ta.FirstName,\n        ta.LastName,\n        ta.YearsOfExperience,\n        ta.Specialization,\n        COALESCE(aa.AwardCount, 0) AS AwardCount,\n        COUNT(DISTINCT qp.ProjectID) AS ProjectCount,\n        SUM(qp.Budget) AS TotalBudget,\n        AVG(pis.SuccessRate) AS AvgSuccessRate\n    FROM TopArchitects ta\n    LEFT JOIN AwardedArchitects aa ON ta.ArchitectID = aa.ArchitectID\n    LEFT JOIN QualifiedProjects qp ON ta.ArchitectID = qp.ArchitectID\n    LEFT JOIN ProjectInspectionStats pis ON qp.ProjectID = pis.ProjectID\n    GROUP BY ta.ArchitectID, ta.FirstName, ta.LastName, ta.YearsOfExperience, ta.Specialization, aa.AwardCount\n    HAVING COUNT(DISTINCT qp.ProjectID) > 0\n)\nSELECT\n    aps.FirstName AS Имя,\n    aps.LastName AS Фамилия,\n    aps.YearsOfExperience AS \"Стаж работы\",\n    aps.Specialization AS Специализация,\n    aps.AwardCount AS \"Количество наград\",\n    aps.AvgSuccessRate AS \"Средний процент успешных инспекций\",\n    aps.ProjectCount AS \"Количество проектов\",\n    aps.TotalBudget AS \"Общий бюджет\",\n    (aps.YearsOfExperience * 0.4 + aps.AwardCount * 0.3 + aps.AvgSuccessRate * 100 * 0.3) AS \"Рейтинг эффективности\"\nFROM ArchitectProjectSummary aps\nORDER BY \"Рейтинг эффективности\" DESC\nLIMIT 4;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH ArchitectExperience AS (\n  SELECT ArchitectID, YearsOfExperience,\n         PERCENT_RANK() OVER (ORDER BY YearsOfExperience DESC) AS ExperiencePercentile\n  FROM Architects\n),\nAwardedArchitects AS (\n  SELECT a.ArchitectID, COUNT(*) AS AwardCount\n  FROM Architects a\n  JOIN Awards aw ON a.ArchitectID = aw.ArchitectID\n  WHERE aw.Year > 2012\n  GROUP BY a.ArchitectID\n),\nProjectInspections AS (\n  SELECT p.ProjectID, p.ArchitectID, \n         SUM(CASE WHEN i.Result = 'Успешно' THEN 1 ELSE 0 END) AS SuccessfulInspections,\n         COUNT(*) AS TotalInspections\n  FROM Projects p\n  JOIN Inspections i ON p.ProjectID = i.ProjectID\n  GROUP BY p.ProjectID, p.ArchitectID\n),\nArchitectEfficiency AS (\n  SELECT a.ArchitectID, a.FirstName, a.LastName, a.YearsOfExperience, a.Specialization,\n         COALESCE(aw.AwardCount, 0) AS AwardCount,\n         SUM(pi.SuccessfulInspections * 100.0 / pi.TotalInspections) / COUNT(pi.ProjectID) AS AverageInspectionSuccessRate,\n         COUNT(DISTINCT pi.ProjectID) AS ProjectCount,\n         SUM(p.Budget) AS TotalBudget\n  FROM Architects a\n  LEFT JOIN AwardedArchitects aw ON a.ArchitectID = aw.ArchitectID\n  JOIN Projects p ON a.ArchitectID = p.ArchitectID\n  JOIN ProjectInspections pi ON p.ProjectID = pi.ProjectID\n  GROUP BY a.ArchitectID, a.FirstName, a.LastName, a.YearsOfExperience, a.Specialization, aw.AwardCount\n),\nTopArchitects AS (\n  SELECT ae.FirstName, ae.LastName, ae.YearsOfExperience, ae.Specialization,\n         ae.AwardCount, ae.AverageInspectionSuccessRate, ae.ProjectCount, ae.TotalBudget,\n         (ae.AwardCount * 0.2) + (ae.AverageInspectionSuccessRate * 0.3) + (ae.TotalBudget / 1000000 * 0.5) AS EfficiencyRating\n  FROM ArchitectEfficiency ae\n  JOIN ArchitectExperience ae2 ON ae.ArchitectID = ae2.ArchitectID\n  WHERE ae2.ExperiencePercentile > 0.9 AND ae.AwardCount > 0 AND ae.AverageInspectionSuccessRate >= 80\n)\nSELECT FirstName, LastName, YearsOfExperience, Specialization, AwardCount, AverageInspectionSuccessRate, ProjectCount, TotalBudget, EfficiencyRating\nFROM TopArchitects\nORDER BY EfficiencyRating DESC\nLIMIT 4;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH RankedArchitects AS (\n  SELECT \n    a.FirstName, \n    a.LastName, \n    a.YearsOfExperience, \n    a.Specialization, \n    COUNT(DISTINCT aw.AwardID) AS AwardCount,\n    AVG(i.Result = 'Успешно') * 100 AS SuccessRate,\n    COUNT(DISTINCT p.ProjectID) AS ProjectCount,\n    SUM(p.Budget) AS TotalBudget,\n    ROW_NUMBER() OVER (ORDER BY a.YearsOfExperience DESC) AS ExperienceRank,\n    ROW_NUMBER() OVER (ORDER BY COUNT(DISTINCT aw.AwardID) DESC) AS AwardRank,\n    ROW_NUMBER() OVER (ORDER BY AVG(i.Result = 'Успешно') * 100 DESC) AS SuccessRank,\n    ROW_NUMBER() OVER (ORDER BY COUNT(DISTINCT p.ProjectID) DESC) AS ProjectRank,\n    ROW_NUMBER() OVER (ORDER BY SUM(p.Budget) DESC) AS BudgetRank\n  FROM \n    Architects a\n  JOIN \n    Projects p ON a.ArchitectID = p.ArchitectID\n  JOIN \n    Inspections i ON p.ProjectID = i.ProjectID\n  LEFT JOIN \n    Awards aw ON a.ArchitectID = aw.ArchitectID AND aw.Year > 2012\n  WHERE \n    a.YearsOfExperience > (SELECT PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY YearsOfExperience) FROM Architects)\n  GROUP BY \n    a.FirstName, \n    a.LastName, \n    a.YearsOfExperience, \n    a.Specialization\n  HAVING \n    AVG(i.Result = 'Успешно') * 100 >= 80\n),\nEfficiencyRanked AS (\n  SELECT \n    FirstName, \n    LastName, \n    YearsOfExperience, \n    Specialization, \n    AwardCount, \n    SuccessRate, \n    ProjectCount, \n    TotalBudget,\n    (ExperienceRank + AwardRank + SuccessRank + ProjectRank + BudgetRank) / 5 AS EfficiencyRank\n  FROM \n    RankedArchitects\n)\nSELECT \n  FirstName, \n  LastName, \n  YearsOfExperience, \n  Specialization, \n  AwardCount, \n  SuccessRate, \n  ProjectCount, \n  TotalBudget,\n  EfficiencyRank\nFROM \n  EfficiencyRanked\nORDER BY \n  EfficiencyRank\nLIMIT 4;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH RankedArchitects AS (\n    SELECT \n        a.ArchitectID,\n        a.FirstName,\n        a.LastName,\n        a.YearsOfExperience,\n        a.Specialization,\n        PERCENT_RANK() OVER (ORDER BY a.YearsOfExperience DESC) AS ExperiencePercentile\n    FROM Architects a\n),\nAwardedArchitects AS (\n    SELECT \n        a.ArchitectID,\n        COUNT(aw.AwardID) AS AwardCount\n    FROM Architects a\n    JOIN Awards aw ON a.ArchitectID = aw.ArchitectID\n    WHERE aw.Year > 2012\n    GROUP BY a.ArchitectID\n    HAVING COUNT(aw.AwardID) > 0\n),\nProjectInspections AS (\n    SELECT \n        p.ArchitectID,\n        p.ProjectID,\n        COUNT(i.InspectionID) AS TotalInspections,\n        SUM(CASE WHEN i.Result = 'Успешно' THEN 1 ELSE 0 END) AS SuccessfulInspections,\n        CASE \n            WHEN COUNT(i.InspectionID) > 0 THEN \n                (SUM(CASE WHEN i.Result = 'Успешно' THEN 1 ELSE 0 END) * 100.0 / COUNT(i.InspectionID)) \n            ELSE 0 \n        END AS SuccessPercentage\n    FROM Projects p\n    JOIN Inspections i ON p.ProjectID = i.ProjectID\n    GROUP BY p.ArchitectID, p.ProjectID\n),\nArchitectProjects AS (\n    SELECT \n        a.ArchitectID,\n        COUNT(p.ProjectID) AS ProjectCount,\n        SUM(p.Budget) AS TotalBudget,\n        AVG(pi.SuccessPercentage) AS AvgSuccessPercentage\n    FROM Architects a\n    JOIN Projects p ON a.ArchitectID = p.ArchitectID\n    JOIN ProjectInspections pi ON p.ProjectID = pi.ProjectID\n    GROUP BY a.ArchitectID\n    HAVING AVG(pi.SuccessPercentage) >= 80\n),\nEffectiveArchitects AS (\n    SELECT \n        ra.ArchitectID,\n        ra.FirstName,\n        ra.LastName,\n        ra.YearsOfExperience,\n        ra.Specialization,\n        aa.AwardCount,\n        ap.AvgSuccessPercentage,\n        ap.ProjectCount,\n        ap.TotalBudget,\n        (ra.YearsOfExperience * 0.3 + aa.AwardCount * 0.2 + ap.AvgSuccessPercentage * 0.3 + ap.ProjectCount * 0.1 + ap.TotalBudget / 1000000 * 0.1) AS EfficiencyRating\n    FROM RankedArchitects ra\n    JOIN AwardedArchitects aa ON ra.ArchitectID = aa.ArchitectID\n    JOIN ArchitectProjects ap ON ra.ArchitectID = ap.ArchitectID\n    WHERE ra.ExperiencePercentile <= 0.1\n)\nSELECT \n    FirstName AS Имя,\n    LastName AS Фамилия,\n    YearsOfExperience AS Стаж_работы,\n    Specialization AS Специализация,\n    AwardCount AS Количество_наград,\n    AvgSuccessPercentage AS Средний_процент_успешных_инспекций,\n    ProjectCount AS Количество_проектов,\n    TotalBudget AS Общий_бюджет,\n    EfficiencyRating AS Рейтинг_эффективности\nFROM EffectiveArchitects\nORDER BY EfficiencyRating DESC\nLIMIT 4;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "WITH RankedArchitects AS (\n    SELECT \n        a.ArchitectID,\n        a.FirstName,\n        a.LastName,\n        a.YearsOfExperience,\n        a.Specialization,\n        PERCENT_RANK() OVER (ORDER BY a.YearsOfExperience DESC) AS ExperiencePercentile\n    FROM Architects a\n),\nAwardedArchitects AS (\n    SELECT \n        a.ArchitectID,\n        COUNT(aw.AwardID) AS AwardCount\n    FROM Architects a\n    JOIN Awards aw ON a.ArchitectID = aw.ArchitectID\n    WHERE aw.Year > 2012\n    GROUP BY a.ArchitectID\n    HAVING COUNT(aw.AwardID) > 0\n),\nProjectInspections AS (\n    SELECT \n        p.ArchitectID,\n        p.ProjectID,\n        COUNT(i.InspectionID) AS TotalInspections,\n        SUM(CASE WHEN i.Result = 'Успешно' THEN 1 ELSE 0 END) AS SuccessfulInspections\n    FROM Projects p\n    JOIN Inspections i ON p.ProjectID = i.ProjectID\n    GROUP BY p.ArchitectID, p.ProjectID\n    HAVING SUM(CASE WHEN i.Result = 'Успешно' THEN 1 ELSE 0 END) * 100.0 / COUNT(i.InspectionID) >= 80\n),\nArchitectStats AS (\n    SELECT \n        ra.ArchitectID,\n        ra.FirstName,\n        ra.LastName,\n        ra.YearsOfExperience,\n        ra.Specialization,\n        aa.AwardCount,\n        COUNT(pi.ProjectID) AS ProjectCount,\n        SUM(p.Budget) AS TotalBudget,\n        AVG(pi.SuccessfulInspections * 100.0 / pi.TotalInspections) AS AvgSuccessRate,\n        (ra.YearsOfExperience * 0.3 + aa.AwardCount * 0.2 + COUNT(pi.ProjectID) * 0.2 + SUM(p.Budget) / 1000000 * 0.3) AS EfficiencyRating\n    FROM RankedArchitects ra\n    JOIN AwardedArchitects aa ON ra.ArchitectID = aa.ArchitectID\n    JOIN ProjectInspections pi ON ra.ArchitectID = pi.ArchitectID\n    JOIN Projects p ON pi.ProjectID = p.ProjectID\n    WHERE ra.ExperiencePercentile <= 0.1\n    GROUP BY ra.ArchitectID, ra.FirstName, ra.LastName, ra.YearsOfExperience, ra.Specialization, aa.AwardCount\n)\nSELECT \n    FirstName AS Имя,\n    LastName AS Фамилия,\n    YearsOfExperience AS Стаж_работы,\n    Specialization AS Специализация,\n    AwardCount AS Количество_наград,\n    ROUND(AvgSuccessRate, 2) AS Средний_процент_успешных_инспекций,\n    ProjectCount AS Количество_проектов,\n    TotalBudget AS Общий_бюджет,\n    ROUND(EfficiencyRating, 2) AS Рейтинг_эффективности\nFROM ArchitectStats\nORDER BY EfficiencyRating DESC\nLIMIT 4;",
            "gigachat_response": "WITH TopExperiencedArchitects AS (\n    -- Архитекторы, входящие в топ-10% по стажу работы\n    SELECT *\n    FROM Architects\n    WHERE YearsOfExperience >= (\n        SELECT PERCENTILE_DISC(0.9) WITHIN GROUP (ORDER BY YearsOfExperience)\n        FROM Architects\n    )\n),\nAwardsAfter2012 AS (\n    -- Награды после 2012 года\n    SELECT ArchitectID, COUNT(*) AS NumAwards\n    FROM Awards\n    WHERE Year > 2012\n    GROUP BY ArchitectID\n),\nSuccessfulInspectionsByArchitect AS (\n    -- Проекты с успешным результатом проверок\n    SELECT p.ArchitectID, COUNT(i.InspectionID) AS SuccessInspections, COUNT(p.ProjectID) AS TotalProjects\n    FROM Projects p\n    LEFT JOIN Inspections i ON p.ProjectID = i.ProjectID AND i.Result = 'Успешно'\n    GROUP BY p.ArchitectID\n),\nArchitectEffectiveness AS (\n    -- Эффективность каждого архитектора\n    SELECT tea.*, aa.NumAwards, si.SuccessInspections, si.TotalProjects,\n           (si.SuccessInspections * 100.0 / NULLIF(si.TotalProjects, 0)) AS SuccessRate,\n           SUM(p.Budget) OVER(PARTITION BY tea.ArchitectID) AS TotalBudget\n    FROM TopExperiencedArchitects tea\n    INNER JOIN AwardsAfter2012 aa ON tea.ArchitectID = aa.ArchitectID\n    INNER JOIN SuccessfulInspectionsByArchitect si ON tea.ArchitectID = si.ArchitectID\n    INNER JOIN Projects p ON tea.ArchitectID = p.ArchitectID\n    WHERE (si.SuccessInspections * 100.0 / NULLIF(si.TotalProjects, 0)) >= 80\n)\n-- Итоговый результат\nSELECT FirstName, LastName, YearsOfExperience, Specialization, NumAwards, SuccessRate, TotalProjects, TotalBudget,\n       ROW_NUMBER() OVER(ORDER BY SuccessRate DESC, TotalBudget DESC) AS EffectivenessRanking\nFROM ArchitectEffectiveness\nORDER BY EffectivenessRanking ASC\nLIMIT 4;",
            "gigachat_response_ru": "WITH TopExperiencedArchitects AS (\n    SELECT *\n    FROM Architects\n    WHERE YearsOfExperience >= PERCENTILE_DISC(0.9) WITHIN GROUP (ORDER BY YearsOfExperience) OVER ()\n),\nAwardsAfter2012 AS (\n    SELECT ArchitectID, COUNT(*) AS NumAwards\n    FROM Awards\n    WHERE Year > 2012\n    GROUP BY ArchitectID\n),\nSuccessfulInspectionsByArchitect AS (\n    SELECT p.ArchitectID, AVG(CASE WHEN i.Result = 'Успешно' THEN 1 ELSE 0 END)*100 AS SuccessRate\n    FROM Projects p\n    LEFT JOIN Inspections i ON p.ProjectID = i.ProjectID\n    GROUP BY p.ArchitectID\n),\nProjectsAndBudgets AS (\n    SELECT p.ArchitectID, COUNT(*) AS NumProjects, SUM(p.Budget) AS TotalBudget\n    FROM Projects p\n    GROUP BY p.ArchitectID\n)\nSELECT TOP 4\n    ta.FirstName AS Имя,\n    ta.LastName AS Фамилия,\n    ta.YearsOfExperience AS Стаж_работы,\n    ta.Specialization AS Специализация,\n    COALESCE(aa.NumAwards, 0) AS Количество_наград,\n    si.SuccessRate AS Средний_процент_успешных_инспекций,\n    pa.NumProjects AS Количество_проектов,\n    pa.TotalBudget AS Общий_бюджет,\n    ROW_NUMBER() OVER (ORDER BY si.SuccessRate DESC, pa.TotalBudget DESC) AS Рейтинг_эффективности\nFROM TopExperiencedArchitects ta\nLEFT JOIN AwardsAfter2012 aa ON ta.ArchitectID = aa.ArchitectID\nINNER JOIN SuccessfulInspectionsByArchitect si ON ta.ArchitectID = si.ArchitectID\nINNER JOIN ProjectsAndBudgets pa ON ta.ArchitectID = pa.ArchitectID\nWHERE si.SuccessRate >= 80\nORDER BY Рейтинг_эффективности ASC;"
        },
        {
            "question": "Какие проекты демонстрируют наиболее высокую окупаемость инвестиций с учетом соотношения доходов к расходам, с группировкой по статусу проекта и типу контракта? Представить данные за последние 5 лет с учетом сезонных колебаний и показать топ-7 наиболее прибыльных проектов. [Ожидаемые колонки: Название проекта, Статус, Тип контракта, Бюджет проекта, Общий доход, Общие расходы, ROI, Сезонно скорректированный ROI, Ранг в группе, Общий ранг]",
            "sql_query": "WITH ProjectFinances AS (SELECT p.ProjectID, p.ProjectName, p.Status, p.StartDate, QUARTER(p.StartDate) AS StartQuarter, p.Budget, c.Terms AS ContractType, c.PaymentSchedule, SUM(CASE WHEN f.Amount > 0 THEN f.Amount ELSE 0 END) AS TotalIncome, SUM(CASE WHEN f.Amount < 0 THEN ABS(f.Amount) ELSE 0 END) AS TotalExpenses, CASE WHEN SUM(CASE WHEN f.Amount < 0 THEN ABS(f.Amount) ELSE 0 END) > 0 THEN SUM(CASE WHEN f.Amount > 0 THEN f.Amount ELSE 0 END) / SUM(CASE WHEN f.Amount < 0 THEN ABS(f.Amount) ELSE 0 END) ELSE 0 END AS ROI FROM Projects p LEFT JOIN Contracts c ON p.ProjectID = c.ProjectID LEFT JOIN Finances f ON p.ProjectID = f.ProjectID WHERE p.StartDate >= DATE_SUB(CURRENT_DATE(), INTERVAL 5 YEAR) GROUP BY p.ProjectID, p.ProjectName, p.Status, p.StartDate, p.Budget, c.Terms, c.PaymentSchedule), SeasonalAdjustment AS (SELECT StartQuarter, AVG(ROI) AS AvgQuarterROI FROM ProjectFinances GROUP BY StartQuarter), ProjectROI AS (SELECT pf.ProjectID, pf.ProjectName, pf.Status, pf.ContractType, pf.Budget, pf.TotalIncome, pf.TotalExpenses, pf.ROI, sa.AvgQuarterROI, pf.ROI / NULLIF(sa.AvgQuarterROI, 0) AS SeasonallyAdjustedROI FROM ProjectFinances pf JOIN SeasonalAdjustment sa ON pf.StartQuarter = sa.StartQuarter), ProjectProfitability AS (SELECT pr.ProjectID, pr.ProjectName, pr.Status, pr.ContractType, pr.Budget, pr.TotalIncome, pr.TotalExpenses, pr.ROI, pr.SeasonallyAdjustedROI, DENSE_RANK() OVER (PARTITION BY pr.Status, pr.ContractType ORDER BY pr.SeasonallyAdjustedROI DESC) AS RankWithinGroup, DENSE_RANK() OVER (ORDER BY pr.SeasonallyAdjustedROI DESC) AS OverallRank FROM ProjectROI pr) SELECT pp.ProjectName, pp.Status, pp.ContractType, pp.Budget AS Бюджет_проекта, pp.TotalIncome AS Общий_доход, pp.TotalExpenses AS Общие_расходы, ROUND(pp.ROI, 2) AS ROI, ROUND(pp.SeasonallyAdjustedROI, 2) AS Сезонно_скорректированный_ROI, pp.RankWithinGroup AS Ранг_в_группе, pp.OverallRank AS Общий_ранг FROM ProjectProfitability pp WHERE pp.OverallRank <= 7 ORDER BY pp.SeasonallyAdjustedROI DESC LIMIT 7;",
            "gpt-4o_response": "WITH Financials AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        p.Status,\n        c.Terms AS ContractType,\n        p.Budget,\n        SUM(CASE WHEN f.TransactionType LIKE '%доход%' THEN f.Amount ELSE 0 END) AS TotalIncome,\n        SUM(CASE WHEN f.TransactionType LIKE '%расход%' THEN f.Amount ELSE 0 END) AS TotalExpenses,\n        SUM(CASE WHEN f.TransactionType LIKE '%доход%' THEN f.Amount ELSE 0 END) - SUM(CASE WHEN f.TransactionType LIKE '%расход%' THEN f.Amount ELSE 0 END) AS NetIncome\n    FROM \n        Projects p\n    JOIN \n        Contracts c ON p.ProjectID = c.ProjectID\n    JOIN \n        Finances f ON p.ProjectID = f.ProjectID\n    WHERE \n        f.TransactionDate >= DATE_SUB(CURRENT_DATE(), INTERVAL 5 YEAR)\n    GROUP BY \n        p.ProjectID, p.ProjectName, p.Status, c.Terms, p.Budget\n),\nROI_Calculation AS (\n    SELECT \n        ProjectID,\n        ProjectName,\n        Status,\n        ContractType,\n        Budget,\n        TotalIncome,\n        TotalExpenses,\n        CASE WHEN TotalExpenses <> 0 THEN (NetIncome / TotalExpenses) * 100 ELSE 0 END AS ROI\n    FROM \n        Financials\n),\nSeasonal_Adjustment AS (\n    SELECT \n        ProjectID,\n        ProjectName,\n        Status,\n        ContractType,\n        Budget,\n        TotalIncome,\n        TotalExpenses,\n        ROI,\n        ROI * (1 + (MONTH(CURRENT_DATE()) - 6) / 12.0) AS SeasonallyAdjustedROI\n    FROM \n        ROI_Calculation\n),\nRankedProjects AS (\n    SELECT \n        ProjectName,\n        Status,\n        ContractType,\n        Budget,\n        TotalIncome,\n        TotalExpenses,\n        ROI,\n        SeasonallyAdjustedROI,\n        RANK() OVER (PARTITION BY Status, ContractType ORDER BY SeasonallyAdjustedROI DESC) AS RankInGroup,\n        RANK() OVER (ORDER BY SeasonallyAdjustedROI DESC) AS OverallRank\n    FROM \n        Seasonal_Adjustment\n)\nSELECT \n    ProjectName,\n    Status,\n    ContractType,\n    Budget,\n    TotalIncome,\n    TotalExpenses,\n    ROI,\n    SeasonallyAdjustedROI,\n    RankInGroup,\n    OverallRank\nFROM \n    RankedProjects\nWHERE \n    OverallRank <= 7\nORDER BY \n    OverallRank;",
            "gpt-4o_response_ru": "WITH Financials AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        p.Status,\n        c.Terms AS ContractType,\n        p.Budget,\n        SUM(CASE WHEN f.TransactionType LIKE '%доход%' THEN f.Amount ELSE 0 END) AS TotalIncome,\n        SUM(CASE WHEN f.TransactionType LIKE '%расход%' THEN f.Amount ELSE 0 END) AS TotalExpenses\n    FROM \n        Projects p\n    JOIN \n        Contracts c ON p.ProjectID = c.ProjectID\n    JOIN \n        Finances f ON p.ProjectID = f.ProjectID\n    WHERE \n        f.TransactionDate >= DATE_SUB(CURRENT_DATE(), INTERVAL 5 YEAR)\n    GROUP BY \n        p.ProjectID, p.ProjectName, p.Status, c.Terms, p.Budget\n),\nROI_Calculation AS (\n    SELECT \n        ProjectID,\n        ProjectName,\n        Status,\n        ContractType,\n        Budget,\n        TotalIncome,\n        TotalExpenses,\n        CASE WHEN TotalExpenses <> 0 THEN (TotalIncome - TotalExpenses) / TotalExpenses ELSE 0 END AS ROI\n    FROM \n        Financials\n),\nSeasonal_Adjustment AS (\n    SELECT \n        ProjectID,\n        ProjectName,\n        Status,\n        ContractType,\n        Budget,\n        TotalIncome,\n        TotalExpenses,\n        ROI,\n        ROI * (1 + (MONTH(CURRENT_DATE()) - 6) * 0.01) AS SeasonallyAdjustedROI\n    FROM \n        ROI_Calculation\n),\nRankedProjects AS (\n    SELECT \n        ProjectName,\n        Status,\n        ContractType,\n        Budget,\n        TotalIncome,\n        TotalExpenses,\n        ROI,\n        SeasonallyAdjustedROI,\n        ROW_NUMBER() OVER (PARTITION BY Status, ContractType ORDER BY SeasonallyAdjustedROI DESC) AS RankInGroup,\n        ROW_NUMBER() OVER (ORDER BY SeasonallyAdjustedROI DESC) AS OverallRank\n    FROM \n        Seasonal_Adjustment\n)\nSELECT \n    ProjectName,\n    Status,\n    ContractType,\n    Budget,\n    TotalIncome,\n    TotalExpenses,\n    ROI,\n    SeasonallyAdjustedROI,\n    RankInGroup,\n    OverallRank\nFROM \n    RankedProjects\nWHERE \n    OverallRank <= 7\nORDER BY \n    OverallRank;",
            "google/gemini-2.0-flash-001_response": "WITH ProjectFinances AS (\n    SELECT\n        p.ProjectID,\n        p.ProjectName,\n        p.Status,\n        c.PaymentSchedule AS ContractType,\n        p.Budget AS ProjectBudget,\n        SUM(CASE WHEN f.TransactionType = 'Операционный доход' OR f.TransactionType = 'Разовоe поступление' THEN f.Amount ELSE 0 END) AS TotalRevenue,\n        SUM(CASE WHEN f.TransactionType <> 'Операционный доход' AND f.TransactionType <> 'Разовоe поступление' THEN ABS(f.Amount) ELSE 0 END) AS TotalExpenses\n    FROM\n        Projects p\n    JOIN\n        Finances f ON p.ProjectID = f.ProjectID\n    JOIN\n        Contracts c ON p.ProjectID = c.ProjectID\n    WHERE\n        f.TransactionDate >= DATE_SUB(CURRENT_DATE(), INTERVAL 5 YEAR)\n    GROUP BY\n        p.ProjectID, p.ProjectName, p.Status, c.PaymentSchedule, p.Budget\n),\nROICalculation AS (\n    SELECT\n        ProjectID,\n        ProjectName,\n        Status,\n        ContractType,\n        ProjectBudget,\n        TotalRevenue,\n        TotalExpenses,\n        (TotalRevenue - TotalExpenses) / ProjectBudget AS ROI\n    FROM\n        ProjectFinances\n),\nSeasonalAdjustment AS (\n    SELECT\n        *,\n        ROI * (1 + (\n            CASE\n                WHEN MONTH(CURRENT_DATE()) IN (12, 1, 2) THEN 0.05  -- Winter\n                WHEN MONTH(CURRENT_DATE()) IN (3, 4, 5) THEN -0.03 -- Spring\n                WHEN MONTH(CURRENT_DATE()) IN (6, 7, 8) THEN 0.02  -- Summer\n                ELSE -0.01                                          -- Autumn\n            END\n        )) AS SeasonallyAdjustedROI\n    FROM\n        ROICalculation\n),\nRankedProjects AS (\n    SELECT\n        *,\n        RANK() OVER (PARTITION BY Status, ContractType ORDER BY SeasonallyAdjustedROI DESC) AS RankInGroup,\n        RANK() OVER (ORDER BY SeasonallyAdjustedROI DESC) AS OverallRank\n    FROM\n        SeasonalAdjustment\n)\nSELECT\n    ProjectName AS \"Название проекта\",\n    Status AS \"Статус\",\n    ContractType AS \"Тип контракта\",\n    ProjectBudget AS \"Бюджет проекта\",\n    TotalRevenue AS \"Общий доход\",\n    TotalExpenses AS \"Общие расходы\",\n    ROI,\n    SeasonallyAdjustedROI AS \"Сезонно скорректированный ROI\",\n    RankInGroup AS \"Ранг в группе\",\n    OverallRank AS \"Общий ранг\"\nFROM\n    RankedProjects\nWHERE OverallRank <= 7\nORDER BY OverallRank;",
            "google/gemini-2.0-flash-001_response_ru": "WITH ProjectFinances AS (\n    SELECT\n        p.ProjectID,\n        p.ProjectName,\n        p.Status,\n        c.PaymentSchedule AS ContractType,\n        p.Budget,\n        SUM(CASE WHEN f.TransactionType = 'Операционный доход' OR f.TransactionType = 'Разовоe поступление' THEN f.Amount ELSE 0 END) AS TotalRevenue,\n        SUM(CASE WHEN f.TransactionType = 'Расходы на материалы' OR f.TransactionType = 'Расходы на маркетинг' THEN f.Amount ELSE 0 END) AS TotalExpenses\n    FROM\n        Projects p\n    JOIN\n        Finances f ON p.ProjectID = f.ProjectID\n    JOIN\n        Contracts c ON p.ProjectID = c.ProjectID\n    WHERE\n        f.TransactionDate >= DATE_SUB(CURRENT_DATE(), INTERVAL 5 YEAR)\n    GROUP BY\n        p.ProjectID, p.ProjectName, p.Status, c.PaymentSchedule, p.Budget\n),\nROICalculation AS (\n    SELECT\n        ProjectID,\n        ProjectName,\n        Status,\n        ContractType,\n        Budget,\n        TotalRevenue,\n        TotalExpenses,\n        (TotalRevenue + TotalExpenses) / Budget AS ROI,\n        -- Предположим, что сезонные колебания отсутствуют, или они уже учтены в данных.\n        -- В противном случае, здесь нужно добавить логику для учета сезонности.\n        (TotalRevenue + TotalExpenses) / Budget AS SeasonallyAdjustedROI\n    FROM\n        ProjectFinances\n),\nRankedProjects AS (\n    SELECT\n        ProjectName,\n        Status,\n        ContractType,\n        Budget,\n        TotalRevenue,\n        TotalExpenses,\n        ROI,\n        SeasonallyAdjustedROI,\n        RANK() OVER (PARTITION BY Status, ContractType ORDER BY SeasonallyAdjustedROI DESC) AS RankInGroup,\n        RANK() OVER (ORDER BY SeasonallyAdjustedROI DESC) AS OverallRank\n    FROM\n        ROICalculation\n)\nSELECT\n    ProjectName AS \"Название проекта\",\n    Status AS \"Статус\",\n    ContractType AS \"Тип контракта\",\n    Budget AS \"Бюджет проекта\",\n    TotalRevenue AS \"Общий доход\",\n    TotalExpenses AS \"Общие расходы\",\n    ROI,\n    SeasonallyAdjustedROI AS \"Сезонно скорректированный ROI\",\n    RankInGroup AS \"Ранг в группе\",\n    OverallRank AS \"Общий ранг\"\nFROM\n    RankedProjects\nORDER BY\n    \"Общий ранг\"\nLIMIT 7;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH ProjectFinances AS (\n  SELECT \n    p.ProjectID,\n    p.ProjectName,\n    p.Status,\n    c.Terms AS ContractType,\n    p.Budget,\n    COALESCE(SUM(f.Amount), 0) AS TotalRevenue,\n    COALESCE(SUM(CASE WHEN f.TransactionType = 'Расходы' THEN f.Amount ELSE 0 END), 0) AS TotalExpenses\n  FROM \n    Projects p\n  JOIN \n    Contracts c ON p.ProjectID = c.ProjectID\n  LEFT JOIN \n    Finances f ON p.ProjectID = f.ProjectID\n  WHERE \n    p.StartDate >= DATE_SUB(CURRENT_DATE(), INTERVAL 5 YEAR)\n  GROUP BY \n    p.ProjectID, p.ProjectName, p.Status, c.Terms, p.Budget\n),\nProjectROI AS (\n  SELECT \n    pf.ProjectName,\n    pf.Status,\n    pf.ContractType,\n    pf.Budget,\n    pf.TotalRevenue,\n    pf.TotalExpenses,\n    CASE \n      WHEN pf.TotalExpenses = 0 THEN pf.TotalRevenue\n      ELSE pf.TotalRevenue / pf.TotalExpenses\n    END AS ROI,\n    CASE \n      WHEN pf.TotalExpenses = 0 THEN pf.TotalRevenue\n      ELSE pf.TotalRevenue / pf.TotalExpenses * (1 + (EXTRACT(MONTH FROM CURRENT_DATE()) % 12) * 0.1)\n    END AS SeasonallyAdjustedROI\n  FROM \n    ProjectFinances pf\n),\nRankedProjects AS (\n  SELECT \n    p.ProjectName,\n    p.Status,\n    p.ContractType,\n    p.Budget,\n    p.TotalRevenue,\n    p.TotalExpenses,\n    p.ROI,\n    p.SeasonallyAdjustedROI,\n    ROW_NUMBER() OVER (PARTITION BY p.Status, p.ContractType ORDER BY p.SeasonallyAdjustedROI DESC) AS GroupRank,\n    ROW_NUMBER() OVER (ORDER BY p.SeasonallyAdjustedROI DESC) AS OverallRank\n  FROM \n    ProjectROI p\n)\nSELECT \n  ProjectName,\n  Status,\n  ContractType,\n  Budget,\n  TotalRevenue,\n  TotalExpenses,\n  ROI,\n  SeasonallyAdjustedROI,\n  GroupRank,\n  OverallRank\nFROM \n  RankedProjects\nORDER BY \n  SeasonallyAdjustedROI DESC\nLIMIT 7;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "```sqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsqlsql",
            "deepseek/deepseek-chat-v3-0324_response": "WITH ProjectFinances AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        p.Status,\n        c.Terms AS ContractType,\n        p.Budget,\n        SUM(CASE WHEN f.TransactionType LIKE '%доход%' THEN f.Amount ELSE 0 END) AS TotalIncome,\n        SUM(CASE WHEN f.TransactionType LIKE '%расход%' THEN ABS(f.Amount) ELSE 0 END) AS TotalExpenses,\n        EXTRACT(YEAR FROM f.TransactionDate) AS Year,\n        EXTRACT(MONTH FROM f.TransactionDate) AS Month\n    FROM \n        Projects p\n    JOIN \n        Contracts c ON p.ProjectID = c.ProjectID\n    JOIN \n        Finances f ON p.ProjectID = f.ProjectID\n    WHERE \n        f.TransactionDate >= DATE_SUB(CURRENT_DATE(), INTERVAL 5 YEAR)\n    GROUP BY \n        p.ProjectID, p.ProjectName, p.Status, c.Terms, p.Budget, Year, Month\n),\nSeasonalAdjustment AS (\n    SELECT \n        ProjectID,\n        ProjectName,\n        Status,\n        ContractType,\n        Budget,\n        TotalIncome,\n        TotalExpenses,\n        (TotalIncome - TotalExpenses) / TotalExpenses * 100 AS ROI,\n        AVG((TotalIncome - TotalExpenses) / TotalExpenses * 100) OVER (PARTITION BY Month) AS SeasonalROI,\n        (TotalIncome - TotalExpenses) / TotalExpenses * 100 - AVG((TotalIncome - TotalExpenses) / TotalExpenses * 100) OVER (PARTITION BY Month) AS AdjustedROI\n    FROM \n        ProjectFinances\n),\nRankedProjects AS (\n    SELECT \n        ProjectName,\n        Status,\n        ContractType,\n        Budget,\n        TotalIncome,\n        TotalExpenses,\n        ROI,\n        AdjustedROI AS SeasonallyAdjustedROI,\n        RANK() OVER (PARTITION BY Status, ContractType ORDER BY ROI DESC) AS GroupRank,\n        RANK() OVER (ORDER BY ROI DESC) AS OverallRank\n    FROM \n        SeasonalAdjustment\n)\nSELECT \n    ProjectName AS Название_проекта,\n    Status AS Статус,\n    ContractType AS Тип_контракта,\n    Budget AS Бюджет_проекта,\n    TotalIncome AS Общий_доход,\n    TotalExpenses AS Общие_расходы,\n    ROI,\n    SeasonallyAdjustedROI AS Сезонно_скорректированный_ROI,\n    GroupRank AS Ранг_в_группе,\n    OverallRank AS Общий_ранг\nFROM \n    RankedProjects\nWHERE \n    OverallRank <= 7\nORDER BY \n    OverallRank;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "WITH ProjectFinances AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        p.Status,\n        c.Terms AS ContractType,\n        p.Budget,\n        SUM(CASE WHEN f.TransactionType LIKE '%доход%' THEN f.Amount ELSE 0 END) AS TotalIncome,\n        SUM(CASE WHEN f.TransactionType LIKE '%расход%' THEN ABS(f.Amount) ELSE 0 END) AS TotalExpenses,\n        EXTRACT(YEAR FROM f.TransactionDate) AS Year,\n        EXTRACT(QUARTER FROM f.TransactionDate) AS Quarter\n    FROM \n        Projects p\n    JOIN \n        Contracts c ON p.ProjectID = c.ProjectID\n    JOIN \n        Finances f ON p.ProjectID = f.ProjectID\n    WHERE \n        f.TransactionDate >= DATE_SUB(CURRENT_DATE(), INTERVAL 5 YEAR)\n    GROUP BY \n        p.ProjectID, p.ProjectName, p.Status, c.Terms, p.Budget, Year, Quarter\n),\nROICalculation AS (\n    SELECT \n        ProjectID,\n        ProjectName,\n        Status,\n        ContractType,\n        Budget,\n        TotalIncome,\n        TotalExpenses,\n        CASE \n            WHEN TotalExpenses > 0 THEN (TotalIncome - TotalExpenses) / TotalExpenses * 100 \n            ELSE 0 \n        END AS ROI,\n        Year,\n        Quarter\n    FROM \n        ProjectFinances\n),\nSeasonalAdjustment AS (\n    SELECT \n        ProjectID,\n        ProjectName,\n        Status,\n        ContractType,\n        Budget,\n        TotalIncome,\n        TotalExpenses,\n        ROI,\n        AVG(ROI) OVER (PARTITION BY ProjectID, Quarter) AS SeasonallyAdjustedROI,\n        RANK() OVER (PARTITION BY Status, ContractType ORDER BY ROI DESC) AS RankInGroup,\n        RANK() OVER (ORDER BY ROI DESC) AS OverallRank\n    FROM \n        ROICalculation\n)\nSELECT \n    ProjectName AS Название_проекта,\n    Status AS Статус,\n    ContractType AS Тип_контракта,\n    Budget AS Бюджет_проекта,\n    TotalIncome AS Общий_доход,\n    TotalExpenses AS Общие_расходы,\n    ROI,\n    SeasonallyAdjustedROI AS Сезонно_скорректированный_ROI,\n    RankInGroup AS Ранг_в_группе,\n    OverallRank AS Общий_ранг\nFROM \n    SeasonalAdjustment\nWHERE \n    OverallRank <= 7\nORDER BY \n    OverallRank;",
            "gigachat_response": "WITH ProjectFinances AS (\n    SELECT \n        f.ProjectID,\n        MAX(CASE WHEN f.TransactionType = 'Операционный доход' OR f.TransactionType = 'Разовое поступление' THEN f.Amount ELSE 0 END) AS TotalIncome,\n        ABS(SUM(CASE WHEN f.TransactionType = 'Расходы на материалы' OR f.TransactionType = 'Расходы на маркетинг' THEN f.Amount ELSE 0 END)) AS TotalExpenses\n    FROM Finances f\n    WHERE f.TransactionDate BETWEEN DATE_SUB(NOW(), INTERVAL 5 YEAR) AND NOW()\n    GROUP BY f.ProjectID\n),\nSeasonalAdjustments AS (\n    SELECT \n        pf.ProjectID,\n        pf.TotalIncome,\n        pf.TotalExpenses,\n        CASE \n            WHEN MONTH(MAX(f.TransactionDate)) IN (12, 1, 2) THEN pf.TotalIncome * 1.1 -- Winter adjustment\n            WHEN MONTH(MAX(f.TransactionDate)) IN (3, 4, 5) THEN pf.TotalIncome * 1.05 -- Spring adjustment\n            WHEN MONTH(MAX(f.TransactionDate)) IN (6, 7, 8) THEN pf.TotalIncome * 0.95 -- Summer adjustment\n            ELSE pf.TotalIncome * 1.0 -- Autumn adjustment\n        END AS SeasonallyAdjustedIncome\n    FROM ProjectFinances pf\n    INNER JOIN Finances f ON pf.ProjectID = f.ProjectID\n    GROUP BY pf.ProjectID, pf.TotalIncome, pf.TotalExpenses\n),\nProjectDetails AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        p.Status,\n        c.Terms AS ContractType,\n        p.Budget,\n        sa.TotalIncome,\n        sa.TotalExpenses,\n        CASE \n            WHEN sa.TotalExpenses <> 0 THEN (sa.TotalIncome - sa.TotalExpenses) / sa.TotalExpenses * 100\n            ELSE NULL\n        END AS ROI,\n        CASE \n            WHEN sa.TotalExpenses <> 0 THEN (sa.SeasonallyAdjustedIncome - sa.TotalExpenses) / sa.TotalExpenses * 100\n            ELSE NULL\n        END AS SeasonallyAdjustedROI\n    FROM Projects p\n    LEFT JOIN Contracts c ON p.ProjectID = c.ProjectID\n    LEFT JOIN SeasonalAdjustments sa ON p.ProjectID = sa.ProjectID\n),\nRankedProjects AS (\n    SELECT \n        pd.*,\n        RANK() OVER(PARTITION BY pd.Status ORDER BY pd.RankInGroup ASC) AS RankInStatusGroup,\n        ROW_NUMBER() OVER(ORDER BY pd.SeasonallyAdjustedROI DESC) AS OverallRank\n    FROM (\n        SELECT \n            pd.*, \n            DENSE_RANK() OVER(PARTITION BY pd.Status ORDER BY pd.SeasonallyAdjustedROI DESC) AS RankInGroup\n        FROM ProjectDetails pd\n    ) pd\n)\nSELECT \n    rp.ProjectName AS НазваниеПроекта,\n    rp.Status AS Статус,\n    rp.ContractType AS ТипКонтракта,\n    rp.Budget AS БюджетПроекта,\n    rp.TotalIncome AS ОбщийДоход,\n    rp.TotalExpenses AS ОбщиеРасходы,\n    rp.ROI AS ROI,\n    rp.SeasonallyAdjustedROI AS СезонноскорректированныйROI,\n    rp.RankInStatusGroup AS РангВГруппе,\n    rp.OverallRank AS ОбщийРанг\nFROM RankedProjects rp\nWHERE rp.OverallRank <= 7\nORDER BY rp.OverallRank ASC;",
            "gigachat_response_ru": "WITH ProjectFinances AS (\n    SELECT \n        f.ProjectID,\n        p.ProjectName,\n        p.Status,\n        c.Terms AS ContractType,\n        p.Budget,\n        SUM(CASE WHEN f.TransactionType LIKE '%доход%' THEN f.Amount ELSE 0 END) AS TotalIncome,\n        ABS(SUM(CASE WHEN f.TransactionType LIKE '%расходы%' THEN f.Amount ELSE 0 END)) AS TotalExpenses\n    FROM \n        Finances f\n    JOIN \n        Projects p ON f.ProjectID = p.ProjectID\n    LEFT JOIN \n        Contracts c ON p.ProjectID = c.ProjectID\n    WHERE \n        f.TransactionDate BETWEEN DATE_SUB(NOW(), INTERVAL 5 YEAR) AND NOW()\n    GROUP BY \n        f.ProjectID, p.ProjectName, p.Status, c.Terms, p.Budget\n),\nSeasonalAdjustments AS (\n    SELECT \n        pf.*,\n        CASE \n            WHEN MONTH(MAX(f.TransactionDate)) IN (12, 1, 2) THEN 1.1 -- Зима\n            WHEN MONTH(MAX(f.TransactionDate)) IN (3, 4, 5) THEN 1.05 -- Весна\n            WHEN MONTH(MAX(f.TransactionDate)) IN (6, 7, 8) THEN 1.0 -- Лето\n            ELSE 0.95 -- Осень\n        END AS SeasonFactor\n    FROM \n        ProjectFinances pf\n    JOIN \n        Finances f ON pf.ProjectID = f.ProjectID\n    GROUP BY \n        pf.ProjectID, pf.ProjectName, pf.Status, pf.ContractType, pf.Budget, pf.TotalIncome, pf.TotalExpenses\n),\nROIAnalysis AS (\n    SELECT \n        sa.ProjectID,\n        sa.ProjectName,\n        sa.Status,\n        sa.ContractType,\n        sa.Budget,\n        sa.TotalIncome,\n        sa.TotalExpenses,\n        CASE \n            WHEN sa.TotalExpenses <> 0 THEN (sa.TotalIncome - sa.TotalExpenses) / sa.TotalExpenses\n            ELSE NULL\n        END AS ROI,\n        CASE \n            WHEN sa.TotalExpenses <> 0 THEN (sa.TotalIncome - sa.TotalExpenses) / sa.TotalExpenses * sa.SeasonFactor\n            ELSE NULL\n        END AS AdjustedROI\n    FROM \n        SeasonalAdjustments sa\n),\nRankedProjects AS (\n    SELECT \n        ra.*, \n        RANK() OVER(PARTITION BY ra.Status ORDER BY ra.AdjustedROI DESC) AS RankWithinGroup,\n        ROW_NUMBER() OVER(ORDER BY ra.AdjustedROI DESC) AS OverallRank\n    FROM \n        ROIAnalysis ra\n)\nSELECT \n    rp.ProjectName AS НазваниеПроекта,\n    rp.Status AS Статус,\n    rp.ContractType AS ТипКонтракта,\n    rp.Budget AS БюджетПроекта,\n    rp.TotalIncome AS ОбщийДоход,\n    rp.TotalExpenses AS ОбщиеРасходы,\n    rp.ROI AS ROI,\n    rp.AdjustedROI AS СезонноСкорректированныйROI,\n    rp.RankWithinGroup AS РангВГруппе,\n    rp.OverallRank AS ОбщийРанг\nFROM \n    RankedProjects rp\nWHERE \n    rp.OverallRank <= 7\nORDER BY \n    rp.OverallRank ASC;"
        },
        {
            "question": "Какие архитекторы наиболее эффективно использовали материалы различного качества в своих проектах и при этом имели наименьшее количество неуспешных инспекций за последние 3 года? Показать топ-5 с расчетом индекса эффективности, который учитывает процент успешных инспекций (40%), средний рейтинг материалов (30%), вариацию качества материалов (10%) и соотношение стоимости материалов к бюджету (20%). [Ожидаемые колонки: Имя, Фамилия, Специализация, Общее количество инспекций, Успешные инспекции, Неуспешные инспекции, Процент успешных инспекций, Средний рейтинг материалов, Вариация качества материалов, Количество материалов, Общая стоимость материалов, Общий бюджет, Соотношение материалов к бюджету, Индекс эффективности]",
            "sql_query": "WITH ArchitectInspections AS (SELECT a.ArchitectID, a.FirstName, a.LastName, a.Specialization, COUNT(DISTINCT i.InspectionID) AS TotalInspections, SUM(CASE WHEN i.Result = 'Успешно' THEN 1 ELSE 0 END) AS SuccessfulInspections, SUM(CASE WHEN i.Result = 'Неуспешно' THEN 1 ELSE 0 END) AS FailedInspections, CASE WHEN COUNT(DISTINCT i.InspectionID) > 0 THEN (SUM(CASE WHEN i.Result = 'Успешно' THEN 1 ELSE 0 END) * 100.0 / COUNT(DISTINCT i.InspectionID)) ELSE 0 END AS SuccessRate FROM Architects a JOIN Projects p ON a.ArchitectID = p.ArchitectID JOIN Inspections i ON p.ProjectID = i.ProjectID WHERE p.StartDate >= DATE_SUB(CURRENT_DATE(), INTERVAL 3 YEAR) GROUP BY a.ArchitectID, a.FirstName, a.LastName, a.Specialization), MaterialEfficiency AS (SELECT a.ArchitectID, AVG(m.QualityRating) AS AvgMaterialQuality, STDDEV(m.QualityRating) AS MaterialQualityVariation, SUM(m.CostPerUnit * m.QuantityInStock) AS TotalMaterialCost, COUNT(DISTINCT m.MaterialID) AS MaterialCount, SUM(p.Budget) AS TotalBudget, CASE WHEN SUM(p.Budget) > 0 THEN (SUM(m.CostPerUnit * m.QuantityInStock) * 100.0 / SUM(p.Budget)) ELSE 0 END AS MaterialBudgetRatio FROM Architects a JOIN Projects p ON a.ArchitectID = p.ArchitectID JOIN Materials m ON m.MaterialID > 0 WHERE p.StartDate >= DATE_SUB(CURRENT_DATE(), INTERVAL 3 YEAR) GROUP BY a.ArchitectID), EfficiencyIndex AS (SELECT ai.ArchitectID, ai.FirstName, ai.LastName, ai.Specialization, ai.TotalInspections, ai.SuccessfulInspections, ai.FailedInspections, ai.SuccessRate, me.AvgMaterialQuality, me.MaterialQualityVariation, me.TotalMaterialCost, me.MaterialCount, me.TotalBudget, me.MaterialBudgetRatio, ((ai.SuccessRate * 0.4) + (me.AvgMaterialQuality * 10 * 0.3) - (COALESCE(me.MaterialQualityVariation, 0) * 5 * 0.1) - (me.MaterialBudgetRatio * 0.2)) AS EfficiencyScore FROM ArchitectInspections ai JOIN MaterialEfficiency me ON ai.ArchitectID = me.ArchitectID) SELECT ei.FirstName, ei.LastName, ei.Specialization, ei.TotalInspections AS Общее_количество_инспекций, ei.SuccessfulInspections AS Успешные_инспекции, ei.FailedInspections AS Неуспешные_инспекции, ROUND(ei.SuccessRate, 2) AS Процент_успешных_инспекций, ROUND(ei.AvgMaterialQuality, 2) AS Средний_рейтинг_материалов, ROUND(ei.MaterialQualityVariation, 2) AS Вариация_качества_материалов, ei.MaterialCount AS Количество_материалов, ROUND(ei.TotalMaterialCost, 2) AS Общая_стоимость_материалов, ROUND(ei.TotalBudget, 2) AS Общий_бюджет, ROUND(ei.MaterialBudgetRatio, 2) AS Соотношение_материалов_к_бюджету, ROUND(ei.EfficiencyScore, 2) AS Индекс_эффективности FROM EfficiencyIndex ei ORDER BY ei.EfficiencyScore DESC LIMIT 5;",
            "gpt-4o_response": "WITH InspectionStats AS (\n    SELECT \n        a.ArchitectID,\n        a.FirstName,\n        a.LastName,\n        a.Specialization,\n        COUNT(i.InspectionID) AS TotalInspections,\n        SUM(CASE WHEN i.Result = 'Успешно' THEN 1 ELSE 0 END) AS SuccessfulInspections,\n        SUM(CASE WHEN i.Result = 'Неуспешно' THEN 1 ELSE 0 END) AS UnsuccessfulInspections,\n        CASE WHEN COUNT(i.InspectionID) > 0 THEN (SUM(CASE WHEN i.Result = 'Успешно' THEN 1 ELSE 0 END) * 100.0 / COUNT(i.InspectionID)) ELSE 0 END AS SuccessRate\n    FROM Architects a\n    JOIN Projects p ON a.ArchitectID = p.ArchitectID\n    JOIN Inspections i ON p.ProjectID = i.ProjectID\n    WHERE i.InspectionDate >= DATE_SUB(CURRENT_DATE(), INTERVAL 3 YEAR)\n    GROUP BY a.ArchitectID, a.FirstName, a.LastName, a.Specialization\n),\nMaterialStats AS (\n    SELECT \n        a.ArchitectID,\n        AVG(m.QualityRating) AS AvgMaterialQuality,\n        STDDEV(m.QualityRating) AS QualityVariation,\n        COUNT(DISTINCT m.MaterialID) AS MaterialCount,\n        SUM(m.CostPerUnit * m.QuantityInStock) AS TotalMaterialCost,\n        SUM(p.Budget) AS TotalBudget,\n        CASE WHEN SUM(p.Budget) > 0 THEN (SUM(m.CostPerUnit * m.QuantityInStock) * 100.0 / SUM(p.Budget)) ELSE 0 END AS MaterialBudgetRatio\n    FROM Architects a\n    JOIN Projects p ON a.ArchitectID = p.ArchitectID\n    JOIN Buildings b ON p.ProjectID = b.ProjectID\n    JOIN Materials m ON b.Material = m.MaterialName\n    GROUP BY a.ArchitectID\n),\nEfficiencyIndex AS (\n    SELECT \n        i.ArchitectID,\n        i.FirstName,\n        i.LastName,\n        i.Specialization,\n        i.TotalInspections,\n        i.SuccessfulInspections,\n        i.UnsuccessfulInspections,\n        i.SuccessRate,\n        m.AvgMaterialQuality,\n        m.QualityVariation,\n        m.MaterialCount,\n        m.TotalMaterialCost,\n        m.TotalBudget,\n        m.MaterialBudgetRatio,\n        ROUND((i.SuccessRate * 0.4) + (m.AvgMaterialQuality * 0.3) + ((1 - m.QualityVariation) * 0.1) + ((1 - m.MaterialBudgetRatio) * 0.2), 2) AS EfficiencyIndex\n    FROM InspectionStats i\n    JOIN MaterialStats m ON i.ArchitectID = m.ArchitectID\n)\nSELECT \n    e.FirstName,\n    e.LastName,\n    e.Specialization,\n    e.TotalInspections,\n    e.SuccessfulInspections,\n    e.UnsuccessfulInspections,\n    e.SuccessRate,\n    e.AvgMaterialQuality,\n    e.QualityVariation,\n    e.MaterialCount,\n    e.TotalMaterialCost,\n    e.TotalBudget,\n    e.MaterialBudgetRatio,\n    e.EfficiencyIndex\nFROM EfficiencyIndex e\nORDER BY e.EfficiencyIndex DESC\nLIMIT 5;",
            "gpt-4o_response_ru": "WITH InspectionStats AS (\n    SELECT \n        p.ArchitectID,\n        COUNT(i.InspectionID) AS TotalInspections,\n        SUM(CASE WHEN i.Result = 'Успешно' THEN 1 ELSE 0 END) AS SuccessfulInspections,\n        SUM(CASE WHEN i.Result = 'Неуспешно' THEN 1 ELSE 0 END) AS UnsuccessfulInspections,\n        CASE WHEN COUNT(i.InspectionID) > 0 THEN (SUM(CASE WHEN i.Result = 'Успешно' THEN 1 ELSE 0 END) * 100.0 / COUNT(i.InspectionID)) ELSE 0 END AS SuccessRate\n    FROM Projects p\n    JOIN Inspections i ON p.ProjectID = i.ProjectID\n    WHERE i.InspectionDate >= DATE_SUB(CURRENT_DATE(), INTERVAL 3 YEAR)\n    GROUP BY p.ArchitectID\n),\nMaterialStats AS (\n    SELECT \n        p.ArchitectID,\n        AVG(m.QualityRating) AS AvgMaterialQuality,\n        STDDEV(m.QualityRating) AS QualityVariation,\n        COUNT(DISTINCT m.MaterialID) AS MaterialCount,\n        SUM(m.CostPerUnit * m.QuantityInStock) AS TotalMaterialCost,\n        SUM(p.Budget) AS TotalBudget,\n        CASE WHEN SUM(p.Budget) > 0 THEN (SUM(m.CostPerUnit * m.QuantityInStock) * 100.0 / SUM(p.Budget)) ELSE 0 END AS MaterialBudgetRatio\n    FROM Projects p\n    JOIN Materials m ON m.SupplierID IN (SELECT SupplierID FROM Suppliers)\n    GROUP BY p.ArchitectID\n),\nArchitectEfficiency AS (\n    SELECT \n        a.FirstName,\n        a.LastName,\n        a.Specialization,\n        is.TotalInspections,\n        is.SuccessfulInspections,\n        is.UnsuccessfulInspections,\n        is.SuccessRate,\n        ms.AvgMaterialQuality,\n        ms.QualityVariation,\n        ms.MaterialCount,\n        ms.TotalMaterialCost,\n        ms.TotalBudget,\n        ms.MaterialBudgetRatio,\n        ROUND((is.SuccessRate * 0.4) + (ms.AvgMaterialQuality * 0.3) + ((1 - ms.QualityVariation) * 0.1) + ((1 / ms.MaterialBudgetRatio) * 0.2), 2) AS EfficiencyIndex\n    FROM Architects a\n    JOIN InspectionStats is ON a.ArchitectID = is.ArchitectID\n    JOIN MaterialStats ms ON a.ArchitectID = ms.ArchitectID\n)\nSELECT \n    FirstName,\n    LastName,\n    Specialization,\n    TotalInspections,\n    SuccessfulInspections,\n    UnsuccessfulInspections,\n    SuccessRate,\n    AvgMaterialQuality,\n    QualityVariation,\n    MaterialCount,\n    TotalMaterialCost,\n    TotalBudget,\n    MaterialBudgetRatio,\n    EfficiencyIndex\nFROM ArchitectEfficiency\nORDER BY EfficiencyIndex DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response": "```sql\nWITH ArchitectProjectMaterials AS (\n    SELECT\n        p.ProjectID,\n        p.ArchitectID,\n        SUM(m.CostPerUnit * (m.QuantityInStock/2)) AS TotalMaterialCost,\n        AVG(m.QualityRating) AS AvgMaterialRating,\n        STDDEV(m.QualityRating) AS MaterialQualityVariation,\n        COUNT(DISTINCT m.MaterialID) AS MaterialCount\n    FROM\n        Projects p\n    JOIN\n        Buildings b ON p.ProjectID = b.ProjectID\n    JOIN\n        Materials m ON m.MaterialID > 0\n    WHERE p.StartDate >= DATE_SUB(CURRENT_DATE(), INTERVAL 3 YEAR)\n    GROUP BY\n        p.ProjectID, p.ArchitectID\n),\nInspectionResults AS (\n    SELECT\n        p.ArchitectID,\n        p.ProjectID,\n        SUM(CASE WHEN i.Result = 'Успешно' THEN 1 ELSE 0 END) AS SuccessfulInspections,\n        SUM(CASE WHEN i.Result = 'Неуспешно' THEN 1 ELSE 0 END) AS FailedInspections,\n        COUNT(i.InspectionID) AS TotalInspections\n    FROM\n        Projects p\n    LEFT JOIN\n        Inspections i ON p.ProjectID = i.ProjectID\n    WHERE i.InspectionDate >= DATE_SUB(CURRENT_DATE(), INTERVAL 3 YEAR)\n    GROUP BY\n        p.ArchitectID, p.ProjectID\n),\nArchitectStats AS (\n    SELECT\n        a.ArchitectID,\n        a.FirstName,\n        a.LastName,\n        a.Specialization,\n        SUM(ir.TotalInspections) AS Общее_количество_инспекций,\n        SUM(ir.SuccessfulInspections) AS Успешные_инспекции,\n        SUM(ir.FailedInspections) AS Неуспешные_инспекции,\n        CASE\n            WHEN SUM(ir.TotalInspections) > 0 THEN (SUM(ir.SuccessfulInspections) * 100.0 / SUM(ir.TotalInspections))\n            ELSE 0\n        END AS Процент_успешных_инспекций,\n        AVG(apm.AvgMaterialRating) AS Средний_рейтинг_материалов,\n        AVG(apm.MaterialQualityVariation) AS Вариация_качества_материалов,\n        SUM(apm.MaterialCount) AS Количество_материалов,\n        SUM(apm.TotalMaterialCost) AS Общая_стоимость_материалов,\n        SUM(p.Budget) AS Общий_бюджет,\n        CASE\n            WHEN SUM(p.Budget) > 0 THEN (SUM(apm.TotalMaterialCost) * 100.0 / SUM(p.Budget))\n            ELSE 0\n        END AS Соотношение_материалов_к_бюджету\n    FROM\n        Architects a\n    LEFT JOIN\n        Projects p ON a.ArchitectID = p.ArchitectID\n    LEFT JOIN\n        InspectionResults ir ON a.ArchitectID = ir.ArchitectID AND p.ProjectID = ir.ProjectID\n    LEFT JOIN\n        ArchitectProjectMaterials apm ON a.ArchitectID = apm.ArchitectID AND p.ProjectID = apm.ProjectID\n    GROUP BY\n        a.ArchitectID, a.FirstName, a.LastName, a.Specialization\n)\nSELECT\n    as1.FirstName AS Имя,\n    as1.LastName AS Фамилия,\n    as1.Specialization AS Специализация,\n    as1.Общее_количество_инспекций AS Общее_количество_инспекций,\n    as1.Успешные_инспекции AS Успешные_инспекции,\n    as1.Неуспешные_инспекции AS Неуспешные_инспекции,\n    as1.Процент_успешных_инспекций AS Процент_успешных_инспекций,\n    as1.Средний_рейтинг_материалов AS Средний_рейтинг_материалов,\n    as1.Вариация_качества_материалов AS Вариация_качества_материалов,\n    as1.Количество_материалов AS Количество_материалов,\n    as1.Общая_стоимость_материалов AS Общая_стоимость_материалов,\n    as1.Общий_бюджет AS Общий_бюджет,\n    as1.Соотношение",
            "google/gemini-2.0-flash-001_response_ru": "WITH ArchitectInspectionStats AS (\n    SELECT\n        a.ArchitectID,\n        a.FirstName,\n        a.LastName,\n        a.Specialization,\n        COUNT(i.InspectionID) AS TotalInspections,\n        SUM(CASE WHEN i.Result = 'Успешно' THEN 1 ELSE 0 END) AS SuccessfulInspections,\n        SUM(CASE WHEN i.Result = 'Неуспешно' THEN 1 ELSE 0 END) AS FailedInspections\n    FROM Architects a\n    JOIN Projects p ON a.ArchitectID = p.ArchitectID\n    LEFT JOIN Inspections i ON p.ProjectID = i.ProjectID AND i.InspectionDate >= DATE('now', '-3 years')\n    GROUP BY a.ArchitectID, a.FirstName, a.LastName, a.Specialization\n),\nArchitectMaterialStats AS (\n    SELECT\n        a.ArchitectID,\n        AVG(m.QualityRating) AS AvgMaterialRating,\n        STDDEV(m.QualityRating) AS MaterialQualityVariation,\n        COUNT(DISTINCT m.MaterialID) AS MaterialCount,\n        SUM(m.CostPerUnit * m.QuantityInStock) AS TotalMaterialCost\n    FROM Architects a\n    JOIN Projects p ON a.ArchitectID = p.ArchitectID\n    JOIN Buildings b ON p.ProjectID = b.ProjectID\n    JOIN Materials m ON b.Material = m.MaterialName\n    GROUP BY a.ArchitectID\n),\nProjectBudgets AS (\n    SELECT\n        ArchitectID,\n        SUM(Budget) AS TotalBudget\n    FROM Projects\n    GROUP BY ArchitectID\n)\nSELECT\n    ais.FirstName,\n    ais.LastName,\n    ais.Specialization,\n    ais.TotalInspections,\n    ais.SuccessfulInspections,\n    ais.FailedInspections,\n    CASE\n        WHEN ais.TotalInspections > 0 THEN (CAST(ais.SuccessfulInspections AS REAL) / ais.TotalInspections) * 100\n        ELSE 0\n    END AS SuccessPercentage,\n    COALESCE(ams.AvgMaterialRating, 0) AS AvgMaterialRating,\n    COALESCE(ams.MaterialQualityVariation, 0) AS MaterialQualityVariation,\n    COALESCE(ams.MaterialCount, 0) AS MaterialCount,\n    COALESCE(ams.TotalMaterialCost, 0) AS TotalMaterialCost,\n    COALESCE(pb.TotalBudget, 0) AS TotalBudget,\n    CASE\n        WHEN pb.TotalBudget > 0 THEN (COALESCE(ams.TotalMaterialCost, 0) / pb.TotalBudget) * 100\n        ELSE 0\n    END AS MaterialToBudgetRatio,\n    (0.4 * (CASE WHEN ais.TotalInspections > 0 THEN (CAST(ais.SuccessfulInspections AS REAL) / ais.TotalInspections) ELSE 0 END)) +\n    (0.3 * COALESCE(ams.AvgMaterialRating, 0) / 10) +\n    (0.1 * (1 - COALESCE(ams.MaterialQualityVariation, 0) / 10)) +\n    (0.2 * (1 - (CASE WHEN pb.TotalBudget > 0 THEN (COALESCE(ams.TotalMaterialCost, 0) / pb.TotalBudget) ELSE 0 END))) AS EfficiencyIndex\nFROM ArchitectInspectionStats ais\nLEFT JOIN ArchitectMaterialStats ams ON ais.ArchitectID = ams.ArchitectID\nLEFT JOIN ProjectBudgets pb ON ais.ArchitectID = pb.ArchitectID\nORDER BY EfficiencyIndex DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH ArchitectInspections AS (\n  SELECT \n    a.ArchitectID,\n    a.FirstName,\n    a.LastName,\n    a.Specialization,\n    COUNT(i.InspectionID) AS TotalInspections,\n    SUM(CASE WHEN i.Result = 'Успешно' THEN 1 ELSE 0 END) AS SuccessfulInspections,\n    SUM(CASE WHEN i.Result = 'Неуспешно' THEN 1 ELSE 0 END) AS UnsuccessfulInspections\n  FROM \n    Architects a\n  JOIN \n    Projects p ON a.ArchitectID = p.ArchitectID\n  JOIN \n    Inspections i ON p.ProjectID = i.ProjectID\n  WHERE \n    i.InspectionDate >= DATE_SUB(CURRENT_DATE(), INTERVAL 3 YEAR)\n  GROUP BY \n    a.ArchitectID, a.FirstName, a.LastName, a.Specialization\n),\nArchitectMaterials AS (\n  SELECT \n    a.ArchitectID,\n    AVG(m.QualityRating) AS AverageMaterialRating,\n    VARIANCE(m.QualityRating) AS MaterialVariance,\n    COUNT(DISTINCT m.MaterialID) AS MaterialCount,\n    SUM(m.CostPerUnit * m.QuantityInStock) AS TotalMaterialCost,\n    SUM(p.Budget) AS TotalBudget\n  FROM \n    Architects a\n  JOIN \n    Projects p ON a.ArchitectID = p.ArchitectID\n  JOIN \n    Buildings b ON p.ProjectID = b.ProjectID\n  JOIN \n    Materials m ON b.Material = m.MaterialName\n  GROUP BY \n    a.ArchitectID\n),\nArchitectEfficiency AS (\n  SELECT \n    ai.ArchitectID,\n    ai.FirstName,\n    ai.LastName,\n    ai.Specialization,\n    ai.TotalInspections,\n    ai.SuccessfulInspections,\n    ai.UnsuccessfulInspections,\n    ROUND(ai.SuccessfulInspections * 100.0 / ai.TotalInspections, 2) AS SuccessfulInspectionRate,\n    am.AverageMaterialRating,\n    am.MaterialVariance,\n    am.MaterialCount,\n    am.TotalMaterialCost,\n    am.TotalBudget,\n    ROUND(am.TotalMaterialCost * 100.0 / am.TotalBudget, 2) AS MaterialToBudgetRatio,\n    ROUND(\n      (ai.SuccessfulInspectionRate * 0.4) + \n      (am.AverageMaterialRating * 0.3) + \n      (am.MaterialVariance * 0.1) + \n      ((1 - am.MaterialToBudgetRatio) * 0.2), \n      2\n    ) AS EfficiencyIndex\n  FROM \n    ArchitectInspections ai\n  JOIN \n    ArchitectMaterials am ON ai.ArchitectID = am.ArchitectID\n)\nSELECT \n  FirstName,\n  LastName,\n  Specialization,\n  TotalInspections,\n  SuccessfulInspections,\n  UnsuccessfulInspections,\n  SuccessfulInspectionRate,\n  AverageMaterialRating,\n  MaterialVariance,\n  MaterialCount,\n  TotalMaterialCost,\n  TotalBudget,\n  MaterialToBudgetRatio,\n  EfficiencyIndex\nFROM \n  ArchitectEfficiency\nORDER BY \n  EfficiencyIndex DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH ArchitectProjects AS (\n  SELECT a.ArchitectID, a.FirstName, a.LastName, a.Specialization, p.ProjectID\n  FROM Architects a\n  JOIN Projects p ON a.ArchitectID = p.ArchitectID\n),\nInspectionStats AS (\n  SELECT ap.ArchitectID, ap.FirstName, ap.LastName, ap.Specialization, \n         COUNT(i.InspectionID) AS TotalInspections,\n         SUM(CASE WHEN i.Result = 'Успешно' THEN 1 ELSE 0 END) AS SuccessfulInspections,\n         SUM(CASE WHEN i.Result = 'Неуспешно' THEN 1 ELSE 0 END) AS FailedInspections\n  FROM ArchitectProjects ap\n  JOIN Inspections i ON ap.ProjectID = i.ProjectID\n  WHERE i.InspectionDate >= DATE_SUB(CURRENT_DATE(), INTERVAL 3 YEAR)\n  GROUP BY ap.ArchitectID, ap.FirstName, ap.LastName, ap.Specialization\n),\nMaterialStats AS (\n  SELECT ap.ArchitectID, ap.FirstName, ap.LastName, ap.Specialization, \n         AVG(m.QualityRating) AS AverageMaterialRating,\n         VARIANCE(m.QualityRating) AS MaterialQualityVariance,\n         COUNT(DISTINCT m.MaterialID) AS MaterialCount,\n         SUM(m.CostPerUnit * m.QuantityInStock) AS TotalMaterialCost\n  FROM ArchitectProjects ap\n  JOIN Buildings b ON ap.ProjectID = b.ProjectID\n  JOIN Materials m ON b.BuildingID = m.MaterialID\n  GROUP BY ap.ArchitectID, ap.FirstName, ap.LastName, ap.Specialization\n),\nProjectBudgets AS (\n  SELECT ap.ArchitectID, ap.FirstName, ap.LastName, ap.Specialization, \n         SUM(p.Budget) AS TotalProjectBudget\n  FROM ArchitectProjects ap\n  JOIN Projects p ON ap.ProjectID = p.ProjectID\n  GROUP BY ap.ArchitectID, ap.FirstName, ap.LastName, ap.Specialization\n),\nEfficiencyIndex AS (\n  SELECT isq.ArchitectID, isq.FirstName, isq.LastName, isq.Specialization, \n         isq.TotalInspections, isq.SuccessfulInspections, isq.FailedInspections,\n         (isq.SuccessfulInspections * 1.0 / isq.TotalInspections) * 100 AS SuccessfulInspectionPercentage,\n         ms.AverageMaterialRating, ms.MaterialQualityVariance, ms.MaterialCount, ms.TotalMaterialCost,\n         pb.TotalProjectBudget,\n         (ms.TotalMaterialCost * 1.0 / pb.TotalProjectBudget) AS MaterialToBudgetRatio,\n         ((isq.SuccessfulInspections * 1.0 / isq.TotalInspections) * 0.4) +\n         (ms.AverageMaterialRating * 0.3) +\n         (ms.MaterialQualityVariance * 0.1) +\n         ((ms.TotalMaterialCost * 1.0 / pb.TotalProjectBudget) * 0.2) AS EfficiencyIndex\n  FROM InspectionStats isq\n  JOIN MaterialStats ms ON isq.ArchitectID = ms.ArchitectID\n  JOIN ProjectBudgets pb ON isq.ArchitectID = pb.ArchitectID\n)\nSELECT FirstName, LastName, Specialization, TotalInspections, SuccessfulInspections, FailedInspections, \n       SuccessfulInspectionPercentage, AverageMaterialRating, MaterialQualityVariance, MaterialCount, \n       TotalMaterialCost, TotalProjectBudget, MaterialToBudgetRatio, EfficiencyIndex\nFROM EfficiencyIndex\nORDER BY EfficiencyIndex DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH ArchitectInspections AS (\n    SELECT \n        a.ArchitectID,\n        a.FirstName,\n        a.LastName,\n        a.Specialization,\n        COUNT(i.InspectionID) AS TotalInspections,\n        SUM(CASE WHEN i.Result = 'Успешно' THEN 1 ELSE 0 END) AS SuccessfulInspections,\n        SUM(CASE WHEN i.Result = 'Неуспешно' THEN 1 ELSE 0 END) AS FailedInspections,\n        CASE \n            WHEN COUNT(i.InspectionID) > 0 THEN \n                (SUM(CASE WHEN i.Result = 'Успешно' THEN 1 ELSE 0 END) * 100.0 / COUNT(i.InspectionID)) \n            ELSE 0 \n        END AS SuccessPercentage\n    FROM \n        Architects a\n        JOIN Projects p ON a.ArchitectID = p.ArchitectID\n        JOIN Inspections i ON p.ProjectID = i.ProjectID\n    WHERE \n        i.InspectionDate >= DATE_SUB(CURRENT_DATE(), INTERVAL 3 YEAR)\n    GROUP BY \n        a.ArchitectID, a.FirstName, a.LastName, a.Specialization\n),\nArchitectMaterials AS (\n    SELECT \n        a.ArchitectID,\n        AVG(m.QualityRating) AS AvgMaterialRating,\n        STDDEV(m.QualityRating) AS MaterialQualityVariation,\n        COUNT(m.MaterialID) AS MaterialCount,\n        SUM(m.CostPerUnit * m.QuantityInStock) AS TotalMaterialCost,\n        SUM(p.Budget) AS TotalBudget,\n        CASE \n            WHEN SUM(p.Budget) > 0 THEN \n                (SUM(m.CostPerUnit * m.QuantityInStock) * 100.0 / SUM(p.Budget)) \n            ELSE 0 \n        END AS MaterialBudgetRatio\n    FROM \n        Architects a\n        JOIN Projects p ON a.ArchitectID = p.ArchitectID\n        JOIN Buildings b ON p.ProjectID = b.ProjectID\n        JOIN Materials m ON m.MaterialID > 0\n    GROUP BY \n        a.ArchitectID\n),\nArchitectEfficiency AS (\n    SELECT \n        ai.ArchitectID,\n        ai.FirstName,\n        ai.LastName,\n        ai.Specialization,\n        ai.TotalInspections,\n        ai.SuccessfulInspections,\n        ai.FailedInspections,\n        ai.SuccessPercentage,\n        am.AvgMaterialRating,\n        am.MaterialQualityVariation,\n        am.MaterialCount,\n        am.TotalMaterialCost,\n        am.TotalBudget,\n        am.MaterialBudgetRatio,\n        (ai.SuccessPercentage * 0.4) + \n        (am.AvgMaterialRating * 0.3) + \n        (1 / (1 + am.MaterialQualityVariation) * 0.1) + \n        (1 / (1 + am.MaterialBudgetRatio) * 0.2) AS EfficiencyIndex\n    FROM \n        ArchitectInspections ai\n        JOIN ArchitectMaterials am ON ai.ArchitectID = am.ArchitectID\n)\nSELECT \n    FirstName AS Имя,\n    LastName AS Фамилия,\n    Specialization AS Специализация,\n    TotalInspections AS Общее_количество_инспекций,\n    SuccessfulInspections AS Успешные_инспекции,\n    FailedInspections AS Неуспешные_инспекции,\n    SuccessPercentage AS Процент_успешных_инспекций,\n    AvgMaterialRating AS Средний_рейтинг_материалов,\n    MaterialQualityVariation AS Вариация_качества_материалов,\n    MaterialCount AS Количество_материалов,\n    TotalMaterialCost AS Общая_стоимость_материалов,\n    TotalBudget AS Общий_бюджет,\n    MaterialBudgetRatio AS Соотношение_материалов_к_бюджету,\n    EfficiencyIndex AS Индекс_эффективности\nFROM \n    ArchitectEfficiency\nORDER BY \n    EfficiencyIndex DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "WITH ArchitectInspections AS (\n    SELECT \n        a.ArchitectID,\n        a.FirstName,\n        a.LastName,\n        a.Specialization,\n        COUNT(i.InspectionID) AS TotalInspections,\n        SUM(CASE WHEN i.Result = 'Успешно' THEN 1 ELSE 0 END) AS SuccessfulInspections,\n        SUM(CASE WHEN i.Result = 'Неуспешно' THEN 1 ELSE 0 END) AS FailedInspections,\n        CASE \n            WHEN COUNT(i.InspectionID) > 0 THEN \n                SUM(CASE WHEN i.Result = 'Успешно' THEN 1 ELSE 0 END) * 100.0 / COUNT(i.InspectionID) \n            ELSE 0 \n        END AS SuccessPercentage\n    FROM Architects a\n    JOIN Projects p ON a.ArchitectID = p.ArchitectID\n    JOIN Inspections i ON p.ProjectID = i.ProjectID\n    WHERE i.InspectionDate >= DATE_SUB(CURRENT_DATE(), INTERVAL 3 YEAR)\n    GROUP BY a.ArchitectID, a.FirstName, a.LastName, a.Specialization\n),\nArchitectMaterials AS (\n    SELECT \n        a.ArchitectID,\n        AVG(m.QualityRating) AS AvgMaterialRating,\n        STDDEV(m.QualityRating) AS MaterialQualityVariation,\n        COUNT(m.MaterialID) AS MaterialCount,\n        SUM(m.CostPerUnit * m.QuantityInStock) AS TotalMaterialCost,\n        SUM(p.Budget) AS TotalBudget,\n        CASE \n            WHEN SUM(p.Budget) > 0 THEN \n                SUM(m.CostPerUnit * m.QuantityInStock) * 100.0 / SUM(p.Budget) \n            ELSE 0 \n        END AS MaterialBudgetRatio\n    FROM Architects a\n    JOIN Projects p ON a.ArchitectID = p.ArchitectID\n    JOIN Buildings b ON p.ProjectID = b.ProjectID\n    JOIN Materials m ON m.MaterialID > 0\n    GROUP BY a.ArchitectID\n),\nArchitectEfficiency AS (\n    SELECT \n        ai.ArchitectID,\n        ai.FirstName,\n        ai.LastName,\n        ai.Specialization,\n        ai.TotalInspections,\n        ai.SuccessfulInspections,\n        ai.FailedInspections,\n        ai.SuccessPercentage,\n        am.AvgMaterialRating,\n        am.MaterialQualityVariation,\n        am.MaterialCount,\n        am.TotalMaterialCost,\n        am.TotalBudget,\n        am.MaterialBudgetRatio,\n        (ai.SuccessPercentage * 0.4) + \n        (am.AvgMaterialRating * 0.3) + \n        (1 / (1 + am.MaterialQualityVariation) * 0.1) + \n        (1 / (1 + am.MaterialBudgetRatio) * 0.2) AS EfficiencyIndex\n    FROM ArchitectInspections ai\n    JOIN ArchitectMaterials am ON ai.ArchitectID = am.ArchitectID\n)\nSELECT \n    FirstName AS Имя,\n    LastName AS Фамилия,\n    Specialization AS Специализация,\n    TotalInspections AS \"Общее количество инспекций\",\n    SuccessfulInspections AS \"Успешные инспекции\",\n    FailedInspections AS \"Неуспешные инспекции\",\n    SuccessPercentage AS \"Процент успешных инспекций\",\n    AvgMaterialRating AS \"Средний рейтинг материалов\",\n    MaterialQualityVariation AS \"Вариация качества материалов\",\n    MaterialCount AS \"Количество материалов\",\n    TotalMaterialCost AS \"Общая стоимость материалов\",\n    TotalBudget AS \"Общий бюджет\",\n    MaterialBudgetRatio AS \"Соотношение материалов к бюджету\",\n    EfficiencyIndex AS \"Индекс эффективности\"\nFROM ArchitectEfficiency\nORDER BY EfficiencyIndex DESC\nLIMIT 5;",
            "gigachat_response": "WITH ArchitectProjects AS (\n    SELECT \n        a.ArchitectID, \n        a.FirstName, \n        a.LastName, \n        a.Specialization,\n        p.ProjectID,\n        p.Budget,\n        i.InspectionID,\n        i.Result,\n        m.MaterialID,\n        m.QualityRating,\n        m.CostPerUnit,\n        m.QuantityInStock\n    FROM \n        Architects a\n    INNER JOIN \n        Projects p ON a.ArchitectID = p.ArchitectID\n    LEFT JOIN \n        Inspections i ON p.ProjectID = i.ProjectID\n    LEFT JOIN \n        Buildings b ON p.ProjectID = b.ProjectID\n    LEFT JOIN \n        Materials m ON b.Material = m.MaterialName\n    WHERE \n        p.EndDate BETWEEN CURRENT_DATE() - INTERVAL 3 YEAR AND CURRENT_DATE()\n),\nArchitectMetrics AS (\n    SELECT \n        ap.ArchitectID,\n        ap.FirstName,\n        ap.LastName,\n        ap.Specialization,\n        COUNT(ap.InspectionID) AS TotalInspections,\n        SUM(CASE WHEN ap.Result = 'Успешно' THEN 1 ELSE 0 END) AS SuccessfulInspections,\n        SUM(CASE WHEN ap.Result <> 'Успешно' THEN 1 ELSE 0 END) AS UnsuccessfulInspections,\n        AVG(ap.QualityRating) AS AverageQualityRating,\n        STDDEV_SAMP(ap.QualityRating) AS VariationQualityRating,\n        COUNT(DISTINCT ap.MaterialID) AS NumberOfMaterials,\n        SUM(ap.CostPerUnit * ap.QuantityInStock) AS TotalMaterialCost,\n        SUM(ap.Budget) AS TotalBudget,\n        SUM(ap.CostPerUnit * ap.QuantityInStock) / NULLIF(SUM(ap.Budget), 0) AS MaterialToBudgetRatio\n    FROM \n        ArchitectProjects ap\n    GROUP BY \n        ap.ArchitectID, ap.FirstName, ap.LastName, ap.Specialization\n),\nFinalResults AS (\n    SELECT \n        am.*,\n        (SuccessfulInspections / NULLIF(TotalInspections, 0)) * 40 +\n        AverageQualityRating * 30 +\n        VariationQualityRating * 10 +\n        MaterialToBudgetRatio * 20 AS EfficiencyIndex\n    FROM \n        ArchitectMetrics am\n)\nSELECT \n    FirstName, \n    LastName, \n    Specialization, \n    TotalInspections, \n    SuccessfulInspections, \n    UnsuccessfulInspections, \n    (SuccessfulInspections / NULLIF(TotalInspections, 0)) * 100 AS SuccessRatePercentage, \n    AverageQualityRating, \n    VariationQualityRating, \n    NumberOfMaterials, \n    TotalMaterialCost, \n    TotalBudget, \n    MaterialToBudgetRatio, \n    EfficiencyIndex\nFROM \n    FinalResults\nORDER BY \n    EfficiencyIndex DESC\nLIMIT 5;",
            "gigachat_response_ru": "WITH ArchitectProjects AS (\n    SELECT \n        a.ArchitectID,\n        a.FirstName,\n        a.LastName,\n        a.Specialization,\n        p.ProjectID,\n        p.Budget,\n        i.InspectionID,\n        i.Result,\n        m.QualityRating,\n        m.CostPerUnit,\n        m.QuantityInStock\n    FROM \n        Architects a\n    INNER JOIN \n        Projects p ON a.ArchitectID = p.ArchitectID\n    LEFT JOIN \n        Inspections i ON p.ProjectID = i.ProjectID\n    LEFT JOIN \n        Buildings b ON p.ProjectID = b.ProjectID\n    LEFT JOIN \n        Materials m ON b.Material = m.MaterialName\n    WHERE \n        i.InspectionDate BETWEEN CURRENT_DATE() - INTERVAL 3 YEAR AND CURRENT_DATE()\n),\nArchitectMetrics AS (\n    SELECT \n        ArchitectID,\n        FirstName,\n        LastName,\n        Specialization,\n        COUNT(DISTINCT ProjectID) AS TotalInspections,\n        SUM(CASE WHEN Result = 'Успешно' THEN 1 ELSE 0 END) AS SuccessfulInspections,\n        SUM(CASE WHEN Result <> 'Успешно' THEN 1 ELSE 0 END) AS UnsuccessfulInspections,\n        AVG(QualityRating) AS AverageQualityRating,\n        STDDEV_SAMP(QualityRating) AS VariationQualityRating,\n        COUNT(DISTINCT MaterialID) AS NumberOfMaterials,\n        SUM(CostPerUnit * QuantityInStock) AS TotalMaterialCost,\n        SUM(Budget) AS TotalBudget,\n        SUM(CostPerUnit * QuantityInStock) / NULLIF(SUM(Budget), 0) AS MaterialToBudgetRatio\n    FROM \n        ArchitectProjects\n    GROUP BY \n        ArchitectID, FirstName, LastName, Specialization\n),\nFinalResults AS (\n    SELECT \n        FirstName,\n        LastName,\n        Specialization,\n        TotalInspections,\n        SuccessfulInspections,\n        UnsuccessfulInspections,\n        (SuccessfulInspections * 100.0 / TotalInspections) AS SuccessRatePercentage,\n        AverageQualityRating,\n        VariationQualityRating,\n        NumberOfMaterials,\n        TotalMaterialCost,\n        TotalBudget,\n        MaterialToBudgetRatio,\n        (SuccessRatePercentage * 0.4 + AverageQualityRating * 0.3 + VariationQualityRating * 0.1 + (1 - MaterialToBudgetRatio) * 0.2) AS EfficiencyIndex\n    FROM \n        ArchitectMetrics\n)\nSELECT *\nFROM FinalResults\nORDER BY EfficiencyIndex DESC\nLIMIT 5;"
        },
        {
            "question": "Какие здания, построенные после 2015 года, имеют более 50 этажей и расположены в проектах с бюджетом более 150 миллионов рублей? Для каждого здания показать подробную информацию о нем, о проекте, информацию об архитекторе с его опытом и специализацией. Ограничить результат 7 записями, отсортированными по высоте здания.",
            "sql_query": "SELECT b.BuildingName, b.Height, b.Floors, b.Material, b.Style, p.ProjectName, p.Budget, p.Location, a.FirstName, a.LastName, a.YearsOfExperience, a.Specialization FROM Buildings b JOIN Projects p ON b.ProjectID = p.ProjectID JOIN Architects a ON p.ArchitectID = a.ArchitectID WHERE b.YearCompleted > 2015 AND b.Floors > 50 AND p.Budget > 150000000 ORDER BY b.Height DESC LIMIT 7;",
            "gpt-4o_response": "SELECT \n    b.BuildingName,\n    b.Height,\n    b.Floors,\n    b.Material,\n    b.YearCompleted,\n    b.Style,\n    b.`Usage`,\n    p.ProjectName,\n    p.Budget,\n    p.Location,\n    a.FirstName AS ArchitectFirstName,\n    a.LastName AS ArchitectLastName,\n    a.YearsOfExperience,\n    a.Specialization\nFROM \n    Buildings b\nJOIN \n    Projects p ON b.ProjectID = p.ProjectID\nJOIN \n    Architects a ON p.ArchitectID = a.ArchitectID\nWHERE \n    b.YearCompleted > 2015\n    AND b.Floors > 50\n    AND p.Budget > 150000000\nORDER BY \n    b.Height\nLIMIT 7;",
            "gpt-4o_response_ru": "SELECT \n    b.BuildingName,\n    b.Height,\n    b.Floors,\n    b.Material,\n    b.YearCompleted,\n    b.Style,\n    b.`Usage`,\n    p.ProjectName,\n    p.Budget,\n    p.Location,\n    a.FirstName,\n    a.LastName,\n    a.YearsOfExperience,\n    a.Specialization\nFROM \n    Buildings b\nJOIN \n    Projects p ON b.ProjectID = p.ProjectID\nJOIN \n    Architects a ON p.ArchitectID = a.ArchitectID\nWHERE \n    b.YearCompleted > 2015\n    AND b.Floors > 50\n    AND p.Budget > 150000000\nORDER BY \n    b.Height\nLIMIT 7;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    b.BuildingName,\n    b.Height,\n    b.Floors,\n    b.Material,\n    b.YearCompleted,\n    b.Style,\n    b.`Usage`,\n    p.ProjectName,\n    p.StartDate,\n    p.EndDate,\n    p.Budget,\n    p.Location,\n    p.Status,\n    a.FirstName AS ArchitectFirstName,\n    a.LastName AS ArchitectLastName,\n    a.YearsOfExperience,\n    a.Specialization\nFROM\n    Buildings AS b\nJOIN\n    Projects AS p\nON\n    b.ProjectID = p.ProjectID\nJOIN\n    Architects AS a\nON\n    p.ArchitectID = a.ArchitectID\nWHERE\n    b.YearCompleted > 2015\n    AND b.Floors > 50\n    AND p.Budget > 150000000\nORDER BY\n    b.Height\nLIMIT 7;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    b.BuildingName,\n    b.Height,\n    b.Floors,\n    b.Material,\n    b.YearCompleted,\n    b.Style,\n    b.`Usage`,\n    p.ProjectName,\n    p.StartDate,\n    p.EndDate,\n    p.Budget,\n    p.Location,\n    p.Status,\n    a.FirstName AS ArchitectFirstName,\n    a.LastName AS ArchitectLastName,\n    a.YearsOfExperience,\n    a.Specialization\nFROM Buildings b\nJOIN Projects p ON b.ProjectID = p.ProjectID\nJOIN Architects a ON p.ArchitectID = a.ArchitectID\nWHERE b.YearCompleted > 2015\n  AND b.Floors > 50\n  AND p.Budget > 150000000\nORDER BY b.Height\nLIMIT 7;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    b.BuildingName, \n    b.Height, \n    b.Floors, \n    b.Material, \n    b.YearCompleted, \n    b.Style, \n    b.`Usage`, \n    p.ProjectName, \n    p.Budget, \n    p.StartDate, \n    p.EndDate, \n    p.Location, \n    a.FirstName, \n    a.LastName, \n    a.YearsOfExperience, \n    a.Specialization\nFROM \n    Buildings b\nJOIN \n    Projects p ON b.ProjectID = p.ProjectID\nJOIN \n    Architects a ON p.ArchitectID = a.ArchitectID\nWHERE \n    b.YearCompleted > 2015 AND \n    b.Floors > 50 AND \n    p.Budget > 150000000\nORDER BY \n    b.Height DESC\nLIMIT 7;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    b.BuildingName, \n    b.Height, \n    b.Floors, \n    b.Material, \n    b.YearCompleted, \n    b.Style, \n    b.`Usage`, \n    p.ProjectName, \n    p.Budget, \n    p.StartDate, \n    p.EndDate, \n    a.FirstName, \n    a.LastName, \n    a.YearsOfExperience, \n    a.Specialization\nFROM \n    Buildings b\nJOIN \n    Projects p ON b.ProjectID = p.ProjectID\nJOIN \n    Architects a ON p.ArchitectID = a.ArchitectID\nWHERE \n    b.YearCompleted > 2015 AND \n    b.Floors > 50 AND \n    p.Budget > 150000000\nORDER BY \n    b.Height DESC\nLIMIT 7;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    b.BuildingName, \n    b.Height, \n    b.Floors, \n    b.Material, \n    b.YearCompleted, \n    b.Style, \n    b.`Usage`,\n    p.ProjectName, \n    p.StartDate, \n    p.EndDate, \n    p.Budget, \n    p.Location AS ProjectLocation,\n    a.FirstName AS ArchitectFirstName, \n    a.LastName AS ArchitectLastName, \n    a.YearsOfExperience, \n    a.Specialization\nFROM \n    Buildings b\nJOIN \n    Projects p ON b.ProjectID = p.ProjectID\nJOIN \n    Architects a ON p.ArchitectID = a.ArchitectID\nWHERE \n    b.YearCompleted > 2015 \n    AND b.Floors > 50 \n    AND p.Budget > 150000000\nORDER BY \n    b.Height DESC\nLIMIT 7;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    b.BuildingName, \n    b.Height, \n    b.Floors, \n    b.Material, \n    b.YearCompleted, \n    b.Style, \n    b.`Usage`,\n    p.ProjectName, \n    p.StartDate, \n    p.EndDate, \n    p.Budget, \n    p.Location AS ProjectLocation,\n    a.FirstName AS ArchitectFirstName, \n    a.LastName AS ArchitectLastName, \n    a.YearsOfExperience, \n    a.Specialization\nFROM \n    Buildings b\nJOIN \n    Projects p ON b.ProjectID = p.ProjectID\nJOIN \n    Architects a ON p.ArchitectID = a.ArchitectID\nWHERE \n    b.YearCompleted > 2015 \n    AND b.Floors > 50 \n    AND p.Budget > 150000000\nORDER BY \n    b.Height DESC\nLIMIT 7;",
            "gigachat_response": "SELECT \n    b.BuildingID, \n    b.BuildingName, \n    b.Height, \n    b.Floors, \n    b.YearCompleted, \n    b.Style, \n    b.Usage, \n    p.ProjectID, \n    p.ProjectName, \n    p.Budget, \n    p.Location, \n    p.Status, \n    a.ArchitectID, \n    a.FirstName, \n    a.LastName, \n    a.YearsOfExperience, \n    a.Specialization\nFROM \n    Buildings b\nJOIN \n    Projects p ON b.ProjectID = p.ProjectID\nJOIN \n    Architects a ON p.ArchitectID = a.ArchitectID\nWHERE \n    b.YearCompleted > 2015 \nAND \n    b.Floors > 50 \nAND \n    p.Budget > 150000000\nORDER BY \n    b.Height DESC\nLIMIT 7;",
            "gigachat_response_ru": "SELECT \n    b.BuildingID, \n    b.BuildingName, \n    b.Height, \n    b.Floors, \n    b.YearCompleted, \n    b.Style, \n    b.Usage, \n    p.ProjectID, \n    p.ProjectName, \n    p.Budget, \n    p.Location, \n    p.Status, \n    a.ArchitectID, \n    a.FirstName, \n    a.LastName, \n    a.YearsOfExperience, \n    a.Specialization\nFROM \n    Buildings b\nINNER JOIN \n    Projects p ON b.ProjectID = p.ProjectID\nINNER JOIN \n    Architects a ON p.ArchitectID = a.ArchitectID\nWHERE \n    b.YearCompleted > 2015 \n    AND b.Floors > 50 \n    AND p.Budget > 150000000\nORDER BY \n    b.Height DESC\nLIMIT 7;"
        },
        {
            "question": "Какие клиенты, работающие с архитекторами, имеющими опыт более 20 лет, заключили контракты на сумму более 200 тысяч рублей за последние 3 года (и сколько контрактов) и имеют успешные инспекции по своим проектам? Показать топ-6 клиентов по общему бюджету проектов.",
            "sql_query": "WITH RecentContracts AS (SELECT cl.ClientID, cl.CompanyName, cl.City, cl.Country, a.ArchitectID, a.FirstName AS ArchitectFirstName, a.LastName AS ArchitectLastName, a.YearsOfExperience, COUNT(DISTINCT co.ContractID) AS ContractCount, SUM(co.Amount) AS TotalContractAmount, SUM(p.Budget) AS TotalProjectBudget FROM Clients cl JOIN Contracts co ON cl.ClientID = co.ClientID JOIN Projects p ON co.ProjectID = p.ProjectID JOIN Architects a ON p.ArchitectID = a.ArchitectID JOIN Inspections i ON p.ProjectID = i.ProjectID WHERE a.YearsOfExperience > 20 AND co.Amount > 200000 AND co.ContractDate >= DATE_SUB(CURRENT_DATE(), INTERVAL 3 YEAR) AND i.Result = 'Успешно' GROUP BY cl.ClientID, cl.CompanyName, cl.City, cl.Country, a.ArchitectID, a.FirstName, a.LastName, a.YearsOfExperience) SELECT rc.CompanyName, rc.City, rc.Country, rc.ArchitectFirstName, rc.ArchitectLastName, rc.YearsOfExperience, rc.ContractCount, rc.TotalContractAmount, rc.TotalProjectBudget FROM RecentContracts rc ORDER BY rc.TotalProjectBudget DESC LIMIT 6;",
            "gpt-4o_response": "SELECT c.FirstName, c.LastName, c.CompanyName, COUNT(DISTINCT ct.ContractID) AS ContractCount, SUM(p.Budget) AS TotalProjectBudget\nFROM Clients c\nJOIN Projects p ON c.ClientID = p.ClientID\nJOIN Architects a ON p.ArchitectID = a.ArchitectID\nJOIN Contracts ct ON c.ClientID = ct.ClientID AND p.ProjectID = ct.ProjectID\nJOIN Inspections i ON p.ProjectID = i.ProjectID\nWHERE a.YearsOfExperience > 20\nAND ct.Amount > 200000\nAND ct.ContractDate >= DATE_SUB(CURRENT_DATE(), INTERVAL 3 YEAR)\nAND i.Result = 'Успешно'\nGROUP BY c.FirstName, c.LastName, c.CompanyName\nORDER BY TotalProjectBudget DESC\nLIMIT 6;",
            "gpt-4o_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    c.CompanyName, \n    COUNT(DISTINCT ct.ContractID) AS ContractCount, \n    SUM(p.Budget) AS TotalProjectBudget\nFROM \n    Clients c\nJOIN \n    Projects p ON c.ClientID = p.ClientID\nJOIN \n    Architects a ON p.ArchitectID = a.ArchitectID\nJOIN \n    Contracts ct ON c.ClientID = ct.ClientID AND p.ProjectID = ct.ProjectID\nJOIN \n    Inspections i ON p.ProjectID = i.ProjectID\nWHERE \n    a.YearsOfExperience > 20 \n    AND ct.Amount > 200000 \n    AND ct.ContractDate >= DATE_SUB(CURRENT_DATE(), INTERVAL 3 YEAR)\n    AND i.Result = 'Успешно'\nGROUP BY \n    c.FirstName, c.LastName, c.CompanyName\nORDER BY \n    TotalProjectBudget DESC\nLIMIT 6;",
            "google/gemini-2.0-flash-001_response": "SELECT \n    c.FirstName,\n    c.LastName,\n    c.CompanyName,\n    COUNT(DISTINCT ct.ContractID) AS ContractCount,\n    SUM(p.Budget) AS TotalProjectBudget\nFROM Clients c\nJOIN Projects p ON c.ClientID = p.ClientID\nJOIN Architects a ON p.ArchitectID = a.ArchitectID\nJOIN Contracts ct ON p.ProjectID = ct.ProjectID AND c.ClientID = ct.ClientID\nJOIN Inspections i ON p.ProjectID = i.ProjectID\nWHERE a.YearsOfExperience > 20\n  AND ct.Amount > 200000\n  AND ct.ContractDate >= DATE('now', '-3 years')\n  AND i.Result = 'Успешно'\nGROUP BY c.ClientID, c.FirstName, c.LastName, c.CompanyName\nORDER BY TotalProjectBudget DESC\nLIMIT 6;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    c.FirstName,\n    c.LastName,\n    c.CompanyName,\n    COUNT(DISTINCT ct.ContractID) AS NumberOfContracts,\n    SUM(p.Budget) AS TotalProjectBudget\nFROM\n    Clients c\nJOIN\n    Projects p ON c.ClientID = p.ClientID\nJOIN\n    Architects a ON p.ArchitectID = a.ArchitectID\nJOIN\n    Contracts ct ON p.ProjectID = ct.ProjectID AND c.ClientID = ct.ClientID\nJOIN\n    Inspections i ON p.ProjectID = i.ProjectID\nWHERE\n    a.YearsOfExperience > 20\n    AND ct.Amount > 200000\n    AND ct.ContractDate >= DATE('now', '-3 years')\n    AND i.Result = 'Успешно'\nGROUP BY\n    c.ClientID,\n    c.FirstName,\n    c.LastName,\n    c.CompanyName\nORDER BY\n    TotalProjectBudget DESC\nLIMIT 6;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH ClientContracts AS (\n  SELECT c.ClientID, c.FirstName, c.LastName, c.CompanyName, \n         SUM(con.Amount) AS TotalContractAmount, \n         COUNT(con.ContractID) AS ContractCount\n  FROM Clients c\n  JOIN Contracts con ON c.ClientID = con.ClientID\n  JOIN Projects p ON con.ProjectID = p.ProjectID\n  JOIN Architects a ON p.ArchitectID = a.ArchitectID\n  WHERE a.YearsOfExperience > 20 AND con.ContractDate >= DATE_SUB(CURRENT_DATE(), INTERVAL 3 YEAR)\n  GROUP BY c.ClientID, c.FirstName, c.LastName, c.CompanyName\n  HAVING SUM(con.Amount) > 200000\n),\nClientProjects AS (\n  SELECT c.ClientID, c.FirstName, c.LastName, c.CompanyName, \n         SUM(p.Budget) AS TotalProjectBudget\n  FROM Clients c\n  JOIN Projects p ON c.ClientID = p.ClientID\n  GROUP BY c.ClientID, c.FirstName, c.LastName, c.CompanyName\n),\nClientInspections AS (\n  SELECT c.ClientID, c.FirstName, c.LastName, c.CompanyName, \n         COUNT(i.InspectionID) AS SuccessfulInspectionCount\n  FROM Clients c\n  JOIN Projects p ON c.ClientID = p.ClientID\n  JOIN Inspections i ON p.ProjectID = i.ProjectID\n  WHERE i.Result = 'Успешно'\n  GROUP BY c.ClientID, c.FirstName, c.LastName, c.CompanyName\n)\nSELECT cc.FirstName, cc.LastName, cc.CompanyName, \n       cc.TotalContractAmount, cc.ContractCount, \n       cp.TotalProjectBudget, ci.SuccessfulInspectionCount\nFROM ClientContracts cc\nJOIN ClientProjects cp ON cc.ClientID = cp.ClientID\nJOIN ClientInspections ci ON cc.ClientID = ci.ClientID\nORDER BY cp.TotalProjectBudget DESC\nLIMIT 6;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    c.FirstName, \n    c.LastName, \n    COUNT(DISTINCT con.ContractID) AS ContractCount,\n    SUM(con.Amount) AS TotalContractAmount\nFROM \n    Clients c\nJOIN \n    Projects p ON c.ClientID = p.ClientID\nJOIN \n    Architects a ON p.ArchitectID = a.ArchitectID\nJOIN \n    Contracts con ON p.ProjectID = con.ProjectID AND c.ClientID = con.ClientID\nJOIN \n    Inspections i ON p.ProjectID = i.ProjectID\nWHERE \n    a.YearsOfExperience > 20 \n    AND con.ContractDate >= DATE_SUB(CURRENT_DATE(), INTERVAL 3 YEAR)\n    AND con.Amount > 200000\n    AND i.Result = 'Успешно'\nGROUP BY \n    c.FirstName, \n    c.LastName\nORDER BY \n    SUM(p.Budget) DESC\nLIMIT 6;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    c.ClientID,\n    c.FirstName AS ClientFirstName,\n    c.LastName AS ClientLastName,\n    c.CompanyName,\n    COUNT(DISTINCT ct.ContractID) AS ContractCount,\n    SUM(p.Budget) AS TotalProjectBudget\nFROM \n    Clients c\nJOIN \n    Contracts ct ON c.ClientID = ct.ClientID\nJOIN \n    Projects p ON ct.ProjectID = p.ProjectID\nJOIN \n    Architects a ON p.ArchitectID = a.ArchitectID\nJOIN \n    Inspections i ON p.ProjectID = i.ProjectID\nWHERE \n    a.YearsOfExperience > 20\n    AND ct.Amount > 200000\n    AND ct.ContractDate >= DATE_SUB(CURRENT_DATE(), INTERVAL 3 YEAR)\n    AND i.Result = 'Успешно'\nGROUP BY \n    c.ClientID, c.FirstName, c.LastName, c.CompanyName\nHAVING \n    COUNT(DISTINCT ct.ContractID) > 0\nORDER BY \n    TotalProjectBudget DESC\nLIMIT 6;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    c.ClientID,\n    c.FirstName,\n    c.LastName,\n    c.CompanyName,\n    COUNT(DISTINCT ct.ContractID) AS ContractCount,\n    SUM(p.Budget) AS TotalProjectBudget\nFROM \n    Clients c\nJOIN \n    Contracts ct ON c.ClientID = ct.ClientID\nJOIN \n    Projects p ON ct.ProjectID = p.ProjectID\nJOIN \n    Architects a ON p.ArchitectID = a.ArchitectID\nJOIN \n    Inspections i ON p.ProjectID = i.ProjectID\nWHERE \n    a.YearsOfExperience > 20\n    AND ct.Amount > 200000\n    AND ct.ContractDate >= DATE_SUB(CURRENT_DATE(), INTERVAL 3 YEAR)\n    AND i.Result = 'Успешно'\nGROUP BY \n    c.ClientID, c.FirstName, c.LastName, c.CompanyName\nHAVING \n    COUNT(DISTINCT ct.ContractID) > 0\nORDER BY \n    TotalProjectBudget DESC\nLIMIT 6;",
            "gigachat_response": "SELECT c.FirstName, c.LastName, c.CompanyName, COUNT(co.ContractID) AS NumberOfContracts, SUM(p.Budget) AS TotalBudget\nFROM Clients c\nJOIN Projects p ON c.ClientID = p.ClientID\nJOIN Architects a ON p.ArchitectID = a.ArchitectID\nJOIN Contracts co ON p.ProjectID = co.ProjectID\nJOIN Inspections ins ON p.ProjectID = ins.ProjectID\nWHERE a.YearsOfExperience > 20\nAND co.Amount > 200000\nAND co.ContractDate BETWEEN DATE_SUB(NOW(), INTERVAL 3 YEAR) AND NOW()\nAND ins.Result = 'Успешно'\nGROUP BY c.FirstName, c.LastName, c.CompanyName\nORDER BY TotalBudget DESC\nLIMIT 6;",
            "gigachat_response_ru": "SELECT c.FirstName, c.LastName, c.CompanyName, COUNT(co.ContractID) AS ContractCount, SUM(p.Budget) AS TotalBudget\nFROM Clients c\nJOIN Projects p ON c.ClientID = p.ClientID\nJOIN Architects a ON p.ArchitectID = a.ArchitectID\nJOIN Contracts co ON p.ProjectID = co.ProjectID\nJOIN Inspections ins ON p.ProjectID = ins.ProjectID\nWHERE a.YearsOfExperience > 20\nAND co.Amount > 200000\nAND co.ContractDate >= DATE_SUB(NOW(), INTERVAL 3 YEAR)\nAND ins.Result = 'Успешно'\nGROUP BY c.FirstName, c.LastName, c.CompanyName\nORDER BY TotalBudget DESC\nLIMIT 6;"
        },
        {
            "question": "Какие проекты имеют наилучшее соотношение качества материалов к бюджету и при этом успешно прошли не менее двух инспекций за последний год? Показать топ-8 проектов с детализацией по используемым материалам и информацией о разрешениях. [Ожидаемые колонки: Название проекта, Местоположение, Бюджет, Среднее качество материалов, Количество материалов, Используемые материалы, Количество инспекций, Количество успешных инспекций, Количество разрешений, Количество действующих разрешений, Соотношение качества к бюджету]",
            "sql_query": "WITH ProjectMaterials AS (SELECT p.ProjectID, p.ProjectName, p.StartDate, p.EndDate, p.Budget, p.Location, AVG(m.QualityRating) AS AvgMaterialQuality, COUNT(DISTINCT m.MaterialID) AS MaterialCount, GROUP_CONCAT(DISTINCT m.MaterialName SEPARATOR ', ') AS MaterialsUsed, SUM(m.CostPerUnit * m.QuantityInStock) AS TotalMaterialCost FROM Projects p JOIN Materials m ON TRUE WHERE p.StartDate >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR) GROUP BY p.ProjectID, p.ProjectName, p.StartDate, p.EndDate, p.Budget, p.Location), ProjectInspections AS (SELECT p.ProjectID, COUNT(i.InspectionID) AS InspectionCount, SUM(CASE WHEN i.Result = 'Успешно' THEN 1 ELSE 0 END) AS SuccessfulInspections FROM Projects p JOIN Inspections i ON p.ProjectID = i.ProjectID WHERE i.InspectionDate >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR) GROUP BY p.ProjectID), ProjectPermits AS (SELECT p.ProjectID, COUNT(pe.PermitID) AS PermitCount, SUM(CASE WHEN pe.Status = 'Действующий' THEN 1 ELSE 0 END) AS ActivePermits FROM Projects p JOIN Permits pe ON p.ProjectID = pe.ProjectID GROUP BY p.ProjectID) SELECT pm.ProjectName, pm.Location, pm.Budget, pm.AvgMaterialQuality, pm.MaterialCount, pm.MaterialsUsed, pi.InspectionCount, pi.SuccessfulInspections, pp.PermitCount, pp.ActivePermits, (pm.AvgMaterialQuality / (pm.Budget / 1000000)) AS QualityBudgetRatio FROM ProjectMaterials pm JOIN ProjectInspections pi ON pm.ProjectID = pi.ProjectID JOIN ProjectPermits pp ON pm.ProjectID = pp.ProjectID WHERE pi.SuccessfulInspections >= 2 ORDER BY QualityBudgetRatio DESC LIMIT 8;",
            "gpt-4o_response": "WITH MaterialQuality AS (\n    SELECT \n        p.ProjectID,\n        AVG(m.QualityRating) AS AvgMaterialQuality,\n        COUNT(m.MaterialID) AS MaterialCount,\n        GROUP_CONCAT(DISTINCT m.MaterialName) AS UsedMaterials\n    FROM Projects p\n    JOIN Buildings b ON p.ProjectID = b.ProjectID\n    JOIN Materials m ON b.Material = m.MaterialName\n    GROUP BY p.ProjectID\n),\nInspectionStats AS (\n    SELECT \n        p.ProjectID,\n        COUNT(i.InspectionID) AS TotalInspections,\n        SUM(CASE WHEN i.Result = 'Успешно' THEN 1 ELSE 0 END) AS SuccessfulInspections\n    FROM Projects p\n    JOIN Inspections i ON p.ProjectID = i.ProjectID\n    WHERE i.InspectionDate >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)\n    GROUP BY p.ProjectID\n),\nPermitStats AS (\n    SELECT \n        p.ProjectID,\n        COUNT(pe.PermitID) AS TotalPermits,\n        SUM(CASE WHEN pe.Status = 'Действующий' THEN 1 ELSE 0 END) AS ActivePermits\n    FROM Projects p\n    JOIN Permits pe ON p.ProjectID = pe.ProjectID\n    GROUP BY p.ProjectID\n),\nProjectQualityBudgetRatio AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        p.Location,\n        p.Budget,\n        mq.AvgMaterialQuality,\n        mq.MaterialCount,\n        mq.UsedMaterials,\n        is.TotalInspections,\n        is.SuccessfulInspections,\n        ps.TotalPermits,\n        ps.ActivePermits,\n        CASE WHEN p.Budget > 0 THEN mq.AvgMaterialQuality / p.Budget ELSE 0 END AS QualityBudgetRatio\n    FROM Projects p\n    JOIN MaterialQuality mq ON p.ProjectID = mq.ProjectID\n    JOIN InspectionStats is ON p.ProjectID = is.ProjectID\n    JOIN PermitStats ps ON p.ProjectID = ps.ProjectID\n    WHERE is.SuccessfulInspections >= 2\n)\nSELECT \n    ProjectName AS Название_проекта,\n    Location AS Местоположение,\n    Budget AS Бюджет,\n    AvgMaterialQuality AS Среднее_качество_материалов,\n    MaterialCount AS Количество_материалов,\n    UsedMaterials AS Используемые_материалы,\n    TotalInspections AS Количество_инспекций,\n    SuccessfulInspections AS Количество_успешных_инспекций,\n    TotalPermits AS Количество_разрешений,\n    ActivePermits AS Количество_действующих_разрешений,\n    QualityBudgetRatio AS Соотношение_качества_к_бюджету\nFROM ProjectQualityBudgetRatio\nORDER BY QualityBudgetRatio DESC\nLIMIT 8;",
            "gpt-4o_response_ru": "WITH MaterialQuality AS (\n    SELECT \n        p.ProjectID,\n        AVG(m.QualityRating) AS AvgMaterialQuality,\n        COUNT(m.MaterialID) AS MaterialCount,\n        GROUP_CONCAT(DISTINCT m.MaterialName) AS UsedMaterials\n    FROM Projects p\n    JOIN Buildings b ON p.ProjectID = b.ProjectID\n    JOIN Materials m ON b.Material = m.MaterialName\n    GROUP BY p.ProjectID\n),\nInspectionStats AS (\n    SELECT \n        p.ProjectID,\n        COUNT(i.InspectionID) AS TotalInspections,\n        SUM(CASE WHEN i.Result = 'Успешно' THEN 1 ELSE 0 END) AS SuccessfulInspections\n    FROM Projects p\n    JOIN Inspections i ON p.ProjectID = i.ProjectID\n    WHERE i.InspectionDate >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)\n    GROUP BY p.ProjectID\n),\nPermitStats AS (\n    SELECT \n        p.ProjectID,\n        COUNT(pe.PermitID) AS TotalPermits,\n        SUM(CASE WHEN pe.Status = 'Действующий' THEN 1 ELSE 0 END) AS ActivePermits\n    FROM Projects p\n    JOIN Permits pe ON p.ProjectID = pe.ProjectID\n    GROUP BY p.ProjectID\n)\nSELECT \n    p.ProjectName,\n    p.Location,\n    p.Budget,\n    mq.AvgMaterialQuality,\n    mq.MaterialCount,\n    mq.UsedMaterials,\n    is.TotalInspections,\n    is.SuccessfulInspections,\n    ps.TotalPermits,\n    ps.ActivePermits,\n    (mq.AvgMaterialQuality / p.Budget) AS QualityBudgetRatio\nFROM Projects p\nJOIN MaterialQuality mq ON p.ProjectID = mq.ProjectID\nJOIN InspectionStats is ON p.ProjectID = is.ProjectID\nJOIN PermitStats ps ON p.ProjectID = ps.ProjectID\nWHERE is.SuccessfulInspections >= 2\nORDER BY QualityBudgetRatio DESC\nLIMIT 8;",
            "google/gemini-2.0-flash-001_response": "WITH ProjectMaterialQuality AS (\n    SELECT\n        b.ProjectID,\n        AVG(m.QualityRating) AS AvgMaterialQuality,\n        COUNT(DISTINCT m.MaterialID) AS MaterialCount,\n        GROUP_CONCAT(DISTINCT m.MaterialName) AS UsedMaterials\n    FROM Buildings b\n    JOIN Projects p ON b.ProjectID = p.ProjectID\n    JOIN Materials m ON b.Material = m.MaterialName\n    GROUP BY b.ProjectID\n),\nInspectionCounts AS (\n    SELECT\n        ProjectID,\n        COUNT(*) AS TotalInspections,\n        SUM(CASE WHEN Result = 'Успешно' THEN 1 ELSE 0 END) AS SuccessfulInspections\n    FROM Inspections\n    WHERE InspectionDate >= DATE('now', '-1 year')\n    GROUP BY ProjectID\n),\nPermitCounts AS (\n    SELECT\n        ProjectID,\n        COUNT(*) AS TotalPermits,\n        SUM(CASE WHEN Status = 'Действующий' THEN 1 ELSE 0 END) AS ActivePermits\n    FROM Permits\n    GROUP BY ProjectID\n)\nSELECT\n    p.ProjectName AS Название_проекта,\n    p.Location AS Местоположение,\n    p.Budget AS Бюджет,\n    pmq.AvgMaterialQuality AS Среднее_качество_материалов,\n    pmq.MaterialCount AS Количество_материалов,\n    pmq.UsedMaterials AS Используемые_материалы,\n    ic.TotalInspections AS Количество_инспекций,\n    ic.SuccessfulInspections AS Количество_успешных_инспекций,\n    pc.TotalPermits AS Количество_разрешений,\n    pc.ActivePermits AS Количество_действующих_разрешений,\n    CASE\n        WHEN p.Budget > 0 THEN (pmq.AvgMaterialQuality / p.Budget)\n        ELSE 0\n    END AS Соотношение_качества_к_бюджету\nFROM Projects p\nJOIN ProjectMaterialQuality pmq ON p.ProjectID = pmq.ProjectID\nJOIN InspectionCounts ic ON p.ProjectID = ic.ProjectID\nJOIN PermitCounts pc ON p.ProjectID = pc.ProjectID\nWHERE ic.TotalInspections >= 2\nORDER BY Соотношение_качества_к_бюджету DESC\nLIMIT 8;",
            "google/gemini-2.0-flash-001_response_ru": "WITH ProjectMaterialQuality AS (\n    SELECT\n        b.ProjectID,\n        AVG(m.QualityRating) AS AvgMaterialQuality,\n        COUNT(DISTINCT m.MaterialID) AS MaterialCount,\n        GROUP_CONCAT(DISTINCT m.MaterialName) AS UsedMaterials\n    FROM Buildings b\n    JOIN Projects p ON b.ProjectID = p.ProjectID\n    JOIN Materials m ON b.Material = m.MaterialName\n    GROUP BY b.ProjectID\n),\nInspectionCounts AS (\n    SELECT\n        ProjectID,\n        COUNT(InspectionID) AS TotalInspections,\n        SUM(CASE WHEN Result = 'Успешно' THEN 1 ELSE 0 END) AS SuccessfulInspections\n    FROM Inspections\n    WHERE InspectionDate >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)\n    GROUP BY ProjectID\n),\nPermitCounts AS (\n    SELECT\n        ProjectID,\n        COUNT(PermitID) AS TotalPermits,\n        SUM(CASE WHEN Status = 'Действующий' THEN 1 ELSE 0 END) AS ActivePermits\n    FROM Permits\n    GROUP BY ProjectID\n)\nSELECT\n    p.ProjectName AS Название_проекта,\n    p.Location AS Местоположение,\n    p.Budget AS Бюджет,\n    pmq.AvgMaterialQuality AS Среднее_качество_материалов,\n    pmq.MaterialCount AS Количество_материалов,\n    pmq.UsedMaterials AS Используемые_материалы,\n    ic.TotalInspections AS Количество_инспекций,\n    ic.SuccessfulInspections AS Количество_успешных_инспекций,\n    pc.TotalPermits AS Количество_разрешений,\n    pc.ActivePermits AS Количество_действующих_разрешений,\n    CASE\n        WHEN p.Budget > 0 THEN (pmq.AvgMaterialQuality / p.Budget)\n        ELSE 0\n    END AS Соотношение_качества_к_бюджету\nFROM Projects p\nJOIN ProjectMaterialQuality pmq ON p.ProjectID = pmq.ProjectID\nJOIN InspectionCounts ic ON p.ProjectID = ic.ProjectID\nJOIN PermitCounts pc ON p.ProjectID = pc.ProjectID\nWHERE ic.TotalInspections >= 2\nORDER BY Соотношение_качества_к_бюджету DESC\nLIMIT 8;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH ProjectMaterials AS (\n  SELECT \n    p.ProjectID, \n    p.ProjectName, \n    p.Location, \n    p.Budget, \n    b.Material, \n    m.MaterialName, \n    m.QualityRating, \n    m.CostPerUnit * m.QuantityInStock AS MaterialCost\n  FROM \n    Projects p \n  JOIN \n    Buildings b ON p.ProjectID = b.ProjectID \n  JOIN \n    Materials m ON b.Material = m.MaterialName\n),\nProjectInspections AS (\n  SELECT \n    p.ProjectID, \n    COUNT(i.InspectionID) AS TotalInspections, \n    SUM(CASE WHEN i.Result = 'Успешно' THEN 1 ELSE 0 END) AS SuccessfulInspections\n  FROM \n    Projects p \n  JOIN \n    Inspections i ON p.ProjectID = i.ProjectID \n  WHERE \n    i.InspectionDate >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)\n  GROUP BY \n    p.ProjectID\n),\nProjectPermits AS (\n  SELECT \n    p.ProjectID, \n    COUNT(pr.PermitID) AS TotalPermits, \n    SUM(CASE WHEN pr.Status = 'Действующий' THEN 1 ELSE 0 END) AS ActivePermits\n  FROM \n    Projects p \n  JOIN \n    Permits pr ON p.ProjectID = pr.ProjectID\n  GROUP BY \n    p.ProjectID\n),\nProjectStats AS (\n  SELECT \n    pm.ProjectID, \n    pm.ProjectName, \n    pm.Location, \n    pm.Budget, \n    AVG(pm.QualityRating) AS AverageMaterialQuality, \n    COUNT(DISTINCT pm.MaterialName) AS MaterialCount, \n    GROUP_CONCAT(DISTINCT pm.MaterialName) AS MaterialsUsed, \n    pi.TotalInspections, \n    pi.SuccessfulInspections, \n    pp.TotalPermits, \n    pp.ActivePermits, \n    (AVG(pm.QualityRating) * 100.0 / pm.Budget) AS QualityToBudgetRatio\n  FROM \n    ProjectMaterials pm \n  JOIN \n    ProjectInspections pi ON pm.ProjectID = pi.ProjectID \n  JOIN \n    ProjectPermits pp ON pm.ProjectID = pp.ProjectID\n  GROUP BY \n    pm.ProjectID, \n    pm.ProjectName, \n    pm.Location, \n    pm.Budget, \n    pi.TotalInspections, \n    pi.SuccessfulInspections, \n    pp.TotalPermits, \n    pp.ActivePermits\n)\nSELECT \n  ProjectName, \n  Location, \n  Budget, \n  AverageMaterialQuality, \n  MaterialCount, \n  MaterialsUsed, \n  TotalInspections, \n  SuccessfulInspections, \n  TotalPermits, \n  ActivePermits, \n  QualityToBudgetRatio\nFROM \n  ProjectStats\nWHERE \n  TotalInspections >= 2 AND \n  SuccessfulInspections >= 2\nORDER BY \n  QualityToBudgetRatio DESC\nLIMIT 8;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH ProjectMaterials AS (\n  SELECT \n    p.ProjectID, \n    p.ProjectName, \n    p.Location, \n    p.Budget, \n    AVG(m.QualityRating) AS AvgMaterialQuality,\n    COUNT(DISTINCT m.MaterialID) AS MaterialCount,\n    GROUP_CONCAT(DISTINCT m.MaterialName) AS MaterialsUsed\n  FROM \n    Projects p\n  JOIN \n    Buildings b ON p.ProjectID = b.ProjectID\n  JOIN \n    Materials m ON b.BuildingID = m.MaterialID\n  GROUP BY \n    p.ProjectID, p.ProjectName, p.Location, p.Budget\n),\nProjectInspections AS (\n  SELECT \n    p.ProjectID, \n    COUNT(i.InspectionID) AS InspectionCount,\n    SUM(CASE WHEN i.Result = 'Успешно' THEN 1 ELSE 0 END) AS SuccessfulInspectionCount\n  FROM \n    Projects p\n  JOIN \n    Inspections i ON p.ProjectID = i.ProjectID\n  WHERE \n    i.InspectionDate >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)\n  GROUP BY \n    p.ProjectID\n),\nProjectPermits AS (\n  SELECT \n    p.ProjectID, \n    COUNT(pr.PermitID) AS PermitCount,\n    SUM(CASE WHEN pr.Status = 'Действующий' THEN 1 ELSE 0 END) AS ActivePermitCount\n  FROM \n    Projects p\n  JOIN \n    Permits pr ON p.ProjectID = pr.ProjectID\n  GROUP BY \n    p.ProjectID\n)\nSELECT \n  pm.ProjectName, \n  pm.Location, \n  pm.Budget, \n  pm.AvgMaterialQuality, \n  pm.MaterialCount, \n  pm.MaterialsUsed, \n  pi.InspectionCount, \n  pi.SuccessfulInspectionCount, \n  pp.PermitCount, \n  pp.ActivePermitCount,\n  (pm.AvgMaterialQuality / pm.Budget) * 100 AS QualityToBudgetRatio\nFROM \n  ProjectMaterials pm\nJOIN \n  ProjectInspections pi ON pm.ProjectID = pi.ProjectID\nJOIN \n  ProjectPermits pp ON pm.ProjectID = pp.ProjectID\nWHERE \n  pi.InspectionCount >= 2 AND pi.SuccessfulInspectionCount > 0\nORDER BY \n  (pm.AvgMaterialQuality / pm.Budget) * 100 DESC\nLIMIT 8;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH ProjectInspections AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        p.Location,\n        p.Budget,\n        COUNT(i.InspectionID) AS TotalInspections,\n        SUM(CASE WHEN i.Result = 'Успешно' THEN 1 ELSE 0 END) AS SuccessfulInspections\n    FROM \n        Projects p\n    JOIN \n        Inspections i ON p.ProjectID = i.ProjectID\n    WHERE \n        i.InspectionDate >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)\n    GROUP BY \n        p.ProjectID, p.ProjectName, p.Location, p.Budget\n    HAVING \n        COUNT(i.InspectionID) >= 2 AND SUM(CASE WHEN i.Result = 'Успешно' THEN 1 ELSE 0 END) >= 2\n),\nProjectMaterials AS (\n    SELECT \n        p.ProjectID,\n        AVG(m.QualityRating) AS AvgMaterialQuality,\n        COUNT(m.MaterialID) AS MaterialCount,\n        GROUP_CONCAT(DISTINCT m.MaterialName) AS MaterialsUsed\n    FROM \n        Projects p\n    JOIN \n        Buildings b ON p.ProjectID = b.ProjectID\n    JOIN \n        Materials m ON m.MaterialID > 0\n    GROUP BY \n        p.ProjectID\n),\nProjectPermits AS (\n    SELECT \n        p.ProjectID,\n        COUNT(pe.PermitID) AS TotalPermits,\n        SUM(CASE WHEN pe.Status = 'Действующий' THEN 1 ELSE 0 END) AS ActivePermits\n    FROM \n        Projects p\n    JOIN \n        Permits pe ON p.ProjectID = pe.ProjectID\n    GROUP BY \n        p.ProjectID\n)\nSELECT \n    pi.ProjectName AS Название_проекта,\n    pi.Location AS Местоположение,\n    pi.Budget AS Бюджет,\n    pm.AvgMaterialQuality AS Среднее_качество_материалов,\n    pm.MaterialCount AS Количество_материалов,\n    pm.MaterialsUsed AS Используемые_материалы,\n    pi.TotalInspections AS Количество_инспекций,\n    pi.SuccessfulInspections AS Количество_успешных_инспекций,\n    pp.TotalPermits AS Количество_разрешений,\n    pp.ActivePermits AS Количество_действующих_разрешений,\n    (pm.AvgMaterialQuality / pi.Budget * 1000000) AS Соотношение_качества_к_бюджету\nFROM \n    ProjectInspections pi\nJOIN \n    ProjectMaterials pm ON pi.ProjectID = pm.ProjectID\nJOIN \n    ProjectPermits pp ON pi.ProjectID = pp.ProjectID\nORDER BY \n    Соотношение_качества_к_бюджету DESC\nLIMIT 8;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "WITH ProjectInspections AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        p.Location,\n        p.Budget,\n        COUNT(i.InspectionID) AS TotalInspections,\n        SUM(CASE WHEN i.Result = 'Успешно' THEN 1 ELSE 0 END) AS SuccessfulInspections\n    FROM \n        Projects p\n    JOIN \n        Inspections i ON p.ProjectID = i.ProjectID\n    WHERE \n        i.InspectionDate >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)\n    GROUP BY \n        p.ProjectID, p.ProjectName, p.Location, p.Budget\n    HAVING \n        SUM(CASE WHEN i.Result = 'Успешно' THEN 1 ELSE 0 END) >= 2\n),\nProjectMaterials AS (\n    SELECT \n        p.ProjectID,\n        AVG(m.QualityRating) AS AvgMaterialQuality,\n        COUNT(m.MaterialID) AS MaterialCount,\n        GROUP_CONCAT(DISTINCT m.MaterialName) AS MaterialsUsed\n    FROM \n        Projects p\n    JOIN \n        Buildings b ON p.ProjectID = b.ProjectID\n    JOIN \n        Materials m ON m.MaterialID > 0\n    GROUP BY \n        p.ProjectID\n),\nProjectPermits AS (\n    SELECT \n        p.ProjectID,\n        COUNT(pe.PermitID) AS TotalPermits,\n        SUM(CASE WHEN pe.Status = 'Действующий' THEN 1 ELSE 0 END) AS ActivePermits\n    FROM \n        Projects p\n    JOIN \n        Permits pe ON p.ProjectID = pe.ProjectID\n    GROUP BY \n        p.ProjectID\n)\nSELECT \n    pi.ProjectName AS Название_проекта,\n    pi.Location AS Местоположение,\n    pi.Budget AS Бюджет,\n    pm.AvgMaterialQuality AS Среднее_качество_материалов,\n    pm.MaterialCount AS Количество_материалов,\n    pm.MaterialsUsed AS Используемые_материалы,\n    pi.TotalInspections AS Количество_инспекций,\n    pi.SuccessfulInspections AS Количество_успешных_инспекций,\n    pp.TotalPermits AS Количество_разрешений,\n    pp.ActivePermits AS Количество_действующих_разрешений,\n    (pm.AvgMaterialQuality / pi.Budget * 1000000) AS Соотношение_качества_к_бюджету\nFROM \n    ProjectInspections pi\nJOIN \n    ProjectMaterials pm ON pi.ProjectID = pm.ProjectID\nJOIN \n    ProjectPermits pp ON pi.ProjectID = pp.ProjectID\nORDER BY \n    Соотношение_качества_к_бюджету DESC\nLIMIT 8;",
            "gigachat_response": "WITH ProjectDetails AS (\n    SELECT \n        pr.ProjectID,\n        pr.ProjectName,\n        pr.Location,\n        pr.Budget,\n        AVG(mat.QualityRating) AS AverageQualityRating,\n        COUNT(DISTINCT mat.MaterialID) AS NumberOfMaterials,\n        STRING_AGG(CONCAT('Материал:', mat.MaterialName, ', Поставщик:', sup.SupplierName), '; ') WITHIN GROUP (ORDER BY mat.MaterialID ASC) AS UsedMaterials,\n        COUNT(ins.InspectionID) AS TotalInspections,\n        SUM(CASE WHEN ins.Result = 'Успешно' THEN 1 ELSE 0 END) AS SuccessfulInspections,\n        COUNT(per.PermitID) AS TotalPermits,\n        SUM(CASE WHEN per.Status = 'Действующий' THEN 1 ELSE 0 END) AS ActivePermits,\n        AVG(mat.QualityRating)/pr.Budget AS QualityToBudgetRatio\n    FROM \n        Projects pr\n    LEFT JOIN \n        Buildings bu ON pr.ProjectID = bu.ProjectID\n    LEFT JOIN \n        Materials mat ON bu.Material = mat.MaterialName\n    LEFT JOIN \n        Suppliers sup ON mat.SupplierID = sup.SupplierID\n    LEFT JOIN \n        Inspections ins ON pr.ProjectID = ins.ProjectID\n    LEFT JOIN \n        Permits per ON pr.ProjectID = per.ProjectID\n    WHERE \n        ins.InspectionDate BETWEEN CURRENT_DATE() - INTERVAL '1 year' AND CURRENT_DATE()\n    GROUP BY \n        pr.ProjectID, pr.ProjectName, pr.Location, pr.Budget\n    HAVING \n        SuccessfulInspections >= 2\n)\nSELECT *\nFROM ProjectDetails\nORDER BY QualityToBudgetRatio DESC\nLIMIT 8;",
            "gigachat_response_ru": "WITH ProjectQuality AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        p.Location,\n        p.Budget,\n        AVG(m.QualityRating) AS AverageMaterialQuality,\n        COUNT(DISTINCT m.MaterialID) AS NumberOfMaterials,\n        STRING_AGG(m.MaterialName, ', ') WITHIN GROUP (ORDER BY m.MaterialName ASC) AS UsedMaterials,\n        COUNT(i.InspectionID) AS TotalInspections,\n        SUM(CASE WHEN i.Result = 'Успешно' THEN 1 ELSE 0 END) AS SuccessfulInspections,\n        COUNT(pe.PermitID) AS TotalPermits,\n        SUM(CASE WHEN pe.Status = 'Действующий' THEN 1 ELSE 0 END) AS ActivePermits,\n        AVG(m.QualityRating)/p.Budget AS QualityToBudgetRatio\n    FROM \n        Projects p\n    LEFT JOIN \n        Buildings b ON p.ProjectID = b.ProjectID\n    LEFT JOIN \n        Materials m ON b.Material = m.MaterialName\n    LEFT JOIN \n        Inspections i ON p.ProjectID = i.ProjectID\n    LEFT JOIN \n        Permits pe ON p.ProjectID = pe.ProjectID\n    WHERE \n        i.InspectionDate BETWEEN CURRENT_DATE() - INTERVAL '1 year' AND CURRENT_DATE()\n    GROUP BY \n        p.ProjectID, p.ProjectName, p.Location, p.Budget\n    HAVING \n        SuccessfulInspections >= 2\n)\nSELECT *\nFROM ProjectQuality\nORDER BY QualityToBudgetRatio DESC\nLIMIT 8;"
        },
        {
            "question": "Какие сотрудники из отделов с бюджетом более 1 миллиона рублей участвуют в проектах, использующих материалы с качеством выше 8, и при этом имеют зарплату выше средней по компании? Показать топ-5 сотрудников по стажу работы. [Ожидаемые колонки: Имя, Фамилия, Должность, Стаж работы, Зарплата, Отдел, Бюджет отдела, Количество проектов, Общий бюджет проектов]",
            "sql_query": "WITH EmployeeDepartments AS (SELECT e.EmployeeID, e.FirstName, e.LastName, e.Position, e.HireDate, e.Salary, d.DepartmentName, d.Budget AS DepartmentBudget FROM Employees e JOIN Departments d ON e.DepartmentID = d.DepartmentID WHERE d.Budget > 1000000), AvgSalary AS (SELECT AVG(Salary) AS CompanyAvgSalary FROM Employees), HighQualityProjects AS (SELECT p.ProjectID, p.ProjectName, p.Budget, COUNT(DISTINCT m.MaterialID) AS HighQualityMaterials FROM Projects p JOIN Materials m ON m.QualityRating > 8 GROUP BY p.ProjectID, p.ProjectName, p.Budget HAVING COUNT(DISTINCT m.MaterialID) > 0) SELECT ed.FirstName, ed.LastName, ed.Position, TIMESTAMPDIFF(YEAR, ed.HireDate, CURRENT_DATE()) AS YearsOfExperience, ed.Salary, ed.DepartmentName, ed.DepartmentBudget, COUNT(DISTINCT hqp.ProjectID) AS ProjectCount, SUM(hqp.Budget) AS TotalProjectBudget FROM EmployeeDepartments ed JOIN Departments d ON ed.DepartmentName = d.DepartmentName JOIN HighQualityProjects hqp ON TRUE, AvgSalary WHERE ed.Salary > AvgSalary.CompanyAvgSalary GROUP BY ed.EmployeeID, ed.FirstName, ed.LastName, ed.Position, ed.HireDate, ed.Salary, ed.DepartmentName, ed.DepartmentBudget ORDER BY YearsOfExperience DESC LIMIT 5;",
            "gpt-4o_response": "WITH AvgSalary AS (\n    SELECT AVG(Salary) AS AverageSalary\n    FROM Employees\n),\nQualifiedEmployees AS (\n    SELECT e.EmployeeID, e.FirstName, e.LastName, e.Position, DATEDIFF(CURDATE(), e.HireDate) / 365 AS YearsOfService, e.Salary, d.DepartmentName, d.Budget\n    FROM Employees e\n    JOIN Departments d ON e.DepartmentID = d.DepartmentID\n    WHERE d.Budget > 1000000\n    AND e.Salary > (SELECT AverageSalary FROM AvgSalary)\n),\nProjectMaterials AS (\n    SELECT DISTINCT p.ProjectID\n    FROM Projects p\n    JOIN Buildings b ON p.ProjectID = b.ProjectID\n    JOIN Materials m ON b.Material = m.MaterialName\n    WHERE m.QualityRating > 8\n),\nEmployeeProjects AS (\n    SELECT e.EmployeeID, COUNT(DISTINCT p.ProjectID) AS ProjectCount, SUM(p.Budget) AS TotalProjectBudget\n    FROM QualifiedEmployees e\n    JOIN Projects p ON e.EmployeeID = p.ArchitectID\n    WHERE p.ProjectID IN (SELECT ProjectID FROM ProjectMaterials)\n    GROUP BY e.EmployeeID\n)\nSELECT qe.FirstName, qe.LastName, qe.Position, qe.YearsOfService, qe.Salary, qe.DepartmentName, qe.Budget, ep.ProjectCount, ep.TotalProjectBudget\nFROM QualifiedEmployees qe\nJOIN EmployeeProjects ep ON qe.EmployeeID = ep.EmployeeID\nORDER BY qe.YearsOfService DESC\nLIMIT 5;",
            "gpt-4o_response_ru": "WITH AverageSalary AS (\n    SELECT AVG(Salary) AS AvgSalary\n    FROM Employees\n),\nQualifiedEmployees AS (\n    SELECT e.EmployeeID, e.FirstName, e.LastName, e.Position, DATEDIFF(CURDATE(), e.HireDate) / 365 AS YearsOfService, e.Salary, d.DepartmentName, d.Budget\n    FROM Employees e\n    JOIN Departments d ON e.DepartmentID = d.DepartmentID\n    WHERE d.Budget > 1000000 AND e.Salary > (SELECT AvgSalary FROM AverageSalary)\n),\nProjectMaterials AS (\n    SELECT DISTINCT p.ProjectID\n    FROM Projects p\n    JOIN Buildings b ON p.ProjectID = b.ProjectID\n    JOIN Materials m ON b.Material = m.MaterialName\n    WHERE m.QualityRating > 8\n),\nEmployeeProjects AS (\n    SELECT e.EmployeeID, COUNT(DISTINCT pm.ProjectID) AS ProjectCount, SUM(p.Budget) AS TotalProjectBudget\n    FROM QualifiedEmployees e\n    JOIN Projects p ON e.EmployeeID = p.ArchitectID\n    JOIN ProjectMaterials pm ON p.ProjectID = pm.ProjectID\n    GROUP BY e.EmployeeID\n)\nSELECT qe.FirstName, qe.LastName, qe.Position, qe.YearsOfService, qe.Salary, qe.DepartmentName, qe.Budget, ep.ProjectCount, ep.TotalProjectBudget\nFROM QualifiedEmployees qe\nJOIN EmployeeProjects ep ON qe.EmployeeID = ep.EmployeeID\nORDER BY qe.YearsOfService DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response": "WITH AvgSalary AS (\n    SELECT AVG(Salary) AS avg_salary FROM Employees\n),\nQualifiedEmployees AS (\n    SELECT\n        e.EmployeeID,\n        e.FirstName,\n        e.LastName,\n        e.Position,\n        e.HireDate,\n        e.Salary,\n        d.DepartmentName,\n        d.Budget AS DepartmentBudget\n    FROM\n        Employees e\n    JOIN\n        Departments d ON e.DepartmentID = d.DepartmentID\n    WHERE\n        d.Budget > 1000000\n        AND e.Salary > (SELECT avg_salary FROM AvgSalary)\n),\nProjectMaterialEmployees AS (\n    SELECT DISTINCT\n        qe.EmployeeID\n    FROM\n        QualifiedEmployees qe\n    JOIN\n        Departments d ON qe.DepartmentName = d.DepartmentName\n    JOIN\n        Employees e ON d.DepartmentID = e.DepartmentID\n    JOIN\n        Projects p ON e.EmployeeID > 0  \n    JOIN\n        Buildings b ON p.ProjectID = b.ProjectID\n    JOIN\n        Materials m ON b.Material = m.MaterialName\n    WHERE\n        m.QualityRating > 8\n)\nSELECT\n    qe.FirstName AS Имя,\n    qe.LastName AS Фамилия,\n    qe.Position AS Должность,\n    CAST((JULIANDAY('now') - JULIANDAY(qe.HireDate)) / 365 AS INTEGER) AS \"Стаж работы\",\n    qe.Salary AS Зарплата,\n    qe.DepartmentName AS Отдел,\n    qe.DepartmentBudget AS \"Бюджет отдела\",\n    (SELECT COUNT(ProjectID) FROM Projects p JOIN Employees e ON p.ArchitectID = qe.EmployeeID WHERE e.EmployeeID = qe.EmployeeID) AS \"Количество проектов\",\n    (SELECT SUM(Budget) FROM Projects p JOIN Employees e ON p.ArchitectID = qe.EmployeeID WHERE e.EmployeeID = qe.EmployeeID) AS \"Общий бюджет проектов\"\nFROM\n    QualifiedEmployees qe\nWHERE\n    qe.EmployeeID IN (SELECT EmployeeID FROM ProjectMaterialEmployees)\nORDER BY\n    \"Стаж работы\" DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    e.FirstName AS Имя,\n    e.LastName AS Фамилия,\n    e.Position AS Должность,\n    CAST((JULIANDAY('now') - JULIANDAY(e.HireDate)) / 365 AS INTEGER) AS \"Стаж работы\",\n    e.Salary AS Зарплата,\n    d.DepartmentName AS Отдел,\n    d.Budget AS \"Бюджет отдела\",\n    COUNT(DISTINCT p.ProjectID) AS \"Количество проектов\",\n    SUM(p.Budget) AS \"Общий бюджет проектов\"\nFROM\n    Employees e\nJOIN\n    Departments d ON e.DepartmentID = d.DepartmentID\nJOIN\n    Projects p ON e.EmployeeID > 0  -- Условие связи между сотрудниками и проектами отсутствует, добавлено условие для обхода ошибки\nJOIN\n    Buildings b ON p.ProjectID = b.ProjectID\nJOIN\n    Materials m ON b.Material = m.MaterialName  -- Предполагается, что Buildings.Material содержит MaterialName\nWHERE\n    d.Budget > 1000000\n    AND m.QualityRating > 8\n    AND e.Salary > (SELECT AVG(Salary) FROM Employees)\nGROUP BY\n    e.EmployeeID, e.FirstName, e.LastName, e.Position, e.HireDate, e.Salary, d.DepartmentName, d.Budget\nORDER BY\n    \"Стаж работы\" DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH EmployeeProjects AS (\n  SELECT e.EmployeeID, e.FirstName, e.LastName, e.Position, e.HireDate, e.Salary, d.DepartmentName, d.Budget\n  FROM Employees e\n  JOIN Departments d ON e.DepartmentID = d.DepartmentID\n),\nProjectMaterials AS (\n  SELECT p.ProjectID, p.Budget, m.MaterialID, m.QualityRating\n  FROM Projects p\n  JOIN Buildings b ON p.ProjectID = b.ProjectID\n  JOIN Materials m ON b.Material = m.MaterialName\n),\nEmployeeProjectMaterials AS (\n  SELECT ep.EmployeeID, ep.FirstName, ep.LastName, ep.Position, ep.HireDate, ep.Salary, ep.DepartmentName, ep.Budget, pm.ProjectID, pm.Budget AS ProjectBudget, pm.MaterialID, pm.QualityRating\n  FROM EmployeeProjects ep\n  JOIN Projects p ON ep.EmployeeID = p.ArchitectID\n  JOIN ProjectMaterials pm ON p.ProjectID = pm.ProjectID\n  WHERE ep.Salary > (SELECT AVG(Salary) FROM Employees) AND ep.Budget > 1000000 AND pm.QualityRating > 8\n),\nEmployeeProjectStats AS (\n  SELECT epm.EmployeeID, epm.FirstName, epm.LastName, epm.Position, epm.HireDate, epm.Salary, epm.DepartmentName, epm.Budget, COUNT(DISTINCT epm.ProjectID) AS ProjectCount, SUM(epm.ProjectBudget) AS TotalProjectBudget\n  FROM EmployeeProjectMaterials epm\n  GROUP BY epm.EmployeeID, epm.FirstName, epm.LastName, epm.Position, epm.HireDate, epm.Salary, epm.DepartmentName, epm.Budget\n),\nEmployeeExperience AS (\n  SELECT eps.EmployeeID, eps.FirstName, eps.LastName, eps.Position, TIMESTAMPDIFF(YEAR, eps.HireDate, CURDATE()) AS YearsOfExperience, eps.Salary, eps.DepartmentName, eps.Budget, eps.ProjectCount, eps.TotalProjectBudget\n  FROM EmployeeProjectStats eps\n)\nSELECT ee.FirstName, ee.LastName, ee.Position, ee.YearsOfExperience, ee.Salary, ee.DepartmentName, ee.Budget, ee.ProjectCount, ee.TotalProjectBudget\nFROM EmployeeExperience ee\nORDER BY ee.YearsOfExperience DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH EmployeeProjects AS (\n  SELECT e.EmployeeID, e.FirstName, e.LastName, e.Position, e.HireDate, e.Salary, \n         d.DepartmentName, d.Budget AS DepartmentBudget, \n         COUNT(DISTINCT p.ProjectID) AS ProjectCount, \n         SUM(p.Budget) AS TotalProjectBudget\n  FROM Employees e\n  JOIN Departments d ON e.DepartmentID = d.DepartmentID\n  JOIN Projects p ON e.EmployeeID = p.ArchitectID\n  JOIN Buildings b ON p.ProjectID = b.ProjectID\n  JOIN Materials m ON b.Material = m.MaterialName\n  WHERE d.Budget > 1000000 AND m.QualityRating > 8 AND e.Salary > (SELECT AVG(Salary) FROM Employees)\n  GROUP BY e.EmployeeID, e.FirstName, e.LastName, e.Position, e.HireDate, e.Salary, \n           d.DepartmentName, d.Budget\n),\nRankedEmployees AS (\n  SELECT FirstName, LastName, Position, \n         TIMESTAMPDIFF(YEAR, HireDate, CURDATE()) AS YearsOfExperience, \n         Salary, DepartmentName, DepartmentBudget, ProjectCount, TotalProjectBudget\n  FROM EmployeeProjects\n)\nSELECT FirstName, LastName, Position, YearsOfExperience, Salary, DepartmentName, DepartmentBudget, ProjectCount, TotalProjectBudget\nFROM RankedEmployees\nORDER BY YearsOfExperience DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH HighQualityMaterialsProjects AS (\n    SELECT DISTINCT p.ProjectID\n    FROM Projects p\n    JOIN Buildings b ON p.ProjectID = b.ProjectID\n    JOIN Materials m ON m.QualityRating > 8\n),\nEmployeeProjectCount AS (\n    SELECT e.EmployeeID, COUNT(DISTINCT p.ProjectID) AS ProjectCount, SUM(p.Budget) AS TotalProjectBudget\n    FROM Employees e\n    JOIN Projects p ON 1=1\n    JOIN HighQualityMaterialsProjects hqmp ON p.ProjectID = hqmp.ProjectID\n    GROUP BY e.EmployeeID\n),\nAvgSalary AS (\n    SELECT AVG(Salary) AS AvgSalary\n    FROM Employees\n)\nSELECT \n    e.FirstName AS Имя, \n    e.LastName AS Фамилия, \n    e.Position AS Должность, \n    DATEDIFF(CURRENT_DATE(), e.HireDate)/365 AS Стаж_работы, \n    e.Salary AS Зарплата, \n    d.DepartmentName AS Отдел, \n    d.Budget AS Бюджет_отдела, \n    epc.ProjectCount AS Количество_проектов, \n    epc.TotalProjectBudget AS Общий_бюджет_проектов\nFROM Employees e\nJOIN Departments d ON e.DepartmentID = d.DepartmentID\nJOIN EmployeeProjectCount epc ON e.EmployeeID = epc.EmployeeID\nCROSS JOIN AvgSalary\nWHERE d.Budget > 1000000 \nAND e.Salary > AvgSalary.AvgSalary\nORDER BY Стаж_работы DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "WITH HighQualityMaterialsProjects AS (\n    SELECT DISTINCT p.ProjectID\n    FROM Projects p\n    JOIN Buildings b ON p.ProjectID = b.ProjectID\n    JOIN Materials m ON b.Material = m.MaterialName\n    WHERE m.QualityRating > 8\n),\nEmployeeProjects AS (\n    SELECT e.EmployeeID, COUNT(p.ProjectID) AS ProjectCount, SUM(p.Budget) AS TotalBudget\n    FROM Employees e\n    JOIN Projects p ON e.EmployeeID = p.ArchitectID\n    WHERE p.ProjectID IN (SELECT ProjectID FROM HighQualityMaterialsProjects)\n    GROUP BY e.EmployeeID\n),\nAvgSalary AS (\n    SELECT AVG(Salary) AS AvgSalary\n    FROM Employees\n)\nSELECT \n    e.FirstName AS Имя,\n    e.LastName AS Фамилия,\n    e.Position AS Должность,\n    DATEDIFF(CURRENT_DATE, e.HireDate) / 365 AS Стаж_работы,\n    e.Salary AS Зарплата,\n    d.DepartmentName AS Отдел,\n    d.Budget AS Бюджет_отдела,\n    ep.ProjectCount AS Количество_проектов,\n    ep.TotalBudget AS Общий_бюджет_проектов\nFROM Employees e\nJOIN Departments d ON e.DepartmentID = d.DepartmentID\nJOIN EmployeeProjects ep ON e.EmployeeID = ep.EmployeeID\nWHERE d.Budget > 1000000\nAND e.Salary > (SELECT AvgSalary FROM AvgSalary)\nORDER BY Стаж_работы DESC\nLIMIT 5;",
            "gigachat_response": "WITH AverageSalary AS (\n    SELECT AVG(Salary) AS avg_salary FROM Employees\n),\nRelevantEmployees AS (\n    SELECT \n        e.EmployeeID, \n        e.FirstName, \n        e.LastName, \n        e.Position, \n        TIMESTAMPDIFF(YEAR, e.HireDate, CURDATE()) AS WorkExperienceYears, \n        e.Salary, \n        d.DepartmentName, \n        d.Budget, \n        COUNT(DISTINCT p.ProjectID) AS NumProjects,\n        SUM(p.Budget) AS TotalProjectBudget\n    FROM Employees e\n    INNER JOIN Departments d ON e.DepartmentID = d.DepartmentID\n    LEFT JOIN Projects p ON e.EmployeeID = ANY(SELECT ArchitectID FROM Projects WHERE ProjectID = p.ProjectID)\n    WHERE d.Budget > 1000000\n      AND e.Salary > (SELECT avg_salary FROM AverageSalary)\n      AND EXISTS(\n          SELECT 1 FROM Buildings b\n          INNER JOIN Materials m ON b.Material = m.MaterialName\n          WHERE b.ProjectID = p.ProjectID\n            AND m.QualityRating > 8\n      )\n    GROUP BY e.EmployeeID, e.FirstName, e.LastName, e.Position, e.HireDate, e.Salary, d.DepartmentName, d.Budget\n)\nSELECT \n    FirstName AS Имя, \n    LastName AS Фамилия, \n    Position AS Должность, \n    WorkExperienceYears AS Стаж_работы, \n    Salary AS Зарплата, \n    DepartmentName AS Отдел, \n    Budget AS Бюджет_отдела, \n    NumProjects AS Количество_проектов, \n    TotalProjectBudget AS Общий_бюджет_проектов\nFROM RelevantEmployees\nORDER BY WorkExperienceYears DESC\nLIMIT 5;",
            "gigachat_response_ru": "WITH AverageSalary AS (\n    SELECT AVG(Salary) AS avg_salary FROM Employees\n),\nRelevantEmployees AS (\n    SELECT \n        e.EmployeeID, \n        e.FirstName, \n        e.LastName, \n        e.Position, \n        TIMESTAMPDIFF(YEAR, e.HireDate, CURDATE()) AS WorkYears, \n        e.Salary, \n        d.DepartmentName, \n        d.Budget\n    FROM Employees e\n    INNER JOIN Departments d ON e.DepartmentID = d.DepartmentID\n    WHERE d.Budget > 1000000\n      AND e.Salary > (SELECT avg_salary FROM AverageSalary)\n),\nProjectsWithHighQualityMaterials AS (\n    SELECT DISTINCT p.ProjectID\n    FROM Projects p\n    INNER JOIN Buildings b ON p.ProjectID = b.ProjectID\n    INNER JOIN Materials m ON b.Material = m.MaterialName\n    WHERE m.QualityRating > 8\n),\nEmployeeProjectCounts AS (\n    SELECT \n        re.EmployeeID, \n        COUNT(*) AS ProjectCount, \n        SUM(p.Budget) AS TotalProjectBudget\n    FROM RelevantEmployees re\n    INNER JOIN Projects p ON re.EmployeeID = p.ArchitectID OR re.EmployeeID = p.ClientID\n    WHERE p.ProjectID IN (SELECT ProjectID FROM ProjectsWithHighQualityMaterials)\n    GROUP BY re.EmployeeID\n)\nSELECT \n    re.FirstName AS Имя, \n    re.LastName AS Фамилия, \n    re.Position AS Должность, \n    re.WorkYears AS Стаж_работы, \n    re.Salary AS Зарплата, \n    re.DepartmentName AS Отдел, \n    re.Budget AS Бюджет_отдела, \n    ep.ProjectCount AS Количество_проектов, \n    ep.TotalProjectBudget AS Общий_бюджет_проектов\nFROM RelevantEmployees re\nINNER JOIN EmployeeProjectCounts ep ON re.EmployeeID = ep.EmployeeID\nORDER BY re.WorkYears DESC\nLIMIT 5;"
        },
        {
            "question": "Какие архитекторы, работающие со зданиями в стиле 'Современный' или 'Классический', имеют наибольшее количество наград и при этом их проекты имеют самое высокое соотношение успешных к неуспешным инспекциям? Показать топ-4 архитектора с рейтингом эффективности. [Ожидаемые колонки: Имя, Фамилия, Стаж работы, Специализация, Количество наград, Общее количество зданий, Количество зданий в стиле, Общее количество инспекций, Успешные инспекции, Неуспешные инспекции, Соотношение успешных к неуспешным, Рейтинг эффективности]",
            "sql_query": "WITH ArchitectAwards AS (SELECT a.ArchitectID, a.FirstName, a.LastName, a.YearsOfExperience, a.Specialization, COUNT(aw.AwardID) AS AwardCount FROM Architects a LEFT JOIN Awards aw ON a.ArchitectID = aw.ArchitectID GROUP BY a.ArchitectID, a.FirstName, a.LastName, a.YearsOfExperience, a.Specialization), ArchitectBuildings AS (SELECT a.ArchitectID, COUNT(DISTINCT b.BuildingID) AS BuildingCount, COUNT(DISTINCT CASE WHEN b.Style IN ('Современный', 'Классический') THEN b.BuildingID END) AS StyleBuildingCount FROM Architects a JOIN Projects p ON a.ArchitectID = p.ArchitectID JOIN Buildings b ON p.ProjectID = b.ProjectID GROUP BY a.ArchitectID), ArchitectInspections AS (SELECT a.ArchitectID, COUNT(DISTINCT i.InspectionID) AS TotalInspections, SUM(CASE WHEN i.Result = 'Успешно' THEN 1 ELSE 0 END) AS SuccessfulInspections, SUM(CASE WHEN i.Result = 'Неуспешно' THEN 1 ELSE 0 END) AS FailedInspections, CASE WHEN SUM(CASE WHEN i.Result = 'Неуспешно' THEN 1 ELSE 0 END) > 0 THEN SUM(CASE WHEN i.Result = 'Успешно' THEN 1 ELSE 0 END) * 1.0 / SUM(CASE WHEN i.Result = 'Неуспешно' THEN 1 ELSE 0 END) ELSE SUM(CASE WHEN i.Result = 'Успешно' THEN 1 ELSE 0 END) END AS SuccessRatio FROM Architects a JOIN Projects p ON a.ArchitectID = p.ArchitectID JOIN Inspections i ON p.ProjectID = i.ProjectID GROUP BY a.ArchitectID) SELECT aa.FirstName, aa.LastName, aa.YearsOfExperience, aa.Specialization, aa.AwardCount, ab.BuildingCount, ab.StyleBuildingCount, ai.TotalInspections, ai.SuccessfulInspections, ai.FailedInspections, ROUND(ai.SuccessRatio, 2) AS SuccessRatio, ROUND((aa.AwardCount * 0.3) + (ab.StyleBuildingCount * 0.3) + (ai.SuccessRatio * 0.4), 2) AS EfficiencyRating FROM ArchitectAwards aa JOIN ArchitectBuildings ab ON aa.ArchitectID = ab.ArchitectID JOIN ArchitectInspections ai ON aa.ArchitectID = ai.ArchitectID WHERE ab.StyleBuildingCount > 0 ORDER BY EfficiencyRating DESC LIMIT 4;",
            "gpt-4o_response": "WITH ArchitectAwards AS (\n    SELECT a.ArchitectID, a.FirstName, a.LastName, a.YearsOfExperience, a.Specialization, COUNT(aw.AwardID) AS AwardCount\n    FROM Architects a\n    LEFT JOIN Awards aw ON a.ArchitectID = aw.ArchitectID\n    GROUP BY a.ArchitectID, a.FirstName, a.LastName, a.YearsOfExperience, a.Specialization\n),\nBuildingStyles AS (\n    SELECT b.ProjectID, b.Style, COUNT(b.BuildingID) AS BuildingCount\n    FROM Buildings b\n    WHERE b.Style IN ('Современный', 'Классический')\n    GROUP BY b.ProjectID, b.Style\n),\nProjectInspections AS (\n    SELECT p.ArchitectID, COUNT(i.InspectionID) AS TotalInspections,\n           SUM(CASE WHEN i.Result = 'Успешно' THEN 1 ELSE 0 END) AS SuccessfulInspections,\n           SUM(CASE WHEN i.Result = 'Неуспешно' THEN 1 ELSE 0 END) AS UnsuccessfulInspections\n    FROM Projects p\n    JOIN Inspections i ON p.ProjectID = i.ProjectID\n    GROUP BY p.ArchitectID\n),\nArchitectEfficiency AS (\n    SELECT aa.ArchitectID, aa.FirstName, aa.LastName, aa.YearsOfExperience, aa.Specialization, aa.AwardCount,\n           COALESCE(SUM(bs.BuildingCount), 0) AS TotalBuildings,\n           COALESCE(SUM(CASE WHEN bs.Style IN ('Современный', 'Классический') THEN bs.BuildingCount ELSE 0 END), 0) AS StyleBuildings,\n           COALESCE(pi.TotalInspections, 0) AS TotalInspections,\n           COALESCE(pi.SuccessfulInspections, 0) AS SuccessfulInspections,\n           COALESCE(pi.UnsuccessfulInspections, 0) AS UnsuccessfulInspections,\n           CASE WHEN COALESCE(pi.UnsuccessfulInspections, 0) > 0 THEN COALESCE(pi.SuccessfulInspections, 0) * 1.0 / pi.UnsuccessfulInspections ELSE NULL END AS SuccessRatio,\n           (aa.AwardCount * 0.4 + COALESCE(pi.SuccessfulInspections, 0) * 0.6) AS EfficiencyRating\n    FROM ArchitectAwards aa\n    LEFT JOIN Projects p ON aa.ArchitectID = p.ArchitectID\n    LEFT JOIN BuildingStyles bs ON p.ProjectID = bs.ProjectID\n    LEFT JOIN ProjectInspections pi ON aa.ArchitectID = pi.ArchitectID\n    GROUP BY aa.ArchitectID, aa.FirstName, aa.LastName, aa.YearsOfExperience, aa.Specialization, aa.AwardCount, pi.TotalInspections, pi.SuccessfulInspections, pi.UnsuccessfulInspections\n)\nSELECT ae.FirstName, ae.LastName, ae.YearsOfExperience, ae.Specialization, ae.AwardCount, ae.TotalBuildings, ae.StyleBuildings,\n       ae.TotalInspections, ae.SuccessfulInspections, ae.UnsuccessfulInspections, ae.SuccessRatio, ae.EfficiencyRating\nFROM ArchitectEfficiency ae\nORDER BY ae.EfficiencyRating DESC\nLIMIT 4;",
            "gpt-4o_response_ru": "WITH ArchitectAwards AS (\n    SELECT a.ArchitectID, a.FirstName, a.LastName, a.YearsOfExperience, a.Specialization, COUNT(aw.AwardID) AS AwardCount\n    FROM Architects a\n    LEFT JOIN Awards aw ON a.ArchitectID = aw.ArchitectID\n    GROUP BY a.ArchitectID, a.FirstName, a.LastName, a.YearsOfExperience, a.Specialization\n),\nBuildingStyles AS (\n    SELECT b.ProjectID, b.Style, COUNT(b.BuildingID) AS BuildingCount\n    FROM Buildings b\n    WHERE b.Style IN ('Современный', 'Классический')\n    GROUP BY b.ProjectID, b.Style\n),\nProjectInspections AS (\n    SELECT p.ArchitectID, COUNT(i.InspectionID) AS TotalInspections,\n           SUM(CASE WHEN i.Result = 'Успешно' THEN 1 ELSE 0 END) AS SuccessfulInspections,\n           SUM(CASE WHEN i.Result = 'Неуспешно' THEN 1 ELSE 0 END) AS UnsuccessfulInspections\n    FROM Projects p\n    JOIN Inspections i ON p.ProjectID = i.ProjectID\n    GROUP BY p.ArchitectID\n),\nArchitectEfficiency AS (\n    SELECT aa.ArchitectID, aa.FirstName, aa.LastName, aa.YearsOfExperience, aa.Specialization, aa.AwardCount,\n           COALESCE(SUM(bs.BuildingCount), 0) AS TotalBuildings,\n           COALESCE(SUM(CASE WHEN bs.Style IN ('Современный', 'Классический') THEN bs.BuildingCount ELSE 0 END), 0) AS StyleBuildings,\n           COALESCE(pi.TotalInspections, 0) AS TotalInspections,\n           COALESCE(pi.SuccessfulInspections, 0) AS SuccessfulInspections,\n           COALESCE(pi.UnsuccessfulInspections, 0) AS UnsuccessfulInspections,\n           CASE WHEN COALESCE(pi.UnsuccessfulInspections, 0) > 0 THEN COALESCE(pi.SuccessfulInspections, 0) / COALESCE(pi.UnsuccessfulInspections, 0) ELSE NULL END AS SuccessRatio,\n           (aa.AwardCount * 0.4 + COALESCE(pi.SuccessfulInspections, 0) * 0.6) AS EfficiencyRating\n    FROM ArchitectAwards aa\n    LEFT JOIN Projects p ON aa.ArchitectID = p.ArchitectID\n    LEFT JOIN BuildingStyles bs ON p.ProjectID = bs.ProjectID\n    LEFT JOIN ProjectInspections pi ON aa.ArchitectID = pi.ArchitectID\n    GROUP BY aa.ArchitectID, aa.FirstName, aa.LastName, aa.YearsOfExperience, aa.Specialization, aa.AwardCount, pi.TotalInspections, pi.SuccessfulInspections, pi.UnsuccessfulInspections\n)\nSELECT ae.FirstName, ae.LastName, ae.YearsOfExperience, ae.Specialization, ae.AwardCount, ae.TotalBuildings, ae.StyleBuildings,\n       ae.TotalInspections, ae.SuccessfulInspections, ae.UnsuccessfulInspections, ae.SuccessRatio, ae.EfficiencyRating\nFROM ArchitectEfficiency ae\nORDER BY ae.EfficiencyRating DESC\nLIMIT 4;",
            "google/gemini-2.0-flash-001_response": "WITH ArchitectAwards AS (\n    SELECT\n        a.ArchitectID,\n        a.FirstName,\n        a.LastName,\n        a.YearsOfExperience,\n        a.Specialization,\n        COUNT(aw.AwardID) AS AwardCount\n    FROM Architects a\n    LEFT JOIN Awards aw ON a.ArchitectID = aw.ArchitectID\n    GROUP BY a.ArchitectID, a.FirstName, a.LastName, a.YearsOfExperience, a.Specialization\n),\nBuildingStyles AS (\n    SELECT\n        p.ArchitectID,\n        COUNT(b.BuildingID) AS TotalBuildings,\n        SUM(CASE WHEN b.Style IN ('Современный', 'Классический') THEN 1 ELSE 0 END) AS StyleSpecificBuildings\n    FROM Projects p\n    JOIN Buildings b ON p.ProjectID = b.ProjectID\n    GROUP BY p.ArchitectID\n),\nInspectionResults AS (\n    SELECT\n        p.ArchitectID,\n        COUNT(i.InspectionID) AS TotalInspections,\n        SUM(CASE WHEN i.Result = 'Успешно' THEN 1 ELSE 0 END) AS SuccessfulInspections,\n        SUM(CASE WHEN i.Result = 'Неуспешно' THEN 1 ELSE 0 END) AS FailedInspections\n    FROM Projects p\n    JOIN Inspections i ON p.ProjectID = i.ProjectID\n    GROUP BY p.ArchitectID\n)\nSELECT\n    aa.FirstName AS Имя,\n    aa.LastName AS Фамилия,\n    aa.YearsOfExperience AS Стаж_работы,\n    aa.Specialization AS Специализация,\n    aa.AwardCount AS Количество_наград,\n    COALESCE(bs.TotalBuildings, 0) AS Общее_количество_зданий,\n    COALESCE(bs.StyleSpecificBuildings, 0) AS Количество_зданий_в_стиле,\n    COALESCE(ir.TotalInspections, 0) AS Общее_количество_инспекций,\n    COALESCE(ir.SuccessfulInspections, 0) AS Успешные_инспекции,\n    COALESCE(ir.FailedInspections, 0) AS Неуспешные_инспекции,\n    CASE\n        WHEN COALESCE(ir.FailedInspections, 0) = 0 THEN COALESCE(ir.SuccessfulInspections, 0)\n        ELSE CAST(COALESCE(ir.SuccessfulInspections, 0) AS REAL) / COALESCE(ir.FailedInspections, 1)\n    END AS Соотношение_успешных_к_неуспешным,\n    (aa.AwardCount * 0.4 + COALESCE(bs.StyleSpecificBuildings, 0) * 0.3 + CASE\n        WHEN COALESCE(ir.FailedInspections, 0) = 0 THEN COALESCE(ir.SuccessfulInspections, 0)\n        ELSE CAST(COALESCE(ir.SuccessfulInspections, 0) AS REAL) / COALESCE(ir.FailedInspections, 1)\n    END * 0.3) AS Рейтинг_эффективности\nFROM ArchitectAwards aa\nLEFT JOIN BuildingStyles bs ON aa.ArchitectID = bs.ArchitectID\nLEFT JOIN InspectionResults ir ON aa.ArchitectID = ir.ArchitectID\nWHERE EXISTS (\n    SELECT 1\n    FROM Projects p\n    JOIN Buildings b ON p.ProjectID = b.ProjectID\n    WHERE p.ArchitectID = aa.ArchitectID AND b.Style IN ('Современный', 'Классический')\n)\nORDER BY Рейтинг_эффективности DESC\nLIMIT 4;",
            "google/gemini-2.0-flash-001_response_ru": "WITH ArchitectBuildingStyles AS (\n    SELECT\n        a.ArchitectID,\n        a.FirstName,\n        a.LastName,\n        a.YearsOfExperience,\n        a.Specialization,\n        COUNT(DISTINCT b.BuildingID) AS TotalBuildings,\n        SUM(CASE WHEN b.Style IN ('Современный', 'Классический') THEN 1 ELSE 0 END) AS BuildingsInStyle\n    FROM Architects a\n    JOIN Projects p ON a.ArchitectID = p.ArchitectID\n    JOIN Buildings b ON p.ProjectID = b.ProjectID\n    WHERE b.Style IN ('Современный', 'Классический')\n    GROUP BY a.ArchitectID, a.FirstName, a.LastName, a.YearsOfExperience, a.Specialization\n),\nArchitectAwards AS (\n    SELECT\n        ArchitectID,\n        COUNT(AwardID) AS AwardCount\n    FROM Awards\n    GROUP BY ArchitectID\n),\nInspectionResults AS (\n    SELECT\n        a.ArchitectID,\n        COUNT(i.InspectionID) AS TotalInspections,\n        SUM(CASE WHEN i.Result = 'Успешно' THEN 1 ELSE 0 END) AS SuccessfulInspections,\n        SUM(CASE WHEN i.Result = 'Неуспешно' THEN 1 ELSE 0 END) AS UnsuccessfulInspections\n    FROM Architects a\n    JOIN Projects p ON a.ArchitectID = p.ArchitectID\n    JOIN Inspections i ON p.ProjectID = i.ProjectID\n    GROUP BY a.ArchitectID\n)\nSELECT\n    abs.FirstName AS Имя,\n    abs.LastName AS Фамилия,\n    abs.YearsOfExperience AS Стаж_работы,\n    abs.Specialization AS Специализация,\n    COALESCE(aa.AwardCount, 0) AS Количество_наград,\n    abs.TotalBuildings AS Общее_количество_зданий,\n    abs.BuildingsInStyle AS Количество_зданий_в_стиле,\n    ir.TotalInspections AS Общее_количество_инспекций,\n    ir.SuccessfulInspections AS Успешные_инспекции,\n    ir.UnsuccessfulInspections AS Неуспешные_инспекции,\n    CASE\n        WHEN ir.UnsuccessfulInspections = 0 THEN ir.SuccessfulInspections\n        ELSE CAST(ir.SuccessfulInspections AS REAL) / ir.UnsuccessfulInspections\n    END AS Соотношение_успешных_к_неуспешным,\n    (COALESCE(aa.AwardCount, 0) * 0.4 + (CASE\n        WHEN ir.UnsuccessfulInspections = 0 THEN ir.SuccessfulInspections\n        ELSE CAST(ir.SuccessfulInspections AS REAL) / ir.UnsuccessfulInspections\n    END) * 0.6) AS Рейтинг_эффективности\nFROM ArchitectBuildingStyles abs\nLEFT JOIN ArchitectAwards aa ON abs.ArchitectID = aa.ArchitectID\nLEFT JOIN InspectionResults ir ON abs.ArchitectID = ir.ArchitectID\nORDER BY Рейтинг_эффективности DESC\nLIMIT 4;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH ArchitectAwards AS (\n  SELECT a.ArchitectID, COUNT(aw.AwardID) AS AwardCount\n  FROM Architects a\n  JOIN Awards aw ON a.ArchitectID = aw.ArchitectID\n  GROUP BY a.ArchitectID\n),\nArchitectProjects AS (\n  SELECT a.ArchitectID, COUNT(DISTINCT p.ProjectID) AS TotalProjects\n  FROM Architects a\n  JOIN Projects p ON a.ArchitectID = p.ArchitectID\n  GROUP BY a.ArchitectID\n),\nArchitectStyleProjects AS (\n  SELECT a.ArchitectID, COUNT(DISTINCT b.BuildingID) AS StyleProjects\n  FROM Architects a\n  JOIN Projects p ON a.ArchitectID = p.ArchitectID\n  JOIN Buildings b ON p.ProjectID = b.ProjectID\n  WHERE b.Style IN ('Современный', 'Классический')\n  GROUP BY a.ArchitectID\n),\nProjectInspections AS (\n  SELECT p.ProjectID, COUNT(i.InspectionID) AS TotalInspections, \n         SUM(CASE WHEN i.Result = 'Успешно' THEN 1 ELSE 0 END) AS SuccessfulInspections,\n         SUM(CASE WHEN i.Result = 'Неуспешно' THEN 1 ELSE 0 END) AS UnsuccessfulInspections\n  FROM Projects p\n  JOIN Inspections i ON p.ProjectID = i.ProjectID\n  GROUP BY p.ProjectID\n),\nArchitectInspections AS (\n  SELECT a.ArchitectID, \n         SUM(pi.TotalInspections) AS TotalInspections, \n         SUM(pi.SuccessfulInspections) AS SuccessfulInspections,\n         SUM(pi.UnsuccessfulInspections) AS UnsuccessfulInspections\n  FROM Architects a\n  JOIN Projects p ON a.ArchitectID = p.ArchitectID\n  JOIN ProjectInspections pi ON p.ProjectID = pi.ProjectID\n  GROUP BY a.ArchitectID\n),\nArchitectEfficiency AS (\n  SELECT a.ArchitectID, \n         a.FirstName, \n         a.LastName, \n         a.YearsOfExperience, \n         a.Specialization, \n         aa.AwardCount, \n         ap.TotalProjects, \n         asp.StyleProjects, \n         ai.TotalInspections, \n         ai.SuccessfulInspections, \n         ai.UnsuccessfulInspections,\n         CASE WHEN ai.UnsuccessfulInspections = 0 THEN ai.SuccessfulInspections ELSE ai.SuccessfulInspections / ai.UnsuccessfulInspections END AS InspectionRatio,\n         (aa.AwardCount * 0.3) + (asp.StyleProjects * 0.2) + (ai.SuccessfulInspections / ai.TotalInspections * 0.5) AS EfficiencyRating\n  FROM Architects a\n  JOIN ArchitectAwards aa ON a.ArchitectID = aa.ArchitectID\n  JOIN ArchitectProjects ap ON a.ArchitectID = ap.ArchitectID\n  JOIN ArchitectStyleProjects asp ON a.ArchitectID = asp.ArchitectID\n  JOIN ArchitectInspections ai ON a.ArchitectID = ai.ArchitectID\n)\nSELECT \n  FirstName, \n  LastName, \n  YearsOfExperience, \n  Specialization, \n  AwardCount, \n  TotalProjects, \n  StyleProjects, \n  TotalInspections, \n  SuccessfulInspections, \n  UnsuccessfulInspections, \n  InspectionRatio, \n  EfficiencyRating\nFROM ArchitectEfficiency\nORDER BY EfficiencyRating DESC\nLIMIT 4;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH ArchitectAwards AS (\n  SELECT a.ArchitectID, a.FirstName, a.LastName, a.YearsOfExperience, a.Specialization, COUNT(DISTINCT aw.AwardID) AS AwardCount\n  FROM Architects a\n  LEFT JOIN Awards aw ON a.ArchitectID = aw.ArchitectID\n  GROUP BY a.ArchitectID, a.FirstName, a.LastName, a.YearsOfExperience, a.Specialization\n),\nArchitectBuildings AS (\n  SELECT a.ArchitectID, a.FirstName, a.LastName, COUNT(DISTINCT b.BuildingID) AS TotalBuildings,\n         SUM(CASE WHEN b.Style IN ('Современный', 'Классический') THEN 1 ELSE 0 END) AS StyleBuildings\n  FROM Architects a\n  JOIN Projects p ON a.ArchitectID = p.ArchitectID\n  JOIN Buildings b ON p.ProjectID = b.ProjectID\n  GROUP BY a.ArchitectID, a.FirstName, a.LastName\n),\nArchitectInspections AS (\n  SELECT a.ArchitectID, a.FirstName, a.LastName, COUNT(DISTINCT i.InspectionID) AS TotalInspections,\n         SUM(CASE WHEN i.Result = 'Успешно' THEN 1 ELSE 0 END) AS SuccessfulInspections,\n         SUM(CASE WHEN i.Result = 'Неуспешно' THEN 1 ELSE 0 END) AS UnsuccessfulInspections,\n         CASE WHEN SUM(CASE WHEN i.Result = 'Неуспешно' THEN 1 ELSE 0 END) = 0 THEN 1 ELSE SUM(CASE WHEN i.Result = 'Успешно' THEN 1 ELSE 0 END) / SUM(CASE WHEN i.Result = 'Неуспешно' THEN 1 ELSE 0 END) END AS InspectionRatio\n  FROM Architects a\n  JOIN Projects p ON a.ArchitectID = p.ArchitectID\n  JOIN Inspections i ON p.ProjectID = i.ProjectID\n  GROUP BY a.ArchitectID, a.FirstName, a.LastName\n),\nArchitectEfficiency AS (\n  SELECT aa.ArchitectID, aa.FirstName, aa.LastName, aa.YearsOfExperience, aa.Specialization, aa.AwardCount,\n         ab.TotalBuildings, ab.StyleBuildings, ai.TotalInspections, ai.SuccessfulInspections, ai.UnsuccessfulInspections, ai.InspectionRatio,\n         (aa.AwardCount * 0.3) + (ab.StyleBuildings * 0.2) + (ai.InspectionRatio * 0.5) AS EfficiencyRating\n  FROM ArchitectAwards aa\n  JOIN ArchitectBuildings ab ON aa.ArchitectID = ab.ArchitectID\n  JOIN ArchitectInspections ai ON aa.ArchitectID = ai.ArchitectID\n  WHERE ab.StyleBuildings > 0 AND ai.InspectionRatio IS NOT NULL\n)\nSELECT FirstName, LastName, YearsOfExperience, Specialization, AwardCount, TotalBuildings, StyleBuildings, TotalInspections, SuccessfulInspections, UnsuccessfulInspections, InspectionRatio, EfficiencyRating\nFROM ArchitectEfficiency\nORDER BY EfficiencyRating DESC\nLIMIT 4;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH ArchitectBuildings AS (\n    SELECT \n        a.ArchitectID,\n        a.FirstName,\n        a.LastName,\n        a.YearsOfExperience,\n        a.Specialization,\n        COUNT(DISTINCT b.BuildingID) AS TotalBuildings,\n        COUNT(DISTINCT CASE WHEN b.Style IN ('Современный', 'Классический') THEN b.BuildingID END) AS StyleBuildings\n    FROM \n        Architects a\n        JOIN Projects p ON a.ArchitectID = p.ArchitectID\n        JOIN Buildings b ON p.ProjectID = b.ProjectID\n    WHERE \n        b.Style IN ('Современный', 'Классический')\n    GROUP BY \n        a.ArchitectID, a.FirstName, a.LastName, a.YearsOfExperience, a.Specialization\n),\nArchitectAwards AS (\n    SELECT \n        a.ArchitectID,\n        COUNT(aw.AwardID) AS AwardCount\n    FROM \n        Architects a\n        LEFT JOIN Awards aw ON a.ArchitectID = aw.ArchitectID\n    GROUP BY \n        a.ArchitectID\n),\nArchitectInspections AS (\n    SELECT \n        a.ArchitectID,\n        COUNT(i.InspectionID) AS TotalInspections,\n        COUNT(CASE WHEN i.Result = 'Успешно' THEN i.InspectionID END) AS SuccessfulInspections,\n        COUNT(CASE WHEN i.Result = 'Неуспешно' THEN i.InspectionID END) AS FailedInspections,\n        CASE \n            WHEN COUNT(CASE WHEN i.Result = 'Неуспешно' THEN i.InspectionID END) = 0 THEN 999999\n            ELSE COUNT(CASE WHEN i.Result = 'Успешно' THEN i.InspectionID END) * 1.0 / \n                 COUNT(CASE WHEN i.Result = 'Неуспешно' THEN i.InspectionID END)\n        END AS SuccessRatio\n    FROM \n        Architects a\n        JOIN Projects p ON a.ArchitectID = p.ArchitectID\n        JOIN Inspections i ON p.ProjectID = i.ProjectID\n    GROUP BY \n        a.ArchitectID\n),\nArchitectRanking AS (\n    SELECT \n        ab.ArchitectID,\n        ab.FirstName,\n        ab.LastName,\n        ab.YearsOfExperience,\n        ab.Specialization,\n        aa.AwardCount,\n        ab.TotalBuildings,\n        ab.StyleBuildings,\n        ai.TotalInspections,\n        ai.SuccessfulInspections,\n        ai.FailedInspections,\n        ai.SuccessRatio,\n        (aa.AwardCount * 0.4) + (ai.SuccessRatio * 0.6) AS EfficiencyRating\n    FROM \n        ArchitectBuildings ab\n        JOIN ArchitectAwards aa ON ab.ArchitectID = aa.ArchitectID\n        JOIN ArchitectInspections ai ON ab.ArchitectID = ai.ArchitectID\n    WHERE \n        aa.AwardCount > 0\n)\nSELECT \n    FirstName AS Имя,\n    LastName AS Фамилия,\n    YearsOfExperience AS Стаж_работы,\n    Specialization AS Специализация,\n    AwardCount AS Количество_наград,\n    TotalBuildings AS Общее_количество_зданий,\n    StyleBuildings AS Количество_зданий_в_стиле,\n    TotalInspections AS Общее_количество_инспекций,\n    SuccessfulInspections AS Успешные_инспекции,\n    FailedInspections AS Неуспешные_инспекции,\n    SuccessRatio AS Соотношение_успешных_к_неуспешным,\n    EfficiencyRating AS Рейтинг_эффективности\nFROM \n    ArchitectRanking\nORDER BY \n    EfficiencyRating DESC\nLIMIT 4;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "WITH ArchitectBuildings AS (\n    SELECT \n        a.ArchitectID,\n        a.FirstName,\n        a.LastName,\n        a.YearsOfExperience,\n        a.Specialization,\n        COUNT(DISTINCT b.BuildingID) AS TotalBuildings,\n        COUNT(DISTINCT CASE WHEN b.Style IN ('Современный', 'Классический') THEN b.BuildingID END) AS StyleBuildings\n    FROM Architects a\n    JOIN Projects p ON a.ArchitectID = p.ArchitectID\n    JOIN Buildings b ON p.ProjectID = b.ProjectID\n    WHERE b.Style IN ('Современный', 'Классический')\n    GROUP BY a.ArchitectID, a.FirstName, a.LastName, a.YearsOfExperience, a.Specialization\n),\nArchitectAwards AS (\n    SELECT \n        a.ArchitectID,\n        COUNT(aw.AwardID) AS AwardCount\n    FROM Architects a\n    JOIN Awards aw ON a.ArchitectID = aw.ArchitectID\n    GROUP BY a.ArchitectID\n),\nArchitectInspections AS (\n    SELECT \n        a.ArchitectID,\n        COUNT(i.InspectionID) AS TotalInspections,\n        COUNT(CASE WHEN i.Result = 'Успешно' THEN i.InspectionID END) AS SuccessfulInspections,\n        COUNT(CASE WHEN i.Result = 'Неуспешно' THEN i.InspectionID END) AS FailedInspections,\n        CASE \n            WHEN COUNT(CASE WHEN i.Result = 'Неуспешно' THEN i.InspectionID END) = 0 THEN 999999\n            ELSE COUNT(CASE WHEN i.Result = 'Успешно' THEN i.InspectionID END) * 1.0 / \n                 COUNT(CASE WHEN i.Result = 'Неуспешно' THEN i.InspectionID END)\n        END AS SuccessRatio\n    FROM Architects a\n    JOIN Projects p ON a.ArchitectID = p.ArchitectID\n    JOIN Inspections i ON p.ProjectID = i.ProjectID\n    GROUP BY a.ArchitectID\n),\nArchitectEfficiency AS (\n    SELECT \n        ab.ArchitectID,\n        ab.FirstName,\n        ab.LastName,\n        ab.YearsOfExperience,\n        ab.Specialization,\n        COALESCE(aa.AwardCount, 0) AS AwardCount,\n        ab.TotalBuildings,\n        ab.StyleBuildings,\n        ai.TotalInspections,\n        ai.SuccessfulInspections,\n        ai.FailedInspections,\n        ai.SuccessRatio,\n        (COALESCE(aa.AwardCount, 0) * 0.4 + ai.SuccessRatio * 0.6) AS EfficiencyRating\n    FROM ArchitectBuildings ab\n    LEFT JOIN ArchitectAwards aa ON ab.ArchitectID = aa.ArchitectID\n    LEFT JOIN ArchitectInspections ai ON ab.ArchitectID = ai.ArchitectID\n    WHERE ai.TotalInspections > 0\n)\nSELECT \n    FirstName AS Имя,\n    LastName AS Фамилия,\n    YearsOfExperience AS Стаж_работы,\n    Specialization AS Специализация,\n    AwardCount AS Количество_наград,\n    TotalBuildings AS Общее_количество_зданий,\n    StyleBuildings AS Количество_зданий_в_стиле,\n    TotalInspections AS Общее_количество_инспекций,\n    SuccessfulInspections AS Успешные_инспекции,\n    FailedInspections AS Неуспешные_инспекции,\n    SuccessRatio AS Соотношение_успешных_к_неуспешным,\n    EfficiencyRating AS Рейтинг_эффективности\nFROM ArchitectEfficiency\nORDER BY EfficiencyRating DESC\nLIMIT 4;",
            "gigachat_response": "WITH ArchitectBuildings AS (\n    SELECT \n        d.ArchitectID,\n        a.FirstName,\n        a.LastName,\n        a.YearsOfExperience,\n        a.Specialization,\n        COUNT(b.BuildingID) AS TotalBuildings,\n        SUM(CASE WHEN b.Style IN ('Современный', 'Классический') THEN 1 ELSE 0 END) AS StyledBuildings\n    FROM \n        Designs d\n    INNER JOIN \n        Buildings b ON d.DesignID = b.BuildingID\n    INNER JOIN \n        Architects a ON d.ArchitectID = a.ArchitectID\n    GROUP BY \n        d.ArchitectID, a.FirstName, a.LastName, a.YearsOfExperience, a.Specialization\n),\nArchitectAwards AS (\n    SELECT \n        aw.ArchitectID,\n        COUNT(*) AS NumAwards\n    FROM \n        Awards aw\n    GROUP BY \n        aw.ArchitectID\n),\nArchitectInspections AS (\n    SELECT \n        p.ArchitectID,\n        COUNT(i.InspectionID) AS TotalInspections,\n        SUM(CASE WHEN i.Result = 'Успешно' THEN 1 ELSE 0 END) AS SuccessInspections,\n        SUM(CASE WHEN i.Result <> 'Успешно' THEN 1 ELSE 0 END) AS FailInspections\n    FROM \n        Projects p\n    LEFT JOIN \n        Inspections i ON p.ProjectID = i.ProjectID\n    GROUP BY \n        p.ArchitectID\n),\nFinalResult AS (\n    SELECT \n        ab.FirstName,\n        ab.LastName,\n        ab.YearsOfExperience,\n        ab.Specialization,\n        aa.NumAwards,\n        ab.TotalBuildings,\n        ab.StyledBuildings,\n        ai.TotalInspections,\n        ai.SuccessInspections,\n        ai.FailInspections,\n        CASE \n            WHEN ai.FailInspections = 0 OR ai.SuccessInspections IS NULL THEN ai.SuccessInspections::FLOAT\n            ELSE CAST(ai.SuccessInspections AS FLOAT) / ai.FailInspections\n        END AS SuccessFailRatio,\n        ROW_NUMBER() OVER (ORDER BY aa.NumAwards DESC, SuccessFailRatio DESC) AS Ranking\n    FROM \n        ArchitectBuildings ab\n    INNER JOIN \n        ArchitectAwards aa ON ab.ArchitectID = aa.ArchitectID\n    INNER JOIN \n        ArchitectInspections ai ON ab.ArchitectID = ai.ArchitectID\n    WHERE \n        ab.StyledBuildings > 0\n)\nSELECT \n    FirstName, \n    LastName, \n    YearsOfExperience, \n    Specialization, \n    NumAwards, \n    TotalBuildings, \n    StyledBuildings, \n    TotalInspections, \n    SuccessInspections, \n    FailInspections, \n    SuccessFailRatio, \n    Ranking AS Эффективность\nFROM \n    FinalResult\nWHERE \n    Ranking <= 4\nORDER BY \n    Ranking ASC;",
            "gigachat_response_ru": "WITH ArchitectBuildings AS (\n    SELECT \n        d.ArchitectID,\n        a.FirstName,\n        a.LastName,\n        a.YearsOfExperience,\n        a.Specialization,\n        COUNT(b.BuildingID) AS TotalBuildings,\n        SUM(CASE WHEN b.Style IN ('Современный', 'Классический') THEN 1 ELSE 0 END) AS StyledBuildings\n    FROM \n        Designs d\n    INNER JOIN \n        Buildings b ON d.DesignID = b.BuildingID\n    INNER JOIN \n        Architects a ON d.ArchitectID = a.ArchitectID\n    GROUP BY \n        d.ArchitectID, a.FirstName, a.LastName, a.YearsOfExperience, a.Specialization\n),\nArchitectAwards AS (\n    SELECT \n        aw.ArchitectID,\n        COUNT(*) AS NumAwards\n    FROM \n        Awards aw\n    GROUP BY \n        aw.ArchitectID\n),\nArchitectInspections AS (\n    SELECT \n        p.ArchitectID,\n        COUNT(i.InspectionID) AS TotalInspections,\n        SUM(CASE WHEN i.Result = 'Успешно' THEN 1 ELSE 0 END) AS SuccessInspections,\n        SUM(CASE WHEN i.Result <> 'Успешно' THEN 1 ELSE 0 END) AS FailInspections\n    FROM \n        Projects p\n    LEFT JOIN \n        Inspections i ON p.ProjectID = i.ProjectID\n    GROUP BY \n        p.ArchitectID\n),\nFinalResult AS (\n    SELECT \n        ab.FirstName,\n        ab.LastName,\n        ab.YearsOfExperience,\n        ab.Specialization,\n        aa.NumAwards,\n        ab.TotalBuildings,\n        ab.StyledBuildings,\n        ai.TotalInspections,\n        ai.SuccessInspections,\n        ai.FailInspections,\n        CASE \n            WHEN ai.FailInspections = 0 THEN NULL \n            ELSE CAST(ai.SuccessInspections AS FLOAT)/ai.FailInspections \n        END AS SuccessFailRatio,\n        ROW_NUMBER() OVER (ORDER BY aa.NumAwards DESC, SuccessFailRatio DESC) AS Ranking\n    FROM \n        ArchitectBuildings ab\n    INNER JOIN \n        ArchitectAwards aa ON ab.ArchitectID = aa.ArchitectID\n    INNER JOIN \n        ArchitectInspections ai ON ab.ArchitectID = ai.ArchitectID\n    WHERE \n        ab.StyledBuildings > 0\n)\nSELECT \n    FirstName, \n    LastName, \n    YearsOfExperience, \n    Specialization, \n    NumAwards, \n    TotalBuildings, \n    StyledBuildings, \n    TotalInspections, \n    SuccessInspections, \n    FailInspections, \n    SuccessFailRatio, \n    Ranking AS RatingEffectiveness\nFROM \n    FinalResult\nWHERE \n    Ranking <= 4;"
        },
        {
            "question": "Какие строительные материалы наиболее часто используются в проектах с бюджетом свыше 150 миллионов рублей и какие поставщики обеспечивают их наивысшее качество? Показать топ-9 материалов с детализацией по поставщикам и проектам за последние 2 года. [Ожидаемые колонки: Название материала, Количество проектов, Средний рейтинг качества, Название поставщика, Город поставщика, Страна поставщика, Список проектов]",
            "sql_query": "WITH HighBudgetProjects AS (SELECT p.ProjectID, p.ProjectName, p.Budget, p.StartDate FROM Projects p WHERE p.Budget > 150000000 AND p.StartDate >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 YEAR)), MaterialUsage AS (SELECT p.ProjectID, m.MaterialID, m.MaterialName, m.QualityRating, m.CostPerUnit, m.SupplierID, COUNT(*) AS UsageCount FROM HighBudgetProjects p JOIN Materials m ON TRUE GROUP BY p.ProjectID, m.MaterialID, m.MaterialName, m.QualityRating, m.CostPerUnit, m.SupplierID), MaterialStats AS (SELECT mu.MaterialName, COUNT(DISTINCT mu.ProjectID) AS ProjectCount, AVG(mu.QualityRating) AS AvgQuality, s.SupplierName, s.City AS SupplierCity, s.Country AS SupplierCountry FROM MaterialUsage mu JOIN Suppliers s ON mu.SupplierID = s.SupplierID GROUP BY mu.MaterialName, s.SupplierName, s.City, s.Country) SELECT ms.MaterialName, ms.ProjectCount, ROUND(ms.AvgQuality, 2) AS СреднийРейтингКачества, ms.SupplierName AS Поставщик, ms.SupplierCity AS ГородПоставщика, ms.SupplierCountry AS СтранаПоставщика, (SELECT GROUP_CONCAT(DISTINCT p.ProjectName SEPARATOR ', ') FROM HighBudgetProjects p JOIN MaterialUsage mu ON p.ProjectID = mu.ProjectID WHERE mu.MaterialName = ms.MaterialName) AS СписокПроектов FROM MaterialStats ms ORDER BY ms.ProjectCount DESC, ms.AvgQuality DESC LIMIT 9;",
            "gpt-4o_response": "WITH RecentProjects AS (\n    SELECT ProjectID, ProjectName\n    FROM Projects\n    WHERE Budget > 150000000 AND StartDate >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 YEAR)\n),\nMaterialUsage AS (\n    SELECT m.MaterialName, m.SupplierID, COUNT(DISTINCT rp.ProjectID) AS ProjectCount, AVG(m.QualityRating) AS AvgQualityRating\n    FROM Materials m\n    JOIN Buildings b ON m.MaterialName = b.Material\n    JOIN RecentProjects rp ON b.ProjectID = rp.ProjectID\n    GROUP BY m.MaterialName, m.SupplierID\n),\nTopMaterials AS (\n    SELECT mu.MaterialName, mu.SupplierID, mu.ProjectCount, mu.AvgQualityRating\n    FROM MaterialUsage mu\n    ORDER BY mu.ProjectCount DESC, mu.AvgQualityRating DESC\n    LIMIT 9\n)\nSELECT tm.MaterialName, tm.ProjectCount, tm.AvgQualityRating, s.SupplierName, s.City, s.Country, GROUP_CONCAT(rp.ProjectName ORDER BY rp.ProjectName) AS ProjectList\nFROM TopMaterials tm\nJOIN Suppliers s ON tm.SupplierID = s.SupplierID\nJOIN Buildings b ON tm.MaterialName = b.Material\nJOIN RecentProjects rp ON b.ProjectID = rp.ProjectID\nGROUP BY tm.MaterialName, tm.ProjectCount, tm.AvgQualityRating, s.SupplierName, s.City, s.Country\nORDER BY tm.ProjectCount DESC, tm.AvgQualityRating DESC;",
            "gpt-4o_response_ru": "SELECT \n    m.MaterialName AS Название_материала,\n    COUNT(DISTINCT p.ProjectID) AS Количество_проектов,\n    AVG(m.QualityRating) AS Средний_рейтинг_качества,\n    s.SupplierName AS Название_поставщика,\n    s.City AS Город_поставщика,\n    s.Country AS Страна_поставщика,\n    GROUP_CONCAT(DISTINCT p.ProjectName ORDER BY p.ProjectName ASC) AS Список_проектов\nFROM \n    Materials m\nJOIN \n    Suppliers s ON m.SupplierID = s.SupplierID\nJOIN \n    Projects p ON p.ProjectID IN (\n        SELECT DISTINCT b.ProjectID\n        FROM Buildings b\n        WHERE b.Material = m.MaterialName\n    )\nWHERE \n    p.Budget > 150000000\n    AND p.StartDate >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 YEAR)\nGROUP BY \n    m.MaterialName, s.SupplierName, s.City, s.Country\nORDER BY \n    COUNT(DISTINCT p.ProjectID) DESC, AVG(m.QualityRating) DESC\nLIMIT 9;",
            "google/gemini-2.0-flash-001_response": "WITH HighBudgetProjects AS (\n    SELECT\n        ProjectID\n    FROM\n        Projects\n    WHERE\n        Budget > 150000000\n        AND StartDate >= DATE_SUB(CURDATE(), INTERVAL 2 YEAR)\n),\nProjectMaterials AS (\n    SELECT\n        b.ProjectID,\n        b.BuildingID,\n        b.Material AS BuildingMaterial\n    FROM\n        Buildings b\n    JOIN HighBudgetProjects hbp ON b.ProjectID = hbp.ProjectID\n),\nMaterialUsage AS (\n    SELECT\n        pm.BuildingMaterial,\n        COUNT(DISTINCT pm.ProjectID) AS ProjectCount\n    FROM\n        ProjectMaterials pm\n    GROUP BY\n        pm.BuildingMaterial\n),\nMaterialQuality AS (\n    SELECT\n        m.MaterialName,\n        AVG(m.QualityRating) AS AvgQualityRating,\n        m.SupplierID\n    FROM\n        Materials m\n    GROUP BY\n        m.MaterialName,\n        m.SupplierID\n),\nSupplierDetails AS (\n    SELECT\n        s.SupplierID,\n        s.SupplierName,\n        s.City AS SupplierCity,\n        s.Country AS SupplierCountry\n    FROM\n        Suppliers s\n)\nSELECT\n    mu.BuildingMaterial AS Название_материала,\n    mu.ProjectCount AS Количество_проектов,\n    mq.AvgQualityRating AS Средний_рейтинг_качества,\n    sd.SupplierName AS Название_поставщика,\n    sd.SupplierCity AS Город_поставщика,\n    sd.SupplierCountry AS Страна_поставщика,\n    GROUP_CONCAT(DISTINCT p.ProjectName ORDER BY p.ProjectName SEPARATOR ', ') AS Список_проектов\nFROM\n    MaterialUsage mu\nJOIN ProjectMaterials pm ON mu.BuildingMaterial = pm.BuildingMaterial\nJOIN Projects p ON pm.ProjectID = p.ProjectID\nJOIN Buildings b ON pm.BuildingID = b.BuildingID\nJOIN Materials m ON b.Material = m.MaterialName\nJOIN MaterialQuality mq ON m.MaterialName = mq.MaterialName AND m.SupplierID = mq.SupplierID\nJOIN SupplierDetails sd ON mq.SupplierID = sd.SupplierID\nWHERE p.ProjectID IN (SELECT ProjectID FROM HighBudgetProjects)\nGROUP BY\n    mu.BuildingMaterial,\n    mu.ProjectCount,\n    mq.AvgQualityRating,\n    sd.SupplierName,\n    sd.SupplierCity,\n    sd.SupplierCountry\nORDER BY\n    mu.ProjectCount DESC\nLIMIT 9;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    m.MaterialName AS \"Название материала\",\n    COUNT(DISTINCT p.ProjectID) AS \"Количество проектов\",\n    AVG(m.QualityRating) AS \"Средний рейтинг качества\",\n    s.SupplierName AS \"Название поставщика\",\n    s.City AS \"Город поставщика\",\n    s.Country AS \"Страна поставщика\",\n    GROUP_CONCAT(DISTINCT p.ProjectName ORDER BY p.ProjectName SEPARATOR ', ') AS \"Список проектов\"\nFROM\n    Projects p\nJOIN\n    Buildings b ON p.ProjectID = b.ProjectID\nJOIN\n    Materials m ON b.Material = m.MaterialName\nJOIN\n    Suppliers s ON m.SupplierID = s.SupplierID\nWHERE\n    p.Budget > 150000000\n    AND p.StartDate >= DATE('now', '-2 years')\nGROUP BY\n    m.MaterialName,\n    s.SupplierName,\n    s.City,\n    s.Country\nORDER BY\n    \"Количество проектов\" DESC\nLIMIT 9;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH ProjectMaterials AS (\n  SELECT \n    p.ProjectID, \n    m.MaterialName, \n    s.SupplierName, \n    s.City AS SupplierCity, \n    s.Country AS SupplierCountry, \n    m.QualityRating\n  FROM \n    Projects p \n  JOIN \n    Buildings b ON p.ProjectID = b.ProjectID \n  JOIN \n    Materials m ON b.Material = m.MaterialName \n  JOIN \n    Suppliers s ON m.SupplierID = s.SupplierID \n  WHERE \n    p.Budget > 150000000 AND \n    p.StartDate >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 YEAR)\n),\nMaterialStats AS (\n  SELECT \n    MaterialName, \n    COUNT(DISTINCT ProjectID) AS ProjectCount, \n    AVG(QualityRating) AS AvgQualityRating, \n    SupplierName, \n    SupplierCity, \n    SupplierCountry, \n    GROUP_CONCAT(DISTINCT ProjectID) AS ProjectList\n  FROM \n    ProjectMaterials \n  GROUP BY \n    MaterialName, \n    SupplierName, \n    SupplierCity, \n    SupplierCountry\n)\nSELECT \n  MaterialName AS Название_материала, \n  ProjectCount AS Количество_проектов, \n  AvgQualityRating AS Средний_рейтинг_качества, \n  SupplierName AS Название_поставщика, \n  SupplierCity AS Город_поставщика, \n  SupplierCountry AS Страна_поставщика, \n  ProjectList AS Список_проектов\nFROM \n  MaterialStats \nORDER BY \n  ProjectCount DESC, \n  AvgQualityRating DESC \nLIMIT 9;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH ProjectMaterials AS (\n  SELECT \n    p.ProjectID,\n    m.MaterialName,\n    s.SupplierName,\n    s.City AS SupplierCity,\n    s.Country AS SupplierCountry,\n    m.QualityRating,\n    p.Budget\n  FROM \n    Projects p\n  JOIN \n    Buildings b ON p.ProjectID = b.ProjectID\n  JOIN \n    Materials m ON b.Material = m.MaterialName\n  JOIN \n    Suppliers s ON m.SupplierID = s.SupplierID\n  WHERE \n    p.Budget > 150000000\n    AND p.StartDate >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 YEAR)\n),\nMaterialStats AS (\n  SELECT \n    MaterialName,\n    COUNT(DISTINCT ProjectID) AS ProjectCount,\n    AVG(QualityRating) AS AvgQualityRating,\n    SupplierName,\n    SupplierCity,\n    SupplierCountry,\n    GROUP_CONCAT(DISTINCT ProjectID) AS ProjectList\n  FROM \n    ProjectMaterials\n  GROUP BY \n    MaterialName, SupplierName, SupplierCity, SupplierCountry\n)\nSELECT \n  MaterialName,\n  ProjectCount,\n  AvgQualityRating,\n  SupplierName,\n  SupplierCity,\n  SupplierCountry,\n  ProjectList\nFROM \n  MaterialStats\nORDER BY \n  ProjectCount DESC, AvgQualityRating DESC\nLIMIT 9;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    m.MaterialName AS 'Название материала',\n    COUNT(DISTINCT p.ProjectID) AS 'Количество проектов',\n    AVG(m.QualityRating) AS 'Средний рейтинг качества',\n    s.SupplierName AS 'Название поставщика',\n    s.City AS 'Город поставщика',\n    s.Country AS 'Страна поставщика',\n    GROUP_CONCAT(DISTINCT p.ProjectName) AS 'Список проектов'\nFROM \n    Materials m\n    JOIN Suppliers s ON m.SupplierID = s.SupplierID\n    JOIN Buildings b ON b.Material LIKE CONCAT('%', m.MaterialName, '%')\n    JOIN Projects p ON b.ProjectID = p.ProjectID\nWHERE \n    p.Budget > 150000000\n    AND p.StartDate >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 YEAR)\nGROUP BY \n    m.MaterialName, s.SupplierName, s.City, s.Country\nORDER BY \n    COUNT(DISTINCT p.ProjectID) DESC, AVG(m.QualityRating) DESC\nLIMIT 9;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    m.MaterialName AS Название_материала,\n    COUNT(DISTINCT p.ProjectID) AS Количество_проектов,\n    AVG(m.QualityRating) AS Средний_рейтинг_качества,\n    s.SupplierName AS Название_поставщика,\n    s.City AS Город_поставщика,\n    s.Country AS Страна_поставщика,\n    GROUP_CONCAT(DISTINCT p.ProjectName) AS Список_проектов\nFROM \n    Materials m\nJOIN \n    Suppliers s ON m.SupplierID = s.SupplierID\nJOIN \n    Buildings b ON m.MaterialName = b.Material\nJOIN \n    Projects p ON b.ProjectID = p.ProjectID\nWHERE \n    p.Budget > 150000000\n    AND p.StartDate >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 YEAR)\nGROUP BY \n    m.MaterialName, s.SupplierName, s.City, s.Country\nORDER BY \n    Количество_проектов DESC, Средний_рейтинг_качества DESC\nLIMIT 9;",
            "gigachat_response": "WITH HighBudgetProjects AS (\n    SELECT \n        p.ProjectID, \n        p.ProjectName, \n        p.Budget \n    FROM \n        Projects p \n    WHERE \n        p.Budget > 150000000 \n        AND p.EndDate >= CURRENT_DATE() - INTERVAL 2 YEAR\n),\nUsedMaterials AS (\n    SELECT \n        bm.MaterialID, \n        bm.ProjectID, \n        m.MaterialName, \n        m.QualityRating, \n        s.SupplierName, \n        s.City AS SupplierCity, \n        s.Country AS SupplierCountry \n    FROM \n        Buildings b \n        INNER JOIN Materials m ON b.Material = m.MaterialName \n        INNER JOIN Suppliers s ON m.SupplierID = s.SupplierID \n        INNER JOIN HighBudgetProjects hbp ON b.ProjectID = hbp.ProjectID\n),\nMaterialSummary AS (\n    SELECT \n        um.MaterialName, \n        COUNT(DISTINCT um.ProjectID) AS ProjectCount, \n        AVG(um.QualityRating) AS AverageQualityRating, \n        um.SupplierName, \n        um.SupplierCity, \n        um.SupplierCountry \n    FROM \n        UsedMaterials um \n    GROUP BY \n        um.MaterialName, \n        um.SupplierName, \n        um.SupplierCity, \n        um.SupplierCountry\n)\nSELECT \n    ms.MaterialName AS Название_материала, \n    ms.ProjectCount AS Количество_проектов, \n    ROUND(ms.AverageQualityRating, 2) AS Средний_рейтинг_качества, \n    ms.SupplierName AS Название_поставщика, \n    ms.SupplierCity AS Город_поставщика, \n    ms.SupplierCountry AS Страна_поставщика, \n    GROUP_CONCAT(hbp.ProjectName SEPARATOR ', ') AS Список_проектов \nFROM \n    MaterialSummary ms \n    LEFT JOIN HighBudgetProjects hbp ON ms.MaterialName IN (SELECT MaterialName FROM UsedMaterials WHERE ProjectID = hbp.ProjectID) \nGROUP BY \n    ms.MaterialName, \n    ms.ProjectCount, \n    ms.AverageQualityRating, \n    ms.SupplierName, \n    ms.SupplierCity, \n    ms.SupplierCountry \nORDER BY \n    ms.ProjectCount DESC, \n    ms.AverageQualityRating DESC \nLIMIT 9;",
            "gigachat_response_ru": "SELECT \n    m.MaterialName AS Название_материала,\n    COUNT(DISTINCT p.ProjectID) AS Количество_проектов,\n    AVG(m.QualityRating) AS Средний_рейтинг_качества,\n    s.SupplierName AS Название_поставщика,\n    s.City AS Город_поставщика,\n    s.Country AS Страна_поставщика,\n    GROUP_CONCAT(DISTINCT p.ProjectName SEPARATOR ', ') AS Список_проектов\nFROM \n    Materials m\nJOIN \n    Suppliers s ON m.SupplierID = s.SupplierID\nJOIN \n    Buildings b ON m.MaterialID = b.Material -- Предположим, что материал используется непосредственно в здании\nJOIN \n    Projects p ON b.ProjectID = p.ProjectID\nWHERE \n    p.Budget > 150000000 \n    AND p.EndDate BETWEEN CURRENT_DATE() - INTERVAL 2 YEAR AND CURRENT_DATE()\nGROUP BY \n    m.MaterialName, s.SupplierName\nORDER BY \n    Количество_проектов DESC, Средний_рейтинг_качества DESC\nLIMIT 9;"
        },
        {
            "question": "Какие здания с назначением 'Жилой' или 'Офисы' имеют наилучшее соотношение высоты к количеству этажей и при этом используют высококачественные материалы (рейтинг выше 8)? Показать топ-6 зданий с детализацией по проектам и архитекторам. [Ожидаемые колонки: Название здания, Высота, Количество этажей, Материал, Стиль, Назначение, Высота на этаж, Название проекта, Местоположение, Бюджет, Имя архитектора, Фамилия архитектора, Специализация архитектора, Среднее качество материалов]",
            "sql_query": "WITH BuildingMetrics AS (SELECT b.BuildingID, b.BuildingName, b.Height, b.Floors, b.Material, b.Style, b.`Usage`, b.Height / NULLIF(b.Floors, 0) AS HeightPerFloor, p.ProjectID, p.ProjectName, p.Location, p.Budget, p.ArchitectID FROM Buildings b JOIN Projects p ON b.ProjectID = p.ProjectID WHERE b.`Usage` IN ('Жилой', 'Офисы')), MaterialQuality AS (SELECT p.ProjectID, AVG(m.QualityRating) AS AvgMaterialQuality FROM Projects p JOIN Materials m ON TRUE GROUP BY p.ProjectID HAVING AVG(m.QualityRating) > 8) SELECT bm.BuildingName, bm.Height AS Высота, bm.Floors AS Этажи, bm.Material AS Материал, bm.Style AS Стиль, bm.`Usage` AS Назначение, ROUND(bm.HeightPerFloor, 2) AS ВысотаНаЭтаж, bm.ProjectName AS НазваниеПроекта, bm.Location AS Местоположение, bm.Budget AS Бюджет, a.FirstName AS ИмяАрхитектора, a.LastName AS ФамилияАрхитектора, a.Specialization AS СпециализацияАрхитектора, ROUND(mq.AvgMaterialQuality, 2) AS СреднееКачествоМатериалов FROM BuildingMetrics bm JOIN MaterialQuality mq ON bm.ProjectID = mq.ProjectID JOIN Architects a ON bm.ArchitectID = a.ArchitectID ORDER BY bm.HeightPerFloor ASC, mq.AvgMaterialQuality DESC LIMIT 6;",
            "gpt-4o_response": "SELECT \n    b.BuildingName AS Название_здания,\n    b.Height AS Высота,\n    b.Floors AS Количество_этажей,\n    b.Material AS Материал,\n    b.Style AS Стиль,\n    b.`Usage` AS Назначение,\n    (b.Height / b.Floors) AS Высота_на_этаж,\n    p.ProjectName AS Название_проекта,\n    p.Location AS Местоположение,\n    p.Budget AS Бюджет,\n    a.FirstName AS Имя_архитектора,\n    a.LastName AS Фамилия_архитектора,\n    a.Specialization AS Специализация_архитектора,\n    AVG(m.QualityRating) AS Среднее_качество_материалов\nFROM \n    Buildings b\nJOIN \n    Projects p ON b.ProjectID = p.ProjectID\nJOIN \n    Architects a ON p.ArchitectID = a.ArchitectID\nJOIN \n    Materials m ON b.Material = m.MaterialName\nWHERE \n    b.`Usage` IN ('Жилой', 'Офисы')\n    AND m.QualityRating > 8\nGROUP BY \n    b.BuildingID, b.BuildingName, b.Height, b.Floors, b.Material, b.Style, b.`Usage`, p.ProjectName, p.Location, p.Budget, a.FirstName, a.LastName, a.Specialization\nORDER BY \n    (b.Height / b.Floors) DESC\nLIMIT 6;",
            "gpt-4o_response_ru": "SELECT \n    b.BuildingName AS Название_здания,\n    b.Height AS Высота,\n    b.Floors AS Количество_этажей,\n    b.Material AS Материал,\n    b.Style AS Стиль,\n    b.`Usage` AS Назначение,\n    (b.Height / b.Floors) AS Высота_на_этаж,\n    p.ProjectName AS Название_проекта,\n    p.Location AS Местоположение,\n    p.Budget AS Бюджет,\n    a.FirstName AS Имя_архитектора,\n    a.LastName AS Фамилия_архитектора,\n    a.Specialization AS Специализация_архитектора,\n    AVG(m.QualityRating) AS Среднее_качество_материалов\nFROM \n    Buildings b\nJOIN \n    Projects p ON b.ProjectID = p.ProjectID\nJOIN \n    Architects a ON p.ArchitectID = a.ArchitectID\nJOIN \n    Materials m ON b.Material = m.MaterialName\nWHERE \n    b.`Usage` IN ('Жилой', 'Офисы')\nGROUP BY \n    b.BuildingID, b.BuildingName, b.Height, b.Floors, b.Material, b.Style, b.`Usage`, p.ProjectName, p.Location, p.Budget, a.FirstName, a.LastName, a.Specialization\nHAVING \n    AVG(m.QualityRating) > 8\nORDER BY \n    (b.Height / b.Floors) DESC\nLIMIT 6;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    b.BuildingName AS Название_здания,\n    b.Height AS Высота,\n    b.Floors AS Количество_этажей,\n    b.Material AS Материал,\n    b.Style AS Стиль,\n    b.`Usage` AS Назначение,\n    (b.Height / b.Floors) AS Высота_на_этаж,\n    p.ProjectName AS Название_проекта,\n    p.Location AS Местоположение,\n    p.Budget AS Бюджет,\n    a.FirstName AS Имя_архитектора,\n    a.LastName AS Фамилия_архитектора,\n    a.Specialization AS Специализация_архитектора,\n    AVG(m.QualityRating) AS Среднее_качество_материалов\nFROM\n    Buildings b\nJOIN\n    Projects p ON b.ProjectID = p.ProjectID\nJOIN\n    Architects a ON p.ArchitectID = a.ArchitectID\nJOIN\n    Materials m ON b.Material = m.MaterialName\nWHERE\n    b.`Usage` IN ('Жилой', 'Офисы')\nGROUP BY\n    b.BuildingName,\n    b.Height,\n    b.Floors,\n    b.Material,\n    b.Style,\n    b.`Usage`,\n    p.ProjectName,\n    p.Location,\n    p.Budget,\n    a.FirstName,\n    a.LastName,\n    a.Specialization\nHAVING\n    AVG(m.QualityRating) > 8\nORDER BY\n    (b.Height / b.Floors) DESC\nLIMIT 6;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    b.BuildingName AS Название_здания,\n    b.Height AS Высота,\n    b.Floors AS Количество_этажей,\n    b.Material AS Материал,\n    b.Style AS Стиль,\n    b.`Usage` AS Назначение,\n    (b.Height / b.Floors) AS Высота_на_этаж,\n    p.ProjectName AS Название_проекта,\n    p.Location AS Местоположение,\n    p.Budget AS Бюджет,\n    a.FirstName AS Имя_архитектора,\n    a.LastName AS Фамилия_архитектора,\n    a.Specialization AS Специализация_архитектора,\n    AVG(m.QualityRating) AS Среднее_качество_материалов\nFROM Buildings b\nJOIN Projects p ON b.ProjectID = p.ProjectID\nJOIN Architects a ON p.ArchitectID = a.ArchitectID\nJOIN Materials m ON b.Material = m.MaterialName\nWHERE b.`Usage` IN ('Жилой', 'Офисы')\nAND m.QualityRating > 8\nGROUP BY b.BuildingName, b.Height, b.Floors, b.Material, b.Style, b.`Usage`, p.ProjectName, p.Location, p.Budget, a.FirstName, a.LastName, a.Specialization\nORDER BY (b.Height / b.Floors) DESC\nLIMIT 6;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    b.BuildingName, \n    b.Height, \n    b.Floors, \n    m.MaterialName, \n    b.Style, \n    b.`Usage`, \n    b.Height / b.Floors AS HeightPerFloor, \n    p.ProjectName, \n    p.Location, \n    p.Budget, \n    a.FirstName, \n    a.LastName, \n    a.Specialization, \n    AVG(m.QualityRating) AS AverageMaterialQuality\nFROM \n    Buildings b\nJOIN \n    Projects p ON b.ProjectID = p.ProjectID\nJOIN \n    Architects a ON p.ArchitectID = a.ArchitectID\nJOIN \n    Materials m ON b.Material = m.MaterialName\nWHERE \n    b.`Usage` IN ('Жилой', 'Офисы') AND m.QualityRating > 8\nORDER BY \n    HeightPerFloor DESC\nLIMIT 6;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    b.BuildingName, \n    b.Height, \n    b.Floors, \n    b.Material, \n    b.Style, \n    b.`Usage`, \n    b.Height / b.Floors AS HeightPerFloor, \n    p.ProjectName, \n    p.Location, \n    p.Budget, \n    a.FirstName, \n    a.LastName, \n    a.Specialization, \n    AVG(m.QualityRating) AS AverageMaterialQuality\nFROM \n    Buildings b\nJOIN \n    Projects p ON b.ProjectID = p.ProjectID\nJOIN \n    Architects a ON p.ArchitectID = a.ArchitectID\nJOIN \n    Materials m ON b.Material = m.MaterialName\nWHERE \n    b.`Usage` IN ('Жилой', 'Офисы') \n    AND m.QualityRating > 8\nORDER BY \n    HeightPerFloor DESC\nLIMIT 6;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    b.BuildingName AS Название_здания,\n    b.Height AS Высота,\n    b.Floors AS Количество_этажей,\n    b.Material AS Материал,\n    b.Style AS Стиль,\n    b.`Usage` AS Назначение,\n    ROUND(b.Height / b.Floors, 2) AS Высота_на_этаж,\n    p.ProjectName AS Название_проекта,\n    p.Location AS Местоположение,\n    p.Budget AS Бюджет,\n    a.FirstName AS Имя_архитектора,\n    a.LastName AS Фамилия_архитектора,\n    a.Specialization AS Специализация_архитектора,\n    AVG(m.QualityRating) AS Среднее_качество_материалов\nFROM \n    Buildings b\nJOIN \n    Projects p ON b.ProjectID = p.ProjectID\nJOIN \n    Architects a ON p.ArchitectID = a.ArchitectID\nJOIN \n    Materials m ON m.QualityRating > 8\nWHERE \n    b.`Usage` IN ('Жилой', 'Офисы')\nGROUP BY \n    b.BuildingID, b.BuildingName, b.Height, b.Floors, b.Material, b.Style, b.`Usage`, \n    p.ProjectName, p.Location, p.Budget, a.FirstName, a.LastName, a.Specialization\nORDER BY \n    Высота_на_этаж DESC\nLIMIT 6;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    b.BuildingName AS Название_здания,\n    b.Height AS Высота,\n    b.Floors AS Количество_этажей,\n    b.Material AS Материал,\n    b.Style AS Стиль,\n    b.`Usage` AS Назначение,\n    ROUND(b.Height / b.Floors, 2) AS Высота_на_этаж,\n    p.ProjectName AS Название_проекта,\n    p.Location AS Местоположение,\n    p.Budget AS Бюджет,\n    a.FirstName AS Имя_архитектора,\n    a.LastName AS Фамилия_архитектора,\n    a.Specialization AS Специализация_архитектора,\n    AVG(m.QualityRating) AS Среднее_качество_материалов\nFROM \n    Buildings b\nJOIN \n    Projects p ON b.ProjectID = p.ProjectID\nJOIN \n    Architects a ON p.ArchitectID = a.ArchitectID\nJOIN \n    Materials m ON m.QualityRating > 8\nWHERE \n    b.`Usage` IN ('Жилой', 'Офисы')\nGROUP BY \n    b.BuildingID, p.ProjectID, a.ArchitectID\nORDER BY \n    Высота_на_этаж DESC\nLIMIT 6;",
            "gigachat_response": "SELECT \n    b.BuildingName AS Название_здания,\n    b.Height AS Высота,\n    b.Floors AS Количество_этажей,\n    m.MaterialName AS Материал,\n    b.Style AS Стиль,\n    b.Usage AS Назначение,\n    (b.Height / b.Floors) AS Высота_на_этаж,\n    p.ProjectName AS Название_проекта,\n    p.Location AS Местоположение,\n    p.Budget AS Бюджет,\n    a.FirstName AS Имя_архитектора,\n    a.LastName AS Фамилия_архитектора,\n    a.Specialization AS Специализация_архитектора,\n    AVG(m.QualityRating) AS Среднее_качество_материалов\nFROM \n    Buildings b\nJOIN \n    Projects p ON b.ProjectID = p.ProjectID\nJOIN \n    Architects a ON p.ArchitectID = a.ArchitectID\nJOIN \n    Materials m ON b.Material = m.MaterialName\nWHERE \n    b.Usage IN ('Жилой', 'Офисы')\nAND \n    m.QualityRating > 8\nGROUP BY \n    b.BuildingID, b.BuildingName, b.Height, b.Floors, m.MaterialName, b.Style, b.Usage, p.ProjectName, p.Location, p.Budget, a.FirstName, a.LastName, a.Specialization\nORDER BY \n    (b.Height / b.Floors) ASC\nLIMIT 6;",
            "gigachat_response_ru": "SELECT \n    b.BuildingName AS Название_здания,\n    b.Height AS Высота,\n    b.Floors AS Количество_этажей,\n    m.MaterialName AS Материал,\n    b.Style AS Стиль,\n    b.Usage AS Назначение,\n    (b.Height / b.Floors) AS Высота_на_этаж,\n    pr.ProjectName AS Название_проекта,\n    pr.Location AS Местоположение,\n    pr.Budget AS Бюджет,\n    ar.FirstName AS Имя_архитектора,\n    ar.LastName AS Фамилия_архитектора,\n    ar.Specialization AS Специализация_архитектора,\n    AVG(m.QualityRating) AS Среднее_качество_материалов\nFROM \n    Buildings b\nJOIN \n    Projects pr ON b.ProjectID = pr.ProjectID\nJOIN \n    Architects ar ON pr.ArchitectID = ar.ArchitectID\nJOIN \n    Materials m ON b.Material = m.MaterialName\nWHERE \n    b.Usage IN ('Жилой', 'Офисы')\nAND \n    m.QualityRating > 8\nGROUP BY \n    b.BuildingID, pr.ProjectID, ar.ArchitectID\nORDER BY \n    (b.Height / b.Floors) ASC\nLIMIT 6;"
        },
        {
            "question": "Какие поставщики наиболее эффективно участвуют в проектах по строительству зданий выше 250 метров, предоставляя материалы с наилучшим соотношением цена/качество? Показать топ-5 поставщиков с детализацией по проектам и материалам. [Ожидаемые колонки: Название поставщика, Город, Страна, Количество проектов, Количество материалов, Средний рейтинг качества, Соотношение цена/качество, Список зданий, Список проектов, Список материалов]",
            "sql_query": "WITH TallBuildings AS (SELECT b.BuildingID, b.BuildingName, b.Height, b.Material, p.ProjectID, p.ProjectName, p.Budget FROM Buildings b JOIN Projects p ON b.ProjectID = p.ProjectID WHERE b.Height > 250), SupplierMaterials AS (SELECT s.SupplierID, s.SupplierName, s.City, s.Country, m.MaterialID, m.MaterialName, m.QualityRating, m.CostPerUnit, m.CostPerUnit / NULLIF(m.QualityRating, 0) AS PriceQualityRatio FROM Suppliers s JOIN Materials m ON s.SupplierID = m.SupplierID), SupplierProjectParticipation AS (SELECT sm.SupplierID, sm.SupplierName, sm.City, sm.Country, COUNT(DISTINCT tb.ProjectID) AS ProjectCount, COUNT(DISTINCT sm.MaterialID) AS MaterialCount, AVG(sm.QualityRating) AS AvgQuality, AVG(sm.PriceQualityRatio) AS AvgPriceQualityRatio, GROUP_CONCAT(DISTINCT tb.BuildingName SEPARATOR ', ') AS Buildings, GROUP_CONCAT(DISTINCT tb.ProjectName SEPARATOR ', ') AS Projects, GROUP_CONCAT(DISTINCT sm.MaterialName SEPARATOR ', ') AS Materials FROM SupplierMaterials sm CROSS JOIN TallBuildings tb GROUP BY sm.SupplierID, sm.SupplierName, sm.City, sm.Country) SELECT SupplierName AS Поставщик, City AS Город, Country AS Страна, ProjectCount AS КоличествоПроектов, MaterialCount AS КоличествоМатериалов, ROUND(AvgQuality, 2) AS СреднееКачество, ROUND(AvgPriceQualityRatio, 2) AS ЦенаКачествоСоотношение, Buildings AS Здания, Projects AS Проекты, Materials AS Материалы FROM SupplierProjectParticipation WHERE ProjectCount > 0 ORDER BY AvgPriceQualityRatio ASC, AvgQuality DESC LIMIT 5;",
            "gpt-4o_response": "WITH BuildingProjects AS (\n    SELECT \n        b.BuildingID, \n        b.BuildingName, \n        b.Height, \n        p.ProjectID, \n        p.ProjectName, \n        p.Location, \n        p.Budget\n    FROM \n        Buildings b\n    JOIN \n        Projects p ON b.ProjectID = p.ProjectID\n    WHERE \n        b.Height > 250\n),\nSupplierMaterials AS (\n    SELECT \n        m.MaterialID, \n        m.MaterialName, \n        m.SupplierID, \n        m.CostPerUnit, \n        m.QualityRating, \n        (m.QualityRating / m.CostPerUnit) AS PriceQualityRatio\n    FROM \n        Materials m\n),\nSupplierEfficiency AS (\n    SELECT \n        sm.SupplierID, \n        s.SupplierName, \n        s.City, \n        s.Country, \n        COUNT(DISTINCT bp.ProjectID) AS ProjectCount, \n        COUNT(DISTINCT sm.MaterialID) AS MaterialCount, \n        AVG(sm.QualityRating) AS AvgQualityRating, \n        AVG(sm.PriceQualityRatio) AS AvgPriceQualityRatio,\n        GROUP_CONCAT(DISTINCT bp.BuildingName) AS BuildingList,\n        GROUP_CONCAT(DISTINCT bp.ProjectName) AS ProjectList,\n        GROUP_CONCAT(DISTINCT sm.MaterialName) AS MaterialList\n    FROM \n        SupplierMaterials sm\n    JOIN \n        Suppliers s ON sm.SupplierID = s.SupplierID\n    JOIN \n        BuildingProjects bp ON sm.MaterialID IN (\n            SELECT m.MaterialID \n            FROM Materials m \n            WHERE m.SupplierID = s.SupplierID\n        )\n    GROUP BY \n        sm.SupplierID, s.SupplierName, s.City, s.Country\n)\nSELECT \n    se.SupplierName AS Название_поставщика, \n    se.City AS Город, \n    se.Country AS Страна, \n    se.ProjectCount AS Количество_проектов, \n    se.MaterialCount AS Количество_материалов, \n    se.AvgQualityRating AS Средний_рейтинг_качества, \n    se.AvgPriceQualityRatio AS Соотношение_цена_качество, \n    se.BuildingList AS Список_зданий, \n    se.ProjectList AS Список_проектов, \n    se.MaterialList AS Список_материалов\nFROM \n    SupplierEfficiency se\nORDER BY \n    se.AvgPriceQualityRatio DESC\nLIMIT 5;",
            "gpt-4o_response_ru": "WITH BuildingProjects AS (\n    SELECT \n        b.BuildingID, \n        b.BuildingName, \n        b.ProjectID, \n        b.Height, \n        p.ProjectName\n    FROM \n        Buildings b\n    JOIN \n        Projects p ON b.ProjectID = p.ProjectID\n    WHERE \n        b.Height > 250\n),\nSupplierMaterials AS (\n    SELECT \n        m.SupplierID, \n        s.SupplierName, \n        s.City, \n        s.Country, \n        m.MaterialID, \n        m.MaterialName, \n        m.CostPerUnit, \n        m.QualityRating\n    FROM \n        Materials m\n    JOIN \n        Suppliers s ON m.SupplierID = s.SupplierID\n),\nSupplierEfficiency AS (\n    SELECT \n        sm.SupplierID, \n        sm.SupplierName, \n        sm.City, \n        sm.Country, \n        COUNT(DISTINCT bp.ProjectID) AS ProjectCount, \n        COUNT(DISTINCT sm.MaterialID) AS MaterialCount, \n        AVG(sm.QualityRating) AS AvgQualityRating, \n        CASE WHEN SUM(sm.CostPerUnit) > 0 THEN AVG(sm.QualityRating) / AVG(sm.CostPerUnit) ELSE 0 END AS PriceQualityRatio,\n        GROUP_CONCAT(DISTINCT bp.BuildingName) AS BuildingList,\n        GROUP_CONCAT(DISTINCT bp.ProjectName) AS ProjectList,\n        GROUP_CONCAT(DISTINCT sm.MaterialName) AS MaterialList\n    FROM \n        SupplierMaterials sm\n    JOIN \n        BuildingProjects bp ON sm.SupplierID = bp.ProjectID\n    GROUP BY \n        sm.SupplierID, sm.SupplierName, sm.City, sm.Country\n)\nSELECT \n    SupplierName, \n    City, \n    Country, \n    ProjectCount, \n    MaterialCount, \n    AvgQualityRating, \n    PriceQualityRatio, \n    BuildingList, \n    ProjectList, \n    MaterialList\nFROM \n    SupplierEfficiency\nORDER BY \n    PriceQualityRatio DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response": "WITH BuildingProjects AS (\n    SELECT\n        b.BuildingID,\n        b.BuildingName,\n        b.ProjectID,\n        b.Height\n    FROM\n        Buildings b\n    WHERE\n        b.Height > 250\n),\nProjectMaterials AS (\n    SELECT\n        bp.BuildingID,\n        bp.BuildingName,\n        bp.ProjectID,\n        m.MaterialID,\n        m.MaterialName,\n        m.SupplierID,\n        m.CostPerUnit,\n        m.QualityRating\n    FROM\n        BuildingProjects bp\n    JOIN\n        Projects p ON bp.ProjectID = p.ProjectID\n    JOIN\n        Buildings b ON p.ProjectID = b.ProjectID\n    LEFT JOIN\n        Materials m ON m.MaterialID > 0\n),\nSupplierProjectMaterials AS (\n    SELECT\n        s.SupplierID,\n        s.SupplierName,\n        s.City,\n        s.Country,\n        pm.ProjectID,\n        pm.MaterialID,\n        pm.CostPerUnit,\n        pm.QualityRating,\n        pm.BuildingName\n    FROM\n        Suppliers s\n    JOIN\n        ProjectMaterials pm ON s.SupplierID = pm.SupplierID\n),\nAggregatedSupplierData AS (\n    SELECT\n        spm.SupplierID,\n        spm.SupplierName,\n        spm.City,\n        spm.Country,\n        COUNT(DISTINCT spm.ProjectID) AS ProjectCount,\n        COUNT(DISTINCT spm.MaterialID) AS MaterialCount,\n        AVG(spm.QualityRating) AS AvgQualityRating,\n        SUM(spm.CostPerUnit) AS TotalCost,\n        AVG(spm.CostPerUnit / spm.QualityRating) AS CostQualityRatio,\n        GROUP_CONCAT(DISTINCT spm.BuildingName) AS BuildingList,\n        GROUP_CONCAT(DISTINCT p.ProjectName) AS ProjectList,\n        GROUP_CONCAT(DISTINCT spm.MaterialName) AS MaterialList\n    FROM\n        SupplierProjectMaterials spm\n    JOIN\n        Projects p ON spm.ProjectID = p.ProjectID\n    GROUP BY\n        spm.SupplierID,\n        spm.SupplierName,\n        spm.City,\n        spm.Country\n)\nSELECT\n    asd.SupplierName AS \"Название поставщика\",\n    asd.City AS \"Город\",\n    asd.Country AS \"Страна\",\n    asd.ProjectCount AS \"Количество проектов\",\n    asd.MaterialCount AS \"Количество материалов\",\n    ROUND(asd.AvgQualityRating, 2) AS \"Средний рейтинг качества\",\n    ROUND(asd.CostQualityRatio, 2) AS \"Соотношение цена/качество\",\n    asd.BuildingList AS \"Список зданий\",\n    asd.ProjectList AS \"Список проектов\",\n    asd.MaterialList AS \"Список материалов\"\nFROM\n    AggregatedSupplierData asd\nORDER BY\n    asd.CostQualityRatio ASC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response_ru": "WITH BuildingProjects AS (\n    SELECT\n        b.BuildingID,\n        b.BuildingName,\n        b.ProjectID,\n        b.Height\n    FROM\n        Buildings b\n    WHERE\n        b.Height > 250\n),\nMaterialCosts AS (\n    SELECT\n        m.MaterialID,\n        m.SupplierID,\n        m.MaterialName,\n        m.CostPerUnit,\n        m.QualityRating\n    FROM\n        Materials m\n),\nProjectMaterials AS (\n    SELECT\n        bp.BuildingID,\n        bp.BuildingName,\n        bp.ProjectID,\n        mc.SupplierID,\n        s.SupplierName,\n        s.City,\n        s.Country,\n        mc.MaterialID,\n        mc.MaterialName,\n        mc.CostPerUnit,\n        mc.QualityRating,\n        (mc.CostPerUnit / mc.QualityRating) AS PriceQualityRatio\n    FROM\n        BuildingProjects bp\n    JOIN\n        Projects p ON bp.ProjectID = p.ProjectID\n    JOIN\n        MaterialCosts mc ON mc.MaterialID > 0\n    JOIN\n        Suppliers s ON mc.SupplierID = s.SupplierID\n),\nSupplierStats AS (\n    SELECT\n        pm.SupplierID,\n        pm.SupplierName,\n        pm.City,\n        pm.Country,\n        COUNT(DISTINCT pm.ProjectID) AS ProjectCount,\n        COUNT(DISTINCT pm.MaterialID) AS MaterialCount,\n        AVG(pm.QualityRating) AS AvgQualityRating,\n        AVG(pm.PriceQualityRatio) AS AvgPriceQualityRatio,\n        GROUP_CONCAT(DISTINCT pm.BuildingName) AS BuildingList,\n        GROUP_CONCAT(DISTINCT p.ProjectName) AS ProjectList,\n        GROUP_CONCAT(DISTINCT pm.MaterialName) AS MaterialList\n    FROM\n        ProjectMaterials pm\n    JOIN\n        Projects p ON pm.ProjectID = p.ProjectID\n    GROUP BY\n        pm.SupplierID,\n        pm.SupplierName,\n        pm.City,\n        pm.Country\n)\nSELECT\n    ss.SupplierName AS \"Название поставщика\",\n    ss.City AS \"Город\",\n    ss.Country AS \"Страна\",\n    ss.ProjectCount AS \"Количество проектов\",\n    ss.MaterialCount AS \"Количество материалов\",\n    ROUND(ss.AvgQualityRating, 2) AS \"Средний рейтинг качества\",\n    ROUND(ss.AvgPriceQualityRatio, 2) AS \"Соотношение цена/качество\",\n    ss.BuildingList AS \"Список зданий\",\n    ss.ProjectList AS \"Список проектов\",\n    ss.MaterialList AS \"Список материалов\"\nFROM\n    SupplierStats ss\nORDER BY\n    ss.AvgPriceQualityRatio\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH BuildingSuppliers AS (\n  SELECT \n    s.SupplierName, \n    s.City, \n    s.Country, \n    b.ProjectID, \n    b.BuildingName, \n    m.MaterialName, \n    m.CostPerUnit, \n    m.QualityRating\n  FROM \n    Suppliers s \n  JOIN \n    Materials m ON s.SupplierID = m.SupplierID \n  JOIN \n    Buildings b ON m.MaterialID IN (SELECT MaterialID FROM Materials WHERE SupplierID = s.SupplierID)\n  WHERE \n    b.Height > 250\n),\nSupplierStats AS (\n  SELECT \n    bs.SupplierName, \n    bs.City, \n    bs.Country, \n    COUNT(DISTINCT bs.ProjectID) AS ProjectCount, \n    COUNT(DISTINCT bs.MaterialName) AS MaterialCount, \n    AVG(bs.QualityRating) AS AvgQualityRating, \n    AVG(bs.CostPerUnit) AS AvgCostPerUnit, \n    GROUP_CONCAT(DISTINCT bs.BuildingName) AS BuildingList, \n    GROUP_CONCAT(DISTINCT bs.ProjectID) AS ProjectList, \n    GROUP_CONCAT(DISTINCT bs.MaterialName) AS MaterialList\n  FROM \n    BuildingSuppliers bs \n  GROUP BY \n    bs.SupplierName, \n    bs.City, \n    bs.Country\n),\nSupplierEfficiency AS (\n  SELECT \n    ss.SupplierName, \n    ss.City, \n    ss.Country, \n    ss.ProjectCount, \n    ss.MaterialCount, \n    ss.AvgQualityRating, \n    ss.AvgCostPerUnit / ss.AvgQualityRating AS PriceQualityRatio, \n    ss.BuildingList, \n    ss.ProjectList, \n    ss.MaterialList\n  FROM \n    SupplierStats ss\n)\nSELECT \n  se.SupplierName, \n  se.City, \n  se.Country, \n  se.ProjectCount, \n  se.MaterialCount, \n  se.AvgQualityRating, \n  se.PriceQualityRatio, \n  se.BuildingList, \n  se.ProjectList, \n  se.MaterialList\nFROM \n  SupplierEfficiency se \nORDER BY \n  se.PriceQualityRatio DESC \nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH \n  -- Список зданий выше 250 метров\n  TallBuildings AS (\n    SELECT b.ProjectID, b.BuildingName, b.Height\n    FROM Buildings b\n    WHERE b.Height > 250\n  ),\n  \n  -- Список проектов с участием поставщиков\n  ProjectSuppliers AS (\n    SELECT p.ProjectID, s.SupplierName, s.City, s.Country, m.MaterialName, m.CostPerUnit, m.QualityRating\n    FROM Projects p\n    JOIN TallBuildings tb ON p.ProjectID = tb.ProjectID\n    JOIN Contracts c ON p.ProjectID = c.ProjectID\n    JOIN Materials m ON c.ContractID = m.ContractID\n    JOIN Suppliers s ON m.SupplierID = s.SupplierID\n  ),\n  \n  -- Рейтинг поставщиков по качеству и цене\n  SupplierRating AS (\n    SELECT \n      ps.SupplierName, \n      ps.City, \n      ps.Country, \n      COUNT(DISTINCT ps.ProjectID) AS ProjectCount,\n      COUNT(DISTINCT ps.MaterialName) AS MaterialCount,\n      AVG(ps.QualityRating) AS AvgQuality,\n      AVG(ps.CostPerUnit) AS AvgCost,\n      AVG(ps.QualityRating / ps.CostPerUnit) AS QualityCostRatio,\n      GROUP_CONCAT(DISTINCT ps.BuildingName) AS BuildingList,\n      GROUP_CONCAT(DISTINCT ps.ProjectID) AS ProjectList,\n      GROUP_CONCAT(DISTINCT ps.MaterialName) AS MaterialList\n    FROM ProjectSuppliers ps\n    GROUP BY ps.SupplierName, ps.City, ps.Country\n  )\n  \nSELECT \n  sr.SupplierName, \n  sr.City, \n  sr.Country, \n  sr.ProjectCount, \n  sr.MaterialCount, \n  sr.AvgQuality, \n  sr.QualityCostRatio, \n  sr.BuildingList, \n  sr.ProjectList, \n  sr.MaterialList\nFROM SupplierRating sr\nORDER BY sr.QualityCostRatio DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH HighBuildings AS (\n    SELECT b.BuildingID, b.BuildingName, b.ProjectID, b.Height, p.ProjectName, p.ArchitectID, p.ClientID\n    FROM Buildings b\n    JOIN Projects p ON b.ProjectID = p.ProjectID\n    WHERE b.Height > 250\n),\nSupplierMaterials AS (\n    SELECT s.SupplierID, s.SupplierName, s.City, s.Country, m.MaterialID, m.MaterialName, m.CostPerUnit, m.QualityRating,\n           m.CostPerUnit / NULLIF(m.QualityRating, 0) AS PriceQualityRatio\n    FROM Suppliers s\n    JOIN Materials m ON s.SupplierID = m.SupplierID\n),\nProjectSuppliers AS (\n    SELECT hb.ProjectID, hb.ProjectName, hb.BuildingName, sm.SupplierID, sm.SupplierName, sm.City, sm.Country,\n           sm.MaterialName, sm.CostPerUnit, sm.QualityRating, sm.PriceQualityRatio\n    FROM HighBuildings hb\n    JOIN Designs d ON hb.ProjectID = d.ProjectID\n    JOIN Architects a ON d.ArchitectID = a.ArchitectID\n    JOIN Contracts c ON hb.ProjectID = c.ProjectID\n    JOIN SupplierMaterials sm ON 1=1\n),\nSupplierStats AS (\n    SELECT \n        SupplierName,\n        City,\n        Country,\n        COUNT(DISTINCT ProjectID) AS ProjectCount,\n        COUNT(DISTINCT MaterialName) AS MaterialCount,\n        AVG(QualityRating) AS AvgQualityRating,\n        AVG(PriceQualityRatio) AS AvgPriceQualityRatio,\n        GROUP_CONCAT(DISTINCT BuildingName) AS BuildingList,\n        GROUP_CONCAT(DISTINCT ProjectName) AS ProjectList,\n        GROUP_CONCAT(DISTINCT MaterialName) AS MaterialList\n    FROM ProjectSuppliers\n    GROUP BY SupplierName, City, Country\n)\nSELECT \n    SupplierName AS 'Название поставщика',\n    City AS 'Город',\n    Country AS 'Страна',\n    ProjectCount AS 'Количество проектов',\n    MaterialCount AS 'Количество материалов',\n    ROUND(AvgQualityRating, 2) AS 'Средний рейтинг качества',\n    ROUND(AvgPriceQualityRatio, 2) AS 'Соотношение цена/качество',\n    BuildingList AS 'Список зданий',\n    ProjectList AS 'Список проектов',\n    MaterialList AS 'Список материалов'\nFROM SupplierStats\nORDER BY AvgPriceQualityRatio ASC, AvgQualityRating DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "WITH HighBuildings AS (\n    SELECT b.BuildingID, b.BuildingName, b.ProjectID, b.Height, p.ProjectName\n    FROM Buildings b\n    JOIN Projects p ON b.ProjectID = p.ProjectID\n    WHERE b.Height > 250\n),\nSupplierProjects AS (\n    SELECT \n        s.SupplierID, \n        s.SupplierName, \n        s.City, \n        s.Country, \n        COUNT(DISTINCT hb.ProjectID) AS ProjectCount,\n        COUNT(DISTINCT m.MaterialID) AS MaterialCount,\n        AVG(m.QualityRating) AS AvgQualityRating,\n        AVG(m.QualityRating / m.CostPerUnit) AS PriceQualityRatio,\n        GROUP_CONCAT(DISTINCT hb.BuildingName) AS BuildingList,\n        GROUP_CONCAT(DISTINCT hb.ProjectName) AS ProjectList,\n        GROUP_CONCAT(DISTINCT m.MaterialName) AS MaterialList\n    FROM Suppliers s\n    JOIN Materials m ON s.SupplierID = m.SupplierID\n    JOIN HighBuildings hb ON 1=1\n    GROUP BY s.SupplierID, s.SupplierName, s.City, s.Country\n)\nSELECT \n    SupplierName AS 'Название поставщика',\n    City AS 'Город',\n    Country AS 'Страна',\n    ProjectCount AS 'Количество проектов',\n    MaterialCount AS 'Количество материалов',\n    ROUND(AvgQualityRating, 2) AS 'Средний рейтинг качества',\n    ROUND(PriceQualityRatio, 4) AS 'Соотношение цена/качество',\n    BuildingList AS 'Список зданий',\n    ProjectList AS 'Список проектов',\n    MaterialList AS 'Список материалов'\nFROM SupplierProjects\nORDER BY PriceQualityRatio DESC, AvgQualityRating DESC\nLIMIT 5;",
            "gigachat_response": "WITH TallBuildings AS (\n    SELECT *\n    FROM Buildings\n    WHERE Height > 250\n),\nRelevantProjects AS (\n    SELECT DISTINCT tb.BuildingID, pr.*\n    FROM TallBuildings tb\n    INNER JOIN Projects pr ON tb.ProjectID = pr.ProjectID\n),\nEffectiveSuppliers AS (\n    SELECT ms.SupplierID, ms.SupplierName, ms.City, ms.Country, COUNT(DISTINCT rp.ProjectID) AS NumProjects,\n           COUNT(DISTINCT mat.MaterialID) AS NumMaterials, AVG(mat.QualityRating) AS AverageQualityRating,\n           AVG(mat.CostPerUnit / mat.QualityRating) AS PriceToQualityRatio,\n           GROUP_CONCAT(DISTINCT tb.BuildingName SEPARATOR ', ') AS ListOfBuildings,\n           GROUP_CONCAT(DISTINCT rp.ProjectName SEPARATOR ', ') AS ListOfProjects,\n           GROUP_CONCAT(DISTINCT mat.MaterialName SEPARATOR ', ') AS ListOfMaterials\n    FROM RelevantProjects rp\n    INNER JOIN Buildings tb ON rp.BuildingID = tb.BuildingID\n    INNER JOIN Materials mat ON mat.SupplierID = rp.ClientID -- Assuming supplier provides materials directly related to projects\n    INNER JOIN Suppliers ms ON mat.SupplierID = ms.SupplierID\n    GROUP BY ms.SupplierID, ms.SupplierName, ms.City, ms.Country\n)\nSELECT es.SupplierName, es.City, es.Country, es.NumProjects, es.NumMaterials, es.AverageQualityRating, es.PriceToQualityRatio, es.ListOfBuildings, es.ListOfProjects, es.ListOfMaterials\nFROM EffectiveSuppliers es\nORDER BY es.PriceToQualityRatio ASC\nLIMIT 5;",
            "gigachat_response_ru": "WITH HighRiseProjects AS (\n    SELECT \n        b.BuildingID, \n        b.Height, \n        b.ProjectID, \n        p.ClientID\n    FROM \n        Buildings b \n    INNER JOIN \n        Projects p ON b.ProjectID = p.ProjectID\n    WHERE \n        b.Height > 250\n),\nEffectiveSuppliers AS (\n    SELECT \n        s.SupplierID, \n        s.SupplierName, \n        s.City, \n        s.Country, \n        COUNT(DISTINCT hrp.ProjectID) AS NumProjects, \n        COUNT(DISTINCT m.MaterialID) AS NumMaterials, \n        AVG(m.QualityRating) AS AverageQualityRating, \n        AVG(m.CostPerUnit / m.QualityRating) AS PriceToQualityRatio\n    FROM \n        Suppliers s \n    INNER JOIN \n        Materials m ON s.SupplierID = m.SupplierID\n    INNER JOIN \n        HighRiseProjects hrp ON m.MaterialID > 0 -- Связываем через наличие материала в проекте\n    GROUP BY \n        s.SupplierID, \n        s.SupplierName, \n        s.City, \n        s.Country\n)\nSELECT \n    es.SupplierName AS Название_поставщика, \n    es.City AS Город, \n    es.Country AS Страна, \n    es.NumProjects AS Количество_проектов, \n    es.NumMaterials AS Количество_материалов, \n    es.AverageQualityRating AS Средний_рейтинг_качества, \n    es.PriceToQualityRatio AS Соотношение_цена_качество,\n    GROUP_CONCAT(DISTINCT b.BuildingName SEPARATOR ', ') AS Список_зданий,\n    GROUP_CONCAT(DISTINCT p.ProjectName SEPARATOR ', ') AS Список_проектов,\n    GROUP_CONCAT(DISTINCT m.MaterialName SEPARATOR ', ') AS Список_материалов\nFROM \n    EffectiveSuppliers es \nINNER JOIN \n    Materials m ON es.SupplierID = m.SupplierID\nINNER JOIN \n    HighRiseProjects hrp ON m.MaterialID > 0 -- Связываем через материал\nINNER JOIN \n    Buildings b ON hrp.BuildingID = b.BuildingID\nINNER JOIN \n    Projects p ON hrp.ProjectID = p.ProjectID\nGROUP BY \n    es.SupplierID, \n    es.SupplierName, \n    es.City, \n    es.Country, \n    es.NumProjects, \n    es.NumMaterials, \n    es.AverageQualityRating, \n    es.PriceToQualityRatio\nORDER BY \n    es.PriceToQualityRatio ASC\nLIMIT 5;"
        }
    ]
}