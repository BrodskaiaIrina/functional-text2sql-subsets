{
    "queries": [
        {
            "question": "Какие отделы имеют более 2 проектов в процессе?",
            "sql_query": "SELECT d.DepartmentName, COUNT(p.ProjectID) AS ProjectCount FROM Departments d JOIN Projects p ON d.DepartmentID = p.DepartmentID WHERE p.Status = 'В процессе' GROUP BY d.DepartmentName HAVING COUNT(p.ProjectID) > 2;"
        },
        {
            "question": "Какие клиенты имеют более 2 запланированных проектов?",
            "sql_query": "SELECT c.ClientName, COUNT(p.ProjectID) AS ProjectCount FROM Clients c JOIN Projects p ON c.ClientID = p.ClientID WHERE p.Status = 'Планируется' GROUP BY c.ClientName HAVING COUNT(p.ProjectID) > 2;"
        },
        {
            "question": "Какие проекты имеют утвержденные бюджеты с потраченными средствами более 5 миллионов?",
            "sql_query": "SELECT p.ProjectName, SUM(b.SpentAmount) AS TotalSpent FROM Projects p JOIN Budgets b ON p.ProjectID = b.ProjectID WHERE b.Status = 'Подтвержден' GROUP BY p.ProjectName HAVING SUM(b.SpentAmount) > 50000;"
        },
        {
            "question": "Какие поставщики имеют общую стоимость материалов на складе более 10 тысяч?",
            "sql_query": "SELECT s.SupplierName, SUM(m.UnitPrice * m.QuantityInStock) AS TotalValue FROM Suppliers s JOIN Materials m ON s.SupplierID = m.SupplierID WHERE m.QuantityInStock > 50 GROUP BY s.SupplierName HAVING SUM(m.UnitPrice * m.QuantityInStock) > 10000;"
        },
        {
            "question": "Получить список инженеров, работающих над проектами с бюджетом свыше 7 млн рублей и имеющих сертификаты уровня 'Продвинутый' или 'Эксперт'. В ответе будут показаны: ФИО инженера, должность, количество проектов, средний бюджет проектов и список сертификатов. Результаты отсортированы по среднему бюджету проектов, показаны топ-4 записи.",
            "sql_query": "WITH EngineerProjectStats AS (\n    SELECT \n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', e.LastName) as EngineerName,\n        e.Position,\n        COUNT(p.ProjectID) as ProjectCount,\n        AVG(p.Budget) as AvgProjectBudget,\n        GROUP_CONCAT(DISTINCT c.CertificationName) as Certifications\n    FROM Engineers e\n    JOIN Projects p ON p.ProjectManagerID = e.EngineerID\n    JOIN Certifications c ON c.EngineerID = e.EngineerID\n    WHERE p.Budget > 7000000\n    AND c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    GROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position\n)\nSELECT \n    EngineerName,\n    Position,\n    ProjectCount,\n    ROUND(AvgProjectBudget, 2) as AvgProjectBudget,\n    Certifications\nFROM EngineerProjectStats\nORDER BY AvgProjectBudget DESC\nLIMIT 4;"
        },
        {
            "question": "Получить список отделов с наибольшим количеством инцидентов по технике безопасности, где средняя стоимость устранения превышает 2000 рублей. В ответе будут показаны: название отдела, количество инцидентов, средняя стоимость исправления, список ответственных инженеров и бюджет отдела. Учитываются только инциденты с высоким уровнем серьезности. Результаты отсортированы по количеству инцидентов, показаны топ-2 записи.",
            "sql_query": "WITH DepartmentSafetyStats AS (\n    SELECT \n        d.DepartmentID,\n        d.DepartmentName,\n        COUNT(s.IncidentID) as IncidentCount,\n        AVG(m.Cost) as AvgCorrectionCost,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as ResponsibleEngineers,\n        d.Budget as DepartmentBudget\n    FROM Departments d\n    JOIN Engineers e ON d.DepartmentID = e.DepartmentID\n    JOIN SafetyIncidents s ON s.EngineerID = e.EngineerID\n    JOIN MaintenanceRecords m ON m.EngineerID = e.EngineerID\n    WHERE s.SeverityLevel = 'Высокий'\n    GROUP BY d.DepartmentID, d.DepartmentName, d.Budget\n    HAVING AVG(m.Cost) > 2000\n)\nSELECT \n    DepartmentName,\n    IncidentCount,\n    ROUND(AvgCorrectionCost, 2) as AvgCorrectionCost,\n    ResponsibleEngineers,\n    DepartmentBudget\nFROM DepartmentSafetyStats\nORDER BY IncidentCount DESC\nLIMIT 2;"
        },
        {
            "question": "Получить список поставщиков, у которых стоимость единицы материала превышает 500 рублей и общее количество материалов на складе более 100 единиц. В ответе будут показаны: название поставщика, контактное лицо, количество различных типов материалов, средняя стоимость материалов и общее количество на складе. Результаты отсортированы по средней стоимости материалов, показаны топ-3 записи.",
            "sql_query": "WITH SupplierMaterialStats AS (\n    SELECT \n        s.SupplierID,\n        s.SupplierName,\n        s.ContactName,\n        COUNT(m.MaterialID) as MaterialTypesCount,\n        AVG(m.UnitPrice) as AvgMaterialPrice,\n        SUM(m.QuantityInStock) as TotalStock\n    FROM Suppliers s\n    JOIN Materials m ON s.SupplierID = m.SupplierID\n    WHERE m.UnitPrice > 500\n    GROUP BY s.SupplierID, s.SupplierName, s.ContactName\n    HAVING SUM(m.QuantityInStock) > 100\n)\nSELECT \n    SupplierName,\n    ContactName,\n    MaterialTypesCount,\n    ROUND(AvgMaterialPrice, 2) as AvgMaterialPrice,\n    TotalStock\nFROM SupplierMaterialStats\nORDER BY AvgMaterialPrice DESC\nLIMIT 3;"
        },
        {
            "question": "Получить список проектов, где количество документов проектирования превышает среднее значение по всем проектам. В ответе будут показаны: название проекта, количество документов, средняя версия документов, список авторов и бюджет проекта. Учитываются только документы в статусе 'Утвержден'. Результаты отсортированы по количеству документов, показаны топ-2 записи.",
            "sql_query": "WITH ProjectDocumentStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        COUNT(d.DocumentID) as DocumentCount,\n        AVG(CAST(SUBSTRING(d.Version, 2) AS DECIMAL(4,2))) as AvgVersion,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as Authors,\n        p.Budget as ProjectBudget\n    FROM Projects p\n    JOIN DesignDocuments d ON p.ProjectID = d.ProjectID\n    JOIN Engineers e ON d.AuthorID = e.EngineerID\n    WHERE d.Status = 'Утвержден'\n    GROUP BY p.ProjectID, p.ProjectName, p.Budget\n    HAVING COUNT(d.DocumentID) > (\n        SELECT AVG(DocumentCount)\n        FROM (\n            SELECT COUNT(DocumentID) as DocumentCount\n            FROM DesignDocuments\n            GROUP BY ProjectID\n        ) as AvgCounts\n    )\n)\nSELECT \n    ProjectName,\n    DocumentCount,\n    ROUND(AvgVersion, 2) as AvgVersion,\n    Authors,\n    ProjectBudget\nFROM ProjectDocumentStats\nORDER BY DocumentCount DESC\nLIMIT 2;"
        },
        {
            "question": "Получить список проектов, где количество задач с высоким приоритетом превышает среднее значение по всем проектам. В ответе будут показаны: название проекта, количество высокоприоритетных задач, средняя продолжительность задач в днях, список ответственных инженеров и текущий статус проекта. Результаты отсортированы по количеству высокоприоритетных задач, показаны топ-3 записи.",
            "sql_query": "WITH HighPriorityTasks AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        COUNT(t.TaskID) as HighPriorityCount,\n        AVG(DATEDIFF(t.DueDate, t.StartDate)) as AvgTaskDuration,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as ResponsibleEngineers,\n        p.Status as ProjectStatus\n    FROM Projects p\n    JOIN Tasks t ON p.ProjectID = t.ProjectID\n    JOIN Engineers e ON t.AssignedTo = e.EngineerID\n    WHERE t.Priority = 'Высокий'\n    GROUP BY p.ProjectID, p.ProjectName, p.Status\n    HAVING COUNT(t.TaskID) > (\n        SELECT AVG(TaskCount)\n        FROM (\n            SELECT COUNT(TaskID) as TaskCount\n            FROM Tasks\n            WHERE Priority = 'Высокий'\n            GROUP BY ProjectID\n        ) as AvgCounts\n    )\n)\nSELECT \n    ProjectName,\n    HighPriorityCount,\n    ROUND(AvgTaskDuration, 2) as AvgTaskDuration,\n    ResponsibleEngineers,\n    ProjectStatus\nFROM HighPriorityTasks\nORDER BY HighPriorityCount DESC\nLIMIT 3;"
        },
        {
            "question": "Получить список проектов, где количество документов проектирования в статусе 'На проверке' превышает количество утвержденных документов. В ответе будут показаны: название проекта, количество документов на проверке, количество утвержденных документов, список авторов и бюджет проекта. Результаты отсортированы по разнице между количеством документов на проверке и утвержденных документов, показаны топ-2 записи.",
            "sql_query": "WITH ProjectDocumentComparison AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        SUM(CASE WHEN d.Status = 'На проверке' THEN 1 ELSE 0 END) as PendingDocuments,\n        SUM(CASE WHEN d.Status = 'Утвержден' THEN 1 ELSE 0 END) as ApprovedDocuments,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as Authors,\n        p.Budget as ProjectBudget\n    FROM Projects p\n    JOIN DesignDocuments d ON p.ProjectID = d.ProjectID\n    JOIN Engineers e ON d.AuthorID = e.EngineerID\n    GROUP BY p.ProjectID, p.ProjectName, p.Budget\n    HAVING SUM(CASE WHEN d.Status = 'На проверке' THEN 1 ELSE 0 END) > \n           SUM(CASE WHEN d.Status = 'Утвержден' THEN 1 ELSE 0 END)\n)\nSELECT \n    ProjectName,\n    PendingDocuments,\n    ApprovedDocuments,\n    Authors,\n    ProjectBudget\nFROM ProjectDocumentComparison\nORDER BY (PendingDocuments - ApprovedDocuments) DESC\nLIMIT 2;"
        },
        {
            "question": "Найти проекты, где количество инцидентов по технике безопасности с высоким уровнем серьезности превышает среднее по всем проектам. В ответе будут показаны: название проекта, количество инцидентов, средняя стоимость исправления (в рублях), список ответственных инженеров и текущий статус проекта. Результаты отсортированы по количеству инцидентов, показаны топ-3 записи.",
            "sql_query": "WITH ProjectSafetyStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        COUNT(s.IncidentID) as IncidentCount,\n        AVG(m.Cost) as AvgCorrectionCost,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as ResponsibleEngineers,\n        p.Status as ProjectStatus\n    FROM Projects p\n    JOIN SafetyIncidents s ON s.EngineerID IN (\n        SELECT EngineerID \n        FROM Tasks \n        WHERE ProjectID = p.ProjectID\n    )\n    JOIN MaintenanceRecords m ON m.EngineerID = s.EngineerID\n    JOIN Engineers e ON s.EngineerID = e.EngineerID\n    WHERE s.SeverityLevel = 'Высокий'\n    GROUP BY p.ProjectID, p.ProjectName, p.Status\n    HAVING COUNT(s.IncidentID) > (\n        SELECT AVG(IncidentCount)\n        FROM (\n            SELECT COUNT(IncidentID) as IncidentCount\n            FROM SafetyIncidents\n            WHERE SeverityLevel = 'Высокий'\n            GROUP BY EngineerID\n        ) as AvgCounts\n    )\n)\nSELECT \n    ProjectName,\n    IncidentCount,\n    ROUND(AvgCorrectionCost, 2) as AvgCorrectionCost,\n    ResponsibleEngineers,\n    ProjectStatus\nFROM ProjectSafetyStats\nORDER BY IncidentCount DESC\nLIMIT 3;"
        },
        {
            "question": "Найти инженеров, работающих над проектами с бюджетом более 10 миллионов рублей, у которых истекает срок действия сертификатов в течение следующих 3 месяцев. В ответе будут показаны: ФИО инженера, должность, количество проектов и список сертификатов с истекающим сроком действия. Результаты отсортированы по количеству проектов, показаны топ-4 записи.",
            "sql_query": "WITH EngineerHighBudgetStats AS (\n    SELECT \n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', e.LastName) as EngineerName,\n        e.Position,\n        COUNT(p.ProjectID) as ProjectCount,\n        GROUP_CONCAT(DISTINCT c.CertificationName) as ExpiringCertifications\n    FROM Engineers e\n    JOIN Projects p ON p.ProjectManagerID = e.EngineerID\n    JOIN Certifications c ON c.EngineerID = e.EngineerID\n    WHERE p.Budget > 10000000\n    AND c.ExpiryDate BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 3 MONTH)\n    AND c.Status = 'Действителен'\n    GROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position\n)\nSELECT \n    EngineerName,\n    Position,\n    ProjectCount,\n    ExpiringCertifications\nFROM EngineerHighBudgetStats\nORDER BY ProjectCount DESC\nLIMIT 4;"
        },
        {
            "question": "Найти проекты, где количество документов проектирования в статусе 'Черновик' превышает количество документов в статусе 'Утвержден'. В ответе будут показаны: название проекта, количество черновиков, количество утвержденных документов, список авторов и общий бюджет проекта (в рублях). Результаты отсортированы по разнице между количеством черновиков и утвержденных документов, показаны топ-2 записи.",
            "sql_query": "WITH ProjectDraftComparison AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        SUM(CASE WHEN d.Status = 'Черновик' THEN 1 ELSE 0 END) as DraftDocuments,\n        SUM(CASE WHEN d.Status = 'Утвержден' THEN 1 ELSE 0 END) as ApprovedDocuments,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as Authors,\n        p.Budget as ProjectBudget\n    FROM Projects p\n    JOIN DesignDocuments d ON p.ProjectID = d.ProjectID\n    JOIN Engineers e ON d.AuthorID = e.EngineerID\n    GROUP BY p.ProjectID, p.ProjectName, p.Budget\n    HAVING SUM(CASE WHEN d.Status = 'Черновик' THEN 1 ELSE 0 END) > \n           SUM(CASE WHEN d.Status = 'Утвержден' THEN 1 ELSE 0 END)\n)\nSELECT \n    ProjectName,\n    DraftDocuments,\n    ApprovedDocuments,\n    Authors,\n    ProjectBudget\nFROM ProjectDraftComparison\nORDER BY (DraftDocuments - ApprovedDocuments) DESC\nLIMIT 2;"
        },
        {
            "question": "Найти инженеров, работающих над проектами с бюджетом более 7.5 миллионов рублей, имеющих сертификаты уровня 'Продвинутый' или 'Эксперт' и участвовавших в программах обучения стоимостью более 150000 рублей. В ответе будут показаны: ФИО инженера, должность, количество проектов, список сертификатов и список пройденных программ обучения. Результаты отсортированы по количеству проектов, показаны топ-3 записи.",
            "sql_query": "WITH QualifiedEngineers AS (\n    SELECT \n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', e.LastName) as EngineerName,\n        e.Position,\n        COUNT(p.ProjectID) as ProjectCount,\n        GROUP_CONCAT(DISTINCT c.CertificationName) as Certifications,\n        GROUP_CONCAT(DISTINCT t.ProgramName) as TrainingPrograms\n    FROM Engineers e\n    JOIN Projects p ON p.ProjectManagerID = e.EngineerID\n    JOIN Certifications c ON c.EngineerID = e.EngineerID\n    JOIN TrainingPrograms t ON t.EngineerID = e.EngineerID\n    WHERE p.Budget > 7500000\n    AND c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    AND t.Cost > 150000\n    AND t.Status = 'Завершено'\n    GROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position\n)\nSELECT \n    EngineerName,\n    Position,\n    ProjectCount,\n    Certifications,\n    TrainingPrograms\nFROM QualifiedEngineers\nORDER BY ProjectCount DESC\nLIMIT 3;"
        },
        {
            "question": "Найти отделы, где средняя стоимость обслуживания оборудования превышает 1500 рублей. В ответе будут показаны: название отдела, количество единиц оборудования, общая стоимость обслуживания за текущий месяц (в рублях), список производителей оборудования и процент выполненных работ по обслуживанию. Результаты отсортированы по общей стоимости обслуживания, показаны топ-4 записи.",
            "sql_query": "WITH DepartmentMaintenanceStats AS (\n    SELECT \n        d.DepartmentID,\n        d.DepartmentName,\n        COUNT(DISTINCT e.EquipmentID) as EquipmentCount,\n        SUM(m.Cost) as TotalMaintenanceCost,\n        GROUP_CONCAT(DISTINCT e.Manufacturer) as Manufacturers,\n        (COUNT(CASE WHEN m.Status = 'Выполнено' THEN 1 END) * 100.0 / COUNT(*)) as CompletionRate\n    FROM Departments d\n    JOIN Equipment e ON d.DepartmentID = e.DepartmentID\n    JOIN MaintenanceRecords m ON e.EquipmentID = m.EquipmentID\n    WHERE MONTH(m.MaintenanceDate) = MONTH(CURDATE())\n    AND YEAR(m.MaintenanceDate) = YEAR(CURDATE())\n    GROUP BY d.DepartmentID, d.DepartmentName\n    HAVING AVG(m.Cost) > 1500\n)\nSELECT \n    DepartmentName,\n    EquipmentCount,\n    ROUND(TotalMaintenanceCost, 2) as TotalMaintenanceCost,\n    Manufacturers,\n    ROUND(CompletionRate, 2) as CompletionRatePercent\nFROM DepartmentMaintenanceStats\nORDER BY TotalMaintenanceCost DESC\nLIMIT 4;"
        },
        {
            "question": "Получить список клиентов, у которых количество активных проектов превышает 2 и общий бюджет всех проектов превышает 15 миллионов рублей. В ответе будут показаны: название клиента, количество активных проектов, общий бюджет проектов, средняя продолжительность проектов в днях и список руководителей проектов. Результаты отсортированы по общему бюджету проектов, показаны топ-3 записи.",
            "sql_query": "WITH ClientProjectStats AS (\n    SELECT \n        c.ClientID,\n        c.ClientName,\n        COUNT(p.ProjectID) as ActiveProjectCount,\n        SUM(p.Budget) as TotalBudget,\n        AVG(DATEDIFF(p.EndDate, p.StartDate)) as AvgProjectDuration,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as ProjectManagers\n    FROM Clients c\n    JOIN Projects p ON c.ClientID = p.ClientID\n    JOIN Engineers e ON p.ProjectManagerID = e.EngineerID\n    WHERE p.Status = 'В процессе'\n    GROUP BY c.ClientID, c.ClientName\n    HAVING COUNT(p.ProjectID) > 2 AND SUM(p.Budget) > 15000000\n)\nSELECT \n    ClientName,\n    ActiveProjectCount,\n    ROUND(TotalBudget, 2) as TotalBudget,\n    ROUND(AvgProjectDuration, 1) as AvgProjectDurationDays,\n    ProjectManagers\nFROM ClientProjectStats\nORDER BY TotalBudget DESC\nLIMIT 3;"
        },
        {
            "question": "Получить список отделов с наиболее эффективным использованием оборудования, где среднее время между обслуживанием минимально. В ответе будут показаны: название отдела, количество единиц оборудования, среднее время работы между обслуживанием в днях, список оборудования с производителями и общая стоимость обслуживания. Учитываются только отделы с двумя и более единицами оборудования. Результаты отсортированы по среднему времени между обслуживанием, показаны топ-3 записи.",
            "sql_query": "WITH EquipmentEfficiency AS (\n    SELECT \n        d.DepartmentID,\n        d.DepartmentName,\n        COUNT(DISTINCT e.EquipmentID) as EquipmentCount,\n        AVG(DATEDIFF(m2.MaintenanceDate, m1.MaintenanceDate)) as AvgDaysBetweenMaintenance,\n        GROUP_CONCAT(DISTINCT CONCAT(e.EquipmentName, ' (', e.Manufacturer, ')')) as EquipmentList,\n        SUM(m1.Cost) as TotalMaintenanceCost\n    FROM Departments d\n    JOIN Equipment e ON d.DepartmentID = e.DepartmentID\n    JOIN MaintenanceRecords m1 ON e.EquipmentID = m1.EquipmentID\n    LEFT JOIN MaintenanceRecords m2 ON e.EquipmentID = m2.EquipmentID\n    AND m2.MaintenanceDate > m1.MaintenanceDate\n    WHERE e.Status = 'В работе'\n    GROUP BY d.DepartmentID, d.DepartmentName\n    HAVING COUNT(DISTINCT e.EquipmentID) >= 2\n)\nSELECT \n    DepartmentName,\n    EquipmentCount,\n    ROUND(AvgDaysBetweenMaintenance, 1) as AvgDaysBetweenMaintenance,\n    EquipmentList,\n    ROUND(TotalMaintenanceCost, 2) as TotalMaintenanceCost\nFROM EquipmentEfficiency\nORDER BY AvgDaysBetweenMaintenance ASC\nLIMIT 3;"
        },
        {
            "question": "Получить список оборудования с наибольшим количеством инцидентов безопасности и высокой стоимостью обслуживания. В ответе будут показаны: название оборудования, производитель, количество инцидентов, общая стоимость обслуживания, список ответственных инженеров и статус гарантии. Учитывается только оборудование в статусе 'В работе' с инцидентами высокого уровня серьезности и стоимостью обслуживания более 2000 рублей. Результаты отсортированы по количеству инцидентов и стоимости обслуживания, показаны топ-7 записей.",
            "sql_query": "WITH EquipmentIncidents AS (\n    SELECT \n        e.EquipmentID,\n        e.EquipmentName,\n        e.Manufacturer,\n        COUNT(DISTINCT si.IncidentID) as IncidentCount,\n        SUM(m.Cost) as MaintenanceCost,\n        GROUP_CONCAT(DISTINCT CONCAT(eng.FirstName, ' ', eng.LastName)) as ResponsibleEngineers,\n        CASE \n            WHEN e.WarrantyExpiryDate > CURDATE() THEN 'Действует'\n            ELSE 'Истекла'\n        END as WarrantyStatus\n    FROM Equipment e\n    JOIN SafetyIncidents si ON e.EquipmentID = si.EquipmentID\n    JOIN MaintenanceRecords m ON e.EquipmentID = m.EquipmentID\n    JOIN Engineers eng ON m.EngineerID = eng.EngineerID\n    WHERE si.SeverityLevel = 'Высокий'\n    AND e.Status = 'В работе'\n    GROUP BY e.EquipmentID, e.EquipmentName, e.Manufacturer, e.WarrantyExpiryDate\n    HAVING SUM(m.Cost) > 2000\n)\nSELECT \n    EquipmentName,\n    Manufacturer,\n    IncidentCount,\n    ROUND(MaintenanceCost, 2) as MaintenanceCost,\n    ResponsibleEngineers,\n    WarrantyStatus\nFROM EquipmentIncidents\nORDER BY IncidentCount DESC, MaintenanceCost DESC\nLIMIT 7;"
        },
        {
            "question": "Получить список проектов с наибольшим количеством документов проектирования в статусе 'Черновик' и 'На проверке'. В ответе будут показаны: название проекта, количество черновиков, количество документов на проверке, список авторов и общий бюджет проекта. Учитываются только проекты с хотя бы одним черновиком. Результаты отсортированы по общему количеству документов, показаны топ-4 записи.",
            "sql_query": "WITH ProjectDocumentStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        SUM(CASE WHEN d.Status = 'Черновик' THEN 1 ELSE 0 END) as DraftCount,\n        SUM(CASE WHEN d.Status = 'На проверке' THEN 1 ELSE 0 END) as ReviewCount,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as Authors,\n        p.Budget as ProjectBudget\n    FROM Projects p\n    JOIN DesignDocuments d ON p.ProjectID = d.ProjectID\n    JOIN Engineers e ON d.AuthorID = e.EngineerID\n    WHERE d.Status IN ('Черновик', 'На проверке')\n    GROUP BY p.ProjectID, p.ProjectName, p.Budget\n    HAVING SUM(CASE WHEN d.Status = 'Черновик' THEN 1 ELSE 0 END) > 0\n)\nSELECT \n    ProjectName,\n    DraftCount,\n    ReviewCount,\n    Authors,\n    ROUND(ProjectBudget, 2) as ProjectBudget\nFROM ProjectDocumentStats\nORDER BY (DraftCount + ReviewCount) DESC\nLIMIT 4;"
        },
        {
            "question": "Получить список инженеров, работающих над проектами с бюджетом более 5 миллионов рублей и имеющих сертификаты уровня 'Продвинутый'. В ответе будут показаны: имя инженера, должность, количество проектов, список сертификатов и общий бюджет проектов. Учитываются только действующие сертификаты. Результаты отсортированы по общему бюджету проектов, показаны топ-5 записей.",
            "sql_query": "WITH EngineerProjectStats AS (\n    SELECT \n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', e.LastName) as EngineerName,\n        e.Position,\n        COUNT(DISTINCT p.ProjectID) as ProjectCount,\n        GROUP_CONCAT(DISTINCT c.CertificationName) as Certifications,\n        SUM(p.Budget) as TotalBudget\n    FROM Engineers e\n    JOIN Projects p ON p.ProjectManagerID = e.EngineerID\n    JOIN Certifications c ON c.EngineerID = e.EngineerID\n    WHERE p.Budget > 5000000\n    AND c.CertificationLevel = 'Продвинутый'\n    AND c.Status = 'Действителен'\n    GROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position\n)\nSELECT \n    EngineerName,\n    Position,\n    ProjectCount,\n    Certifications,\n    ROUND(TotalBudget, 2) as TotalBudget\nFROM EngineerProjectStats\nORDER BY TotalBudget DESC\nLIMIT 5;"
        },
        {
            "question": "Получить список оборудования с наибольшим количеством записей о техническом обслуживании, где общая стоимость обслуживания превышает 2000 рублей. В ответе будут показаны: название оборудования, производитель, количество проведенных обслуживаний, общая стоимость обслуживания, список ответственных инженеров и текущий статус оборудования. Результаты отсортированы по количеству обслуживаний и общей стоимости обслуживания, показаны топ-6 записей.",
            "sql_query": "WITH EquipmentMaintenance AS (\n    SELECT \n        e.EquipmentID,\n        e.EquipmentName,\n        e.Manufacturer,\n        COUNT(m.MaintenanceID) as MaintenanceCount,\n        SUM(m.Cost) as TotalMaintenanceCost,\n        GROUP_CONCAT(DISTINCT CONCAT(eng.FirstName, ' ', eng.LastName)) as ResponsibleEngineers,\n        e.Status as EquipmentStatus\n    FROM Equipment e\n    JOIN MaintenanceRecords m ON e.EquipmentID = m.EquipmentID\n    JOIN Engineers eng ON m.EngineerID = eng.EngineerID\n    WHERE m.Status = 'Выполнено'\n    GROUP BY e.EquipmentID, e.EquipmentName, e.Manufacturer, e.Status\n    HAVING SUM(m.Cost) > 2000\n)\nSELECT \n    EquipmentName,\n    Manufacturer,\n    MaintenanceCount,\n    ROUND(TotalMaintenanceCost, 2) as TotalMaintenanceCost,\n    ResponsibleEngineers,\n    EquipmentStatus\nFROM EquipmentMaintenance\nORDER BY MaintenanceCount DESC, TotalMaintenanceCost DESC\nLIMIT 6;"
        },
        {
            "question": "Получить список клиентов с наибольшим количеством активных проектов, где общий бюджет превышает 15 миллионов рублей. В ответе будут показаны: название клиента, количество проектов в статусе 'В процессе', общий бюджет всех проектов, средняя продолжительность проектов в днях и список руководителей проектов. Результаты отсортированы по количеству активных проектов и общему бюджету, показаны топ-4 записи.",
            "sql_query": "WITH ClientActiveProjects AS (\n    SELECT \n        c.ClientID,\n        c.ClientName,\n        COUNT(p.ProjectID) as ActiveProjectCount,\n        SUM(p.Budget) as TotalBudget,\n        AVG(DATEDIFF(p.EndDate, p.StartDate)) as AvgProjectDuration,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as ProjectManagers\n    FROM Clients c\n    JOIN Projects p ON c.ClientID = p.ClientID\n    JOIN Engineers e ON p.ProjectManagerID = e.EngineerID\n    WHERE p.Status = 'В процессе'\n    GROUP BY c.ClientID, c.ClientName\n    HAVING SUM(p.Budget) > 15000000\n)\nSELECT \n    ClientName,\n    ActiveProjectCount,\n    ROUND(TotalBudget, 2) as TotalBudget,\n    ROUND(AvgProjectDuration, 1) as AvgProjectDurationDays,\n    ProjectManagers\nFROM ClientActiveProjects\nORDER BY ActiveProjectCount DESC, TotalBudget DESC\nLIMIT 4;"
        },
        {
            "question": "Получить список отделов с наибольшим количеством инженеров, имеющих сертификаты уровня 'Продвинутый' или 'Эксперт'. В ответе будут показаны: название отдела, количество квалифицированных инженеров, список сертификатов, средний стаж работы инженеров в годах и общий бюджет отдела. Результаты отсортированы по количеству квалифицированных инженеров и бюджету отдела, показаны топ-4 записи.",
            "sql_query": "WITH DepartmentQualification AS (\n    SELECT \n        d.DepartmentID,\n        d.DepartmentName,\n        COUNT(DISTINCT e.EngineerID) as QualifiedEngineers,\n        GROUP_CONCAT(DISTINCT c.CertificationName) as Certifications,\n        AVG(DATEDIFF(CURDATE(), e.HireDate)) as AvgExperienceDays,\n        d.Budget as DepartmentBudget\n    FROM Departments d\n    JOIN Engineers e ON d.DepartmentID = e.DepartmentID\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    AND c.Status = 'Действителен'\n    GROUP BY d.DepartmentID, d.DepartmentName, d.Budget\n)\nSELECT \n    DepartmentName,\n    QualifiedEngineers,\n    Certifications,\n    ROUND(AvgExperienceDays/365, 1) as AvgExperienceYears,\n    ROUND(DepartmentBudget, 2) as DepartmentBudget\nFROM DepartmentQualification\nORDER BY QualifiedEngineers DESC, DepartmentBudget DESC\nLIMIT 4;"
        },
        {
            "question": "Получить список проектов с наибольшим количеством задач с высоким приоритетом и просроченными сроками. В ответе будут показаны: название проекта, количество высокоприоритетных задач, количество просроченных задач, средняя продолжительность просрочки в днях и список ответственных инженеров. Результаты отсортированы по количеству высокоприоритетных и просроченных задач, показаны топ-5 записей.",
            "sql_query": "WITH ProjectTaskStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        SUM(CASE WHEN t.Priority = 'Высокий' THEN 1 ELSE 0 END) as HighPriorityTasks,\n        SUM(CASE WHEN t.DueDate < CURDATE() AND t.Status = 'В процессе' THEN 1 ELSE 0 END) as OverdueTasks,\n        AVG(CASE WHEN t.DueDate < CURDATE() THEN DATEDIFF(CURDATE(), t.DueDate) ELSE 0 END) as AvgOverdueDays,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as ResponsibleEngineers\n    FROM Projects p\n    JOIN Tasks t ON p.ProjectID = t.ProjectID\n    JOIN Engineers e ON t.AssignedTo = e.EngineerID\n    WHERE t.Priority = 'Высокий'\n    GROUP BY p.ProjectID, p.ProjectName\n    HAVING SUM(CASE WHEN t.Priority = 'Высокий' THEN 1 ELSE 0 END) > 0\n)\nSELECT \n    ProjectName,\n    HighPriorityTasks,\n    OverdueTasks,\n    ROUND(AvgOverdueDays, 1) as AvgOverdueDays,\n    ResponsibleEngineers\nFROM ProjectTaskStats\nORDER BY HighPriorityTasks DESC, OverdueTasks DESC\nLIMIT 5;"
        },
        {
            "question": "Найти оборудование с наибольшим количеством инцидентов безопасности высокого уровня и стоимостью обслуживания более 2000 рублей. В ответе будут показаны: название оборудования, производитель, количество инцидентов, общая стоимость обслуживания, список ответственных инженеров и статус оборудования. Результаты отсортированы по количеству инцидентов и стоимости обслуживания, показаны топ-6 записей.",
            "sql_query": "WITH EquipmentSafetyStats AS (\n    SELECT \n        e.EquipmentID,\n        e.EquipmentName,\n        e.Manufacturer,\n        COUNT(DISTINCT si.IncidentID) as IncidentCount,\n        SUM(m.Cost) as TotalMaintenanceCost,\n        GROUP_CONCAT(DISTINCT CONCAT(eng.FirstName, ' ', eng.LastName)) as ResponsibleEngineers,\n        e.Status as EquipmentStatus\n    FROM Equipment e\n    JOIN SafetyIncidents si ON e.EquipmentID = si.EquipmentID\n    JOIN MaintenanceRecords m ON e.EquipmentID = m.EquipmentID\n    JOIN Engineers eng ON m.EngineerID = eng.EngineerID\n    WHERE si.SeverityLevel = 'Высокий'\n    AND m.Status = 'Выполнено'\n    GROUP BY e.EquipmentID, e.EquipmentName, e.Manufacturer, e.Status\n    HAVING SUM(m.Cost) > 2000\n)\nSELECT \n    EquipmentName,\n    Manufacturer,\n    IncidentCount,\n    ROUND(TotalMaintenanceCost, 2) as TotalMaintenanceCost,\n    ResponsibleEngineers,\n    EquipmentStatus\nFROM EquipmentSafetyStats\nORDER BY IncidentCount DESC, TotalMaintenanceCost DESC\nLIMIT 6;"
        },
        {
            "question": "Найти клиентов с наибольшим количеством проектов в статусе 'В процессе' и общим бюджетом более 15 миллионов рублей. В ответе будут показаны: название клиента, количество активных проектов, общий бюджет проектов, средняя продолжительность проектов в днях и список руководителей проектов. Результаты отсортированы по количеству активных проектов и общему бюджету, показаны топ-4 записи.",
            "sql_query": "WITH ClientActiveProjects AS (\n    SELECT \n        c.ClientID,\n        c.ClientName,\n        COUNT(p.ProjectID) as ActiveProjectCount,\n        SUM(p.Budget) as TotalBudget,\n        AVG(DATEDIFF(p.EndDate, p.StartDate)) as AvgProjectDuration,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as ProjectManagers\n    FROM Clients c\n    JOIN Projects p ON c.ClientID = p.ClientID\n    JOIN Engineers e ON p.ProjectManagerID = e.EngineerID\n    WHERE p.Status = 'В процессе'\n    GROUP BY c.ClientID, c.ClientName\n    HAVING SUM(p.Budget) > 15000000\n)\nSELECT \n    ClientName,\n    ActiveProjectCount,\n    ROUND(TotalBudget, 2) as TotalBudget,\n    ROUND(AvgProjectDuration, 1) as AvgProjectDurationDays,\n    ProjectManagers\nFROM ClientActiveProjects\nORDER BY ActiveProjectCount DESC, TotalBudget DESC\nLIMIT 4;"
        },
        {
            "question": "Найти проекты, где количество инженеров с сертификатами уровня 'Продвинутый' или 'Эксперт' превышает среднее по всем проектам. В ответе будут показаны: название проекта, количество квалифицированных инженеров, средний стаж работы инженеров в годах, общий бюджет проекта и список сертификатов. Результаты отсортированы по количеству квалифицированных инженеров и бюджету проекта, показаны топ-3 записи.",
            "sql_query": "WITH ProjectEngineerStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        COUNT(DISTINCT e.EngineerID) as QualifiedEngineers,\n        AVG(DATEDIFF(CURDATE(), e.HireDate)) as AvgExperienceDays,\n        p.Budget as ProjectBudget,\n        GROUP_CONCAT(DISTINCT c.CertificationName) as Certifications\n    FROM Projects p\n    JOIN Engineers e ON e.DepartmentID = p.DepartmentID\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    AND c.Status = 'Действителен'\n    GROUP BY p.ProjectID, p.ProjectName, p.Budget\n    HAVING COUNT(DISTINCT e.EngineerID) > (\n        SELECT AVG(EngineerCount)\n        FROM (\n            SELECT COUNT(DISTINCT e.EngineerID) as EngineerCount\n            FROM Projects p\n            JOIN Engineers e ON e.DepartmentID = p.DepartmentID\n            JOIN Certifications c ON e.EngineerID = c.EngineerID\n            WHERE c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n            AND c.Status = 'Действителен'\n            GROUP BY p.ProjectID\n        ) as AvgCounts\n    )\n)\nSELECT \n    ProjectName,\n    QualifiedEngineers,\n    ROUND(AvgExperienceDays/365, 1) as AvgExperienceYears,\n    ROUND(ProjectBudget, 2) as ProjectBudget,\n    Certifications\nFROM ProjectEngineerStats\nORDER BY QualifiedEngineers DESC, ProjectBudget DESC\nLIMIT 3;"
        },
        {
            "question": "Найти отделы с наибольшим количеством оборудования, требующего срочного обслуживания (следующее обслуживание в течение месяца). В ответе будут показаны: название отдела, количество единиц оборудования, общая стоимость предстоящего обслуживания, список оборудования с производителями и средний возраст оборудования в годах. Результаты отсортированы по количеству единиц оборудования и стоимости обслуживания, показаны топ-4 записи.",
            "sql_query": "WITH DepartmentEquipmentStats AS (\n    SELECT \n        d.DepartmentID,\n        d.DepartmentName,\n        COUNT(DISTINCT e.EquipmentID) as EquipmentCount,\n        SUM(m.Cost) as TotalMaintenanceCost,\n        GROUP_CONCAT(DISTINCT CONCAT(e.EquipmentName, ' (', e.Manufacturer, ')')) as EquipmentList,\n        AVG(DATEDIFF(CURDATE(), e.PurchaseDate)) as AvgEquipmentAge\n    FROM Departments d\n    JOIN Equipment e ON d.DepartmentID = e.DepartmentID\n    JOIN MaintenanceRecords m ON e.EquipmentID = m.EquipmentID\n    WHERE m.NextScheduledDate BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 MONTH)\n    AND e.Status = 'В работе'\n    GROUP BY d.DepartmentID, d.DepartmentName\n    HAVING COUNT(DISTINCT e.EquipmentID) > 0\n)\nSELECT \n    DepartmentName,\n    EquipmentCount,\n    ROUND(TotalMaintenanceCost, 2) as TotalMaintenanceCost,\n    EquipmentList,\n    ROUND(AvgEquipmentAge/365, 1) as AvgEquipmentAgeYears\nFROM DepartmentEquipmentStats\nORDER BY EquipmentCount DESC, TotalMaintenanceCost DESC\nLIMIT 4;"
        },
        {
            "question": "Найти инженеров, которые участвовали в проектах с бюджетом более 5 миллионов рублей и имеют сертификаты, срок действия которых истекает в течение следующих 3 месяцев, а также участвовали в инцидентах безопасности. В ответе будут показаны: имя инженера, должность, количество проектов, список сертификатов с истекающим сроком действия и количество инцидентов безопасности. Результаты отсортированы по количеству инцидентов и проектов, показаны топ-5 записей.",
            "sql_query": "WITH EngineerSafetyStats AS (\n    SELECT \n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', e.LastName) as EngineerName,\n        e.Position,\n        COUNT(DISTINCT p.ProjectID) as ProjectCount,\n        GROUP_CONCAT(DISTINCT c.CertificationName) as ExpiringCertifications,\n        COUNT(DISTINCT si.IncidentID) as IncidentCount\n    FROM Engineers e\n    JOIN Projects p ON p.ProjectManagerID = e.EngineerID\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    JOIN SafetyIncidents si ON e.EngineerID = si.EngineerID\n    WHERE p.Budget > 5000000\n    AND c.ExpiryDate BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 3 MONTH)\n    AND c.Status = 'Действителен'\n    AND si.SeverityLevel = 'Высокий'\n    GROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position\n)\nSELECT \n    EngineerName,\n    Position,\n    ProjectCount,\n    ExpiringCertifications,\n    IncidentCount\nFROM EngineerSafetyStats\nORDER BY IncidentCount DESC, ProjectCount DESC\nLIMIT 5;"
        },
        {
            "question": "Получить список проектов, где количество черновиков документов превышает количество утвержденных документов, и средняя стоимость материалов превышает 500 рублей. В ответе будут показаны: название проекта, количество черновиков, количество утвержденных документов, общая стоимость материалов и список авторов документов. Учитываются только материалы от поставщиков из Москвы и Санкт-Петербурга. Результаты отсортированы по разнице между количеством черновиков и утвержденных документов, показаны топ-3 записи.",
            "sql_query": "WITH ProjectDocumentMaterialStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        SUM(CASE WHEN d.Status = 'Черновик' THEN 1 ELSE 0 END) as DraftCount,\n        SUM(CASE WHEN d.Status = 'Утвержден' THEN 1 ELSE 0 END) as ApprovedCount,\n        SUM(m.UnitPrice * m.QuantityInStock) as TotalMaterialCost,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as Authors\n    FROM Projects p\n    JOIN DesignDocuments d ON p.ProjectID = d.ProjectID\n    JOIN Engineers e ON d.AuthorID = e.EngineerID\n    JOIN Materials m ON m.SupplierID IN (\n        SELECT SupplierID \n        FROM Suppliers \n        WHERE City IN ('Москва', 'Санкт-Петербург')\n    )\n    GROUP BY p.ProjectID, p.ProjectName\n    HAVING SUM(CASE WHEN d.Status = 'Черновик' THEN 1 ELSE 0 END) > \n           SUM(CASE WHEN d.Status = 'Утвержден' THEN 1 ELSE 0 END)\n    AND AVG(m.UnitPrice) > 500\n)\nSELECT \n    ProjectName,\n    DraftCount,\n    ApprovedCount,\n    ROUND(TotalMaterialCost, 2) as TotalMaterialCost,\n    Authors\nFROM ProjectDocumentMaterialStats\nORDER BY (DraftCount - ApprovedCount) DESC, TotalMaterialCost DESC\nLIMIT 3;"
        },
        {
            "question": "Получить список отделов с наибольшим количеством инженеров, участвующих в программах обучения стоимостью более 150000 рублей и имеющих действующие сертификаты уровня 'Продвинутый' или 'Эксперт'. В ответе будут показаны: название отдела, количество квалифицированных инженеров, общая стоимость обучения, список программ обучения и средний стаж работы инженеров в годах. Учитываются только завершенные программы обучения. Результаты отсортированы по количеству квалифицированных инженеров, показаны топ-4 записи.",
            "sql_query": "WITH DepartmentTrainingStats AS (\n    SELECT \n        d.DepartmentID,\n        d.DepartmentName,\n        COUNT(DISTINCT e.EngineerID) as QualifiedEngineers,\n        SUM(tp.Cost) as TotalTrainingCost,\n        GROUP_CONCAT(DISTINCT tp.ProgramName) as TrainingPrograms,\n        AVG(DATEDIFF(CURDATE(), e.HireDate)) as AvgExperienceDays\n    FROM Departments d\n    JOIN Engineers e ON d.DepartmentID = e.DepartmentID\n    JOIN TrainingPrograms tp ON e.EngineerID = tp.EngineerID\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE tp.Cost > 150000\n    AND c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    AND c.Status = 'Действителен'\n    AND tp.Status = 'Завершено'\n    GROUP BY d.DepartmentID, d.DepartmentName\n)\nSELECT \n    DepartmentName,\n    QualifiedEngineers,\n    ROUND(TotalTrainingCost, 2) as TotalTrainingCost,\n    TrainingPrograms,\n    ROUND(AvgExperienceDays/365, 1) as AvgExperienceYears\nFROM DepartmentTrainingStats\nORDER BY QualifiedEngineers DESC, TotalTrainingCost DESC\nLIMIT 4;"
        },
        {
            "question": "Получить список клиентов с наибольшим количеством активных проектов, где средняя стоимость материалов превышает 1000 рублей. В ответе будут показаны: название клиента, количество проектов, общий бюджет проектов, средняя стоимость материалов и список ответственных инженеров. Учитываются только проекты в статусе 'В процессе' и материалы от российских поставщиков. Результаты отсортированы по количеству проектов, показаны топ-5 записей.",
            "sql_query": "WITH ClientMaterialStats AS (\n    SELECT \n        c.ClientID,\n        c.ClientName,\n        COUNT(DISTINCT p.ProjectID) as ProjectCount,\n        SUM(p.Budget) as TotalBudget,\n        AVG(m.UnitPrice) as AvgMaterialPrice,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as ResponsibleEngineers\n    FROM Clients c\n    JOIN Projects p ON c.ClientID = p.ClientID\n    JOIN Materials m ON m.SupplierID IN (\n        SELECT SupplierID \n        FROM Suppliers \n        WHERE Country = 'Россия'\n    )\n    JOIN Engineers e ON p.ProjectManagerID = e.EngineerID\n    WHERE p.Status = 'В процессе'\n    GROUP BY c.ClientID, c.ClientName\n    HAVING AVG(m.UnitPrice) > 1000\n)\nSELECT \n    ClientName,\n    ProjectCount,\n    ROUND(TotalBudget, 2) as TotalBudget,\n    ROUND(AvgMaterialPrice, 2) as AvgMaterialPrice,\n    ResponsibleEngineers\nFROM ClientMaterialStats\nORDER BY ProjectCount DESC, TotalBudget DESC\nLIMIT 5;"
        },
        {
            "question": "Получить список оборудования с наибольшим количеством инцидентов безопасности высокого уровня и высокой стоимостью обслуживания, где последнее обслуживание было более 6 месяцев назад. В ответе будут показаны: название оборудования, производитель, количество инцидентов, общая стоимость обслуживания, дата последнего обслуживания и текущий статус оборудования. Учитываются только записи с общей стоимостью обслуживания более 2000 рублей. Результаты отсортированы по количеству инцидентов, показаны топ-6 записей.",
            "sql_query": "WITH EquipmentSafetyMaintenance AS (\n    SELECT \n        e.EquipmentID,\n        e.EquipmentName,\n        e.Manufacturer,\n        COUNT(DISTINCT si.IncidentID) as IncidentCount,\n        SUM(m.Cost) as TotalMaintenanceCost,\n        MAX(m.MaintenanceDate) as LastMaintenanceDate,\n        e.Status as EquipmentStatus\n    FROM Equipment e\n    JOIN SafetyIncidents si ON e.EquipmentID = si.EquipmentID\n    JOIN MaintenanceRecords m ON e.EquipmentID = m.EquipmentID\n    WHERE si.SeverityLevel = 'Высокий'\n    AND m.MaintenanceDate < DATE_SUB(CURDATE(), INTERVAL 6 MONTH)\n    GROUP BY e.EquipmentID, e.EquipmentName, e.Manufacturer, e.Status\n    HAVING SUM(m.Cost) > 2000\n)\nSELECT \n    EquipmentName,\n    Manufacturer,\n    IncidentCount,\n    ROUND(TotalMaintenanceCost, 2) as TotalMaintenanceCost,\n    LastMaintenanceDate,\n    EquipmentStatus\nFROM EquipmentSafetyMaintenance\nORDER BY IncidentCount DESC, TotalMaintenanceCost DESC\nLIMIT 6;"
        },
        {
            "question": "Получить список инженеров, работающих над проектами с бюджетом более 7 миллионов рублей, имеющих действующие сертификаты уровня 'Продвинутый' или 'Эксперт' и участвовавших в программах обучения стоимостью более 150000 рублей. В ответе будут показаны: имя инженера, должность, количество проектов, список сертификатов и общая стоимость обучения. Учитываются только завершенные программы обучения. Результаты отсортированы по количеству проектов, показаны топ-4 записи.",
            "sql_query": "WITH EngineerProjectTraining AS (\n    SELECT \n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', e.LastName) as EngineerName,\n        e.Position,\n        COUNT(DISTINCT p.ProjectID) as ProjectCount,\n        GROUP_CONCAT(DISTINCT c.CertificationName) as Certifications,\n        SUM(tp.Cost) as TotalTrainingCost\n    FROM Engineers e\n    JOIN Projects p ON p.ProjectManagerID = e.EngineerID\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    JOIN TrainingPrograms tp ON e.EngineerID = tp.EngineerID\n    WHERE p.Budget > 7000000\n    AND c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    AND c.Status = 'Действителен'\n    AND tp.Cost > 150000\n    AND tp.Status = 'Завершено'\n    GROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position\n)\nSELECT \n    EngineerName,\n    Position,\n    ProjectCount,\n    Certifications,\n    ROUND(TotalTrainingCost, 2) as TotalTrainingCost\nFROM EngineerProjectTraining\nORDER BY ProjectCount DESC, TotalTrainingCost DESC\nLIMIT 4;"
        },
        {
            "question": "Определить проекты с превышающим среднее количество высокоприоритетных задач и средней продолжительностью выполнения более 10 дней. В ответе будут показаны: название проекта, количество высокоприоритетных задач, средняя продолжительность задач в днях, список ответственных инженеров и текущий статус проекта. Результаты отсортированы по количеству высокоприоритетных задач и средней продолжительности, показаны топ-3 записи.",
            "sql_query": "WITH ProjectTaskStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        SUM(CASE WHEN t.Priority = 'Высокий' THEN 1 ELSE 0 END) as HighPriorityTasks,\n        AVG(DATEDIFF(t.DueDate, t.StartDate)) as AvgTaskDuration,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as ResponsibleEngineers,\n        p.Status as ProjectStatus\n    FROM Projects p\n    JOIN Tasks t ON p.ProjectID = t.ProjectID\n    JOIN Engineers e ON t.AssignedTo = e.EngineerID\n    WHERE t.Status = 'В процессе'\n    GROUP BY p.ProjectID, p.ProjectName, p.Status\n    HAVING SUM(CASE WHEN t.Priority = 'Высокий' THEN 1 ELSE 0 END) > (\n        SELECT AVG(TaskCount)\n        FROM (\n            SELECT COUNT(TaskID) as TaskCount\n            FROM Tasks\n            WHERE Priority = 'Высокий'\n            GROUP BY ProjectID\n        ) as AvgCounts\n    )\n    AND AVG(DATEDIFF(t.DueDate, t.StartDate)) > 10\n)\nSELECT \n    ProjectName,\n    HighPriorityTasks,\n    ROUND(AvgTaskDuration, 1) as AvgTaskDurationDays,\n    ResponsibleEngineers,\n    ProjectStatus\nFROM ProjectTaskStats\nORDER BY HighPriorityTasks DESC, AvgTaskDuration DESC\nLIMIT 3;"
        },
        {
            "question": "Выявить отделы с наибольшим количеством инженеров, имеющих сертификаты уровня 'Продвинутый' или 'Эксперт', и участвующих в проектах с бюджетом свыше 5 миллионов рублей. В ответе будут показаны: название отдела, количество квалифицированных инженеров, количество проектов, общий бюджет проектов и список имеющихся сертификатов. Результаты отсортированы по количеству квалифицированных инженеров и общему бюджету, показаны топ-4 записи.",
            "sql_query": "WITH DepartmentEngineerStats AS (\n    SELECT \n        d.DepartmentID,\n        d.DepartmentName,\n        COUNT(DISTINCT e.EngineerID) as QualifiedEngineers,\n        COUNT(DISTINCT p.ProjectID) as ProjectCount,\n        SUM(p.Budget) as TotalProjectBudget,\n        GROUP_CONCAT(DISTINCT c.CertificationName) as Certifications\n    FROM Departments d\n    JOIN Engineers e ON d.DepartmentID = e.DepartmentID\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    JOIN Projects p ON p.ProjectManagerID = e.EngineerID\n    WHERE c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    AND c.Status = 'Действителен'\n    AND p.Budget > 5000000\n    GROUP BY d.DepartmentID, d.DepartmentName\n)\nSELECT \n    DepartmentName,\n    QualifiedEngineers,\n    ProjectCount,\n    ROUND(TotalProjectBudget, 2) as TotalProjectBudget,\n    Certifications\nFROM DepartmentEngineerStats\nORDER BY QualifiedEngineers DESC, TotalProjectBudget DESC\nLIMIT 4;"
        },
        {
            "question": "Определить проекты с превышающим среднее количество инцидентов безопасности и средней стоимостью исправления свыше 2000 рублей. В ответе будут показаны: название проекта, количество инцидентов, средняя стоимость исправления в рублях, список ответственных инженеров и текущий статус проекта. Результаты отсортированы по количеству инцидентов и средней стоимости исправления, показаны топ-3 записи.",
            "sql_query": "WITH ProjectSafetyStats AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        COUNT(DISTINCT si.IncidentID) as IncidentCount,\n        AVG(m.Cost) as AvgCorrectionCost,\n        GROUP_CONCAT(DISTINCT CONCAT(e.FirstName, ' ', e.LastName)) as ResponsibleEngineers,\n        p.Status as ProjectStatus\n    FROM Projects p\n    JOIN SafetyIncidents si ON si.EngineerID IN (\n        SELECT EngineerID \n        FROM Tasks \n        WHERE ProjectID = p.ProjectID\n    )\n    JOIN MaintenanceRecords m ON m.EngineerID = si.EngineerID\n    JOIN Engineers e ON si.EngineerID = e.EngineerID\n    WHERE si.SeverityLevel = 'Высокий'\n    GROUP BY p.ProjectID, p.ProjectName, p.Status\n    HAVING COUNT(DISTINCT si.IncidentID) > (\n        SELECT AVG(IncidentCount)\n        FROM (\n            SELECT COUNT(IncidentID) as IncidentCount\n            FROM SafetyIncidents\n            WHERE SeverityLevel = 'Высокий'\n            GROUP BY EngineerID\n        ) as AvgCounts\n    )\n    AND AVG(m.Cost) > 2000\n)\nSELECT \n    ProjectName,\n    IncidentCount,\n    ROUND(AvgCorrectionCost, 2) as AvgCorrectionCost,\n    ResponsibleEngineers,\n    ProjectStatus\nFROM ProjectSafetyStats\nORDER BY IncidentCount DESC, AvgCorrectionCost DESC\nLIMIT 3;"
        },
        {
            "question": "Выявить инженеров, участвующих в проектах с бюджетом свыше 10 миллионов рублей, имеющих сертификаты с истекающим сроком действия в течение 3 месяцев, и прошедших обучение стоимостью более 200000 рублей. В ответе будут показаны: имя инженера, должность, количество проектов, список сертификатов с истекающим сроком и общая стоимость обучения в рублях. Результаты отсортированы по количеству проектов и общей стоимости обучения, показаны топ-5 записей.",
            "sql_query": "WITH EngineerProjectTraining AS (\n    SELECT \n        e.EngineerID,\n        CONCAT(e.FirstName, ' ', e.LastName) as EngineerName,\n        e.Position,\n        COUNT(DISTINCT p.ProjectID) as ProjectCount,\n        GROUP_CONCAT(DISTINCT c.CertificationName) as ExpiringCertifications,\n        SUM(tp.Cost) as TotalTrainingCost\n    FROM Engineers e\n    JOIN Projects p ON p.ProjectManagerID = e.EngineerID\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    JOIN TrainingPrograms tp ON e.EngineerID = tp.EngineerID\n    WHERE p.Budget > 10000000\n    AND c.ExpiryDate BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 3 MONTH)\n    AND c.Status = 'Действителен'\n    AND tp.Cost > 200000\n    AND tp.Status = 'Завершено'\n    GROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position\n)\nSELECT \n    EngineerName,\n    Position,\n    ProjectCount,\n    ExpiringCertifications,\n    ROUND(TotalTrainingCost, 2) as TotalTrainingCost\nFROM EngineerProjectTraining\nORDER BY ProjectCount DESC, TotalTrainingCost DESC\nLIMIT 5;"
        },
        {
            "question": "Определить проекты с превышающим количество черновиков документов проектирования над утвержденными документами, средней стоимостью материалов свыше 500 рублей и наличием инцидентов безопасности высокого уровня. В ответе будут показаны: название проекта, количество черновиков, количество утвержденных документов, общая стоимость материалов в рублях и количество инцидентов безопасности. Результаты отсортированы по разнице между количеством черновиков и утвержденных документов и количеству инцидентов, показаны топ-4 записи.",
            "sql_query": "WITH ProjectDocumentMaterialSafety AS (\n    SELECT \n        p.ProjectID,\n        p.ProjectName,\n        SUM(CASE WHEN d.Status = 'Черновик' THEN 1 ELSE 0 END) as DraftCount,\n        SUM(CASE WHEN d.Status = 'Утвержден' THEN 1 ELSE 0 END) as ApprovedCount,\n        SUM(m.UnitPrice * m.QuantityInStock) as TotalMaterialCost,\n        COUNT(DISTINCT si.IncidentID) as SafetyIncidentCount\n    FROM Projects p\n    JOIN DesignDocuments d ON p.ProjectID = d.ProjectID\n    JOIN Materials m ON m.SupplierID IN (\n        SELECT SupplierID \n        FROM Suppliers \n        WHERE City IN ('Москва', 'Санкт-Петербург')\n    )\n    JOIN SafetyIncidents si ON si.EngineerID IN (\n        SELECT EngineerID \n        FROM Tasks \n        WHERE ProjectID = p.ProjectID\n    )\n    WHERE si.SeverityLevel = 'Высокий'\n    GROUP BY p.ProjectID, p.ProjectName\n    HAVING SUM(CASE WHEN d.Status = 'Черновик' THEN 1 ELSE 0 END) > \n           SUM(CASE WHEN d.Status = 'Утвержден' THEN 1 ELSE 0 END)\n    AND AVG(m.UnitPrice) > 500\n)\nSELECT \n    ProjectName,\n    DraftCount,\n    ApprovedCount,\n    ROUND(TotalMaterialCost, 2) as TotalMaterialCost,\n    SafetyIncidentCount\nFROM ProjectDocumentMaterialSafety\nORDER BY (DraftCount - ApprovedCount) DESC, SafetyIncidentCount DESC\nLIMIT 4;"
        },
        {
            "question": "Найти отделы с наибольшим количеством инженеров, имеющих сертификаты уровня 'Продвинутый' или 'Эксперт', и участвующих в проектах с бюджетом более 5 миллионов рублей, а также участвовавших в программах обучения стоимостью более 150000 рублей. В ответе будут показаны: название отдела, количество квалифицированных инженеров, количество проектов, общий бюджет проектов и общая стоимость обучения. Учитываются только завершенные программы обучения и действующие сертификаты. Результаты отсортированы по количеству квалифицированных инженеров и общему бюджету проектов, показаны топ-3 записи.",
            "sql_query": "WITH DepartmentEngineerTraining AS (\n    SELECT \n        d.DepartmentID,\n        d.DepartmentName,\n        COUNT(DISTINCT e.EngineerID) as QualifiedEngineers,\n        COUNT(DISTINCT p.ProjectID) as ProjectCount,\n        SUM(p.Budget) as TotalProjectBudget,\n        SUM(tp.Cost) as TotalTrainingCost\n    FROM Departments d\n    JOIN Engineers e ON d.DepartmentID = e.DepartmentID\n    JOIN Certifications c ON e.EngineerID = c.EngineerID\n    JOIN Projects p ON p.ProjectManagerID = e.EngineerID\n    JOIN TrainingPrograms tp ON e.EngineerID = tp.EngineerID\n    WHERE c.CertificationLevel IN ('Продвинутый', 'Эксперт')\n    AND c.Status = 'Действителен'\n    AND p.Budget > 5000000\n    AND tp.Cost > 150000\n    AND tp.Status = 'Завершено'\n    GROUP BY d.DepartmentID, d.DepartmentName\n)\nSELECT \n    DepartmentName,\n    QualifiedEngineers,\n    ProjectCount,\n    ROUND(TotalProjectBudget, 2) as TotalProjectBudget,\n    ROUND(TotalTrainingCost, 2) as TotalTrainingCost\nFROM DepartmentEngineerTraining\nORDER BY QualifiedEngineers DESC, TotalProjectBudget DESC\nLIMIT 3;"
        },
        {
            "question": "Найти топ-3 инженеров с наибольшим количеством сертификатов и их общей стоимостью обучения, работающих в отделах с бюджетом более 3 000 000 рублей. В ответе будут показаны: идентификатор инженера, имя, фамилия, должность, название отдела, количество сертификатов и общая стоимость обучения. Результаты отсортированы по количеству сертификатов и общей стоимости обучения, показаны топ-17 записей.",
            "sql_query": "SELECT e.EngineerID, e.FirstName, e.LastName, e.Position, d.DepartmentName, \n       COUNT(c.CertificationID) AS CertificationCount, \n       COALESCE(SUM(tp.Cost), 0) AS TotalTrainingCost\nFROM Engineers e\nJOIN Departments d ON e.DepartmentID = d.DepartmentID\nLEFT JOIN Certifications c ON e.EngineerID = c.EngineerID\nLEFT JOIN TrainingPrograms tp ON e.EngineerID = tp.EngineerID\nWHERE d.Budget > 3000000.00\nGROUP BY e.EngineerID, e.FirstName, e.LastName, e.Position, d.DepartmentName\nORDER BY CertificationCount DESC, TotalTrainingCost DESC\nLIMIT 17"
        },
        {
            "question": "Определить проекты с самыми дорогими материалами, где общая стоимость материалов превышает средний бюджет проекта. В ответе будут показаны: название проекта, бюджет проекта, общая стоимость материалов и название поставщика. Результаты отсортированы по общей стоимости материалов, показаны топ-23 записи.",
            "sql_query": "WITH ProjectMaterialCost AS (\n    SELECT p.ProjectID, p.ProjectName, p.Budget,\n           SUM(m.UnitPrice * m.QuantityInStock) AS TotalMaterialCost,\n           s.SupplierName\n    FROM Projects p\n    JOIN Materials m ON m.MaterialID IN (\n        SELECT MaterialID FROM Materials \n        WHERE SupplierID IN (SELECT SupplierID FROM Suppliers)\n    )\n    JOIN Suppliers s ON m.SupplierID = s.SupplierID\n    GROUP BY p.ProjectID, p.ProjectName, p.Budget, s.SupplierName\n)\nSELECT ProjectName, Budget, TotalMaterialCost, SupplierName\nFROM ProjectMaterialCost\nWHERE TotalMaterialCost > (\n    SELECT AVG(Budget) FROM Projects\n)\nORDER BY TotalMaterialCost DESC\nLIMIT 23"
        },
        {
            "question": "Найти инженеров, которые участвовали в проектах с высоким приоритетом и имеют более 2 сертификатов. В ответе будут показаны: идентификатор инженера, имя, фамилия, количество сертификатов, количество инцидентов безопасности и уровень безопасности на рабочем месте. Уровень безопасности определяется по количеству инцидентов: 0 - высокий уровень, 1 - средний уровень, более 1 - низкий уровень. Результаты отсортированы по количеству инцидентов безопасности, показаны топ-19 записей.",
            "sql_query": "WITH EngineerProjectSafety AS (\n    SELECT e.EngineerID, e.FirstName, e.LastName, \n           COUNT(DISTINCT c.CertificationID) AS CertCount,\n           COUNT(DISTINCT si.IncidentID) AS SafetyIncidentCount\n    FROM Engineers e\n    JOIN Projects p ON p.ProjectManagerID = e.EngineerID\n    JOIN Tasks t ON t.ProjectID = p.ProjectID\n    LEFT JOIN Certifications c ON c.EngineerID = e.EngineerID\n    LEFT JOIN SafetyIncidents si ON si.EngineerID = e.EngineerID\n    WHERE t.Priority = 'Высокий'\n    GROUP BY e.EngineerID, e.FirstName, e.LastName\n    HAVING COUNT(DISTINCT c.CertificationID) > 2\n)\nSELECT EngineerID, FirstName, LastName, \n       CertCount, SafetyIncidentCount,\n       CASE \n           WHEN SafetyIncidentCount = 0 THEN 'Высокий уровень безопасности'\n           WHEN SafetyIncidentCount <= 1 THEN 'Средний уровень безопасности'\n           ELSE 'Низкий уровень безопасности'\n       END AS SafetyRating\nFROM EngineerProjectSafety\nORDER BY SafetyIncidentCount\nLIMIT 19"
        },
        {
            "question": "Рассчитать коэффициент эффективности оборудования для каждого отдела на основе количества ремонтов и текущего статуса оборудования. В ответе будут показаны: идентификатор отдела, название отдела, общее количество оборудования, количество работающего оборудования, количество ремонтов, процент эффективности (отношение работающего оборудования к общему количеству) и коэффициент обслуживания (отношение количества ремонтов к общему количеству оборудования). Результаты отсортированы по проценту эффективности, показаны топ-13 записей.",
            "sql_query": "WITH EquipmentEfficiency AS (\n    SELECT d.DepartmentID, d.DepartmentName,\n           COUNT(e.EquipmentID) AS TotalEquipment,\n           SUM(CASE WHEN e.Status = 'В работе' THEN 1 ELSE 0 END) AS WorkingEquipment,\n           COUNT(mr.MaintenanceID) AS MaintenanceCount\n    FROM Departments d\n    LEFT JOIN Equipment e ON d.DepartmentID = e.DepartmentID\n    LEFT JOIN MaintenanceRecords mr ON e.EquipmentID = mr.EquipmentID\n    GROUP BY d.DepartmentID, d.DepartmentName\n)\nSELECT DepartmentID, DepartmentName,\n       TotalEquipment,\n       WorkingEquipment,\n       MaintenanceCount,\n       ROUND(WorkingEquipment * 1.0 / NULLIF(TotalEquipment, 0) * 100, 2) AS EfficiencyPercentage,\n       ROUND(MaintenanceCount * 1.0 / NULLIF(TotalEquipment, 0), 2) AS MaintenanceRatio\nFROM EquipmentEfficiency\nORDER BY EfficiencyPercentage DESC\nLIMIT 13"
        },
        {
            "question": "Выявить проекты с наибольшим количеством задач высокого приоритета и их связь с качественным обеспечением и сертификацией инженеров. В ответе будут показаны: идентификатор проекта, название проекта, статус проекта, количество задач высокого приоритета, количество проверок качества, количество сертификатов инженеров и комплексный показатель сложности проекта (рассчитывается как взвешенная сумма: 50% от количества задач высокого приоритета, 30% от количества проверок качества и 20% от количества сертификатов). Учитываются только проекты с хотя бы одной задачей высокого приоритета. Результаты отсортированы по комплексному показателю сложности, показаны топ-11 записей.",
            "sql_query": "WITH ProjectTaskAnalysis AS (\n    SELECT p.ProjectID, p.ProjectName, p.Status AS ProjectStatus,\n           COUNT(t.TaskID) AS HighPriorityTaskCount,\n           COUNT(DISTINCT qa.QAID) AS QualityAssuranceCount,\n           COUNT(DISTINCT c.CertificationID) AS EngineerCertificationCount\n    FROM Projects p\n    LEFT JOIN Tasks t ON p.ProjectID = t.ProjectID\n    LEFT JOIN QualityAssurance qa ON p.ProjectID = qa.ProjectID\n    LEFT JOIN Engineers e ON p.ProjectManagerID = e.EngineerID\n    LEFT JOIN Certifications c ON e.EngineerID = c.EngineerID\n    WHERE t.Priority = 'Высокий'\n    GROUP BY p.ProjectID, p.ProjectName, p.Status\n)\nSELECT ProjectID, ProjectName, ProjectStatus,\n       HighPriorityTaskCount,\n       QualityAssuranceCount,\n       EngineerCertificationCount,\n       ROUND((HighPriorityTaskCount * 0.5 + QualityAssuranceCount * 0.3 + EngineerCertificationCount * 0.2), 2) AS ProjectComplexityScore\nFROM ProjectTaskAnalysis\nWHERE HighPriorityTaskCount > 0\nORDER BY ProjectComplexityScore DESC\nLIMIT 11"
        }
    ]
}
