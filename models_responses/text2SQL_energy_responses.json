{
    "queries": [
        {
            "question": "Найти топ-5 компаний-владельцев электростанций, у которых средняя стоимость обслуживания превышает среднюю по отрасли за последний год, и показать для каждой компании количество инцидентов высокой и критической важности, а также общую сумму затрат на обслуживание.",
            "sql_query": "WITH CompanyMaintenance AS (\n    SELECT \n        oc.CompanyID,\n        oc.Name AS CompanyName,\n        AVG(m.Cost) AS AvgMaintenanceCost,\n        SUM(m.Cost) AS TotalMaintenanceCost\n    FROM OwnerCompany oc\n    JOIN PowerPlant p ON oc.CompanyID = p.OwnerCompanyID\n    JOIN Maintenance m ON p.PlantID = m.PlantID\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY oc.CompanyID, oc.Name\n),\nIndustryAverage AS (\n    SELECT AVG(AvgMaintenanceCost) AS IndustryAvgCost\n    FROM CompanyMaintenance\n),\nCompanyIncidents AS (\n    SELECT \n        oc.CompanyID,\n        COUNT(CASE WHEN i.Severity IN ('Высокая', 'Критическая') THEN 1 END) AS CriticalIncidentsCount\n    FROM OwnerCompany oc\n    JOIN PowerPlant p ON oc.CompanyID = p.OwnerCompanyID\n    JOIN Incident i ON p.PlantID = i.PlantID\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY oc.CompanyID\n)\nSELECT \n    cm.CompanyName,\n    ROUND(cm.AvgMaintenanceCost, 2) AS AvgMaintenanceCost,\n    ROUND(cm.TotalMaintenanceCost, 2) AS TotalMaintenanceCost,\n    ci.CriticalIncidentsCount,\n    ROUND((cm.AvgMaintenanceCost - ia.IndustryAvgCost) / ia.IndustryAvgCost * 100, 2) AS CostDeviationPercent\nFROM CompanyMaintenance cm\nCROSS JOIN IndustryAverage ia\nJOIN CompanyIncidents ci ON cm.CompanyID = ci.CompanyID\nWHERE cm.AvgMaintenanceCost > ia.IndustryAvgCost\nORDER BY CostDeviationPercent DESC\nLIMIT 5;",
            "gpt-4o_response": "WITH AverageIndustryMaintenanceCost AS (\n    SELECT AVG(m.Cost) AS AvgIndustryCost\n    FROM Maintenance m\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n),\nCompanyMaintenance AS (\n    SELECT \n        pp.OwnerCompanyID,\n        oc.Name AS CompanyName,\n        AVG(m.Cost) AS AvgCompanyMaintenanceCost,\n        SUM(m.Cost) AS TotalMaintenanceCost\n    FROM PowerPlant pp\n    JOIN Maintenance m ON pp.PlantID = m.PlantID\n    JOIN OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY pp.OwnerCompanyID, oc.Name\n),\nHighSeverityIncidents AS (\n    SELECT \n        pp.OwnerCompanyID,\n        COUNT(CASE WHEN i.Severity IN ('Высокая', 'Критическая') THEN 1 END) AS HighSeverityIncidentCount\n    FROM PowerPlant pp\n    JOIN Incident i ON pp.PlantID = i.PlantID\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY pp.OwnerCompanyID\n)\nSELECT \n    cm.CompanyName,\n    cm.AvgCompanyMaintenanceCost,\n    hsi.HighSeverityIncidentCount,\n    cm.TotalMaintenanceCost\nFROM CompanyMaintenance cm\nJOIN AverageIndustryMaintenanceCost aimc ON cm.AvgCompanyMaintenanceCost > aimc.AvgIndustryCost\nLEFT JOIN HighSeverityIncidents hsi ON cm.OwnerCompanyID = hsi.OwnerCompanyID\nORDER BY cm.AvgCompanyMaintenanceCost DESC\nLIMIT 5;",
            "gpt-4o_response_ru": "WITH AverageIndustryMaintenanceCost AS (\n    SELECT AVG(m.Cost) AS AvgIndustryCost\n    FROM Maintenance m\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n),\nCompanyMaintenance AS (\n    SELECT \n        pp.OwnerCompanyID,\n        AVG(m.Cost) AS AvgCompanyCost,\n        SUM(m.Cost) AS TotalMaintenanceCost\n    FROM PowerPlant pp\n    JOIN Maintenance m ON pp.PlantID = m.PlantID\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY pp.OwnerCompanyID\n),\nHighCriticalIncidents AS (\n    SELECT \n        pp.OwnerCompanyID,\n        COUNT(CASE WHEN i.Severity IN ('Высокая', 'Критическая') THEN 1 END) AS HighCriticalIncidentCount\n    FROM PowerPlant pp\n    JOIN Incident i ON pp.PlantID = i.PlantID\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY pp.OwnerCompanyID\n)\nSELECT \n    oc.Name AS CompanyName,\n    cm.AvgCompanyCost,\n    cm.TotalMaintenanceCost,\n    hci.HighCriticalIncidentCount\nFROM CompanyMaintenance cm\nJOIN AverageIndustryMaintenanceCost aic ON cm.AvgCompanyCost > aic.AvgIndustryCost\nJOIN OwnerCompany oc ON cm.OwnerCompanyID = oc.CompanyID\nLEFT JOIN HighCriticalIncidents hci ON cm.OwnerCompanyID = hci.OwnerCompanyID\nORDER BY cm.AvgCompanyCost DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response": "WITH CompanyAvgMaintenanceCost AS (\n    SELECT\n        oc.CompanyID,\n        oc.Name AS CompanyName,\n        AVG(m.Cost) AS AvgMaintenanceCost\n    FROM\n        OwnerCompany oc\n    JOIN\n        PowerPlant pp ON oc.CompanyID = pp.OwnerCompanyID\n    JOIN\n        Maintenance m ON pp.PlantID = m.PlantID\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY\n        oc.CompanyID, oc.Name\n),\nIndustryAvgMaintenanceCost AS (\n    SELECT\n        AVG(m.Cost) AS IndustryAvgCost\n    FROM\n        Maintenance m\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n),\nIncidentCounts AS (\n    SELECT\n        pp.OwnerCompanyID,\n        SUM(CASE WHEN i.Severity = 'Высокая' THEN 1 ELSE 0 END) AS HighSeverityIncidents,\n        SUM(CASE WHEN i.Severity = 'Критическая' THEN 1 ELSE 0 END) AS CriticalSeverityIncidents\n    FROM\n        PowerPlant pp\n    LEFT JOIN\n        Incident i ON pp.PlantID = i.PlantID\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY\n        pp.OwnerCompanyID\n),\nTotalMaintenanceCosts AS (\n    SELECT\n        pp.OwnerCompanyID,\n        SUM(m.Cost) AS TotalMaintenanceCost\n    FROM\n        PowerPlant pp\n    JOIN\n        Maintenance m ON pp.PlantID = m.PlantID\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY\n        pp.OwnerCompanyID\n)\nSELECT\n    camc.CompanyName,\n    ic.HighSeverityIncidents,\n    ic.CriticalSeverityIncidents,\n    tmc.TotalMaintenanceCost\nFROM\n    CompanyAvgMaintenanceCost camc\nJOIN\n    IndustryAvgMaintenanceCost iac ON 1=1\nJOIN\n    IncidentCounts ic ON camc.CompanyID = ic.OwnerCompanyID\nJOIN\n    TotalMaintenanceCosts tmc ON camc.CompanyID = tmc.OwnerCompanyID\nWHERE\n    camc.AvgMaintenanceCost > iac.IndustryAvgCost\nORDER BY\n    camc.AvgMaintenanceCost DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response_ru": "WITH IndustryAvgMaintenanceCost AS (\n    SELECT AVG(Cost) AS AvgIndustryCost\n    FROM Maintenance\n    WHERE Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n),\nCompanyMaintenance AS (\n    SELECT\n        oc.CompanyID,\n        oc.Name AS CompanyName,\n        AVG(m.Cost) AS AvgCompanyCost,\n        SUM(m.Cost) AS TotalMaintenanceCost\n    FROM OwnerCompany oc\n    JOIN PowerPlant pp ON oc.CompanyID = pp.OwnerCompanyID\n    JOIN Maintenance m ON pp.PlantID = m.PlantID\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY oc.CompanyID, oc.Name\n    HAVING AVG(m.Cost) > (SELECT AvgIndustryCost FROM IndustryAvgMaintenanceCost)\n),\nIncidentCounts AS (\n    SELECT\n        pp.OwnerCompanyID AS CompanyID,\n        SUM(CASE WHEN i.Severity = 'Высокая' THEN 1 ELSE 0 END) AS HighSeverityIncidents,\n        SUM(CASE WHEN i.Severity = 'Критическая' THEN 1 ELSE 0 END) AS CriticalSeverityIncidents\n    FROM PowerPlant pp\n    JOIN Incident i ON pp.PlantID = i.PlantID\n    GROUP BY pp.OwnerCompanyID\n)\nSELECT\n    cm.CompanyName,\n    ic.HighSeverityIncidents,\n    ic.CriticalSeverityIncidents,\n    ROUND(cm.TotalMaintenanceCost, 2) AS TotalMaintenanceCost,\n    ROUND(cm.AvgCompanyCost, 2) AS AvgMaintenanceCost\nFROM CompanyMaintenance cm\nJOIN IncidentCounts ic ON cm.CompanyID = ic.CompanyID\nORDER BY cm.AvgCompanyCost DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH AverageMaintenanceCost AS (\n    SELECT \n        AVG(m.Cost) AS AvgCost\n    FROM Maintenance m\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n),\nCompanyMaintenance AS (\n    SELECT \n        oc.CompanyID,\n        oc.Name AS CompanyName,\n        AVG(m.Cost) AS AvgMaintenanceCost,\n        COUNT(CASE WHEN i.Severity = 'Высокая' OR i.Severity = 'Критическая' THEN 1 END) AS HighSeverityIncidents,\n        COUNT(i.IncidentID) AS TotalIncidents\n    FROM OwnerCompany oc\n    JOIN PowerPlant pp ON oc.CompanyID = pp.OwnerCompanyID\n    JOIN Maintenance m ON pp.PlantID = m.PlantID\n    LEFT JOIN Incident i ON pp.PlantID = i.PlantID\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY oc.CompanyID, oc.Name\n),\nTopCompanies AS (\n    SELECT \n        cm.CompanyName,\n        cm.AvgMaintenanceCost,\n        cm.HighSeverityIncidents,\n        cm.TotalIncidents\n    FROM CompanyMaintenance cm\n    JOIN AverageMaintenanceCost amc ON 1=1\n    WHERE cm.AvgMaintenanceCost > amc.AvgCost\n    ORDER BY cm.AvgMaintenanceCost DESC\n    LIMIT 5\n)\nSELECT \n    tc.CompanyName,\n    tc.HighSeverityIncidents,\n    tc.TotalIncidents,\n    tc.AvgMaintenanceCost\nFROM TopCompanies tc",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH CompanyMaintenance AS (\n    SELECT \n        oc.CompanyID,\n        oc.Name AS CompanyName,\n        AVG(m.Cost) AS AvgMaintenanceCost\n    FROM OwnerCompany oc\n    JOIN PowerPlant pp ON oc.CompanyID = pp.OwnerCompanyID\n    JOIN Maintenance m ON pp.PlantID = m.PlantID\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY oc.CompanyID, oc.Name\n),\nIndustryAvgMaintenance AS (\n    SELECT \n        AVG(AvgMaintenanceCost) AS IndustryAvgCost\n    FROM CompanyMaintenance\n),\nCompanyIncidents AS (\n    SELECT \n        oc.CompanyID,\n        oc.Name AS CompanyName,\n        COUNT(CASE WHEN i.Severity = 'Высокая' OR i.Severity = 'Критическая' THEN 1 END) AS HighCriticalIncidentsCount,\n        SUM(m.Cost) AS TotalMaintenanceCost\n    FROM OwnerCompany oc\n    JOIN PowerPlant pp ON oc.CompanyID = pp.OwnerCompanyID\n    JOIN Incident i ON pp.PlantID = i.PlantID\n    JOIN Maintenance m ON pp.PlantID = m.PlantID\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY oc.CompanyID, oc.Name\n)\nSELECT \n    cm.CompanyName,\n    ci.HighCriticalIncidentsCount,\n    ROUND(ci.TotalMaintenanceCost, 2) AS TotalMaintenanceCost\nFROM CompanyMaintenance cm\nJOIN CompanyIncidents ci ON cm.CompanyID = ci.CompanyID\nWHERE cm.AvgMaintenanceCost > (SELECT IndustryAvgCost FROM IndustryAvgMaintenance)\nORDER BY ci.HighCriticalIncidentsCount DESC, ci.TotalMaintenanceCost DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH IndustryAvgMaintenance AS (\n    SELECT AVG(m.Cost) AS AvgCost\n    FROM Maintenance m\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n),\nCompanyMaintenance AS (\n    SELECT \n        oc.CompanyID,\n        oc.Name AS CompanyName,\n        SUM(m.Cost) AS TotalMaintenanceCost,\n        COUNT(m.MaintenanceID) AS MaintenanceCount,\n        AVG(m.Cost) AS AvgMaintenanceCost\n    FROM OwnerCompany oc\n    JOIN PowerPlant pp ON oc.CompanyID = pp.OwnerCompanyID\n    JOIN Maintenance m ON pp.PlantID = m.PlantID\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY oc.CompanyID, oc.Name\n    HAVING AVG(m.Cost) > (SELECT AvgCost FROM IndustryAvgMaintenance)\n),\nCompanyIncidents AS (\n    SELECT \n        oc.CompanyID,\n        COUNT(CASE WHEN i.Severity = 'Высокая' THEN 1 END) AS HighSeverityIncidents,\n        COUNT(CASE WHEN i.Severity = 'Критическая' THEN 1 END) AS CriticalSeverityIncidents\n    FROM OwnerCompany oc\n    JOIN PowerPlant pp ON oc.CompanyID = pp.OwnerCompanyID\n    JOIN Incident i ON pp.PlantID = i.PlantID\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY oc.CompanyID\n)\nSELECT \n    cm.CompanyName,\n    cm.AvgMaintenanceCost,\n    cm.TotalMaintenanceCost,\n    COALESCE(ci.HighSeverityIncidents, 0) AS HighSeverityIncidents,\n    COALESCE(ci.CriticalSeverityIncidents, 0) AS CriticalSeverityIncidents\nFROM CompanyMaintenance cm\nLEFT JOIN CompanyIncidents ci ON cm.CompanyID = ci.CompanyID\nORDER BY cm.AvgMaintenanceCost DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "WITH IndustryAvgMaintenance AS (\n    SELECT AVG(Cost) AS AvgCost\n    FROM Maintenance\n    WHERE Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n),\nCompanyMaintenance AS (\n    SELECT \n        oc.CompanyID,\n        oc.Name AS CompanyName,\n        SUM(m.Cost) AS TotalMaintenanceCost,\n        AVG(m.Cost) AS AvgMaintenanceCost\n    FROM OwnerCompany oc\n    JOIN PowerPlant pp ON oc.CompanyID = pp.OwnerCompanyID\n    JOIN Maintenance m ON pp.PlantID = m.PlantID\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY oc.CompanyID, oc.Name\n    HAVING AVG(m.Cost) > (SELECT AvgCost FROM IndustryAvgMaintenance)\n),\nCompanyIncidents AS (\n    SELECT \n        oc.CompanyID,\n        COUNT(CASE WHEN i.Severity = 'Высокая' THEN 1 END) AS HighSeverityIncidents,\n        COUNT(CASE WHEN i.Severity = 'Критическая' THEN 1 END) AS CriticalSeverityIncidents\n    FROM OwnerCompany oc\n    JOIN PowerPlant pp ON oc.CompanyID = pp.OwnerCompanyID\n    JOIN Incident i ON pp.PlantID = i.PlantID\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY oc.CompanyID\n)\nSELECT \n    cm.CompanyName,\n    cm.TotalMaintenanceCost,\n    ci.HighSeverityIncidents,\n    ci.CriticalSeverityIncidents\nFROM CompanyMaintenance cm\nJOIN CompanyIncidents ci ON cm.CompanyID = ci.CompanyID\nORDER BY cm.TotalMaintenanceCost DESC\nLIMIT 5;",
            "gigachat_response": "WITH MaintenanceCosts AS (\n    SELECT \n        oc.CompanyID,\n        AVG(m.Cost) AS AverageMaintenanceCost\n    FROM OwnerCompany oc\n    JOIN PowerPlant pp ON oc.CompanyID = pp.OwnerCompanyID\n    JOIN Maintenance m ON pp.PlantID = m.PlantID\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY oc.CompanyID\n),\nIndustryAverage AS (\n    SELECT AVG(AverageMaintenanceCost) AS IndustryAverageCost\n    FROM MaintenanceCosts\n),\nHighCostCompanies AS (\n    SELECT mc.CompanyID\n    FROM MaintenanceCosts mc\n    CROSS JOIN IndustryAverage ia\n    WHERE mc.AverageMaintenanceCost > ia.IndustryAverageCost\n),\nIncidentCounts AS (\n    SELECT \n        oc.CompanyID,\n        COUNT(CASE WHEN i.Severity IN ('Высокая', 'Критическая') THEN 1 END) AS HighCriticalIncidentsCount\n    FROM OwnerCompany oc\n    JOIN PowerPlant pp ON oc.CompanyID = pp.OwnerCompanyID\n    JOIN Incident i ON pp.PlantID = i.PlantID\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY oc.CompanyID\n),\nTotalMaintenanceExpenses AS (\n    SELECT \n        oc.CompanyID,\n        SUM(m.Cost) AS TotalMaintenanceExpense\n    FROM OwnerCompany oc\n    JOIN PowerPlant pp ON oc.CompanyID = pp.OwnerCompanyID\n    JOIN Maintenance m ON pp.PlantID = m.PlantID\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY oc.CompanyID\n)\nSELECT \n    oc.Name AS CompanyName,\n    ic.HighCriticalIncidentsCount,\n    tme.TotalMaintenanceExpense\nFROM OwnerCompany oc\nJOIN HighCostCompanies hcc ON oc.CompanyID = hcc.CompanyID\nLEFT JOIN IncidentCounts ic ON oc.CompanyID = ic.CompanyID\nLEFT JOIN TotalMaintenanceExpenses tme ON oc.CompanyID = tme.CompanyID\nORDER BY oc.Name ASC\nLIMIT 5;",
            "gigachat_response_ru": "WITH MaintenanceStats AS (\n    SELECT \n        oc.CompanyID,\n        AVG(m.Cost) AS AvgMaintenanceCost\n    FROM OwnerCompany oc\n    JOIN PowerPlant pp ON oc.CompanyID = pp.OwnerCompanyID\n    JOIN Maintenance m ON pp.PlantID = m.PlantID\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY oc.CompanyID\n), \nIndustryAverage AS (\n    SELECT AVG(AvgMaintenanceCost) AS IndustryAvgMaintenanceCost\n    FROM MaintenanceStats\n), \nHighCostCompanies AS (\n    SELECT ms.CompanyID\n    FROM MaintenanceStats ms\n    CROSS JOIN IndustryAverage ia\n    WHERE ms.AvgMaintenanceCost > ia.IndustryAvgMaintenanceCost\n), \nIncidentSeverityCounts AS (\n    SELECT \n        oc.CompanyID,\n        COUNT(CASE WHEN i.Severity IN ('Высокая', 'Критическая') THEN 1 END) AS HighCriticalIncidentsCount\n    FROM OwnerCompany oc\n    JOIN PowerPlant pp ON oc.CompanyID = pp.OwnerCompanyID\n    JOIN Incident i ON pp.PlantID = i.PlantID\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY oc.CompanyID\n), \nTotalMaintenanceCosts AS (\n    SELECT \n        oc.CompanyID,\n        SUM(m.Cost) AS TotalMaintenanceCost\n    FROM OwnerCompany oc\n    JOIN PowerPlant pp ON oc.CompanyID = pp.OwnerCompanyID\n    JOIN Maintenance m ON pp.PlantID = m.PlantID\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY oc.CompanyID\n)\nSELECT \n    oc.Name AS CompanyName,\n    isc.HighCriticalIncidentsCount,\n    tmc.TotalMaintenanceCost\nFROM OwnerCompany oc\nJOIN HighCostCompanies hcc ON oc.CompanyID = hcc.CompanyID\nLEFT JOIN IncidentSeverityCounts isc ON oc.CompanyID = isc.CompanyID\nLEFT JOIN TotalMaintenanceCosts tmc ON oc.CompanyID = tmc.CompanyID\nORDER BY oc.Name ASC\nLIMIT 5;"
        },
        {
            "question": "Найти топ-7 потребителей с наибольшим среднемесячным потреблением энергии за последний год, у которых есть действующие контракты с поставщиками, и показать для каждого потребителя информацию о типе тарифа, стоимости контракта и количестве установленных счетчиков.",
            "sql_query": "WITH ConsumerContracts AS (\n    SELECT \n        c.ConsumerID,\n        c.Name AS ConsumerName,\n        c.Type AS ConsumerType,\n        c.AverageMonthlyConsumption,\n        COUNT(DISTINCT m.MeterID) AS MetersCount,\n        AVG(ct.PricePerUnit) AS AvgContractPrice,\n        MAX(t.Name) AS TariffName\n    FROM Consumer c\n    JOIN `Contract` ct ON c.ConsumerID = ct.ConsumerID\n    JOIN Meter m ON c.ConsumerID = m.ConsumerID\n    JOIN Tariff t ON t.ConsumerType = c.Type\n    WHERE ct.Status = 'active'\n    GROUP BY c.ConsumerID, c.Name, c.Type, c.AverageMonthlyConsumption\n)\nSELECT \n    cc.ConsumerName,\n    cc.ConsumerType,\n    ROUND(cc.AverageMonthlyConsumption, 2) AS MonthlyConsumption,\n    cc.MetersCount,\n    ROUND(cc.AvgContractPrice, 2) AS AvgPricePerUnit,\n    cc.TariffName,\n    ROUND(cc.AverageMonthlyConsumption * cc.AvgContractPrice, 2) AS EstimatedMonthlyCost\nFROM ConsumerContracts cc\nORDER BY cc.AverageMonthlyConsumption DESC\nLIMIT 7;",
            "gpt-4o_response": "WITH ActiveConsumers AS (\n    SELECT \n        c.ConsumerID,\n        c.Name AS ConsumerName,\n        c.Type AS ConsumerType,\n        c.AverageMonthlyConsumption,\n        ct.PricePerUnit AS ContractPrice,\n        t.Name AS TariffName\n    FROM Consumer c\n    JOIN `Contract` ct ON c.ConsumerID = ct.ConsumerID\n    JOIN Supplier s ON ct.SupplierID = s.SupplierID\n    JOIN Tariff t ON c.Type = t.ConsumerType\n    WHERE ct.Status = 'active'\n),\nConsumerMeters AS (\n    SELECT \n        m.ConsumerID,\n        COUNT(m.MeterID) AS MeterCount\n    FROM Meter m\n    WHERE m.Status = 'Активен'\n    GROUP BY m.ConsumerID\n)\nSELECT \n    ac.ConsumerName,\n    ac.ConsumerType,\n    ac.AverageMonthlyConsumption,\n    ac.ContractPrice,\n    ac.TariffName,\n    cm.MeterCount\nFROM ActiveConsumers ac\nJOIN ConsumerMeters cm ON ac.ConsumerID = cm.ConsumerID\nORDER BY ac.AverageMonthlyConsumption DESC\nLIMIT 7;",
            "gpt-4o_response_ru": "WITH ActiveConsumers AS (\n    SELECT \n        c.ConsumerID,\n        c.Name AS ConsumerName,\n        c.Type AS ConsumerType,\n        c.AverageMonthlyConsumption,\n        ct.PricePerUnit,\n        ct.Status\n    FROM Consumer c\n    JOIN `Contract` ct ON c.ConsumerID = ct.ConsumerID\n    WHERE ct.Status = 'active'\n),\nConsumerMeters AS (\n    SELECT \n        m.ConsumerID,\n        COUNT(m.MeterID) AS MeterCount\n    FROM Meter m\n    GROUP BY m.ConsumerID\n),\nConsumerTariffs AS (\n    SELECT \n        c.ConsumerID,\n        t.Name AS TariffName\n    FROM Consumer c\n    JOIN Tariff t ON c.Type = t.ConsumerType\n    WHERE t.Status = 'Активный'\n)\nSELECT \n    ac.ConsumerName,\n    ac.ConsumerType,\n    ac.AverageMonthlyConsumption,\n    ct.TariffName,\n    ac.PricePerUnit,\n    cm.MeterCount\nFROM ActiveConsumers ac\nJOIN ConsumerMeters cm ON ac.ConsumerID = cm.ConsumerID\nJOIN ConsumerTariffs ct ON ac.ConsumerID = ct.ConsumerID\nORDER BY ac.AverageMonthlyConsumption DESC\nLIMIT 7;",
            "google/gemini-2.0-flash-001_response": "WITH ConsumerConsumption AS (\n    SELECT\n        c.ConsumerID,\n        c.Name AS ConsumerName,\n        c.AverageMonthlyConsumption,\n        AVG(m.LastReading) AS AvgLastReading,\n        COUNT(DISTINCT m.MeterID) AS MeterCount\n    FROM Consumer c\n    LEFT JOIN Meter m ON c.ConsumerID = m.ConsumerID\n    GROUP BY c.ConsumerID, c.Name, c.AverageMonthlyConsumption\n),\nActiveContracts AS (\n    SELECT\n        ct.ConsumerID,\n        t.Name AS TariffName,\n        ct.PricePerUnit,\n        ct.Volume\n    FROM `Contract` ct\n    JOIN Tariff t ON 1=1\n    WHERE ct.Status = 'active'\n),\nCombinedData AS (\n    SELECT\n        cc.ConsumerID,\n        cc.ConsumerName,\n        cc.AverageMonthlyConsumption,\n        cc.AvgLastReading,\n        cc.MeterCount,\n        ac.TariffName,\n        ac.PricePerUnit,\n        ac.Volume\n    FROM ConsumerConsumption cc\n    JOIN ActiveContracts ac ON cc.ConsumerID = ac.ConsumerID\n)\nSELECT\n    cd.ConsumerName,\n    cd.AverageMonthlyConsumption,\n    cd.TariffName,\n    cd.PricePerUnit,\n    cd.Volume,\n    cd.MeterCount\nFROM CombinedData cd\nORDER BY cd.AverageMonthlyConsumption DESC\nLIMIT 7;",
            "google/gemini-2.0-flash-001_response_ru": "WITH ConsumerConsumption AS (\n    SELECT\n        c.ConsumerID,\n        c.Name AS ConsumerName,\n        c.AverageMonthlyConsumption,\n        SUM(CASE WHEN ct.Status = 'active' THEN 1 ELSE 0 END) AS ActiveContracts,\n        COUNT(DISTINCT m.MeterID) AS MeterCount\n    FROM Consumer c\n    LEFT JOIN `Contract` ct ON c.ConsumerID = ct.ConsumerID\n    LEFT JOIN Meter m ON c.ConsumerID = m.ConsumerID\n    GROUP BY c.ConsumerID, c.Name, c.AverageMonthlyConsumption\n    HAVING SUM(CASE WHEN ct.Status = 'active' THEN 1 ELSE 0 END) > 0\n),\nRankedConsumers AS (\n    SELECT\n        ConsumerID,\n        ConsumerName,\n        AverageMonthlyConsumption,\n        ActiveContracts,\n        MeterCount,\n        RANK() OVER (ORDER BY AverageMonthlyConsumption DESC) AS ConsumptionRank\n    FROM ConsumerConsumption\n    WHERE ActiveContracts > 0\n)\nSELECT\n    rc.ConsumerName,\n    rc.AverageMonthlyConsumption,\n    t.Name AS TariffName,\n    t.PricePerUnit AS TariffPricePerUnit,\n    ct.PricePerUnit AS ContractPricePerUnit,\n    rc.MeterCount\nFROM RankedConsumers rc\nJOIN `Contract` ct ON rc.ConsumerID = ct.ConsumerID\nJOIN Tariff t ON t.ConsumerType = rc.ConsumerName\nWHERE rc.ConsumptionRank <= 7\nORDER BY rc.AverageMonthlyConsumption DESC\nLIMIT 7;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH ActiveContracts AS (\n    SELECT \n        c.ConsumerID,\n        c.SupplierID,\n        c.StartDate,\n        c.EndDate,\n        c.PricePerUnit,\n        c.Volume,\n        c.Status\n    FROM `Contract` c\n    WHERE c.Status = 'active'\n),\nConsumerEnergyConsumption AS (\n    SELECT \n        c.ConsumerID,\n        c.Name AS ConsumerName,\n        c.Type AS ConsumerType,\n        c.AverageMonthlyConsumption,\n        ac.PricePerUnit,\n        ac.Volume,\n        ac.Status\n    FROM Consumer c\n    JOIN ActiveContracts ac ON c.ConsumerID = ac.ConsumerID\n),\nConsumerTariff AS (\n    SELECT \n        c.ConsumerID,\n        t.Name AS TariffName,\n        t.Description,\n        t.PricePerUnit AS TariffPricePerUnit,\n        t.ConsumerType AS TariffConsumerType\n    FROM Consumer c\n    JOIN Tariff t ON c.Type = t.ConsumerType\n),\nConsumerMeter AS (\n    SELECT \n        c.ConsumerID,\n        COUNT(m.MeterID) AS MeterCount\n    FROM Consumer c\n    JOIN Meter m ON c.ConsumerID = m.ConsumerID\n    GROUP BY c.ConsumerID\n)\nSELECT \n    cec.ConsumerName,\n    cec.ConsumerType,\n    cec.AverageMonthlyConsumption,\n    ct.TariffName,\n    cec.PricePerUnit,\n    cec.Volume,\n    cm.MeterCount\nFROM ConsumerEnergyConsumption cec\nJOIN ConsumerTariff ct ON cec.ConsumerID = ct.ConsumerID\nJOIN ConsumerMeter cm ON cec.ConsumerID = cm.ConsumerID\nORDER BY cec.AverageMonthlyConsumption DESC\nLIMIT 7;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH ConsumerContracts AS (\n    SELECT \n        c.ConsumerID,\n        c.Name AS ConsumerName,\n        c.Type AS ConsumerType,\n        c.AverageMonthlyConsumption,\n        ct.ContractID,\n        ct.StartDate,\n        ct.EndDate,\n        ct.PricePerUnit,\n        ct.Volume,\n        ct.Status,\n        t.Name AS TariffName,\n        t.PricePerUnit AS TariffPrice,\n        m.MeterID,\n        m.Type AS MeterType\n    FROM Consumer c\n    JOIN `Contract` ct ON c.ConsumerID = ct.ConsumerID\n    JOIN Tariff t ON ct.ContractID = t.TariffID\n    JOIN Meter m ON c.ConsumerID = m.ConsumerID\n    WHERE ct.Status = 'active'\n),\nTopConsumers AS (\n    SELECT \n        cc.ConsumerID,\n        cc.ConsumerName,\n        cc.ConsumerType,\n        AVG(cc.AverageMonthlyConsumption) AS AvgMonthlyConsumption,\n        COUNT(DISTINCT cc.ContractID) AS ActiveContractsCount,\n        SUM(cc.Volume) AS TotalContractVolume,\n        COUNT(DISTINCT cc.MeterID) AS InstalledMetersCount,\n        AVG(cc.TariffPrice) AS AvgTariffPrice\n    FROM ConsumerContracts cc\n    GROUP BY cc.ConsumerID, cc.ConsumerName, cc.ConsumerType\n    ORDER BY AvgMonthlyConsumption DESC\n    LIMIT 7\n)\nSELECT \n    tc.ConsumerName,\n    tc.ConsumerType,\n    ROUND(tc.AvgMonthlyConsumption, 2) AS AvgMonthlyConsumption,\n    tc.ActiveContractsCount,\n    ROUND(tc.TotalContractVolume, 2) AS TotalContractVolume,\n    tc.InstalledMetersCount,\n    ROUND(tc.AvgTariffPrice, 2) AS AvgTariffPrice\nFROM TopConsumers tc;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH ActiveContractConsumers AS (\n    SELECT \n        c.ConsumerID,\n        c.Name AS ConsumerName,\n        c.Type AS ConsumerType,\n        c.AverageMonthlyConsumption,\n        ct.ContractID,\n        ct.PricePerUnit,\n        ct.Volume,\n        (ct.PricePerUnit * ct.Volume) AS ContractCost,\n        s.SupplierID,\n        s.Name AS SupplierName,\n        t.TariffID,\n        t.Name AS TariffName,\n        t.PricePerUnit AS TariffPrice,\n        t.ConsumerType AS TariffConsumerType\n    FROM Consumer c\n    JOIN `Contract` ct ON c.ConsumerID = ct.ConsumerID\n    JOIN Supplier s ON ct.SupplierID = s.SupplierID\n    JOIN Tariff t ON c.Type = t.ConsumerType\n    WHERE ct.Status = 'active'\n),\nMeterCounts AS (\n    SELECT \n        c.ConsumerID,\n        COUNT(m.MeterID) AS MeterCount\n    FROM Consumer c\n    JOIN Meter m ON c.ConsumerID = m.ConsumerID\n    GROUP BY c.ConsumerID\n)\nSELECT \n    acc.ConsumerName,\n    acc.ConsumerType,\n    acc.AverageMonthlyConsumption,\n    acc.TariffName,\n    acc.TariffPrice,\n    acc.ContractCost,\n    mc.MeterCount\nFROM ActiveContractConsumers acc\nJOIN MeterCounts mc ON acc.ConsumerID = mc.ConsumerID\nORDER BY acc.AverageMonthlyConsumption DESC\nLIMIT 7;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    c.ConsumerID,\n    c.Name AS ConsumerName,\n    c.Type AS ConsumerType,\n    c.AverageMonthlyConsumption,\n    t.Name AS TariffName,\n    t.PricePerUnit AS TariffPrice,\n    ct.PricePerUnit AS ContractPrice,\n    COUNT(m.MeterID) AS MetersCount\nFROM Consumer c\nJOIN `Contract` ct ON c.ConsumerID = ct.ConsumerID\nJOIN Tariff t ON c.Type = t.ConsumerType\nJOIN Meter m ON c.ConsumerID = m.ConsumerID\nWHERE ct.Status = 'active'\nGROUP BY c.ConsumerID, c.Name, c.Type, c.AverageMonthlyConsumption, t.Name, t.PricePerUnit, ct.PricePerUnit\nORDER BY c.AverageMonthlyConsumption DESC\nLIMIT 7;",
            "gigachat_response": "WITH TopConsumers AS (\n    SELECT \n        c.ConsumerID,\n        c.Name AS ConsumerName,\n        AVG(c.AverageMonthlyConsumption) AS AvgMonthlyConsumption\n    FROM Consumer c\n    JOIN `Contract` co ON c.ConsumerID = co.ConsumerID\n    WHERE co.EndDate >= NOW() OR co.EndDate IS NULL -- active contracts\n      AND co.StartDate <= NOW()\n    GROUP BY c.ConsumerID, c.Name\n    ORDER BY AvgMonthlyConsumption DESC\n    LIMIT 7\n),\nTariffsInfo AS (\n    SELECT \n        c.ConsumerID,\n        t.TariffID,\n        t.Name AS TariffName,\n        t.PricePerUnit AS TariffPrice\n    FROM Consumer c\n    LEFT JOIN `Contract` co ON c.ConsumerID = co.ConsumerID\n    LEFT JOIN Tariff t ON co.ContractID = t.TariffID\n    WHERE co.EndDate >= NOW() OR co.EndDate IS NULL -- active contracts\n      AND co.StartDate <= NOW()\n),\nMetersInfo AS (\n    SELECT \n        c.ConsumerID,\n        COUNT(*) AS MetersCount\n    FROM Consumer c\n    LEFT JOIN Meter m ON c.ConsumerID = m.ConsumerID\n    GROUP BY c.ConsumerID\n)\nSELECT \n    tc.ConsumerName,\n    ti.TariffName,\n    ti.TariffPrice AS ContractCost,\n    mi.MetersCount\nFROM TopConsumers tc\nLEFT JOIN TariffsInfo ti ON tc.ConsumerID = ti.ConsumerID\nLEFT JOIN MetersInfo mi ON tc.ConsumerID = mi.ConsumerID\nORDER BY tc.AvgMonthlyConsumption DESC;",
            "gigachat_response_ru": "SELECT \n    c.ConsumerID,\n    c.Name AS ConsumerName,\n    t.Name AS TariffName,\n    ct.PricePerUnit AS ContractPrice,\n    COUNT(DISTINCT me.MeterID) AS MeterCount,\n    ROUND(AVG(c.AverageMonthlyConsumption), 2) AS AvgMonthlyConsumption\nFROM Consumer c\nJOIN `Contract` ct ON c.ConsumerID = ct.ConsumerID\nJOIN Tariff t ON ct.TariffID = t.TariffID\nLEFT JOIN Meter me ON c.ConsumerID = me.ConsumerID\nWHERE ct.EndDate >= NOW() - INTERVAL 1 YEAR\nAND ct.Status = 'active'\nGROUP BY c.ConsumerID, c.Name, t.Name, ct.PricePerUnit\nORDER BY AvgMonthlyConsumption DESC\nLIMIT 7;"
        },
        {
            "question": "Найти топ-6 поставщиков энергоресурсов с наивысшим рейтингом за последний год, которые работают с возобновляемыми источниками энергии, и показать для каждого поставщика информацию о среднем объеме поставок, стоимости единицы ресурса и количестве действующих контрактов.",
            "sql_query": "WITH RenewableSuppliers AS (\n    SELECT \n        s.SupplierID,\n        s.Name AS SupplierName,\n        s.Rating,\n        es.Name AS EnergySourceName,\n        es.Renewable,\n        AVG(s.AnnualSupplyVolume) AS AvgAnnualSupply,\n        AVG(es.CostPerUnit) AS AvgCostPerUnit\n    FROM Supplier s\n    JOIN EnergySource es ON s.SourceID = es.SourceID\n    WHERE es.Renewable = TRUE\n    GROUP BY s.SupplierID, s.Name, s.Rating, es.Name, es.Renewable\n),\nActiveContracts AS (\n    SELECT \n        SupplierID,\n        COUNT(*) AS ActiveContractsCount\n    FROM `Contract`\n    WHERE Status = 'active'\n    GROUP BY SupplierID\n)\nSELECT \n    rs.SupplierName,\n    rs.EnergySourceName,\n    rs.Rating,\n    ROUND(rs.AvgAnnualSupply, 2) AS AvgAnnualSupply,\n    ROUND(rs.AvgCostPerUnit, 2) AS AvgCostPerUnit,\n    ac.ActiveContractsCount,\n    ROUND(rs.AvgAnnualSupply * rs.AvgCostPerUnit, 2) AS EstimatedAnnualRevenue\nFROM RenewableSuppliers rs\nJOIN ActiveContracts ac ON rs.SupplierID = ac.SupplierID\nORDER BY rs.Rating DESC, EstimatedAnnualRevenue DESC\nLIMIT 6;",
            "gpt-4o_response": "WITH RenewableSuppliers AS (\n    SELECT \n        s.SupplierID,\n        s.Name AS SupplierName,\n        s.Rating,\n        AVG(s.AnnualSupplyVolume) AS AvgAnnualSupply,\n        es.CostPerUnit,\n        COUNT(DISTINCT c.ContractID) AS ActiveContractsCount\n    FROM Supplier s\n    JOIN EnergySource es ON s.SourceID = es.SourceID\n    JOIN `Contract` c ON s.SupplierID = c.SupplierID\n    WHERE es.Renewable = TRUE\n    AND c.Status = 'active'\n    AND c.StartDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY s.SupplierID, s.Name, s.Rating, es.CostPerUnit\n)\nSELECT \n    rs.SupplierName,\n    ROUND(rs.AvgAnnualSupply, 2) AS AvgAnnualSupply,\n    ROUND(rs.CostPerUnit, 2) AS CostPerUnit,\n    rs.ActiveContractsCount,\n    rs.Rating\nFROM RenewableSuppliers rs\nORDER BY rs.Rating DESC\nLIMIT 6;",
            "gpt-4o_response_ru": "WITH RenewableSuppliers AS (\n    SELECT \n        s.SupplierID,\n        s.Name AS SupplierName,\n        AVG(s.AnnualSupplyVolume) AS AvgSupplyVolume,\n        es.CostPerUnit,\n        COUNT(DISTINCT c.ContractID) AS ActiveContractsCount\n    FROM Supplier s\n    JOIN EnergySource es ON s.SourceID = es.SourceID\n    JOIN `Contract` c ON s.SupplierID = c.SupplierID\n    WHERE es.Renewable = TRUE\n      AND c.Status = 'active'\n      AND c.StartDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY s.SupplierID, s.Name, es.CostPerUnit\n),\nTopRatedSuppliers AS (\n    SELECT \n        SupplierID,\n        SupplierName,\n        AvgSupplyVolume,\n        CostPerUnit,\n        ActiveContractsCount\n    FROM RenewableSuppliers\n    ORDER BY ActiveContractsCount DESC, AvgSupplyVolume DESC\n    LIMIT 6\n)\nSELECT \n    trs.SupplierName,\n    ROUND(trs.AvgSupplyVolume, 2) AS AvgSupplyVolume,\n    ROUND(trs.CostPerUnit, 2) AS CostPerUnit,\n    trs.ActiveContractsCount\nFROM TopRatedSuppliers trs\nORDER BY trs.ActiveContractsCount DESC, trs.AvgSupplyVolume DESC;",
            "google/gemini-2.0-flash-001_response": "WITH RenewableSuppliers AS (\n    SELECT\n        s.SupplierID,\n        s.Name AS SupplierName,\n        s.Rating,\n        AVG(s.AnnualSupplyVolume) AS AvgSupplyVolume,\n        AVG(s.Rating) AS AverageRating,\n        AVG(es.CostPerUnit) AS AverageCostPerUnit\n    FROM Supplier s\n    JOIN EnergySource es ON s.SourceID = es.SourceID\n    WHERE es.Renewable = TRUE\n    GROUP BY s.SupplierID, s.Name, s.Rating\n),\nActiveContracts AS (\n    SELECT\n        c.SupplierID,\n        COUNT(c.ContractID) AS ActiveContractsCount\n    FROM `Contract` c\n    WHERE c.Status = 'active'\n    GROUP BY c.SupplierID\n)\nSELECT\n    rs.SupplierName,\n    ROUND(rs.AvgSupplyVolume, 2) AS AverageSupplyVolume,\n    ROUND(rs.AverageCostPerUnit, 2) AS AverageCostPerUnit,\n    COALESCE(ac.ActiveContractsCount, 0) AS ActiveContractsCount,\n    rs.AverageRating\nFROM RenewableSuppliers rs\nLEFT JOIN ActiveContracts ac ON rs.SupplierID = ac.SupplierID\nORDER BY rs.AverageRating DESC\nLIMIT 6;",
            "google/gemini-2.0-flash-001_response_ru": "WITH RenewableSuppliers AS (\n    SELECT\n        s.SupplierID,\n        s.Name AS SupplierName,\n        s.Rating,\n        es.Name AS EnergySourceName,\n        es.Type AS EnergySourceType,\n        es.Renewable\n    FROM Supplier s\n    JOIN EnergySource es ON s.SourceID = es.SourceID\n    WHERE es.Renewable = TRUE\n),\nSupplierContracts AS (\n    SELECT\n        c.SupplierID,\n        AVG(c.Volume) AS AvgSupplyVolume,\n        AVG(c.PricePerUnit) AS AvgPricePerUnit,\n        COUNT(c.ContractID) AS ActiveContractsCount\n    FROM `Contract` c\n    WHERE c.Status = 'active' AND c.StartDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY c.SupplierID\n)\nSELECT\n    rs.SupplierName,\n    rs.Rating,\n    sc.AvgSupplyVolume,\n    sc.AvgPricePerUnit,\n    sc.ActiveContractsCount,\n    rs.EnergySourceName,\n    rs.EnergySourceType\nFROM RenewableSuppliers rs\nJOIN SupplierContracts sc ON rs.SupplierID = sc.SupplierID\nORDER BY rs.Rating DESC\nLIMIT 6;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH RenewableSuppliers AS (\n    SELECT \n        s.SupplierID,\n        s.Name AS SupplierName,\n        s.Rating,\n        es.Name AS EnergySourceName,\n        es.Type AS EnergySourceType,\n        es.Renewable,\n        AVG(s.AnnualSupplyVolume) AS AvgAnnualSupply,\n        AVG(es.CostPerUnit) AS AvgCostPerUnit,\n        COUNT(DISTINCT c.ContractID) AS ActiveContractsCount\n    FROM Supplier s\n    JOIN EnergySource es ON s.SourceID = es.SourceID\n    JOIN `Contract` c ON s.SupplierID = c.SupplierID\n    WHERE es.Renewable = TRUE AND c.Status = 'active'\n    GROUP BY s.SupplierID, s.Name, s.Rating, es.Name, es.Type, es.Renewable\n),\nTopSuppliers AS (\n    SELECT \n        rs.SupplierName,\n        rs.EnergySourceName,\n        rs.EnergySourceType,\n        ROUND(rs.AvgAnnualSupply, 2) AS AvgAnnualSupply,\n        ROUND(rs.AvgCostPerUnit, 2) AS AvgCostPerUnit,\n        rs.ActiveContractsCount,\n        rs.Rating\n    FROM RenewableSuppliers rs\n    ORDER BY rs.Rating DESC, rs.AvgAnnualSupply DESC\n    LIMIT 6\n)\nSELECT \n    ts.SupplierName,\n    ts.EnergySourceName,\n    ts.EnergySourceType,\n    ts.AvgAnnualSupply,\n    ts.AvgCostPerUnit,\n    ts.ActiveContractsCount,\n    ts.Rating\nFROM TopSuppliers ts;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH TopSuppliers AS (\n    SELECT \n        s.SupplierID,\n        s.Name AS SupplierName,\n        es.Name AS EnergySourceName,\n        es.Type AS EnergySourceType,\n        AVG(s.AnnualSupplyVolume) AS AvgAnnualSupply,\n        AVG(es.CostPerUnit) AS AvgCostPerUnit,\n        COUNT(DISTINCT c.ContractID) AS ActiveContractsCount,\n        s.Rating\n    FROM Supplier s\n    JOIN EnergySource es ON s.SourceID = es.SourceID\n    JOIN `Contract` c ON s.SupplierID = c.SupplierID\n    WHERE es.Renewable = TRUE AND c.Status = 'active' AND c.StartDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY s.SupplierID, s.Name, es.Name, es.Type, s.Rating\n)\nSELECT \n    SupplierName,\n    EnergySourceName,\n    EnergySourceType,\n    ROUND(AvgAnnualSupply, 2) AS AvgAnnualSupply,\n    ROUND(AvgCostPerUnit, 2) AS AvgCostPerUnit,\n    ActiveContractsCount,\n    Rating\nFROM TopSuppliers\nORDER BY Rating DESC, AvgAnnualSupply DESC\nLIMIT 6;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH RenewableSuppliers AS (\n    SELECT \n        s.SupplierID,\n        s.Name AS SupplierName,\n        s.Rating,\n        es.Name AS EnergySourceName,\n        es.Renewable,\n        s.AnnualSupplyVolume,\n        es.CostPerUnit\n    FROM Supplier s\n    JOIN EnergySource es ON s.SourceID = es.SourceID\n    WHERE es.Renewable = TRUE\n),\nSupplierContractsCount AS (\n    SELECT \n        s.SupplierID,\n        COUNT(c.ContractID) AS ActiveContractsCount\n    FROM Supplier s\n    JOIN `Contract` c ON s.SupplierID = c.SupplierID\n    WHERE c.Status = 'active'\n    AND c.StartDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY s.SupplierID\n)\nSELECT \n    rs.SupplierName,\n    rs.EnergySourceName,\n    rs.Rating,\n    ROUND(rs.AnnualSupplyVolume, 2) AS AvgAnnualSupplyVolume,\n    ROUND(rs.CostPerUnit, 2) AS CostPerUnit,\n    scc.ActiveContractsCount\nFROM RenewableSuppliers rs\nJOIN SupplierContractsCount scc ON rs.SupplierID = scc.SupplierID\nORDER BY rs.Rating DESC, rs.AnnualSupplyVolume DESC\nLIMIT 6;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "WITH RenewableSuppliers AS (\n    SELECT \n        s.SupplierID,\n        s.Name AS SupplierName,\n        s.Rating,\n        es.Name AS EnergySourceName,\n        es.Type AS EnergySourceType,\n        es.Renewable,\n        s.AnnualSupplyVolume,\n        es.CostPerUnit\n    FROM Supplier s\n    JOIN EnergySource es ON s.SourceID = es.SourceID\n    WHERE es.Renewable = TRUE\n),\nSupplierContractsCount AS (\n    SELECT \n        s.SupplierID,\n        COUNT(c.ContractID) AS ActiveContractsCount\n    FROM Supplier s\n    JOIN `Contract` c ON s.SupplierID = c.SupplierID\n    WHERE c.Status = 'active'\n    AND c.StartDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY s.SupplierID\n)\nSELECT \n    rs.SupplierName,\n    rs.Rating,\n    ROUND(rs.AnnualSupplyVolume, 2) AS AvgAnnualSupplyVolume,\n    ROUND(rs.CostPerUnit, 2) AS CostPerUnit,\n    scc.ActiveContractsCount\nFROM RenewableSuppliers rs\nJOIN SupplierContractsCount scc ON rs.SupplierID = scc.SupplierID\nORDER BY rs.Rating DESC, rs.AnnualSupplyVolume DESC\nLIMIT 6;",
            "gigachat_response": "SELECT \n    s.Name AS SupplierName,\n    AVG(s.AnnualSupplyVolume) AS AvgAnnualSupplyVolume,\n    es.CostPerUnit AS UnitResourceCost,\n    COUNT(DISTINCT c.ContractID) AS ActiveContractsCount\nFROM Supplier s\nJOIN EnergySource es ON s.SourceID = es.SourceID\nJOIN `Contract` c ON s.SupplierID = c.SupplierID\nWHERE es.Renewable = TRUE\nAND c.EndDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\nGROUP BY s.SupplierID, s.Name, es.CostPerUnit\nORDER BY s.Rating DESC\nLIMIT 6;",
            "gigachat_response_ru": "SELECT \n    s.Name AS SupplierName,\n    AVG(s.AnnualSupplyVolume) AS AvgAnnualSupplyVolume,\n    es.CostPerUnit AS UnitResourceCost,\n    COUNT(DISTINCT c.ContractID) AS ActiveContractsCount\nFROM Supplier s\nJOIN EnergySource es ON s.SourceID = es.SourceID\nJOIN `Contract` c ON s.SupplierID = c.SupplierID\nWHERE es.Renewable = TRUE\nAND c.EndDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\nGROUP BY s.SupplierID, s.Name, es.CostPerUnit\nORDER BY s.Rating DESC\nLIMIT 6;"
        },
        {
            "question": "Найти топ-5 электростанций с наибольшим количеством инцидентов и нарушений нормативов выбросов за последний год, и показать для каждой станции информацию о последнем аудите, стоимости последнего обслуживания и статусе соответствия экологическим нормам.",
            "sql_query": "WITH PlantIncidents AS (\n    SELECT \n        p.PlantID,\n        p.Name AS PlantName,\n        COUNT(i.IncidentID) AS IncidentsCount,\n        MAX(i.Date) AS LastIncidentDate\n    FROM PowerPlant p\n    JOIN Incident i ON p.PlantID = i.PlantID\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY p.PlantID, p.Name\n),\nPlantEmissions AS (\n    SELECT \n        p.PlantID,\n        COUNT(CASE WHEN e.ComplianceStatus = 'Не соответствует' THEN 1 END) AS NonComplianceCount\n    FROM PowerPlant p\n    JOIN Emission e ON p.PlantID = e.PlantID\n    WHERE e.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY p.PlantID\n),\nPlantAudits AS (\n    SELECT \n        p.PlantID,\n        a.Auditor,\n        a.ComplianceStatus,\n        a.FollowUpDate,\n        ROW_NUMBER() OVER (PARTITION BY p.PlantID ORDER BY a.Date DESC) AS rn\n    FROM PowerPlant p\n    JOIN `Audit` a ON p.PlantID = a.PlantID\n),\nPlantMaintenance AS (\n    SELECT \n        p.PlantID,\n        m.Cost AS LastMaintenanceCost,\n        m.Date AS LastMaintenanceDate,\n        ROW_NUMBER() OVER (PARTITION BY p.PlantID ORDER BY m.Date DESC) AS rn\n    FROM PowerPlant p\n    JOIN Maintenance m ON p.PlantID = m.PlantID\n)\nSELECT \n    pi.PlantName,\n    pi.IncidentsCount,\n    pe.NonComplianceCount,\n    pa.Auditor AS LastAuditor,\n    pa.ComplianceStatus AS AuditStatus,\n    pa.FollowUpDate,\n    ROUND(pm.LastMaintenanceCost, 2) AS LastMaintenanceCost,\n    pm.LastMaintenanceDate\nFROM PlantIncidents pi\nJOIN PlantEmissions pe ON pi.PlantID = pe.PlantID\nJOIN PlantAudits pa ON pi.PlantID = pa.PlantID AND pa.rn = 1\nJOIN PlantMaintenance pm ON pi.PlantID = pm.PlantID AND pm.rn = 1\nORDER BY (pi.IncidentsCount + pe.NonComplianceCount) DESC\nLIMIT 5;",
            "gpt-4o_response": "WITH IncidentCounts AS (\n    SELECT \n        p.PlantID,\n        p.Name AS PlantName,\n        COUNT(i.IncidentID) AS IncidentCount\n    FROM PowerPlant p\n    JOIN Incident i ON p.PlantID = i.PlantID\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY p.PlantID, p.Name\n),\nEmissionViolations AS (\n    SELECT \n        p.PlantID,\n        COUNT(e.EmissionID) AS ViolationCount\n    FROM PowerPlant p\n    JOIN Emission e ON p.PlantID = e.PlantID\n    WHERE e.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) AND e.ComplianceStatus != 'Соответствует'\n    GROUP BY p.PlantID\n),\nTopPlants AS (\n    SELECT \n        ic.PlantID,\n        ic.PlantName,\n        (ic.IncidentCount + COALESCE(ev.ViolationCount, 0)) AS TotalIssues\n    FROM IncidentCounts ic\n    LEFT JOIN EmissionViolations ev ON ic.PlantID = ev.PlantID\n    ORDER BY TotalIssues DESC\n    LIMIT 5\n),\nLatestAudit AS (\n    SELECT \n        a.PlantID,\n        a.Date AS AuditDate,\n        a.Auditor,\n        a.ComplianceStatus AS AuditComplianceStatus\n    FROM `Audit` a\n    JOIN (\n        SELECT \n            PlantID,\n            MAX(Date) AS LatestAuditDate\n        FROM `Audit`\n        GROUP BY PlantID\n    ) la ON a.PlantID = la.PlantID AND a.Date = la.LatestAuditDate\n),\nLatestMaintenance AS (\n    SELECT \n        m.PlantID,\n        m.Cost AS LastMaintenanceCost\n    FROM Maintenance m\n    JOIN (\n        SELECT \n            PlantID,\n            MAX(Date) AS LatestMaintenanceDate\n        FROM Maintenance\n        GROUP BY PlantID\n    ) lm ON m.PlantID = lm.PlantID AND m.Date = lm.LatestMaintenanceDate\n)\nSELECT \n    tp.PlantName,\n    la.AuditDate,\n    la.Auditor,\n    la.AuditComplianceStatus,\n    lm.LastMaintenanceCost,\n    COALESCE(ev.ViolationCount, 0) AS EmissionViolations\nFROM TopPlants tp\nLEFT JOIN LatestAudit la ON tp.PlantID = la.PlantID\nLEFT JOIN LatestMaintenance lm ON tp.PlantID = lm.PlantID\nLEFT JOIN EmissionViolations ev ON tp.PlantID = ev.PlantID\nORDER BY tp.TotalIssues DESC;",
            "gpt-4o_response_ru": "WITH RecentIncidents AS (\n    SELECT \n        i.PlantID,\n        COUNT(i.IncidentID) AS IncidentCount\n    FROM Incident i\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY i.PlantID\n),\nRecentEmissions AS (\n    SELECT \n        e.PlantID,\n        COUNT(e.EmissionID) AS NonComplianceCount\n    FROM Emission e\n    WHERE e.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) AND e.ComplianceStatus != 'Соответствует'\n    GROUP BY e.PlantID\n),\nPlantIssues AS (\n    SELECT \n        COALESCE(ri.PlantID, re.PlantID) AS PlantID,\n        COALESCE(ri.IncidentCount, 0) + COALESCE(re.NonComplianceCount, 0) AS TotalIssues\n    FROM RecentIncidents ri\n    FULL OUTER JOIN RecentEmissions re ON ri.PlantID = re.PlantID\n),\nTopPlants AS (\n    SELECT \n        pi.PlantID\n    FROM PlantIssues pi\n    ORDER BY pi.TotalIssues DESC\n    LIMIT 5\n)\nSELECT \n    pp.Name AS PlantName,\n    a.Date AS LastAuditDate,\n    a.Auditor,\n    a.ComplianceStatus AS AuditComplianceStatus,\n    m.Cost AS LastMaintenanceCost,\n    e.ComplianceStatus AS EmissionComplianceStatus\nFROM TopPlants tp\nJOIN PowerPlant pp ON tp.PlantID = pp.PlantID\nLEFT JOIN `Audit` a ON tp.PlantID = a.PlantID\nLEFT JOIN Maintenance m ON tp.PlantID = m.PlantID\nLEFT JOIN Emission e ON tp.PlantID = e.PlantID\nWHERE a.Date = (SELECT MAX(a2.Date) FROM `Audit` a2 WHERE a2.PlantID = tp.PlantID)\n  AND m.Date = (SELECT MAX(m2.Date) FROM Maintenance m2 WHERE m2.PlantID = tp.PlantID)\n  AND e.Date = (SELECT MAX(e2.Date) FROM Emission e2 WHERE e2.PlantID = tp.PlantID);",
            "google/gemini-2.0-flash-001_response": "WITH PlantIncidents AS (\n    SELECT\n        PlantID,\n        COUNT(*) AS IncidentCount\n    FROM Incident\n    WHERE Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY PlantID\n),\nPlantEmissions AS (\n    SELECT\n        PlantID,\n        CASE\n            WHEN COUNT(CASE WHEN ComplianceStatus = 'Не соответствует' THEN 1 END) > 0 THEN 1\n            ELSE 0\n        END AS EmissionViolation\n    FROM Emission\n    WHERE Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY PlantID\n),\nPlantScores AS (\n    SELECT\n        COALESCE(pi.PlantID, pe.PlantID) AS PlantID,\n        COALESCE(pi.IncidentCount, 0) AS IncidentCount,\n        COALESCE(pe.EmissionViolation, 0) AS EmissionViolation,\n        COALESCE(pi.IncidentCount, 0) + COALESCE(pe.EmissionViolation, 0) AS TotalScore\n    FROM PlantIncidents pi\n    FULL OUTER JOIN PlantEmissions pe ON pi.PlantID = pe.PlantID\n),\nRankedPlants AS (\n    SELECT\n        PlantID,\n        IncidentCount,\n        EmissionViolation,\n        TotalScore,\n        RANK() OVER (ORDER BY TotalScore DESC) AS Rank\n    FROM PlantScores\n)\nSELECT\n    pp.Name AS PlantName,\n    rp.IncidentCount,\n    rp.EmissionViolation,\n    a.Date AS LastAuditDate,\n    a.Auditor AS LastAuditor,\n    a.Findings AS LastAuditFindings,\n    m.Cost AS LastMaintenanceCost,\n    e.ComplianceStatus AS LastEmissionStatus\nFROM RankedPlants rp\nJOIN PowerPlant pp ON rp.PlantID = pp.PlantID\nLEFT JOIN (\n    SELECT PlantID, Date, Auditor, Findings\n    FROM `Audit`\n    WHERE Date = (SELECT MAX(Date) FROM `Audit` a2 WHERE a2.PlantID = `Audit`.PlantID)\n) a ON rp.PlantID = a.PlantID\nLEFT JOIN (\n    SELECT PlantID, Cost\n    FROM Maintenance\n    WHERE Date = (SELECT MAX(Date) FROM Maintenance m2 WHERE m2.PlantID = Maintenance.PlantID)\n) m ON rp.PlantID = m.PlantID\nLEFT JOIN (\n    SELECT PlantID, ComplianceStatus\n    FROM Emission\n    WHERE Date = (SELECT MAX(Date) FROM Emission e2 WHERE e2.PlantID = Emission.PlantID)\n) e ON rp.PlantID = e.PlantID\nWHERE rp.Rank <= 5\nORDER BY rp.TotalScore DESC;",
            "google/gemini-2.0-flash-001_response_ru": "WITH RecentIncidents AS (\n    SELECT\n        PlantID,\n        COUNT(*) AS IncidentCount\n    FROM Incident\n    WHERE Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY PlantID\n),\nRecentEmissions AS (\n    SELECT\n        PlantID,\n        COUNT(*) AS EmissionViolationCount\n    FROM Emission\n    WHERE Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) AND ComplianceStatus != 'Соответствует'\n    GROUP BY PlantID\n),\nCombinedIssues AS (\n    SELECT\n        COALESCE(ri.PlantID, re.PlantID) AS PlantID,\n        COALESCE(ri.IncidentCount, 0) AS IncidentCount,\n        COALESCE(re.EmissionViolationCount, 0) AS EmissionViolationCount,\n        COALESCE(ri.IncidentCount, 0) + COALESCE(re.EmissionViolationCount, 0) AS TotalIssues\n    FROM RecentIncidents ri\n    FULL OUTER JOIN RecentEmissions re ON ri.PlantID = re.PlantID\n),\nRankedPlants AS (\n    SELECT\n        PlantID,\n        IncidentCount,\n        EmissionViolationCount,\n        TotalIssues,\n        RANK() OVER (ORDER BY TotalIssues DESC) AS IssueRank\n    FROM CombinedIssues\n)\nSELECT\n    pp.Name AS PlantName,\n    rp.IncidentCount,\n    rp.EmissionViolationCount,\n    a.Date AS LastAuditDate,\n    a.Auditor AS LastAuditor,\n    a.Findings AS LastAuditFindings,\n    m.Cost AS LastMaintenanceCost,\n    e.ComplianceStatus AS LastEmissionStatus\nFROM RankedPlants rp\nJOIN PowerPlant pp ON rp.PlantID = pp.PlantID\nLEFT JOIN (\n    SELECT PlantID, Date, Auditor, Findings, ROW_NUMBER() OVER (PARTITION BY PlantID ORDER BY Date DESC) AS rn\n    FROM `Audit`\n) a ON rp.PlantID = a.PlantID AND a.rn = 1\nLEFT JOIN (\n    SELECT PlantID, Cost, ROW_NUMBER() OVER (PARTITION BY PlantID ORDER BY Date DESC) AS rn\n    FROM Maintenance\n) m ON rp.PlantID = m.PlantID AND m.rn = 1\nLEFT JOIN (\n    SELECT PlantID, ComplianceStatus, ROW_NUMBER() OVER (PARTITION BY PlantID ORDER BY Date DESC) AS rn\n    FROM Emission\n) e ON rp.PlantID = e.PlantID AND e.rn = 1\nWHERE rp.IssueRank <= 5\nORDER BY rp.TotalIssues DESC;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH PlantIncidents AS (\n    SELECT \n        p.PlantID,\n        p.Name AS PlantName,\n        COUNT(i.IncidentID) AS TotalIncidentsCount,\n        COUNT(CASE WHEN e.ComplianceStatus = 'Не соответствует' THEN 1 END) AS NonComplianceCount\n    FROM PowerPlant p\n    JOIN Incident i ON p.PlantID = i.PlantID\n    JOIN Emission e ON p.PlantID = e.PlantID\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY p.PlantID, p.Name\n),\nLastAudit AS (\n    SELECT \n        p.PlantID,\n        MAX(a.AuditID) AS LastAuditID\n    FROM PowerPlant p\n    JOIN `Audit` a ON p.PlantID = a.PlantID\n    GROUP BY p.PlantID\n),\nLastMaintenance AS (\n    SELECT \n        p.PlantID,\n        MAX(m.MaintenanceID) AS LastMaintenanceID\n    FROM PowerPlant p\n    JOIN Maintenance m ON p.PlantID = m.PlantID\n    GROUP BY p.PlantID\n),\nComplianceStatus AS (\n    SELECT \n        p.PlantID,\n        e.ComplianceStatus\n    FROM PowerPlant p\n    JOIN Emission e ON p.PlantID = e.PlantID\n    WHERE e.Date = (SELECT MAX(Date) FROM Emission)\n)\nSELECT \n    pi.PlantName,\n    pi.TotalIncidentsCount,\n    pi.NonComplianceCount,\n    a.Findings AS LastAuditFindings,\n    a.Recommendations AS LastAuditRecommendations,\n    m.Cost AS LastMaintenanceCost,\n    cs.ComplianceStatus\nFROM PlantIncidents pi\nJOIN LastAudit la ON pi.PlantID = la.PlantID\nJOIN `Audit` a ON la.LastAuditID = a.AuditID\nJOIN LastMaintenance lm ON pi.PlantID = lm.PlantID\nJOIN Maintenance m ON lm.LastMaintenanceID = m.MaintenanceID\nJOIN ComplianceStatus cs ON pi.PlantID = cs.PlantID\nORDER BY pi.TotalIncidentsCount DESC, pi.NonComplianceCount DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH PlantIncidents AS (\n    SELECT \n        p.PlantID,\n        p.Name AS PlantName,\n        COUNT(i.IncidentID) AS TotalIncidentsCount\n    FROM PowerPlant p\n    JOIN Incident i ON p.PlantID = i.PlantID\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY p.PlantID, p.Name\n),\nPlantEmissions AS (\n    SELECT \n        p.PlantID,\n        p.Name AS PlantName,\n        COUNT(e.EmissionID) AS TotalEmissionsCount\n    FROM PowerPlant p\n    JOIN Emission e ON p.PlantID = e.PlantID\n    WHERE e.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) AND e.ComplianceStatus = 'Не соответствует'\n    GROUP BY p.PlantID, p.Name\n),\nPlantAudit AS (\n    SELECT \n        p.PlantID,\n        p.Name AS PlantName,\n        a.Date AS LastAuditDate,\n        a.Findings AS LastAuditFindings,\n        a.Recommendations AS LastAuditRecommendations,\n        a.ComplianceStatus AS LastAuditComplianceStatus\n    FROM PowerPlant p\n    JOIN `Audit` a ON p.PlantID = a.PlantID\n    WHERE a.Date = (SELECT MAX(Date) FROM `Audit` WHERE PlantID = p.PlantID)\n),\nPlantMaintenance AS (\n    SELECT \n        p.PlantID,\n        p.Name AS PlantName,\n        m.Date AS LastMaintenanceDate,\n        m.Cost AS LastMaintenanceCost\n    FROM PowerPlant p\n    JOIN Maintenance m ON p.PlantID = m.PlantID\n    WHERE m.Date = (SELECT MAX(Date) FROM Maintenance WHERE PlantID = p.PlantID)\n)\nSELECT \n    pi.PlantName,\n    pi.TotalIncidentsCount,\n    pe.TotalEmissionsCount,\n    pa.LastAuditDate,\n    pa.LastAuditFindings,\n    pa.LastAuditRecommendations,\n    pa.LastAuditComplianceStatus,\n    pm.LastMaintenanceCost\nFROM PlantIncidents pi\nJOIN PlantEmissions pe ON pi.PlantID = pe.PlantID\nJOIN PlantAudit pa ON pi.PlantID = pa.PlantID\nJOIN PlantMaintenance pm ON pi.PlantID = pm.PlantID\nORDER BY pi.TotalIncidentsCount + pe.TotalEmissionsCount DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH IncidentCounts AS (\n    SELECT \n        p.PlantID,\n        p.Name AS PlantName,\n        COUNT(i.IncidentID) AS TotalIncidents\n    FROM PowerPlant p\n    LEFT JOIN Incident i ON p.PlantID = i.PlantID\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY p.PlantID, p.Name\n),\nEmissionViolations AS (\n    SELECT \n        p.PlantID,\n        COUNT(e.EmissionID) AS TotalViolations\n    FROM PowerPlant p\n    LEFT JOIN Emission e ON p.PlantID = e.PlantID\n    WHERE e.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) \n    AND e.ComplianceStatus = 'Не соответствует'\n    GROUP BY p.PlantID\n),\nCombinedIssues AS (\n    SELECT \n        p.PlantID,\n        p.Name AS PlantName,\n        p.Type AS PlantType,\n        p.Status AS PlantStatus,\n        oc.Name AS OwnerName,\n        IFNULL(ic.TotalIncidents, 0) AS TotalIncidents,\n        IFNULL(ev.TotalViolations, 0) AS TotalViolations,\n        IFNULL(ic.TotalIncidents, 0) + IFNULL(ev.TotalViolations, 0) AS TotalIssues\n    FROM PowerPlant p\n    JOIN OwnerCompany oc ON p.OwnerCompanyID = oc.CompanyID\n    LEFT JOIN IncidentCounts ic ON p.PlantID = ic.PlantID\n    LEFT JOIN EmissionViolations ev ON p.PlantID = ev.PlantID\n),\nLastMaintenance AS (\n    SELECT \n        m.PlantID,\n        m.Cost AS LastMaintenanceCost,\n        m.Date AS LastMaintenanceDate,\n        m.Status AS MaintenanceStatus\n    FROM Maintenance m\n    JOIN (\n        SELECT PlantID, MAX(Date) AS MaxDate\n        FROM Maintenance\n        GROUP BY PlantID\n    ) lm ON m.PlantID = lm.PlantID AND m.Date = lm.MaxDate\n),\nLastAudit AS (\n    SELECT \n        a.PlantID,\n        a.Auditor,\n        a.Findings AS AuditFindings,\n        a.Recommendations AS AuditRecommendations,\n        a.ComplianceStatus AS AuditComplianceStatus,\n        a.Date AS AuditDate\n    FROM `Audit` a\n    JOIN (\n        SELECT PlantID, MAX(Date) AS MaxDate\n        FROM `Audit`\n        GROUP BY PlantID\n    ) la ON a.PlantID = la.PlantID AND a.Date = la.MaxDate\n),\nLatestEmissionStatus AS (\n    SELECT \n        e.PlantID,\n        e.ComplianceStatus AS EmissionComplianceStatus,\n        e.Date AS LastEmissionCheck\n    FROM Emission e\n    JOIN (\n        SELECT PlantID, MAX(Date) AS MaxDate\n        FROM Emission\n        GROUP BY PlantID\n    ) le ON e.PlantID = le.PlantID AND e.Date = le.MaxDate\n)\nSELECT \n    ci.PlantName,\n    ci.PlantType,\n    ci.OwnerName,\n    ci.TotalIncidents,\n    ci.TotalViolations,\n    la.AuditDate,\n    la.AuditFindings,\n    la.AuditRecommendations,\n    la.AuditComplianceStatus,\n    lm.LastMaintenanceCost,\n    lm.LastMaintenanceDate,\n    lm.MaintenanceStatus,\n    les.EmissionComplianceStatus\nFROM CombinedIssues ci\nLEFT JOIN LastAudit la ON ci.PlantID = la.PlantID\nLEFT JOIN LastMaintenance lm ON ci.PlantID = lm.PlantID\nLEFT JOIN LatestEmissionStatus les ON ci.PlantID = les.PlantID\nORDER BY ci.TotalIssues DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "WITH PlantIncidents AS (\n    SELECT \n        p.PlantID,\n        p.Name AS PlantName,\n        COUNT(i.IncidentID) AS IncidentCount\n    FROM PowerPlant p\n    JOIN Incident i ON p.PlantID = i.PlantID\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY p.PlantID, p.Name\n),\nPlantEmissionsViolations AS (\n    SELECT \n        p.PlantID,\n        p.Name AS PlantName,\n        COUNT(e.EmissionID) AS ViolationCount\n    FROM PowerPlant p\n    JOIN Emission e ON p.PlantID = e.PlantID\n    WHERE e.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    AND e.ComplianceStatus = 'Не соответствует'\n    GROUP BY p.PlantID, p.Name\n),\nPlantIssues AS (\n    SELECT \n        COALESCE(pi.PlantID, pe.PlantID) AS PlantID,\n        COALESCE(pi.PlantName, pe.PlantName) AS PlantName,\n        COALESCE(pi.IncidentCount, 0) AS IncidentCount,\n        COALESCE(pe.ViolationCount, 0) AS ViolationCount,\n        (COALESCE(pi.IncidentCount, 0) + COALESCE(pe.ViolationCount, 0)) AS TotalIssues\n    FROM PlantIncidents pi\n    FULL OUTER JOIN PlantEmissionsViolations pe ON pi.PlantID = pe.PlantID\n),\nLatestAudit AS (\n    SELECT \n        a.PlantID,\n        a.Auditor,\n        a.Findings,\n        a.Recommendations,\n        a.ComplianceStatus,\n        a.FollowUpDate,\n        ROW_NUMBER() OVER (PARTITION BY a.PlantID ORDER BY a.Date DESC) AS rn\n    FROM `Audit` a\n),\nLatestMaintenance AS (\n    SELECT \n        m.PlantID,\n        m.Cost,\n        m.Description AS MaintenanceDescription,\n        m.Status AS MaintenanceStatus,\n        ROW_NUMBER() OVER (PARTITION BY m.PlantID ORDER BY m.Date DESC) AS rn\n    FROM Maintenance m\n)\nSELECT \n    pi.PlantName,\n    pi.IncidentCount,\n    pi.ViolationCount,\n    pi.TotalIssues,\n    la.Auditor AS LastAuditAuditor,\n    la.Findings AS LastAuditFindings,\n    la.Recommendations AS LastAuditRecommendations,\n    la.ComplianceStatus AS LastAuditComplianceStatus,\n    la.FollowUpDate AS LastAuditFollowUpDate,\n    lm.Cost AS LastMaintenanceCost,\n    lm.MaintenanceDescription AS LastMaintenanceDescription,\n    lm.MaintenanceStatus AS LastMaintenanceStatus,\n    (SELECT ComplianceStatus FROM Emission WHERE PlantID = pi.PlantID ORDER BY Date DESC LIMIT 1) AS LatestEmissionComplianceStatus\nFROM PlantIssues pi\nLEFT JOIN LatestAudit la ON pi.PlantID = la.PlantID AND la.rn = 1\nLEFT JOIN LatestMaintenance lm ON pi.PlantID = lm.PlantID AND lm.rn = 1\nORDER BY pi.TotalIssues DESC\nLIMIT 5;",
            "gigachat_response": "WITH PlantIncidents AS (\n    SELECT \n        PlantID,\n        COUNT(*) AS IncidentsCount\n    FROM Incident\n    WHERE Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY PlantID\n),\nPlantEmissionViolations AS (\n    SELECT \n        PlantID,\n        COUNT(*) AS ViolationCount\n    FROM Emission\n    WHERE Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n      AND ComplianceStatus <> 'Соответствует'\n    GROUP BY PlantID\n),\nPlantAudits AS (\n    SELECT \n        PlantID,\n        MAX(Date) AS LatestAuditDate,\n        MAX(ComplianceStatus) AS LatestComplianceStatus\n    FROM `Audit`\n    GROUP BY PlantID\n),\nPlantMaintenanceCosts AS (\n    SELECT \n        PlantID,\n        MAX(Cost) AS LatestMaintenanceCost\n    FROM Maintenance\n    GROUP BY PlantID\n)\nSELECT \n    pp.Name AS PlantName,\n    pi.IncidentsCount,\n    pev.ViolationCount,\n    pa.LatestAuditDate,\n    pa.LatestComplianceStatus,\n    pmc.LatestMaintenanceCost\nFROM PowerPlant pp\nLEFT JOIN PlantIncidents pi ON pp.PlantID = pi.PlantID\nLEFT JOIN PlantEmissionViolations pev ON pp.PlantID = pev.PlantID\nLEFT JOIN PlantAudits pa ON pp.PlantID = pa.PlantID\nLEFT JOIN PlantMaintenanceCosts pmc ON pp.PlantID = pmc.PlantID\nWHERE pi.IncidentsCount IS NOT NULL OR pev.ViolationCount IS NOT NULL\nORDER BY (pi.IncidentsCount + pev.ViolationCount) DESC\nLIMIT 5;",
            "gigachat_response_ru": "WITH PlantIncidents AS (\n    SELECT \n        i.PlantID,\n        COUNT(i.IncidentID) AS IncidentsCount\n    FROM Incident i\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY i.PlantID\n),\nPlantEmissionViolations AS (\n    SELECT \n        e.PlantID,\n        COUNT(*) AS ViolationCount\n    FROM Emission e\n    WHERE e.ComplianceStatus <> 'Соответствует' \n      AND e.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY e.PlantID\n),\nPlantAudits AS (\n    SELECT \n        a.PlantID,\n        a.Findings,\n        a.Recommendations,\n        a.ComplianceStatus,\n        a.Report\n    FROM `Audit` a\n    INNER JOIN (\n        SELECT PlantID, MAX(Date) AS LatestAuditDate\n        FROM `Audit`\n        GROUP BY PlantID\n    ) la ON a.PlantID = la.PlantID AND a.Date = la.LatestAuditDate\n),\nPlantLastMaintenance AS (\n    SELECT \n        m.PlantID,\n        m.Description,\n        m.Cost,\n        m.PerformedBy,\n        m.Status\n    FROM Maintenance m\n    INNER JOIN (\n        SELECT PlantID, MAX(Date) AS LatestMaintenanceDate\n        FROM Maintenance\n        GROUP BY PlantID\n    ) lm ON m.PlantID = lm.PlantID AND m.Date = lm.LatestMaintenanceDate\n)\nSELECT \n    pp.Name AS PlantName,\n    pi.IncidentsCount,\n    pev.ViolationCount,\n    pa.Findings,\n    pa.Recommendations,\n    pa.ComplianceStatus,\n    plm.Cost AS LastMaintenanceCost,\n    plm.Status AS LastMaintenanceStatus\nFROM PowerPlant pp\nLEFT JOIN PlantIncidents pi ON pp.PlantID = pi.PlantID\nLEFT JOIN PlantEmissionViolations pev ON pp.PlantID = pev.PlantID\nLEFT JOIN PlantAudits pa ON pp.PlantID = pa.PlantID\nLEFT JOIN PlantLastMaintenance plm ON pp.PlantID = plm.PlantID\nWHERE (pi.IncidentsCount IS NOT NULL OR pev.ViolationCount IS NOT NULL)\nORDER BY COALESCE(pi.IncidentsCount, 0) + COALESCE(pev.ViolationCount, 0) DESC\nLIMIT 5;"
        },
        {
            "question": "Найти топ-10 подстанций с наибольшим количеством подключенных линий электропередачи и высокой нагрузкой за последний год, которые обслуживают промышленных потребителей, и показать для каждой подстанции информацию о типе потребителей, среднем потреблении и стоимости обслуживания.",
            "sql_query": "WITH SubstationLoad AS (\n    SELECT \n        s.SubstationID,\n        s.Name AS SubstationName,\n        s.CapacityMW,\n        COUNT(DISTINCT tl.LineID) AS ConnectedLinesCount,\n        SUM(tl.CapacityMW) AS TotalLineCapacity\n    FROM Substation s\n    JOIN TransmissionLine tl ON s.SubstationID = tl.LineID\n    GROUP BY s.SubstationID, s.Name, s.CapacityMW\n),\nIndustrialConsumers AS (\n    SELECT \n        c.ConsumerID,\n        c.Name AS ConsumerName,\n        c.Type AS ConsumerType,\n        c.AverageMonthlyConsumption,\n        COUNT(DISTINCT m.MeterID) AS MetersCount\n    FROM Consumer c\n    JOIN Meter m ON c.ConsumerID = m.ConsumerID\n    WHERE c.Type = 'Промышленность'\n    GROUP BY c.ConsumerID, c.Name, c.Type, c.AverageMonthlyConsumption\n),\nSubstationMaintenance AS (\n    SELECT \n        s.SubstationID,\n        AVG(m.Cost) AS AvgMaintenanceCost,\n        COUNT(m.MaintenanceID) AS MaintenanceCount\n    FROM Substation s\n    JOIN Maintenance m ON 1=1\n    GROUP BY s.SubstationID\n)\nSELECT \n    sl.SubstationName,\n    sl.CapacityMW,\n    sl.ConnectedLinesCount,\n    ROUND(sl.TotalLineCapacity, 2) AS TotalLineCapacity,\n    COUNT(DISTINCT ic.ConsumerID) AS IndustrialConsumersCount,\n    ROUND(AVG(ic.AverageMonthlyConsumption), 2) AS AvgConsumerConsumption,\n    ROUND(sm.AvgMaintenanceCost, 2) AS AvgMaintenanceCost,\n    sm.MaintenanceCount\nFROM SubstationLoad sl\nCROSS JOIN IndustrialConsumers ic\nJOIN SubstationMaintenance sm ON sl.SubstationID = sm.SubstationID\nGROUP BY sl.SubstationID, sl.SubstationName, sl.CapacityMW, sl.ConnectedLinesCount, sl.TotalLineCapacity, sm.AvgMaintenanceCost, sm.MaintenanceCount\nORDER BY sl.ConnectedLinesCount DESC, sl.CapacityMW DESC\nLIMIT 10;",
            "gpt-4o_response": "WITH SubstationLineConnections AS (\n    SELECT \n        s.SubstationID,\n        s.Name AS SubstationName,\n        COUNT(DISTINCT tl.LineID) AS ConnectedLinesCount\n    FROM Substation s\n    JOIN TransmissionLine tl ON s.SubstationID = tl.LineID\n    GROUP BY s.SubstationID, s.Name\n),\nIndustrialConsumers AS (\n    SELECT \n        c.ConsumerID,\n        c.Name AS ConsumerName,\n        c.Type AS ConsumerType,\n        c.AverageMonthlyConsumption,\n        ct.SupplierID\n    FROM Consumer c\n    JOIN `Contract` ct ON c.ConsumerID = ct.ConsumerID\n    WHERE c.Type = 'Промышленность' AND ct.Status = 'active'\n),\nSubstationConsumerAnalysis AS (\n    SELECT \n        s.SubstationID,\n        ic.ConsumerType,\n        AVG(ic.AverageMonthlyConsumption) AS AvgMonthlyConsumption,\n        SUM(ct.PricePerUnit * ct.Volume) AS TotalServiceCost\n    FROM Substation s\n    JOIN TransmissionLine tl ON s.SubstationID = tl.LineID\n    JOIN IndustrialConsumers ic ON tl.LineID = ic.SupplierID\n    JOIN `Contract` ct ON ic.ConsumerID = ct.ConsumerID\n    WHERE ct.Status = 'active'\n    GROUP BY s.SubstationID, ic.ConsumerType\n)\nSELECT \n    slc.SubstationName,\n    sca.ConsumerType,\n    ROUND(sca.AvgMonthlyConsumption, 2) AS AvgMonthlyConsumption,\n    ROUND(sca.TotalServiceCost, 2) AS TotalServiceCost,\n    slc.ConnectedLinesCount\nFROM SubstationLineConnections slc\nJOIN SubstationConsumerAnalysis sca ON slc.SubstationID = sca.SubstationID\nORDER BY slc.ConnectedLinesCount DESC\nLIMIT 10;",
            "gpt-4o_response_ru": "WITH SubstationLineCount AS (\n    SELECT \n        s.SubstationID,\n        s.Name AS SubstationName,\n        COUNT(DISTINCT tl.LineID) AS LineCount\n    FROM Substation s\n    JOIN TransmissionLine tl ON s.SubstationID = tl.LineID\n    GROUP BY s.SubstationID, s.Name\n),\nSubstationLoad AS (\n    SELECT \n        s.SubstationID,\n        SUM(tl.CapacityMW) AS TotalCapacityMW\n    FROM Substation s\n    JOIN TransmissionLine tl ON s.SubstationID = tl.LineID\n    WHERE tl.CommissionDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY s.SubstationID\n),\nIndustrialConsumers AS (\n    SELECT \n        c.ConsumerID,\n        c.Name AS ConsumerName,\n        c.Type AS ConsumerType,\n        c.AverageMonthlyConsumption,\n        ct.SubstationID\n    FROM Consumer c\n    JOIN `Contract` ct ON c.ConsumerID = ct.ConsumerID\n    WHERE c.Type = 'Промышленность'\n)\nSELECT \n    slc.SubstationName,\n    ic.ConsumerType,\n    AVG(ic.AverageMonthlyConsumption) AS AvgMonthlyConsumption,\n    sl.TotalCapacityMW,\n    slc.LineCount\nFROM SubstationLineCount slc\nJOIN SubstationLoad sl ON slc.SubstationID = sl.SubstationID\nJOIN IndustrialConsumers ic ON slc.SubstationID = ic.SubstationID\nGROUP BY slc.SubstationName, ic.ConsumerType, sl.TotalCapacityMW, slc.LineCount\nORDER BY slc.LineCount DESC, sl.TotalCapacityMW DESC\nLIMIT 10;",
            "google/gemini-2.0-flash-001_response": "WITH SubstationConnections AS (\n    SELECT\n        s.SubstationID,\n        s.Name AS SubstationName,\n        s.Location AS SubstationLocation,\n        s.CapacityMW AS SubstationCapacity,\n        COUNT(tl.LineID) AS ConnectedLinesCount\n    FROM Substation s\n    LEFT JOIN TransmissionLine tl ON s.OwnerCompanyID = tl.OwnerCompanyID\n    GROUP BY s.SubstationID, s.Name, s.Location, s.CapacityMW\n),\nIndustrialConsumers AS (\n    SELECT\n        c.ConsumerID,\n        c.Name AS ConsumerName,\n        c.Type AS ConsumerType,\n        c.Location AS ConsumerLocation,\n        c.AverageMonthlyConsumption\n    FROM Consumer c\n    WHERE c.Type = 'Промышленность'\n),\nConsumerContracts AS (\n    SELECT\n        c.ConsumerID,\n        SUM(ct.Volume) AS TotalContractVolume\n    FROM IndustrialConsumers c\n    JOIN `Contract` ct ON c.ConsumerID = ct.ConsumerID\n    WHERE ct.StartDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY c.ConsumerID\n),\nSubstationMaintenanceCosts AS (\n    SELECT\n        s.SubstationID,\n        SUM(m.Cost) AS TotalMaintenanceCost\n    FROM Substation s\n    LEFT JOIN Maintenance m ON s.PlantID = m.SubstationID\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY s.SubstationID\n)\nSELECT\n    sc.SubstationName,\n    sc.SubstationLocation,\n    sc.SubstationCapacity,\n    sc.ConnectedLinesCount,\n    ic.ConsumerType,\n    AVG(ic.AverageMonthlyConsumption) AS AvgMonthlyConsumption,\n    COALESCE(smc.TotalMaintenanceCost, 0) AS TotalMaintenanceCost\nFROM SubstationConnections sc\nJOIN Substation s ON sc.SubstationID = s.SubstationID\nJOIN IndustrialConsumers ic ON 1=1\nLEFT JOIN SubstationMaintenanceCosts smc ON sc.SubstationID = smc.SubstationID\nWHERE EXISTS (\n    SELECT 1\n    FROM `Contract` ct\n    JOIN ConsumerContracts cc ON ct.ConsumerID = cc.ConsumerID\n    WHERE ct.ConsumerID IN (SELECT ConsumerID FROM IndustrialConsumers)\n)\nGROUP BY sc.SubstationID, sc.SubstationName, sc.SubstationLocation, sc.SubstationCapacity, sc.ConnectedLinesCount, ic.ConsumerType, smc.TotalMaintenanceCost\nORDER BY sc.ConnectedLinesCount DESC, sc.SubstationCapacity DESC\nLIMIT 10;",
            "google/gemini-2.0-flash-001_response_ru": "WITH IndustrialConsumers AS (\n    SELECT\n        ConsumerID,\n        Name AS ConsumerName,\n        Type AS ConsumerType,\n        AverageMonthlyConsumption\n    FROM Consumer\n    WHERE Type = 'Промышленность'\n),\nSubstationConnections AS (\n    SELECT\n        s.SubstationID,\n        s.Name AS SubstationName,\n        s.Location AS SubstationLocation,\n        s.CapacityMW AS SubstationCapacity,\n        s.OwnerCompanyID,\n        COUNT(DISTINCT tl.LineID) AS ConnectedLinesCount\n    FROM Substation s\n    JOIN TransmissionLine tl ON s.OwnerCompanyID = tl.OwnerCompanyID\n    GROUP BY s.SubstationID, s.Name, s.Location, s.CapacityMW, s.OwnerCompanyID\n),\nConsumerSubstationMapping AS (\n    SELECT\n        sc.SubstationID,\n        sc.SubstationName,\n        sc.SubstationLocation,\n        sc.SubstationCapacity,\n        sc.OwnerCompanyID,\n        sc.ConnectedLinesCount,\n        ic.ConsumerID,\n        ic.ConsumerName,\n        ic.ConsumerType,\n        ic.AverageMonthlyConsumption\n    FROM SubstationConnections sc\n    JOIN IndustrialConsumers ic ON 1=1\n),\nMaintenanceCosts AS (\n    SELECT\n        s.SubstationID,\n        SUM(m.Cost) AS TotalMaintenanceCost\n    FROM Substation s\n    JOIN Maintenance m ON s.PlantID = m.SubstationID\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY s.SubstationID\n),\nHighLoadSubstations AS (\n    SELECT\n        csm.SubstationID,\n        csm.SubstationName,\n        csm.SubstationLocation,\n        csm.SubstationCapacity,\n        csm.OwnerCompanyID,\n        csm.ConnectedLinesCount,\n        csm.ConsumerType,\n        AVG(csm.AverageMonthlyConsumption) AS AvgMonthlyConsumption,\n        COALESCE(mc.TotalMaintenanceCost, 0) AS TotalMaintenanceCost\n    FROM ConsumerSubstationMapping csm\n    LEFT JOIN MaintenanceCosts mc ON csm.SubstationID = mc.SubstationID\n    GROUP BY csm.SubstationID, csm.SubstationName, csm.SubstationLocation, csm.SubstationCapacity, csm.OwnerCompanyID, csm.ConnectedLinesCount, csm.ConsumerType, mc.TotalMaintenanceCost\n    ORDER BY csm.ConnectedLinesCount DESC, csm.SubstationCapacity DESC\n    LIMIT 10\n)\nSELECT\n    hls.SubstationName,\n    hls.SubstationLocation,\n    hls.SubstationCapacity,\n    hls.ConnectedLinesCount,\n    hls.ConsumerType,\n    ROUND(hls.AvgMonthlyConsumption, 2) AS AvgMonthlyConsumption,\n    ROUND(hls.TotalMaintenanceCost, 2) AS TotalMaintenanceCost\nFROM HighLoadSubstations hls\nORDER BY hls.ConnectedLinesCount DESC, hls.SubstationCapacity DESC;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH SubstationLoad AS (\n    SELECT \n        s.SubstationID,\n        s.Name AS SubstationName,\n        s.CapacityMW,\n        c.Type AS ConsumerType,\n        AVG(c.AverageMonthlyConsumption) AS AvgMonthlyConsumption,\n        SUM(c.AverageMonthlyConsumption) AS TotalMonthlyConsumption\n    FROM Substation s\n    JOIN TransmissionLine tl ON s.SubstationID = tl.LineID\n    JOIN Consumer c ON tl.LineID = c.ConsumerID\n    WHERE c.Type = 'Промышленность'\n    GROUP BY s.SubstationID, s.Name, s.CapacityMW, c.Type\n),\nSubstationMaintenance AS (\n    SELECT \n        s.SubstationID,\n        SUM(m.Cost) AS TotalMaintenanceCost\n    FROM Substation s\n    JOIN Maintenance m ON s.SubstationID = m.PlantID\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY s.SubstationID\n),\nSubstationLines AS (\n    SELECT \n        s.SubstationID,\n        COUNT(DISTINCT tl.LineID) AS ConnectedLinesCount\n    FROM Substation s\n    JOIN TransmissionLine tl ON s.SubstationID = tl.LineID\n    GROUP BY s.SubstationID\n)\nSELECT \n    sl.SubstationName,\n    sl.ConsumerType,\n    ROUND(sl.AvgMonthlyConsumption, 2) AS AvgMonthlyConsumption,\n    ROUND(sl.TotalMonthlyConsumption, 2) AS TotalMonthlyConsumption,\n    ROUND(sm.TotalMaintenanceCost, 2) AS TotalMaintenanceCost,\n    sls.ConnectedLinesCount\nFROM SubstationLoad sl\nJOIN SubstationMaintenance sm ON sl.SubstationID = sm.SubstationID\nJOIN SubstationLines sls ON sl.SubstationID = sls.SubstationID\nORDER BY sls.ConnectedLinesCount DESC, sl.TotalMonthlyConsumption DESC\nLIMIT 10;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH SubstationLoad AS (\n    SELECT \n        s.SubstationID,\n        s.Name AS SubstationName,\n        s.CapacityMW,\n        s.VoltageLevel,\n        c.Type AS ConsumerType,\n        AVG(c.AverageMonthlyConsumption) AS AvgMonthlyConsumption,\n        SUM(c.AverageMonthlyConsumption) AS TotalMonthlyConsumption\n    FROM Substation s\n    JOIN TransmissionLine tl ON s.SubstationID = tl.LineID\n    JOIN Consumer c ON tl.LineID = c.ConsumerID\n    WHERE c.Type = 'Промышленность'\n    GROUP BY s.SubstationID, s.Name, s.CapacityMW, s.VoltageLevel, c.Type\n),\nSubstationMaintenance AS (\n    SELECT \n        s.SubstationID,\n        SUM(m.Cost) AS TotalMaintenanceCost\n    FROM Substation s\n    JOIN Maintenance m ON s.SubstationID = m.PlantID\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY s.SubstationID\n),\nSubstationLineCount AS (\n    SELECT \n        s.SubstationID,\n        COUNT(DISTINCT tl.LineID) AS ConnectedLinesCount\n    FROM Substation s\n    JOIN TransmissionLine tl ON s.SubstationID = tl.LineID\n    GROUP BY s.SubstationID\n)\nSELECT \n    sl.SubstationName,\n    sl.ConsumerType,\n    ROUND(sl.AvgMonthlyConsumption, 2) AS AvgMonthlyConsumption,\n    ROUND(sm.TotalMaintenanceCost, 2) AS TotalMaintenanceCost,\n    slc.ConnectedLinesCount,\n    ROUND(sl.TotalMonthlyConsumption, 2) AS TotalMonthlyConsumption\nFROM SubstationLoad sl\nJOIN SubstationMaintenance sm ON sl.SubstationID = sm.SubstationID\nJOIN SubstationLineCount slc ON sl.SubstationID = slc.SubstationID\nORDER BY slc.ConnectedLinesCount DESC, sl.TotalMonthlyConsumption DESC\nLIMIT 10;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH SubstationConnections AS (\n    SELECT \n        s.SubstationID,\n        s.Name AS SubstationName,\n        COUNT(tl.LineID) AS ConnectedLinesCount,\n        s.CapacityMW,\n        s.VoltageLevel,\n        s.Status\n    FROM Substation s\n    JOIN TransmissionLine tl ON s.SubstationID = tl.LineID\n    GROUP BY s.SubstationID, s.Name, s.CapacityMW, s.VoltageLevel, s.Status\n),\nIndustrialConsumers AS (\n    SELECT \n        c.ConsumerID,\n        c.Name AS ConsumerName,\n        c.Type,\n        c.Location,\n        c.AverageMonthlyConsumption,\n        co.PricePerUnit,\n        co.Volume AS ContractVolume,\n        co.Status,\n        co.StartDate,\n        co.EndDate,\n        m.MeterID,\n        m.LastReading\n    FROM Consumer c\n    JOIN `Contract` co ON c.ConsumerID = co.ConsumerID\n    JOIN Meter m ON c.ConsumerID = m.ConsumerID\n    WHERE c.Type = 'Промышленность'\n)\nSELECT \n    sc.SubstationName,\n    sc.ConnectedLinesCount,\n    sc.CapacityMW,\n    sc.VoltageLevel,\n    sc.Status,\n    ic.ConsumerName,\n    ic.Type AS ConsumerType,\n    ROUND(ic.AverageMonthlyConsumption, 2) AS AvgMonthlyConsumption,\n    ROUND(ic.PricePerUnit * ic.ContractVolume, 2) AS EstimatedAnnualCost,\n    COUNT(DISTINCT ic.ConsumerID) AS IndustrialConsumersCount,\n    ROUND(AVG(ic.AverageMonthlyConsumption), 2) AS AvgIndustrialConsumption,\n    ROUND(SUM(ic.AverageMonthlyConsumption), 2) AS TotalConsumption\nFROM SubstationConnections sc\nJOIN IndustrialConsumers ic ON 1=1\nGROUP BY \n    sc.SubstationID, \n    sc.SubstationName, \n    sc.ConnectedLinesCount, \n    sc.CapacityMW, \n    sc.VoltageLevel, \n    sc.Status,\n    ic.ConsumerName,\n    ic.Type,\n    ic.AverageMonthlyConsumption,\n    ic.PricePerUnit,\n    ic.ContractVolume\nORDER BY sc.ConnectedLinesCount DESC, sc.CapacityMW DESC\nLIMIT 10;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "WITH SubstationLines AS (\n    SELECT \n        s.SubstationID,\n        s.Name AS SubstationName,\n        s.CapacityMW,\n        COUNT(tl.LineID) AS ConnectedLinesCount\n    FROM Substation s\n    JOIN TransmissionLine tl ON s.Location = tl.StartLocation OR s.Location = tl.EndLocation\n    GROUP BY s.SubstationID, s.Name, s.CapacityMW\n),\nIndustrialConsumers AS (\n    SELECT \n        c.ConsumerID,\n        c.Name AS ConsumerName,\n        c.Type AS ConsumerType,\n        c.AverageMonthlyConsumption,\n        m.MeterID,\n        ct.PricePerUnit,\n        ct.Volume\n    FROM Consumer c\n    JOIN Meter m ON c.ConsumerID = m.ConsumerID\n    JOIN `Contract` ct ON c.ConsumerID = ct.ConsumerID\n    WHERE c.Type = 'Промышленность'\n)\nSELECT \n    sl.SubstationName,\n    sl.CapacityMW,\n    sl.ConnectedLinesCount,\n    ic.ConsumerType,\n    ROUND(AVG(ic.AverageMonthlyConsumption), 2) AS AvgConsumption,\n    ROUND(SUM(ic.PricePerUnit * ic.Volume), 2) AS TotalServiceCost\nFROM SubstationLines sl\nJOIN IndustrialConsumers ic ON 1=1\nGROUP BY sl.SubstationID, sl.SubstationName, sl.CapacityMW, sl.ConnectedLinesCount, ic.ConsumerType\nORDER BY sl.ConnectedLinesCount DESC, sl.CapacityMW DESC\nLIMIT 10;",
            "gigachat_response": "WITH SubstationLines AS (\n    SELECT \n        s.SubstationID,\n        COUNT(DISTINCT tl.LineID) AS LinesConnected,\n        SUM(c.AverageMonthlyConsumption) AS TotalConsumption\n    FROM Substation s\n    LEFT JOIN TransmissionLine tl ON s.SubstationID = tl.StartLocation OR s.SubstationID = tl.EndLocation\n    LEFT JOIN Consumer c ON s.SubstationID = c.Location\n    WHERE c.Type = 'Промышленность'\n      AND tl.CommissionDate <= NOW()\n      AND s.Status = 'Активна'\n    GROUP BY s.SubstationID\n),\nSubstationMaintenanceCosts AS (\n    SELECT \n        s.SubstationID,\n        SUM(m.Cost) AS TotalMaintenanceCost\n    FROM Substation s\n    JOIN Maintenance m ON s.SubstationID = m.PlantID\n    WHERE m.Date >= DATE_SUB(NOW(), INTERVAL 1 YEAR)\n    GROUP BY s.SubstationID\n)\nSELECT \n    sl.SubstationID,\n    s.Name AS SubstationName,\n    sl.LinesConnected,\n    sl.TotalConsumption,\n    smc.TotalMaintenanceCost\nFROM SubstationLines sl\nJOIN Substation s ON sl.SubstationID = s.SubstationID\nLEFT JOIN SubstationMaintenanceCosts smc ON sl.SubstationID = smc.SubstationID\nWHERE sl.LinesConnected IS NOT NULL\nORDER BY sl.LinesConnected DESC, sl.TotalConsumption DESC\nLIMIT 10;",
            "gigachat_response_ru": "SELECT \n    s.Name AS SubstationName,\n    s.Location AS SubstationLocation,\n    COUNT(DISTINCT tl.LineID) AS NumberOfLinesConnected,\n    AVG(c.AverageMonthlyConsumption) AS AverageMonthlyConsumption,\n    SUM(m.Cost) AS TotalServiceCost\nFROM Substation s\nJOIN TransmissionLine tl ON s.SubstationID = tl.OwnerCompanyID\nJOIN Consumer c ON s.SubstationID = c.ConsumerID\nJOIN Meter m ON c.ConsumerID = m.ConsumerID\nWHERE c.Type = 'Промышленность'\nAND m.LastReadingDate >= DATE_SUB(NOW(), INTERVAL 1 YEAR)\nGROUP BY s.SubstationID, s.Name, s.Location\nORDER BY NumberOfLinesConnected DESC, AverageMonthlyConsumption DESC\nLIMIT 10;"
        },
        {
            "question": "Найти топ-11 электростанций с наибольшим количеством нарушений экологических норм и высоким уровнем выбросов за последние 6 месяцев, которые требуют срочного обслуживания, и показать для каждой станции информацию о последних инцидентах, стоимости ремонтов и рекомендациях аудиторов.",
            "sql_query": "WITH ProblematicPlants AS (\n    SELECT \n        p.PlantID,\n        p.Name AS PlantName,\n        p.Type AS PlantType,\n        COUNT(CASE WHEN e.ComplianceStatus = 'Не соответствует' THEN 1 END) AS ViolationsCount,\n        AVG(e.CO2Emissions) AS AvgEmissions,\n        MAX(e.Date) AS LastEmissionDate\n    FROM PowerPlant p\n    JOIN Emission e ON p.PlantID = e.PlantID\n    WHERE e.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH)\n    GROUP BY p.PlantID, p.Name, p.Type\n    HAVING COUNT(CASE WHEN e.ComplianceStatus = 'Не соответствует' THEN 1 END) > 1\n),\nRecentIncidents AS (\n    SELECT \n        p.PlantID,\n        COUNT(i.IncidentID) AS IncidentsCount,\n        MAX(i.Date) AS LastIncidentDate,\n        MAX(i.Severity) AS LastIncidentSeverity\n    FROM PowerPlant p\n    JOIN Incident i ON p.PlantID = i.PlantID\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    GROUP BY p.PlantID\n),\nMaintenanceCosts AS (\n    SELECT \n        p.PlantID,\n        SUM(m.Cost) AS TotalMaintenanceCost,\n        MAX(m.Date) AS LastMaintenanceDate,\n        COUNT(m.MaintenanceID) AS MaintenanceCount\n    FROM PowerPlant p\n    JOIN Maintenance m ON p.PlantID = m.PlantID\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY p.PlantID\n),\nLatestAudit AS (\n    SELECT \n        p.PlantID,\n        a.Auditor,\n        a.Recommendations,\n        a.ComplianceStatus,\n        ROW_NUMBER() OVER (PARTITION BY p.PlantID ORDER BY a.Date DESC) AS rn\n    FROM PowerPlant p\n    JOIN `Audit` a ON p.PlantID = a.PlantID\n)\nSELECT \n    pp.PlantName,\n    pp.PlantType,\n    pp.ViolationsCount,\n    ROUND(pp.AvgEmissions, 2) AS AvgEmissions,\n    ri.IncidentsCount,\n    ri.LastIncidentSeverity,\n    ROUND(mc.TotalMaintenanceCost, 2) AS TotalMaintenanceCost,\n    mc.MaintenanceCount,\n    la.Recommendations AS LatestAuditRecommendations,\n    la.ComplianceStatus AS LatestAuditStatus\nFROM ProblematicPlants pp\nJOIN RecentIncidents ri ON pp.PlantID = ri.PlantID\nJOIN MaintenanceCosts mc ON pp.PlantID = mc.PlantID\nJOIN LatestAudit la ON pp.PlantID = la.PlantID AND la.rn = 1\nORDER BY pp.ViolationsCount DESC, pp.AvgEmissions DESC\nLIMIT 11;",
            "gpt-4o_response": "WITH RecentEmissions AS (\n    SELECT \n        e.PlantID,\n        SUM(e.CO2Emissions + e.SO2Emissions + e.NOxEmissions + e.ParticulateMatter) AS TotalEmissions,\n        COUNT(CASE WHEN e.ComplianceStatus != 'Соответствует' THEN 1 END) AS NonComplianceCount\n    FROM Emission e\n    WHERE e.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH)\n    GROUP BY e.PlantID\n),\nRecentIncidents AS (\n    SELECT \n        i.PlantID,\n        i.Date AS LastIncidentDate,\n        i.Description AS LastIncidentDescription,\n        i.Severity AS LastIncidentSeverity,\n        i.Impact AS LastIncidentImpact,\n        i.Resolution AS LastIncidentResolution\n    FROM Incident i\n    WHERE i.Date = (\n        SELECT MAX(i2.Date)\n        FROM Incident i2\n        WHERE i2.PlantID = i.PlantID\n    )\n),\nRecentMaintenance AS (\n    SELECT \n        m.PlantID,\n        SUM(m.Cost) AS TotalMaintenanceCost,\n        COUNT(m.MaintenanceID) AS MaintenanceCount\n    FROM Maintenance m\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH)\n    GROUP BY m.PlantID\n),\nRecentAudits AS (\n    SELECT \n        a.PlantID,\n        a.Recommendations AS LastAuditRecommendations\n    FROM `Audit` a\n    WHERE a.Date = (\n        SELECT MAX(a2.Date)\n        FROM `Audit` a2\n        WHERE a2.PlantID = a.PlantID\n    )\n)\nSELECT \n    pp.Name AS PlantName,\n    pp.Location AS PlantLocation,\n    pp.CapacityMW,\n    re.TotalEmissions,\n    re.NonComplianceCount,\n    ri.LastIncidentDate,\n    ri.LastIncidentDescription,\n    ri.LastIncidentSeverity,\n    ri.LastIncidentImpact,\n    ri.LastIncidentResolution,\n    rm.TotalMaintenanceCost,\n    rm.MaintenanceCount,\n    ra.LastAuditRecommendations\nFROM RecentEmissions re\nJOIN PowerPlant pp ON re.PlantID = pp.PlantID\nLEFT JOIN RecentIncidents ri ON re.PlantID = ri.PlantID\nLEFT JOIN RecentMaintenance rm ON re.PlantID = rm.PlantID\nLEFT JOIN RecentAudits ra ON re.PlantID = ra.PlantID\nWHERE re.NonComplianceCount > 0\nORDER BY re.NonComplianceCount DESC, re.TotalEmissions DESC\nLIMIT 11;",
            "gpt-4o_response_ru": "WITH RecentEmissions AS (\n    SELECT \n        e.PlantID,\n        SUM(e.CO2Emissions + e.SO2Emissions + e.NOxEmissions + e.ParticulateMatter) AS TotalEmissions,\n        COUNT(CASE WHEN e.ComplianceStatus = 'Не соответствует' THEN 1 END) AS NonComplianceCount\n    FROM Emission e\n    WHERE e.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH)\n    GROUP BY e.PlantID\n),\nRecentMaintenance AS (\n    SELECT \n        m.PlantID,\n        SUM(m.Cost) AS TotalMaintenanceCost,\n        COUNT(m.MaintenanceID) AS MaintenanceCount\n    FROM Maintenance m\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH)\n    GROUP BY m.PlantID\n),\nRecentIncidents AS (\n    SELECT \n        i.PlantID,\n        i.Date AS LastIncidentDate,\n        i.Description AS LastIncidentDescription,\n        i.Severity AS LastIncidentSeverity\n    FROM Incident i\n    WHERE i.Date = (\n        SELECT MAX(i2.Date)\n        FROM Incident i2\n        WHERE i2.PlantID = i.PlantID\n    )\n),\nRecentAudits AS (\n    SELECT \n        a.PlantID,\n        a.Recommendations AS LastAuditRecommendations\n    FROM `Audit` a\n    WHERE a.Date = (\n        SELECT MAX(a2.Date)\n        FROM `Audit` a2\n        WHERE a2.PlantID = a.PlantID\n    )\n)\nSELECT \n    pp.Name AS PlantName,\n    pp.Type AS PlantType,\n    re.TotalEmissions,\n    re.NonComplianceCount,\n    rm.TotalMaintenanceCost,\n    ri.LastIncidentDate,\n    ri.LastIncidentDescription,\n    ri.LastIncidentSeverity,\n    ra.LastAuditRecommendations\nFROM PowerPlant pp\nJOIN RecentEmissions re ON pp.PlantID = re.PlantID\nJOIN RecentMaintenance rm ON pp.PlantID = rm.PlantID\nJOIN RecentIncidents ri ON pp.PlantID = ri.PlantID\nJOIN RecentAudits ra ON pp.PlantID = ra.PlantID\nWHERE re.NonComplianceCount > 0\nORDER BY re.NonComplianceCount DESC, re.TotalEmissions DESC\nLIMIT 11;",
            "google/gemini-2.0-flash-001_response": "WITH RecentEmissions AS (\n    SELECT\n        PlantID,\n        Date,\n        CO2Emissions,\n        SO2Emissions,\n        NOxEmissions,\n        ParticulateMatter,\n        ComplianceStatus\n    FROM Emission\n    WHERE Date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH)\n),\nPlantEmissionViolations AS (\n    SELECT\n        PlantID,\n        COUNT(*) AS ViolationCount,\n        AVG(CO2Emissions) AS AvgCO2Emissions,\n        AVG(SO2Emissions) AS AvgSO2Emissions,\n        AVG(NOxEmissions) AS AvgNOxEmissions,\n        AVG(ParticulateMatter) AS AvgParticulateMatter\n    FROM RecentEmissions\n    WHERE ComplianceStatus != 'Соответствует'\n    GROUP BY PlantID\n    HAVING COUNT(*) > 0\n),\nTopPlants AS (\n    SELECT\n        PlantID,\n        ViolationCount,\n        AvgCO2Emissions,\n        AvgSO2Emissions,\n        AvgNOxEmissions,\n        AvgParticulateMatter\n    FROM PlantEmissionViolations\n    ORDER BY ViolationCount DESC\n    LIMIT 11\n)\nSELECT\n    pp.Name AS PlantName,\n    tp.ViolationCount,\n    tp.AvgCO2Emissions,\n    tp.AvgSO2Emissions,\n    tp.AvgNOxEmissions,\n    tp.AvgParticulateMatter,\n    i.Date AS LastIncidentDate,\n    i.Description AS LastIncidentDescription,\n    m.Cost AS LastMaintenanceCost,\n    a.Recommendations AS AuditRecommendations\nFROM TopPlants tp\nJOIN PowerPlant pp ON tp.PlantID = pp.PlantID\nLEFT JOIN (\n    SELECT PlantID, Date, Description\n    FROM Incident\n    WHERE Date IN (SELECT MAX(Date) FROM Incident GROUP BY PlantID)\n) i ON tp.PlantID = i.PlantID\nLEFT JOIN (\n    SELECT PlantID, Cost\n    FROM Maintenance\n    WHERE Date IN (SELECT MAX(Date) FROM Maintenance GROUP BY PlantID)\n) m ON tp.PlantID = m.PlantID\nLEFT JOIN (\n    SELECT PlantID, Recommendations\n    FROM `Audit`\n    WHERE Date IN (SELECT MAX(Date) FROM `Audit` GROUP BY PlantID)\n) a ON tp.PlantID = a.PlantID\nORDER BY tp.ViolationCount DESC;",
            "google/gemini-2.0-flash-001_response_ru": "WITH RecentEmissions AS (\n    SELECT\n        PlantID,\n        Date,\n        CO2Emissions,\n        SO2Emissions,\n        NOxEmissions,\n        ParticulateMatter,\n        ComplianceStatus\n    FROM Emission\n    WHERE Date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH)\n),\nPlantEmissionViolations AS (\n    SELECT\n        PlantID,\n        COUNT(*) AS ViolationCount,\n        AVG(CO2Emissions + SO2Emissions + NOxEmissions + ParticulateMatter) AS TotalEmissions\n    FROM RecentEmissions\n    WHERE ComplianceStatus != 'Соответствует'\n    GROUP BY PlantID\n    HAVING COUNT(*) > 0\n),\nTopViolatingPlants AS (\n    SELECT\n        pe.PlantID,\n        pe.ViolationCount,\n        pe.TotalEmissions,\n        pp.Name AS PlantName,\n        pp.Location AS PlantLocation\n    FROM PlantEmissionViolations pe\n    JOIN PowerPlant pp ON pe.PlantID = pp.PlantID\n    ORDER BY pe.ViolationCount DESC, pe.TotalEmissions DESC\n    LIMIT 11\n),\nRecentIncidents AS (\n    SELECT\n        PlantID,\n        Date AS IncidentDate,\n        Description AS IncidentDescription,\n        Severity AS IncidentSeverity\n    FROM Incident\n    WHERE Date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH)\n),\nMaintenanceCosts AS (\n    SELECT\n        PlantID,\n        SUM(Cost) AS TotalMaintenanceCost\n    FROM Maintenance\n    WHERE Date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH)\n    GROUP BY PlantID\n),\nAuditRecommendations AS (\n    SELECT\n        PlantID,\n        Date AS AuditDate,\n        Auditor,\n        Findings,\n        Recommendations\n    FROM `Audit`\n    WHERE Date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH)\n)\nSELECT\n    tvp.PlantName,\n    tvp.PlantLocation,\n    tvp.ViolationCount,\n    ROUND(tvp.TotalEmissions, 2) AS TotalEmissions,\n    ri.IncidentDate,\n    ri.IncidentDescription,\n    ri.IncidentSeverity,\n    mc.TotalMaintenanceCost,\n    ar.AuditDate,\n    ar.Auditor,\n    ar.Findings,\n    ar.Recommendations\nFROM TopViolatingPlants tvp\nLEFT JOIN RecentIncidents ri ON tvp.PlantID = ri.PlantID\nLEFT JOIN MaintenanceCosts mc ON tvp.PlantID = mc.PlantID\nLEFT JOIN AuditRecommendations ar ON tvp.PlantID = ar.PlantID\nORDER BY tvp.ViolationCount DESC, tvp.TotalEmissions DESC;",
            "meta-llama/llama-3.3-70b-instruct_response": "```sql\nWITH PlantIncidents AS (\n    SELECT \n        p.PlantID,\n        p.Name AS PlantName,\n        p.Type AS PlantType,\n        COUNT(i.IncidentID) AS TotalIncidentsCount,\n        MAX(i.Date) AS LastIncidentDate,\n        AVG(i.DurationHours) AS AvgIncidentDuration\n    FROM PowerPlant p\n    JOIN Incident i ON p.PlantID = i.PlantID\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH)\n    GROUP BY p.PlantID, p.Name, p.Type\n),\nPlantEmissions AS (\n    SELECT \n        p.PlantID,\n        AVG(e.CO2Emissions) AS AvgCO2Emissions,\n        AVG(e.SO2Emissions) AS AvgSO2Emissions,\n        AVG(e.NOxEmissions) AS AvgNOxEmissions,\n        AVG(e.ParticulateMatter) AS AvgParticulateMatter\n    FROM PowerPlant p\n    JOIN Emission e ON p.PlantID = e.PlantID\n    WHERE e.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH)\n    GROUP BY p.PlantID\n),\nPlantMaintenance AS (\n    SELECT \n        p.PlantID,\n        SUM(m.Cost) AS TotalMaintenanceCost,\n        COUNT(m.MaintenanceID) AS MaintenanceCount,\n        AVG(m.DurationHours) AS AvgMaintenanceDuration,\n        MAX(m.NextScheduledDate) AS NextMaintenanceDate\n    FROM PowerPlant p\n    JOIN Maintenance m ON p.PlantID = m.PlantID\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH)\n    GROUP BY p.PlantID\n),\nAuditRecommendations AS (\n    SELECT \n        p.PlantID,\n        a.Auditor,\n        a.Findings",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH PlantEmissions AS (\n    SELECT \n        p.PlantID,\n        p.Name AS PlantName,\n        AVG(e.CO2Emissions) AS AvgCO2Emissions,\n        AVG(e.SO2Emissions) AS AvgSO2Emissions,\n        AVG(e.NOxEmissions) AS AvgNOxEmissions,\n        AVG(e.ParticulateMatter) AS AvgParticulateMatter\n    FROM PowerPlant p\n    JOIN Emission e ON p.PlantID = e.PlantID\n    WHERE e.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH)\n    GROUP BY p.PlantID, p.Name\n),\nIncidentAnalysis AS (\n    SELECT \n        i.PlantID,\n        COUNT(i.IncidentID) AS TotalIncidentsCount,\n        MAX(i.Date) AS LastIncidentDate,\n        AVG(i.DurationHours) AS AvgIncidentDuration,\n        MAX(i.Severity) AS MaxIncidentSeverity\n    FROM Incident i\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH)\n    GROUP BY i.PlantID\n),\nMaintenanceAnalysis AS (\n    SELECT \n        m.PlantID,\n        SUM(m.Cost) AS TotalMaintenanceCost,\n        COUNT(m.MaintenanceID) AS MaintenanceCount,\n        AVG(m.DurationHours) AS AvgMaintenanceDuration,\n        MAX(m.NextScheduledDate) AS NextMaintenanceDate\n    FROM Maintenance m\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH)\n    GROUP BY m.PlantID\n),\nAuditRecommendations AS (\n    SELECT \n        a.PlantID,\n        a.Auditor,\n        a.Findings,\n        a.Recommendations,\n        a.ComplianceStatus,\n        a.FollowUpDate\n    FROM `Audit` a\n    WHERE a.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH)\n)\nSELECT \n    pe.PlantName,\n    pe.AvgCO2Emissions,\n    pe.AvgSO2Emissions,\n    pe.AvgNOxEmissions,\n    pe.AvgParticulateMatter,\n    ia.TotalIncidentsCount,\n    ia.LastIncidentDate,\n    ia.AvgIncidentDuration,\n    ia.MaxIncidentSeverity,\n    ma.TotalMaintenanceCost,\n    ma.MaintenanceCount,\n    ma.AvgMaintenanceDuration,\n    ma.NextMaintenanceDate,\n    ar.Auditor,\n    ar.Findings,\n    ar.Recommendations,\n    ar.ComplianceStatus,\n    ar.FollowUpDate\nFROM PlantEmissions pe\nJOIN IncidentAnalysis ia ON pe.PlantID = ia.PlantID\nJOIN MaintenanceAnalysis ma ON pe.PlantID = ma.PlantID\nJOIN AuditRecommendations ar ON pe.PlantID = ar.PlantID\nORDER BY ia.TotalIncidentsCount DESC, pe.AvgCO2Emissions DESC\nLIMIT 11;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH HighEmissionPlants AS (\n    SELECT \n        p.PlantID,\n        p.Name AS PlantName,\n        p.Type AS PlantType,\n        oc.Name AS OwnerName,\n        COUNT(DISTINCT e.EmissionID) AS ViolationCount,\n        AVG(e.CO2Emissions + e.SO2Emissions + e.NOxEmissions) AS AvgTotalEmissions\n    FROM PowerPlant p\n    JOIN OwnerCompany oc ON p.OwnerCompanyID = oc.CompanyID\n    JOIN Emission e ON p.PlantID = e.PlantID\n    WHERE e.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH)\n    AND e.ComplianceStatus = 'Не соответствует'\n    GROUP BY p.PlantID, p.Name, p.Type, oc.Name\n    ORDER BY ViolationCount DESC, AvgTotalEmissions DESC\n    LIMIT 11\n),\nPlantMaintenance AS (\n    SELECT \n        p.PlantID,\n        SUM(m.Cost) AS TotalMaintenanceCost,\n        MAX(m.Date) AS LastMaintenanceDate,\n        MAX(m.NextScheduledDate) AS NextMaintenanceDate\n    FROM HighEmissionPlants p\n    JOIN Maintenance m ON p.PlantID = m.PlantID\n    WHERE m.Status IN ('Завершено', 'В процессе')\n    GROUP BY p.PlantID\n),\nPlantIncidents AS (\n    SELECT \n        p.PlantID,\n        i.IncidentID,\n        i.Date AS IncidentDate,\n        i.Description AS IncidentDescription,\n        i.Severity,\n        i.Impact,\n        i.Resolution,\n        i.DurationHours\n    FROM HighEmissionPlants p\n    JOIN Incident i ON p.PlantID = i.PlantID\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH)\n),\nPlantAudits AS (\n    SELECT \n        p.PlantID,\n        a.AuditID,\n        a.Date AS AuditDate,\n        a.Auditor,\n        a.Findings,\n        a.Recommendations,\n        a.ComplianceStatus\n    FROM HighEmissionPlants p\n    JOIN `Audit` a ON p.PlantID = a.PlantID\n    WHERE a.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH)\n)\nSELECT \n    p.PlantName,\n    p.PlantType,\n    p.OwnerName,\n    p.ViolationCount,\n    ROUND(p.AvgTotalEmissions, 2) AS AvgTotalEmissions,\n    ROUND(pm.TotalMaintenanceCost, 2) AS TotalMaintenanceCost,\n    pm.LastMaintenanceDate,\n    pm.NextMaintenanceDate,\n    pi.IncidentDate,\n    pi.IncidentDescription,\n    pi.Severity,\n    pi.Impact,\n    pi.Resolution,\n    pi.DurationHours,\n    pa.AuditDate,\n    pa.Auditor,\n    pa.Findings,\n    pa.Recommendations,\n    pa.ComplianceStatus\nFROM HighEmissionPlants p\nLEFT JOIN PlantMaintenance pm ON p.PlantID = pm.PlantID\nLEFT JOIN PlantIncidents pi ON p.PlantID = pi.PlantID\nLEFT JOIN PlantAudits pa ON p.PlantID = pa.PlantID\nORDER BY p.ViolationCount DESC, p.AvgTotalEmissions DESC;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "WITH HighEmissionPlants AS (\n    SELECT \n        p.PlantID,\n        p.Name AS PlantName,\n        p.Type AS PlantType,\n        p.CapacityMW,\n        oc.Name AS OwnerName,\n        COUNT(e.EmissionID) AS ViolationCount,\n        AVG(e.CO2Emissions + e.SO2Emissions + e.NOxEmissions) AS TotalAvgEmissions\n    FROM PowerPlant p\n    JOIN OwnerCompany oc ON p.OwnerCompanyID = oc.CompanyID\n    JOIN Emission e ON p.PlantID = e.PlantID\n    WHERE e.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH)\n    AND e.ComplianceStatus = 'Не соответствует'\n    GROUP BY p.PlantID, p.Name, p.Type, p.CapacityMW, oc.Name\n    ORDER BY ViolationCount DESC, TotalAvgEmissions DESC\n    LIMIT 11\n),\nPlantIncidents AS (\n    SELECT \n        p.PlantID,\n        i.IncidentID,\n        i.Date AS IncidentDate,\n        i.Description AS IncidentDescription,\n        i.Severity,\n        i.Impact,\n        i.Resolution,\n        i.DurationHours\n    FROM HighEmissionPlants p\n    JOIN Incident i ON p.PlantID = i.PlantID\n    ORDER BY p.PlantID, i.Date DESC\n),\nPlantMaintenance AS (\n    SELECT \n        p.PlantID,\n        m.MaintenanceID,\n        m.Date AS MaintenanceDate,\n        m.Description AS MaintenanceDescription,\n        m.Cost,\n        m.Status AS MaintenanceStatus,\n        m.NextScheduledDate\n    FROM HighEmissionPlants p\n    JOIN Maintenance m ON p.PlantID = m.PlantID\n    WHERE m.Status IN ('В процессе', 'На рассмотрении')\n    ORDER BY p.PlantID, m.Date DESC\n),\nPlantAudits AS (\n    SELECT \n        p.PlantID,\n        a.AuditID,\n        a.Date AS AuditDate,\n        a.Auditor,\n        a.Findings,\n        a.Recommendations,\n        a.ComplianceStatus\n    FROM HighEmissionPlants p\n    JOIN `Audit` a ON p.PlantID = a.PlantID\n    WHERE a.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH)\n    ORDER BY p.PlantID, a.Date DESC\n)\nSELECT \n    h.PlantName,\n    h.PlantType,\n    h.CapacityMW,\n    h.OwnerName,\n    h.ViolationCount,\n    ROUND(h.TotalAvgEmissions, 2) AS TotalAvgEmissions,\n    pi.IncidentDate,\n    pi.IncidentDescription,\n    pi.Severity,\n    pi.Impact,\n    pi.Resolution,\n    pi.DurationHours AS IncidentDurationHours,\n    pm.MaintenanceDate,\n    pm.MaintenanceDescription,\n    pm.Cost AS MaintenanceCost,\n    pm.MaintenanceStatus,\n    pm.NextScheduledDate,\n    pa.AuditDate,\n    pa.Auditor,\n    pa.Findings,\n    pa.Recommendations,\n    pa.ComplianceStatus AS AuditComplianceStatus\nFROM HighEmissionPlants h\nLEFT JOIN PlantIncidents pi ON h.PlantID = pi.PlantID\nLEFT JOIN PlantMaintenance pm ON h.PlantID = pm.PlantID\nLEFT JOIN PlantAudits pa ON h.PlantID = pa.PlantID\nORDER BY h.ViolationCount DESC, h.TotalAvgEmissions DESC, pi.IncidentDate DESC, pm.MaintenanceDate DESC, pa.AuditDate DESC;",
            "gigachat_response": "WITH TopNonCompliantPlants AS (\n    SELECT \n        ep.PlantID,\n        ep.Name AS PlantName,\n        ep.Location,\n        ep.CommissionDate,\n        ep.OwnerCompanyID,\n        COUNT(*) AS NonComplianceCount,\n        SUM(ep.CO2Emissions + ep.SO2Emissions + ep.NOxEmissions + ep.ParticulateMatter) AS TotalPollution\n    FROM Emission ep\n    WHERE ep.ComplianceStatus <> 'Соответствует' \n      AND ep.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH)\n    GROUP BY ep.PlantID, ep.Name, ep.Location, ep.CommissionDate, ep.OwnerCompanyID\n    ORDER BY NonComplianceCount DESC, TotalPollution DESC\n    LIMIT 11\n),\nLatestIncidents AS (\n    SELECT \n        ti.PlantID,\n        MAX(ti.Date) AS LatestIncidentDate,\n        STRING_AGG(CONCAT('Описание инцидента:', ti.Description, ', Решение:', ti.Resolution), '; ') AS IncidentsSummary\n    FROM Incident ti\n    WHERE ti.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH)\n    GROUP BY ti.PlantID\n),\nLastAudits AS (\n    SELECT \n        ta.PlantID,\n        MAX(ta.Date) AS LatestAuditDate,\n        STRING_AGG(CONCAT('Рекомендации аудита:', ta.Recommendations), '; ') AS AuditRecommendations\n    FROM `Audit` ta\n    WHERE ta.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH)\n    GROUP BY ta.PlantID\n),\nRecentMaintenance AS (\n    SELECT \n        rm.PlantID,\n        SUM(rm.Cost) AS RecentMaintenanceCost\n    FROM Maintenance rm\n    WHERE rm.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH)\n    GROUP BY rm.PlantID\n)\nSELECT \n    tn.Plants.*,\n    li.LatestIncidentDate,\n    li.IncidentsSummary,\n    la.LatestAuditDate,\n    la.AuditRecommendations,\n    rm.RecentMaintenanceCost\nFROM TopNonCompliantPlants tn\nLEFT JOIN LatestIncidents li ON tn.PlantID = li.PlantID\nLEFT JOIN LastAudits la ON tn.PlantID = la.PlantID\nLEFT JOIN RecentMaintenance rm ON tn.PlantID = rm.PlantID\nORDER BY tn.NonComplianceCount DESC, tn.TotalPollution DESC;",
            "gigachat_response_ru": "WITH HighEmissionPlants AS (\n    SELECT \n        ep.PlantID,\n        ep.Name AS PlantName,\n        ep.Location,\n        ep.CommissionDate,\n        ep.OwnerCompanyID,\n        AVG(em.CO2Emissions + em.SO2Emissions + em.NOxEmissions + em.ParticulateMatter) AS TotalEmissions\n    FROM PowerPlant ep\n    JOIN Emission em ON ep.PlantID = em.PlantID\n    WHERE em.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH)\n      AND em.ComplianceStatus <> 'Соответствует'\n    GROUP BY ep.PlantID, ep.Name, ep.Location, ep.CommissionDate, ep.OwnerCompanyID\n    HAVING AVG(em.CO2Emissions + em.SO2Emissions + em.NOxEmissions + em.ParticulateMatter) > (\n        SELECT AVG(CO2Emissions + SO2Emissions + NOxEmissions + ParticulateMatter) * 1.5\n        FROM Emission\n        WHERE Date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH)\n    )\n),\nLastIncidents AS (\n    SELECT \n        hi.PlantID,\n        i.Description AS IncidentDescription,\n        i.Severity,\n        i.Impact,\n        i.Resolution,\n        i.DurationHours,\n        i.ReportedBy\n    FROM HighEmissionPlants hi\n    LEFT JOIN Incident i ON hi.PlantID = i.PlantID\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH)\n    ORDER BY i.Date DESC\n    LIMIT 1\n),\nLatestAudits AS (\n    SELECT \n        hi.PlantID,\n        a.Findings AS AuditFindings,\n        a.Recommendations AS AuditRecommendations,\n        a.ComplianceStatus AS AuditComplianceStatus\n    FROM HighEmissionPlants hi\n    LEFT JOIN `Audit` a ON hi.PlantID = a.PlantID\n    WHERE a.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH)\n    ORDER BY a.Date DESC\n    LIMIT 1\n),\nRecentMaintenance AS (\n    SELECT \n        hi.PlantID,\n        m.Description AS MaintenanceDescription,\n        m.Cost AS MaintenanceCost,\n        m.PerformedBy AS MaintenancePerformedBy\n    FROM HighEmissionPlants hi\n    LEFT JOIN Maintenance m ON hi.PlantID = m.PlantID\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH)\n    ORDER BY m.Date DESC\n    LIMIT 1\n)\nSELECT \n    hep.PlantName,\n    hep.Location,\n    hep.TotalEmissions,\n    li.IncidentDescription,\n    li.Severity,\n    li.Impact,\n    li.Resolution,\n    li.DurationHours,\n    li.ReportedBy,\n    la.AuditFindings,\n    la.AuditRecommendations,\n    rm.MaintenanceDescription,\n    rm.MaintenanceCost,\n    rm.MaintenancePerformedBy\nFROM HighEmissionPlants hep\nLEFT JOIN LastIncidents li ON hep.PlantID = li.PlantID\nLEFT JOIN LatestAudits la ON hep.PlantID = la.PlantID\nLEFT JOIN RecentMaintenance rm ON hep.PlantID = rm.PlantID\nORDER BY hep.TotalEmissions DESC\nLIMIT 11;"
        },
        {
            "question": "Найти топ-12 потребителей с нестабильным потреблением энергии и высокими затратами за последний год, которые используют несколько типов счетчиков, и показать для каждого потребителя информацию о паттернах потребления, стоимости контрактов и рекомендациях по оптимизации.",
            "sql_query": "WITH ConsumerPatterns AS (\n    SELECT \n        c.ConsumerID,\n        c.Name AS ConsumerName,\n        c.Type AS ConsumerType,\n        c.ConsumptionPattern,\n        c.AverageMonthlyConsumption,\n        COUNT(DISTINCT m.Type) AS MeterTypesCount,\n        MAX(m.LastReadingDate) AS LastReadingDate,\n        AVG(m.LastReading) AS AvgReading\n    FROM Consumer c\n    JOIN Meter m ON c.ConsumerID = m.ConsumerID\n    WHERE m.LastReadingDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY c.ConsumerID, c.Name, c.Type, c.ConsumptionPattern, c.AverageMonthlyConsumption\n),\nContractAnalysis AS (\n    SELECT \n        c.ConsumerID,\n        AVG(ct.PricePerUnit) AS AvgPricePerUnit,\n        SUM(ct.Volume) AS TotalContractVolume,\n        COUNT(DISTINCT ct.ContractID) AS ActiveContractsCount\n    FROM Consumer c\n    JOIN `Contract` ct ON c.ConsumerID = ct.ConsumerID\n    WHERE ct.Status = 'active'\n    GROUP BY c.ConsumerID\n),\nConsumptionVariability AS (\n    SELECT \n        c.ConsumerID,\n        STDDEV(m.LastReading) AS ConsumptionStdDev,\n        MAX(m.LastReading) - MIN(m.LastReading) AS ConsumptionRange\n    FROM Consumer c\n    JOIN Meter m ON c.ConsumerID = m.ConsumerID\n    WHERE m.LastReadingDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY c.ConsumerID\n)\nSELECT \n    cp.ConsumerName,\n    cp.ConsumerType,\n    cp.ConsumptionPattern,\n    ROUND(cp.AverageMonthlyConsumption, 2) AS AvgMonthlyConsumption,\n    cp.MeterTypesCount,\n    ROUND(ca.AvgPricePerUnit, 2) AS AvgPricePerUnit,\n    ROUND(ca.TotalContractVolume, 2) AS TotalContractVolume,\n    ca.ActiveContractsCount,\n    ROUND(cv.ConsumptionStdDev, 2) AS ConsumptionVariability,\n    ROUND(cv.ConsumptionRange, 2) AS ConsumptionRange,\n    CASE \n        WHEN cv.ConsumptionStdDev > cp.AverageMonthlyConsumption * 0.3 THEN 'Высокая нестабильность потребления'\n        WHEN cv.ConsumptionStdDev > cp.AverageMonthlyConsumption * 0.15 THEN 'Средняя нестабильность потребления'\n        ELSE 'Низкая нестабильность потребления'\n    END AS ConsumptionStability\nFROM ConsumerPatterns cp\nJOIN ContractAnalysis ca ON cp.ConsumerID = ca.ConsumerID\nJOIN ConsumptionVariability cv ON cp.ConsumerID = cv.ConsumerID\nORDER BY cv.ConsumptionStdDev DESC, cp.AverageMonthlyConsumption DESC\nLIMIT 12;",
            "gpt-4o_response": "WITH ConsumerMeterTypes AS (\n    SELECT \n        c.ConsumerID,\n        c.Name AS ConsumerName,\n        c.ConsumptionPattern,\n        COUNT(DISTINCT m.Type) AS MeterTypesCount\n    FROM Consumer c\n    JOIN Meter m ON c.ConsumerID = m.ConsumerID\n    GROUP BY c.ConsumerID, c.Name, c.ConsumptionPattern\n    HAVING COUNT(DISTINCT m.Type) > 1\n),\nConsumerContracts AS (\n    SELECT \n        c.ConsumerID,\n        SUM(ct.PricePerUnit * ct.Volume) AS TotalContractCost\n    FROM Consumer c\n    JOIN `Contract` ct ON c.ConsumerID = ct.ConsumerID\n    WHERE ct.Status = 'active' AND ct.EndDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY c.ConsumerID\n),\nConsumerRecommendations AS (\n    SELECT \n        a.ConsumerID,\n        a.Recommendations\n    FROM `Audit` a\n    JOIN PowerPlant p ON a.PlantID = p.PlantID\n    JOIN Consumer c ON p.OwnerCompanyID = c.ConsumerID\n    WHERE a.ComplianceStatus = 'Не соблюдено'\n)\nSELECT \n    cm.ConsumerName,\n    cm.ConsumptionPattern,\n    cm.MeterTypesCount,\n    cc.TotalContractCost,\n    cr.Recommendations\nFROM ConsumerMeterTypes cm\nJOIN ConsumerContracts cc ON cm.ConsumerID = cc.ConsumerID\nLEFT JOIN ConsumerRecommendations cr ON cm.ConsumerID = cr.ConsumerID\nORDER BY cc.TotalContractCost DESC\nLIMIT 12;",
            "gpt-4o_response_ru": "WITH ConsumerMeterCount AS (\n    SELECT \n        c.ConsumerID,\n        c.Name AS ConsumerName,\n        c.ConsumptionPattern,\n        COUNT(DISTINCT m.MeterID) AS MeterTypesCount\n    FROM Consumer c\n    JOIN Meter m ON c.ConsumerID = m.ConsumerID\n    GROUP BY c.ConsumerID, c.Name, c.ConsumptionPattern\n    HAVING COUNT(DISTINCT m.MeterID) > 1\n),\nConsumerContracts AS (\n    SELECT \n        c.ConsumerID,\n        SUM(ct.PricePerUnit * ct.Volume) AS TotalContractCost\n    FROM Consumer c\n    JOIN `Contract` ct ON c.ConsumerID = ct.ConsumerID\n    WHERE ct.StartDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY c.ConsumerID\n),\nConsumerRecommendations AS (\n    SELECT \n        a.PlantID,\n        a.Findings,\n        a.Recommendations\n    FROM `Audit` a\n    WHERE a.ComplianceStatus = 'Не соблюдено'\n)\nSELECT \n    cmc.ConsumerName,\n    cmc.ConsumptionPattern,\n    cmc.MeterTypesCount,\n    cct.TotalContractCost,\n    cr.Findings,\n    cr.Recommendations\nFROM ConsumerMeterCount cmc\nJOIN ConsumerContracts cct ON cmc.ConsumerID = cct.ConsumerID\nLEFT JOIN ConsumerRecommendations cr ON cmc.ConsumerID = cr.PlantID\nORDER BY cct.TotalContractCost DESC\nLIMIT 12;",
            "google/gemini-2.0-flash-001_response": "WITH UnstableConsumers AS (\n    SELECT\n        c.ConsumerID,\n        c.Name AS ConsumerName,\n        c.Type AS ConsumerType,\n        c.Location AS ConsumerLocation,\n        c.ContactName AS ConsumerContactName,\n        c.ContactPhone AS ConsumerContactPhone,\n        c.ContactEmail AS ConsumerContactEmail,\n        c.ConsumptionPattern,\n        c.AverageMonthlyConsumption,\n        COUNT(DISTINCT m.Type) AS MeterTypeCount\n    FROM Consumer c\n    JOIN Meter m ON c.ConsumerID = m.ConsumerID\n    GROUP BY c.ConsumerID, c.Name, c.Type, c.Location, c.ContactName, c.ContactPhone, c.ContactEmail, c.ConsumptionPattern, c.AverageMonthlyConsumption\n    HAVING COUNT(DISTINCT m.Type) > 1\n),\nContractCosts AS (\n    SELECT\n        c.ConsumerID,\n        SUM(ct.PricePerUnit * ct.Volume) AS TotalContractCost\n    FROM Consumer c\n    JOIN `Contract` ct ON c.ConsumerID = ct.ConsumerID\n    WHERE ct.StartDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY c.ConsumerID\n),\nConsumptionVolatility AS (\n    SELECT\n        c.ConsumerID,\n        STDDEV(m.LastReading) AS ConsumptionVolatility\n    FROM Consumer c\n    JOIN Meter m ON c.ConsumerID = m.ConsumerID\n    WHERE m.LastReadingDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY c.ConsumerID\n    HAVING STDDEV(m.LastReading) > (SELECT AVG(STDDEV(LastReading)) FROM Meter WHERE LastReadingDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR))\n)\nSELECT\n    uc.ConsumerName,\n    uc.ConsumerType,\n    uc.ConsumerLocation,\n    uc.ContactName,\n    uc.ContactPhone,\n    uc.ContactEmail,\n    uc.ConsumptionPattern,\n    uc.AverageMonthlyConsumption,\n    cc.TotalContractCost,\n    cv.ConsumptionVolatility,\n    'Рекомендации по оптимизации: Анализ пиковых нагрузок, переход на энергосберегающее оборудование, оптимизация графиков потребления.' AS OptimizationRecommendations\nFROM UnstableConsumers uc\nJOIN ContractCosts cc ON uc.ConsumerID = cc.ConsumerID\nJOIN ConsumptionVolatility cv ON uc.ConsumerID = cv.ConsumerID\nORDER BY cc.TotalContractCost DESC, cv.ConsumptionVolatility DESC\nLIMIT 12;",
            "google/gemini-2.0-flash-001_response_ru": "WITH ConsumerConsumption AS (\n    SELECT\n        c.ConsumerID,\n        c.Name AS ConsumerName,\n        c.Type AS ConsumerType,\n        c.Location AS ConsumerLocation,\n        c.ContactName AS ConsumerContactName,\n        c.ContactPhone AS ConsumerContactPhone,\n        c.ContactEmail AS ConsumerContactEmail,\n        c.ConsumptionPattern,\n        c.AverageMonthlyConsumption,\n        SUM(ct.PricePerUnit * ct.Volume) AS TotalCost,\n        COUNT(DISTINCT m.Type) AS MeterTypeCount\n    FROM Consumer c\n    JOIN `Contract` ct ON c.ConsumerID = ct.ConsumerID\n    JOIN Meter m ON c.ConsumerID = m.ConsumerID\n    WHERE ct.StartDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY c.ConsumerID, c.Name, c.Type, c.Location, c.ContactName, c.ContactPhone, c.ContactEmail, c.ConsumptionPattern, c.AverageMonthlyConsumption\n    HAVING COUNT(DISTINCT m.Type) > 1\n),\nConsumptionVolatility AS (\n    SELECT\n        ConsumerID,\n        STDDEV(AverageMonthlyConsumption) AS ConsumptionVolatility\n    FROM ConsumerConsumption\n    GROUP BY ConsumerID\n    HAVING STDDEV(AverageMonthlyConsumption) > (SELECT AVG(STDDEV(AverageMonthlyConsumption)) FROM Consumer GROUP BY 1)\n)\nSELECT\n    cc.ConsumerName,\n    cc.ConsumerType,\n    cc.ConsumerLocation,\n    cc.ConsumerContactName,\n    cc.ConsumerContactPhone,\n    cc.ConsumerContactEmail,\n    cc.ConsumptionPattern,\n    ROUND(cc.AverageMonthlyConsumption, 2) AS AverageMonthlyConsumption,\n    ROUND(cc.TotalCost, 2) AS TotalCostLastYear,\n    cc.MeterTypeCount,\n    ROUND(cv.ConsumptionVolatility, 2) AS ConsumptionVolatility,\n    'Рекомендации по оптимизации: 1. Провести энергоаудит. 2. Оптимизировать тарифный план. 3. Установить энергосберегающее оборудование.' AS OptimizationRecommendations\nFROM ConsumerConsumption cc\nJOIN ConsumptionVolatility cv ON cc.ConsumerID = cv.ConsumerID\nORDER BY cv.ConsumptionVolatility DESC, cc.TotalCost DESC\nLIMIT 12;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH UnstableConsumers AS (\n    SELECT \n        c.ConsumerID,\n        c.Name AS ConsumerName,\n        c.Type AS ConsumerType,\n        c.Location,\n        c.ContactName,\n        c.ContactPhone,\n        c.ContactEmail,\n        c.ConsumptionPattern,\n        c.AverageMonthlyConsumption,\n        COUNT(DISTINCT m.MeterID) AS MeterCount,\n        SUM(ct.PricePerUnit * ct.Volume) AS TotalContractCost\n    FROM Consumer c\n    JOIN `Contract` ct ON c.ConsumerID = ct.ConsumerID\n    JOIN Meter m ON c.ConsumerID = m.ConsumerID\n    WHERE ct.Status = 'active'\n    GROUP BY c.ConsumerID, c.Name, c.Type, c.Location, c.ContactName, c.ContactPhone, c.ContactEmail, c.ConsumptionPattern, c.AverageMonthlyConsumption\n    HAVING COUNT(DISTINCT m.Type) > 1 AND SUM(ct.PricePerUnit * ct.Volume) > 1000000\n),\nConsumerEmissions AS (\n    SELECT \n        c.ConsumerID,\n        AVG(e.CO2Emissions) AS AvgCO2Emissions\n    FROM Consumer c\n    JOIN `Contract` ct ON c.ConsumerID = ct.ConsumerID\n    JOIN Supplier s ON ct.SupplierID = s.SupplierID\n    JOIN EnergySource es ON s.SourceID = es.SourceID\n    JOIN Emission e ON es.SourceID = e.SourceID\n    WHERE ct.Status = 'active' AND e.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY c.ConsumerID\n),\nRecommendations AS (\n    SELECT \n        c.ConsumerID,\n        'Оптимизация потребления энергии' AS Recommendation\n    FROM Consumer c\n    JOIN UnstableConsumers uc ON c.ConsumerID = uc.ConsumerID\n    WHERE uc.MeterCount > 1 AND uc.TotalContractCost > 1000000\n)\nSELECT \n    uc.ConsumerName,\n    uc.ConsumerType,\n    uc.Location,\n    uc.ContactName,\n    uc.ContactPhone,\n    uc.ContactEmail,\n    uc.ConsumptionPattern,\n    uc.AverageMonthlyConsumption,\n    uc.MeterCount,\n    uc.TotalContractCost,\n    r.Recommendation\nFROM UnstableConsumers uc\nJOIN Recommendations r ON uc.ConsumerID = r.ConsumerID\nORDER BY uc.TotalContractCost DESC\nLIMIT 12;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH ConsumerAnalysis AS (\n    SELECT \n        c.ConsumerID,\n        c.Name AS ConsumerName,\n        c.Type AS ConsumerType,\n        c.Location,\n        c.ContactName,\n        c.ContactPhone,\n        c.ContactEmail,\n        c.ConsumptionPattern,\n        c.AverageMonthlyConsumption,\n        COUNT(DISTINCT m.MeterID) AS MeterCount,\n        SUM(ct.PricePerUnit * ct.Volume) AS TotalContractCost\n    FROM Consumer c\n    JOIN `Contract` ct ON c.ConsumerID = ct.ConsumerID\n    JOIN Meter m ON c.ConsumerID = m.ConsumerID\n    WHERE ct.Status = 'active'\n    GROUP BY c.ConsumerID, c.Name, c.Type, c.Location, c.ContactName, c.ContactPhone, c.ContactEmail, c.ConsumptionPattern, c.AverageMonthlyConsumption\n),\nUnstableConsumers AS (\n    SELECT \n        ca.ConsumerID,\n        ca.ConsumerName,\n        ca.ConsumerType,\n        ca.Location,\n        ca.ContactName,\n        ca.ContactPhone,\n        ca.ContactEmail,\n        ca.ConsumptionPattern,\n        ca.AverageMonthlyConsumption,\n        ca.MeterCount,\n        ca.TotalContractCost\n    FROM ConsumerAnalysis ca\n    WHERE ca.ConsumptionPattern LIKE '%Низкий%' OR ca.ConsumptionPattern LIKE '%Высокий%'\n),\nTopConsumers AS (\n    SELECT \n        uc.ConsumerID,\n        uc.ConsumerName,\n        uc.ConsumerType,\n        uc.Location,\n        uc.ContactName,\n        uc.ContactPhone,\n        uc.ContactEmail,\n        uc.ConsumptionPattern,\n        uc.AverageMonthlyConsumption,\n        uc.MeterCount,\n        uc.TotalContractCost,\n        ROW_NUMBER() OVER (ORDER BY uc.TotalContractCost DESC, uc.MeterCount DESC) AS RowNum\n    FROM UnstableConsumers uc\n    WHERE uc.MeterCount > 1\n)\nSELECT \n    tc.ConsumerName,\n    tc.ConsumerType,\n    tc.Location,\n    tc.ContactName,\n    tc.ContactPhone,\n    tc.ContactEmail,\n    tc.ConsumptionPattern,\n    ROUND(tc.AverageMonthlyConsumption, 2) AS AverageMonthlyConsumption,\n    tc.MeterCount,\n    ROUND(tc.TotalContractCost, 2) AS TotalContractCost,\n    CASE \n        WHEN tc.AverageMonthlyConsumption > 20000 THEN 'Высокие затраты'\n        WHEN tc.AverageMonthlyConsumption > 10000 THEN 'Средние затраты'\n        ELSE 'Низкие затраты'\n    END AS CostLevel,\n    CASE \n        WHEN tc.MeterCount > 3 THEN 'Много типов счетчиков'\n        WHEN tc.MeterCount > 1 THEN 'Несколько типов счетчиков'\n        ELSE 'Один тип счетчика'\n    END AS MeterLevel\nFROM TopConsumers tc\nWHERE tc.RowNum <= 12\nORDER BY tc.TotalContractCost DESC, tc.MeterCount DESC;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH UnstableConsumers AS (\n    SELECT \n        c.ConsumerID,\n        c.Name AS ConsumerName,\n        c.Type AS ConsumerType,\n        c.Location,\n        c.ConsumptionPattern,\n        c.AverageMonthlyConsumption,\n        COUNT(DISTINCT m.Type) AS MeterTypesCount,\n        MAX(m.LastReadingDate) AS LastReadingDate,\n        DATEDIFF(CURRENT_DATE, MAX(m.LastReadingDate)) AS DaysSinceLastReading,\n        ABS(c.AverageMonthlyConsumption - (SELECT AVG(AverageMonthlyConsumption) FROM Consumer)) / (SELECT AVG(AverageMonthlyConsumption) FROM Consumer) AS ConsumptionDeviation,\n        SUM(ct.PricePerUnit * ct.Volume) AS TotalContractCost\n    FROM Consumer c\n    JOIN Meter m ON c.ConsumerID = m.ConsumerID\n    JOIN `Contract` ct ON c.ConsumerID = ct.ConsumerID\n    WHERE ct.Status = 'active' \n    GROUP BY c.ConsumerID, c.Name, c.Type, c.Location, c.ConsumptionPattern, c.AverageMonthlyConsumption\n    HAVING COUNT(DISTINCT m.Type) > 1 AND AVG(ct.PricePerUnit) > (\n        SELECT AVG(PricePerUnit) \n        FROM `Contract` \n        WHERE Status = 'active'\n    )\n)\nSELECT \n    uc.ConsumerName,\n    uc.ConsumerType,\n    uc.Location,\n    uc.ConsumptionPattern,\n    ROUND(uc.AverageMonthlyConsumption, 2) AS AverageMonthlyConsumption,\n    uc.MeterTypesCount,\n    ROUND(uc.TotalContractCost, 2) AS TotalContractCost,\n    ROUND(uc.ConsumptionDeviation * 100, 2) AS ConsumptionDeviationPercentage,\n    CASE \n        WHEN uc.ConsumptionPattern LIKE '%высокий%' THEN CASE \n            WHEN uc.ConsumptionDeviation > 0.5 THEN 'Установка интеллектуальных счетчиков и системы мониторинга'\n            ELSE 'Пересмотр тарифного плана'\n        END\n        WHEN uc.ConsumptionPattern LIKE '%переменный%' THEN CASE \n            WHEN uc.MeterTypesCount >= 2 THEN 'Унификация систем учета'\n            ELSE 'Оптимизация графиков потребления'\n        END\n        ELSE CASE \n            WHEN uc.TotalContractCost > 10000 THEN 'Переговоры о скидке на объем'\n            ELSE 'Анализ возможности перехода на другой тариф'\n        END\n    END AS OptimizationRecommendation\nFROM UnstableConsumers uc\nORDER BY uc.ConsumptionDeviation DESC, uc.TotalContractCost DESC\nLIMIT 12;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "WITH UnstableConsumers AS (\n    SELECT \n        c.ConsumerID,\n        c.Name AS ConsumerName,\n        c.Type AS ConsumerType,\n        c.ConsumptionPattern,\n        c.AverageMonthlyConsumption,\n        COUNT(DISTINCT m.Type) AS MeterTypesCount,\n        STDDEV(m.LastReading) AS ConsumptionVariability,\n        SUM(ct.PricePerUnit * ct.Volume) AS TotalContractCost\n    FROM Consumer c\n    JOIN Meter m ON c.ConsumerID = m.ConsumerID\n    JOIN `Contract` ct ON c.ConsumerID = ct.ConsumerID\n    WHERE ct.Status = 'active'\n    GROUP BY c.ConsumerID, c.Name, c.Type, c.ConsumptionPattern, c.AverageMonthlyConsumption\n    HAVING COUNT(DISTINCT m.Type) > 1 AND STDDEV(m.LastReading) > 0.2 * AVG(m.LastReading)\n)\nSELECT \n    uc.ConsumerName,\n    uc.ConsumerType,\n    uc.ConsumptionPattern,\n    ROUND(uc.AverageMonthlyConsumption, 2) AS AvgMonthlyConsumption,\n    uc.MeterTypesCount,\n    ROUND(uc.ConsumptionVariability, 2) AS ConsumptionStabilityIndex,\n    ROUND(uc.TotalContractCost, 2) AS TotalContractCost,\n    CASE \n        WHEN uc.ConsumptionVariability > 0.5 * uc.AverageMonthlyConsumption THEN 'Высокая нестабильность - рекомендуется установка сглаживающих систем'\n        ELSE 'Умеренная нестабильность - рекомендуется оптимизация графика потребления'\n    END AS OptimizationRecommendation,\n    GROUP_CONCAT(DISTINCT m.Type SEPARATOR ', ') AS MeterTypesUsed\nFROM UnstableConsumers uc\nJOIN Meter m ON uc.ConsumerID = m.ConsumerID\nGROUP BY uc.ConsumerName, uc.ConsumerType, uc.ConsumptionPattern, uc.AverageMonthlyConsumption, \n         uc.MeterTypesCount, uc.ConsumptionVariability, uc.TotalContractCost\nORDER BY uc.ConsumptionVariability DESC, uc.TotalContractCost DESC\nLIMIT 12;",
            "gigachat_response": "WITH UnstableHighCostConsumers AS (\n    SELECT \n        c.ConsumerID,\n        c.Name AS ConsumerName,\n        c.Location,\n        c.ContactName,\n        c.ContactPhone,\n        c.ContactEmail,\n        c.ConsumptionPattern,\n        c.AverageMonthlyConsumption,\n        COUNT(DISTINCT m.MeterID) AS DifferentMeterTypesCount,\n        AVG(coalesce(ct.PricePerUnit, tar.PricePerUnit)) AS AvgContractTariffPrice,\n        SUM(coalesce(ct.Volume, tar.PricePerUnit * c.AverageMonthlyConsumption)) AS TotalExpenditureLastYear\n    FROM Consumer c\n    LEFT JOIN Meter m ON c.ConsumerID = m.ConsumerID\n    LEFT JOIN `Contract` ct ON c.ConsumerID = ct.ConsumerID\n    LEFT JOIN Tariff tar ON c.ConsumerID = tar.TariffID\n    WHERE c.ConsumptionPattern LIKE '%нестабильный%' OR c.ConsumptionPattern LIKE '%переменный%'\n      AND (ct.EndDate >= DATE_SUB(NOW(), INTERVAL 1 YEAR) OR tar.ValidTo >= DATE_SUB(NOW(), INTERVAL 1 YEAR))\n    GROUP BY c.ConsumerID, c.Name, c.Location, c.ContactName, c.ContactPhone, c.ContactEmail, c.ConsumptionPattern, c.AverageMonthlyConsumption\n    HAVING DifferentMeterTypesCount > 1\n       AND TotalExpenditureLastYear > 10000 -- Adjust threshold based on actual expenditure scale\n), \nOptimizationRecommendations AS (\n    SELECT \n        uc.ConsumerID,\n        CASE \n            WHEN uc.AvgContractTariffPrice > 0.15 THEN 'Переход на ночной тариф'\n            WHEN uc.DifferentMeterTypesCount > 3 THEN 'Оптимизация типа счетчика'\n            ELSE 'Анализ энергопотребления и оптимизация нагрузок'\n        END AS OptimizationRecommendation\n    FROM UnstableHighCostConsumers uc\n)\nSELECT \n    uhc.ConsumerName,\n    uhc.Location,\n    uhc.ContactName,\n    uhc.ContactPhone,\n    uhc.ContactEmail,\n    uhc.ConsumptionPattern,\n    uhc.AverageMonthlyConsumption,\n    o.OptimizationRecommendation,\n    uhc.AvgContractTariffPrice,\n    uhc.TotalExpenditureLastYear\nFROM UnstableHighCostConsumers uhc\nJOIN OptimizationRecommendations o ON uhc.ConsumerID = o.ConsumerID\nORDER BY uhc.TotalExpenditureLastYear DESC\nLIMIT 12;",
            "gigachat_response_ru": "WITH UnstableHighCostConsumers AS (\n    SELECT \n        c.ConsumerID,\n        c.Name AS ConsumerName,\n        c.Location,\n        c.ContactName,\n        c.ContactPhone,\n        c.ContactEmail,\n        c.ConsumptionPattern,\n        c.AverageMonthlyConsumption,\n        COUNT(DISTINCT m.MeterID) AS DifferentMeterTypesCount,\n        AVG(coalesce(ct.PricePerUnit, tar.PricePerUnit)) AS AvgContractTariffPrice\n    FROM Consumer c\n    LEFT JOIN Meter m ON c.ConsumerID = m.ConsumerID\n    LEFT JOIN `Contract` ct ON c.ConsumerID = ct.ConsumerID\n    LEFT JOIN Tariff tar ON c.ConsumerID = tar.TariffID -- Предположительно связь между потребителем и тарифом возможна через ID тарифа\n    WHERE c.ConsumptionPattern LIKE '%нестабильный%' OR c.ConsumptionPattern LIKE '%переменный%'\n      AND (ct.EndDate IS NULL OR ct.EndDate >= NOW() - INTERVAL 1 YEAR)\n    GROUP BY c.ConsumerID, c.Name, c.Location, c.ContactName, c.ContactPhone, c.ContactEmail, c.ConsumptionPattern, c.AverageMonthlyConsumption\n    HAVING DifferentMeterTypesCount > 1\n       AND AvgContractTariffPrice > (\n           SELECT AVG(AvgContractTariffPrice)\n           FROM (\n               SELECT AVG(coalesce(ct.PricePerUnit, tar.PricePerUnit)) AS AvgContractTariffPrice\n               FROM Consumer c\n               LEFT JOIN `Contract` ct ON c.ConsumerID = ct.ConsumerID\n               LEFT JOIN Tariff tar ON c.ConsumerID = tar.TariffID\n               WHERE (ct.EndDate IS NULL OR ct.EndDate >= NOW() - INTERVAL 1 YEAR)\n               GROUP BY c.ConsumerID\n           ) subquery\n       )\n), OptimizationRecommendations AS (\n    SELECT \n        uc.ConsumerID,\n        uc.ConsumerName,\n        uc.Location,\n        uc.ContactName,\n        uc.ContactPhone,\n        uc.ContactEmail,\n        uc.ConsumptionPattern,\n        uc.AverageMonthlyConsumption,\n        uc.DifferentMeterTypesCount,\n        uc.AvgContractTariffPrice,\n        CASE \n            WHEN uc.ConsumptionPattern LIKE '%зима%' THEN 'Оптимизация зимнего энергопотребления'\n            WHEN uc.ConsumptionPattern LIKE '%лето%' THEN 'Оптимизация летнего энергопотребления'\n            ELSE 'Анализ сезонной динамики потребления'\n        END AS RecommendedOptimizationAction\n    FROM UnstableHighCostConsumers uc\n)\nSELECT *\nFROM OptimizationRecommendations\nORDER BY AvgContractTariffPrice DESC\nLIMIT 12;"
        },
        {
            "question": "Найти топ-46 компаний-владельцев электростанций с наиболее сложной экологической историей за последний год, анализируя выбросы, инциденты, аудиторские проверки и потенциальные экологические риски, с оценкой стратегий устойчивого развития.",
            "sql_query": "WITH CompanyEmissionAnalysis AS (\n    SELECT \n        oc.CompanyID,\n        oc.Name AS CompanyName,\n        COUNT(DISTINCT e.EmissionID) AS EmissionReportsCount,\n        AVG(e.CO2Emissions) AS AvgCO2Emissions,\n        COUNT(CASE WHEN e.ComplianceStatus = 'Не соответствует' THEN 1 END) AS NonComplianceCount\n    FROM OwnerCompany oc\n    JOIN PowerPlant p ON oc.CompanyID = p.OwnerCompanyID\n    JOIN Emission e ON p.PlantID = e.PlantID\n    WHERE e.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY oc.CompanyID, oc.Name\n),\nCompanyIncidentAnalysis AS (\n    SELECT \n        oc.CompanyID,\n        COUNT(DISTINCT i.IncidentID) AS TotalIncidentsCount,\n        COUNT(CASE WHEN i.Severity = 'Критическая' THEN 1 END) AS CriticalIncidentsCount,\n        MAX(i.Date) AS LastIncidentDate\n    FROM OwnerCompany oc\n    JOIN PowerPlant p ON oc.CompanyID = p.OwnerCompanyID\n    JOIN Incident i ON p.PlantID = i.PlantID\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY oc.CompanyID\n),\nCompanyAuditAnalysis AS (\n    SELECT \n        oc.CompanyID,\n        COUNT(DISTINCT a.AuditID) AS AuditCount,\n        COUNT(CASE WHEN a.ComplianceStatus = 'Не соблюдено' THEN 1 END) AS NonComplianceAudits,\n        MAX(a.Date) AS LastAuditDate\n    FROM OwnerCompany oc\n    JOIN PowerPlant p ON oc.CompanyID = p.OwnerCompanyID\n    JOIN `Audit` a ON p.PlantID = a.PlantID\n    WHERE a.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY oc.CompanyID\n)\nSELECT \n    cea.CompanyName,\n    ROUND(cea.AvgCO2Emissions, 2) AS AvgCO2Emissions,\n    cea.EmissionReportsCount,\n    cea.NonComplianceCount,\n    cia.TotalIncidentsCount,\n    cia.CriticalIncidentsCount,\n    caa.AuditCount,\n    caa.NonComplianceAudits,\n    CASE \n        WHEN cea.NonComplianceCount > 3 OR cia.CriticalIncidentsCount > 2 THEN 'Критический экологический риск'\n        WHEN cea.NonComplianceCount > 1 OR cia.CriticalIncidentsCount > 0 THEN 'Высокий экологический риск'\n        ELSE 'Средний экологический риск'\n    END AS EnvironmentalRiskLevel\nFROM CompanyEmissionAnalysis cea\nJOIN CompanyIncidentAnalysis cia ON cea.CompanyID = cia.CompanyID\nJOIN CompanyAuditAnalysis caa ON cea.CompanyID = caa.CompanyID\nORDER BY cea.NonComplianceCount DESC, cia.CriticalIncidentsCount DESC\nLIMIT 46;",
            "gpt-4o_response": "WITH EmissionAnalysis AS (\n    SELECT \n        pp.OwnerCompanyID,\n        AVG(e.CO2Emissions) AS AvgCO2Emissions,\n        AVG(e.SO2Emissions) AS AvgSO2Emissions,\n        AVG(e.NOxEmissions) AS AvgNOxEmissions,\n        AVG(e.ParticulateMatter) AS AvgParticulateMatter\n    FROM PowerPlant pp\n    JOIN Emission e ON pp.PlantID = e.PlantID\n    WHERE e.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY pp.OwnerCompanyID\n),\nIncidentAnalysis AS (\n    SELECT \n        pp.OwnerCompanyID,\n        COUNT(i.IncidentID) AS TotalIncidents,\n        COUNT(CASE WHEN i.Severity = 'Критическая' THEN 1 END) AS CriticalIncidents,\n        AVG(i.DurationHours) AS AvgIncidentDuration\n    FROM PowerPlant pp\n    JOIN Incident i ON pp.PlantID = i.PlantID\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY pp.OwnerCompanyID\n),\nAuditAnalysis AS (\n    SELECT \n        pp.OwnerCompanyID,\n        COUNT(a.AuditID) AS TotalAudits,\n        COUNT(CASE WHEN a.ComplianceStatus = 'Не соблюдено' THEN 1 END) AS NonCompliantAudits\n    FROM PowerPlant pp\n    JOIN `Audit` a ON pp.PlantID = a.PlantID\n    WHERE a.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY pp.OwnerCompanyID\n),\nOwnerCompanyRisk AS (\n    SELECT \n        oc.CompanyID,\n        oc.Name AS CompanyName,\n        ea.AvgCO2Emissions,\n        ea.AvgSO2Emissions,\n        ea.AvgNOxEmissions,\n        ea.AvgParticulateMatter,\n        ia.TotalIncidents,\n        ia.CriticalIncidents,\n        ia.AvgIncidentDuration,\n        aa.TotalAudits,\n        aa.NonCompliantAudits,\n        (ea.AvgCO2Emissions + ea.AvgSO2Emissions + ea.AvgNOxEmissions + ea.AvgParticulateMatter) AS TotalEmissions,\n        (ia.CriticalIncidents + aa.NonCompliantAudits) AS RiskFactors\n    FROM OwnerCompany oc\n    LEFT JOIN EmissionAnalysis ea ON oc.CompanyID = ea.OwnerCompanyID\n    LEFT JOIN IncidentAnalysis ia ON oc.CompanyID = ia.OwnerCompanyID\n    LEFT JOIN AuditAnalysis aa ON oc.CompanyID = aa.OwnerCompanyID\n)\nSELECT \n    ocr.CompanyName,\n    ROUND(ocr.TotalEmissions, 2) AS TotalEmissions,\n    ocr.TotalIncidents,\n    ocr.CriticalIncidents,\n    ROUND(ocr.AvgIncidentDuration, 2) AS AvgIncidentDuration,\n    ocr.TotalAudits,\n    ocr.NonCompliantAudits,\n    ocr.RiskFactors,\n    CASE \n        WHEN ocr.RiskFactors > 5 THEN 'Высокий риск'\n        WHEN ocr.RiskFactors > 2 THEN 'Средний риск'\n        ELSE 'Низкий риск'\n    END AS RiskLevel\nFROM OwnerCompanyRisk ocr\nORDER BY ocr.RiskFactors DESC, ocr.TotalEmissions DESC\nLIMIT 46;",
            "gpt-4o_response_ru": "WITH RecentEmissions AS (\n    SELECT \n        pp.OwnerCompanyID,\n        AVG(e.CO2Emissions) AS AvgCO2Emissions,\n        AVG(e.SO2Emissions) AS AvgSO2Emissions,\n        AVG(e.NOxEmissions) AS AvgNOxEmissions,\n        AVG(e.ParticulateMatter) AS AvgParticulateMatter\n    FROM PowerPlant pp\n    JOIN Emission e ON pp.PlantID = e.PlantID\n    WHERE e.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY pp.OwnerCompanyID\n),\nRecentIncidents AS (\n    SELECT \n        pp.OwnerCompanyID,\n        COUNT(i.IncidentID) AS TotalIncidents,\n        COUNT(CASE WHEN i.Severity = 'Критическая' THEN 1 END) AS CriticalIncidents\n    FROM PowerPlant pp\n    JOIN Incident i ON pp.PlantID = i.PlantID\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY pp.OwnerCompanyID\n),\nRecentAudits AS (\n    SELECT \n        pp.OwnerCompanyID,\n        COUNT(a.AuditID) AS TotalAudits,\n        COUNT(CASE WHEN a.ComplianceStatus = 'Не соблюдено' THEN 1 END) AS NonCompliantAudits\n    FROM PowerPlant pp\n    JOIN `Audit` a ON pp.PlantID = a.PlantID\n    WHERE a.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY pp.OwnerCompanyID\n),\nOwnerCompanyAnalysis AS (\n    SELECT \n        oc.CompanyID,\n        oc.Name AS CompanyName,\n        COALESCE(re.AvgCO2Emissions, 0) AS AvgCO2Emissions,\n        COALESCE(re.AvgSO2Emissions, 0) AS AvgSO2Emissions,\n        COALESCE(re.AvgNOxEmissions, 0) AS AvgNOxEmissions,\n        COALESCE(re.AvgParticulateMatter, 0) AS AvgParticulateMatter,\n        COALESCE(ri.TotalIncidents, 0) AS TotalIncidents,\n        COALESCE(ri.CriticalIncidents, 0) AS CriticalIncidents,\n        COALESCE(ra.TotalAudits, 0) AS TotalAudits,\n        COALESCE(ra.NonCompliantAudits, 0) AS NonCompliantAudits\n    FROM OwnerCompany oc\n    LEFT JOIN RecentEmissions re ON oc.CompanyID = re.OwnerCompanyID\n    LEFT JOIN RecentIncidents ri ON oc.CompanyID = ri.OwnerCompanyID\n    LEFT JOIN RecentAudits ra ON oc.CompanyID = ra.OwnerCompanyID\n)\nSELECT \n    oca.CompanyName,\n    oca.AvgCO2Emissions,\n    oca.AvgSO2Emissions,\n    oca.AvgNOxEmissions,\n    oca.AvgParticulateMatter,\n    oca.TotalIncidents,\n    oca.CriticalIncidents,\n    oca.TotalAudits,\n    oca.NonCompliantAudits,\n    CASE \n        WHEN oca.CriticalIncidents > 2 OR oca.NonCompliantAudits > 1 THEN 'Высокий риск'\n        WHEN oca.CriticalIncidents > 0 OR oca.NonCompliantAudits > 0 THEN 'Средний риск'\n        ELSE 'Низкий риск'\n    END AS RiskLevel\nFROM OwnerCompanyAnalysis oca\nORDER BY oca.CriticalIncidents DESC, oca.NonCompliantAudits DESC, oca.TotalIncidents DESC\nLIMIT 46;",
            "google/gemini-2.0-flash-001_response": "WITH EnvironmentalHistory AS (\n    SELECT\n        p.PlantID,\n        p.Name AS PlantName,\n        oc.CompanyID,\n        oc.Name AS CompanyName,\n        SUM(e.CO2Emissions + e.SO2Emissions + e.NOxEmissions + e.ParticulateMatter) AS TotalEmissions,\n        COUNT(DISTINCT i.IncidentID) AS TotalIncidents,\n        COUNT(DISTINCT a.AuditID) AS TotalAudits\n    FROM PowerPlant p\n    JOIN OwnerCompany oc ON p.OwnerCompanyID = oc.CompanyID\n    LEFT JOIN Emission e ON p.PlantID = e.PlantID AND e.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    LEFT JOIN Incident i ON p.PlantID = i.PlantID AND i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    LEFT JOIN `Audit` a ON p.PlantID = a.PlantID AND a.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY p.PlantID, p.Name, oc.CompanyID, oc.Name\n),\nRiskAssessment AS (\n    SELECT\n        eh.CompanyID,\n        eh.CompanyName,\n        eh.PlantName,\n        eh.TotalEmissions,\n        eh.TotalIncidents,\n        eh.TotalAudits,\n        (eh.TotalEmissions * 0.4 + eh.TotalIncidents * 0.3 + eh.TotalAudits * 0.3) AS EnvironmentalRiskScore\n    FROM EnvironmentalHistory eh\n),\nSustainabilityStrategies AS (\n    SELECT\n        oc.CompanyID,\n        oc.Name AS CompanyName,\n        COUNT(DISTINCT r.RegulationID) AS RegulationsCount,\n        SUM(CASE WHEN r.Name LIKE '%возобновляемых источников энергии%' THEN 1 ELSE 0 END) AS RenewableEnergyFocus,\n        AVG(CASE WHEN r.ComplianceRequirements LIKE '%снижения выбросов%' THEN 10 ELSE 0 END) AS EmissionReductionFocus\n    FROM OwnerCompany oc\n    LEFT JOIN PowerPlant p ON oc.CompanyID = p.OwnerCompanyID\n    LEFT JOIN `Audit` a ON p.PlantID = a.PlantID\n    LEFT JOIN Regulation r ON 1=1\n    GROUP BY oc.CompanyID, oc.Name\n)\nSELECT\n    ra.CompanyName,\n    ra.PlantName,\n    ra.TotalEmissions,\n    ra.TotalIncidents,\n    ra.TotalAudits,\n    ROUND(ra.EnvironmentalRiskScore, 2) AS EnvironmentalRiskScore,\n    ss.RegulationsCount,\n    ss.RenewableEnergyFocus,\n    ss.EmissionReductionFocus\nFROM RiskAssessment ra\nJOIN SustainabilityStrategies ss ON ra.CompanyID = ss.CompanyID\nORDER BY ra.EnvironmentalRiskScore DESC\nLIMIT 46;",
            "google/gemini-2.0-flash-001_response_ru": "WITH CompanyEnvironmentalData AS (\n    SELECT\n        oc.CompanyID,\n        oc.Name AS CompanyName,\n        oc.Headquarters,\n        oc.Industry,\n        COUNT(DISTINCT e.EmissionID) AS TotalEmissions,\n        SUM(e.CO2Emissions) AS TotalCO2Emissions,\n        SUM(e.SO2Emissions) AS TotalSO2Emissions,\n        SUM(e.NOxEmissions) AS TotalNOxEmissions,\n        SUM(e.ParticulateMatter) AS TotalParticulateMatter,\n        COUNT(DISTINCT i.IncidentID) AS TotalIncidents,\n        COUNT(DISTINCT a.AuditID) AS TotalAudits,\n        SUM(CASE WHEN a.ComplianceStatus = 'Не соблюдено' THEN 1 ELSE 0 END) AS NonComplianceAudits\n    FROM OwnerCompany oc\n    LEFT JOIN PowerPlant pp ON oc.CompanyID = pp.OwnerCompanyID\n    LEFT JOIN Emission e ON pp.PlantID = e.PlantID AND e.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    LEFT JOIN Incident i ON pp.PlantID = i.PlantID AND i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    LEFT JOIN `Audit` a ON pp.PlantID = a.PlantID AND a.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY oc.CompanyID, oc.Name, oc.Headquarters, oc.Industry\n),\nRiskAssessment AS (\n    SELECT\n        CompanyID,\n        CompanyName,\n        Headquarters,\n        Industry,\n        TotalEmissions,\n        TotalCO2Emissions,\n        TotalSO2Emissions,\n        TotalNOxEmissions,\n        TotalParticulateMatter,\n        TotalIncidents,\n        TotalAudits,\n        NonComplianceAudits,\n        (TotalEmissions * 0.3 + TotalIncidents * 0.4 + NonComplianceAudits * 0.3) AS EnvironmentalRiskScore\n    FROM CompanyEnvironmentalData\n)\nSELECT\n    ra.CompanyName,\n    ra.Headquarters,\n    ra.Industry,\n    ra.TotalEmissions,\n    ROUND(ra.TotalCO2Emissions, 2) AS TotalCO2Emissions,\n    ROUND(ra.TotalSO2Emissions, 2) AS TotalSO2Emissions,\n    ROUND(ra.TotalNOxEmissions, 2) AS TotalNOxEmissions,\n    ROUND(ra.TotalParticulateMatter, 2) AS TotalParticulateMatter,\n    ra.TotalIncidents,\n    ra.TotalAudits,\n    ra.NonComplianceAudits,\n    ROUND(ra.EnvironmentalRiskScore, 2) AS EnvironmentalRiskScore\nFROM RiskAssessment ra\nORDER BY ra.EnvironmentalRiskScore DESC\nLIMIT 46;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH OwnerCompanyEmissions AS (\n    SELECT \n        oc.CompanyID,\n        oc.Name AS CompanyName,\n        SUM(e.CO2Emissions) AS TotalCO2Emissions,\n        SUM(e.SO2Emissions) AS TotalSO2Emissions,\n        SUM(e.NOxEmissions) AS TotalNOxEmissions,\n        SUM(e.ParticulateMatter) AS TotalParticulateMatter\n    FROM OwnerCompany oc\n    JOIN PowerPlant pp ON oc.CompanyID = pp.OwnerCompanyID\n    JOIN Emission e ON pp.PlantID = e.PlantID\n    WHERE e.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY oc.CompanyID, oc.Name\n),\nOwnerCompanyIncidents AS (\n    SELECT \n        oc.CompanyID,\n        oc.Name AS CompanyName,\n        COUNT(i.IncidentID) AS TotalIncidentsCount,\n        COUNT(CASE WHEN i.Severity = 'Критическая' THEN 1 END) AS CriticalIncidentsCount,\n        MAX(i.Date) AS LastIncidentDate,\n        AVG(i.DurationHours) AS AvgIncidentDuration\n    FROM OwnerCompany oc\n    JOIN PowerPlant pp ON oc.CompanyID = pp.OwnerCompanyID\n    JOIN Incident i ON pp.PlantID = i.PlantID\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY oc.CompanyID, oc.Name\n),\nOwnerCompanyAudits AS (\n    SELECT \n        oc.CompanyID,\n        oc.Name AS CompanyName,\n        COUNT(a.AuditID) AS TotalAuditsCount,\n        COUNT(CASE WHEN a.ComplianceStatus = 'Не соблюдено' THEN 1 END) AS NonComplianceAuditsCount,\n        MAX(a.Date) AS LastAuditDate,\n        AVG(a.DurationHours) AS AvgAuditDuration\n    FROM OwnerCompany oc\n    JOIN PowerPlant pp ON oc.CompanyID = pp.OwnerCompanyID\n    JOIN `Audit` a ON pp.PlantID = a.PlantID\n    WHERE a.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY oc.CompanyID, oc.Name\n),\nOwnerCompanySustainability AS (\n    SELECT \n        oc.CompanyID,\n        oc.Name AS CompanyName,\n        SUM(CASE WHEN r.Name LIKE '%устойчивость%' THEN 1 ELSE 0 END) AS SustainabilityRegulationsCount,\n        SUM(CASE WHEN r.Name LIKE '%экология%' THEN 1 ELSE 0 END) AS EcologyRegulationsCount\n    FROM OwnerCompany oc\n    JOIN PowerPlant pp ON oc.CompanyID = pp.OwnerCompanyID\n    JOIN Regulation r ON 1=1\n    WHERE r.EffectiveDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY oc.CompanyID, oc.Name\n)\nSELECT \n    oce.CompanyName,\n    oce.TotalCO2Emissions,\n    oce.TotalSO2Emissions,\n    oce.TotalNOxEmissions,\n    oce.TotalParticulateMatter,\n    oci.TotalIncidentsCount,\n    oci.CriticalIncidentsCount,\n    oci.AvgIncidentDuration,\n    oca.TotalAuditsCount,\n    oca.NonComplianceAuditsCount,\n    oca.AvgAuditDuration,\n    os.SustainabilityRegulationsCount,\n    os.EcologyRegulationsCount,\n    CASE \n        WHEN oce.TotalCO2Emissions > 10000 THEN 'Критический уровень рисков'\n        WHEN oce.TotalCO2Emissions > 5000 THEN 'Высокий уровень рисков'\n        ELSE 'Средний уровень рисков'\n    END AS RiskLevel,\n    CASE \n        WHEN os.SustainabilityRegulationsCount > 2 THEN 'Высокий уровень устойчивости'\n        WHEN os.SustainabilityRegulationsCount > 0 THEN 'Средний уровень устойчивости'\n        ELSE 'Низкий уровень устойчивости'\n    END AS SustainabilityLevel\nFROM OwnerCompanyEmissions oce\nJOIN OwnerCompanyIncidents oci ON oce.CompanyID = oci.CompanyID\nJOIN OwnerCompanyAudits oca ON oce.CompanyID = oca.CompanyID\nJOIN OwnerCompanySustainability os ON oce.CompanyID = os.CompanyID\nORDER BY oce.TotalCO2Emissions DESC, oci.CriticalIncidentsCount DESC\nLIMIT 46;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH CompanyEmissions AS (\n    SELECT \n        oc.CompanyID,\n        oc.Name AS CompanyName,\n        SUM(e.CO2Emissions) AS TotalCO2Emissions,\n        SUM(e.SO2Emissions) AS TotalSO2Emissions,\n        SUM(e.NOxEmissions) AS TotalNOxEmissions,\n        SUM(e.ParticulateMatter) AS TotalParticulateMatter\n    FROM OwnerCompany oc\n    JOIN PowerPlant pp ON oc.CompanyID = pp.OwnerCompanyID\n    JOIN Emission e ON pp.PlantID = e.PlantID\n    WHERE e.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY oc.CompanyID, oc.Name\n),\nCompanyIncidents AS (\n    SELECT \n        oc.CompanyID,\n        oc.Name AS CompanyName,\n        COUNT(i.IncidentID) AS TotalIncidentsCount,\n        COUNT(CASE WHEN i.Severity = 'Критическая' THEN 1 END) AS CriticalIncidentsCount,\n        MAX(i.Date) AS LastIncidentDate,\n        AVG(i.DurationHours) AS AvgIncidentDuration\n    FROM OwnerCompany oc\n    JOIN PowerPlant pp ON oc.CompanyID = pp.OwnerCompanyID\n    JOIN Incident i ON pp.PlantID = i.PlantID\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY oc.CompanyID, oc.Name\n),\nCompanyAudits AS (\n    SELECT \n        oc.CompanyID,\n        oc.Name AS CompanyName,\n        COUNT(a.AuditID) AS TotalAuditsCount,\n        COUNT(CASE WHEN a.ComplianceStatus = 'Не соблюдено' THEN 1 END) AS NonComplianceAuditsCount,\n        MAX(a.Date) AS LastAuditDate\n    FROM OwnerCompany oc\n    JOIN PowerPlant pp ON oc.CompanyID = pp.OwnerCompanyID\n    JOIN `Audit` a ON pp.PlantID = a.PlantID\n    WHERE a.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY oc.CompanyID, oc.Name\n),\nCompanyRiskAssessment AS (\n    SELECT \n        ce.CompanyID,\n        ce.CompanyName,\n        ce.TotalCO2Emissions,\n        ce.TotalSO2Emissions,\n        ce.TotalNOxEmissions,\n        ce.TotalParticulateMatter,\n        ci.TotalIncidentsCount,\n        ci.CriticalIncidentsCount,\n        ci.AvgIncidentDuration,\n        ca.TotalAuditsCount,\n        ca.NonComplianceAuditsCount,\n        ROW_NUMBER() OVER (ORDER BY ce.TotalCO2Emissions DESC, ci.CriticalIncidentsCount DESC, ca.NonComplianceAuditsCount DESC) AS RiskRank\n    FROM CompanyEmissions ce\n    JOIN CompanyIncidents ci ON ce.CompanyID = ci.CompanyID\n    JOIN CompanyAudits ca ON ce.CompanyID = ca.CompanyID\n)\nSELECT \n    cra.CompanyName,\n    cra.TotalCO2Emissions,\n    cra.TotalSO2Emissions,\n    cra.TotalNOxEmissions,\n    cra.TotalParticulateMatter,\n    cra.TotalIncidentsCount,\n    cra.CriticalIncidentsCount,\n    cra.AvgIncidentDuration,\n    cra.TotalAuditsCount,\n    cra.NonComplianceAuditsCount,\n    CASE \n        WHEN cra.CriticalIncidentsCount > 2 THEN 'Критический уровень рисков'\n        WHEN cra.CriticalIncidentsCount > 0 THEN 'Высокий уровень рисков'\n        ELSE 'Средний уровень рисков'\n    END AS RiskLevel\nFROM CompanyRiskAssessment cra\nWHERE cra.RiskRank <= 46\nORDER BY cra.RiskRank;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH EnvironmentalData AS (\n    SELECT \n        oc.CompanyID,\n        oc.Name AS CompanyName,\n        COUNT(DISTINCT e.EmissionID) AS EmissionReports,\n        SUM(e.CO2Emissions + e.SO2Emissions + e.NOxEmissions + e.ParticulateMatter) AS TotalEmissionVolume,\n        COUNT(DISTINCT CASE WHEN e.ComplianceStatus = 'Не соответствует' THEN e.EmissionID END) AS NonComplianceEmissionCount,\n        COUNT(DISTINCT i.IncidentID) AS IncidentsCount,\n        COUNT(DISTINCT CASE WHEN i.Severity IN ('Высокая', 'Критическая') THEN i.IncidentID END) AS HighSeverityIncidents,\n        COUNT(DISTINCT a.AuditID) AS AuditCount,\n        COUNT(DISTINCT CASE WHEN a.ComplianceStatus IN ('Не соблюдено', 'Частично соблюдено') THEN a.AuditID END) AS NonComplianceAuditCount,\n        COUNT(DISTINCT pp.PlantID) AS PlantCount,\n        SUM(CASE WHEN pp.Type = 'ТЭС' THEN 1 ELSE 0 END) AS FossilFuelPlants,\n        SUM(CASE WHEN es.Renewable = TRUE THEN 1 ELSE 0 END) AS RenewableEnergyPlants\n    FROM OwnerCompany oc\n    JOIN PowerPlant pp ON oc.CompanyID = pp.OwnerCompanyID\n    LEFT JOIN Emission e ON pp.PlantID = e.PlantID AND e.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    LEFT JOIN Incident i ON pp.PlantID = i.PlantID AND i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    LEFT JOIN `Audit` a ON pp.PlantID = a.PlantID AND a.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    LEFT JOIN EnergySource es ON pp.Type = CASE \n        WHEN es.Type = 'Водная' THEN 'ГЭС'\n        WHEN es.Type = 'Возобновляемая' THEN CASE WHEN es.Name = 'Солнечная энергия' THEN 'СЭС' ELSE 'ВЭС' END\n        ELSE pp.Type\n    END\n    GROUP BY oc.CompanyID, oc.Name\n),\nSustainabilityScore AS (\n    SELECT \n        *,\n        (NonComplianceEmissionCount * 0.3 + HighSeverityIncidents * 0.3 + NonComplianceAuditCount * 0.2 + FossilFuelPlants * 0.2 - RenewableEnergyPlants * 0.1) AS EnvironmentalRiskScore,\n        (RenewableEnergyPlants * 0.5 - FossilFuelPlants * 0.3 - NonComplianceEmissionCount * 0.2) AS SustainabilityScore\n    FROM EnvironmentalData\n)\nSELECT \n    CompanyName,\n    EmissionReports,\n    ROUND(TotalEmissionVolume, 2) AS TotalEmissionVolume,\n    NonComplianceEmissionCount,\n    IncidentsCount,\n    HighSeverityIncidents,\n    AuditCount,\n    NonComplianceAuditCount,\n    PlantCount,\n    FossilFuelPlants,\n    RenewableEnergyPlants,\n    ROUND(EnvironmentalRiskScore, 2) AS EnvironmentalRiskScore,\n    ROUND(SustainabilityScore, 2) AS SustainabilityScore,\n    CASE \n        WHEN SustainabilityScore > 0 THEN 'Развивающаяся стратегия'\n        WHEN SustainabilityScore > -1 THEN 'Начальная стадия'\n        ELSE 'Отсутствие стратегии'\n    END AS SustainabilityStrategy\nFROM SustainabilityScore\nORDER BY EnvironmentalRiskScore DESC, SustainabilityScore ASC, PlantCount DESC\nLIMIT 46;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "WITH PlantEmissions AS (\n    SELECT \n        p.PlantID,\n        p.OwnerCompanyID,\n        oc.Name AS OwnerName,\n        SUM(e.CO2Emissions + e.SO2Emissions + e.NOxEmissions + e.ParticulateMatter) AS TotalEmissions,\n        COUNT(e.EmissionID) AS EmissionReportsCount,\n        AVG(e.CO2Emissions) AS AvgCO2Emissions\n    FROM PowerPlant p\n    JOIN OwnerCompany oc ON p.OwnerCompanyID = oc.CompanyID\n    JOIN Emission e ON p.PlantID = e.PlantID\n    WHERE e.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY p.PlantID, p.OwnerCompanyID, oc.Name\n),\nPlantIncidents AS (\n    SELECT \n        p.PlantID,\n        p.OwnerCompanyID,\n        COUNT(i.IncidentID) AS IncidentCount,\n        SUM(CASE WHEN i.Severity = 'Критическая' THEN 1 ELSE 0 END) AS CriticalIncidents,\n        SUM(i.DurationHours) AS TotalDowntimeHours\n    FROM PowerPlant p\n    JOIN Incident i ON p.PlantID = i.PlantID\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY p.PlantID, p.OwnerCompanyID\n),\nPlantAudits AS (\n    SELECT \n        p.PlantID,\n        p.OwnerCompanyID,\n        COUNT(a.AuditID) AS AuditCount,\n        SUM(CASE WHEN a.ComplianceStatus = 'Не соблюдено' THEN 1 ELSE 0 END) AS FailedAudits,\n        MAX(a.FollowUpDate) AS LastFollowUpDate\n    FROM PowerPlant p\n    JOIN `Audit` a ON p.PlantID = a.PlantID\n    WHERE a.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY p.PlantID, p.OwnerCompanyID\n),\nCompanyRiskScore AS (\n    SELECT \n        oc.CompanyID,\n        oc.Name AS CompanyName,\n        oc.Headquarters,\n        oc.CEO,\n        COUNT(DISTINCT pe.PlantID) AS PlantsCount,\n        COALESCE(SUM(pe.TotalEmissions), 0) AS TotalEmissions,\n        COALESCE(SUM(pe.EmissionReportsCount), 0) AS EmissionReportsCount,\n        COALESCE(SUM(pi.IncidentCount), 0) AS IncidentCount,\n        COALESCE(SUM(pi.CriticalIncidents), 0) AS CriticalIncidents,\n        COALESCE(SUM(pi.TotalDowntimeHours), 0) AS TotalDowntimeHours,\n        COALESCE(SUM(pa.AuditCount), 0) AS AuditCount,\n        COALESCE(SUM(pa.FailedAudits), 0) AS FailedAudits,\n        (COALESCE(SUM(pe.TotalEmissions), 0) * 0.4) + \n        (COALESCE(SUM(pi.IncidentCount), 0) * 0.3) + \n        (COALESCE(SUM(pi.CriticalIncidents), 0) * 0.5) + \n        (COALESCE(SUM(pa.FailedAudits), 0) * 0.3) AS RiskScore\n    FROM OwnerCompany oc\n    LEFT JOIN PowerPlant p ON oc.CompanyID = p.OwnerCompanyID\n    LEFT JOIN PlantEmissions pe ON p.PlantID = pe.PlantID\n    LEFT JOIN PlantIncidents pi ON p.PlantID = pi.PlantID\n    LEFT JOIN PlantAudits pa ON p.PlantID = pa.PlantID\n    GROUP BY oc.CompanyID, oc.Name, oc.Headquarters, oc.CEO\n)\nSELECT \n    CompanyID,\n    CompanyName,\n    Headquarters,\n    CEO,\n    PlantsCount,\n    ROUND(TotalEmissions, 2) AS TotalEmissions,\n    EmissionReportsCount,\n    IncidentCount,\n    CriticalIncidents,\n    ROUND(TotalDowntimeHours, 2) AS TotalDowntimeHours,\n    AuditCount,\n    FailedAudits,\n    ROUND(RiskScore, 2) AS RiskScore,\n    CASE \n        WHEN RiskScore > 50 THEN 'Очень высокий риск'\n        WHEN RiskScore > 30 THEN 'Высокий риск'\n        WHEN RiskScore > 15 THEN 'Средний риск'\n        ELSE 'Низкий риск'\n    END AS RiskLevel\nFROM CompanyRiskScore\nORDER BY RiskScore DESC\nLIMIT 46;",
            "gigachat_response": "WITH EnvironmentalHistory AS (\n    -- Анализ выбросов за последний год\n    SELECT \n        ep.PlantID,\n        AVG(ep.CO2Emissions + ep.SO2Emissions + ep.NOxEmissions + ep.ParticulateMatter) AS AvgTotalEmissions\n    FROM Emission ep\n    WHERE ep.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY ep.PlantID\n), \nIncidentAnalysis AS (\n    -- Инцидентность на станциях за последний год\n    SELECT \n        i.PlantID,\n        COUNT(i.IncidentID) AS IncidentCount,\n        SUM(i.DurationHours) AS TotalIncidentDuration\n    FROM Incident i\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY i.PlantID\n), \nAuditFindings AS (\n    -- Аудиторы выявили проблемы за последний год\n    SELECT \n        a.PlantID,\n        COUNT(a.AuditID) AS AuditCount,\n        SUM(CASE WHEN a.ComplianceStatus != 'Соблюдено' THEN 1 ELSE 0 END) AS NonCompliantAudits\n    FROM `Audit` a\n    WHERE a.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY a.PlantID\n), \nSustainabilityScore AS (\n    -- Оцениваем стратегию устойчивого развития владельцев\n    SELECT \n        oc.CompanyID,\n        AVG(es.Efficiency) AS AvgEnergyEfficiency,\n        SUM(CASE WHEN es.Renewable THEN 1 ELSE 0 END) / COUNT(*) AS RenewableRatio\n    FROM OwnerCompany oc\n    LEFT JOIN PowerPlant pp ON oc.CompanyID = pp.OwnerCompanyID\n    LEFT JOIN EnergySource es ON pp.Type = es.Type\n    GROUP BY oc.CompanyID\n)\n-- Объединяем данные и получаем итоговую оценку сложности экологической истории\nSELECT \n    oc.Name AS CompanyName,\n    oc.Headquarters,\n    oc.Revenue,\n    eh.AvgTotalEmissions,\n    ia.IncidentCount,\n    ia.TotalIncidentDuration,\n    af.NonCompliantAudits,\n    ss.AvgEnergyEfficiency,\n    ss.RenewableRatio\nFROM OwnerCompany oc\nLEFT JOIN PowerPlant pp ON oc.CompanyID = pp.OwnerCompanyID\nLEFT JOIN EnvironmentalHistory eh ON pp.PlantID = eh.PlantID\nLEFT JOIN IncidentAnalysis ia ON pp.PlantID = ia.PlantID\nLEFT JOIN AuditFindings af ON pp.PlantID = af.PlantID\nLEFT JOIN SustainabilityScore ss ON oc.CompanyID = ss.CompanyID\nWHERE eh.AvgTotalEmissions IS NOT NULL OR ia.IncidentCount IS NOT NULL OR af.NonCompliantAudits IS NOT NULL\nGROUP BY oc.CompanyID, oc.Name, oc.Headquarters, oc.Revenue, eh.AvgTotalEmissions, ia.IncidentCount, ia.TotalIncidentDuration, af.NonCompliantAudits, ss.AvgEnergyEfficiency, ss.RenewableRatio\nORDER BY eh.AvgTotalEmissions DESC, ia.IncidentCount DESC, af.NonCompliantAudits DESC\nLIMIT 46;",
            "gigachat_response_ru": "WITH EnvironmentalHistory AS (\n    -- Анализ выбросов за последний год\n    SELECT \n        e.PlantID,\n        AVG(e.CO2Emissions + e.SO2Emissions + e.NOxEmissions + e.ParticulateMatter) AS AvgTotalEmissions\n    FROM Emission e\n    WHERE e.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY e.PlantID\n), \nIncidentAnalysis AS (\n    -- Инцидентность на станциях за последний год\n    SELECT \n        i.PlantID,\n        COUNT(i.IncidentID) AS IncidentCount,\n        SUM(i.DurationHours) AS TotalIncidentDuration\n    FROM Incident i\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY i.PlantID\n), \nAuditFindings AS (\n    -- Аудиторы выявили проблемы за последний год\n    SELECT \n        a.PlantID,\n        COUNT(a.AuditID) AS AuditCount,\n        SUM(CASE WHEN a.ComplianceStatus != 'Соблюдено' THEN 1 ELSE 0 END) AS NonCompliantAudits\n    FROM `Audit` a\n    WHERE a.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY a.PlantID\n), \nStationEnvironmentScore AS (\n    -- Итоговая оценка сложности экологии по каждому объекту\n    SELECT \n        pp.PlantID,\n        pp.Name AS PlantName,\n        AVG(AvgTotalEmissions) AS EmissionsScore,\n        AVG(IncidentCount) AS IncidentScore,\n        AVG(NonCompliantAudits) AS AuditScore,\n        AVG(TotalIncidentDuration) AS IncidentDurationScore\n    FROM PowerPlant pp\n    LEFT JOIN EnvironmentalHistory eh ON pp.PlantID = eh.PlantID\n    LEFT JOIN IncidentAnalysis ia ON pp.PlantID = ia.PlantID\n    LEFT JOIN AuditFindings af ON pp.PlantID = af.PlantID\n    GROUP BY pp.PlantID, pp.Name\n), \nOwnerCompaniesWithComplexEnvironment AS (\n    -- Суммируем оценки всех принадлежащих станций владельцу\n    SELECT \n        oc.CompanyID,\n        oc.Name AS CompanyName,\n        SUM(EmissionsScore) AS TotalEmissionsScore,\n        SUM(IncidentScore) AS TotalIncidentScore,\n        SUM(AuditScore) AS TotalAuditScore,\n        SUM(IncidentDurationScore) AS TotalIncidentDurationScore\n    FROM OwnerCompany oc\n    JOIN PowerPlant pp ON oc.CompanyID = pp.OwnerCompanyID\n    JOIN StationEnvironmentScore ses ON pp.PlantID = ses.PlantID\n    GROUP BY oc.CompanyID, oc.Name\n)\n-- Финальный результат: Топ-46 владельцев с самой сложной экологической ситуацией\nSELECT *\nFROM OwnerCompaniesWithComplexEnvironment\nORDER BY TotalEmissionsScore DESC, TotalIncidentScore DESC, TotalAuditScore DESC\nLIMIT 46;"
        },
        {
            "question": "Найти топ-47 электростанций с наиболее сложной системой технического обслуживания за последний год, анализируя затраты, длительность ремонтов, влияние на производительность и стратегические возможности модернизации.",
            "sql_query": "WITH PlantMaintenanceAnalysis AS (\n    SELECT \n        p.PlantID,\n        p.Name AS PlantName,\n        p.Type AS PlantType,\n        COUNT(m.MaintenanceID) AS MaintenanceCount,\n        SUM(m.Cost) AS TotalMaintenanceCost,\n        AVG(m.Cost) AS AvgMaintenanceCost,\n        AVG(m.DurationHours) AS AvgMaintenanceDuration,\n        MAX(m.Date) AS LastMaintenanceDate\n    FROM PowerPlant p\n    JOIN Maintenance m ON p.PlantID = m.PlantID\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY p.PlantID, p.Name, p.Type\n),\nPlantPerformanceImpact AS (\n    SELECT \n        p.PlantID,\n        COUNT(DISTINCT i.IncidentID) AS MaintenanceRelatedIncidents,\n        AVG(i.DurationHours) AS AvgIncidentDuration\n    FROM PowerPlant p\n    JOIN Maintenance m ON p.PlantID = m.PlantID\n    JOIN Incident i ON p.PlantID = i.PlantID\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    AND i.Date >= m.Date\n    GROUP BY p.PlantID\n),\nPlantAuditRecommendations AS (\n    SELECT \n        p.PlantID,\n        GROUP_CONCAT(DISTINCT a.Recommendations) AS MaintenanceRecommendations,\n        MAX(a.Date) AS LastAuditDate\n    FROM PowerPlant p\n    JOIN `Audit` a ON p.PlantID = a.PlantID\n    WHERE a.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY p.PlantID\n)\nSELECT \n    pma.PlantName,\n    pma.PlantType,\n    pma.MaintenanceCount,\n    ROUND(pma.TotalMaintenanceCost, 2) AS TotalMaintenanceCost,\n    ROUND(pma.AvgMaintenanceCost, 2) AS AvgMaintenanceCost,\n    ROUND(pma.AvgMaintenanceDuration, 2) AS AvgMaintenanceDuration,\n    ppi.MaintenanceRelatedIncidents,\n    ROUND(ppi.AvgIncidentDuration, 2) AS AvgIncidentDuration,\n    pra.MaintenanceRecommendations,\n    CASE \n        WHEN pma.MaintenanceCount > 10 OR ppi.MaintenanceRelatedIncidents > 5 THEN 'Высокая сложность обслуживания'\n        WHEN pma.MaintenanceCount > 5 OR ppi.MaintenanceRelatedIncidents > 2 THEN 'Средняя сложность обслуживания'\n        ELSE 'Низкая сложность обслуживания'\n    END AS MaintenanceComplexity\nFROM PlantMaintenanceAnalysis pma\nJOIN PlantPerformanceImpact ppi ON pma.PlantID = ppi.PlantID\nJOIN PlantAuditRecommendations pra ON pma.PlantID = pra.PlantID\nORDER BY pma.TotalMaintenanceCost DESC, ppi.MaintenanceRelatedIncidents DESC\nLIMIT 47;",
            "gpt-4o_response": "WITH MaintenanceAnalysis AS (\n    SELECT \n        m.PlantID,\n        COUNT(m.MaintenanceID) AS MaintenanceCount,\n        SUM(m.Cost) AS TotalMaintenanceCost,\n        AVG(m.DurationHours) AS AvgMaintenanceDuration,\n        MAX(m.Date) AS LastMaintenanceDate\n    FROM Maintenance m\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY m.PlantID\n),\nIncidentAnalysis AS (\n    SELECT \n        i.PlantID,\n        COUNT(i.IncidentID) AS IncidentCount,\n        COUNT(CASE WHEN i.Severity = 'Критическая' THEN 1 END) AS CriticalIncidentCount,\n        AVG(i.DurationHours) AS AvgIncidentDuration\n    FROM Incident i\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY i.PlantID\n),\nPlantUpgradePotential AS (\n    SELECT \n        p.PlantID,\n        p.Name AS PlantName,\n        p.Type AS PlantType,\n        p.CapacityMW,\n        oc.Name AS OwnerCompanyName,\n        ma.MaintenanceCount,\n        ma.TotalMaintenanceCost,\n        ma.AvgMaintenanceDuration,\n        ma.LastMaintenanceDate,\n        ia.IncidentCount,\n        ia.CriticalIncidentCount,\n        ia.AvgIncidentDuration,\n        CASE \n            WHEN ia.CriticalIncidentCount > 2 THEN 'Высокий потенциал для модернизации'\n            WHEN ma.TotalMaintenanceCost > 10000 THEN 'Средний потенциал для модернизации'\n            ELSE 'Низкий потенциал для модернизации'\n        END AS UpgradePotential\n    FROM PowerPlant p\n    JOIN OwnerCompany oc ON p.OwnerCompanyID = oc.CompanyID\n    LEFT JOIN MaintenanceAnalysis ma ON p.PlantID = ma.PlantID\n    LEFT JOIN IncidentAnalysis ia ON p.PlantID = ia.PlantID\n)\nSELECT \n    pup.PlantName,\n    pup.PlantType,\n    pup.CapacityMW,\n    pup.OwnerCompanyName,\n    pup.MaintenanceCount,\n    ROUND(pup.TotalMaintenanceCost, 2) AS TotalMaintenanceCost,\n    ROUND(pup.AvgMaintenanceDuration, 2) AS AvgMaintenanceDuration,\n    pup.LastMaintenanceDate,\n    pup.IncidentCount,\n    pup.CriticalIncidentCount,\n    ROUND(pup.AvgIncidentDuration, 2) AS AvgIncidentDuration,\n    pup.UpgradePotential\nFROM PlantUpgradePotential pup\nORDER BY pup.CriticalIncidentCount DESC, pup.TotalMaintenanceCost DESC\nLIMIT 47;",
            "gpt-4o_response_ru": "WITH MaintenanceAnalysis AS (\n    SELECT \n        m.PlantID,\n        SUM(m.Cost) AS TotalMaintenanceCost,\n        SUM(m.DurationHours) AS TotalMaintenanceDuration,\n        COUNT(m.MaintenanceID) AS MaintenanceCount,\n        MAX(m.NextScheduledDate) AS LastScheduledMaintenance\n    FROM Maintenance m\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY m.PlantID\n),\nIncidentAnalysis AS (\n    SELECT \n        i.PlantID,\n        COUNT(i.IncidentID) AS TotalIncidentsCount,\n        COUNT(CASE WHEN i.Severity = 'Критическая' THEN 1 END) AS CriticalIncidentsCount,\n        SUM(i.DurationHours) AS TotalIncidentDuration\n    FROM Incident i\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY i.PlantID\n),\nPlantAnalysis AS (\n    SELECT \n        pp.PlantID,\n        pp.Name AS PlantName,\n        pp.Type AS PlantType,\n        ma.TotalMaintenanceCost,\n        ma.TotalMaintenanceDuration,\n        ma.MaintenanceCount,\n        ma.LastScheduledMaintenance,\n        ia.TotalIncidentsCount,\n        ia.CriticalIncidentsCount,\n        ia.TotalIncidentDuration\n    FROM PowerPlant pp\n    LEFT JOIN MaintenanceAnalysis ma ON pp.PlantID = ma.PlantID\n    LEFT JOIN IncidentAnalysis ia ON pp.PlantID = ia.PlantID\n)\nSELECT \n    pa.PlantName,\n    pa.PlantType,\n    ROUND(pa.TotalMaintenanceCost, 2) AS TotalMaintenanceCost,\n    ROUND(pa.TotalMaintenanceDuration, 2) AS TotalMaintenanceDuration,\n    pa.MaintenanceCount,\n    pa.LastScheduledMaintenance,\n    pa.TotalIncidentsCount,\n    pa.CriticalIncidentsCount,\n    ROUND(pa.TotalIncidentDuration, 2) AS TotalIncidentDuration,\n    CASE \n        WHEN pa.CriticalIncidentsCount > 2 THEN 'Критический уровень рисков'\n        WHEN pa.CriticalIncidentsCount > 0 THEN 'Высокий уровень рисков'\n        ELSE 'Средний уровень рисков'\n    END AS RiskLevel\nFROM PlantAnalysis pa\nORDER BY pa.TotalMaintenanceCost DESC, pa.TotalMaintenanceDuration DESC, pa.CriticalIncidentsCount DESC\nLIMIT 47;",
            "google/gemini-2.0-flash-001_response": "WITH PlantMaintenanceAnalysis AS (\n    SELECT\n        p.PlantID,\n        p.Name AS PlantName,\n        p.Type AS PlantType,\n        oc.Name AS OwnerCompanyName,\n        COUNT(m.MaintenanceID) AS TotalMaintenanceCount,\n        SUM(m.Cost) AS TotalMaintenanceCost,\n        AVG(m.DurationHours) AS AvgMaintenanceDuration,\n        COUNT(i.IncidentID) AS TotalIncidentCount,\n        AVG(i.DurationHours) AS AvgIncidentDuration\n    FROM PowerPlant p\n    JOIN OwnerCompany oc ON p.OwnerCompanyID = oc.CompanyID\n    LEFT JOIN Maintenance m ON p.PlantID = m.PlantID AND m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    LEFT JOIN Incident i ON p.PlantID = i.PlantID AND i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY p.PlantID, p.Name, p.Type, oc.Name\n),\nPlantAuditAnalysis AS (\n    SELECT\n        p.PlantID,\n        COUNT(a.AuditID) AS TotalAuditCount,\n        AVG(CASE WHEN a.ComplianceStatus = 'Не соблюдено' THEN 1 ELSE 0 END) AS NonComplianceRatio\n    FROM PowerPlant p\n    LEFT JOIN `Audit` a ON p.PlantID = a.PlantID AND a.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY p.PlantID\n)\nSELECT\n    pma.PlantName,\n    pma.PlantType,\n    pma.OwnerCompanyName,\n    pma.TotalMaintenanceCount,\n    ROUND(pma.TotalMaintenanceCost, 2) AS TotalMaintenanceCost,\n    ROUND(pma.AvgMaintenanceDuration, 2) AS AvgMaintenanceDuration,\n    pma.TotalIncidentCount,\n    ROUND(pma.AvgIncidentDuration, 2) AS AvgIncidentDuration,\n    paa.TotalAuditCount,\n    ROUND(paa.NonComplianceRatio, 2) AS NonComplianceRatio,\n    (pma.TotalMaintenanceCount * 0.3 + pma.TotalMaintenanceCost * 0.2 + pma.AvgMaintenanceDuration * 0.15 + pma.TotalIncidentCount * 0.25 + paa.NonComplianceRatio * 0.1) AS ComplexityScore\nFROM PlantMaintenanceAnalysis pma\nJOIN PlantAuditAnalysis paa ON pma.PlantID = paa.PlantID\nORDER BY ComplexityScore DESC\nLIMIT 47;",
            "google/gemini-2.0-flash-001_response_ru": "WITH PlantMaintenanceAnalysis AS (\n    SELECT\n        pp.PlantID,\n        pp.Name AS PlantName,\n        pp.Type AS PlantType,\n        oc.Name AS OwnerCompanyName,\n        SUM(m.Cost) AS TotalMaintenanceCost,\n        SUM(m.DurationHours) AS TotalMaintenanceDuration,\n        COUNT(m.MaintenanceID) AS MaintenanceCount,\n        AVG(i.DurationHours) AS AvgIncidentDuration,\n        COUNT(DISTINCT i.IncidentID) AS IncidentCount\n    FROM PowerPlant pp\n    JOIN OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\n    LEFT JOIN Maintenance m ON pp.PlantID = m.PlantID AND m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    LEFT JOIN Incident i ON pp.PlantID = i.PlantID AND i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY pp.PlantID, pp.Name, pp.Type, oc.Name\n),\nPlantCapacity AS (\n    SELECT\n        PlantID,\n        CapacityMW\n    FROM PowerPlant\n),\nPotentialModernization AS (\n    SELECT\n        PlantID,\n        CASE\n            WHEN Type = 'ТЭС' THEN 'Замена оборудования на более эффективное'\n            WHEN Type = 'ГЭС' THEN 'Модернизация турбин'\n            WHEN Type = 'АЭС' THEN 'Улучшение систем безопасности'\n            ELSE 'Оценка возможности модернизации'\n        END AS ModernizationStrategy\n    FROM PowerPlant\n)\nSELECT\n    pma.PlantName,\n    pma.PlantType,\n    pma.OwnerCompanyName,\n    ROUND(pma.TotalMaintenanceCost, 2) AS TotalMaintenanceCost,\n    ROUND(pma.TotalMaintenanceDuration, 2) AS TotalMaintenanceDuration,\n    pma.MaintenanceCount,\n    COALESCE(ROUND(pma.AvgIncidentDuration, 2), 0) AS AvgIncidentDuration,\n    pma.IncidentCount,\n    pc.CapacityMW,\n    pm.ModernizationStrategy,\n    (pma.TotalMaintenanceCost + (pma.TotalMaintenanceDuration * 100) + (pma.IncidentCount * 500)) AS ComplexityScore\nFROM PlantMaintenanceAnalysis pma\nJOIN PlantCapacity pc ON pma.PlantID = pc.PlantID\nJOIN PotentialModernization pm ON pma.PlantID = pm.PlantID\nORDER BY ComplexityScore DESC\nLIMIT 47;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH PowerPlantMaintenance AS (\n    SELECT \n        pp.PlantID,\n        pp.Name AS PlantName,\n        pp.Type AS PlantType,\n        SUM(m.Cost) AS TotalMaintenanceCost,\n        COUNT(m.MaintenanceID) AS MaintenanceCount,\n        AVG(m.DurationHours) AS AvgMaintenanceDuration,\n        MAX(m.Cost) AS MaxMaintenanceCost,\n        MIN(m.Cost) AS MinMaintenanceCost,\n        AVG(m.Cost) AS AvgMaintenanceCost\n    FROM PowerPlant pp\n    JOIN Maintenance m ON pp.PlantID = m.PlantID\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY pp.PlantID, pp.Name, pp.Type\n),\nPlantIncidents AS (\n    SELECT \n        pp.PlantID,\n        COUNT(i.IncidentID) AS TotalIncidentsCount,\n        COUNT(CASE WHEN i.Severity = 'Критическая' THEN 1 END) AS CriticalIncidentsCount,\n        MAX(i.Date) AS LastIncidentDate,\n        AVG(i.DurationHours) AS AvgIncidentDuration\n    FROM PowerPlant pp\n    JOIN Incident i ON pp.PlantID = i.PlantID\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY pp.PlantID\n),\nPlantPerformance AS (\n    SELECT \n        pp.PlantID,\n        pp.CapacityMW AS InstalledCapacity,\n        AVG(e.CO2Emissions) AS AvgCO2Emissions,\n        AVG(e.SO2Emissions) AS AvgSO2Emissions,\n        AVG(e.NOxEmissions) AS AvgNOxEmissions,\n        AVG(e.ParticulateMatter) AS AvgParticulateMatter\n    FROM PowerPlant pp\n    JOIN Emission e ON pp.PlantID = e.PlantID\n    WHERE e.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY pp.PlantID, pp.CapacityMW\n),\nPlantModernization AS (\n    SELECT \n        pp.PlantID,\n        COUNT(DISTINCT m.MaintenanceID) AS ModernizationCount,\n        SUM(m.Cost) AS ModernizationCost\n    FROM PowerPlant pp\n    JOIN Maintenance m ON pp.PlantID = m.PlantID\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) AND m.Description LIKE '%модернизации%'\n    GROUP BY pp.PlantID\n)\nSELECT \n    ppm.PlantName,\n    ppm.PlantType,\n    ppm.TotalMaintenanceCost,\n    ppm.MaintenanceCount,\n    ppm.AvgMaintenanceDuration,\n    ppm.MaxMaintenanceCost,\n    ppm.MinMaintenanceCost,\n    ppm.AvgMaintenanceCost,\n    pi.TotalIncidentsCount,\n    pi.CriticalIncidentsCount,\n    pi.LastIncidentDate,\n    pi.AvgIncidentDuration,\n    ppf.InstalledCapacity,\n    ppf.AvgCO2Emissions,\n    ppf.AvgSO2Emissions,\n    ppf.AvgNOxEmissions,\n    ppf.AvgParticulateMatter,\n    pm.ModernizationCount,\n    pm.ModernizationCost,\n    CASE \n        WHEN ppm.MaxMaintenanceCost > 1000000 THEN 'Высокая сложность'\n        WHEN ppm.MaxMaintenanceCost > 500000 THEN 'Средняя сложность'\n        ELSE 'Низкая сложность'\n    END AS ComplexityLevel\nFROM PowerPlantMaintenance ppm\nJOIN PlantIncidents pi ON ppm.PlantID = pi.PlantID\nJOIN PlantPerformance ppf ON ppm.PlantID = ppf.PlantID\nJOIN PlantModernization pm ON ppm.PlantID = pm.PlantID\nORDER BY ppm.MaxMaintenanceCost DESC, ppm.TotalMaintenanceCost DESC\nLIMIT 47;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH PlantMaintenanceAnalysis AS (\n    SELECT \n        p.PlantID,\n        p.Name AS PlantName,\n        p.Type AS PlantType,\n        p.CapacityMW,\n        SUM(m.Cost) AS TotalMaintenanceCost,\n        COUNT(m.MaintenanceID) AS MaintenanceCount,\n        AVG(m.DurationHours) AS AvgMaintenanceDuration,\n        MAX(m.NextScheduledDate) AS NextMaintenanceDate\n    FROM PowerPlant p\n    JOIN Maintenance m ON p.PlantID = m.PlantID\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY p.PlantID, p.Name, p.Type, p.CapacityMW\n),\nIncidentAnalysis AS (\n    SELECT \n        p.PlantID,\n        COUNT(i.IncidentID) AS TotalIncidentsCount,\n        COUNT(CASE WHEN i.Severity = 'Критическая' THEN 1 END) AS CriticalIncidentsCount,\n        MAX(i.Date) AS LastIncidentDate,\n        AVG(i.DurationHours) AS AvgIncidentDuration\n    FROM PowerPlant p\n    JOIN Incident i ON p.PlantID = i.PlantID\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY p.PlantID\n),\nEmissionAnalysis AS (\n    SELECT \n        p.PlantID,\n        AVG(e.CO2Emissions) AS AvgCO2Emissions,\n        AVG(e.SO2Emissions) AS AvgSO2Emissions,\n        AVG(e.NOxEmissions) AS AvgNOxEmissions\n    FROM PowerPlant p\n    JOIN Emission e ON p.PlantID = e.PlantID\n    WHERE e.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY p.PlantID\n),\nContractAnalysis AS (\n    SELECT \n        p.PlantID,\n        COUNT(c.ContractID) AS ActiveContractsCount,\n        SUM(c.Volume) AS TotalContractVolume\n    FROM PowerPlant p\n    JOIN `Contract` c ON p.PlantID = c.ConsumerID\n    WHERE c.Status = 'active'\n    GROUP BY p.PlantID\n)\nSELECT \n    pma.PlantName,\n    pma.PlantType,\n    pma.CapacityMW,\n    pma.TotalMaintenanceCost,\n    pma.MaintenanceCount,\n    pma.AvgMaintenanceDuration,\n    pma.NextMaintenanceDate,\n    ia.TotalIncidentsCount,\n    ia.CriticalIncidentsCount,\n    ia.AvgIncidentDuration,\n    ea.AvgCO2Emissions,\n    ea.AvgSO2Emissions,\n    ea.AvgNOxEmissions,\n    ca.ActiveContractsCount,\n    ca.TotalContractVolume,\n    CASE \n        WHEN ia.CriticalIncidentsCount > 2 THEN 'Критический уровень рисков'\n        WHEN ia.CriticalIncidentsCount > 0 THEN 'Высокий уровень рисков'\n        ELSE 'Средний уровень рисков'\n    END AS RiskLevel,\n    CASE \n        WHEN pma.TotalMaintenanceCost > 1000000 THEN 'Высокая стоимость обслуживания'\n        WHEN pma.TotalMaintenanceCost > 500000 THEN 'Средняя стоимость обслуживания'\n        ELSE 'Низкая стоимость обслуживания'\n    END AS MaintenanceCostLevel\nFROM PlantMaintenanceAnalysis pma\nJOIN IncidentAnalysis ia ON pma.PlantID = ia.PlantID\nJOIN EmissionAnalysis ea ON pma.PlantID = ea.PlantID\nJOIN ContractAnalysis ca ON pma.PlantID = ca.PlantID\nORDER BY pma.TotalMaintenanceCost DESC, ia.CriticalIncidentsCount DESC\nLIMIT 47;",
            "deepseek/deepseek-chat-v3-0324_response": "```sql\nWITH PlantMaintenanceStats AS (\n    SELECT \n        p.PlantID,\n        p.Name AS PlantName,\n        p.Type AS PlantType,\n        p.CapacityMW,\n        oc.Name AS OwnerCompany,\n        COUNT(m.MaintenanceID) AS MaintenanceCount,\n        SUM(m.Cost) AS TotalMaintenanceCost,\n        AVG(m.Cost) AS AvgMaintenanceCost,\n        SUM(m.DurationHours) AS TotalMaintenanceHours,\n        AVG(m.DurationHours) AS AvgMaintenanceDuration,\n        MAX(m.Cost) AS MaxSingleMaintenanceCost,\n        MAX(m.DurationHours) AS MaxSingleMaintenanceDuration,\n        COUNT(i.IncidentID) AS IncidentCount,\n        SUM(CASE WHEN i.Severity = 'Критическая' THEN 1 ELSE 0 END) AS CriticalIncidentsCount,\n        SUM(CASE WHEN i.Severity = 'Высокая' THEN 1 ELSE 0 END) AS HighSeverityIncidentsCount,\n        SUM(CASE WHEN i.Severity = 'Средняя' THEN 1 ELSE 0 END) AS MediumSeverityIncidentsCount,\n        SUM(CASE WHEN i.Severity = 'Низкая' THEN 1 ELSE 0 END) AS LowSeverityIncidentsCount,\n        AVG(i.DurationHours) AS AvgIncidentDuration,\n        COUNT(a.AuditID) AS AuditCount,\n        SUM(CASE WHEN a.ComplianceStatus = 'Не соблюдено' THEN 1 ELSE 0 END) AS NonComplianceAuditsCount,\n        SUM(CASE WHEN a.ComplianceStatus = 'Частично соблюдено' THEN 1 ELSE 0 END) AS PartialComplianceAuditsCount\n    FROM PowerPlant p\n    JOIN OwnerCompany oc ON p.OwnerCompanyID = oc.CompanyID\n    LEFT JOIN Maintenance m ON p.PlantID = m.PlantID AND m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    LEFT JOIN Incident i ON p.PlantID = i.PlantID AND i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    LEFT JOIN `Audit` a ON p.PlantID = a.PlantID AND a.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY p.PlantID, p.Name, p.Type, p.CapacityMW, oc.Name\n),\nPlantUpgradePotential AS (\n    SELECT \n        p.PlantID,\n        CASE \n            WHEN p.Type = 'ТЭС' AND p.CommissionDate < DATE_SUB(CURRENT_DATE, INTERVAL 20 YEAR) THEN 'Высокий потенциал модернизации'\n            WHEN p.Type = 'ГЭС' AND p.CommissionDate < DATE_SUB(CURRENT_DATE, INTERVAL 30 YEAR) THEN 'Высокий потенциал модернизации'\n            WHEN p.Type = 'АЭС' AND p.CommissionDate < DATE_SUB(CURRENT_DATE, INTERVAL 40 YEAR) THEN 'Высокий потенциал модернизации'\n            ELSE 'Средний или низкий потенциал модернизации'\n        END AS UpgradePotential,\n        CASE \n            WHEN p.Type IN ('ТЭС', 'АЭС') THEN 'Высокая стратегическая важность'\n            WHEN p.Type = 'ГЭС' THEN 'Средняя стратегическая важность'\n            ELSE 'Низкая стратегическая важность'\n        END AS StrategicImportance\n    FROM PowerPlant p\n)\nSELECT \n    pms.PlantID,\n    pms.PlantName,\n    pms.PlantType,\n    pms.CapacityMW,\n    pms.OwnerCompany,\n    pms.MaintenanceCount,\n    pms.TotalMaintenanceCost,\n    pms.AvgMaintenanceCost,\n    pms.TotalMaintenanceHours,\n    pms.AvgMaintenanceDuration,\n    pms.MaxSingleMaintenanceCost,\n    pms.MaxSingleMaintenanceDuration,\n    pms.IncidentCount,\n    pms.CriticalIncidentsCount,\n    pms.HighSeverityIncidentsCount,\n    pms.MediumSeverityIncidentsCount,\n    pms.LowSeverityIncidentsCount,\n    pms.AvgIncidentDuration,\n    pms.AuditCount,\n    pms.NonComplianceAuditsCount,\n    pms.PartialComplianceAuditsCount,\n    pup.UpgradePotential,\n    pup.StrategicImportance,\n    ROUND((pms.MaintenanceCount * 0.3 + pms.TotalMaintenanceCost * 0.2 + pms.TotalMaintenanceHours * 0.15 + \n          pms.IncidentCount * 0.15 + pms.CriticalIncidentsCount * 0.",
            "deepseek/deepseek-chat-v3-0324_response_ru": "WITH PlantMaintenanceStats AS (\n    SELECT \n        pp.PlantID,\n        pp.Name AS PlantName,\n        pp.Type AS PlantType,\n        pp.CapacityMW,\n        oc.Name AS OwnerCompany,\n        COUNT(m.MaintenanceID) AS MaintenanceCount,\n        SUM(m.Cost) AS TotalMaintenanceCost,\n        AVG(m.Cost) AS AvgMaintenanceCost,\n        SUM(m.DurationHours) AS TotalMaintenanceHours,\n        AVG(m.DurationHours) AS AvgMaintenanceDuration,\n        MAX(m.Cost) AS MaxMaintenanceCost,\n        MAX(m.DurationHours) AS MaxMaintenanceDuration,\n        COUNT(i.IncidentID) AS IncidentCount,\n        SUM(CASE WHEN i.Severity = 'Критическая' THEN 1 ELSE 0 END) AS CriticalIncidentsCount,\n        SUM(i.DurationHours) AS TotalIncidentHours,\n        AVG(i.DurationHours) AS AvgIncidentDuration,\n        COUNT(a.AuditID) AS AuditCount,\n        SUM(CASE WHEN a.ComplianceStatus = 'Не соблюдено' THEN 1 ELSE 0 END) AS FailedAuditsCount,\n        MAX(a.FollowUpDate) AS LastFollowUpDate\n    FROM PowerPlant pp\n    JOIN OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\n    LEFT JOIN Maintenance m ON pp.PlantID = m.PlantID AND m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    LEFT JOIN Incident i ON pp.PlantID = i.PlantID AND i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    LEFT JOIN `Audit` a ON pp.PlantID = a.PlantID AND a.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY pp.PlantID, pp.Name, pp.Type, pp.CapacityMW, oc.Name\n),\nPlantUpgradePotential AS (\n    SELECT \n        p.PlantID,\n        CASE \n            WHEN p.Type = 'ТЭС' THEN 0.7\n            WHEN p.Type = 'ГЭС' THEN 0.5\n            WHEN p.Type = 'АЭС' THEN 0.3\n            ELSE 0.4\n        END AS UpgradePotentialScore,\n        CASE \n            WHEN p.Type = 'ТЭС' THEN 'Высокий потенциал модернизации'\n            WHEN p.Type = 'ГЭС' THEN 'Средний потенциал модернизации'\n            WHEN p.Type = 'АЭС' THEN 'Низкий потенциал модернизации'\n            ELSE 'Умеренный потенциал модернизации'\n        END AS UpgradePotentialDescription\n    FROM PowerPlant p\n)\nSELECT \n    pms.PlantName,\n    pms.PlantType,\n    pms.CapacityMW,\n    pms.OwnerCompany,\n    pms.MaintenanceCount,\n    pms.TotalMaintenanceCost,\n    pms.AvgMaintenanceCost,\n    pms.TotalMaintenanceHours,\n    pms.AvgMaintenanceDuration,\n    pms.MaxMaintenanceCost,\n    pms.MaxMaintenanceDuration,\n    pms.IncidentCount,\n    pms.CriticalIncidentsCount,\n    pms.TotalIncidentHours,\n    pms.AvgIncidentDuration,\n    pms.AuditCount,\n    pms.FailedAuditsCount,\n    pms.LastFollowUpDate,\n    pup.UpgradePotentialScore,\n    pup.UpgradePotentialDescription,\n    (pms.TotalMaintenanceCost * 0.4 + pms.TotalMaintenanceHours * 0.3 + pms.IncidentCount * 0.2 + pms.FailedAuditsCount * 0.1) AS MaintenanceComplexityScore\nFROM PlantMaintenanceStats pms\nJOIN PlantUpgradePotential pup ON pms.PlantID = pup.PlantID\nORDER BY MaintenanceComplexityScore DESC\nLIMIT 47;",
            "gigachat_response": "WITH ComplexMaintenance AS (\n    SELECT \n        pp.PlantID,\n        pp.Name AS PlantName,\n        SUM(m.Cost) AS TotalMaintenanceCost,\n        SUM(m.DurationHours) AS TotalMaintenanceDuration,\n        COUNT(i.IncidentID) AS IncidentCount,\n        AVG(i.DurationHours) AS AvgIncidentDuration,\n        COUNT(a.AuditID) AS AuditCount,\n        AVG(a.FollowUpDate - a.Date) AS AvgAuditResolutionTime\n    FROM PowerPlant pp\n    LEFT JOIN Maintenance m ON pp.PlantID = m.PlantID\n    LEFT JOIN Incident i ON pp.PlantID = i.PlantID\n    LEFT JOIN `Audit` a ON pp.PlantID = a.PlantID\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n      AND i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n      AND a.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY pp.PlantID, pp.Name\n),\nStrategicOpportunities AS (\n    SELECT \n        cm.PlantID,\n        cm.PlantName,\n        cm.TotalMaintenanceCost,\n        cm.TotalMaintenanceDuration,\n        cm.IncidentCount,\n        cm.AvgIncidentDuration,\n        cm.AuditCount,\n        cm.AvgAuditResolutionTime,\n        RANK() OVER (ORDER BY cm.TotalMaintenanceCost + cm.TotalMaintenanceDuration + cm.IncidentCount DESC) AS ComplexityRank\n    FROM ComplexMaintenance cm\n)\nSELECT \n    so.PlantName,\n    so.TotalMaintenanceCost,\n    so.TotalMaintenanceDuration,\n    so.IncidentCount,\n    so.AvgIncidentDuration,\n    so.AuditCount,\n    so.AvgAuditResolutionTime,\n    so.ComplexityRank\nFROM StrategicOpportunities so\nWHERE so.ComplexityRank <= 47\nORDER BY so.ComplexityRank ASC;",
            "gigachat_response_ru": "WITH ComplexMaintenance AS (\n    SELECT \n        pp.PlantID,\n        pp.Name AS PlantName,\n        COUNT(m.MaintenanceID) AS MaintenanceCount,\n        SUM(m.Cost) AS TotalMaintenanceCost,\n        AVG(m.DurationHours) AS AvgRepairDuration,\n        COUNT(i.IncidentID) AS IncidentCount,\n        AVG(i.DurationHours) AS AvgIncidentDuration,\n        COALESCE(SUM(a.Findings LIKE '%замена%' OR a.Findings LIKE '%ремонт%'), 0) AS ModernizationPotential\n    FROM PowerPlant pp\n    LEFT JOIN Maintenance m ON pp.PlantID = m.PlantID\n    LEFT JOIN Incident i ON pp.PlantID = i.PlantID\n    LEFT JOIN `Audit` a ON pp.PlantID = a.PlantID\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n      AND i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY pp.PlantID, pp.Name\n)\nSELECT *\nFROM ComplexMaintenance\nORDER BY TotalMaintenanceCost DESC, AvgRepairDuration DESC, IncidentCount DESC, ModernizationPotential DESC\nLIMIT 47;"
        },
        {
            "question": "Найти топ-48 потребителей с наиболее сложными финансово-энергетическими профилями за последний год, анализируя паттерны потребления, тарифные планы, контракты и потенциал для оптимизации энергозатрат.",
            "sql_query": "WITH ConsumerConsumptionAnalysis AS (\n    SELECT \n        c.ConsumerID,\n        c.Name AS ConsumerName,\n        c.Type AS ConsumerType,\n        c.ConsumptionPattern,\n        COUNT(DISTINCT m.MeterID) AS TotalMetersCount,\n        COUNT(DISTINCT m.Type) AS MeterTypesCount,\n        AVG(m.LastReading) AS AvgConsumption,\n        STDDEV(m.LastReading) AS ConsumptionVariability\n    FROM Consumer c\n    JOIN Meter m ON c.ConsumerID = m.ConsumerID\n    WHERE m.LastReadingDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY c.ConsumerID, c.Name, c.Type, c.ConsumptionPattern\n),\nConsumerContractAnalysis AS (\n    SELECT \n        c.ConsumerID,\n        COUNT(DISTINCT ct.ContractID) AS ActiveContractsCount,\n        SUM(ct.Volume) AS TotalContractVolume,\n        AVG(ct.PricePerUnit) AS AvgPricePerUnit,\n        GROUP_CONCAT(DISTINCT t.Name) AS TariffNames\n    FROM Consumer c\n    JOIN `Contract` ct ON c.ConsumerID = ct.ConsumerID\n    JOIN Tariff t ON t.ConsumerType = c.Type\n    WHERE ct.Status = 'active'\n    GROUP BY c.ConsumerID\n),\nConsumerFinancialImpact AS (\n    SELECT \n        c.ConsumerID,\n        SUM(ct.Volume * ct.PricePerUnit) AS EstimatedAnnualCost,\n        AVG(t.PricePerUnit) AS AvgTariffPrice\n    FROM Consumer c\n    JOIN `Contract` ct ON c.ConsumerID = ct.ConsumerID\n    JOIN Tariff t ON t.ConsumerType = c.Type\n    WHERE ct.Status = 'active'\n    GROUP BY c.ConsumerID\n)\nSELECT \n    cca.ConsumerName,\n    cca.ConsumerType,\n    cca.ConsumptionPattern,\n    cca.TotalMetersCount,\n    cca.MeterTypesCount,\n    ROUND(cca.AvgConsumption, 2) AS AvgConsumption,\n    ROUND(cca.ConsumptionVariability, 2) AS ConsumptionVariability,\n    cct.TariffNames,\n    cct.ActiveContractsCount,\n    ROUND(cct.TotalContractVolume, 2) AS TotalContractVolume,\n    ROUND(cfi.EstimatedAnnualCost, 2) AS EstimatedAnnualCost,\n    ROUND(cfi.AvgTariffPrice, 2) AS AvgTariffPrice,\n    CASE \n        WHEN cca.ConsumptionVariability > cca.AvgConsumption * 0.5 THEN 'Критическая финансовая нестабильность'\n        WHEN cca.ConsumptionVariability > cca.AvgConsumption * 0.3 THEN 'Высокая финансовая нестабильность'\n        WHEN cca.ConsumptionVariability > cca.AvgConsumption * 0.2 THEN 'Средняя финансовая нестабильность'\n        ELSE 'Низкая финансовая нестабильность'\n    END AS FinancialStability\nFROM ConsumerConsumptionAnalysis cca\nJOIN ConsumerContractAnalysis cct ON cca.ConsumerID = cct.ConsumerID\nJOIN ConsumerFinancialImpact cfi ON cca.ConsumerID = cfi.ConsumerID\nORDER BY cca.ConsumptionVariability DESC, cfi.EstimatedAnnualCost DESC\nLIMIT 48;",
            "gpt-4o_response": "WITH ConsumerPatterns AS (\n    SELECT \n        c.ConsumerID,\n        c.Name AS ConsumerName,\n        c.Type AS ConsumerType,\n        c.Location,\n        c.AverageMonthlyConsumption,\n        t.PricePerUnit AS TariffPrice,\n        t.Name AS TariffName,\n        t.Description AS TariffDescription,\n        t.PeakHours,\n        t.OffPeakHours,\n        ct.Volume AS ContractVolume,\n        ct.PricePerUnit AS ContractPrice,\n        ct.Status AS ContractStatus,\n        ct.RenewalOption\n    FROM Consumer c\n    LEFT JOIN `Contract` ct ON c.ConsumerID = ct.ConsumerID\n    LEFT JOIN Tariff t ON c.Type = t.ConsumerType\n    WHERE ct.Status = 'active' AND t.Status = 'Активный'\n),\nOptimizationPotential AS (\n    SELECT \n        cp.ConsumerID,\n        cp.ConsumerName,\n        cp.ConsumerType,\n        cp.Location,\n        cp.AverageMonthlyConsumption,\n        cp.TariffPrice,\n        cp.TariffName,\n        cp.TariffDescription,\n        cp.PeakHours,\n        cp.OffPeakHours,\n        cp.ContractVolume,\n        cp.ContractPrice,\n        cp.ContractStatus,\n        cp.RenewalOption,\n        (cp.AverageMonthlyConsumption * cp.TariffPrice) AS EstimatedMonthlyCost,\n        (cp.ContractVolume * cp.ContractPrice) AS EstimatedContractCost,\n        CASE \n            WHEN cp.AverageMonthlyConsumption > 20000 THEN 'Высокий потенциал оптимизации'\n            WHEN cp.AverageMonthlyConsumption > 10000 THEN 'Средний потенциал оптимизации'\n            ELSE 'Низкий потенциал оптимизации'\n        END AS OptimizationPotential\n    FROM ConsumerPatterns cp\n)\nSELECT \n    op.ConsumerName,\n    op.ConsumerType,\n    op.Location,\n    ROUND(op.AverageMonthlyConsumption, 2) AS AverageMonthlyConsumption,\n    ROUND(op.TariffPrice, 2) AS TariffPrice,\n    op.TariffName,\n    op.TariffDescription,\n    op.PeakHours,\n    op.OffPeakHours,\n    ROUND(op.ContractVolume, 2) AS ContractVolume,\n    ROUND(op.ContractPrice, 2) AS ContractPrice,\n    op.ContractStatus,\n    op.RenewalOption,\n    ROUND(op.EstimatedMonthlyCost, 2) AS EstimatedMonthlyCost,\n    ROUND(op.EstimatedContractCost, 2) AS EstimatedContractCost,\n    op.OptimizationPotential\nFROM OptimizationPotential op\nORDER BY op.OptimizationPotential DESC, op.EstimatedMonthlyCost DESC\nLIMIT 48;",
            "gpt-4o_response_ru": "WITH ConsumerPatterns AS (\n    SELECT \n        c.ConsumerID,\n        c.Name AS ConsumerName,\n        c.Type AS ConsumerType,\n        c.Location,\n        c.AverageMonthlyConsumption,\n        t.Name AS TariffName,\n        t.PricePerUnit AS TariffPrice,\n        t.PeakHours,\n        t.OffPeakHours,\n        ct.StartDate,\n        ct.EndDate,\n        ct.PricePerUnit AS ContractPrice,\n        ct.Volume AS ContractVolume,\n        ct.Status AS ContractStatus,\n        ct.RenewalOption\n    FROM Consumer c\n    LEFT JOIN `Contract` ct ON c.ConsumerID = ct.ConsumerID\n    LEFT JOIN Tariff t ON c.Type = t.ConsumerType\n    WHERE ct.Status = 'active' AND ct.EndDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n),\nOptimizationPotential AS (\n    SELECT \n        cp.ConsumerID,\n        cp.ConsumerName,\n        cp.ConsumerType,\n        cp.Location,\n        cp.AverageMonthlyConsumption,\n        cp.TariffName,\n        cp.TariffPrice,\n        cp.PeakHours,\n        cp.OffPeakHours,\n        cp.ContractPrice,\n        cp.ContractVolume,\n        cp.ContractStatus,\n        cp.RenewalOption,\n        (cp.AverageMonthlyConsumption * cp.TariffPrice) AS EstimatedMonthlyCost,\n        (cp.AverageMonthlyConsumption * cp.ContractPrice) AS EstimatedContractCost,\n        (cp.AverageMonthlyConsumption * cp.TariffPrice) - (cp.AverageMonthlyConsumption * cp.ContractPrice) AS CostDifference\n    FROM ConsumerPatterns cp\n)\nSELECT \n    op.ConsumerName,\n    op.ConsumerType,\n    op.Location,\n    ROUND(op.AverageMonthlyConsumption, 2) AS AverageMonthlyConsumption,\n    op.TariffName,\n    ROUND(op.TariffPrice, 2) AS TariffPrice,\n    op.PeakHours,\n    op.OffPeakHours,\n    ROUND(op.ContractPrice, 2) AS ContractPrice,\n    ROUND(op.ContractVolume, 2) AS ContractVolume,\n    op.ContractStatus,\n    op.RenewalOption,\n    ROUND(op.EstimatedMonthlyCost, 2) AS EstimatedMonthlyCost,\n    ROUND(op.EstimatedContractCost, 2) AS EstimatedContractCost,\n    ROUND(op.CostDifference, 2) AS CostDifference,\n    CASE \n        WHEN op.CostDifference > 0 THEN 'Potential for Optimization'\n        ELSE 'Optimized'\n    END AS OptimizationStatus\nFROM OptimizationPotential op\nORDER BY op.CostDifference DESC\nLIMIT 48;",
            "google/gemini-2.0-flash-001_response": "WITH ConsumerConsumption AS (\n    SELECT\n        c.ConsumerID,\n        c.Name AS ConsumerName,\n        c.Type AS ConsumerType,\n        c.Location AS ConsumerLocation,\n        c.ContactName AS ConsumerContactName,\n        c.ContactPhone AS ConsumerContactPhone,\n        c.ContactEmail AS ConsumerContactEmail,\n        c.ConsumptionPattern,\n        c.AverageMonthlyConsumption,\n        SUM(m.LastReading) AS TotalConsumption,\n        AVG(t.PricePerUnit) AS AverageTariffPrice,\n        COUNT(DISTINCT ct.ContractID) AS NumberOfContracts,\n        SUM(ct.Volume) AS TotalContractVolume,\n        AVG(ct.PricePerUnit) AS AverageContractPrice,\n        SUM(CASE WHEN ct.Status = 'active' THEN 1 ELSE 0 END) AS ActiveContracts,\n        SUM(CASE WHEN ct.RenewalOption = TRUE THEN 1 ELSE 0 END) AS RenewalContracts\n    FROM Consumer c\n    JOIN Meter m ON c.ConsumerID = m.ConsumerID\n    JOIN `Contract` ct ON c.ConsumerID = ct.ConsumerID\n    JOIN Tariff t ON c.Type = t.ConsumerType\n    WHERE m.LastReadingDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY c.ConsumerID, c.Name, c.Type, c.Location, c.ContactName, c.ContactPhone, c.ContactEmail, c.ConsumptionPattern, c.AverageMonthlyConsumption\n),\nOptimizationPotential AS (\n    SELECT\n        cc.ConsumerID,\n        cc.ConsumerName,\n        cc.ConsumerType,\n        cc.ConsumerLocation,\n        cc.ContactName,\n        cc.ContactPhone,\n        cc.ContactEmail,\n        cc.ConsumptionPattern,\n        cc.AverageMonthlyConsumption,\n        cc.TotalConsumption,\n        cc.AverageTariffPrice,\n        cc.NumberOfContracts,\n        cc.TotalContractVolume,\n        cc.AverageContractPrice,\n        cc.ActiveContracts,\n        cc.RenewalContracts,\n        (cc.AverageMonthlyConsumption * cc.AverageTariffPrice) AS EstimatedMonthlyCost,\n        (cc.TotalConsumption * cc.AverageContractPrice) AS EstimatedAnnualCost,\n        (cc.AverageMonthlyConsumption * cc.AverageTariffPrice) - (cc.TotalConsumption * cc.AverageContractPrice/12) AS PotentialSavings\n    FROM ConsumerConsumption cc\n)\nSELECT\n    op.ConsumerName,\n    op.ConsumerType,\n    op.ConsumerLocation,\n    op.ContactName,\n    op.ContactPhone,\n    op.ContactEmail,\n    op.ConsumptionPattern,\n    op.AverageMonthlyConsumption,\n    op.TotalConsumption,\n    op.AverageTariffPrice,\n    op.NumberOfContracts,\n    op.TotalContractVolume,\n    op.AverageContractPrice,\n    op.ActiveContracts,\n    op.RenewalContracts,\n    ROUND(op.EstimatedMonthlyCost, 2) AS EstimatedMonthlyCost,\n    ROUND(op.EstimatedAnnualCost, 2) AS EstimatedAnnualCost,\n    ROUND(op.PotentialSavings, 2) AS PotentialSavings\nFROM OptimizationPotential op\nORDER BY op.PotentialSavings DESC\nLIMIT 48;",
            "google/gemini-2.0-flash-001_response_ru": "WITH ConsumerConsumption AS (\n    SELECT\n        c.ConsumerID,\n        c.Name AS ConsumerName,\n        c.Type AS ConsumerType,\n        c.Location AS ConsumerLocation,\n        c.ContactName AS ConsumerContactName,\n        c.ContactPhone AS ConsumerContactPhone,\n        c.ContactEmail AS ConsumerContactEmail,\n        c.ConsumptionPattern,\n        c.AverageMonthlyConsumption,\n        SUM(m.LastReading) AS TotalConsumption,\n        AVG(t.PricePerUnit) AS AvgTariffPrice,\n        COUNT(DISTINCT ct.ContractID) AS NumberOfContracts,\n        SUM(ct.Volume) AS TotalContractVolume,\n        AVG(ct.PricePerUnit) AS AvgContractPrice,\n        SUM(CASE WHEN ct.Status = 'active' THEN 1 ELSE 0 END) AS ActiveContracts,\n        SUM(CASE WHEN ct.RenewalOption = TRUE THEN 1 ELSE 0 END) AS RenewalContracts\n    FROM Consumer c\n    LEFT JOIN Meter m ON c.ConsumerID = m.ConsumerID\n    LEFT JOIN `Contract` ct ON c.ConsumerID = ct.ConsumerID\n    LEFT JOIN Tariff t ON c.Type = t.ConsumerType\n    WHERE m.LastReadingDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY c.ConsumerID, c.Name, c.Type, c.Location, c.ContactName, c.ContactPhone, c.ContactEmail, c.ConsumptionPattern, c.AverageMonthlyConsumption\n),\nOptimizationPotential AS (\n    SELECT\n        cc.ConsumerID,\n        cc.ConsumerName,\n        cc.ConsumerType,\n        cc.ConsumerLocation,\n        cc.ConsumerContactName,\n        cc.ContactPhone,\n        cc.ContactEmail,\n        cc.ConsumptionPattern,\n        cc.AverageMonthlyConsumption,\n        cc.TotalConsumption,\n        cc.AvgTariffPrice,\n        cc.NumberOfContracts,\n        cc.TotalContractVolume,\n        cc.AvgContractPrice,\n        cc.ActiveContracts,\n        cc.RenewalContracts,\n        (cc.AverageMonthlyConsumption * cc.AvgTariffPrice) AS EstimatedMonthlyCost,\n        (cc.TotalConsumption * cc.AvgContractPrice) AS EstimatedAnnualCost,\n        CASE\n            WHEN cc.ConsumerType = 'Промышленность' AND cc.AverageMonthlyConsumption > 50000 THEN 'Высокий'\n            WHEN cc.ConsumerType = 'Торговля' AND cc.AverageMonthlyConsumption > 20000 THEN 'Средний'\n            ELSE 'Низкий'\n        END AS OptimizationPriority,\n        (cc.AverageMonthlyConsumption * (1 + (RAND() - 0.5) / 5)) AS AdjustedConsumption\n    FROM ConsumerConsumption cc\n)\nSELECT\n    op.ConsumerName,\n    op.ConsumerType,\n    op.ConsumerLocation,\n    op.ConsumerContactName,\n    op.ContactPhone,\n    op.ContactEmail,\n    op.ConsumptionPattern,\n    ROUND(op.AverageMonthlyConsumption, 2) AS AverageMonthlyConsumption,\n    ROUND(op.TotalConsumption, 2) AS TotalConsumption,\n    ROUND(op.AvgTariffPrice, 2) AS AvgTariffPrice,\n    op.NumberOfContracts,\n    ROUND(op.TotalContractVolume, 2) AS TotalContractVolume,\n    ROUND(op.AvgContractPrice, 2) AS AvgContractPrice,\n    op.ActiveContracts,\n    op.RenewalContracts,\n    ROUND(op.EstimatedMonthlyCost, 2) AS EstimatedMonthlyCost,\n    ROUND(op.EstimatedAnnualCost, 2) AS EstimatedAnnualCost,\n    op.OptimizationPriority,\n    ROUND(op.AdjustedConsumption, 2) AS AdjustedConsumption\nFROM OptimizationPotential op\nORDER BY op.EstimatedAnnualCost DESC, op.AverageMonthlyConsumption DESC\nLIMIT 48;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH ConsumerAnalysis AS (\n    SELECT \n        c.ConsumerID,\n        c.Name AS ConsumerName,\n        c.Type AS ConsumerType,\n        c.AverageMonthlyConsumption,\n        m.LastReading,\n        m.LastReadingDate,\n        t.PricePerUnit,\n        t.Name AS TariffName,\n        ct.StartDate,\n        ct.EndDate,\n        ct.Volume,\n        ct.PricePerUnit AS ContractPrice\n    FROM Consumer c\n    JOIN Meter m ON c.ConsumerID = m.ConsumerID\n    JOIN Tariff t ON c.Type = t.ConsumerType\n    JOIN `Contract` ct ON c.ConsumerID = ct.ConsumerID\n    WHERE ct.Status = 'active'\n),\nComplexityScore AS (\n    SELECT \n        ca.ConsumerID,\n        ca.ConsumerName,\n        ca.ConsumerType,\n        ca.AverageMonthlyConsumption,\n        ca.LastReading,\n        ca.LastReadingDate,\n        ca.TariffName,\n        ca.StartDate,\n        ca.EndDate,\n        ca.Volume,\n        ca.ContractPrice,\n        (ca.AverageMonthlyConsumption * ca.ContractPrice) AS EstimatedAnnualCost,\n        CASE \n            WHEN ca.AverageMonthlyConsumption > 20000 THEN 3\n            WHEN ca.AverageMonthlyConsumption > 10000 THEN 2\n            ELSE 1\n        END AS ConsumptionComplexity,\n        CASE \n            WHEN ca.ContractPrice > 5 THEN 3\n            WHEN ca.ContractPrice > 3 THEN 2\n            ELSE 1\n        END AS PriceComplexity,\n        CASE \n            WHEN ca.Volume > 100000 THEN 3\n            WHEN ca.Volume > 50000 THEN 2\n            ELSE 1\n        END AS VolumeComplexity\n    FROM ConsumerAnalysis ca\n),\nTotalComplexity AS (\n    SELECT \n        cs.ConsumerID,\n        cs.ConsumerName,\n        cs.ConsumerType,\n        cs.AverageMonthlyConsumption,\n        cs.LastReading,\n        cs.LastReadingDate,\n        cs.TariffName,\n        cs.StartDate,\n        cs.EndDate,\n        cs.Volume,\n        cs.ContractPrice,\n        cs.EstimatedAnnualCost,\n        (cs.ConsumptionComplexity + cs.PriceComplexity + cs.VolumeComplexity) AS TotalComplexityScore\n    FROM ComplexityScore cs\n)\nSELECT \n    tc.ConsumerName,\n    tc.ConsumerType,\n    tc.AverageMonthlyConsumption,\n    tc.LastReading,\n    tc.LastReadingDate,\n    tc.TariffName,\n    tc.StartDate,\n    tc.EndDate,\n    tc.Volume,\n    tc.ContractPrice,\n    tc.EstimatedAnnualCost,\n    tc.TotalComplexityScore\nFROM TotalComplexity tc\nORDER BY tc.TotalComplexityScore DESC\nLIMIT 48;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "```sql\nWITH ConsumerAnalysis AS (\n    SELECT \n        c.ConsumerID,\n        c.Name AS ConsumerName,\n        c.Type AS ConsumerType,\n        c.Location,\n        c.ContactName,\n        c.ContactPhone,\n        c.ContactEmail,\n        c.ConsumptionPattern,\n        c.AverageMonthlyConsumption,\n        m.MeterID,\n        m.Type AS MeterType,\n        m.LastReading,\n        m.LastReadingDate,\n        m.Status AS MeterStatus,\n        t.TariffID,\n        t.Name AS TariffName,\n        t.Description AS TariffDescription,\n        t.PricePerUnit,\n        t.ValidFrom,\n        t.ValidTo,\n        t.ConsumerType AS TariffConsumerType,\n        t.PeakHours,\n        t.OffPeakHours,\n        t.Status AS TariffStatus,\n        ct.ContractID,\n        ct.StartDate,\n        ct.EndDate,\n        ct.Terms,\n        ct.PricePerUnit AS ContractPricePerUnit,\n        ct.Volume,\n        ct.Status AS ContractStatus,\n        ct.RenewalOption\n    FROM Consumer c\n    JOIN Meter m ON c.ConsumerID = m.ConsumerID\n    JOIN Tariff t ON c.Type = t.ConsumerType\n    JOIN `Contract` ct ON c.ConsumerID = ct.ConsumerID\n),\nComplexityScore AS (\n    SELECT \n        ca.ConsumerID,\n        ca.ConsumerName,\n        ca.ConsumerType,\n        ca.Location,\n        ca.ContactName,\n        ca.ContactPhone,\n        ca.ContactEmail,\n        ca.ConsumptionPattern,\n        ca.AverageMonthlyConsumption,\n        ca.MeterID,\n        ca.MeterType,\n        ca.LastReading,\n        ca.LastReadingDate,\n        ca.MeterStatus,\n        ca.TariffID,\n        ca.TariffName,\n        ca.TariffDescription,\n        ca.PricePerUnit,\n        ca.ValidFrom,\n        ca.ValidTo,\n        ca.TariffConsumerType,\n        ca.PeakHours,\n        ca.OffPeakHours,\n        ca.TariffStatus,\n        ca.ContractID,\n        ca.StartDate,\n        ca.EndDate,\n        ca.Terms,\n        ca.ContractPricePerUnit,\n        ca.Volume,\n        ca.ContractStatus,\n        ca.RenewalOption,\n        CASE \n            WHEN ca.AverageMonthlyConsumption > 20000 THEN 3\n            WHEN ca.AverageMonthlyConsumption > 10000 THEN 2\n            ELSE 1\n        END AS ConsumptionComplexity,\n        CASE \n            WHEN ca.ContractStatus = 'active' THEN 2\n            WHEN ca.ContractStatus = 'expired' THEN 1\n            ELSE 0\n        END AS ContractComplexity,\n        CASE \n            WHEN ca.TariffStatus = 'Активный' THEN 2\n            WHEN ca.TariffStatus = 'Неактивный' THEN 1\n            ELSE 0\n        END AS TariffComplexity,\n        CASE \n            WHEN ca.MeterStatus = 'Активен' THEN 2\n            WHEN ca.MeterStatus = 'На ремонте' THEN 1\n            ELSE 0\n        END AS MeterComplexity\n    FROM ConsumerAnalysis ca\n),\nTotalComplexity AS (\n    SELECT \n        cs.ConsumerID,\n        cs.ConsumerName,\n        cs.ConsumerType,\n        cs.Location,\n        cs.ContactName,\n        cs.ContactPhone,\n        cs.ContactEmail,\n        cs.ConsumptionPattern,\n        cs.AverageMonthlyConsumption,\n        cs.MeterID,\n        cs.MeterType,\n        cs.LastReading,\n        cs.LastReadingDate,\n        cs.MeterStatus,\n        cs.TariffID,\n        cs.TariffName,\n        cs.TariffDescription,\n        cs.PricePerUnit,\n        cs.ValidFrom,\n        cs.ValidTo,\n        cs.TariffConsumerType,\n        cs.PeakHours,\n        cs.OffPeakHours,\n        cs.TariffStatus,\n        cs.ContractID,\n        cs.StartDate,\n        cs.EndDate,\n        cs.Terms,\n        cs.ContractPricePerUnit,\n        cs.Volume,\n        cs.ContractStatus,\n        cs.RenewalOption,\n        cs.ConsumptionComplexity,\n        cs.ContractComplexity,\n        cs.TariffComplexity,\n        cs.MeterComplexity,\n        cs.ConsumptionComplexity + cs.ContractComplexity + cs.TariffComplexity + cs.MeterComplexity AS TotalComplexityScore\n    FROM ComplexityScore cs\n)\nSELECT \n    tc.ConsumerName,\n    tc.ConsumerType,\n    tc.Location,\n    tc.ContactName,\n    tc.ContactPhone,\n    tc.ContactEmail,\n    tc.ConsumptionPattern,\n    tc.AverageMonthlyConsumption,\n    tc.MeterID,\n    tc.MeterType,\n    tc.LastReading,\n    tc.LastReadingDate,\n    tc.MeterStatus,\n    tc.TariffID,\n    tc.TariffName,\n    tc.TariffDescription,\n    tc.PricePerUnit,\n    tc.ValidFrom,\n    tc",
            "deepseek/deepseek-chat-v3-0324_response": "WITH ConsumerAnalysis AS (\n    SELECT \n        c.ConsumerID,\n        c.Name AS ConsumerName,\n        c.Type AS ConsumerType,\n        c.Location,\n        c.AverageMonthlyConsumption,\n        c.ConsumptionPattern,\n        t.Name AS TariffName,\n        t.PricePerUnit AS TariffRate,\n        t.PeakHours,\n        t.OffPeakHours,\n        ct.ContractID,\n        ct.StartDate AS ContractStartDate,\n        ct.EndDate AS ContractEndDate,\n        ct.PricePerUnit AS ContractRate,\n        ct.Volume AS ContractVolume,\n        ct.Status AS ContractStatus,\n        ct.RenewalOption,\n        m.MeterID,\n        m.Type AS MeterType,\n        m.LastReading,\n        m.LastReadingDate,\n        m.Status AS MeterStatus,\n        CASE \n            WHEN c.ConsumptionPattern LIKE '%высокий%' THEN 3\n            WHEN c.ConsumptionPattern LIKE '%средний%' THEN 2\n            ELSE 1\n        END AS ConsumptionComplexity,\n        CASE \n            WHEN ct.PricePerUnit > t.PricePerUnit THEN 2\n            ELSE 1\n        END AS RateDiscrepancy,\n        CASE \n            WHEN ct.Status = 'active' AND ct.EndDate < DATE_ADD(CURRENT_DATE, INTERVAL 6 MONTH) THEN 2\n            ELSE 1\n        END AS ContractRenewalUrgency,\n        CASE \n            WHEN m.Status != 'Активен' THEN 2\n            ELSE 1\n        END AS MeterIssues\n    FROM Consumer c\n    LEFT JOIN `Contract` ct ON c.ConsumerID = ct.ConsumerID\n    LEFT JOIN Tariff t ON c.Type LIKE CONCAT('%', t.ConsumerType, '%')\n    LEFT JOIN Meter m ON c.ConsumerID = m.ConsumerID\n    WHERE ct.StartDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n       OR ct.Status = 'active'\n),\nConsumerScores AS (\n    SELECT \n        ConsumerID,\n        ConsumerName,\n        ConsumerType,\n        Location,\n        AverageMonthlyConsumption,\n        ConsumptionPattern,\n        TariffName,\n        TariffRate,\n        PeakHours,\n        OffPeakHours,\n        ContractID,\n        ContractStartDate,\n        ContractEndDate,\n        ContractRate,\n        ContractVolume,\n        ContractStatus,\n        RenewalOption,\n        MeterID,\n        MeterType,\n        LastReading,\n        LastReadingDate,\n        MeterStatus,\n        (ConsumptionComplexity + RateDiscrepancy + ContractRenewalUrgency + MeterIssues) AS ComplexityScore\n    FROM ConsumerAnalysis\n)\nSELECT \n    cs.ConsumerID,\n    cs.ConsumerName,\n    cs.ConsumerType,\n    cs.Location,\n    ROUND(cs.AverageMonthlyConsumption, 2) AS AvgMonthlyConsumption,\n    cs.ConsumptionPattern,\n    cs.TariffName,\n    ROUND(cs.TariffRate, 2) AS TariffRate,\n    cs.PeakHours,\n    cs.OffPeakHours,\n    cs.ContractID,\n    cs.ContractStartDate,\n    cs.ContractEndDate,\n    ROUND(cs.ContractRate, 2) AS ContractRate,\n    ROUND(cs.ContractVolume, 2) AS ContractVolume,\n    cs.ContractStatus,\n    cs.RenewalOption,\n    cs.MeterID,\n    cs.MeterType,\n    ROUND(cs.LastReading, 2) AS LastReading,\n    cs.LastReadingDate,\n    cs.MeterStatus,\n    cs.ComplexityScore,\n    CASE \n        WHEN cs.ComplexityScore >= 8 THEN 'Критически сложный'\n        WHEN cs.ComplexityScore >= 6 THEN 'Очень сложный'\n        WHEN cs.ComplexityScore >= 4 THEN 'Сложный'\n        ELSE 'Стандартный'\n    END AS ProfileComplexity\nFROM ConsumerScores cs\nORDER BY cs.ComplexityScore DESC, cs.AverageMonthlyConsumption DESC\nLIMIT 48;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "WITH ComplexConsumerAnalysis AS (\n    SELECT \n        c.ConsumerID,\n        c.Name AS ConsumerName,\n        c.Type AS ConsumerType,\n        c.Location,\n        c.AverageMonthlyConsumption,\n        m.MeterID,\n        m.Type AS MeterType,\n        m.Status AS MeterStatus,\n        t.TariffID,\n        t.Name AS TariffName,\n        t.PricePerUnit AS TariffPrice,\n        ct.ContractID,\n        ct.Status AS ContractStatus,\n        ct.PricePerUnit AS ContractPrice,\n        ct.Volume AS ContractVolume,\n        ROW_NUMBER() OVER (ORDER BY \n            c.AverageMonthlyConsumption DESC, \n            t.PricePerUnit DESC, \n            (ct.PricePerUnit * ct.Volume) DESC) AS ComplexityRank\n    FROM Consumer c\n    LEFT JOIN Meter m ON c.ConsumerID = m.ConsumerID\n    LEFT JOIN `Contract` ct ON c.ConsumerID = ct.ConsumerID AND ct.Status = 'active'\n    LEFT JOIN Tariff t ON 1=1\n    WHERE \n        c.AverageMonthlyConsumption > (SELECT AVG(AverageMonthlyConsumption) FROM Consumer)\n)\nSELECT \n    ConsumerID,\n    ConsumerName,\n    ConsumerType,\n    Location,\n    ROUND(AverageMonthlyConsumption, 2) AS MonthlyConsumption,\n    MeterID,\n    MeterType,\n    MeterStatus,\n    TariffID,\n    TariffName,\n    ROUND(TariffPrice, 4) AS TariffPrice,\n    ContractID,\n    ContractStatus,\n    ROUND(ContractPrice, 4) AS ContractPrice,\n    ROUND(ContractVolume, 2) AS ContractVolume,\n    ROUND((TariffPrice * AverageMonthlyConsumption) - (ContractPrice * ContractVolume), 2) AS PotentialSavings,\n    ComplexityRank\nFROM ComplexConsumerAnalysis\nORDER BY ComplexityRank\nLIMIT 48;",
            "gigachat_response": "WITH ComplexEnergyProfiles AS (\n    SELECT \n        c.ConsumerID,\n        c.Name AS ConsumerName,\n        c.Type AS ConsumerType,\n        c.Location AS ConsumerLocation,\n        c.ContactName,\n        c.ContactPhone,\n        c.ContactEmail,\n        c.ConsumptionPattern,\n        c.AverageMonthlyConsumption,\n        tar.TariffID,\n        tar.Name AS TariffName,\n        tar.Description AS TariffDescription,\n        tar.PricePerUnit AS TariffPricePerUnit,\n        tar.PeakHours,\n        tar.OffPeakHours,\n        con.ContractID,\n        con.StartDate AS ContractStartDate,\n        con.EndDate AS ContractEndDate,\n        con.Terms AS ContractTerms,\n        con.PricePerUnit AS ContractPricePerUnit,\n        con.Volume AS ContractVolume,\n        met.LastReading AS LatestMeterReading,\n        met.LastReadingDate AS LatestMeterReadingDate,\n        met.Status AS MeterStatus,\n        ROW_NUMBER() OVER (PARTITION BY c.ConsumerID ORDER BY met.LastReadingDate DESC) AS ReadingRank\n    FROM Consumer c\n    LEFT JOIN `Contract` con ON c.ConsumerID = con.ConsumerID\n    LEFT JOIN Tariff tar ON con.TariffID = tar.TariffID\n    LEFT JOIN Meter met ON c.ConsumerID = met.ConsumerID\n    WHERE con.EndDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n      AND met.InstallationDate <= CURRENT_DATE\n), RankedComplexEnergyProfiles AS (\n    SELECT *\n    FROM ComplexEnergyProfiles\n    WHERE ReadingRank = 1 -- Only consider latest meter reading per consumer\n)\nSELECT \n    ConsumerID,\n    ConsumerName,\n    ConsumerType,\n    ConsumerLocation,\n    ContactName,\n    ContactPhone,\n    ContactEmail,\n    ConsumptionPattern,\n    AverageMonthlyConsumption,\n    TariffName,\n    TariffDescription,\n    TariffPricePerUnit,\n    PeakHours,\n    OffPeakHours,\n    ContractID,\n    ContractStartDate,\n    ContractEndDate,\n    ContractTerms,\n    ContractPricePerUnit,\n    ContractVolume,\n    LatestMeterReading,\n    LatestMeterReadingDate,\n    MeterStatus\nFROM RankedComplexEnergyProfiles\nORDER BY AverageMonthlyConsumption DESC, ContractVolume DESC\nLIMIT 48;",
            "gigachat_response_ru": "WITH ComplexProfiles AS (\n    SELECT \n        c.ConsumerID,\n        c.Name AS ConsumerName,\n        c.Location,\n        c.ContactName,\n        c.ContactPhone,\n        c.ContactEmail,\n        c.ConsumptionPattern,\n        c.AverageMonthlyConsumption,\n        t.TariffID,\n        t.Name AS TariffName,\n        t.PricePerUnit,\n        t.PeakHours,\n        t.OffPeakHours,\n        cr.ContractID,\n        cr.StartDate,\n        cr.EndDate,\n        cr.Terms,\n        cr.PricePerUnit AS ContractPricePerUnit,\n        cr.Volume AS ContractVolume,\n        cr.Status AS ContractStatus,\n        m.LastReading,\n        m.LastReadingDate,\n        m.Status AS MeterStatus,\n        ROW_NUMBER() OVER (PARTITION BY c.ConsumerID ORDER BY m.LastReadingDate DESC) AS ReadingRank\n    FROM Consumer c\n    LEFT JOIN `Contract` cr ON c.ConsumerID = cr.ConsumerID\n    LEFT JOIN Tariff t ON cr.TariffID = t.TariffID\n    LEFT JOIN Meter m ON c.ConsumerID = m.ConsumerID\n    WHERE cr.EndDate >= DATE_SUB(NOW(), INTERVAL 1 YEAR)\n      AND m.LastReadingDate IS NOT NULL\n), RankedReadings AS (\n    SELECT *\n    FROM ComplexProfiles\n    WHERE ReadingRank = 1\n), ComplexityScore AS (\n    SELECT \n        r.ConsumerID,\n        r.ConsumerName,\n        r.Location,\n        r.ContactName,\n        r.ContactPhone,\n        r.ContactEmail,\n        r.ConsumptionPattern,\n        r.AverageMonthlyConsumption,\n        r.TariffName,\n        r.PricePerUnit,\n        r.PeakHours,\n        r.OffPeakHours,\n        r.ContractID,\n        r.StartDate,\n        r.EndDate,\n        r.Terms,\n        r.ContractPricePerUnit,\n        r.ContractVolume,\n        r.ContractStatus,\n        r.LastReading,\n        r.LastReadingDate,\n        r.MeterStatus,\n        -- Сложность рассчитывается на основе нескольких факторов:\n        -- 1. Объем потребления\n        -- 2. Тип тарифа (например, пиковые часы)\n        -- 3. Цена контракта\n        -- 4. Текущий статус счетчика\n        -- Чем больше значение, тем сложнее профиль потребителя\n        ((r.AverageMonthlyConsumption / 1000) + \n         (CASE WHEN LOCATE('пик', LOWER(r.PeakHours)) > 0 THEN 1 ELSE 0 END) +\n         (r.ContractPricePerUnit / 10) +\n         (CASE WHEN r.MeterStatus <> 'Активен' THEN 1 ELSE 0 END)) AS ComplexityScore\n    FROM RankedReadings r\n)\nSELECT *\nFROM ComplexityScore\nORDER BY ComplexityScore DESC\nLIMIT 48;"
        },
        {
            "question": "Найти топ-49 линий электропередачи с наиболее сложной системой управления за последние 3 месяца, анализируя инциденты, нагрузку, обслуживание и подключенные подстанции, с оценкой потенциальных рисков и эффективности инфраструктуры.",
            "sql_query": "WITH TransmissionLineIncidentAnalysis AS (\n    SELECT \n        tl.LineID,\n        tl.Name AS LineName,\n        tl.VoltageLevel,\n        tl.LengthKM,\n        tl.CapacityMW,\n        COUNT(i.IncidentID) AS TotalIncidentsCount,\n        COUNT(CASE WHEN i.Severity = 'Критическая' THEN 1 END) AS CriticalIncidentsCount,\n        AVG(i.DurationHours) AS AvgIncidentDuration,\n        MAX(i.Date) AS LastIncidentDate\n    FROM TransmissionLine tl\n    JOIN Incident i ON 1=1\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    GROUP BY tl.LineID, tl.Name, tl.VoltageLevel, tl.LengthKM, tl.CapacityMW\n),\nTransmissionLineMaintenanceAnalysis AS (\n    SELECT \n        tl.LineID,\n        SUM(m.Cost) AS TotalMaintenanceCost,\n        COUNT(m.MaintenanceID) AS MaintenanceCount,\n        AVG(m.DurationHours) AS AvgMaintenanceDuration\n    FROM TransmissionLine tl\n    JOIN Maintenance m ON 1=1\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY tl.LineID\n),\nTransmissionLineConnectionAnalysis AS (\n    SELECT \n        tl.LineID,\n        COUNT(DISTINCT s.SubstationID) AS ConnectedSubstationsCount,\n        SUM(s.CapacityMW) AS TotalSubstationCapacity,\n        COUNT(DISTINCT c.ConsumerID) AS IndustrialConsumersCount,\n        SUM(c.AverageMonthlyConsumption) AS TotalIndustrialConsumption\n    FROM TransmissionLine tl\n    JOIN Substation s ON tl.LineID = s.SubstationID\n    JOIN Consumer c ON 1=1\n    WHERE c.Type = 'Промышленность'\n    GROUP BY tl.LineID\n)\nSELECT \n    tli.LineName,\n    tli.VoltageLevel,\n    ROUND(tli.LengthKM, 2) AS LengthKM,\n    ROUND(tli.CapacityMW, 2) AS CapacityMW,\n    tli.TotalIncidentsCount,\n    tli.CriticalIncidentsCount,\n    ROUND(tli.AvgIncidentDuration, 2) AS AvgIncidentDuration,\n    tlma.TotalMaintenanceCost,\n    tlma.MaintenanceCount,\n    ROUND(tlma.AvgMaintenanceDuration, 2) AS AvgMaintenanceDuration,\n    tlca.ConnectedSubstationsCount,\n    ROUND(tlca.TotalSubstationCapacity, 2) AS TotalSubstationCapacity,\n    tlca.IndustrialConsumersCount,\n    ROUND(tlca.TotalIndustrialConsumption, 2) AS TotalIndustrialConsumption,\n    CASE \n        WHEN tli.CriticalIncidentsCount > 3 THEN 'Критический уровень сложности управления'\n        WHEN tli.CriticalIncidentsCount > 1 THEN 'Высокий уровень сложности управления'\n        ELSE 'Средний уровень сложности управления'\n    END AS ManagementComplexityLevel\nFROM TransmissionLineIncidentAnalysis tli\nJOIN TransmissionLineMaintenanceAnalysis tlma ON tli.LineID = tlma.LineID\nJOIN TransmissionLineConnectionAnalysis tlca ON tli.LineID = tlca.LineID\nORDER BY tli.CriticalIncidentsCount DESC, tlma.TotalMaintenanceCost DESC\nLIMIT 49;",
            "gpt-4o_response": "WITH TransmissionLineIncidents AS (\n    SELECT \n        tl.LineID,\n        tl.Name AS LineName,\n        COUNT(i.IncidentID) AS TotalIncidentsCount,\n        COUNT(CASE WHEN i.Severity = 'Критическая' THEN 1 END) AS CriticalIncidentsCount,\n        AVG(i.DurationHours) AS AvgIncidentDuration\n    FROM TransmissionLine tl\n    LEFT JOIN Incident i ON tl.LineID = i.PlantID\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    GROUP BY tl.LineID, tl.Name\n),\nLineMaintenanceAnalysis AS (\n    SELECT \n        tl.LineID,\n        SUM(m.Cost) AS TotalMaintenanceCost,\n        COUNT(m.MaintenanceID) AS MaintenanceCount,\n        AVG(m.DurationHours) AS AvgMaintenanceDuration\n    FROM TransmissionLine tl\n    LEFT JOIN Maintenance m ON tl.LineID = m.PlantID\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    GROUP BY tl.LineID\n),\nLineConnections AS (\n    SELECT \n        tl.LineID,\n        COUNT(DISTINCT s.SubstationID) AS ConnectedSubstationsCount\n    FROM TransmissionLine tl\n    LEFT JOIN Substation s ON tl.LineID = s.SubstationID\n    GROUP BY tl.LineID\n)\nSELECT \n    tli.LineName,\n    tli.TotalIncidentsCount,\n    tli.CriticalIncidentsCount,\n    ROUND(tli.AvgIncidentDuration, 2) AS AvgIncidentDuration,\n    ROUND(lma.TotalMaintenanceCost, 2) AS TotalMaintenanceCost,\n    lma.MaintenanceCount,\n    ROUND(lma.AvgMaintenanceDuration, 2) AS AvgMaintenanceDuration,\n    lc.ConnectedSubstationsCount,\n    CASE \n        WHEN tli.CriticalIncidentsCount > 2 THEN 'Критический уровень рисков'\n        WHEN tli.CriticalIncidentsCount > 0 THEN 'Высокий уровень рисков'\n        ELSE 'Средний уровень рисков'\n    END AS RiskLevel\nFROM TransmissionLineIncidents tli\nJOIN LineMaintenanceAnalysis lma ON tli.LineID = lma.LineID\nJOIN LineConnections lc ON tli.LineID = lc.LineID\nORDER BY tli.CriticalIncidentsCount DESC, tli.TotalIncidentsCount DESC\nLIMIT 49;",
            "gpt-4o_response_ru": "WITH TransmissionLineIncidents AS (\n    SELECT \n        tl.LineID,\n        tl.Name AS LineName,\n        COUNT(i.IncidentID) AS TotalIncidentsCount,\n        COUNT(CASE WHEN i.Severity = 'Критическая' THEN 1 END) AS CriticalIncidentsCount,\n        AVG(i.DurationHours) AS AvgIncidentDuration\n    FROM TransmissionLine tl\n    LEFT JOIN Incident i ON tl.LineID = i.PlantID\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    GROUP BY tl.LineID, tl.Name\n),\nLineMaintenanceAnalysis AS (\n    SELECT \n        tl.LineID,\n        SUM(m.Cost) AS TotalMaintenanceCost,\n        COUNT(m.MaintenanceID) AS MaintenanceCount,\n        AVG(m.DurationHours) AS AvgMaintenanceDuration\n    FROM TransmissionLine tl\n    LEFT JOIN Maintenance m ON tl.LineID = m.PlantID\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    GROUP BY tl.LineID\n),\nLineConnections AS (\n    SELECT \n        tl.LineID,\n        COUNT(DISTINCT s.SubstationID) AS ConnectedSubstationsCount\n    FROM TransmissionLine tl\n    LEFT JOIN Substation s ON tl.LineID = s.SubstationID\n    GROUP BY tl.LineID\n)\nSELECT \n    tli.LineName,\n    tli.TotalIncidentsCount,\n    tli.CriticalIncidentsCount,\n    ROUND(tli.AvgIncidentDuration, 2) AS AvgIncidentDuration,\n    ROUND(lma.TotalMaintenanceCost, 2) AS TotalMaintenanceCost,\n    lma.MaintenanceCount,\n    ROUND(lma.AvgMaintenanceDuration, 2) AS AvgMaintenanceDuration,\n    lc.ConnectedSubstationsCount,\n    CASE \n        WHEN tli.CriticalIncidentsCount > 2 THEN 'Критический уровень рисков'\n        WHEN tli.CriticalIncidentsCount > 0 THEN 'Высокий уровень рисков'\n        ELSE 'Средний уровень рисков'\n    END AS RiskLevel\nFROM TransmissionLineIncidents tli\nJOIN LineMaintenanceAnalysis lma ON tli.LineID = lma.LineID\nJOIN LineConnections lc ON tli.LineID = lc.LineID\nORDER BY tli.CriticalIncidentsCount DESC, tli.TotalIncidentsCount DESC\nLIMIT 49;",
            "google/gemini-2.0-flash-001_response": "WITH TransmissionLineAnalysis AS (\n    SELECT \n        tl.LineID,\n        tl.Name AS LineName,\n        tl.VoltageLevel,\n        tl.LengthKM,\n        tl.CapacityMW,\n        COUNT(DISTINCT i.IncidentID) AS IncidentCount,\n        SUM(i.DurationHours) AS TotalIncidentDuration,\n        AVG(i.Severity = 'Критическая') AS CriticalIncidentRatio,\n        SUM(m.Cost) AS TotalMaintenanceCost,\n        AVG(m.DurationHours) AS AvgMaintenanceDuration,\n        COUNT(DISTINCT s.SubstationID) AS SubstationCount\n    FROM TransmissionLine tl\n    LEFT JOIN Incident i ON tl.LineID = i.PlantID AND i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    LEFT JOIN Maintenance m ON tl.LineID = m.PlantID AND m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    LEFT JOIN Substation s ON tl.OwnerCompanyID = s.OwnerCompanyID\n    GROUP BY tl.LineID, tl.Name, tl.VoltageLevel, tl.LengthKM, tl.CapacityMW\n),\nRiskAssessment AS (\n    SELECT \n        LineID,\n        LineName,\n        VoltageLevel,\n        LengthKM,\n        CapacityMW,\n        IncidentCount,\n        TotalIncidentDuration,\n        CriticalIncidentRatio,\n        TotalMaintenanceCost,\n        AvgMaintenanceDuration,\n        SubstationCount,\n        (IncidentCount * 0.4 + CriticalIncidentRatio * 0.3 + TotalMaintenanceCost * 0.2 + AvgMaintenanceDuration * 0.1) AS ComplexityScore,\n        CASE\n            WHEN IncidentCount > 5 OR CriticalIncidentRatio > 0.5 THEN 'Высокий риск'\n            WHEN IncidentCount > 2 OR CriticalIncidentRatio > 0.2 THEN 'Средний риск'\n            ELSE 'Низкий риск'\n        END AS PotentialRisk,\n        CASE\n            WHEN CapacityMW / LengthKM > 1 THEN 'Высокая эффективность'\n            WHEN CapacityMW / LengthKM > 0.5 THEN 'Средняя эффективность'\n            ELSE 'Низкая эффективность'\n        END AS InfrastructureEfficiency\n    FROM TransmissionLineAnalysis\n)\nSELECT \n    LineName,\n    VoltageLevel,\n    LengthKM,\n    CapacityMW,\n    IncidentCount,\n    TotalIncidentDuration,\n    CriticalIncidentRatio,\n    TotalMaintenanceCost,\n    AvgMaintenanceDuration,\n    SubstationCount,\n    ComplexityScore,\n    PotentialRisk,\n    InfrastructureEfficiency\nFROM RiskAssessment\nORDER BY ComplexityScore DESC\nLIMIT 49;",
            "google/gemini-2.0-flash-001_response_ru": "WITH TransmissionLineAnalysis AS (\n    SELECT\n        tl.LineID,\n        tl.Name AS LineName,\n        tl.VoltageLevel,\n        tl.LengthKM,\n        tl.CapacityMW,\n        oc.Name AS OwnerCompanyName,\n        COUNT(DISTINCT i.IncidentID) AS IncidentCount,\n        SUM(CASE WHEN i.Severity = 'Критическая' THEN 1 ELSE 0 END) AS CriticalIncidentCount,\n        AVG(i.DurationHours) AS AvgIncidentDuration,\n        SUM(m.Cost) AS TotalMaintenanceCost,\n        AVG(m.DurationHours) AS AvgMaintenanceDuration,\n        COUNT(DISTINCT s.SubstationID) AS ConnectedSubstationsCount\n    FROM TransmissionLine tl\n    JOIN OwnerCompany oc ON tl.OwnerCompanyID = oc.CompanyID\n    LEFT JOIN Incident i ON tl.LineID = i.PlantID AND i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    LEFT JOIN Maintenance m ON tl.LineID = m.PlantID AND m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    LEFT JOIN Substation s ON tl.LineID = s.OwnerCompanyID\n    GROUP BY tl.LineID, tl.Name, tl.VoltageLevel, tl.LengthKM, tl.CapacityMW, oc.Name\n),\nRiskAssessment AS (\n    SELECT\n        LineID,\n        LineName,\n        VoltageLevel,\n        LengthKM,\n        CapacityMW,\n        OwnerCompanyName,\n        IncidentCount,\n        CriticalIncidentCount,\n        AvgIncidentDuration,\n        TotalMaintenanceCost,\n        AvgMaintenanceDuration,\n        ConnectedSubstationsCount,\n        (IncidentCount * 0.4 + CriticalIncidentCount * 0.6) AS RiskScore,\n        CASE\n            WHEN (IncidentCount + CriticalIncidentCount) > 5 THEN 'Высокий'\n            WHEN (IncidentCount + CriticalIncidentCount) > 2 THEN 'Средний'\n            ELSE 'Низкий'\n        END AS RiskLevel,\n        (CapacityMW / LengthKM) AS EfficiencyIndex\n    FROM TransmissionLineAnalysis\n)\nSELECT\n    ra.LineName,\n    ra.VoltageLevel,\n    ra.LengthKM,\n    ra.CapacityMW,\n    ra.OwnerCompanyName,\n    ra.IncidentCount,\n    ra.CriticalIncidentCount,\n    ROUND(ra.AvgIncidentDuration, 2) AS AvgIncidentDuration,\n    ROUND(ra.TotalMaintenanceCost, 2) AS TotalMaintenanceCost,\n    ROUND(ra.AvgMaintenanceDuration, 2) AS AvgMaintenanceDuration,\n    ra.ConnectedSubstationsCount,\n    ra.RiskLevel,\n    ROUND(ra.EfficiencyIndex, 2) AS EfficiencyIndex,\n    ROUND(ra.RiskScore, 2) AS RiskScore\nFROM RiskAssessment ra\nORDER BY ra.RiskScore DESC\nLIMIT 49;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH TransmissionLineIncidents AS (\n    SELECT \n        tl.LineID,\n        tl.Name AS LineName,\n        tl.VoltageLevel,\n        tl.LengthKM,\n        tl.CapacityMW,\n        COUNT(i.IncidentID) AS TotalIncidentsCount,\n        COUNT(CASE WHEN i.Severity = 'Критическая' THEN 1 END) AS CriticalIncidentsCount,\n        MAX(i.Date) AS LastIncidentDate,\n        AVG(i.DurationHours) AS AvgIncidentDuration\n    FROM TransmissionLine tl\n    JOIN Incident i ON tl.LineID = i.PlantID\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    GROUP BY tl.LineID, tl.Name, tl.VoltageLevel, tl.LengthKM, tl.CapacityMW\n),\nLineMaintenanceAnalysis AS (\n    SELECT \n        tl.LineID,\n        SUM(m.Cost) AS TotalMaintenanceCost,\n        COUNT(m.MaintenanceID) AS MaintenanceCount,\n        AVG(m.DurationHours) AS AvgMaintenanceDuration\n    FROM TransmissionLine tl\n    JOIN Maintenance m ON tl.LineID = m.PlantID\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY tl.LineID\n),\nLineConnections AS (\n    SELECT \n        tl.LineID,\n        COUNT(DISTINCT s.SubstationID) AS ConnectedSubstationsCount,\n        COUNT(DISTINCT c.ConsumerID) AS IndustrialConsumersCount,\n        SUM(c.AverageMonthlyConsumption) AS TotalIndustrialConsumption\n    FROM TransmissionLine tl\n    JOIN Substation s ON tl.LineID = s.SubstationID\n    JOIN Consumer c ON s.SubstationID = c.ConsumerID\n    WHERE c.Type = 'Промышленность'\n    GROUP BY tl.LineID\n),\nLineLoadAnalysis AS (\n    SELECT \n        tl.LineID,\n        AVG(c.AverageMonthlyConsumption) AS AvgMonthlyLoad,\n        MAX(c.AverageMonthlyConsumption) AS MaxMonthlyLoad\n    FROM TransmissionLine tl\n    JOIN Consumer c ON tl.LineID = c.ConsumerID\n    GROUP BY tl.LineID\n)\nSELECT \n    tli.LineName,\n    tli.VoltageLevel,\n    ROUND(tli.LengthKM, 2) AS LengthKM,\n    ROUND(tli.CapacityMW, 2) AS CapacityMW,\n    tli.TotalIncidentsCount,\n    tli.CriticalIncidentsCount,\n    ROUND(tli.AvgIncidentDuration, 2) AS AvgIncidentDuration,\n    ROUND(lma.TotalMaintenanceCost, 2) AS TotalMaintenanceCost,\n    lma.MaintenanceCount,\n    ROUND(lma.AvgMaintenanceDuration, 2) AS AvgMaintenanceDuration,\n    lc.ConnectedSubstationsCount,\n    lc.IndustrialConsumersCount,\n    ROUND(lc.TotalIndustrialConsumption, 2) AS TotalIndustrialConsumption,\n    ROUND(lla.AvgMonthlyLoad, 2) AS AvgMonthlyLoad,\n    ROUND(lla.MaxMonthlyLoad, 2) AS MaxMonthlyLoad,\n    CASE \n        WHEN tli.CriticalIncidentsCount > 2 THEN 'Критический уровень рисков'\n        WHEN tli.CriticalIncidentsCount > 0 THEN 'Высокий уровень рисков'\n        ELSE 'Средний уровень рисков'\n    END AS RiskLevel\nFROM TransmissionLineIncidents tli\nJOIN LineMaintenanceAnalysis lma ON tli.LineID = lma.LineID\nJOIN LineConnections lc ON tli.LineID = lc.LineID\nJOIN LineLoadAnalysis lla ON tli.LineID = lla.LineID\nORDER BY tli.CriticalIncidentsCount DESC, tli.TotalIncidentsCount DESC\nLIMIT 49;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH TransmissionLineIncidents AS (\n    SELECT \n        tl.LineID,\n        tl.Name AS LineName,\n        tl.VoltageLevel,\n        tl.LengthKM,\n        tl.CapacityMW,\n        COUNT(i.IncidentID) AS TotalIncidentsCount,\n        COUNT(CASE WHEN i.Severity = 'Критическая' THEN 1 END) AS CriticalIncidentsCount,\n        MAX(i.Date) AS LastIncidentDate,\n        AVG(i.DurationHours) AS AvgIncidentDuration\n    FROM TransmissionLine tl\n    LEFT JOIN Incident i ON tl.LineID = i.PlantID\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) OR i.Date IS NULL\n    GROUP BY tl.LineID, tl.Name, tl.VoltageLevel, tl.LengthKM, tl.CapacityMW\n),\nLineMaintenanceAnalysis AS (\n    SELECT \n        tl.LineID,\n        SUM(m.Cost) AS TotalMaintenanceCost,\n        COUNT(m.MaintenanceID) AS MaintenanceCount,\n        AVG(m.DurationHours) AS AvgMaintenanceDuration\n    FROM TransmissionLine tl\n    LEFT JOIN Maintenance m ON tl.LineID = m.PlantID\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) OR m.Date IS NULL\n    GROUP BY tl.LineID\n),\nLineConnections AS (\n    SELECT \n        tl.LineID,\n        COUNT(DISTINCT s.SubstationID) AS ConnectedSubstationsCount,\n        COUNT(DISTINCT c.ConsumerID) AS IndustrialConsumersCount,\n        SUM(c.AverageMonthlyConsumption) AS TotalIndustrialConsumption\n    FROM TransmissionLine tl\n    LEFT JOIN Substation s ON tl.LineID = s.SubstationID\n    LEFT JOIN Consumer c ON tl.LineID = c.ConsumerID\n    WHERE c.Type = 'Промышленность' OR c.Type IS NULL\n    GROUP BY tl.LineID\n),\nLineLoadAnalysis AS (\n    SELECT \n        tl.LineID,\n        AVG(tl.CapacityMW - (SELECT AVG(c.AverageMonthlyConsumption) FROM Consumer c WHERE c.ConsumerID = tl.LineID)) AS AvgAvailableCapacity\n    FROM TransmissionLine tl\n    GROUP BY tl.LineID\n)\nSELECT \n    tli.LineName,\n    tli.VoltageLevel,\n    ROUND(tli.LengthKM, 2) AS LengthKM,\n    ROUND(tli.CapacityMW, 2) AS CapacityMW,\n    tli.TotalIncidentsCount,\n    tli.CriticalIncidentsCount,\n    ROUND(tli.AvgIncidentDuration, 2) AS AvgIncidentDuration,\n    ROUND(lma.TotalMaintenanceCost, 2) AS TotalMaintenanceCost,\n    lma.MaintenanceCount,\n    ROUND(lma.AvgMaintenanceDuration, 2) AS AvgMaintenanceDuration,\n    lc.ConnectedSubstationsCount,\n    lc.IndustrialConsumersCount,\n    ROUND(lc.TotalIndustrialConsumption, 2) AS TotalIndustrialConsumption,\n    ROUND(lla.AvgAvailableCapacity, 2) AS AvgAvailableCapacity,\n    CASE \n        WHEN tli.CriticalIncidentsCount > 2 THEN 'Критический уровень рисков'\n        WHEN tli.CriticalIncidentsCount > 0 THEN 'Высокий уровень рисков'\n        ELSE 'Средний уровень рисков'\n    END AS RiskLevel,\n    CASE \n        WHEN lma.TotalMaintenanceCost > 1000000 THEN 'Высокая стоимость обслуживания'\n        WHEN lma.TotalMaintenanceCost > 500000 THEN 'Средняя стоимость обслуживания'\n        ELSE 'Низкая стоимость обслуживания'\n    END AS MaintenanceCostLevel\nFROM TransmissionLineIncidents tli\nJOIN LineMaintenanceAnalysis lma ON tli.LineID = lma.LineID\nJOIN LineConnections lc ON tli.LineID = lc.LineID\nJOIN LineLoadAnalysis lla ON tli.LineID = lla.LineID\nORDER BY tli.CriticalIncidentsCount DESC, tli.TotalIncidentsCount DESC\nLIMIT 49;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH TransmissionLineIncidents AS (\n    SELECT \n        tl.LineID,\n        tl.Name AS LineName,\n        tl.VoltageLevel,\n        tl.LengthKM,\n        tl.CapacityMW,\n        COUNT(i.IncidentID) AS TotalIncidentsCount,\n        COUNT(CASE WHEN i.Severity = 'Критическая' THEN 1 END) AS CriticalIncidentsCount,\n        MAX(i.Date) AS LastIncidentDate,\n        AVG(i.DurationHours) AS AvgIncidentDuration\n    FROM TransmissionLine tl\n    JOIN Incident i ON 1=1\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    GROUP BY tl.LineID, tl.Name, tl.VoltageLevel, tl.LengthKM, tl.CapacityMW\n),\nLineMaintenance AS (\n    SELECT \n        tl.LineID,\n        SUM(m.Cost) AS TotalMaintenanceCost,\n        COUNT(m.MaintenanceID) AS MaintenanceCount,\n        AVG(m.DurationHours) AS AvgMaintenanceDuration\n    FROM TransmissionLine tl\n    JOIN Maintenance m ON 1=1\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    GROUP BY tl.LineID\n),\nLineLoadAnalysis AS (\n    SELECT \n        tl.LineID,\n        COUNT(DISTINCT s.SubstationID) AS ConnectedSubstationsCount,\n        COUNT(DISTINCT c.ConsumerID) AS ConsumersCount,\n        AVG(c.AverageMonthlyConsumption) AS AvgConsumerConsumption\n    FROM TransmissionLine tl\n    JOIN Substation s ON tl.LineID = s.SubstationID\n    JOIN Consumer c ON 1=1\n    GROUP BY tl.LineID\n)\nSELECT \n    tli.LineName,\n    tli.VoltageLevel,\n    tli.LengthKM,\n    tli.CapacityMW,\n    tli.TotalIncidentsCount,\n    tli.CriticalIncidentsCount,\n    tli.AvgIncidentDuration,\n    lm.TotalMaintenanceCost,\n    lm.MaintenanceCount,\n    lm.AvgMaintenanceDuration,\n    lla.ConnectedSubstationsCount,\n    lla.ConsumersCount,\n    lla.AvgConsumerConsumption,\n    CASE \n        WHEN tli.CriticalIncidentsCount > 0 OR lm.MaintenanceCount > 5 THEN 'Высокий риск'\n        WHEN tli.TotalIncidentsCount > 3 OR lm.MaintenanceCount > 3 THEN 'Средний риск'\n        ELSE 'Низкий риск'\n    END AS RiskLevel,\n    CASE \n        WHEN tli.TotalIncidentsCount = 0 AND lm.MaintenanceCount = 0 THEN 'Высокая эффективность'\n        WHEN tli.TotalIncidentsCount <= 2 AND lm.MaintenanceCount <= 2 THEN 'Средняя эффективность'\n        ELSE 'Низкая эффективность'\n    END AS EfficiencyLevel\nFROM TransmissionLineIncidents tli\nJOIN LineMaintenance lm ON tli.LineID = lm.LineID\nJOIN LineLoadAnalysis lla ON tli.LineID = lla.LineID\nORDER BY tli.CriticalIncidentsCount DESC, tli.TotalIncidentsCount DESC, lm.MaintenanceCount DESC\nLIMIT 49;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "WITH LineIncidents AS (\n    SELECT \n        tl.LineID,\n        tl.Name AS LineName,\n        COUNT(i.IncidentID) AS IncidentCount,\n        SUM(CASE WHEN i.Severity = 'Критическая' THEN 1 ELSE 0 END) AS CriticalIncidents,\n        AVG(i.DurationHours) AS AvgIncidentDuration\n    FROM TransmissionLine tl\n    JOIN Incident i ON 1=1\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    GROUP BY tl.LineID, tl.Name\n),\nLineMaintenance AS (\n    SELECT \n        tl.LineID,\n        SUM(m.Cost) AS TotalMaintenanceCost,\n        COUNT(m.MaintenanceID) AS MaintenanceCount,\n        AVG(m.DurationHours) AS AvgMaintenanceDuration\n    FROM TransmissionLine tl\n    JOIN Maintenance m ON 1=1\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    GROUP BY tl.LineID\n),\nLineSubstations AS (\n    SELECT \n        tl.LineID,\n        COUNT(DISTINCT s.SubstationID) AS SubstationCount,\n        SUM(s.CapacityMW) AS TotalSubstationCapacity\n    FROM TransmissionLine tl\n    JOIN Substation s ON 1=1\n    GROUP BY tl.LineID\n),\nLineLoad AS (\n    SELECT \n        tl.LineID,\n        SUM(c.AverageMonthlyConsumption) AS TotalConsumption,\n        COUNT(DISTINCT c.ConsumerID) AS ConsumerCount\n    FROM TransmissionLine tl\n    JOIN Consumer c ON 1=1\n    GROUP BY tl.LineID\n)\nSELECT \n    tl.LineID,\n    tl.Name AS LineName,\n    tl.VoltageLevel,\n    tl.LengthKM,\n    tl.CapacityMW,\n    li.IncidentCount,\n    li.CriticalIncidents,\n    ROUND(li.AvgIncidentDuration, 2) AS AvgIncidentDuration,\n    ROUND(lm.TotalMaintenanceCost, 2) AS TotalMaintenanceCost,\n    lm.MaintenanceCount,\n    ROUND(lm.AvgMaintenanceDuration, 2) AS AvgMaintenanceDuration,\n    ls.SubstationCount,\n    ROUND(ls.TotalSubstationCapacity, 2) AS TotalSubstationCapacity,\n    ll.TotalConsumption,\n    ll.ConsumerCount,\n    CASE \n        WHEN li.CriticalIncidents > 0 THEN 'Высокий риск'\n        WHEN li.IncidentCount > 3 THEN 'Средний риск'\n        ELSE 'Низкий риск'\n    END AS RiskLevel,\n    ROUND((tl.CapacityMW - ll.TotalConsumption) / tl.CapacityMW * 100, 2) AS CapacityUtilizationPercent\nFROM TransmissionLine tl\nJOIN LineIncidents li ON tl.LineID = li.LineID\nJOIN LineMaintenance lm ON tl.LineID = lm.LineID\nJOIN LineSubstations ls ON tl.LineID = ls.LineID\nJOIN LineLoad ll ON tl.LineID = ll.LineID\nORDER BY li.CriticalIncidents DESC, li.IncidentCount DESC, lm.TotalMaintenanceCost DESC\nLIMIT 49;",
            "gigachat_response": "WITH TransmissionLineComplexity AS (\n    SELECT \n        tl.LineID,\n        tl.Name AS LineName,\n        tl.VoltageLevel,\n        tl.LengthKM,\n        tl.CapacityMW,\n        COUNT(i.IncidentID) AS TotalIncidentsCount,\n        COUNT(CASE WHEN i.Severity = 'Критическая' THEN 1 END) AS CriticalIncidentsCount,\n        AVG(i.DurationHours) AS AvgIncidentDuration,\n        SUM(m.Cost) AS TotalMaintenanceCost,\n        COUNT(m.MaintenanceID) AS MaintenanceCount,\n        AVG(m.DurationHours) AS AvgMaintenanceDuration,\n        COUNT(DISTINCT s.SubstationID) AS ConnectedSubstationsCount,\n        COUNT(DISTINCT c.ConsumerID) AS IndustrialConsumersCount,\n        SUM(c.AverageMonthlyConsumption) AS TotalIndustrialConsumption\n    FROM TransmissionLine tl\n    LEFT JOIN Incident i ON tl.LineID = i.PlantID AND i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    LEFT JOIN Maintenance m ON tl.LineID = m.PlantID AND m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    LEFT JOIN Substation s ON tl.LineID = s.SubstationID\n    LEFT JOIN Consumer c ON s.SubstationID = c.ConsumerID AND c.Type = 'Промышленность'\n    GROUP BY tl.LineID, tl.Name, tl.VoltageLevel, tl.LengthKM, tl.CapacityMW\n)\nSELECT \n    LineName,\n    VoltageLevel,\n    ROUND(LengthKM, 2) AS LengthKM,\n    ROUND(CapacityMW, 2) AS CapacityMW,\n    TotalIncidentsCount,\n    CriticalIncidentsCount,\n    ROUND(AvgIncidentDuration, 2) AS AvgIncidentDuration,\n    ROUND(TotalMaintenanceCost, 2) AS TotalMaintenanceCost,\n    MaintenanceCount,\n    ROUND(AVG(AvgMaintenanceDuration), 2) AS AvgMaintenanceDuration,\n    ConnectedSubstationsCount,\n    IndustrialConsumersCount,\n    ROUND(TotalIndustrialConsumption, 2) AS TotalIndustrialConsumption,\n    CASE \n        WHEN CriticalIncidentsCount > 2 THEN 'Критический уровень риска'\n        WHEN CriticalIncidentsCount > 0 THEN 'Высокий уровень риска'\n        ELSE 'Средний уровень риска'\n    END AS RiskLevel\nFROM TransmissionLineComplexity\nORDER BY CriticalIncidentsCount DESC, TotalIncidentsCount DESC\nLIMIT 49;",
            "gigachat_response_ru": "WITH LineIncidents AS (\n    SELECT \n        tl.LineID,\n        tl.Name AS LineName,\n        COUNT(i.IncidentID) AS IncidentsCount,\n        SUM(i.DurationHours) AS TotalIncidentDuration,\n        AVG(i.DurationHours) AS AvgIncidentDuration\n    FROM TransmissionLine tl\n    LEFT JOIN Incident i ON tl.LineID = i.PlantID\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    GROUP BY tl.LineID, tl.Name\n),\nLineLoads AS (\n    SELECT \n        tl.LineID,\n        AVG(tl.CapacityMW / tl.LengthKM) AS LoadIntensity\n    FROM TransmissionLine tl\n    GROUP BY tl.LineID\n),\nLineMaintenance AS (\n    SELECT \n        tl.LineID,\n        COUNT(m.MaintenanceID) AS MaintenanceCount,\n        SUM(m.Cost) AS TotalMaintenanceCost,\n        AVG(m.DurationHours) AS AvgMaintenanceDuration\n    FROM TransmissionLine tl\n    LEFT JOIN Maintenance m ON tl.LineID = m.PlantID\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    GROUP BY tl.LineID\n),\nConnectedStations AS (\n    SELECT \n        tl.LineID,\n        COUNT(DISTINCT s.SubstationID) AS ConnectedSubstationsCount\n    FROM TransmissionLine tl\n    INNER JOIN Substation s ON tl.StartLocation = s.Location OR tl.EndLocation = s.Location\n    GROUP BY tl.LineID\n)\nSELECT \n    li.LineName,\n    li.IncidentsCount,\n    ROUND(li.TotalIncidentDuration, 2) AS TotalIncidentDuration,\n    ROUND(li.AvgIncidentDuration, 2) AS AvgIncidentDuration,\n    ll.LoadIntensity,\n    lm.MaintenanceCount,\n    ROUND(lm.TotalMaintenanceCost, 2) AS TotalMaintenanceCost,\n    ROUND(lm.AvgMaintenanceDuration, 2) AS AvgMaintenanceDuration,\n    cs.ConnectedSubstationsCount\nFROM LineIncidents li\nLEFT JOIN LineLoads ll ON li.LineID = ll.LineID\nLEFT JOIN LineMaintenance lm ON li.LineID = lm.LineID\nLEFT JOIN ConnectedStations cs ON li.LineID = cs.LineID\nORDER BY li.IncidentsCount DESC, li.TotalIncidentDuration DESC\nLIMIT 49;"
        },
        {
            "question": "Найти топ-17 подстанций с наибольшим количеством подключенных промышленных потребителей и высокой нагрузкой за последний квартал, и показать для каждой подстанции информацию о типе потребителей, среднем потреблении, стоимости обслуживания и количестве инцидентов.",
            "sql_query": "WITH SubstationLoad AS (\n    SELECT \n        s.SubstationID,\n        s.Name AS SubstationName,\n        s.CapacityMW,\n        COUNT(DISTINCT tl.LineID) AS ConnectedLinesCount,\n        SUM(tl.CapacityMW) AS TotalLineCapacity\n    FROM Substation s\n    JOIN TransmissionLine tl ON s.SubstationID = tl.LineID\n    GROUP BY s.SubstationID, s.Name, s.CapacityMW\n),\nIndustrialConsumers AS (\n    SELECT \n        s.SubstationID,\n        COUNT(DISTINCT c.ConsumerID) AS IndustrialConsumersCount,\n        AVG(c.AverageMonthlyConsumption) AS AvgConsumption,\n        SUM(c.AverageMonthlyConsumption) AS TotalConsumption\n    FROM Substation s\n    JOIN Consumer c ON 1=1\n    WHERE c.Type = 'Промышленность'\n    GROUP BY s.SubstationID\n),\nSubstationIncidents AS (\n    SELECT \n        s.SubstationID,\n        COUNT(i.IncidentID) AS IncidentsCount,\n        MAX(i.Date) AS LastIncidentDate,\n        MAX(i.Severity) AS LastIncidentSeverity\n    FROM Substation s\n    JOIN Incident i ON 1=1\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    GROUP BY s.SubstationID\n),\nSubstationMaintenance AS (\n    SELECT \n        s.SubstationID,\n        AVG(m.Cost) AS AvgMaintenanceCost,\n        SUM(m.Cost) AS TotalMaintenanceCost,\n        COUNT(m.MaintenanceID) AS MaintenanceCount\n    FROM Substation s\n    JOIN Maintenance m ON 1=1\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY s.SubstationID\n)\nSELECT \n    sl.SubstationName,\n    ROUND(sl.CapacityMW, 2) AS CapacityMW,\n    sl.ConnectedLinesCount,\n    ROUND(sl.TotalLineCapacity, 2) AS TotalLineCapacity,\n    ic.IndustrialConsumersCount,\n    ROUND(ic.AvgConsumption, 2) AS AvgConsumption,\n    ROUND(ic.TotalConsumption, 2) AS TotalConsumption,\n    si.IncidentsCount,\n    si.LastIncidentSeverity,\n    ROUND(sm.AvgMaintenanceCost, 2) AS AvgMaintenanceCost,\n    ROUND(sm.TotalMaintenanceCost, 2) AS TotalMaintenanceCost,\n    sm.MaintenanceCount,\n    CASE \n        WHEN ic.TotalConsumption > sl.CapacityMW * 0.8 THEN 'Высокая нагрузка'\n        WHEN ic.TotalConsumption > sl.CapacityMW * 0.5 THEN 'Средняя нагрузка'\n        ELSE 'Низкая нагрузка'\n    END AS LoadLevel\nFROM SubstationLoad sl\nJOIN IndustrialConsumers ic ON sl.SubstationID = ic.SubstationID\nJOIN SubstationIncidents si ON sl.SubstationID = si.SubstationID\nJOIN SubstationMaintenance sm ON sl.SubstationID = sm.SubstationID\nORDER BY ic.IndustrialConsumersCount DESC, ic.TotalConsumption DESC\nLIMIT 17;",
            "gpt-4o_response": "WITH IndustrialConsumers AS (\n    SELECT \n        c.ConsumerID,\n        c.Name AS ConsumerName,\n        c.Type AS ConsumerType,\n        c.AverageMonthlyConsumption,\n        m.SubstationID\n    FROM Consumer c\n    JOIN Meter m ON c.ConsumerID = m.ConsumerID\n    WHERE c.Type = 'Промышленность'\n),\nSubstationAnalysis AS (\n    SELECT \n        s.SubstationID,\n        s.Name AS SubstationName,\n        COUNT(ic.ConsumerID) AS IndustrialConsumerCount,\n        AVG(ic.AverageMonthlyConsumption) AS AvgMonthlyConsumption\n    FROM Substation s\n    LEFT JOIN IndustrialConsumers ic ON s.SubstationID = ic.SubstationID\n    GROUP BY s.SubstationID, s.Name\n),\nSubstationIncidents AS (\n    SELECT \n        s.SubstationID,\n        COUNT(i.IncidentID) AS IncidentCount\n    FROM Substation s\n    LEFT JOIN Incident i ON s.SubstationID = i.PlantID\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    GROUP BY s.SubstationID\n),\nSubstationMaintenance AS (\n    SELECT \n        s.SubstationID,\n        SUM(m.Cost) AS TotalMaintenanceCost\n    FROM Substation s\n    LEFT JOIN Maintenance m ON s.SubstationID = m.PlantID\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    GROUP BY s.SubstationID\n)\nSELECT \n    sa.SubstationName,\n    sa.IndustrialConsumerCount,\n    sa.AvgMonthlyConsumption,\n    COALESCE(sm.TotalMaintenanceCost, 0) AS TotalMaintenanceCost,\n    COALESCE(si.IncidentCount, 0) AS IncidentCount\nFROM SubstationAnalysis sa\nLEFT JOIN SubstationIncidents si ON sa.SubstationID = si.SubstationID\nLEFT JOIN SubstationMaintenance sm ON sa.SubstationID = sm.SubstationID\nORDER BY sa.IndustrialConsumerCount DESC, sa.AvgMonthlyConsumption DESC\nLIMIT 17;",
            "gpt-4o_response_ru": "WITH IndustrialConsumers AS (\n    SELECT \n        c.ConsumerID,\n        c.Name AS ConsumerName,\n        c.Type AS ConsumerType,\n        c.Location,\n        c.AverageMonthlyConsumption,\n        m.SubstationID\n    FROM Consumer c\n    JOIN Meter m ON c.ConsumerID = m.ConsumerID\n    WHERE c.Type = 'Промышленность'\n),\nSubstationConsumerCount AS (\n    SELECT \n        ic.SubstationID,\n        COUNT(ic.ConsumerID) AS IndustrialConsumerCount,\n        AVG(ic.AverageMonthlyConsumption) AS AvgMonthlyConsumption\n    FROM IndustrialConsumers ic\n    GROUP BY ic.SubstationID\n),\nSubstationIncidents AS (\n    SELECT \n        s.SubstationID,\n        COUNT(i.IncidentID) AS IncidentCount\n    FROM Substation s\n    LEFT JOIN Incident i ON s.SubstationID = i.PlantID\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    GROUP BY s.SubstationID\n),\nSubstationMaintenanceCost AS (\n    SELECT \n        s.SubstationID,\n        SUM(m.Cost) AS TotalMaintenanceCost\n    FROM Substation s\n    LEFT JOIN Maintenance m ON s.SubstationID = m.PlantID\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    GROUP BY s.SubstationID\n)\nSELECT \n    s.Name AS SubstationName,\n    s.Location,\n    s.CapacityMW,\n    s.VoltageLevel,\n    s.Status,\n    sc.IndustrialConsumerCount,\n    ROUND(sc.AvgMonthlyConsumption, 2) AS AvgMonthlyConsumption,\n    ROUND(sm.TotalMaintenanceCost, 2) AS TotalMaintenanceCost,\n    si.IncidentCount\nFROM Substation s\nJOIN SubstationConsumerCount sc ON s.SubstationID = sc.SubstationID\nLEFT JOIN SubstationIncidents si ON s.SubstationID = si.SubstationID\nLEFT JOIN SubstationMaintenanceCost sm ON s.SubstationID = sm.SubstationID\nORDER BY sc.IndustrialConsumerCount DESC, sc.AvgMonthlyConsumption DESC\nLIMIT 17;",
            "google/gemini-2.0-flash-001_response": "WITH IndustrialConsumers AS (\n    SELECT\n        c.ConsumerID,\n        c.Name AS ConsumerName,\n        c.Type AS ConsumerType,\n        c.Location AS ConsumerLocation,\n        c.AverageMonthlyConsumption\n    FROM Consumer c\n    WHERE c.Type = 'Промышленность'\n),\nSubstationConsumers AS (\n    SELECT\n        s.SubstationID,\n        s.Name AS SubstationName,\n        s.Location AS SubstationLocation,\n        s.Latitude,\n        s.Longitude,\n        COUNT(DISTINCT ic.ConsumerID) AS IndustrialConsumerCount,\n        SUM(ic.AverageMonthlyConsumption) AS TotalConsumption\n    FROM Substation s\n    JOIN IndustrialConsumers ic ON 1=1\n    GROUP BY s.SubstationID, s.Name, s.Location, s.Latitude, s.Longitude\n),\nRecentIncidents AS (\n    SELECT\n        i.PlantID,\n        COUNT(i.IncidentID) AS IncidentCount\n    FROM Incident i\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    GROUP BY i.PlantID\n),\nMaintenanceCosts AS (\n    SELECT\n        m.PlantID,\n        SUM(m.Cost) AS TotalMaintenanceCost\n    FROM Maintenance m\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    GROUP BY m.PlantID\n)\nSELECT\n    sc.SubstationName,\n    sc.SubstationLocation,\n    sc.Latitude,\n    sc.Longitude,\n    sc.IndustrialConsumerCount,\n    ROUND(sc.TotalConsumption, 2) AS TotalConsumption,\n    COALESCE(ROUND(mc.TotalMaintenanceCost, 2), 0) AS TotalMaintenanceCost,\n    COALESCE(ri.IncidentCount, 0) AS IncidentCount,\n    GROUP_CONCAT(DISTINCT ic.ConsumerType) AS ConsumerTypes\nFROM SubstationConsumers sc\nLEFT JOIN MaintenanceCosts mc ON sc.SubstationID = mc.PlantID\nLEFT JOIN RecentIncidents ri ON sc.SubstationID = ri.PlantID\nLEFT JOIN Consumer ic ON 1=1\nWHERE ic.Type = 'Промышленность'\nGROUP BY sc.SubstationID, sc.SubstationName, sc.SubstationLocation, sc.Latitude, sc.Longitude, sc.IndustrialConsumerCount, sc.TotalConsumption, mc.TotalMaintenanceCost, ri.IncidentCount\nORDER BY sc.IndustrialConsumerCount DESC, sc.TotalConsumption DESC\nLIMIT 17;",
            "google/gemini-2.0-flash-001_response_ru": "WITH IndustrialConsumers AS (\n    SELECT\n        ConsumerID,\n        Name AS ConsumerName,\n        Type AS ConsumerType,\n        Location AS ConsumerLocation,\n        AverageMonthlyConsumption\n    FROM Consumer\n    WHERE Type = 'Промышленность'\n),\nSubstationConsumers AS (\n    SELECT\n        s.SubstationID,\n        s.Name AS SubstationName,\n        s.Location AS SubstationLocation,\n        s.Latitude,\n        s.Longitude,\n        ic.ConsumerID,\n        ic.ConsumerName,\n        ic.ConsumerType,\n        ic.ConsumerLocation,\n        ic.AverageMonthlyConsumption\n    FROM Substation s\n    JOIN IndustrialConsumers ic ON 1=1\n),\nConsumerContracts AS (\n    SELECT\n        sc.SubstationID,\n        sc.SubstationName,\n        sc.SubstationLocation,\n        sc.Latitude,\n        sc.Longitude,\n        sc.ConsumerID,\n        sc.ConsumerName,\n        sc.ConsumerType,\n        sc.AverageMonthlyConsumption,\n        c.ContractID,\n        c.StartDate,\n        c.EndDate,\n        c.PricePerUnit,\n        c.Volume,\n        c.Status AS ContractStatus\n    FROM SubstationConsumers sc\n    JOIN `Contract` c ON sc.ConsumerID = c.ConsumerID\n    WHERE c.StartDate <= CURRENT_DATE AND c.EndDate >= CURRENT_DATE\n),\nSubstationLoad AS (\n    SELECT\n        SubstationID,\n        SubstationName,\n        SubstationLocation,\n        Latitude,\n        Longitude,\n        COUNT(DISTINCT ConsumerID) AS NumberOfConsumers,\n        SUM(AverageMonthlyConsumption) AS TotalConsumption\n    FROM ConsumerContracts\n    GROUP BY SubstationID, SubstationName, SubstationLocation, Latitude, Longitude\n),\nMaintenanceCosts AS (\n    SELECT\n        s.SubstationID,\n        SUM(m.Cost) AS TotalMaintenanceCost,\n        COUNT(m.MaintenanceID) AS MaintenanceCount\n    FROM Substation s\n    LEFT JOIN Maintenance m ON s.PlantID = m.PlantID\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    GROUP BY s.SubstationID\n),\nIncidentCounts AS (\n    SELECT\n        s.SubstationID,\n        COUNT(i.IncidentID) AS NumberOfIncidents\n    FROM Substation s\n    LEFT JOIN Incident i ON s.PlantID = i.PlantID\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    GROUP BY s.SubstationID\n)\nSELECT\n    sl.SubstationName,\n    sl.SubstationLocation,\n    sl.Latitude,\n    sl.Longitude,\n    sl.NumberOfConsumers,\n    ROUND(sl.TotalConsumption, 2) AS TotalConsumption,\n    COALESCE(mc.TotalMaintenanceCost, 0) AS TotalMaintenanceCost,\n    COALESCE(ic.NumberOfIncidents, 0) AS NumberOfIncidents,\n    GROUP_CONCAT(DISTINCT cc.ConsumerType) AS ConsumerTypes\nFROM SubstationLoad sl\nLEFT JOIN MaintenanceCosts mc ON sl.SubstationID = mc.SubstationID\nLEFT JOIN IncidentCounts ic ON sl.SubstationID = ic.SubstationID\nLEFT JOIN ConsumerContracts cc ON sl.SubstationID = cc.SubstationID\nGROUP BY sl.SubstationID, sl.SubstationName, sl.SubstationLocation, sl.Latitude, sl.Longitude, sl.NumberOfConsumers, sl.TotalConsumption, mc.TotalMaintenanceCost, ic.NumberOfIncidents\nORDER BY sl.NumberOfConsumers DESC, sl.TotalConsumption DESC\nLIMIT 17;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH SubstationConsumers AS (\n    SELECT \n        s.SubstationID,\n        s.Name AS SubstationName,\n        s.CapacityMW,\n        s.Status,\n        COUNT(DISTINCT c.ConsumerID) AS IndustrialConsumersCount,\n        AVG(c.AverageMonthlyConsumption) AS AvgMonthlyConsumption,\n        SUM(c.AverageMonthlyConsumption) AS TotalMonthlyConsumption\n    FROM Substation s\n    JOIN Consumer c ON s.SubstationID = c.ConsumerID\n    WHERE c.Type = 'Промышленность'\n    GROUP BY s.SubstationID, s.Name, s.CapacityMW, s.Status\n),\nSubstationMaintenance AS (\n    SELECT \n        s.SubstationID,\n        SUM(m.Cost) AS TotalMaintenanceCost,\n        COUNT(m.MaintenanceID) AS MaintenanceCount\n    FROM Substation s\n    JOIN Maintenance m ON s.SubstationID = m.PlantID\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY s.SubstationID\n),\nSubstationIncidents AS (\n    SELECT \n        s.SubstationID,\n        COUNT(i.IncidentID) AS TotalIncidentsCount\n    FROM Substation s\n    JOIN Incident i ON s.SubstationID = i.PlantID\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    GROUP BY s.SubstationID\n)\nSELECT \n    sc.SubstationName,\n    sc.Status,\n    sc.CapacityMW,\n    sc.IndustrialConsumersCount,\n    ROUND(sc.AvgMonthlyConsumption, 2) AS AvgMonthlyConsumption,\n    ROUND(sc.TotalMonthlyConsumption, 2) AS TotalMonthlyConsumption,\n    ROUND(sm.TotalMaintenanceCost, 2) AS TotalMaintenanceCost,\n    sm.MaintenanceCount,\n    si.TotalIncidentsCount,\n    CASE \n        WHEN sc.IndustrialConsumersCount > 10 THEN 'Высокая нагрузка'\n        WHEN sc.IndustrialConsumersCount > 5 THEN 'Средняя нагрузка'\n        ELSE 'Низкая нагрузка'\n    END AS LoadLevel\nFROM SubstationConsumers sc\nJOIN SubstationMaintenance sm ON sc.SubstationID = sm.SubstationID\nJOIN SubstationIncidents si ON sc.SubstationID = si.SubstationID\nORDER BY sc.IndustrialConsumersCount DESC, sc.TotalMonthlyConsumption DESC\nLIMIT 17;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH SubstationConsumers AS (\n    SELECT \n        s.SubstationID,\n        s.Name AS SubstationName,\n        s.CapacityMW,\n        c.ConsumerID,\n        c.Name AS ConsumerName,\n        c.Type AS ConsumerType,\n        c.AverageMonthlyConsumption\n    FROM Substation s\n    JOIN Consumer c ON s.SubstationID = c.ConsumerID\n),\nSubstationLoad AS (\n    SELECT \n        sc.SubstationID,\n        SUM(sc.AverageMonthlyConsumption) AS TotalConsumption,\n        COUNT(DISTINCT sc.ConsumerID) AS ConsumerCount,\n        AVG(sc.AverageMonthlyConsumption) AS AvgConsumption\n    FROM SubstationConsumers sc\n    WHERE sc.ConsumerType = 'Промышленность'\n    GROUP BY sc.SubstationID\n),\nSubstationMaintenance AS (\n    SELECT \n        s.SubstationID,\n        SUM(m.Cost) AS TotalMaintenanceCost\n    FROM Substation s\n    JOIN Maintenance m ON s.SubstationID = m.PlantID\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 QUARTER)\n    GROUP BY s.SubstationID\n),\nSubstationIncidents AS (\n    SELECT \n        s.SubstationID,\n        COUNT(i.IncidentID) AS IncidentCount\n    FROM Substation s\n    JOIN Incident i ON s.SubstationID = i.PlantID\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 QUARTER)\n    GROUP BY s.SubstationID\n)\nSELECT \n    sl.SubstationID,\n    s.Name AS SubstationName,\n    s.CapacityMW,\n    sl.ConsumerCount,\n    ROUND(sl.TotalConsumption, 2) AS TotalConsumption,\n    ROUND(sl.AvgConsumption, 2) AS AvgConsumption,\n    ROUND(sm.TotalMaintenanceCost, 2) AS TotalMaintenanceCost,\n    si.IncidentCount\nFROM SubstationLoad sl\nJOIN Substation s ON sl.SubstationID = s.SubstationID\nJOIN SubstationMaintenance sm ON sl.SubstationID = sm.SubstationID\nJOIN SubstationIncidents si ON sl.SubstationID = si.SubstationID\nORDER BY sl.ConsumerCount DESC\nLIMIT 17;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH IndustrialConsumers AS (\n    SELECT \n        s.SubstationID,\n        c.Type AS ConsumerType,\n        AVG(c.AverageMonthlyConsumption) AS AvgConsumption,\n        COUNT(c.ConsumerID) AS ConsumerCount\n    FROM Substation s\n    JOIN Consumer c ON 1=1\n    WHERE c.Type = 'Промышленность'\n    GROUP BY s.SubstationID, c.Type\n),\nSubstationMaintenance AS (\n    SELECT \n        s.SubstationID,\n        SUM(m.Cost) AS TotalMaintenanceCost,\n        COUNT(m.MaintenanceID) AS MaintenanceCount\n    FROM Substation s\n    JOIN Maintenance m ON s.SubstationID = m.PlantID\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    GROUP BY s.SubstationID\n),\nSubstationIncidents AS (\n    SELECT \n        s.SubstationID,\n        COUNT(i.IncidentID) AS IncidentCount\n    FROM Substation s\n    JOIN Incident i ON s.SubstationID = i.PlantID\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    GROUP BY s.SubstationID\n)\nSELECT \n    s.Name AS SubstationName,\n    s.Location,\n    s.CapacityMW,\n    ic.ConsumerType,\n    ROUND(ic.AvgConsumption, 2) AS AvgConsumption,\n    ic.ConsumerCount,\n    ROUND(sm.TotalMaintenanceCost, 2) AS MaintenanceCost,\n    si.IncidentCount\nFROM Substation s\nJOIN IndustrialConsumers ic ON s.SubstationID = ic.SubstationID\nJOIN SubstationMaintenance sm ON s.SubstationID = sm.SubstationID\nJOIN SubstationIncidents si ON s.SubstationID = si.SubstationID\nORDER BY ic.ConsumerCount DESC, ic.AvgConsumption DESC\nLIMIT 17;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "WITH IndustrialConsumers AS (\n    SELECT \n        s.SubstationID,\n        COUNT(c.ConsumerID) AS IndustrialConsumerCount,\n        AVG(c.AverageMonthlyConsumption) AS AvgConsumption,\n        SUM(ct.PricePerUnit * ct.Volume) AS TotalContractValue\n    FROM Substation s\n    JOIN Consumer c ON 1=1\n    JOIN `Contract` ct ON c.ConsumerID = ct.ConsumerID\n    WHERE c.Type = 'Промышленность'\n    AND ct.Status = 'active'\n    GROUP BY s.SubstationID\n),\nSubstationIncidents AS (\n    SELECT \n        s.SubstationID,\n        COUNT(i.IncidentID) AS IncidentCount\n    FROM Substation s\n    JOIN Incident i ON s.SubstationID = i.PlantID\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    GROUP BY s.SubstationID\n)\nSELECT \n    s.Name AS SubstationName,\n    s.Location,\n    s.CapacityMW,\n    ic.IndustrialConsumerCount,\n    c.Type AS ConsumerType,\n    ROUND(ic.AvgConsumption, 2) AS AvgMonthlyConsumption,\n    ROUND(ic.TotalContractValue, 2) AS TotalContractValue,\n    si.IncidentCount\nFROM Substation s\nJOIN IndustrialConsumers ic ON s.SubstationID = ic.SubstationID\nJOIN Consumer c ON 1=1\nJOIN SubstationIncidents si ON s.SubstationID = si.SubstationID\nWHERE c.Type = 'Промышленность'\nORDER BY ic.IndustrialConsumerCount DESC, s.CapacityMW DESC\nLIMIT 17;",
            "gigachat_response": "WITH HighLoadSubstations AS (\n    SELECT \n        s.SubstationID,\n        s.Name AS SubstationName,\n        s.Location,\n        s.CapacityMW,\n        s.VoltageLevel,\n        COUNT(DISTINCT c.ConsumerID) AS IndustrialConsumerCount,\n        AVG(c.AverageMonthlyConsumption) AS AvgIndustrialConsumption\n    FROM Substation s\n    JOIN Consumer c ON s.SubstationID = c.ConsumerID\n    WHERE c.Type = 'Промышленность'\n      AND c.AverageMonthlyConsumption > (\n          SELECT AVG(AverageMonthlyConsumption) * 1.2\n          FROM Consumer\n          WHERE Type = 'Промышленность'\n      )\n    GROUP BY s.SubstationID, s.Name, s.Location, s.CapacityMW, s.VoltageLevel\n),\nSubstationMaintenance AS (\n    SELECT \n        s.SubstationID,\n        SUM(m.Cost) AS TotalMaintenanceCost\n    FROM Substation s\n    LEFT JOIN Maintenance m ON s.SubstationID = m.PlantID\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    GROUP BY s.SubstationID\n),\nSubstationIncidents AS (\n    SELECT \n        s.SubstationID,\n        COUNT(i.IncidentID) AS IncidentCount\n    FROM Substation s\n    LEFT JOIN Incident i ON s.SubstationID = i.PlantID\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    GROUP BY s.SubstationID\n)\nSELECT \n    hls.SubstationName,\n    hls.Location,\n    hls.CapacityMW,\n    hls.VoltageLevel,\n    hls.IndustrialConsumerCount,\n    ROUND(hls.AvgIndustrialConsumption, 2) AS AvgIndustrialConsumption,\n    sm.TotalMaintenanceCost,\n    si.IncidentCount\nFROM HighLoadSubstations hls\nLEFT JOIN SubstationMaintenance sm ON hls.SubstationID = sm.SubstationID\nLEFT JOIN SubstationIncidents si ON hls.SubstationID = si.SubstationID\nORDER BY hls.IndustrialConsumerCount DESC, hls.AvgIndustrialConsumption DESC\nLIMIT 17;",
            "gigachat_response_ru": "WITH HighLoadSubstations AS (\n    SELECT \n        s.SubstationID,\n        s.Name AS SubstationName,\n        COUNT(DISTINCT c.ConsumerID) AS IndustrialConsumerCount,\n        AVG(c.AverageMonthlyConsumption) AS AvgIndustrialConsumption\n    FROM Substation s\n    JOIN Consumer c ON s.Location LIKE CONCAT('%', c.Location, '%')\n    WHERE c.Type = 'Промышленность'\n      AND c.AverageMonthlyConsumption > (\n          SELECT AVG(AverageMonthlyConsumption) * 1.2\n          FROM Consumer\n          WHERE Type = 'Промышленность'\n      )\n    GROUP BY s.SubstationID, s.Name\n),\nSubstationMaintenanceCosts AS (\n    SELECT \n        s.SubstationID,\n        SUM(m.Cost) AS TotalMaintenanceCost\n    FROM Substation s\n    LEFT JOIN Maintenance m ON s.SubstationID = m.PlantID\n    GROUP BY s.SubstationID\n),\nSubstationIncidentCounts AS (\n    SELECT \n        s.SubstationID,\n        COUNT(i.IncidentID) AS IncidentCount\n    FROM Substation s\n    LEFT JOIN Incident i ON s.SubstationID = i.PlantID\n    GROUP BY s.SubstationID\n)\nSELECT \n    hls.SubstationName,\n    hls.IndustrialConsumerCount,\n    ROUND(hls.AvgIndustrialConsumption, 2) AS AvgIndustrialConsumption,\n    COALESCE(smc.TotalMaintenanceCost, 0) AS TotalMaintenanceCost,\n    COALESCE(sic.IncidentCount, 0) AS IncidentCount\nFROM HighLoadSubstations hls\nLEFT JOIN SubstationMaintenanceCosts smc ON hls.SubstationID = smc.SubstationID\nLEFT JOIN SubstationIncidentCounts sic ON hls.SubstationID = sic.SubstationID\nORDER BY hls.IndustrialConsumerCount DESC, hls.AvgIndustrialConsumption DESC\nLIMIT 17;"
        },
        {
            "question": "Найти топ-26 электростанций с наибольшим количеством критических инцидентов за последние 3 месяца, которые имеют проблемы с экологическими нормами, и показать для каждой станции информацию о последних аудиторских проверках, затратах на обслуживание и количестве действующих контрактов.",
            "sql_query": "WITH PlantIncidents AS (\n    SELECT \n        p.PlantID,\n        p.Name AS PlantName,\n        p.Type AS PlantType,\n        COUNT(CASE WHEN i.Severity IN ('Высокая', 'Критическая') THEN 1 END) AS CriticalIncidentsCount,\n        MAX(i.Date) AS LastIncidentDate\n    FROM PowerPlant p\n    JOIN Incident i ON p.PlantID = i.PlantID\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    GROUP BY p.PlantID, p.Name, p.Type\n),\nPlantCompliance AS (\n    SELECT \n        p.PlantID,\n        COUNT(CASE WHEN e.ComplianceStatus = 'Не соответствует' THEN 1 END) AS NonComplianceCount,\n        AVG(e.CO2Emissions) AS AvgEmissions\n    FROM PowerPlant p\n    JOIN Emission e ON p.PlantID = e.PlantID\n    WHERE e.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH)\n    GROUP BY p.PlantID\n),\nPlantAudits AS (\n    SELECT \n        p.PlantID,\n        a.Auditor,\n        a.Recommendations,\n        a.ComplianceStatus,\n        ROW_NUMBER() OVER (PARTITION BY p.PlantID ORDER BY a.Date DESC) AS rn\n    FROM PowerPlant p\n    JOIN `Audit` a ON p.PlantID = a.PlantID\n),\nPlantMaintenance AS (\n    SELECT \n        p.PlantID,\n        SUM(m.Cost) AS TotalMaintenanceCost,\n        COUNT(m.MaintenanceID) AS MaintenanceCount\n    FROM PowerPlant p\n    JOIN Maintenance m ON p.PlantID = m.PlantID\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY p.PlantID\n),\nPlantContracts AS (\n    SELECT \n        p.PlantID,\n        COUNT(DISTINCT ct.ContractID) AS ActiveContractsCount,\n        SUM(ct.Volume) AS TotalContractVolume\n    FROM PowerPlant p\n    JOIN `Contract` ct ON 1=1\n    WHERE ct.Status = 'active'\n    GROUP BY p.PlantID\n)\nSELECT \n    pi.PlantName,\n    pi.PlantType,\n    pi.CriticalIncidentsCount,\n    pc.NonComplianceCount,\n    ROUND(pc.AvgEmissions, 2) AS AvgEmissions,\n    pa.Auditor AS LastAuditor,\n    pa.Recommendations AS LastAuditRecommendations,\n    ROUND(pm.TotalMaintenanceCost, 2) AS TotalMaintenanceCost,\n    pm.MaintenanceCount,\n    pct.ActiveContractsCount,\n    ROUND(pct.TotalContractVolume, 2) AS TotalContractVolume,\n    CASE \n        WHEN pi.CriticalIncidentsCount > 3 THEN 'Критический уровень инцидентов'\n        WHEN pi.CriticalIncidentsCount > 1 THEN 'Высокий уровень инцидентов'\n        ELSE 'Средний уровень инцидентов'\n    END AS IncidentLevel\nFROM PlantIncidents pi\nJOIN PlantCompliance pc ON pi.PlantID = pc.PlantID\nJOIN PlantAudits pa ON pi.PlantID = pa.PlantID AND pa.rn = 1\nJOIN PlantMaintenance pm ON pi.PlantID = pm.PlantID\nJOIN PlantContracts pct ON pi.PlantID = pct.PlantID\nORDER BY pi.CriticalIncidentsCount DESC, pc.NonComplianceCount DESC\nLIMIT 26;",
            "gpt-4o_response": "WITH CriticalIncidents AS (\n    SELECT \n        i.PlantID,\n        COUNT(i.IncidentID) AS CriticalIncidentCount\n    FROM Incident i\n    WHERE i.Severity = 'Критическая' AND i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    GROUP BY i.PlantID\n),\nNonCompliantEmissions AS (\n    SELECT \n        e.PlantID\n    FROM Emission e\n    WHERE e.ComplianceStatus != 'Соответствует' AND e.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    GROUP BY e.PlantID\n),\nTopPlants AS (\n    SELECT \n        ci.PlantID,\n        ci.CriticalIncidentCount\n    FROM CriticalIncidents ci\n    JOIN NonCompliantEmissions nce ON ci.PlantID = nce.PlantID\n    ORDER BY ci.CriticalIncidentCount DESC\n    LIMIT 26\n),\nLatestAudits AS (\n    SELECT \n        a.PlantID,\n        a.Date AS AuditDate,\n        a.Auditor,\n        a.Findings,\n        a.Recommendations,\n        a.ComplianceStatus\n    FROM `Audit` a\n    WHERE a.Date = (SELECT MAX(Date) FROM `Audit` WHERE PlantID = a.PlantID)\n),\nMaintenanceCosts AS (\n    SELECT \n        m.PlantID,\n        SUM(m.Cost) AS TotalMaintenanceCost\n    FROM Maintenance m\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY m.PlantID\n),\nActiveContracts AS (\n    SELECT \n        c.ConsumerID,\n        COUNT(c.ContractID) AS ActiveContractCount\n    FROM `Contract` c\n    WHERE c.Status = 'active'\n    GROUP BY c.ConsumerID\n)\nSELECT \n    pp.Name AS PlantName,\n    pp.Location,\n    pp.CapacityMW,\n    pp.Type AS PlantType,\n    tp.CriticalIncidentCount,\n    la.AuditDate,\n    la.Auditor,\n    la.Findings,\n    la.Recommendations,\n    la.ComplianceStatus AS AuditComplianceStatus,\n    mc.TotalMaintenanceCost,\n    COALESCE(ac.ActiveContractCount, 0) AS ActiveContractCount\nFROM TopPlants tp\nJOIN PowerPlant pp ON tp.PlantID = pp.PlantID\nLEFT JOIN LatestAudits la ON tp.PlantID = la.PlantID\nLEFT JOIN MaintenanceCosts mc ON tp.PlantID = mc.PlantID\nLEFT JOIN ActiveContracts ac ON pp.OwnerCompanyID = ac.ConsumerID\nORDER BY tp.CriticalIncidentCount DESC;",
            "gpt-4o_response_ru": "WITH CriticalIncidents AS (\n    SELECT \n        i.PlantID,\n        COUNT(i.IncidentID) AS CriticalIncidentCount\n    FROM Incident i\n    WHERE i.Severity = 'Критическая' AND i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    GROUP BY i.PlantID\n),\nNonCompliantEmissions AS (\n    SELECT \n        e.PlantID\n    FROM Emission e\n    WHERE e.ComplianceStatus != 'Соответствует' AND e.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    GROUP BY e.PlantID\n),\nPlantAudits AS (\n    SELECT \n        a.PlantID,\n        a.Date AS LastAuditDate,\n        a.Auditor,\n        a.Findings,\n        a.Recommendations,\n        a.ComplianceStatus\n    FROM `Audit` a\n    WHERE a.Date = (SELECT MAX(Date) FROM `Audit` WHERE PlantID = a.PlantID)\n),\nPlantMaintenance AS (\n    SELECT \n        m.PlantID,\n        SUM(m.Cost) AS TotalMaintenanceCost\n    FROM Maintenance m\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY m.PlantID\n),\nActiveContracts AS (\n    SELECT \n        c.ConsumerID,\n        COUNT(c.ContractID) AS ActiveContractCount\n    FROM `Contract` c\n    WHERE c.Status = 'active'\n    GROUP BY c.ConsumerID\n)\nSELECT \n    pp.Name AS PlantName,\n    ci.CriticalIncidentCount,\n    pa.LastAuditDate,\n    pa.Auditor,\n    pa.Findings,\n    pa.Recommendations,\n    pa.ComplianceStatus,\n    pm.TotalMaintenanceCost,\n    ac.ActiveContractCount\nFROM PowerPlant pp\nJOIN CriticalIncidents ci ON pp.PlantID = ci.PlantID\nJOIN NonCompliantEmissions nce ON pp.PlantID = nce.PlantID\nLEFT JOIN PlantAudits pa ON pp.PlantID = pa.PlantID\nLEFT JOIN PlantMaintenance pm ON pp.PlantID = pm.PlantID\nLEFT JOIN ActiveContracts ac ON pp.PlantID = ac.ConsumerID\nORDER BY ci.CriticalIncidentCount DESC\nLIMIT 26;",
            "google/gemini-2.0-flash-001_response": "WITH RecentCriticalIncidents AS (\n    SELECT\n        PlantID,\n        COUNT(*) AS CriticalIncidentCount\n    FROM Incident\n    WHERE Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    AND Severity = 'Критическая'\n    GROUP BY PlantID\n),\nEmissionIssues AS (\n    SELECT\n        PlantID\n    FROM Emission\n    WHERE Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    AND ComplianceStatus <> 'Соответствует'\n),\nRelevantPlants AS (\n    SELECT\n        rci.PlantID,\n        rci.CriticalIncidentCount\n    FROM RecentCriticalIncidents rci\n    JOIN EmissionIssues ei ON rci.PlantID = ei.PlantID\n),\nRankedPlants AS (\n    SELECT\n        PlantID,\n        CriticalIncidentCount,\n        RANK() OVER (ORDER BY CriticalIncidentCount DESC) AS Rank\n    FROM RelevantPlants\n)\nSELECT\n    pp.Name AS PlantName,\n    rp.CriticalIncidentCount,\n    a.Date AS LastAuditDate,\n    a.Auditor AS LastAuditor,\n    a.Findings AS LastAuditFindings,\n    m.Cost AS LastMaintenanceCost,\n    COUNT(DISTINCT c.ContractID) AS ActiveContractCount\nFROM RankedPlants rp\nJOIN PowerPlant pp ON rp.PlantID = pp.PlantID\nLEFT JOIN `Audit` a ON pp.PlantID = a.PlantID AND a.Date = (SELECT MAX(Date) FROM `Audit` WHERE PlantID = pp.PlantID)\nLEFT JOIN Maintenance m ON pp.PlantID = m.PlantID AND m.Date = (SELECT MAX(Date) FROM Maintenance WHERE PlantID = pp.PlantID)\nLEFT JOIN `Contract` c ON pp.PlantID = c.ConsumerID  \nWHERE rp.Rank <= 26\nGROUP BY pp.PlantID, pp.Name, rp.CriticalIncidentCount, a.Date, a.Auditor, a.Findings, m.Cost\nORDER BY rp.CriticalIncidentCount DESC\nLIMIT 26;",
            "google/gemini-2.0-flash-001_response_ru": "WITH CriticalIncidents AS (\n    SELECT\n        PlantID,\n        COUNT(*) AS CriticalIncidentCount\n    FROM Incident\n    WHERE Severity = 'Критическая'\n    AND Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    GROUP BY PlantID\n),\nNonCompliantPlants AS (\n    SELECT DISTINCT\n        PlantID\n    FROM Emission\n    WHERE ComplianceStatus != 'Соответствует'\n),\nRankedPlants AS (\n    SELECT\n        ci.PlantID,\n        ci.CriticalIncidentCount,\n        ROW_NUMBER() OVER (ORDER BY ci.CriticalIncidentCount DESC) AS rn\n    FROM CriticalIncidents ci\n    JOIN NonCompliantPlants ncp ON ci.PlantID = ncp.PlantID\n),\nTopPlants AS (\n    SELECT\n        PlantID,\n        CriticalIncidentCount\n    FROM RankedPlants\n    WHERE rn <= 26\n),\nLastAuditInfo AS (\n    SELECT\n        PlantID,\n        MAX(Date) AS LastAuditDate\n    FROM `Audit`\n    GROUP BY PlantID\n),\nContractCounts AS (\n    SELECT\n        PlantID,\n        COUNT(DISTINCT ContractID) AS ContractCount\n    FROM `Contract` AS C\n    JOIN Consumer AS Con ON C.ConsumerID = Con.ConsumerID\n    JOIN Meter AS M ON Con.ConsumerID = M.ConsumerID\n    WHERE M.ConsumerID IN (SELECT ConsumerID FROM Consumer)\n    GROUP BY PlantID\n)\nSELECT\n    tp.PlantID,\n    pp.Name AS PlantName,\n    tp.CriticalIncidentCount,\n    oc.Name AS OwnerCompanyName,\n    oc.Headquarters AS OwnerCompanyHeadquarters,\n    lai.LastAuditDate,\n    a.Auditor AS LastAuditor,\n    a.Findings AS LastAuditFindings,\n    maint.TotalMaintenanceCost,\n    cc.ContractCount\nFROM TopPlants tp\nJOIN PowerPlant pp ON tp.PlantID = pp.PlantID\nJOIN OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\nLEFT JOIN LastAuditInfo lai ON tp.PlantID = lai.PlantID\nLEFT JOIN `Audit` a ON lai.PlantID = a.PlantID AND lai.LastAuditDate = a.Date\nLEFT JOIN (\n    SELECT\n        PlantID,\n        SUM(Cost) AS TotalMaintenanceCost\n    FROM Maintenance\n    GROUP BY PlantID\n) maint ON tp.PlantID = maint.PlantID\nLEFT JOIN ContractCounts cc ON tp.PlantID = cc.PlantID\nORDER BY tp.CriticalIncidentCount DESC;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH CriticalIncidents AS (\n    SELECT \n        p.PlantID,\n        p.Name AS PlantName,\n        COUNT(i.IncidentID) AS CriticalIncidentsCount\n    FROM PowerPlant p\n    JOIN Incident i ON p.PlantID = i.PlantID\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) AND i.Severity = 'Критическая'\n    GROUP BY p.PlantID, p.Name\n),\nEmissionCompliance AS (\n    SELECT \n        p.PlantID,\n        p.Name AS PlantName,\n        AVG(e.CO2Emissions) AS AvgCO2Emissions,\n        AVG(e.SO2Emissions) AS AvgSO2Emissions,\n        AVG(e.NOxEmissions) AS AvgNOxEmissions,\n        AVG(e.ParticulateMatter) AS AvgParticulateMatter\n    FROM PowerPlant p\n    JOIN Emission e ON p.PlantID = e.PlantID\n    WHERE e.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    GROUP BY p.PlantID, p.Name\n    HAVING AVG(e.CO2Emissions) > 1000 OR AVG(e.SO2Emissions) > 50 OR AVG(e.NOxEmissions) > 20 OR AVG(e.ParticulateMatter) > 10\n),\nLastAudit AS (\n    SELECT \n        p.PlantID,\n        p.Name AS PlantName,\n        a.AuditID,\n        a.Date AS AuditDate,\n        a.Findings,\n        a.Recommendations,\n        a.ComplianceStatus,\n        a.FollowUpDate,\n        ROW_NUMBER() OVER (PARTITION BY p.PlantID ORDER BY a.Date DESC) AS RowNum\n    FROM PowerPlant p\n    JOIN `Audit` a ON p.PlantID = a.PlantID\n),\nMaintenanceCost AS (\n    SELECT \n        p.PlantID,\n        p.Name AS PlantName,\n        SUM(m.Cost) AS TotalMaintenanceCost\n    FROM PowerPlant p\n    JOIN Maintenance m ON p.PlantID = m.PlantID\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY p.PlantID, p.Name\n),\nActiveContracts AS (\n    SELECT \n        p.PlantID,\n        p.Name AS PlantName,\n        COUNT(c.ContractID) AS ActiveContractsCount\n    FROM PowerPlant p\n    JOIN `Contract` c ON p.PlantID = c.PlantID\n    WHERE c.Status = 'active'\n    GROUP BY p.PlantID, p.Name\n)\nSELECT \n    ci.PlantName,\n    ci.CriticalIncidentsCount,\n    ec.AvgCO2Emissions,\n    ec.AvgSO2Emissions,\n    ec.AvgNOxEmissions,\n    ec.AvgParticulateMatter,\n    la.Findings,\n    la.Recommendations,\n    la.ComplianceStatus,\n    la.FollowUpDate,\n    mc.TotalMaintenanceCost,\n    ac.ActiveContractsCount\nFROM CriticalIncidents ci\nJOIN EmissionCompliance ec ON ci.PlantID = ec.PlantID\nJOIN LastAudit la ON ci.PlantID = la.PlantID AND la.RowNum = 1\nJOIN MaintenanceCost mc ON ci.PlantID = mc.PlantID\nJOIN ActiveContracts ac ON ci.PlantID = ac.PlantID\nORDER BY ci.CriticalIncidentsCount DESC\nLIMIT 26;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH CriticalIncidents AS (\n    SELECT \n        p.PlantID,\n        p.Name AS PlantName,\n        COUNT(i.IncidentID) AS CriticalIncidentsCount\n    FROM PowerPlant p\n    JOIN Incident i ON p.PlantID = i.PlantID\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) AND i.Severity = 'Критическая'\n    GROUP BY p.PlantID, p.Name\n),\nEnvironmentalIssues AS (\n    SELECT \n        p.PlantID,\n        p.Name AS PlantName,\n        AVG(e.CO2Emissions) AS AvgCO2Emissions\n    FROM PowerPlant p\n    JOIN Emission e ON p.PlantID = e.PlantID\n    WHERE e.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    GROUP BY p.PlantID, p.Name\n    HAVING AVG(e.CO2Emissions) > (\n        SELECT AVG(CO2Emissions) * 0.7\n        FROM Emission\n        WHERE Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    )\n),\nLastAudit AS (\n    SELECT \n        p.PlantID,\n        p.Name AS PlantName,\n        a.Auditor,\n        a.Findings,\n        a.Recommendations,\n        a.ComplianceStatus,\n        a.FollowUpDate,\n        a.Report,\n        ROW_NUMBER() OVER (PARTITION BY p.PlantID ORDER BY a.Date DESC) AS RowNum\n    FROM PowerPlant p\n    JOIN `Audit` a ON p.PlantID = a.PlantID\n),\nMaintenanceCost AS (\n    SELECT \n        p.PlantID,\n        p.Name AS PlantName,\n        SUM(m.Cost) AS TotalMaintenanceCost\n    FROM PowerPlant p\n    JOIN Maintenance m ON p.PlantID = m.PlantID\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY p.PlantID, p.Name\n),\nActiveContracts AS (\n    SELECT \n        p.PlantID,\n        p.Name AS PlantName,\n        COUNT(DISTINCT c.ContractID) AS ActiveContractsCount\n    FROM PowerPlant p\n    JOIN `Contract` c ON p.PlantID = c.PlantID\n    WHERE c.Status = 'active'\n    GROUP BY p.PlantID, p.Name\n)\nSELECT \n    ci.PlantName,\n    ci.CriticalIncidentsCount,\n    ei.AvgCO2Emissions,\n    la.Auditor,\n    la.Findings,\n    la.Recommendations,\n    la.ComplianceStatus,\n    la.FollowUpDate,\n    la.Report,\n    mc.TotalMaintenanceCost,\n    ac.ActiveContractsCount\nFROM CriticalIncidents ci\nJOIN EnvironmentalIssues ei ON ci.PlantID = ei.PlantID\nJOIN LastAudit la ON ci.PlantID = la.PlantID AND la.RowNum = 1\nJOIN MaintenanceCost mc ON ci.PlantID = mc.PlantID\nJOIN ActiveContracts ac ON ci.PlantID = ac.PlantID\nORDER BY ci.CriticalIncidentsCount DESC\nLIMIT 26;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH CriticalIncidents AS (\n    SELECT \n        i.PlantID,\n        COUNT(i.IncidentID) AS CriticalIncidentCount\n    FROM Incident i\n    WHERE i.Severity = 'Критическая' \n    AND i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    GROUP BY i.PlantID\n),\nEnvironmentalIssues AS (\n    SELECT \n        e.PlantID\n    FROM Emission e\n    JOIN Regulation r ON e.ComplianceStatus IN ('Не соответствует', 'Частично соблюдено')\n    WHERE e.ReportingPeriod = 'Q1 2023'\n    GROUP BY e.PlantID\n),\nPlantContracts AS (\n    SELECT \n        p.PlantID,\n        COUNT(c.ContractID) AS ActiveContractsCount\n    FROM PowerPlant p\n    JOIN `Contract` c ON 1=1\n    WHERE c.Status = 'active'\n    GROUP BY p.PlantID\n),\nPlantMaintenance AS (\n    SELECT \n        p.PlantID,\n        COALESCE(SUM(m.Cost), 0) AS TotalMaintenanceCost\n    FROM PowerPlant p\n    LEFT JOIN Maintenance m ON p.PlantID = m.PlantID\n    WHERE m.Status = 'Завершено'\n    GROUP BY p.PlantID\n),\nPlantAudits AS (\n    SELECT \n        p.PlantID,\n        MAX(a.Date) AS LastAuditDate,\n        GROUP_CONCAT(a.Findings SEPARATOR ' | ') AS AuditFindings,\n        GROUP_CONCAT(a.Recommendations SEPARATOR ' | ') AS AuditRecommendations\n    FROM PowerPlant p\n    LEFT JOIN `Audit` a ON p.PlantID = a.PlantID\n    GROUP BY p.PlantID\n)\nSELECT \n    p.PlantID,\n    p.Name AS PlantName,\n    p.Type AS PlantType,\n    p.CapacityMW,\n    p.Status AS PlantStatus,\n    ci.CriticalIncidentCount AS CriticalIncidentsLast3Months,\n    a.LastAuditDate,\n    a.AuditFindings,\n    a.AuditRecommendations,\n    m.TotalMaintenanceCost,\n    c.ActiveContractsCount\nFROM PowerPlant p\nJOIN CriticalIncidents ci ON p.PlantID = ci.PlantID\nJOIN EnvironmentalIssues ei ON p.PlantID = ei.PlantID\nJOIN PlantMaintenance m ON p.PlantID = m.PlantID\nJOIN PlantContracts c ON p.PlantID = c.PlantID\nJOIN PlantAudits a ON p.PlantID = a.PlantID\nORDER BY ci.CriticalIncidentCount DESC\nLIMIT 26;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "",
            "gigachat_response": "WITH RecentCriticalIncidents AS (\n    SELECT \n        i.PlantID,\n        COUNT(*) AS CriticalIncidentCount\n    FROM Incident i\n    WHERE i.Severity = 'Критическая' \n      AND i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    GROUP BY i.PlantID\n),\nEnvironmentallyNonCompliantPlants AS (\n    SELECT \n        e.PlantID\n    FROM Emission e\n    WHERE e.ComplianceStatus != 'Соответствует'\n      AND e.ReportingPeriod LIKE '%2023%'\n),\nLatestAudits AS (\n    SELECT \n        a.PlantID,\n        a.Findings,\n        a.Recommendations,\n        a.ComplianceStatus,\n        a.FollowUpDate\n    FROM `Audit` a\n    INNER JOIN (\n        SELECT PlantID, MAX(Date) AS LatestAuditDate\n        FROM `Audit`\n        GROUP BY PlantID\n    ) la ON a.PlantID = la.PlantID AND a.Date = la.LatestAuditDate\n),\nMaintenanceCosts AS (\n    SELECT \n        m.PlantID,\n        SUM(m.Cost) AS TotalMaintenanceCost\n    FROM Maintenance m\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    GROUP BY m.PlantID\n),\nActiveContracts AS (\n    SELECT \n        c.PlantID,\n        COUNT(*) AS ActiveContractCount\n    FROM `Contract` c\n    WHERE c.Status = 'active'\n    GROUP BY c.PlantID\n)\nSELECT \n    pp.Name AS PlantName,\n    rci.CriticalIncidentCount,\n    ea.Findings AS AuditFindings,\n    ea.Recommendations AS AuditRecommendations,\n    mc.TotalMaintenanceCost,\n    ac.ActiveContractCount\nFROM PowerPlant pp\nINNER JOIN RecentCriticalIncidents rci ON pp.PlantID = rci.PlantID\nINNER JOIN EnvironmentallyNonCompliantPlants encp ON pp.PlantID = encp.PlantID\nLEFT JOIN LatestAudits ea ON pp.PlantID = ea.PlantID\nLEFT JOIN MaintenanceCosts mc ON pp.PlantID = mc.PlantID\nLEFT JOIN ActiveContracts ac ON pp.PlantID = ac.PlantID\nORDER BY rci.CriticalIncidentCount DESC\nLIMIT 26;",
            "gigachat_response_ru": "WITH CriticalIncidents AS (\n    SELECT \n        i.PlantID,\n        COUNT(*) AS IncidentCount\n    FROM Incident i\n    WHERE i.Severity = 'Критическая' \n      AND i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    GROUP BY i.PlantID\n),\nEnvironmentIssues AS (\n    SELECT \n        e.PlantID,\n        e.ComplianceStatus\n    FROM Emission e\n    WHERE e.ReportingPeriod = 'Q1 2023' -- Предположительно Q1 текущего года\n      AND e.ComplianceStatus != 'Соответствует'\n),\nLatestAudits AS (\n    SELECT \n        a.PlantID,\n        a.Findings,\n        a.Recommendations,\n        a.ComplianceStatus,\n        a.FollowUpDate\n    FROM Audit a\n    INNER JOIN (\n        SELECT PlantID, MAX(Date) AS LatestAuditDate\n        FROM Audit\n        GROUP BY PlantID\n    ) la ON a.PlantID = la.PlantID AND a.Date = la.LatestAuditDate\n),\nServiceCosts AS (\n    SELECT \n        m.PlantID,\n        SUM(m.Cost) AS TotalServiceCost\n    FROM Maintenance m\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    GROUP BY m.PlantID\n),\nActiveContracts AS (\n    SELECT \n        c.PlantID,\n        COUNT(*) AS ActiveContractCount\n    FROM `Contract` c\n    WHERE c.Status = 'active'\n    GROUP BY c.PlantID\n)\nSELECT \n    pp.PlantID,\n    pp.Name AS PlantName,\n    ci.IncidentCount,\n    ei.ComplianceStatus AS EnvironmentIssue,\n    la.Findings AS AuditFindings,\n    la.Recommendations AS AuditRecommendations,\n    la.ComplianceStatus AS AuditComplianceStatus,\n    la.FollowUpDate AS AuditFollowUpDate,\n    sc.TotalServiceCost,\n    ac.ActiveContractCount\nFROM PowerPlant pp\nINNER JOIN CriticalIncidents ci ON pp.PlantID = ci.PlantID\nLEFT JOIN EnvironmentIssues ei ON pp.PlantID = ei.PlantID\nLEFT JOIN LatestAudits la ON pp.PlantID = la.PlantID\nLEFT JOIN ServiceCosts sc ON pp.PlantID = sc.PlantID\nLEFT JOIN ActiveContracts ac ON pp.PlantID = ac.PlantID\nWHERE ei.ComplianceStatus IS NOT NULL OR la.ComplianceStatus != 'Соответствует'\nORDER BY ci.IncidentCount DESC\nLIMIT 26;"
        },
        {
            "question": "Найти топ-37 электростанций с наиболее сложной историей инцидентов за последний год, включая анализ типов инцидентов, их влияние на производственные показатели, стоимость обслуживания и рекомендации аудиторов.",
            "sql_query": "WITH PlantIncidentHistory AS (\n    SELECT \n        p.PlantID,\n        p.Name AS PlantName,\n        p.Type AS PlantType,\n        COUNT(i.IncidentID) AS TotalIncidentsCount,\n        COUNT(CASE WHEN i.Severity = 'Критическая' THEN 1 END) AS CriticalIncidentsCount,\n        COUNT(CASE WHEN i.Severity = 'Высокая' THEN 1 END) AS HighIncidentsCount,\n        MAX(i.Date) AS LastIncidentDate,\n        AVG(i.DurationHours) AS AvgIncidentDuration\n    FROM PowerPlant p\n    JOIN Incident i ON p.PlantID = i.PlantID\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY p.PlantID, p.Name, p.Type\n),\nPlantMaintenanceImpact AS (\n    SELECT \n        p.PlantID,\n        SUM(m.Cost) AS TotalMaintenanceCost,\n        COUNT(m.MaintenanceID) AS MaintenanceCount,\n        AVG(m.DurationHours) AS AvgMaintenanceDuration\n    FROM PowerPlant p\n    JOIN Maintenance m ON p.PlantID = m.PlantID\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY p.PlantID\n),\nLatestAudits AS (\n    SELECT \n        p.PlantID,\n        a.Recommendations,\n        a.ComplianceStatus,\n        ROW_NUMBER() OVER (PARTITION BY p.PlantID ORDER BY a.Date DESC) AS rn\n    FROM PowerPlant p\n    JOIN `Audit` a ON p.PlantID = a.PlantID\n)\nSELECT \n    pih.PlantName,\n    pih.PlantType,\n    pih.TotalIncidentsCount,\n    pih.CriticalIncidentsCount,\n    pih.HighIncidentsCount,\n    ROUND(pih.AvgIncidentDuration, 2) AS AvgIncidentDuration,\n    ROUND(pmi.TotalMaintenanceCost, 2) AS TotalMaintenanceCost,\n    pmi.MaintenanceCount,\n    ROUND(pmi.AvgMaintenanceDuration, 2) AS AvgMaintenanceDuration,\n    la.Recommendations,\n    la.ComplianceStatus,\n    CASE \n        WHEN pih.CriticalIncidentsCount > 3 THEN 'Критический уровень рисков'\n        WHEN pih.CriticalIncidentsCount > 1 THEN 'Высокий уровень рисков'\n        ELSE 'Средний уровень рисков'\n    END AS RiskLevel\nFROM PlantIncidentHistory pih\nJOIN PlantMaintenanceImpact pmi ON pih.PlantID = pmi.PlantID\nJOIN LatestAudits la ON pih.PlantID = la.PlantID AND la.rn = 1\nORDER BY pih.CriticalIncidentsCount DESC, pih.TotalIncidentsCount DESC\nLIMIT 37;",
            "gpt-4o_response": "WITH PlantIncidents AS (\n    SELECT \n        pp.PlantID,\n        pp.Name AS PlantName,\n        COUNT(i.IncidentID) AS TotalIncidentsCount,\n        COUNT(CASE WHEN i.Severity = 'Критическая' THEN 1 END) AS CriticalIncidentsCount,\n        AVG(i.DurationHours) AS AvgIncidentDuration,\n        MAX(i.Date) AS LastIncidentDate\n    FROM PowerPlant pp\n    JOIN Incident i ON pp.PlantID = i.PlantID\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY pp.PlantID, pp.Name\n),\nPlantMaintenance AS (\n    SELECT \n        pp.PlantID,\n        SUM(m.Cost) AS TotalMaintenanceCost,\n        COUNT(m.MaintenanceID) AS MaintenanceCount,\n        AVG(m.DurationHours) AS AvgMaintenanceDuration\n    FROM PowerPlant pp\n    JOIN Maintenance m ON pp.PlantID = m.PlantID\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY pp.PlantID\n),\nPlantAudits AS (\n    SELECT \n        pp.PlantID,\n        COUNT(a.AuditID) AS AuditCount,\n        COUNT(CASE WHEN a.ComplianceStatus = 'Не соблюдено' THEN 1 END) AS NonComplianceCount,\n        GROUP_CONCAT(DISTINCT a.Recommendations SEPARATOR '; ') AS Recommendations\n    FROM PowerPlant pp\n    JOIN `Audit` a ON pp.PlantID = a.PlantID\n    WHERE a.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY pp.PlantID\n)\nSELECT \n    pi.PlantName,\n    pi.TotalIncidentsCount,\n    pi.CriticalIncidentsCount,\n    ROUND(pi.AvgIncidentDuration, 2) AS AvgIncidentDuration,\n    ROUND(pm.TotalMaintenanceCost, 2) AS TotalMaintenanceCost,\n    pm.MaintenanceCount,\n    ROUND(pm.AvgMaintenanceDuration, 2) AS AvgMaintenanceDuration,\n    pa.AuditCount,\n    pa.NonComplianceCount,\n    pa.Recommendations,\n    CASE \n        WHEN pi.CriticalIncidentsCount > 2 THEN 'Критический уровень рисков'\n        WHEN pi.CriticalIncidentsCount > 0 THEN 'Высокий уровень рисков'\n        ELSE 'Средний уровень рисков'\n    END AS RiskLevel\nFROM PlantIncidents pi\nJOIN PlantMaintenance pm ON pi.PlantID = pm.PlantID\nJOIN PlantAudits pa ON pi.PlantID = pa.PlantID\nORDER BY pi.CriticalIncidentsCount DESC, pi.TotalIncidentsCount DESC\nLIMIT 37;",
            "gpt-4o_response_ru": "WITH RecentIncidents AS (\n    SELECT \n        i.PlantID,\n        COUNT(i.IncidentID) AS TotalIncidentsCount,\n        COUNT(CASE WHEN i.Severity = 'Критическая' THEN 1 END) AS CriticalIncidentsCount,\n        AVG(i.DurationHours) AS AvgIncidentDuration,\n        GROUP_CONCAT(DISTINCT i.Description ORDER BY i.Date DESC SEPARATOR '; ') AS IncidentDescriptions,\n        GROUP_CONCAT(DISTINCT i.Impact ORDER BY i.Date DESC SEPARATOR '; ') AS IncidentImpacts\n    FROM Incident i\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY i.PlantID\n),\nMaintenanceCosts AS (\n    SELECT \n        m.PlantID,\n        SUM(m.Cost) AS TotalMaintenanceCost,\n        GROUP_CONCAT(DISTINCT m.Description ORDER BY m.Date DESC SEPARATOR '; ') AS MaintenanceDescriptions\n    FROM Maintenance m\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY m.PlantID\n),\nAuditRecommendations AS (\n    SELECT \n        a.PlantID,\n        GROUP_CONCAT(DISTINCT a.Recommendations ORDER BY a.Date DESC SEPARATOR '; ') AS AuditRecommendations\n    FROM `Audit` a\n    WHERE a.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY a.PlantID\n)\nSELECT \n    pp.Name AS PlantName,\n    pp.Type AS PlantType,\n    oc.Name AS OwnerName,\n    ri.TotalIncidentsCount,\n    ri.CriticalIncidentsCount,\n    ROUND(ri.AvgIncidentDuration, 2) AS AvgIncidentDuration,\n    ri.IncidentDescriptions,\n    ri.IncidentImpacts,\n    ROUND(mc.TotalMaintenanceCost, 2) AS TotalMaintenanceCost,\n    mc.MaintenanceDescriptions,\n    ar.AuditRecommendations\nFROM PowerPlant pp\nJOIN OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\nJOIN RecentIncidents ri ON pp.PlantID = ri.PlantID\nLEFT JOIN MaintenanceCosts mc ON pp.PlantID = mc.PlantID\nLEFT JOIN AuditRecommendations ar ON pp.PlantID = ar.PlantID\nORDER BY ri.CriticalIncidentsCount DESC, ri.TotalIncidentsCount DESC\nLIMIT 37;",
            "google/gemini-2.0-flash-001_response": "WITH PlantIncidents AS (\n    SELECT \n        p.PlantID,\n        p.Name AS PlantName,\n        p.Type AS PlantType,\n        oc.Name AS OwnerCompanyName,\n        COUNT(i.IncidentID) AS TotalIncidents,\n        SUM(CASE WHEN i.Severity = 'Критическая' THEN 1 ELSE 0 END) AS CriticalIncidents,\n        AVG(i.DurationHours) AS AvgIncidentDuration\n    FROM PowerPlant p\n    JOIN OwnerCompany oc ON p.OwnerCompanyID = oc.CompanyID\n    LEFT JOIN Incident i ON p.PlantID = i.PlantID AND i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY p.PlantID, p.Name, p.Type, oc.Name\n),\nPlantMaintenance AS (\n    SELECT \n        p.PlantID,\n        SUM(m.Cost) AS TotalMaintenanceCost,\n        AVG(m.DurationHours) AS AvgMaintenanceDuration\n    FROM PowerPlant p\n    LEFT JOIN Maintenance m ON p.PlantID = m.PlantID AND m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY p.PlantID\n),\nPlantAudits AS (\n    SELECT \n        p.PlantID,\n        COUNT(a.AuditID) AS TotalAudits,\n        SUM(CASE WHEN a.ComplianceStatus = 'Не соблюдено' THEN 1 ELSE 0 END) AS NonCompliantAudits,\n        GROUP_CONCAT(DISTINCT a.Recommendations SEPARATOR '; ') AS AllRecommendations\n    FROM PowerPlant p\n    LEFT JOIN `Audit` a ON p.PlantID = a.PlantID AND a.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY p.PlantID\n)\nSELECT \n    pi.PlantName,\n    pi.PlantType,\n    pi.OwnerCompanyName,\n    pi.TotalIncidents,\n    pi.CriticalIncidents,\n    ROUND(pi.AvgIncidentDuration, 2) AS AvgIncidentDuration,\n    ROUND(pm.TotalMaintenanceCost, 2) AS TotalMaintenanceCost,\n    ROUND(pm.AvgMaintenanceDuration, 2) AS AvgMaintenanceDuration,\n    pa.TotalAudits,\n    pa.NonCompliantAudits,\n    pa.AllRecommendations,\n    CASE\n        WHEN pi.CriticalIncidents > 0 THEN 'Высокий риск'\n        WHEN pi.TotalIncidents > 0 THEN 'Средний риск'\n        ELSE 'Низкий риск'\n    END AS RiskLevel\nFROM PlantIncidents pi\nLEFT JOIN PlantMaintenance pm ON pi.PlantID = pm.PlantID\nLEFT JOIN PlantAudits pa ON pi.PlantID = pa.PlantID\nORDER BY pi.TotalIncidents DESC\nLIMIT 37;",
            "google/gemini-2.0-flash-001_response_ru": "WITH PlantIncidents AS (\n    SELECT \n        p.PlantID,\n        p.Name AS PlantName,\n        p.Type AS PlantType,\n        oc.Name AS OwnerCompanyName,\n        COUNT(i.IncidentID) AS TotalIncidents,\n        SUM(i.DurationHours) AS TotalIncidentDuration,\n        COUNT(CASE WHEN i.Severity = 'Критическая' THEN 1 END) AS CriticalIncidents,\n        MAX(i.Date) AS LastIncidentDate\n    FROM PowerPlant p\n    JOIN OwnerCompany oc ON p.OwnerCompanyID = oc.CompanyID\n    LEFT JOIN Incident i ON p.PlantID = i.PlantID AND i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY p.PlantID, p.Name, p.Type, oc.Name\n),\nMaintenanceCosts AS (\n    SELECT \n        p.PlantID,\n        SUM(m.Cost) AS TotalMaintenanceCost,\n        AVG(m.DurationHours) AS AvgMaintenanceDuration\n    FROM PowerPlant p\n    LEFT JOIN Maintenance m ON p.PlantID = m.PlantID AND m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY p.PlantID\n),\nAuditRecommendations AS (\n    SELECT \n        p.PlantID,\n        COUNT(a.AuditID) AS TotalAudits,\n        COUNT(CASE WHEN a.ComplianceStatus = 'Не соблюдено' THEN 1 END) AS NonComplianceAudits\n    FROM PowerPlant p\n    LEFT JOIN `Audit` a ON p.PlantID = a.PlantID AND a.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY p.PlantID\n)\nSELECT \n    pi.PlantName,\n    pi.PlantType,\n    pi.OwnerCompanyName,\n    pi.TotalIncidents,\n    pi.TotalIncidentDuration,\n    pi.CriticalIncidents,\n    pi.LastIncidentDate,\n    mc.TotalMaintenanceCost,\n    mc.AvgMaintenanceDuration,\n    ar.TotalAudits,\n    ar.NonComplianceAudits,\n    CASE\n        WHEN pi.CriticalIncidents > 0 THEN 'Высокий'\n        WHEN pi.TotalIncidents > 0 THEN 'Средний'\n        ELSE 'Низкий'\n    END AS IncidentRiskLevel\nFROM PlantIncidents pi\nLEFT JOIN MaintenanceCosts mc ON pi.PlantID = mc.PlantID\nLEFT JOIN AuditRecommendations ar ON pi.PlantID = ar.PlantID\nORDER BY pi.TotalIncidents DESC, pi.CriticalIncidents DESC\nLIMIT 37;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH PlantIncidents AS (\n    SELECT \n        p.PlantID,\n        p.Name AS PlantName,\n        p.Type AS PlantType,\n        COUNT(i.IncidentID) AS TotalIncidentsCount,\n        COUNT(CASE WHEN i.Severity = 'Критическая' THEN 1 END) AS CriticalIncidentsCount,\n        MAX(i.Date) AS LastIncidentDate,\n        AVG(i.DurationHours) AS AvgIncidentDuration,\n        SUM(i.DurationHours) AS TotalIncidentDuration,\n        COUNT(CASE WHEN i.Impact = 'Простои в производстве' THEN 1 END) AS ProductionStoppageCount,\n        COUNT(CASE WHEN i.Impact = 'Уменьшение КПД' THEN 1 END) AS EfficiencyReductionCount\n    FROM PowerPlant p\n    JOIN Incident i ON p.PlantID = i.PlantID\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY p.PlantID, p.Name, p.Type\n),\nPlantMaintenanceAnalysis AS (\n    SELECT \n        p.PlantID,\n        SUM(m.Cost) AS TotalMaintenanceCost,\n        COUNT(m.MaintenanceID) AS MaintenanceCount,\n        AVG(m.DurationHours) AS AvgMaintenanceDuration\n    FROM PowerPlant p\n    JOIN Maintenance m ON p.PlantID = m.PlantID\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY p.PlantID\n),\nAuditRecommendations AS (\n    SELECT \n        p.PlantID,\n        COUNT(a.AuditID) AS TotalAuditCount,\n        COUNT(CASE WHEN a.ComplianceStatus = 'Не соблюдено' THEN 1 END) AS NonComplianceCount\n    FROM PowerPlant p\n    JOIN `Audit` a ON p.PlantID = a.PlantID\n    WHERE a.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY p.PlantID\n)\nSELECT \n    pi.PlantName,\n    pi.PlantType,\n    pi.TotalIncidentsCount,\n    pi.CriticalIncidentsCount,\n    pi.AvgIncidentDuration,\n    pi.TotalIncidentDuration,\n    pi.ProductionStoppageCount,\n    pi.EfficiencyReductionCount,\n    pma.TotalMaintenanceCost,\n    pma.MaintenanceCount,\n    pma.AvgMaintenanceDuration,\n    ar.TotalAuditCount,\n    ar.NonComplianceCount,\n    CASE \n        WHEN pi.CriticalIncidentsCount > 2 THEN 'Критический уровень рисков'\n        WHEN pi.CriticalIncidentsCount > 0 THEN 'Высокий уровень рисков'\n        ELSE 'Средний уровень рисков'\n    END AS RiskLevel,\n    CASE \n        WHEN ar.NonComplianceCount > 1 THEN 'Высокий уровень рисков'\n        WHEN ar.NonComplianceCount > 0 THEN 'Средний уровень рисков'\n        ELSE 'Низкий уровень рисков'\n    END AS ComplianceRiskLevel\nFROM PlantIncidents pi\nJOIN PlantMaintenanceAnalysis pma ON pi.PlantID = pma.PlantID\nJOIN AuditRecommendations ar ON pi.PlantID = ar.PlantID\nORDER BY pi.CriticalIncidentsCount DESC, pi.TotalIncidentsCount DESC, pi.TotalIncidentDuration DESC\nLIMIT 37;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH PlantIncidents AS (\n    SELECT \n        p.PlantID,\n        p.Name AS PlantName,\n        p.Type AS PlantType,\n        COUNT(i.IncidentID) AS TotalIncidentsCount,\n        COUNT(CASE WHEN i.Severity = 'Критическая' THEN 1 END) AS CriticalIncidentsCount,\n        MAX(i.Date) AS LastIncidentDate,\n        AVG(i.DurationHours) AS AvgIncidentDuration\n    FROM PowerPlant p\n    JOIN Incident i ON p.PlantID = i.PlantID\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY p.PlantID, p.Name, p.Type\n),\nPlantMaintenanceAnalysis AS (\n    SELECT \n        p.PlantID,\n        SUM(m.Cost) AS TotalMaintenanceCost,\n        COUNT(m.MaintenanceID) AS MaintenanceCount,\n        AVG(m.DurationHours) AS AvgMaintenanceDuration\n    FROM PowerPlant p\n    JOIN Maintenance m ON p.PlantID = m.PlantID\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY p.PlantID\n),\nPlantAuditAnalysis AS (\n    SELECT \n        p.PlantID,\n        COUNT(a.AuditID) AS TotalAuditCount,\n        COUNT(CASE WHEN a.ComplianceStatus = 'Не соблюдено' THEN 1 END) AS NonComplianceCount,\n        AVG(a.ComplianceStatus = 'Не соблюдено') AS NonComplianceRate\n    FROM PowerPlant p\n    JOIN `Audit` a ON p.PlantID = a.PlantID\n    WHERE a.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY p.PlantID\n),\nPlantEmissionsAnalysis AS (\n    SELECT \n        p.PlantID,\n        AVG(e.CO2Emissions) AS AvgCO2Emissions,\n        AVG(e.SO2Emissions) AS AvgSO2Emissions,\n        AVG(e.NOxEmissions) AS AvgNOxEmissions\n    FROM PowerPlant p\n    JOIN Emission e ON p.PlantID = e.PlantID\n    WHERE e.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY p.PlantID\n)\nSELECT \n    pi.PlantName,\n    pi.PlantType,\n    pi.TotalIncidentsCount,\n    pi.CriticalIncidentsCount,\n    pi.LastIncidentDate,\n    pi.AvgIncidentDuration,\n    pma.TotalMaintenanceCost,\n    pma.MaintenanceCount,\n    pma.AvgMaintenanceDuration,\n    paa.TotalAuditCount,\n    paa.NonComplianceCount,\n    paa.NonComplianceRate,\n    pea.AvgCO2Emissions,\n    pea.AvgSO2Emissions,\n    pea.AvgNOxEmissions,\n    CASE \n        WHEN pi.CriticalIncidentsCount > 2 THEN 'Критический уровень рисков'\n        WHEN pi.CriticalIncidentsCount > 0 THEN 'Высокий уровень рисков'\n        ELSE 'Средний уровень рисков'\n    END AS RiskLevel\nFROM PlantIncidents pi\nJOIN PlantMaintenanceAnalysis pma ON pi.PlantID = pma.PlantID\nJOIN PlantAuditAnalysis paa ON pi.PlantID = paa.PlantID\nJOIN PlantEmissionsAnalysis pea ON pi.PlantID = pea.PlantID\nORDER BY pi.CriticalIncidentsCount DESC, pi.TotalIncidentsCount DESC\nLIMIT 37;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH PlantIncidents AS (\n    SELECT \n        p.PlantID,\n        p.Name AS PlantName,\n        p.Type AS PlantType,\n        p.CapacityMW,\n        oc.Name AS OwnerCompany,\n        COUNT(i.IncidentID) AS TotalIncidents,\n        COUNT(CASE WHEN i.Severity = 'Критическая' THEN 1 END) AS CriticalIncidents,\n        COUNT(CASE WHEN i.Severity = 'Высокая' THEN 1 END) AS HighSeverityIncidents,\n        COUNT(CASE WHEN i.Severity = 'Средняя' THEN 1 END) AS MediumSeverityIncidents,\n        COUNT(CASE WHEN i.Severity = 'Низкая' THEN 1 END) AS LowSeverityIncidents,\n        AVG(i.DurationHours) AS AvgIncidentDuration,\n        SUM(i.DurationHours) AS TotalDowntimeHours,\n        GROUP_CONCAT(DISTINCT i.Description SEPARATOR '; ') AS IncidentDescriptions,\n        GROUP_CONCAT(DISTINCT i.Impact SEPARATOR '; ') AS IncidentImpacts\n    FROM PowerPlant p\n    JOIN OwnerCompany oc ON p.OwnerCompanyID = oc.CompanyID\n    JOIN Incident i ON p.PlantID = i.PlantID\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY p.PlantID, p.Name, p.Type, p.CapacityMW, oc.Name\n),\nPlantMaintenance AS (\n    SELECT \n        p.PlantID,\n        SUM(m.Cost) AS TotalMaintenanceCost,\n        COUNT(m.MaintenanceID) AS MaintenanceCount,\n        AVG(m.DurationHours) AS AvgMaintenanceDuration,\n        GROUP_CONCAT(DISTINCT m.Description SEPARATOR '; ') AS MaintenanceDescriptions\n    FROM PowerPlant p\n    JOIN Maintenance m ON p.PlantID = m.PlantID\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY p.PlantID\n),\nPlantAudits AS (\n    SELECT \n        p.PlantID,\n        COUNT(a.AuditID) AS AuditCount,\n        GROUP_CONCAT(DISTINCT a.Findings SEPARATOR '; ') AS AuditFindings,\n        GROUP_CONCAT(DISTINCT a.Recommendations SEPARATOR '; ') AS AuditRecommendations,\n        GROUP_CONCAT(DISTINCT a.ComplianceStatus SEPARATOR '; ') AS ComplianceStatuses\n    FROM PowerPlant p\n    JOIN `Audit` a ON p.PlantID = a.PlantID\n    WHERE a.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY p.PlantID\n)\nSELECT \n    pi.PlantName,\n    pi.PlantType,\n    pi.CapacityMW,\n    pi.OwnerCompany,\n    pi.TotalIncidents,\n    pi.CriticalIncidents,\n    pi.HighSeverityIncidents,\n    pi.MediumSeverityIncidents,\n    pi.LowSeverityIncidents,\n    ROUND(pi.AvgIncidentDuration, 2) AS AvgIncidentDuration,\n    ROUND(pi.TotalDowntimeHours, 2) AS TotalDowntimeHours,\n    pi.IncidentDescriptions,\n    pi.IncidentImpacts,\n    ROUND(pm.TotalMaintenanceCost, 2) AS TotalMaintenanceCost,\n    pm.MaintenanceCount,\n    ROUND(pm.AvgMaintenanceDuration, 2) AS AvgMaintenanceDuration,\n    pm.MaintenanceDescriptions,\n    pa.AuditCount,\n    pa.AuditFindings,\n    pa.AuditRecommendations,\n    pa.ComplianceStatuses,\n    CASE \n        WHEN pi.CriticalIncidents > 0 THEN 'Критический уровень проблем'\n        WHEN pi.HighSeverityIncidents > 2 THEN 'Высокий уровень проблем'\n        WHEN pi.TotalIncidents > 5 THEN 'Повышенный уровень проблем'\n        ELSE 'Средний уровень проблем'\n    END AS ProblemLevel\nFROM PlantIncidents pi\nLEFT JOIN PlantMaintenance pm ON pi.PlantID = pm.PlantID\nLEFT JOIN PlantAudits pa ON pi.PlantID = pa.PlantID\nORDER BY pi.CriticalIncidents DESC, pi.TotalIncidents DESC, pi.TotalDowntimeHours DESC\nLIMIT 37;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "WITH PlantIncidents AS (\n    SELECT \n        p.PlantID,\n        p.Name AS PlantName,\n        p.Type AS PlantType,\n        p.CapacityMW,\n        oc.Name AS OwnerName,\n        COUNT(i.IncidentID) AS TotalIncidents,\n        COUNT(CASE WHEN i.Severity = 'Критическая' THEN 1 END) AS CriticalIncidents,\n        COUNT(CASE WHEN i.Severity = 'Высокая' THEN 1 END) AS HighSeverityIncidents,\n        COUNT(CASE WHEN i.Severity = 'Средняя' THEN 1 END) AS MediumSeverityIncidents,\n        COUNT(CASE WHEN i.Severity = 'Низкая' THEN 1 END) AS LowSeverityIncidents,\n        AVG(i.DurationHours) AS AvgIncidentDuration,\n        MAX(i.Date) AS LastIncidentDate\n    FROM PowerPlant p\n    JOIN OwnerCompany oc ON p.OwnerCompanyID = oc.CompanyID\n    JOIN Incident i ON p.PlantID = i.PlantID\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY p.PlantID, p.Name, p.Type, p.CapacityMW, oc.Name\n),\nPlantMaintenance AS (\n    SELECT \n        p.PlantID,\n        SUM(m.Cost) AS TotalMaintenanceCost,\n        COUNT(m.MaintenanceID) AS MaintenanceCount,\n        AVG(m.DurationHours) AS AvgMaintenanceDuration\n    FROM PowerPlant p\n    JOIN Maintenance m ON p.PlantID = m.PlantID\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY p.PlantID\n),\nPlantAudits AS (\n    SELECT \n        p.PlantID,\n        COUNT(a.AuditID) AS AuditCount,\n        GROUP_CONCAT(DISTINCT a.Recommendations SEPARATOR '; ') AS AuditRecommendations,\n        GROUP_CONCAT(DISTINCT a.Auditor SEPARATOR '; ') AS Auditors\n    FROM PowerPlant p\n    JOIN `Audit` a ON p.PlantID = a.PlantID\n    WHERE a.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY p.PlantID\n),\nPlantEmissions AS (\n    SELECT \n        p.PlantID,\n        AVG(e.CO2Emissions) AS AvgCO2Emissions,\n        AVG(e.SO2Emissions) AS AvgSO2Emissions,\n        AVG(e.NOxEmissions) AS AvgNOxEmissions\n    FROM PowerPlant p\n    JOIN Emission e ON p.PlantID = e.PlantID\n    WHERE e.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY p.PlantID\n)\nSELECT \n    pi.PlantName,\n    pi.PlantType,\n    pi.CapacityMW,\n    pi.OwnerName,\n    pi.TotalIncidents,\n    pi.CriticalIncidents,\n    pi.HighSeverityIncidents,\n    pi.MediumSeverityIncidents,\n    pi.LowSeverityIncidents,\n    ROUND(pi.AvgIncidentDuration, 2) AS AvgIncidentDuration,\n    pi.LastIncidentDate,\n    ROUND(pm.TotalMaintenanceCost, 2) AS TotalMaintenanceCost,\n    pm.MaintenanceCount,\n    ROUND(pm.AvgMaintenanceDuration, 2) AS AvgMaintenanceDuration,\n    pa.AuditCount,\n    pa.AuditRecommendations,\n    pa.Auditors,\n    ROUND(pe.AvgCO2Emissions, 2) AS AvgCO2Emissions,\n    ROUND(pe.AvgSO2Emissions, 2) AS AvgSO2Emissions,\n    ROUND(pe.AvgNOxEmissions, 2) AS AvgNOxEmissions\nFROM PlantIncidents pi\nLEFT JOIN PlantMaintenance pm ON pi.PlantID = pm.PlantID\nLEFT JOIN PlantAudits pa ON pi.PlantID = pa.PlantID\nLEFT JOIN PlantEmissions pe ON pi.PlantID = pe.PlantID\nORDER BY pi.CriticalIncidents DESC, pi.TotalIncidents DESC, pi.HighSeverityIncidents DESC\nLIMIT 37;",
            "gigachat_response": "WITH IncidentDetails AS (\n    SELECT \n        i.PlantID,\n        COUNT(i.IncidentID) AS TotalIncidents,\n        COUNT(CASE WHEN i.Severity = 'Критическая' THEN 1 END) AS CriticalIncidents,\n        COUNT(CASE WHEN i.Severity = 'Высокая' THEN 1 END) AS HighSeverityIncidents,\n        COUNT(CASE WHEN i.Severity = 'Средняя' THEN 1 END) AS MediumSeverityIncidents,\n        COUNT(CASE WHEN i.Severity = 'Низкая' THEN 1 END) AS LowSeverityIncidents,\n        AVG(i.DurationHours) AS AvgIncidentDuration,\n        MIN(i.Date) AS FirstIncidentDate,\n        MAX(i.Date) AS LastIncidentDate\n    FROM Incident i\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY i.PlantID\n),\nMaintenanceCosts AS (\n    SELECT \n        m.PlantID,\n        SUM(m.Cost) AS TotalMaintenanceCost,\n        COUNT(m.MaintenanceID) AS MaintenanceCount,\n        AVG(m.DurationHours) AS AvgMaintenanceDuration\n    FROM Maintenance m\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY m.PlantID\n),\nAuditRecommendations AS (\n    SELECT \n        a.PlantID,\n        STRING_AGG(a.Findings, ', ') AS AuditFindings,\n        STRING_AGG(a.Recommendations, ', ') AS AuditRecommendations\n    FROM `Audit` a\n    WHERE a.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY a.PlantID\n)\nSELECT \n    pp.PlantID,\n    pp.Name AS PlantName,\n    pp.Location,\n    id.TotalIncidents,\n    id.CriticalIncidents,\n    id.HighSeverityIncidents,\n    id.MediumSeverityIncidents,\n    id.LowSeverityIncidents,\n    ROUND(id.AvgIncidentDuration, 2) AS AvgIncidentDuration,\n    mc.TotalMaintenanceCost,\n    mc.MaintenanceCount,\n    ROUND(mc.AvgMaintenanceDuration, 2) AS AvgMaintenanceDuration,\n    ar.AuditFindings,\n    ar.AuditRecommendations\nFROM PowerPlant pp\nLEFT JOIN IncidentDetails id ON pp.PlantID = id.PlantID\nLEFT JOIN MaintenanceCosts mc ON pp.PlantID = mc.PlantID\nLEFT JOIN AuditRecommendations ar ON pp.PlantID = ar.PlantID\nWHERE id.TotalIncidents IS NOT NULL\nORDER BY id.TotalIncidents DESC, id.CriticalIncidents DESC\nLIMIT 37;",
            "gigachat_response_ru": "WITH IncidentHistory AS (\n    SELECT \n        i.PlantID,\n        COUNT(*) AS TotalIncidents,\n        SUM(CASE WHEN i.Severity = 'Критическая' OR i.Severity = 'Высокая' THEN 1 ELSE 0 END) AS HighSeverityIncidents,\n        SUM(i.DurationHours) AS TotalIncidentDuration,\n        AVG(i.DurationHours) AS AvgIncidentDuration\n    FROM Incident i\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY i.PlantID\n),\nMaintenanceCosts AS (\n    SELECT \n        m.PlantID,\n        SUM(m.Cost) AS TotalMaintenanceCost,\n        COUNT(m.MaintenanceID) AS MaintenanceCount\n    FROM Maintenance m\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY m.PlantID\n),\nAuditRecommendations AS (\n    SELECT \n        a.PlantID,\n        STRING_AGG(a.Findings || ': ' || a.Recommendations, '; ') AS RecommendationSummary\n    FROM `Audit` a\n    WHERE a.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY a.PlantID\n)\nSELECT \n    pp.PlantID,\n    pp.Name AS PlantName,\n    ih.TotalIncidents,\n    ih.HighSeverityIncidents,\n    ih.TotalIncidentDuration,\n    ih.AvgIncidentDuration,\n    mc.TotalMaintenanceCost,\n    mc.MaintenanceCount,\n    ar.RecommendationSummary\nFROM PowerPlant pp\nLEFT JOIN IncidentHistory ih ON pp.PlantID = ih.PlantID\nLEFT JOIN MaintenanceCosts mc ON pp.PlantID = mc.PlantID\nLEFT JOIN AuditRecommendations ar ON pp.PlantID = ar.PlantID\nWHERE ih.TotalIncidents IS NOT NULL\nORDER BY ih.TotalIncidents DESC, ih.HighSeverityIncidents DESC\nLIMIT 37;"
        },
        {
            "question": "Найти топ-38 потребителей с наиболее сложными паттернами потребления за последний год, анализируя количество и типы счетчиков, вариативность потребления, стоимость контрактов и потенциал для оптимизации энергопотребления.",
            "sql_query": "WITH ConsumerMeterAnalysis AS (\n    SELECT \n        c.ConsumerID,\n        c.Name AS ConsumerName,\n        c.Type AS ConsumerType,\n        c.ConsumptionPattern,\n        COUNT(DISTINCT m.MeterID) AS TotalMetersCount,\n        COUNT(DISTINCT m.Type) AS MeterTypesCount,\n        MAX(m.LastReadingDate) AS LastReadingDate\n    FROM Consumer c\n    JOIN Meter m ON c.ConsumerID = m.ConsumerID\n    WHERE m.LastReadingDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY c.ConsumerID, c.Name, c.Type, c.ConsumptionPattern\n),\nConsumptionVariability AS (\n    SELECT \n        c.ConsumerID,\n        STDDEV(m.LastReading) AS ConsumptionStdDev,\n        MAX(m.LastReading) - MIN(m.LastReading) AS ConsumptionRange,\n        AVG(m.LastReading) AS AvgConsumption\n    FROM Consumer c\n    JOIN Meter m ON c.ConsumerID = m.ConsumerID\n    WHERE m.LastReadingDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY c.ConsumerID\n),\nContractAnalysis AS (\n    SELECT \n        c.ConsumerID,\n        AVG(ct.PricePerUnit) AS AvgPricePerUnit,\n        SUM(ct.Volume) AS TotalContractVolume,\n        COUNT(DISTINCT ct.ContractID) AS ActiveContractsCount\n    FROM Consumer c\n    JOIN `Contract` ct ON c.ConsumerID = ct.ConsumerID\n    WHERE ct.Status = 'active'\n    GROUP BY c.ConsumerID\n)\nSELECT \n    cma.ConsumerName,\n    cma.ConsumerType,\n    cma.ConsumptionPattern,\n    cma.TotalMetersCount,\n    cma.MeterTypesCount,\n    ROUND(cv.AvgConsumption, 2) AS AvgConsumption,\n    ROUND(cv.ConsumptionStdDev, 2) AS ConsumptionVariability,\n    ROUND(cv.ConsumptionRange, 2) AS ConsumptionRange,\n    ROUND(ca.AvgPricePerUnit, 2) AS AvgPricePerUnit,\n    ROUND(ca.TotalContractVolume, 2) AS TotalContractVolume,\n    ca.ActiveContractsCount,\n    CASE \n        WHEN cv.ConsumptionStdDev > cv.AvgConsumption * 0.4 THEN 'Высокая нестабильность'\n        WHEN cv.ConsumptionStdDev > cv.AvgConsumption * 0.2 THEN 'Средняя нестабильность'\n        ELSE 'Низкая нестабильность'\n    END AS ConsumptionStability\nFROM ConsumerMeterAnalysis cma\nJOIN ConsumptionVariability cv ON cma.ConsumerID = cv.ConsumerID\nJOIN ContractAnalysis ca ON cma.ConsumerID = ca.ConsumerID\nORDER BY ConsumptionVariability DESC, TotalMetersCount DESC\nLIMIT 38;",
            "gpt-4o_response": "WITH ConsumerMeterAnalysis AS (\n    SELECT \n        c.ConsumerID,\n        c.Name AS ConsumerName,\n        c.Type AS ConsumerType,\n        c.Location,\n        COUNT(m.MeterID) AS MeterCount,\n        COUNT(DISTINCT m.Type) AS MeterTypeCount,\n        SUM(m.LastReading) AS TotalLastReading,\n        AVG(m.LastReading) AS AvgLastReading,\n        MAX(m.LastReadingDate) AS LastReadingDate\n    FROM Consumer c\n    LEFT JOIN Meter m ON c.ConsumerID = m.ConsumerID\n    GROUP BY c.ConsumerID, c.Name, c.Type, c.Location\n),\nConsumerContractAnalysis AS (\n    SELECT \n        c.ConsumerID,\n        COUNT(ct.ContractID) AS ContractCount,\n        SUM(ct.PricePerUnit * ct.Volume) AS TotalContractValue,\n        AVG(ct.PricePerUnit) AS AvgPricePerUnit,\n        MAX(ct.EndDate) AS LastContractEndDate\n    FROM Consumer c\n    LEFT JOIN `Contract` ct ON c.ConsumerID = ct.ConsumerID\n    WHERE ct.Status = 'active'\n    GROUP BY c.ConsumerID\n),\nConsumerOptimizationPotential AS (\n    SELECT \n        c.ConsumerID,\n        c.Name AS ConsumerName,\n        c.Type AS ConsumerType,\n        c.Location,\n        c.AverageMonthlyConsumption,\n        cma.MeterCount,\n        cma.MeterTypeCount,\n        cma.TotalLastReading,\n        cma.AvgLastReading,\n        cca.ContractCount,\n        cca.TotalContractValue,\n        cca.AvgPricePerUnit,\n        CASE \n            WHEN cma.MeterTypeCount > 2 AND cca.ContractCount > 1 THEN 'Высокий потенциал'\n            WHEN cma.MeterTypeCount > 1 OR cca.ContractCount > 0 THEN 'Средний потенциал'\n            ELSE 'Низкий потенциал'\n        END AS OptimizationPotential\n    FROM Consumer c\n    LEFT JOIN ConsumerMeterAnalysis cma ON c.ConsumerID = cma.ConsumerID\n    LEFT JOIN ConsumerContractAnalysis cca ON c.ConsumerID = cca.ConsumerID\n)\nSELECT \n    cop.ConsumerName,\n    cop.ConsumerType,\n    cop.Location,\n    cop.AverageMonthlyConsumption,\n    cop.MeterCount,\n    cop.MeterTypeCount,\n    cop.TotalLastReading,\n    cop.AvgLastReading,\n    cop.ContractCount,\n    ROUND(cop.TotalContractValue, 2) AS TotalContractValue,\n    ROUND(cop.AvgPricePerUnit, 2) AS AvgPricePerUnit,\n    cop.OptimizationPotential\nFROM ConsumerOptimizationPotential cop\nORDER BY \n    CASE \n        WHEN cop.OptimizationPotential = 'Высокий потенциал' THEN 1\n        WHEN cop.OptimizationPotential = 'Средний потенциал' THEN 2\n        ELSE 3\n    END,\n    cop.MeterCount DESC,\n    cop.ContractCount DESC\nLIMIT 38;",
            "gpt-4o_response_ru": "WITH ConsumerMeterAnalysis AS (\n    SELECT \n        c.ConsumerID,\n        c.Name AS ConsumerName,\n        c.Type AS ConsumerType,\n        c.Location,\n        COUNT(m.MeterID) AS MeterCount,\n        COUNT(DISTINCT m.Type) AS MeterTypeCount,\n        SUM(m.LastReading) AS TotalConsumption,\n        AVG(m.LastReading) AS AvgConsumption,\n        MAX(m.LastReading) - MIN(m.LastReading) AS ConsumptionVariability\n    FROM Consumer c\n    LEFT JOIN Meter m ON c.ConsumerID = m.ConsumerID\n    GROUP BY c.ConsumerID, c.Name, c.Type, c.Location\n),\nConsumerContractAnalysis AS (\n    SELECT \n        c.ConsumerID,\n        SUM(ct.PricePerUnit * ct.Volume) AS TotalContractCost,\n        COUNT(ct.ContractID) AS ContractCount\n    FROM Consumer c\n    LEFT JOIN `Contract` ct ON c.ConsumerID = ct.ConsumerID\n    WHERE ct.Status = 'active'\n    GROUP BY c.ConsumerID\n),\nConsumerOptimizationPotential AS (\n    SELECT \n        cma.ConsumerID,\n        cma.ConsumerName,\n        cma.ConsumerType,\n        cma.Location,\n        cma.MeterCount,\n        cma.MeterTypeCount,\n        cma.TotalConsumption,\n        cma.AvgConsumption,\n        cma.ConsumptionVariability,\n        cca.TotalContractCost,\n        cca.ContractCount,\n        (cma.ConsumptionVariability / NULLIF(cma.AvgConsumption, 0)) * cca.TotalContractCost AS OptimizationPotential\n    FROM ConsumerMeterAnalysis cma\n    JOIN ConsumerContractAnalysis cca ON cma.ConsumerID = cca.ConsumerID\n)\nSELECT \n    cop.ConsumerName,\n    cop.ConsumerType,\n    cop.Location,\n    cop.MeterCount,\n    cop.MeterTypeCount,\n    ROUND(cop.TotalConsumption, 2) AS TotalConsumption,\n    ROUND(cop.AvgConsumption, 2) AS AvgConsumption,\n    ROUND(cop.ConsumptionVariability, 2) AS ConsumptionVariability,\n    ROUND(cop.TotalContractCost, 2) AS TotalContractCost,\n    cop.ContractCount,\n    ROUND(cop.OptimizationPotential, 2) AS OptimizationPotential\nFROM ConsumerOptimizationPotential cop\nORDER BY cop.OptimizationPotential DESC\nLIMIT 38;",
            "google/gemini-2.0-flash-001_response": "WITH ConsumerMeterAnalysis AS (\n    SELECT\n        c.ConsumerID,\n        c.Name AS ConsumerName,\n        c.Type AS ConsumerType,\n        c.Location AS ConsumerLocation,\n        COUNT(DISTINCT m.MeterID) AS MeterCount,\n        COUNT(CASE WHEN m.Type = 'Электрический' THEN 1 END) AS ElectricMeterCount,\n        COUNT(CASE WHEN m.Type = 'Газовый' THEN 1 END) AS GasMeterCount,\n        COUNT(CASE WHEN m.Type = 'Водяной' THEN 1 END) AS WaterMeterCount,\n        COUNT(CASE WHEN m.Type = 'Тепловой' THEN 1 END) AS HeatMeterCount,\n        AVG(m.LastReading) AS AvgLastReading\n    FROM Consumer c\n    LEFT JOIN Meter m ON c.ConsumerID = m.ConsumerID\n    WHERE m.InstallationDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY c.ConsumerID, c.Name, c.Type, c.Location\n),\nContractCostAnalysis AS (\n    SELECT\n        c.ConsumerID,\n        SUM(ct.PricePerUnit * ct.Volume) AS TotalContractCost,\n        AVG(ct.PricePerUnit) AS AvgPricePerUnit,\n        COUNT(DISTINCT ct.ContractID) AS ContractCount\n    FROM Consumer c\n    LEFT JOIN `Contract` ct ON c.ConsumerID = ct.ConsumerID\n    WHERE ct.StartDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY c.ConsumerID\n),\nConsumptionPatternAnalysis AS (\n    SELECT\n        c.ConsumerID,\n        AVG(c.AverageMonthlyConsumption) AS AvgMonthlyConsumption,\n        MAX(LENGTH(c.ConsumptionPattern)) AS ConsumptionPatternComplexity\n    FROM Consumer c\n    GROUP BY c.ConsumerID\n),\nTariffOptimizationPotential AS (\n    SELECT\n        c.ConsumerID,\n        CASE\n            WHEN COUNT(DISTINCT t.TariffID) > 1 THEN 'Высокий'\n            WHEN AVG(t.PricePerUnit) > (SELECT AVG(PricePerUnit) FROM Tariff) THEN 'Средний'\n            ELSE 'Низкий'\n        END AS OptimizationPotential\n    FROM Consumer c\n    LEFT JOIN `Contract` ct ON c.ConsumerID = ct.ConsumerID\n    LEFT JOIN Supplier s ON ct.SupplierID = s.SupplierID\n    LEFT JOIN EnergySource es ON s.SourceID = es.SourceID\n    LEFT JOIN Tariff t ON 1=1\n    GROUP BY c.ConsumerID\n)\nSELECT\n    cma.ConsumerName,\n    cma.ConsumerType,\n    cma.ConsumerLocation,\n    cma.MeterCount,\n    cma.ElectricMeterCount,\n    cma.GasMeterCount,\n    cma.WaterMeterCount,\n    cma.HeatMeterCount,\n    ROUND(cma.AvgLastReading, 2) AS AvgLastReading,\n    ROUND(cca.TotalContractCost, 2) AS TotalContractCost,\n    ROUND(cca.AvgPricePerUnit, 2) AS AvgPricePerUnit,\n    cca.ContractCount,\n    ROUND(cpa.AvgMonthlyConsumption, 2) AS AvgMonthlyConsumption,\n    cpa.ConsumptionPatternComplexity,\n    top.OptimizationPotential,\n    (cma.MeterCount * 0.3 + cca.ContractCount * 0.2 + cpa.ConsumptionPatternComplexity * 0.5) AS ComplexityScore\nFROM ConsumerMeterAnalysis cma\nJOIN ContractCostAnalysis cca ON cma.ConsumerID = cca.ConsumerID\nJOIN ConsumptionPatternAnalysis cpa ON cma.ConsumerID = cpa.ConsumerID\nJOIN TariffOptimizationPotential top ON cma.ConsumerID = top.ConsumerID\nORDER BY ComplexityScore DESC\nLIMIT 38;",
            "google/gemini-2.0-flash-001_response_ru": "WITH ConsumerConsumption AS (\n    SELECT\n        c.ConsumerID,\n        c.Name AS ConsumerName,\n        c.Type AS ConsumerType,\n        c.Location AS ConsumerLocation,\n        c.ContactName AS ConsumerContactName,\n        c.ContactPhone AS ConsumerContactPhone,\n        c.ContactEmail AS ConsumerContactEmail,\n        c.ConsumptionPattern,\n        c.AverageMonthlyConsumption,\n        COUNT(DISTINCT m.MeterID) AS MeterCount,\n        COUNT(DISTINCT m.Type) AS MeterTypeCount,\n        SUM(ct.Volume) AS TotalContractVolume,\n        AVG(ct.PricePerUnit) AS AvgPricePerUnit,\n        SUM(ct.Volume * ct.PricePerUnit) AS TotalContractValue\n    FROM Consumer c\n    LEFT JOIN Meter m ON c.ConsumerID = m.ConsumerID\n    LEFT JOIN `Contract` ct ON c.ConsumerID = ct.ConsumerID\n    WHERE ct.StartDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY\n        c.ConsumerID,\n        c.Name,\n        c.Type,\n        c.Location,\n        c.ContactName,\n        c.ContactPhone,\n        c.ContactEmail,\n        c.ConsumptionPattern,\n        c.AverageMonthlyConsumption\n),\nConsumptionVariability AS (\n    SELECT\n        ConsumerID,\n        AVG(AverageMonthlyConsumption) AS AvgConsumption,\n        STDDEV(AverageMonthlyConsumption) AS ConsumptionStdDev,\n        (MAX(AverageMonthlyConsumption) - MIN(AverageMonthlyConsumption)) AS ConsumptionRange\n    FROM Consumer\n    GROUP BY ConsumerID\n),\nOptimizationPotential AS (\n    SELECT\n        cc.ConsumerID,\n        cc.ConsumerName,\n        cc.ConsumerType,\n        cc.ConsumerLocation,\n        cc.ConsumerContactName,\n        cc.ConsumerContactPhone,\n        cc.ConsumerContactEmail,\n        cc.ConsumptionPattern,\n        cc.AverageMonthlyConsumption,\n        cc.MeterCount,\n        cc.MeterTypeCount,\n        cc.TotalContractVolume,\n        cc.AvgPricePerUnit,\n        cc.TotalContractValue,\n        cv.AvgConsumption,\n        cv.ConsumptionStdDev,\n        cv.ConsumptionRange,\n        (cc.MeterCount + cc.MeterTypeCount + (cv.ConsumptionStdDev / cv.AvgConsumption) + (cc.TotalContractValue / cc.TotalContractVolume)) AS ComplexityScore\n    FROM ConsumerConsumption cc\n    JOIN ConsumptionVariability cv ON cc.ConsumerID = cv.ConsumerID\n)\nSELECT\n    op.ConsumerName,\n    op.ConsumerType,\n    op.ConsumerLocation,\n    op.ConsumerContactName,\n    op.ConsumerContactPhone,\n    op.ConsumerContactEmail,\n    op.ConsumptionPattern,\n    op.AverageMonthlyConsumption,\n    op.MeterCount,\n    op.MeterTypeCount,\n    ROUND(op.TotalContractVolume, 2) AS TotalContractVolume,\n    ROUND(op.AvgPricePerUnit, 2) AS AvgPricePerUnit,\n    ROUND(op.TotalContractValue, 2) AS TotalContractValue,\n    ROUND(op.AvgConsumption, 2) AS AvgConsumption,\n    ROUND(op.ConsumptionStdDev, 2) AS ConsumptionStdDev,\n    ROUND(op.ConsumptionRange, 2) AS ConsumptionRange,\n    ROUND(op.ComplexityScore, 2) AS ComplexityScore\nFROM OptimizationPotential op\nORDER BY op.ComplexityScore DESC\nLIMIT 38;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH ConsumerPatterns AS (\n    SELECT \n        c.ConsumerID,\n        c.Name AS ConsumerName,\n        c.Type AS ConsumerType,\n        c.Location,\n        c.ContactName,\n        c.ContactPhone,\n        c.ContactEmail,\n        c.ConsumptionPattern,\n        c.AverageMonthlyConsumption,\n        COUNT(m.MeterID) AS MeterCount,\n        COUNT(DISTINCT m.Type) AS MeterTypeCount,\n        MAX(m.LastReading) AS MaxLastReading,\n        MIN(m.LastReading) AS MinLastReading,\n        AVG(m.LastReading) AS AvgLastReading,\n        STDEV(m.LastReading) AS StdDevLastReading\n    FROM Consumer c\n    JOIN Meter m ON c.ConsumerID = m.ConsumerID\n    GROUP BY c.ConsumerID, c.Name, c.Type, c.Location, c.ContactName, c.ContactPhone, c.ContactEmail, c.ConsumptionPattern, c.AverageMonthlyConsumption\n),\nContractAnalysis AS (\n    SELECT \n        c.ConsumerID,\n        COUNT(ct.ContractID) AS ContractCount,\n        SUM(ct.Volume) AS TotalContractVolume,\n        AVG(ct.PricePerUnit) AS AvgContractPrice,\n        MAX(ct.PricePerUnit) AS MaxContractPrice,\n        MIN(ct.PricePerUnit) AS MinContractPrice,\n        STDEV(ct.PricePerUnit) AS StdDevContractPrice\n    FROM Consumer c\n    JOIN `Contract` ct ON c.ConsumerID = ct.ConsumerID\n    GROUP BY c.ConsumerID\n),\nOptimizationPotential AS (\n    SELECT \n        c.ConsumerID,\n        c.AverageMonthlyConsumption,\n        ca.TotalContractVolume,\n        ca.AvgContractPrice,\n        cp.StdDevLastReading,\n        cp.StdDevLastReading / cp.AvgLastReading AS VariabilityRatio\n    FROM ConsumerPatterns cp\n    JOIN ContractAnalysis ca ON cp.ConsumerID = ca.ConsumerID\n    JOIN Consumer c ON cp.ConsumerID = c.ConsumerID\n),\nRanking AS (\n    SELECT \n        op.ConsumerID,\n        op.AverageMonthlyConsumption,\n        op.TotalContractVolume,\n        op.AvgContractPrice,\n        op.StdDevLastReading,\n        op.VariabilityRatio,\n        ROW_NUMBER() OVER (ORDER BY op.VariabilityRatio DESC, op.StdDevLastReading DESC, op.AvgContractPrice DESC) AS Rank\n    FROM OptimizationPotential op\n)\nSELECT \n    r.ConsumerID,\n    c.Name AS ConsumerName,\n    c.Type AS ConsumerType,\n    c.Location,\n    c.ContactName,\n    c.ContactPhone,\n    c.ContactEmail,\n    c.ConsumptionPattern,\n    r.AverageMonthlyConsumption,\n    r.TotalContractVolume,\n    r.AvgContractPrice,\n    r.StdDevLastReading,\n    r.VariabilityRatio,\n    cp.MeterCount,\n    cp.MeterTypeCount,\n    cp.MaxLastReading,\n    cp.MinLastReading,\n    cp.AvgLastReading\nFROM Ranking r\nJOIN Consumer c ON r.ConsumerID = c.ConsumerID\nJOIN ConsumerPatterns cp ON r.ConsumerID = cp.ConsumerID\nWHERE r.Rank <= 38\nORDER BY r.VariabilityRatio DESC, r.StdDevLastReading DESC, r.AvgContractPrice DESC;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH ConsumerComplexity AS (\n    SELECT \n        c.ConsumerID,\n        c.Name AS ConsumerName,\n        c.Type AS ConsumerType,\n        c.Location,\n        COUNT(DISTINCT m.MeterID) AS MeterCount,\n        COUNT(DISTINCT ct.ContractID) AS ContractCount,\n        AVG(ct.Volume) AS AvgContractVolume,\n        AVG(ct.PricePerUnit) AS AvgContractPrice,\n        STDDEV(c.AverageMonthlyConsumption) AS ConsumptionVariability,\n        CASE \n            WHEN c.AverageMonthlyConsumption > 20000 THEN 'Высокий'\n            WHEN c.AverageMonthlyConsumption > 10000 THEN 'Средний'\n            ELSE 'Низкий'\n        END AS ConsumptionLevel\n    FROM Consumer c\n    JOIN Meter m ON c.ConsumerID = m.ConsumerID\n    JOIN `Contract` ct ON c.ConsumerID = ct.ConsumerID\n    WHERE ct.StartDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY c.ConsumerID, c.Name, c.Type, c.Location, c.AverageMonthlyConsumption\n),\nContractAnalysis AS (\n    SELECT \n        ca.ConsumerID,\n        ca.ConsumerName,\n        ca.ConsumerType,\n        ca.Location,\n        ca.MeterCount,\n        ca.ContractCount,\n        ca.AvgContractVolume,\n        ca.AvgContractPrice,\n        ca.ConsumptionVariability,\n        ca.ConsumptionLevel,\n        SUM(ct.Volume * ct.PricePerUnit) AS TotalContractValue,\n        COUNT(DISTINCT ct.SupplierID) AS SupplierCount\n    FROM ConsumerComplexity ca\n    JOIN `Contract` ct ON ca.ConsumerID = ct.ConsumerID\n    WHERE ct.StartDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY ca.ConsumerID, ca.ConsumerName, ca.ConsumerType, ca.Location, ca.MeterCount, ca.ContractCount, ca.AvgContractVolume, ca.AvgContractPrice, ca.ConsumptionVariability, ca.ConsumptionLevel\n),\nOptimizationPotential AS (\n    SELECT \n        ca.ConsumerID,\n        ca.ConsumerName,\n        ca.ConsumerType,\n        ca.Location,\n        ca.MeterCount,\n        ca.ContractCount,\n        ca.AvgContractVolume,\n        ca.AvgContractPrice,\n        ca.ConsumptionVariability,\n        ca.ConsumptionLevel,\n        ca.TotalContractValue,\n        ca.SupplierCount,\n        CASE \n            WHEN ca.ConsumptionVariability > 1000 THEN 'Высокий'\n            WHEN ca.ConsumptionVariability > 500 THEN 'Средний'\n            ELSE 'Низкий'\n        END AS OptimizationPotentialLevel\n    FROM ContractAnalysis ca\n)\nSELECT \n    op.ConsumerName,\n    op.ConsumerType,\n    op.Location,\n    op.MeterCount,\n    op.ContractCount,\n    ROUND(op.AvgContractVolume, 2) AS AvgContractVolume,\n    ROUND(op.AvgContractPrice, 2) AS AvgContractPrice,\n    ROUND(op.ConsumptionVariability, 2) AS ConsumptionVariability,\n    op.ConsumptionLevel,\n    ROUND(op.TotalContractValue, 2) AS TotalContractValue,\n    op.SupplierCount,\n    op.OptimizationPotentialLevel\nFROM OptimizationPotential op\nORDER BY op.ConsumptionVariability DESC, op.TotalContractValue DESC\nLIMIT 38;",
            "deepseek/deepseek-chat-v3-0324_response": "```sql\nWITH ConsumerMetrics AS (\n    SELECT \n        c.ConsumerID,\n        c.Name AS ConsumerName,\n        c.Type AS ConsumerType,\n        c.Location,\n        c.AverageMonthlyConsumption,\n        c.ConsumptionPattern,\n        COUNT(DISTINCT m.MeterID) AS MeterCount,\n        COUNT(DISTINCT CASE WHEN m.Type = 'Электрический' THEN m.MeterID END) AS ElectricityMeters,\n        COUNT(DISTINCT CASE WHEN m.Type = 'Газовый' THEN m.MeterID END) AS GasMeters,\n        COUNT(DISTINCT CASE WHEN m.Type = 'Водяной' THEN m.MeterID END) AS WaterMeters,\n        COUNT(DISTINCT CASE WHEN m.Type = 'Тепловой' THEN m.MeterID END) AS HeatMeters,\n        STDDEV(m.LastReading) AS ConsumptionVariability,\n        COUNT(DISTINCT ct.ContractID) AS ContractCount,\n        SUM(ct.Volume * ct.PricePerUnit) AS TotalContractValue,\n        MAX(ct.PricePerUnit) AS MaxContractPrice,\n        MIN(ct.PricePerUnit) AS MinContractPrice,\n        AVG(ct.PricePerUnit) AS AvgContractPrice,\n        COUNT(DISTINCT CASE WHEN ct.Status = 'active' THEN ct.ContractID END) AS ActiveContractsCount,\n        MAX(t.PricePerUnit) AS MaxTariff,\n        MIN(t.PricePerUnit) AS MinTariff,\n        AVG(t.PricePerUnit) AS AvgTariff\n    FROM Consumer c\n    LEFT JOIN Meter m ON c.ConsumerID = m.ConsumerID\n    LEFT JOIN `Contract` ct ON c.ConsumerID = ct.ConsumerID\n    LEFT JOIN Tariff t ON 1=1\n    GROUP BY c.ConsumerID, c.Name, c.Type, c.Location, c.AverageMonthlyConsumption, c.ConsumptionPattern\n),\nOptimizationPotential AS (\n    SELECT \n        cm.ConsumerID,\n        cm.ConsumerName,\n        cm.ConsumptionVariability / NULLIF(cm.AverageMonthlyConsumption, 0) AS VariabilityRatio,\n        (cm.MaxContractPrice - cm.MinContractPrice) / NULLIF(cm.AvgContractPrice, 0) AS PriceDispersionRatio,\n        cm.TotalContractValue / NULLIF(cm.AverageMonthlyConsumption, 0) AS CostPerUnitRatio,\n        (cm.MaxTariff - cm.MinTariff) / NULLIF(cm.AvgTariff, 0) AS TariffDispersionRatio,\n        CASE \n            WHEN cm.MeterCount > 3 THEN 'Высокая сложность'\n            WHEN cm.MeterCount > 1 THEN 'Средняя сложность'\n            ELSE 'Низкая сложность'\n        END AS MeterComplexity,\n        CASE \n            WHEN cm.ConsumptionVariability > (SELECT AVG(AverageMonthlyConsumption) FROM Consumer) THEN 'Высокая вариативность'\n            WHEN cm.ConsumptionVariability > (SELECT AVG(AverageMonthlyConsumption)*0.5 FROM Consumer) THEN 'Умеренная вариативность'\n            ELSE 'Низкая вариативность'\n        END AS ConsumptionVariabilityLevel,\n        CASE \n            WHEN (cm.MaxContractPrice - cm.MinContractPrice) > (SELECT AVG(MaxContractPrice - MinContractPrice) FROM ConsumerMetrics) THEN 'Высокий потенциал'\n            WHEN (cm.MaxContractPrice - cm.MinContractPrice) > 0 THEN 'Средний потенциал'\n            ELSE 'Низкий потенциал'\n        END AS PriceOptimizationPotential,\n        (cm.ElectricityMeters + cm.GasMeters * 1.5 + cm.WaterMeters * 0.8 + cm.HeatMeters * 1.2) AS WeightedMeterComplexity,\n        cm.MeterCount\n    FROM ConsumerMetrics cm\n)\nSELECT \n    cm.ConsumerID,\n    cm.ConsumerName,\n    cm.ConsumerType,\n    cm.Location,\n    cm.AverageMonthlyConsumption,\n    cm.ConsumptionPattern,\n    cm.MeterCount,\n    cm.ElectricityMeters,\n    cm.GasMeters,\n    cm.WaterMeters,\n    cm.HeatMeters,\n    ROUND(cm.ConsumptionVariability, 2) AS ConsumptionVariability,\n    cm.ContractCount,\n    ROUND(cm.TotalContractValue, 2) AS TotalContractValue,\n    ROUND(cm.MaxContractPrice, 2) AS MaxContractPrice,\n    ROUND(cm.MinContractPrice, 2) AS MinContractPrice,\n    ROUND(cm.AvgContractPrice, 2) AS AvgContractPrice,\n    cm.ActiveContractsCount,\n    op.MeterComplexity,",
            "deepseek/deepseek-chat-v3-0324_response_ru": "WITH ConsumerMeters AS (\n    SELECT \n        c.ConsumerID,\n        c.Name AS ConsumerName,\n        c.Type AS ConsumerType,\n        c.AverageMonthlyConsumption,\n        COUNT(m.MeterID) AS MeterCount,\n        COUNT(DISTINCT m.Type) AS MeterTypeCount,\n        MAX(m.LastReading) - MIN(m.LastReading) AS ConsumptionVariation,\n        AVG(m.LastReading) AS AvgConsumption\n    FROM Consumer c\n    LEFT JOIN Meter m ON c.ConsumerID = m.ConsumerID\n    WHERE m.LastReadingDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY c.ConsumerID, c.Name, c.Type, c.AverageMonthlyConsumption\n),\nConsumerContracts AS (\n    SELECT \n        c.ConsumerID,\n        COUNT(ct.ContractID) AS ContractCount,\n        SUM(ct.Volume) AS TotalContractVolume,\n        AVG(ct.PricePerUnit) AS AvgPricePerUnit,\n        SUM(ct.Volume * ct.PricePerUnit) AS TotalContractValue\n    FROM Consumer c\n    LEFT JOIN `Contract` ct ON c.ConsumerID = ct.ConsumerID\n    WHERE ct.Status = 'active'\n    GROUP BY c.ConsumerID\n),\nOptimizationPotential AS (\n    SELECT \n        cm.ConsumerID,\n        cm.ConsumerName,\n        cm.ConsumerType,\n        cm.MeterCount,\n        cm.MeterTypeCount,\n        cm.ConsumptionVariation,\n        cm.AvgConsumption,\n        cc.ContractCount,\n        cc.TotalContractVolume,\n        cc.AvgPricePerUnit,\n        cc.TotalContractValue,\n        CASE \n            WHEN cm.ConsumptionVariation > (cm.AvgConsumption * 0.5) THEN 'Высокий потенциал'\n            WHEN cm.ConsumptionVariation > (cm.AvgConsumption * 0.2) THEN 'Средний потенциал'\n            ELSE 'Низкий потенциал'\n        END AS OptimizationPotential\n    FROM ConsumerMeters cm\n    JOIN ConsumerContracts cc ON cm.ConsumerID = cc.ConsumerID\n)\nSELECT \n    ConsumerName,\n    ConsumerType,\n    MeterCount,\n    MeterTypeCount,\n    ROUND(ConsumptionVariation, 2) AS ConsumptionVariation,\n    ROUND(AvgConsumption, 2) AS AvgConsumption,\n    ContractCount,\n    ROUND(TotalContractVolume, 2) AS TotalContractVolume,\n    ROUND(AvgPricePerUnit, 2) AS AvgPricePerUnit,\n    ROUND(TotalContractValue, 2) AS TotalContractValue,\n    OptimizationPotential\nFROM OptimizationPotential\nORDER BY \n    MeterTypeCount DESC,\n    ConsumptionVariation DESC,\n    TotalContractValue DESC\nLIMIT 38;",
            "gigachat_response": "WITH ComplexMeterAnalysis AS (\n    SELECT \n        c.ConsumerID,\n        COUNT(DISTINCT m.MeterID) AS UniqueMetersCount,\n        COUNT(DISTINCT m.Type) AS DifferentMeterTypes,\n        AVG(m.LastReading) AS AvgLastReading,\n        STDDEV_SAMP(m.LastReading) AS ReadingVariability,\n        MIN(m.CalibrationDate) AS OldestCalibrationDate\n    FROM Consumer c\n    LEFT JOIN Meter m ON c.ConsumerID = m.ConsumerID\n    GROUP BY c.ConsumerID\n),\nComplexContractAnalysis AS (\n    SELECT \n        c.ConsumerID,\n        COUNT(*) AS ContractsCount,\n        AVG(ct.PricePerUnit) AS AvgContractPrice,\n        SUM(ct.Volume) AS TotalContractVolume,\n        MAX(ct.EndDate) AS LatestContractEndDate\n    FROM Consumer c\n    LEFT JOIN `Contract` ct ON c.ConsumerID = ct.ConsumerID\n    WHERE ct.StartDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY c.ConsumerID\n),\nOptimizationPotential AS (\n    SELECT \n        ca.ConsumerID,\n        ca.ContractsCount,\n        ca.AvgContractPrice,\n        ca.TotalContractVolume,\n        cm.UniqueMetersCount,\n        cm.DifferentMeterTypes,\n        cm.ReadingVariability,\n        cm.OldestCalibrationDate,\n        ROW_NUMBER() OVER (ORDER BY cm.ReadingVariability DESC, ca.ContractsCount DESC, ca.TotalContractVolume DESC) AS ComplexityRank\n    FROM ComplexMeterAnalysis cm\n    JOIN ComplexContractAnalysis ca ON cm.ConsumerID = ca.ConsumerID\n)\nSELECT \n    o.ConsumerID,\n    c.Name AS ConsumerName,\n    c.Location,\n    o.ContractsCount,\n    o.AvgContractPrice,\n    o.TotalContractVolume,\n    o.UniqueMetersCount,\n    o.DifferentMeterTypes,\n    o.ReadingVariability,\n    o.OldestCalibrationDate,\n    o.ComplexityRank\nFROM OptimizationPotential o\nJOIN Consumer c ON o.ConsumerID = c.ConsumerID\nWHERE o.ComplexityRank <= 38\nORDER BY o.ComplexityRank ASC;",
            "gigachat_response_ru": "WITH ComplexConsumptionPatterns AS (\n    SELECT \n        c.ConsumerID,\n        c.Name AS ConsumerName,\n        COUNT(DISTINCT m.MeterID) AS UniqueMetersCount,\n        COUNT(DISTINCT m.Type) AS DifferentMeterTypes,\n        STDDEV_SAMP(m.LastReading) AS VarianceInReadings,\n        AVG(m.LastReading) AS AverageConsumption,\n        MIN(m.LastReading) AS MinConsumption,\n        MAX(m.LastReading) AS MaxConsumption,\n        AVG(coalesce(ct.PricePerUnit, 0)) AS AvgContractPrice,\n        SUM(coalesce(ct.Volume, 0)) AS TotalContractVolume\n    FROM Consumer c\n    LEFT JOIN Meter m ON c.ConsumerID = m.ConsumerID\n    LEFT JOIN `Contract` ct ON c.ConsumerID = ct.ConsumerID\n    WHERE m.InstallationDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n      AND ct.StartDate <= CURRENT_DATE AND (ct.EndDate IS NULL OR ct.EndDate >= CURRENT_DATE)\n    GROUP BY c.ConsumerID, c.Name\n), \nOptimizationPotential AS (\n    SELECT \n        ccp.ConsumerID,\n        ccp.ConsumerName,\n        ccp.UniqueMetersCount,\n        ccp.DifferentMeterTypes,\n        ccp.VarianceInReadings,\n        ccp.AverageConsumption,\n        ccp.MinConsumption,\n        ccp.MaxConsumption,\n        ccp.AvgContractPrice,\n        ccp.TotalContractVolume,\n        CASE \n            WHEN ccp.VarianceInReadings / ccp.AverageConsumption > 0.5 THEN 'High'\n            WHEN ccp.VarianceInReadings / ccp.AverageConsumption > 0.2 THEN 'Medium'\n            ELSE 'Low'\n        END AS OptimizationPotential\n    FROM ComplexConsumptionPatterns ccp\n)\nSELECT *\nFROM OptimizationPotential\nWHERE OptimizationPotential <> 'Low'\nORDER BY VarianceInReadings DESC, UniqueMetersCount DESC\nLIMIT 38;"
        },
        {
            "question": "Найти топ-40 подстанций с наиболее сложной системой управления за последний год, анализируя количество инцидентов, нагрузку, обслуживание и подключенные линии электропередачи, с оценкой потенциальных рисков и эффективности.",
            "sql_query": "WITH SubstationIncidents AS (\n    SELECT \n        s.SubstationID,\n        s.Name AS SubstationName,\n        s.CapacityMW,\n        s.VoltageLevel,\n        COUNT(i.IncidentID) AS TotalIncidentsCount,\n        COUNT(CASE WHEN i.Severity = 'Критическая' THEN 1 END) AS CriticalIncidentsCount,\n        MAX(i.Date) AS LastIncidentDate,\n        AVG(i.DurationHours) AS AvgIncidentDuration\n    FROM Substation s\n    JOIN Incident i ON 1=1\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY s.SubstationID, s.Name, s.CapacityMW, s.VoltageLevel\n),\nSubstationMaintenance AS (\n    SELECT \n        s.SubstationID,\n        SUM(m.Cost) AS TotalMaintenanceCost,\n        COUNT(m.MaintenanceID) AS MaintenanceCount,\n        AVG(m.DurationHours) AS AvgMaintenanceDuration\n    FROM Substation s\n    JOIN Maintenance m ON 1=1\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY s.SubstationID\n),\nSubstationConnections AS (\n    SELECT \n        s.SubstationID,\n        COUNT(DISTINCT tl.LineID) AS ConnectedLinesCount,\n        SUM(tl.CapacityMW) AS TotalLineCapacity,\n        COUNT(DISTINCT c.ConsumerID) AS IndustrialConsumersCount,\n        SUM(c.AverageMonthlyConsumption) AS TotalIndustrialConsumption\n    FROM Substation s\n    JOIN TransmissionLine tl ON s.SubstationID = tl.LineID\n    JOIN Consumer c ON 1=1\n    WHERE c.Type = 'Промышленность'\n    GROUP BY s.SubstationID\n)\nSELECT \n    si.SubstationName,\n    ROUND(si.CapacityMW, 2) AS CapacityMW,\n    si.VoltageLevel,\n    si.TotalIncidentsCount,\n    si.CriticalIncidentsCount,\n    ROUND(si.AvgIncidentDuration, 2) AS AvgIncidentDuration,\n    ROUND(sm.TotalMaintenanceCost, 2) AS TotalMaintenanceCost,\n    sm.MaintenanceCount,\n    ROUND(sm.AvgMaintenanceDuration, 2) AS AvgMaintenanceDuration,\n    sc.ConnectedLinesCount,\n    ROUND(sc.TotalLineCapacity, 2) AS TotalLineCapacity,\n    sc.IndustrialConsumersCount,\n    ROUND(sc.TotalIndustrialConsumption, 2) AS TotalIndustrialConsumption,\n    CASE \n        WHEN si.CriticalIncidentsCount > 2 THEN 'Критический уровень сложности'\n        WHEN si.CriticalIncidentsCount > 0 THEN 'Высокий уровень сложности'\n        ELSE 'Средний уровень сложности'\n    END AS ComplexityLevel\nFROM SubstationIncidents si\nJOIN SubstationMaintenance sm ON si.SubstationID = sm.SubstationID\nJOIN SubstationConnections sc ON si.SubstationID = sc.SubstationID\nORDER BY si.CriticalIncidentsCount DESC, si.TotalIncidentsCount DESC\nLIMIT 40;",
            "gpt-4o_response": "WITH SubstationIncidents AS (\n    SELECT \n        s.SubstationID,\n        s.Name AS SubstationName,\n        COUNT(i.IncidentID) AS TotalIncidentsCount,\n        COUNT(CASE WHEN i.Severity = 'Критическая' THEN 1 END) AS CriticalIncidentsCount,\n        MAX(i.Date) AS LastIncidentDate,\n        AVG(i.DurationHours) AS AvgIncidentDuration\n    FROM Substation s\n    LEFT JOIN Incident i ON s.SubstationID = i.PlantID\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY s.SubstationID, s.Name\n),\nSubstationMaintenance AS (\n    SELECT \n        s.SubstationID,\n        SUM(m.Cost) AS TotalMaintenanceCost,\n        COUNT(m.MaintenanceID) AS MaintenanceCount,\n        AVG(m.DurationHours) AS AvgMaintenanceDuration\n    FROM Substation s\n    LEFT JOIN Maintenance m ON s.SubstationID = m.PlantID\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY s.SubstationID\n),\nSubstationConnections AS (\n    SELECT \n        s.SubstationID,\n        COUNT(DISTINCT tl.LineID) AS ConnectedLinesCount,\n        SUM(tl.CapacityMW) AS TotalLineCapacity\n    FROM Substation s\n    LEFT JOIN TransmissionLine tl ON s.SubstationID = tl.OwnerCompanyID\n    GROUP BY s.SubstationID\n)\nSELECT \n    si.SubstationName,\n    si.TotalIncidentsCount,\n    si.CriticalIncidentsCount,\n    ROUND(si.AvgIncidentDuration, 2) AS AvgIncidentDuration,\n    ROUND(sm.TotalMaintenanceCost, 2) AS TotalMaintenanceCost,\n    sm.MaintenanceCount,\n    ROUND(sm.AvgMaintenanceDuration, 2) AS AvgMaintenanceDuration,\n    sc.ConnectedLinesCount,\n    ROUND(sc.TotalLineCapacity, 2) AS TotalLineCapacity,\n    CASE \n        WHEN si.CriticalIncidentsCount > 2 THEN 'Критический уровень рисков'\n        WHEN si.CriticalIncidentsCount > 0 THEN 'Высокий уровень рисков'\n        ELSE 'Средний уровень рисков'\n    END AS RiskLevel\nFROM SubstationIncidents si\nJOIN SubstationMaintenance sm ON si.SubstationID = sm.SubstationID\nJOIN SubstationConnections sc ON si.SubstationID = sc.SubstationID\nORDER BY si.CriticalIncidentsCount DESC, si.TotalIncidentsCount DESC\nLIMIT 40;",
            "gpt-4o_response_ru": "WITH SubstationIncidents AS (\n    SELECT \n        s.SubstationID,\n        s.Name AS SubstationName,\n        COUNT(i.IncidentID) AS TotalIncidentsCount,\n        COUNT(CASE WHEN i.Severity = 'Критическая' THEN 1 END) AS CriticalIncidentsCount,\n        AVG(i.DurationHours) AS AvgIncidentDuration\n    FROM Substation s\n    LEFT JOIN Incident i ON s.SubstationID = i.PlantID\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY s.SubstationID, s.Name\n),\nSubstationMaintenance AS (\n    SELECT \n        s.SubstationID,\n        SUM(m.Cost) AS TotalMaintenanceCost,\n        COUNT(m.MaintenanceID) AS MaintenanceCount,\n        AVG(m.DurationHours) AS AvgMaintenanceDuration\n    FROM Substation s\n    LEFT JOIN Maintenance m ON s.SubstationID = m.PlantID\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY s.SubstationID\n),\nSubstationConnections AS (\n    SELECT \n        s.SubstationID,\n        COUNT(DISTINCT tl.LineID) AS ConnectedLinesCount,\n        SUM(tl.CapacityMW) AS TotalLineCapacity\n    FROM Substation s\n    LEFT JOIN TransmissionLine tl ON s.SubstationID = tl.OwnerCompanyID\n    GROUP BY s.SubstationID\n)\nSELECT \n    si.SubstationName,\n    si.TotalIncidentsCount,\n    si.CriticalIncidentsCount,\n    ROUND(si.AvgIncidentDuration, 2) AS AvgIncidentDuration,\n    ROUND(sm.TotalMaintenanceCost, 2) AS TotalMaintenanceCost,\n    sm.MaintenanceCount,\n    ROUND(sm.AvgMaintenanceDuration, 2) AS AvgMaintenanceDuration,\n    sc.ConnectedLinesCount,\n    ROUND(sc.TotalLineCapacity, 2) AS TotalLineCapacity,\n    CASE \n        WHEN si.CriticalIncidentsCount > 2 THEN 'Критический уровень рисков'\n        WHEN si.CriticalIncidentsCount > 0 THEN 'Высокий уровень рисков'\n        ELSE 'Средний уровень рисков'\n    END AS RiskLevel\nFROM SubstationIncidents si\nJOIN SubstationMaintenance sm ON si.SubstationID = sm.SubstationID\nJOIN SubstationConnections sc ON si.SubstationID = sc.SubstationID\nORDER BY si.CriticalIncidentsCount DESC, si.TotalIncidentsCount DESC\nLIMIT 40;",
            "google/gemini-2.0-flash-001_response": "WITH SubstationIncidents AS (\n    SELECT \n        s.SubstationID,\n        s.Name AS SubstationName,\n        s.Location,\n        s.CapacityMW,\n        s.VoltageLevel,\n        COUNT(i.IncidentID) AS TotalIncidents,\n        AVG(i.DurationHours) AS AvgIncidentDuration\n    FROM Substation s\n    LEFT JOIN Incident i ON s.SubstationID = i.PlantID\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY s.SubstationID, s.Name, s.Location, s.CapacityMW, s.VoltageLevel\n),\nSubstationMaintenance AS (\n    SELECT \n        s.SubstationID,\n        COUNT(m.MaintenanceID) AS TotalMaintenances,\n        AVG(m.Cost) AS AvgMaintenanceCost\n    FROM Substation s\n    LEFT JOIN Maintenance m ON s.SubstationID = m.PlantID\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY s.SubstationID\n),\nConnectedLines AS (\n    SELECT \n        s.SubstationID,\n        COUNT(tl.LineID) AS TotalLinesConnected,\n        SUM(tl.CapacityMW) AS TotalLinesCapacity\n    FROM Substation s\n    LEFT JOIN TransmissionLine tl ON s.OwnerCompanyID = tl.OwnerCompanyID\n    GROUP BY s.SubstationID\n),\nRiskAssessment AS (\n    SELECT \n        si.SubstationID,\n        si.SubstationName,\n        si.Location,\n        si.CapacityMW,\n        si.VoltageLevel,\n        si.TotalIncidents,\n        si.AvgIncidentDuration,\n        COALESCE(sm.TotalMaintenances, 0) AS TotalMaintenances,\n        COALESCE(sm.AvgMaintenanceCost, 0) AS AvgMaintenanceCost,\n        COALESCE(cl.TotalLinesConnected, 0) AS TotalLinesConnected,\n        COALESCE(cl.TotalLinesCapacity, 0) AS TotalLinesCapacity,\n        (si.TotalIncidents * 0.4 + COALESCE(sm.TotalMaintenances, 0) * 0.3 + (1 - (si.CapacityMW / (SELECT MAX(CapacityMW) FROM Substation))) * 0.3) AS RiskScore,\n        (si.CapacityMW / (SELECT MAX(CapacityMW) FROM Substation) * 0.5 + (1 - (si.TotalIncidents / (SELECT MAX(TotalIncidents) FROM SubstationIncidents))) * 0.5) AS EfficiencyScore\n    FROM SubstationIncidents si\n    LEFT JOIN SubstationMaintenance sm ON si.SubstationID = sm.SubstationID\n    LEFT JOIN ConnectedLines cl ON si.SubstationID = cl.SubstationID\n)\nSELECT \n    ra.SubstationName,\n    ra.Location,\n    ra.CapacityMW,\n    ra.VoltageLevel,\n    ra.TotalIncidents,\n    ROUND(ra.AvgIncidentDuration, 2) AS AvgIncidentDuration,\n    ra.TotalMaintenances,\n    ROUND(ra.AvgMaintenanceCost, 2) AS AvgMaintenanceCost,\n    ra.TotalLinesConnected,\n    ROUND(ra.TotalLinesCapacity, 2) AS TotalLinesCapacity,\n    ROUND(ra.RiskScore, 2) AS RiskScore,\n    ROUND(ra.EfficiencyScore, 2) AS EfficiencyScore,\n    CASE\n        WHEN ra.RiskScore > 0.7 THEN 'Высокий риск'\n        WHEN ra.RiskScore > 0.4 THEN 'Средний риск'\n        ELSE 'Низкий риск'\n    END AS RiskLevel\nFROM RiskAssessment ra\nORDER BY ra.RiskScore DESC\nLIMIT 40;",
            "google/gemini-2.0-flash-001_response_ru": "WITH SubstationIncidents AS (\n    SELECT \n        s.SubstationID,\n        s.Name AS SubstationName,\n        s.Location,\n        s.CapacityMW,\n        s.VoltageLevel,\n        oc.Name AS OwnerCompanyName,\n        COUNT(i.IncidentID) AS TotalIncidentsCount,\n        AVG(i.DurationHours) AS AvgIncidentDuration\n    FROM Substation s\n    LEFT JOIN Incident i ON s.SubstationID = i.PlantID AND i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    JOIN OwnerCompany oc ON s.OwnerCompanyID = oc.CompanyID\n    GROUP BY s.SubstationID, s.Name, s.Location, s.CapacityMW, s.VoltageLevel, oc.Name\n),\nSubstationMaintenance AS (\n    SELECT \n        s.SubstationID,\n        SUM(m.Cost) AS TotalMaintenanceCost,\n        COUNT(m.MaintenanceID) AS MaintenanceCount,\n        AVG(m.DurationHours) AS AvgMaintenanceDuration\n    FROM Substation s\n    LEFT JOIN Maintenance m ON s.SubstationID = m.PlantID AND m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY s.SubstationID\n),\nConnectedLines AS (\n    SELECT \n        s.SubstationID,\n        COUNT(DISTINCT tl.LineID) AS ConnectedLinesCount,\n        SUM(tl.CapacityMW) AS TotalLinesCapacity\n    FROM Substation s\n    LEFT JOIN TransmissionLine tl ON s.SubstationID = tl.OwnerCompanyID\n    GROUP BY s.SubstationID\n)\nSELECT \n    si.SubstationName,\n    si.Location,\n    si.CapacityMW,\n    si.VoltageLevel,\n    si.OwnerCompanyName,\n    si.TotalIncidentsCount,\n    ROUND(si.AvgIncidentDuration, 2) AS AvgIncidentDuration,\n    COALESCE(sm.TotalMaintenanceCost, 0) AS TotalMaintenanceCost,\n    COALESCE(sm.MaintenanceCount, 0) AS MaintenanceCount,\n    COALESCE(ROUND(sm.AvgMaintenanceDuration, 2), 0) AS AvgMaintenanceDuration,\n    COALESCE(cl.ConnectedLinesCount, 0) AS ConnectedLinesCount,\n    COALESCE(ROUND(cl.TotalLinesCapacity, 2), 0) AS TotalLinesCapacity,\n    CASE\n        WHEN si.TotalIncidentsCount > 5 THEN 'Высокий риск'\n        WHEN si.TotalIncidentsCount > 2 THEN 'Средний риск'\n        ELSE 'Низкий риск'\n    END AS RiskLevel,\n    (si.TotalIncidentsCount * 0.4 + COALESCE(sm.MaintenanceCount, 0) * 0.3 + COALESCE(cl.ConnectedLinesCount, 0) * 0.3) AS ComplexityScore\nFROM SubstationIncidents si\nLEFT JOIN SubstationMaintenance sm ON si.SubstationID = sm.SubstationID\nLEFT JOIN ConnectedLines cl ON si.SubstationID = cl.SubstationID\nORDER BY ComplexityScore DESC\nLIMIT 40;",
            "meta-llama/llama-3.3-70b-instruct_response": "```sql\nWITH SubstationIncidents AS (\n    SELECT \n        s.SubstationID,\n        s.Name AS SubstationName,\n        COUNT(i.IncidentID) AS TotalIncidentsCount,\n        COUNT(CASE WHEN i.Severity = 'Критическая' THEN 1 END) AS CriticalIncidentsCount,\n        MAX(i.Date) AS LastIncidentDate,\n        AVG(i.DurationHours) AS AvgIncidentDuration\n    FROM Substation s\n    JOIN",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH SubstationIncidents AS (\n    SELECT \n        s.SubstationID,\n        s.Name AS SubstationName,\n        COUNT(i.IncidentID) AS TotalIncidentsCount,\n        COUNT(CASE WHEN i.Severity = 'Критическая' THEN 1 END) AS CriticalIncidentsCount,\n        MAX(i.Date) AS LastIncidentDate,\n        AVG(i.DurationHours) AS AvgIncidentDuration\n    FROM Substation s\n    JOIN Incident i ON s.SubstationID = i.PlantID\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY s.SubstationID, s.Name\n),\nSubstationMaintenanceAnalysis AS (\n    SELECT \n        s.SubstationID,\n        SUM(m.Cost) AS TotalMaintenanceCost,\n        COUNT(m.MaintenanceID) AS MaintenanceCount,\n        AVG(m.DurationHours) AS AvgMaintenanceDuration\n    FROM Substation s\n    JOIN Maintenance m ON s.SubstationID = m.PlantID\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY s.SubstationID\n),\nSubstationConnections AS (\n    SELECT \n        s.SubstationID,\n        COUNT(DISTINCT tl.LineID) AS ConnectedTransmissionLinesCount,\n        COUNT(DISTINCT c.ConsumerID) AS IndustrialConsumersCount,\n        SUM(c.AverageMonthlyConsumption) AS TotalIndustrialConsumption\n    FROM Substation s\n    JOIN TransmissionLine tl ON s.SubstationID = tl.LineID\n    JOIN Consumer c ON s.SubstationID = c.ConsumerID\n    WHERE c.Type = 'Промышленность'\n    GROUP BY s.SubstationID\n),\nSubstationLoadAnalysis AS (\n    SELECT \n        s.SubstationID,\n        AVG(s.CapacityMW) AS AvgCapacityMW,\n        MAX(s.CapacityMW) AS MaxCapacityMW,\n        MIN(s.CapacityMW) AS MinCapacityMW\n    FROM Substation s\n    GROUP BY s.SubstationID\n)\nSELECT \n    si.SubstationName,\n    si.TotalIncidentsCount,\n    si.CriticalIncidentsCount,\n    ROUND(si.AvgIncidentDuration, 2) AS AvgIncidentDuration,\n    sma.TotalMaintenanceCost,\n    sma.MaintenanceCount,\n    ROUND(sma.AvgMaintenanceDuration, 2) AS AvgMaintenanceDuration,\n    sc.ConnectedTransmissionLinesCount,\n    sc.IndustrialConsumersCount,\n    ROUND(sc.TotalIndustrialConsumption, 2) AS TotalIndustrialConsumption,\n    sla.AvgCapacityMW,\n    sla.MaxCapacityMW,\n    sla.MinCapacityMW,\n    CASE \n        WHEN si.CriticalIncidentsCount > 2 THEN 'Критический уровень рисков'\n        WHEN si.CriticalIncidentsCount > 0 THEN 'Высокий уровень рисков'\n        ELSE 'Средний уровень рисков'\n    END AS RiskLevel\nFROM SubstationIncidents si\nJOIN SubstationMaintenanceAnalysis sma ON si.SubstationID = sma.SubstationID\nJOIN SubstationConnections sc ON si.SubstationID = sc.SubstationID\nJOIN SubstationLoadAnalysis sla ON si.SubstationID = sla.SubstationID\nORDER BY si.CriticalIncidentsCount DESC, si.TotalIncidentsCount DESC\nLIMIT 40;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH SubstationIncidents AS (\n    SELECT \n        s.SubstationID,\n        s.Name AS SubstationName,\n        COUNT(i.IncidentID) AS IncidentCount,\n        SUM(CASE WHEN i.Severity = 'Критическая' THEN 1 ELSE 0 END) AS CriticalIncidents,\n        MAX(i.DurationHours) AS MaxIncidentDuration\n    FROM Substation s\n    LEFT JOIN Incident i ON s.SubstationID = i.PlantID\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY s.SubstationID, s.Name\n),\nSubstationMaintenance AS (\n    SELECT \n        s.SubstationID,\n        COUNT(m.MaintenanceID) AS MaintenanceCount,\n        SUM(m.Cost) AS TotalMaintenanceCost,\n        SUM(m.DurationHours) AS TotalMaintenanceHours\n    FROM Substation s\n    LEFT JOIN Maintenance m ON s.SubstationID = m.PlantID\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY s.SubstationID\n),\nSubstationConnections AS (\n    SELECT \n        s.SubstationID,\n        COUNT(tl.LineID) AS ConnectedLinesCount,\n        SUM(tl.CapacityMW) AS TotalConnectedCapacity\n    FROM Substation s\n    LEFT JOIN TransmissionLine tl ON s.Location = tl.StartLocation OR s.Location = tl.EndLocation\n    GROUP BY s.SubstationID\n),\nSubstationLoad AS (\n    SELECT \n        s.SubstationID,\n        SUM(c.AverageMonthlyConsumption) AS TotalConsumption,\n        COUNT(c.ConsumerID) AS ConsumerCount\n    FROM Substation s\n    LEFT JOIN Consumer c ON s.Location LIKE CONCAT('%', c.Location, '%')\n    GROUP BY s.SubstationID\n)\nSELECT \n    s.SubstationID,\n    s.Name AS SubstationName,\n    s.Location,\n    s.CapacityMW,\n    si.IncidentCount,\n    si.CriticalIncidents,\n    si.MaxIncidentDuration,\n    sm.MaintenanceCount,\n    sm.TotalMaintenanceCost,\n    sm.TotalMaintenanceHours,\n    sc.ConnectedLinesCount,\n    sc.TotalConnectedCapacity,\n    sl.TotalConsumption,\n    sl.ConsumerCount,\n    CASE \n        WHEN si.CriticalIncidents > 0 OR si.IncidentCount > 5 THEN 'Высокий риск'\n        WHEN si.IncidentCount > 2 OR sm.MaintenanceCount > 5 THEN 'Средний риск'\n        ELSE 'Низкий риск'\n    END AS RiskLevel,\n    CASE \n        WHEN sl.TotalConsumption > s.CapacityMW * 0.8 THEN 'Высокая нагрузка'\n        WHEN sl.TotalConsumption > s.CapacityMW * 0.5 THEN 'Средняя нагрузка'\n        ELSE 'Низкая нагрузка'\n    END AS LoadLevel\nFROM Substation s\nLEFT JOIN SubstationIncidents si ON s.SubstationID = si.SubstationID\nLEFT JOIN SubstationMaintenance sm ON s.SubstationID = sm.SubstationID\nLEFT JOIN SubstationConnections sc ON s.SubstationID = sc.SubstationID\nLEFT JOIN SubstationLoad sl ON s.SubstationID = sl.SubstationID\nORDER BY \n    si.CriticalIncidents DESC,\n    si.IncidentCount DESC,\n    sl.TotalConsumption DESC,\n    sc.TotalConnectedCapacity DESC\nLIMIT 40;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "WITH SubstationIncidents AS (\n    SELECT \n        s.SubstationID,\n        s.Name AS SubstationName,\n        COUNT(i.IncidentID) AS IncidentCount,\n        SUM(CASE WHEN i.Severity = 'Критическая' THEN 1 ELSE 0 END) AS CriticalIncidents,\n        AVG(i.DurationHours) AS AvgIncidentDuration\n    FROM Substation s\n    JOIN Incident i ON s.SubstationID = i.PlantID\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY s.SubstationID, s.Name\n),\nSubstationMaintenance AS (\n    SELECT \n        s.SubstationID,\n        COUNT(m.MaintenanceID) AS MaintenanceCount,\n        SUM(m.Cost) AS TotalMaintenanceCost,\n        AVG(m.DurationHours) AS AvgMaintenanceDuration\n    FROM Substation s\n    JOIN Maintenance m ON s.SubstationID = m.PlantID\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY s.SubstationID\n),\nSubstationConnections AS (\n    SELECT \n        s.SubstationID,\n        COUNT(DISTINCT tl.LineID) AS ConnectedLinesCount,\n        SUM(tl.CapacityMW) AS TotalConnectedCapacity\n    FROM Substation s\n    JOIN TransmissionLine tl ON s.SubstationID = tl.LineID\n    GROUP BY s.SubstationID\n),\nSubstationLoad AS (\n    SELECT \n        s.SubstationID,\n        SUM(c.AverageMonthlyConsumption) AS TotalConsumption,\n        COUNT(DISTINCT c.ConsumerID) AS ConsumerCount\n    FROM Substation s\n    JOIN Consumer c ON 1=1\n    GROUP BY s.SubstationID\n)\nSELECT \n    s.SubstationID,\n    s.Name AS SubstationName,\n    s.Location,\n    s.CapacityMW,\n    si.IncidentCount,\n    si.CriticalIncidents,\n    ROUND(si.AvgIncidentDuration, 2) AS AvgIncidentDuration,\n    sm.MaintenanceCount,\n    ROUND(sm.TotalMaintenanceCost, 2) AS TotalMaintenanceCost,\n    ROUND(sm.AvgMaintenanceDuration, 2) AS AvgMaintenanceDuration,\n    sc.ConnectedLinesCount,\n    ROUND(sc.TotalConnectedCapacity, 2) AS TotalConnectedCapacity,\n    sl.TotalConsumption,\n    sl.ConsumerCount,\n    CASE \n        WHEN si.CriticalIncidents > 0 OR si.IncidentCount > 5 THEN 'Высокий риск'\n        WHEN si.IncidentCount > 2 OR sm.MaintenanceCount > 3 THEN 'Средний риск'\n        ELSE 'Низкий риск'\n    END AS RiskLevel,\n    ROUND(s.CapacityMW / NULLIF(sl.TotalConsumption, 0), 2) AS LoadEfficiency\nFROM Substation s\nLEFT JOIN SubstationIncidents si ON s.SubstationID = si.SubstationID\nLEFT JOIN SubstationMaintenance sm ON s.SubstationID = sm.SubstationID\nLEFT JOIN SubstationConnections sc ON s.SubstationID = sc.SubstationID\nLEFT JOIN SubstationLoad sl ON s.SubstationID = sl.SubstationID\nORDER BY \n    si.CriticalIncidents DESC,\n    si.IncidentCount DESC,\n    sm.MaintenanceCount DESC,\n    sl.TotalConsumption DESC\nLIMIT 40;",
            "gigachat_response": "WITH SubstationComplexity AS (\n    SELECT \n        ss.SubstationID,\n        ss.Name AS SubstationName,\n        COUNT(DISTINCT i.IncidentID) AS IncidentCount,\n        SUM(i.DurationHours) AS TotalIncidentDuration,\n        COUNT(DISTINCT m.MaintenanceID) AS MaintenanceCount,\n        SUM(m.DurationHours) AS TotalMaintenanceDuration,\n        COUNT(DISTINCT tl.LineID) AS ConnectedLinesCount,\n        COALESCE(SUM(c.AverageMonthlyConsumption), 0) AS TotalConnectedLoad\n    FROM Substation ss\n    LEFT JOIN Incident i ON ss.SubstationID = i.PlantID\n    LEFT JOIN Maintenance m ON ss.SubstationID = m.PlantID\n    LEFT JOIN TransmissionLine tl ON ss.SubstationID = tl.OwnerCompanyID\n    LEFT JOIN Consumer c ON ss.SubstationID = c.ConsumerID\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n       OR m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY ss.SubstationID, ss.Name\n),\nRiskAssessment AS (\n    SELECT \n        sc.SubstationID,\n        sc.SubstationName,\n        sc.IncidentCount,\n        sc.TotalIncidentDuration,\n        sc.MaintenanceCount,\n        sc.TotalMaintenanceDuration,\n        sc.ConnectedLinesCount,\n        sc.TotalConnectedLoad,\n        CASE \n            WHEN sc.IncidentCount > 5 THEN 'Высокий риск'\n            WHEN sc.IncidentCount > 2 THEN 'Умеренный риск'\n            ELSE 'Низкий риск'\n        END AS RiskLevel,\n        CASE \n            WHEN sc.MaintenanceCount > 10 THEN 'Требует особого внимания'\n            WHEN sc.MaintenanceCount > 5 THEN 'Нормальное состояние'\n            ELSE 'Хорошее состояние'\n        END AS MaintenanceEffectiveness\n    FROM SubstationComplexity sc\n)\nSELECT *\nFROM RiskAssessment\nORDER BY IncidentCount DESC, MaintenanceCount DESC\nLIMIT 40;",
            "gigachat_response_ru": "WITH SubstationMetrics AS (\n    SELECT \n        s.SubstationID,\n        s.Name AS SubstationName,\n        COUNT(DISTINCT i.IncidentID) AS IncidentCount,\n        COALESCE(SUM(i.DurationHours), 0) AS TotalIncidentDuration,\n        COUNT(DISTINCT m.MaintenanceID) AS MaintenanceCount,\n        COALESCE(SUM(m.DurationHours), 0) AS TotalMaintenanceDuration,\n        COUNT(DISTINCT tl.LineID) AS ConnectedLinesCount,\n        COALESCE(AVG(c.AverageMonthlyConsumption), 0) AS AvgConnectedLoad\n    FROM Substation s\n    LEFT JOIN Incident i ON s.SubstationID = i.PlantID\n    LEFT JOIN Maintenance m ON s.SubstationID = m.PlantID\n    LEFT JOIN TransmissionLine tl ON s.SubstationID = tl.OwnerCompanyID\n    LEFT JOIN Consumer c ON s.SubstationID = c.ConsumerID\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n      OR m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY s.SubstationID, s.Name\n),\nRiskAssessment AS (\n    SELECT \n        sm.*,\n        CASE \n            WHEN sm.IncidentCount > 5 THEN 'Высокий риск'\n            WHEN sm.IncidentCount > 2 THEN 'Средний риск'\n            ELSE 'Низкий риск'\n        END AS RiskLevel,\n        CASE \n            WHEN sm.MaintenanceCount > 10 THEN 'Высокие затраты на обслуживание'\n            WHEN sm.MaintenanceCount > 5 THEN 'Умеренные затраты на обслуживание'\n            ELSE 'Низкие затраты на обслуживание'\n        END AS MaintenanceCostLevel\n    FROM SubstationMetrics sm\n)\nSELECT *\nFROM RiskAssessment\nORDER BY IncidentCount DESC, MaintenanceCount DESC, AvgConnectedLoad DESC\nLIMIT 40;"
        },
        {
            "question": "Найти топ-36 поставщиков энергоресурсов с наиболее диверсифицированным портфелем и высоким рейтингом за последние 2 года, которые работают с различными типами энергоисточников и имеют значительный объем поставок, показав детали их контрактов и географию поставок.",
            "sql_query": "WITH SupplierDiversity AS (\n    SELECT \n        s.SupplierID,\n        s.Name AS SupplierName,\n        s.Rating,\n        COUNT(DISTINCT es.Type) AS EnergySourceTypeCount,\n        GROUP_CONCAT(DISTINCT es.Type) AS EnergySourceTypes,\n        AVG(s.AnnualSupplyVolume) AS AvgAnnualSupply\n    FROM Supplier s\n    JOIN EnergySource es ON s.SourceID = es.SourceID\n    GROUP BY s.SupplierID, s.Name, s.Rating\n    HAVING EnergySourceTypeCount > 1\n),\nSupplierContracts AS (\n    SELECT \n        sd.SupplierID,\n        sd.SupplierName,\n        COUNT(DISTINCT ct.ContractID) AS ActiveContractsCount,\n        SUM(ct.Volume) AS TotalContractVolume,\n        ROUND(AVG(ct.PricePerUnit), 2) AS AvgContractPrice,\n        GROUP_CONCAT(DISTINCT ct.ConsumerID) AS ConsumerIDs\n    FROM SupplierDiversity sd\n    JOIN `Contract` ct ON sd.SupplierID = ct.SupplierID\n    WHERE ct.Status = 'active'\n    GROUP BY sd.SupplierID, sd.SupplierName\n)\nSELECT \n    sd.SupplierName,\n    sd.Rating,\n    sd.EnergySourceTypeCount,\n    sd.EnergySourceTypes,\n    ROUND(sd.AvgAnnualSupply, 2) AS AvgAnnualSupply,\n    sc.ActiveContractsCount,\n    ROUND(sc.TotalContractVolume, 2) AS TotalContractVolume,\n    sc.AvgContractPrice,\n    CASE \n        WHEN sd.Rating > 4.5 THEN 'Высокий рейтинг'\n        WHEN sd.Rating > 4.0 THEN 'Средний рейтинг'\n        ELSE 'Низкий рейтинг'\n    END AS RatingCategory\nFROM SupplierDiversity sd\nJOIN SupplierContracts sc ON sd.SupplierID = sc.SupplierID\nORDER BY sd.EnergySourceTypeCount DESC, sd.AvgAnnualSupply DESC\nLIMIT 36;",
            "gpt-4o_response": "WITH SupplierDiversification AS (\n    SELECT \n        s.SupplierID,\n        s.Name AS SupplierName,\n        COUNT(DISTINCT es.Type) AS EnergySourceTypesCount,\n        s.Rating,\n        s.AnnualSupplyVolume\n    FROM Supplier s\n    JOIN EnergySource es ON s.SourceID = es.SourceID\n    GROUP BY s.SupplierID, s.Name, s.Rating, s.AnnualSupplyVolume\n),\nTopSuppliers AS (\n    SELECT \n        sd.SupplierID,\n        sd.SupplierName,\n        sd.EnergySourceTypesCount,\n        sd.Rating,\n        sd.AnnualSupplyVolume\n    FROM SupplierDiversification sd\n    WHERE sd.Rating >= 4.5\n    ORDER BY sd.EnergySourceTypesCount DESC, sd.Rating DESC, sd.AnnualSupplyVolume DESC\n    LIMIT 36\n),\nSupplierContracts AS (\n    SELECT \n        c.SupplierID,\n        c.ContractID,\n        c.StartDate,\n        c.EndDate,\n        c.Terms,\n        c.PricePerUnit,\n        c.Volume,\n        c.Status,\n        c.RenewalOption,\n        co.Name AS ConsumerName,\n        co.Location AS ConsumerLocation\n    FROM `Contract` c\n    JOIN Consumer co ON c.ConsumerID = co.ConsumerID\n    WHERE c.Status = 'active' AND c.StartDate >= DATE_SUB(CURRENT_DATE, INTERVAL 2 YEAR)\n)\nSELECT \n    ts.SupplierName,\n    ts.EnergySourceTypesCount,\n    ts.Rating,\n    ts.AnnualSupplyVolume,\n    sc.ContractID,\n    sc.StartDate,\n    sc.EndDate,\n    sc.Terms,\n    sc.PricePerUnit,\n    sc.Volume,\n    sc.Status,\n    sc.RenewalOption,\n    sc.ConsumerName,\n    sc.ConsumerLocation\nFROM TopSuppliers ts\nJOIN SupplierContracts sc ON ts.SupplierID = sc.SupplierID\nORDER BY ts.EnergySourceTypesCount DESC, ts.Rating DESC, ts.AnnualSupplyVolume DESC;",
            "gpt-4o_response_ru": "WITH SupplierDiversification AS (\n    SELECT \n        s.SupplierID,\n        s.Name AS SupplierName,\n        COUNT(DISTINCT es.Type) AS EnergySourceTypesCount,\n        s.Rating,\n        s.AnnualSupplyVolume\n    FROM Supplier s\n    JOIN EnergySource es ON s.SourceID = es.SourceID\n    GROUP BY s.SupplierID, s.Name, s.Rating, s.AnnualSupplyVolume\n),\nRecentContracts AS (\n    SELECT \n        c.SupplierID,\n        COUNT(DISTINCT c.ContractID) AS ActiveContractsCount,\n        SUM(c.Volume) AS TotalContractVolume\n    FROM `Contract` c\n    WHERE c.Status = 'active' AND c.StartDate >= DATE_SUB(CURRENT_DATE, INTERVAL 2 YEAR)\n    GROUP BY c.SupplierID\n)\nSELECT \n    sd.SupplierName,\n    sd.EnergySourceTypesCount,\n    sd.Rating,\n    rc.ActiveContractsCount,\n    ROUND(rc.TotalContractVolume, 2) AS TotalContractVolume,\n    sd.AnnualSupplyVolume\nFROM SupplierDiversification sd\nJOIN RecentContracts rc ON sd.SupplierID = rc.SupplierID\nWHERE sd.EnergySourceTypesCount > 1\nORDER BY sd.Rating DESC, sd.AnnualSupplyVolume DESC\nLIMIT 36;",
            "google/gemini-2.0-flash-001_response": "WITH SupplierDiversity AS (\n    SELECT\n        s.SupplierID,\n        s.Name AS SupplierName,\n        s.Country AS SupplierCountry,\n        s.Rating AS SupplierRating,\n        COUNT(DISTINCT es.Type) AS EnergySourceDiversity,\n        SUM(s.AnnualSupplyVolume) AS TotalSupplyVolume\n    FROM Supplier s\n    JOIN EnergySource es ON s.SourceID = es.SourceID\n    WHERE s.EstablishedYear >= (EXTRACT(YEAR FROM CURRENT_DATE) - 2)\n    GROUP BY s.SupplierID, s.Name, s.Country, s.Rating\n    HAVING COUNT(DISTINCT es.Type) > 1\n),\nContractDetails AS (\n    SELECT\n        sd.SupplierID,\n        sd.SupplierName,\n        sd.SupplierCountry,\n        sd.SupplierRating,\n        sd.EnergySourceDiversity,\n        sd.TotalSupplyVolume,\n        c.ContractID,\n        c.ConsumerID,\n        c.StartDate,\n        c.EndDate,\n        c.PricePerUnit,\n        c.Volume AS ContractVolume,\n        c.Status AS ContractStatus\n    FROM SupplierDiversity sd\n    JOIN `Contract` c ON sd.SupplierID = c.SupplierID\n    WHERE c.StartDate >= DATE_SUB(CURRENT_DATE, INTERVAL 2 YEAR)\n),\nConsumerGeography AS (\n    SELECT\n        cd.SupplierID,\n        cd.SupplierName,\n        cd.SupplierCountry,\n        cd.SupplierRating,\n        cd.EnergySourceDiversity,\n        cd.TotalSupplyVolume,\n        cd.ContractID,\n        cd.ConsumerID,\n        cd.StartDate,\n        cd.EndDate,\n        cd.PricePerUnit,\n        cd.ContractVolume,\n        cd.ContractStatus,\n        co.Location AS ConsumerLocation\n    FROM ContractDetails cd\n    JOIN Consumer co ON cd.ConsumerID = co.ConsumerID\n)\nSELECT\n    cg.SupplierName,\n    cg.SupplierCountry,\n    cg.SupplierRating,\n    cg.EnergySourceDiversity,\n    ROUND(cg.TotalSupplyVolume, 2) AS TotalSupplyVolume,\n    cg.ContractID,\n    cg.ConsumerLocation,\n    cg.StartDate,\n    cg.EndDate,\n    ROUND(cg.PricePerUnit, 2) AS PricePerUnit,\n    ROUND(cg.ContractVolume, 2) AS ContractVolume,\n    cg.ContractStatus\nFROM ConsumerGeography cg\nORDER BY cg.SupplierRating DESC, cg.EnergySourceDiversity DESC, cg.TotalSupplyVolume DESC\nLIMIT 36;",
            "google/gemini-2.0-flash-001_response_ru": "WITH SupplierDiversity AS (\n    SELECT\n        s.SupplierID,\n        s.Name AS SupplierName,\n        s.Rating,\n        COUNT(DISTINCT es.Type) AS EnergySourceDiversity,\n        SUM(c.Volume) AS TotalSupplyVolume,\n        GROUP_CONCAT(DISTINCT es.Type) AS EnergySourceTypes,\n        GROUP_CONCAT(DISTINCT s.Country) AS SupplyCountries\n    FROM Supplier s\n    JOIN EnergySource es ON s.SourceID = es.SourceID\n    JOIN `Contract` c ON s.SupplierID = c.SupplierID\n    WHERE c.StartDate >= DATE_SUB(CURRENT_DATE, INTERVAL 2 YEAR)\n    GROUP BY s.SupplierID, s.Name, s.Rating\n    HAVING COUNT(DISTINCT es.Type) > 1\n),\nContractDetails AS (\n    SELECT\n        c.SupplierID,\n        COUNT(DISTINCT c.ContractID) AS NumberOfContracts,\n        AVG(c.PricePerUnit) AS AveragePricePerUnit,\n        SUM(c.Volume) AS TotalContractVolume\n    FROM `Contract` c\n    WHERE c.StartDate >= DATE_SUB(CURRENT_DATE, INTERVAL 2 YEAR)\n    GROUP BY c.SupplierID\n)\nSELECT\n    sd.SupplierName,\n    sd.Rating,\n    sd.EnergySourceDiversity,\n    sd.TotalSupplyVolume,\n    cd.NumberOfContracts,\n    cd.AveragePricePerUnit,\n    cd.TotalContractVolume,\n    sd.EnergySourceTypes,\n    sd.SupplyCountries\nFROM SupplierDiversity sd\nJOIN ContractDetails cd ON sd.SupplierID = cd.SupplierID\nORDER BY sd.EnergySourceDiversity DESC, sd.Rating DESC, sd.TotalSupplyVolume DESC\nLIMIT 36;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH DiversifiedSuppliers AS (\n    SELECT \n        s.SupplierID,\n        s.Name AS SupplierName,\n        s.Rating,\n        es.Name AS EnergySourceName,\n        es.Type AS EnergySourceType,\n        AVG(s.AnnualSupplyVolume) AS AvgAnnualSupply,\n        COUNT(DISTINCT c.ContractID) AS ActiveContractsCount,\n        SUM(c.Volume) AS TotalContractVolume,\n        COUNT(DISTINCT es.SourceID) AS DiversificationLevel\n    FROM Supplier s\n    JOIN EnergySource es ON s.SourceID = es.SourceID\n    JOIN `Contract` c ON s.SupplierID = c.SupplierID\n    WHERE c.Status = 'active' AND c.StartDate >= DATE_SUB(CURRENT_DATE, INTERVAL 2 YEAR)\n    GROUP BY s.SupplierID, s.Name, s.Rating, es.Name, es.Type\n),\nRankedSuppliers AS (\n    SELECT \n        ds.SupplierName,\n        ds.EnergySourceName,\n        ds.EnergySourceType,\n        ds.Rating,\n        ds.AvgAnnualSupply,\n        ds.ActiveContractsCount,\n        ds.TotalContractVolume,\n        ds.DiversificationLevel,\n        ROW_NUMBER() OVER (ORDER BY ds.Rating DESC, ds.DiversificationLevel DESC, ds.AvgAnnualSupply DESC) AS SupplierRank\n    FROM DiversifiedSuppliers ds\n)\nSELECT \n    rs.SupplierName,\n    rs.EnergySourceName,\n    rs.EnergySourceType,\n    rs.Rating,\n    ROUND(rs.AvgAnnualSupply, 2) AS AvgAnnualSupply,\n    rs.ActiveContractsCount,\n    ROUND(rs.TotalContractVolume, 2) AS TotalContractVolume,\n    rs.DiversificationLevel,\n    c.ConsumerName,\n    c.Location AS ConsumerLocation,\n    c.AverageMonthlyConsumption,\n    c.Type AS ConsumerType\nFROM RankedSuppliers rs\nJOIN `Contract` c ON rs.SupplierName IN (SELECT Name FROM Supplier WHERE SupplierID = c.SupplierID)\nJOIN Consumer con ON c.ConsumerID = con.ConsumerID\nWHERE rs.SupplierRank <= 36\nORDER BY rs.Rating DESC, rs.DiversificationLevel DESC, rs.AvgAnnualSupply DESC;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH DiversifiedSuppliers AS (\n    SELECT \n        s.SupplierID,\n        s.Name AS SupplierName,\n        s.Rating,\n        es.Name AS EnergySourceName,\n        es.Type AS EnergySourceType,\n        AVG(s.AnnualSupplyVolume) AS AvgAnnualSupply,\n        COUNT(DISTINCT c.ContractID) AS ContractsCount,\n        COUNT(DISTINCT es.SourceID) AS DiversificationLevel,\n        SUM(c.Volume) AS TotalContractVolume\n    FROM Supplier s\n    JOIN EnergySource es ON s.SourceID = es.SourceID\n    JOIN `Contract` c ON s.SupplierID = c.SupplierID\n    WHERE c.StartDate >= DATE_SUB(CURRENT_DATE, INTERVAL 2 YEAR)\n    GROUP BY s.SupplierID, s.Name, s.Rating, es.Name, es.Type\n),\nContractDetails AS (\n    SELECT \n        c.ContractID,\n        c.ConsumerID,\n        c.SupplierID,\n        c.StartDate,\n        c.EndDate,\n        c.Terms,\n        c.PricePerUnit,\n        c.Volume,\n        c.Status,\n        c.RenewalOption\n    FROM `Contract` c\n    WHERE c.StartDate >= DATE_SUB(CURRENT_DATE, INTERVAL 2 YEAR)\n),\nGeography AS (\n    SELECT \n        c.ConsumerID,\n        con.Location AS ConsumerLocation,\n        s.Country AS SupplierCountry\n    FROM `Contract` c\n    JOIN Consumer con ON c.ConsumerID = con.ConsumerID\n    JOIN Supplier s ON c.SupplierID = s.SupplierID\n)\nSELECT \n    ds.SupplierName,\n    ds.EnergySourceName,\n    ds.EnergySourceType,\n    ROUND(ds.AvgAnnualSupply, 2) AS AvgAnnualSupply,\n    ds.ContractsCount,\n    ds.DiversificationLevel,\n    ROUND(ds.TotalContractVolume, 2) AS TotalContractVolume,\n    cd.StartDate,\n    cd.EndDate,\n    cd.Terms,\n    ROUND(cd.PricePerUnit, 2) AS PricePerUnit,\n    ROUND(cd.Volume, 2) AS ContractVolume,\n    cd.Status,\n    cd.RenewalOption,\n    g.ConsumerLocation,\n    g.SupplierCountry,\n    ds.Rating\nFROM DiversifiedSuppliers ds\nJOIN ContractDetails cd ON ds.SupplierID = cd.SupplierID\nJOIN Geography g ON cd.ConsumerID = g.ConsumerID\nORDER BY ds.DiversificationLevel DESC, ds.Rating DESC\nLIMIT 36;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH DiverseSuppliers AS (\n    SELECT \n        s.SupplierID,\n        s.Name AS SupplierName,\n        s.Country,\n        s.Rating,\n        COUNT(DISTINCT es.Type) AS SourceTypeCount,\n        SUM(COALESCE(c.Volume, 0)) AS TotalContractVolume,\n        COUNT(DISTINCT c.ConsumerID) AS ConsumerCount,\n        GROUP_CONCAT(DISTINCT es.Type) AS EnergySourceTypes\n    FROM Supplier s\n    JOIN EnergySource es ON s.SourceID = es.SourceID\n    LEFT JOIN `Contract` c ON s.SupplierID = c.SupplierID\n    WHERE c.StartDate >= DATE_SUB(CURRENT_DATE, INTERVAL 2 YEAR)\n    GROUP BY s.SupplierID, s.Name, s.Country, s.Rating\n    HAVING COUNT(DISTINCT es.Type) > 1 AND s.Rating >= 4.5\n)\nSELECT \n    ds.SupplierName,\n    ds.Country,\n    ds.Rating,\n    ds.SourceTypeCount,\n    ds.EnergySourceTypes AS PortfolioDiversity,\n    COUNT(DISTINCT c.ConsumerID) AS ActiveContracts,\n    SUM(c.Volume) AS TotalVolume,\n    GROUP_CONCAT(DISTINCT cn.Name) AS ConsumerCompanies,\n    GROUP_CONCAT(DISTINCT cn.Location) AS ConsumerLocations,\n    AVG(c.PricePerUnit) AS AvgPrice,\n    MIN(c.StartDate) AS EarliestContract,\n    MAX(c.EndDate) AS LatestContract,\n    SUM(CASE WHEN c.RenewalOption = TRUE THEN 1 ELSE 0 END) AS RenewableContracts\nFROM DiverseSuppliers ds\nJOIN `Contract` c ON ds.SupplierID = c.SupplierID\nJOIN Consumer cn ON c.ConsumerID = cn.ConsumerID\nWHERE c.Status = 'active'\nGROUP BY ds.SupplierName, ds.Country, ds.Rating, ds.SourceTypeCount, ds.EnergySourceTypes\nORDER BY ds.Rating DESC, ds.SourceTypeCount DESC, TotalVolume DESC\nLIMIT 36;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "WITH SupplierDiversity AS (\n    SELECT \n        s.SupplierID,\n        s.Name AS SupplierName,\n        s.Country,\n        s.Rating,\n        COUNT(DISTINCT es.Type) AS SourceTypesCount,\n        SUM(c.Volume) AS TotalContractVolume,\n        COUNT(DISTINCT c.ConsumerID) AS ConsumersCount,\n        GROUP_CONCAT(DISTINCT es.Type) AS EnergySourceTypes\n    FROM Supplier s\n    JOIN EnergySource es ON s.SourceID = es.SourceID\n    JOIN `Contract` c ON s.SupplierID = c.SupplierID\n    WHERE c.StartDate >= DATE_SUB(CURRENT_DATE, INTERVAL 2 YEAR)\n    GROUP BY s.SupplierID, s.Name, s.Country, s.Rating\n    HAVING COUNT(DISTINCT es.Type) > 1\n)\nSELECT \n    sd.SupplierName,\n    sd.Country,\n    sd.Rating,\n    sd.SourceTypesCount,\n    sd.EnergySourceTypes,\n    ROUND(sd.TotalContractVolume, 2) AS TotalContractVolume,\n    sd.ConsumersCount,\n    c.ContractID,\n    c.StartDate,\n    c.EndDate,\n    c.PricePerUnit,\n    c.Volume AS ContractVolume,\n    c.Status AS ContractStatus,\n    cons.Name AS ConsumerName,\n    cons.Type AS ConsumerType,\n    cons.Location AS ConsumerLocation\nFROM SupplierDiversity sd\nJOIN `Contract` c ON sd.SupplierID = c.SupplierID\nJOIN Consumer cons ON c.ConsumerID = cons.ConsumerID\nWHERE c.StartDate >= DATE_SUB(CURRENT_DATE, INTERVAL 2 YEAR)\nORDER BY sd.SourceTypesCount DESC, sd.Rating DESC, sd.TotalContractVolume DESC\nLIMIT 36;",
            "gigachat_response": "WITH DiversifiedSuppliers AS (\n    SELECT \n        s.SupplierID,\n        s.Name AS SupplierName,\n        COUNT(DISTINCT es.Type) AS DistinctEnergyTypes,\n        AVG(s.Rating) AS AverageRating,\n        SUM(s.AnnualSupplyVolume) AS TotalSupplyVolume\n    FROM Supplier s\n    JOIN EnergySource es ON s.SourceID = es.SourceID\n    WHERE s.EstablishedYear <= YEAR(NOW()) - 2 -- Suppliers established at least 2 years ago\n    GROUP BY s.SupplierID, s.Name\n    HAVING COUNT(DISTINCT es.Type) > 1 -- At least two different types of energy sources\n), \nTopDiversifiedSuppliers AS (\n    SELECT *\n    FROM DiversifiedSuppliers\n    ORDER BY DistinctEnergyTypes DESC, AverageRating DESC, TotalSupplyVolume DESC\n    LIMIT 36\n), \nSupplierDetails AS (\n    SELECT \n        tds.SupplierID,\n        tds.SupplierName,\n        es.Name AS EnergySourceName,\n        es.Type AS EnergySourceType,\n        es.CountryOfOrigin,\n        s.ContactName,\n        s.ContactPhone,\n        s.ContactEmail,\n        s.ProductRange,\n        s.AnnualSupplyVolume,\n        s.Rating\n    FROM TopDiversifiedSuppliers tds\n    JOIN Supplier s ON tds.SupplierID = s.SupplierID\n    JOIN EnergySource es ON s.SourceID = es.SourceID\n), \nSupplierContracts AS (\n    SELECT \n        sd.SupplierID,\n        sd.SupplierName,\n        c.ContractID,\n        c.StartDate,\n        c.EndDate,\n        c.Terms,\n        c.PricePerUnit,\n        c.Volume,\n        c.Status,\n        c.ConsumerID\n    FROM SupplierDetails sd\n    LEFT JOIN `Contract` c ON sd.SupplierID = c.SupplierID\n    WHERE c.Status = 'active'\n), \nGeographicCoverage AS (\n    SELECT \n        sc.SupplierID,\n        sc.SupplierName,\n        c.ConsumerID,\n        con.Location AS ConsumerLocation\n    FROM SupplierContracts sc\n    JOIN Consumer con ON sc.ConsumerID = con.ConsumerID\n)\nSELECT \n    sd.SupplierID,\n    sd.SupplierName,\n    sd.EnergySourceName,\n    sd.EnergySourceType,\n    sd.CountryOfOrigin,\n    sd.ContactName,\n    sd.ContactPhone,\n    sd.ContactEmail,\n    sd.ProductRange,\n    sd.AnnualSupplyVolume,\n    sd.Rating,\n    sc.ContractID,\n    sc.StartDate,\n    sc.EndDate,\n    sc.Terms,\n    sc.PricePerUnit,\n    sc.Volume,\n    sc.Status,\n    gc.ConsumerLocation\nFROM SupplierDetails sd\nLEFT JOIN SupplierContracts sc ON sd.SupplierID = sc.SupplierID\nLEFT JOIN GeographicCoverage gc ON sd.SupplierID = gc.SupplierID\nORDER BY sd.DistinctEnergyTypes DESC, sd.AverageRating DESC, sd.TotalSupplyVolume DESC;",
            "gigachat_response_ru": "WITH DiversifiedSuppliers AS (\n    SELECT \n        s.SupplierID,\n        s.Name AS SupplierName,\n        COUNT(DISTINCT es.Type) AS DistinctEnergyTypes,\n        AVG(s.Rating) AS AverageRating,\n        SUM(s.AnnualSupplyVolume) AS TotalSupplyVolume\n    FROM Supplier s\n    JOIN EnergySource es ON s.SourceID = es.SourceID\n    WHERE s.EstablishedYear <= YEAR(NOW()) - 2 -- Поставщики работающие минимум два последних года\n    GROUP BY s.SupplierID, s.Name\n    HAVING COUNT(DISTINCT es.Type) > 1 -- Только поставщики с разными источниками энергии\n       AND AVG(s.Rating) >= 4.5 -- Высокий рейтинг поставщика\n       AND SUM(s.AnnualSupplyVolume) > 1000000 -- Значительный объём поставок\n), \nTopDiversifiedSuppliers AS (\n    SELECT *\n    FROM DiversifiedSuppliers\n    ORDER BY DistinctEnergyTypes DESC, AverageRating DESC, TotalSupplyVolume DESC\n    LIMIT 36\n), \nSupplierDetails AS (\n    SELECT \n        tds.SupplierID,\n        tds.SupplierName,\n        es.Type AS EnergySourceType,\n        es.Description AS EnergySourceDescription,\n        s.Country AS SupplyCountry,\n        s.ContactName AS ContactPerson,\n        s.ContactPhone AS PhoneNumber,\n        s.ContactEmail AS EmailAddress,\n        s.ProductRange AS ProductsOffered,\n        s.AnnualSupplyVolume AS YearlySupplyVolume,\n        s.Rating AS SupplierRating\n    FROM TopDiversifiedSuppliers tds\n    JOIN Supplier s ON tds.SupplierID = s.SupplierID\n    JOIN EnergySource es ON s.SourceID = es.SourceID\n), \nSupplierContracts AS (\n    SELECT \n        sd.SupplierID,\n        sd.SupplierName,\n        c.ContractID,\n        c.StartDate,\n        c.EndDate,\n        c.Terms AS ContractTerms,\n        c.PricePerUnit AS UnitPrice,\n        c.Volume AS ContractVolume,\n        c.Status AS ContractStatus,\n        c.RenewalOption AS RenewalOption\n    FROM SupplierDetails sd\n    LEFT JOIN `Contract` c ON sd.SupplierID = c.SupplierID\n    WHERE c.Status = 'active'\n)\nSELECT \n    sd.SupplierID,\n    sd.SupplierName,\n    sd.EnergySourceType,\n    sd.EnergySourceDescription,\n    sd.SupplyCountry,\n    sd.ContactPerson,\n    sd.PhoneNumber,\n    sd.EmailAddress,\n    sd.ProductsOffered,\n    sd.YearlySupplyVolume,\n    sd.SupplierRating,\n    sc.ContractID,\n    sc.StartDate,\n    sc.EndDate,\n    sc.ContractTerms,\n    sc.UnitPrice,\n    sc.ContractVolume,\n    sc.ContractStatus,\n    sc.RenewalOption\nFROM SupplierDetails sd\nLEFT JOIN SupplierContracts sc ON sd.SupplierID = sc.SupplierID\nORDER BY sd.SupplierID, sc.ContractID;"
        },
        {
            "question": "Какие электростанции и их владельцы выбросили более 1000 тонн CO2 в 2023 году?",
            "sql_query": "SELECT pp.Name AS PlantName, oc.Name AS OwnerName, SUM(e.CO2Emissions) AS TotalCO2Emissions FROM PowerPlant pp JOIN OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID JOIN Emission e ON pp.PlantID = e.PlantID WHERE e.Date BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY pp.Name, oc.Name HAVING SUM(e.CO2Emissions) > 1000;",
            "gpt-4o_response": "SELECT \n    pp.Name AS PlantName,\n    oc.Name AS OwnerCompanyName,\n    SUM(e.CO2Emissions) AS TotalCO2Emissions\nFROM \n    PowerPlant pp\nJOIN \n    Emission e ON pp.PlantID = e.PlantID\nJOIN \n    OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\nWHERE \n    e.Date BETWEEN '2023-01-01' AND '2023-12-31'\nGROUP BY \n    pp.PlantID, pp.Name, oc.Name\nHAVING \n    SUM(e.CO2Emissions) > 1000;",
            "gpt-4o_response_ru": "SELECT \n    pp.Name AS PowerPlantName,\n    oc.Name AS OwnerCompanyName,\n    SUM(e.CO2Emissions) AS TotalCO2Emissions\nFROM \n    PowerPlant pp\nJOIN \n    Emission e ON pp.PlantID = e.PlantID\nJOIN \n    OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\nWHERE \n    e.Date BETWEEN '2023-01-01' AND '2023-12-31'\nGROUP BY \n    pp.PlantID, pp.Name, oc.Name\nHAVING \n    SUM(e.CO2Emissions) > 1000;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    pp.Name AS PlantName,\n    oc.Name AS OwnerCompanyName\nFROM\n    Emission e\nJOIN\n    PowerPlant pp ON e.PlantID = pp.PlantID\nJOIN\n    OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\nWHERE\n    e.Date BETWEEN '2023-01-01' AND '2023-12-31'\n    AND e.CO2Emissions > 1000;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    pp.Name AS PlantName,\n    oc.Name AS OwnerCompanyName,\n    SUM(e.CO2Emissions) AS TotalCO2Emissions\nFROM\n    PowerPlant pp\nJOIN\n    OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\nJOIN\n    Emission e ON pp.PlantID = e.PlantID\nWHERE\n    e.Date BETWEEN '2023-01-01' AND '2023-12-31'\nGROUP BY\n    pp.PlantID, pp.Name, oc.Name\nHAVING\n    SUM(e.CO2Emissions) > 1000\nORDER BY\n    TotalCO2Emissions DESC;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    pp.Name AS PlantName,\n    oc.Name AS OwnerName,\n    SUM(e.CO2Emissions) AS TotalCO2Emissions\nFROM PowerPlant pp\nJOIN OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\nJOIN Emission e ON pp.PlantID = e.PlantID\nWHERE YEAR(e.Date) = 2023\nGROUP BY pp.Name, oc.Name\nHAVING SUM(e.CO2Emissions) > 1000;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    pp.Name AS PlantName,\n    oc.Name AS OwnerName,\n    SUM(e.CO2Emissions) AS TotalCO2Emissions\nFROM PowerPlant pp\nJOIN OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\nJOIN Emission e ON pp.PlantID = e.PlantID\nWHERE YEAR(e.Date) = 2023 AND e.CO2Emissions > 0\nGROUP BY pp.Name, oc.Name\nHAVING SUM(e.CO2Emissions) > 1000\nORDER BY TotalCO2Emissions DESC;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    pp.Name AS PlantName,\n    oc.Name AS OwnerName,\n    e.CO2Emissions,\n    e.Date\nFROM PowerPlant pp\nJOIN OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\nJOIN Emission e ON pp.PlantID = e.PlantID\nWHERE e.CO2Emissions > 1000 \nAND YEAR(e.Date) = 2023\nORDER BY e.CO2Emissions DESC;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    pp.Name AS PlantName,\n    oc.Name AS OwnerCompanyName,\n    e.CO2Emissions\nFROM \n    PowerPlant pp\nJOIN \n    OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\nJOIN \n    Emission e ON pp.PlantID = e.PlantID\nWHERE \n    e.CO2Emissions > 1000\n    AND YEAR(e.Date) = 2023\nORDER BY \n    e.CO2Emissions DESC;",
            "gigachat_response": "SELECT \n    pp.Name AS PlantName,\n    oc.Name AS OwnerName,\n    e.CO2Emissions\nFROM \n    PowerPlant pp\nJOIN \n    OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\nJOIN \n    Emission e ON pp.PlantID = e.PlantID\nWHERE \n    e.Date >= '2023-01-01' \n    AND e.Date <= '2023-12-31' \n    AND e.CO2Emissions > 1000;",
            "gigachat_response_ru": "SELECT \n    pp.Name AS PlantName,\n    oc.Name AS OwnerName,\n    e.CO2Emissions\nFROM \n    PowerPlant pp\nJOIN \n    OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\nJOIN \n    Emission e ON pp.PlantID = e.PlantID\nWHERE \n    e.Date >= '2023-01-01' \n    AND e.Date <= '2023-12-31'\n    AND e.CO2Emissions > 1000;"
        },
        {
            "question": "Какие подстанции и их владельцы имеют максимальную мощность более 200 и находятся в эксплуатации?",
            "sql_query": "SELECT s.Name AS SubstationName, oc.Name AS OwnerName, MAX(s.CapacityMW) AS MaxCapacity FROM Substation s JOIN OwnerCompany oc ON s.OwnerCompanyID = oc.CompanyID WHERE s.Status = 'Активна' GROUP BY s.Name, oc.Name HAVING MAX(s.CapacityMW) > 200;",
            "gpt-4o_response": "SELECT \n    s.Name AS SubstationName,\n    s.Location,\n    s.CapacityMW,\n    s.Status,\n    oc.Name AS OwnerCompanyName,\n    oc.Headquarters\nFROM Substation s\nJOIN OwnerCompany oc ON s.OwnerCompanyID = oc.CompanyID\nWHERE s.CapacityMW > 200 AND s.Status = 'Активна';",
            "gpt-4o_response_ru": "SELECT \n    s.Name AS SubstationName,\n    s.Location,\n    s.CapacityMW,\n    s.Status,\n    oc.Name AS OwnerCompanyName,\n    oc.Headquarters\nFROM \n    Substation s\nJOIN \n    OwnerCompany oc ON s.OwnerCompanyID = oc.CompanyID\nWHERE \n    s.CapacityMW > 200 AND s.Status = 'Активна';",
            "google/gemini-2.0-flash-001_response": "SELECT \n    s.Name AS SubstationName,\n    oc.Name AS OwnerCompanyName,\n    s.CapacityMW\nFROM Substation s\nJOIN OwnerCompany oc ON s.OwnerCompanyID = oc.CompanyID\nWHERE s.CapacityMW > 200 AND s.Status = 'Активна';",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    s.Name AS SubstationName,\n    oc.Name AS OwnerCompanyName\nFROM\n    Substation s\nJOIN\n    OwnerCompany oc ON s.OwnerCompanyID = oc.CompanyID\nWHERE\n    s.CapacityMW > 200\n    AND s.Status = 'Активна';",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    s.Name AS SubstationName,\n    oc.Name AS OwnerName,\n    s.CapacityMW,\n    s.Status\nFROM Substation s\nJOIN OwnerCompany oc ON s.OwnerCompanyID = oc.CompanyID\nWHERE s.CapacityMW > 200 AND s.Status = 'Активна'\nORDER BY s.CapacityMW DESC;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    s.Name AS SubstationName,\n    oc.Name AS OwnerCompanyName,\n    s.CapacityMW,\n    s.Status\nFROM Substation s\nJOIN OwnerCompany oc ON s.OwnerCompanyID = oc.CompanyID\nWHERE s.CapacityMW > 200 AND s.Status = 'Активна'\nORDER BY s.CapacityMW DESC;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    s.Name AS SubstationName, \n    s.CapacityMW, \n    oc.Name AS OwnerCompanyName, \n    oc.Headquarters, \n    oc.CEO\nFROM \n    Substation s\nJOIN \n    OwnerCompany oc ON s.OwnerCompanyID = oc.CompanyID\nWHERE \n    s.CapacityMW > 200 \n    AND s.Status = 'Активна'\nORDER BY \n    s.CapacityMW DESC;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT s.Name AS SubstationName, s.CapacityMW, oc.Name AS OwnerCompanyName\nFROM Substation s\nJOIN OwnerCompany oc ON s.OwnerCompanyID = oc.CompanyID\nWHERE s.CapacityMW > 200 AND s.Status = 'Активна'\nORDER BY s.CapacityMW DESC;",
            "gigachat_response": "SELECT ss.Name AS SubstationName, oc.Name AS OwnerCompanyName\nFROM Substation ss\nJOIN OwnerCompany oc ON ss.OwnerCompanyID = oc.CompanyID\nWHERE ss.CapacityMW > 200 AND ss.Status = 'Активна';",
            "gigachat_response_ru": "SELECT ss.Name AS SubstationName, oc.Name AS OwnerCompanyName\nFROM Substation ss\nJOIN OwnerCompany oc ON ss.OwnerCompanyID = oc.CompanyID\nWHERE ss.CapacityMW > 200 AND ss.Status = 'Активна';"
        },
        {
            "question": "Какие потребители имеют более одного счетчика и общие показания счетчиков?",
            "sql_query": "SELECT c.Name AS ConsumerName, COUNT(m.MeterID) AS MeterCount, SUM(m.LastReading) AS TotalReading FROM Consumer c JOIN Meter m ON c.ConsumerID = m.ConsumerID WHERE m.Status = 'Активен' GROUP BY c.Name HAVING COUNT(m.MeterID) > 1;",
            "gpt-4o_response": "SELECT \n    c.Name AS ConsumerName,\n    c.Location AS ConsumerLocation,\n    COUNT(m.MeterID) AS MeterCount,\n    SUM(m.LastReading) AS TotalMeterReadings\nFROM \n    Consumer c\nJOIN \n    Meter m ON c.ConsumerID = m.ConsumerID\nGROUP BY \n    c.ConsumerID, c.Name, c.Location\nHAVING \n    COUNT(m.MeterID) > 1;",
            "gpt-4o_response_ru": "SELECT \n    c.Name AS ConsumerName,\n    c.ContactName,\n    c.ContactEmail,\n    COUNT(m.MeterID) AS MeterCount,\n    SUM(m.LastReading) AS TotalMeterReadings\nFROM \n    Consumer c\nJOIN \n    Meter m ON c.ConsumerID = m.ConsumerID\nGROUP BY \n    c.ConsumerID, c.Name, c.ContactName, c.ContactEmail\nHAVING \n    COUNT(m.MeterID) > 1;",
            "google/gemini-2.0-flash-001_response": "SELECT \n    c.Name AS ConsumerName,\n    COUNT(m.MeterID) AS MeterCount,\n    SUM(m.LastReading) AS TotalLastReading\nFROM Consumer c\nJOIN Meter m ON c.ConsumerID = m.ConsumerID\nGROUP BY c.ConsumerID, c.Name\nHAVING COUNT(m.MeterID) > 1;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT \n    c.Name AS ConsumerName,\n    c.Type AS ConsumerType,\n    c.Location AS ConsumerLocation,\n    COUNT(m.MeterID) AS MeterCount,\n    SUM(m.LastReading) AS TotalMeterReading\nFROM Consumer c\nJOIN Meter m ON c.ConsumerID = m.ConsumerID\nGROUP BY c.ConsumerID, c.Name, c.Type, c.Location\nHAVING COUNT(m.MeterID) > 1\nORDER BY TotalMeterReading DESC;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    c.ConsumerID,\n    c.Name AS ConsumerName,\n    c.Type AS ConsumerType,\n    c.Location AS ConsumerLocation,\n    COUNT(m.MeterID) AS MeterCount,\n    SUM(m.LastReading) AS TotalMeterReadings\nFROM Consumer c\nJOIN Meter m ON c.ConsumerID = m.ConsumerID\nGROUP BY c.ConsumerID, c.Name, c.Type, c.Location\nHAVING COUNT(m.MeterID) > 1\nORDER BY MeterCount DESC;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    c.Name AS ConsumerName,\n    COUNT(m.MeterID) AS MeterCount,\n    SUM(m.LastReading) AS TotalMeterReadings\nFROM Consumer c\nJOIN Meter m ON c.ConsumerID = m.ConsumerID\nGROUP BY c.Name\nHAVING COUNT(m.MeterID) > 1\nORDER BY MeterCount DESC;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    c.ConsumerID,\n    c.Name AS ConsumerName,\n    c.Type AS ConsumerType,\n    COUNT(m.MeterID) AS MeterCount,\n    SUM(m.LastReading) AS TotalMeterReading\nFROM \n    Consumer c\nJOIN \n    Meter m ON c.ConsumerID = m.ConsumerID\nGROUP BY \n    c.ConsumerID, c.Name, c.Type\nHAVING \n    COUNT(m.MeterID) > 1\nORDER BY \n    TotalMeterReading DESC;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    c.Name AS ConsumerName,\n    c.Type AS ConsumerType,\n    c.Location,\n    COUNT(m.MeterID) AS MeterCount,\n    SUM(m.LastReading) AS TotalReading\nFROM \n    Consumer c\nJOIN \n    Meter m ON c.ConsumerID = m.ConsumerID\nGROUP BY \n    c.ConsumerID, c.Name, c.Type, c.Location\nHAVING \n    COUNT(m.MeterID) > 1\nORDER BY \n    TotalReading DESC;",
            "gigachat_response": "SELECT \n    c.Name AS ConsumerName,\n    COUNT(m.MeterID) AS NumberOfMeters,\n    SUM(m.LastReading) AS TotalMeterReadings\nFROM \n    Consumer c\nJOIN \n    Meter m ON c.ConsumerID = m.ConsumerID\nGROUP BY \n    c.ConsumerID, c.Name\nHAVING \n    COUNT(m.MeterID) > 1;",
            "gigachat_response_ru": "SELECT \n    c.ConsumerID,\n    c.Name AS ConsumerName,\n    COUNT(m.MeterID) AS NumberOfMeters,\n    SUM(m.LastReading) AS TotalMeterReadings\nFROM \n    Consumer c\nJOIN \n    Meter m ON c.ConsumerID = m.ConsumerID\nGROUP BY \n    c.ConsumerID, c.Name\nHAVING \n    COUNT(m.MeterID) > 1;"
        },
        {
            "question": "Какие инциденты с высокой серьезностью произошли более одного раза и их средняя продолжительность?",
            "sql_query": "SELECT i.Description AS IncidentDescription, COUNT(i.IncidentID) AS IncidentCount, AVG(i.DurationHours) AS AvgDuration FROM Incident i WHERE i.Severity = 'Высокая' GROUP BY i.Description HAVING COUNT(i.IncidentID) > 1;",
            "gpt-4o_response": "SELECT \n    i.Description AS IncidentDescription,\n    COUNT(i.IncidentID) AS IncidentCount,\n    AVG(i.DurationHours) AS AvgDurationHours\nFROM \n    Incident i\nWHERE \n    i.Severity = 'Высокая'\nGROUP BY \n    i.Description\nHAVING \n    COUNT(i.IncidentID) > 1;",
            "gpt-4o_response_ru": "SELECT \n    i.Description,\n    COUNT(i.IncidentID) AS IncidentCount,\n    AVG(i.DurationHours) AS AvgDuration\nFROM \n    Incident i\nWHERE \n    i.Severity = 'Высокая'\nGROUP BY \n    i.Description\nHAVING \n    COUNT(i.IncidentID) > 1;",
            "google/gemini-2.0-flash-001_response": "SELECT Description, COUNT(*) AS IncidentCount, AVG(DurationHours) AS AverageDuration\nFROM Incident\nWHERE Severity = 'Высокая'\nGROUP BY Description\nHAVING COUNT(*) > 1;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT \n    Description,\n    COUNT(*) AS IncidentCount,\n    AVG(DurationHours) AS AverageDuration\nFROM Incident\nWHERE Severity = 'Высокая'\nGROUP BY Description\nHAVING COUNT(*) > 1;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH IncidentAnalysis AS (\n    SELECT \n        i.IncidentID,\n        i.PlantID,\n        i.Date,\n        i.Description,\n        i.Severity,\n        i.Impact,\n        i.Resolution,\n        i.DurationHours,\n        i.ReportedBy,\n        i.Status\n    FROM Incident i\n    WHERE i.Severity = 'Высокая'\n),\nRepeatedIncidents AS (\n    SELECT \n        ia.PlantID,\n        COUNT(ia.IncidentID) AS RepeatedIncidentCount,\n        AVG(ia.DurationHours) AS AvgDurationHours\n    FROM IncidentAnalysis ia\n    GROUP BY ia.PlantID\n    HAVING COUNT(ia.IncidentID) > 1\n)\nSELECT \n    ri.PlantID,\n    ri.RepeatedIncidentCount,\n    ROUND(ri.AvgDurationHours, 2) AS AvgDurationHours\nFROM RepeatedIncidents ri\nORDER BY ri.RepeatedIncidentCount DESC;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    i.Description,\n    i.Severity,\n    i.Impact,\n    AVG(i.DurationHours) AS AvgDurationHours,\n    COUNT(i.IncidentID) AS IncidentCount\nFROM Incident i\nWHERE i.Severity = 'Высокая'\nGROUP BY i.Description, i.Severity, i.Impact\nHAVING COUNT(i.IncidentID) > 1",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    i.Description AS IncidentDescription,\n    COUNT(i.IncidentID) AS IncidentCount,\n    AVG(i.DurationHours) AS AvgDurationHours,\n    p.Name AS PlantName,\n    p.Type AS PlantType\nFROM Incident i\nJOIN PowerPlant p ON i.PlantID = p.PlantID\nWHERE i.Severity = 'Высокая'\nGROUP BY i.Description, p.Name, p.Type\nHAVING COUNT(i.IncidentID) > 1\nORDER BY AvgDurationHours DESC;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    i.Description AS IncidentDescription,\n    COUNT(i.IncidentID) AS IncidentCount,\n    AVG(i.DurationHours) AS AvgDurationHours\nFROM \n    Incident i\nWHERE \n    i.Severity = 'Высокая'\nGROUP BY \n    i.Description\nHAVING \n    COUNT(i.IncidentID) > 1\nORDER BY \n    IncidentCount DESC;",
            "gigachat_response": "SELECT \n    i.Description AS IncidentDescription,\n    AVG(i.DurationHours) AS AverageDuration\nFROM Incident i\nWHERE i.Severity = 'Высокая'\nGROUP BY i.Description\nHAVING COUNT(*) > 1;",
            "gigachat_response_ru": "SELECT \n    i.Description AS IncidentDescription,\n    AVG(i.DurationHours) AS AverageDuration\nFROM Incident i\nWHERE i.Severity = 'Высокая'\nGROUP BY i.Description\nHAVING COUNT(*) > 1;"
        },
        {
            "question": "Какие электростанции и их владельцы имеют более двух несоответствующих выбросов?",
            "sql_query": "SELECT pp.Name AS PlantName, oc.Name AS OwnerName, COUNT(e.EmissionID) AS EmissionCount FROM PowerPlant pp JOIN OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID JOIN Emission e ON pp.PlantID = e.PlantID WHERE e.ComplianceStatus = 'Не соответствует' GROUP BY pp.Name, oc.Name HAVING COUNT(e.EmissionID) > 2;",
            "gpt-4o_response": "SELECT \n    pp.Name AS PlantName,\n    oc.Name AS OwnerCompanyName,\n    COUNT(e.EmissionID) AS NonCompliantEmissionsCount\nFROM \n    PowerPlant pp\nJOIN \n    Emission e ON pp.PlantID = e.PlantID\nJOIN \n    OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\nWHERE \n    e.ComplianceStatus = 'Не соответствует'\nGROUP BY \n    pp.PlantID, pp.Name, oc.Name\nHAVING \n    COUNT(e.EmissionID) > 2;",
            "gpt-4o_response_ru": "SELECT \n    pp.Name AS PlantName,\n    oc.Name AS OwnerCompanyName,\n    COUNT(e.EmissionID) AS NonCompliantEmissionsCount\nFROM \n    PowerPlant pp\nJOIN \n    Emission e ON pp.PlantID = e.PlantID\nJOIN \n    OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\nWHERE \n    e.ComplianceStatus = 'Не соответствует'\nGROUP BY \n    pp.PlantID, pp.Name, oc.Name\nHAVING \n    COUNT(e.EmissionID) > 2;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    pp.Name AS PlantName,\n    oc.Name AS OwnerCompanyName\nFROM\n    PowerPlant pp\nJOIN\n    OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\nWHERE pp.PlantID IN (SELECT PlantID FROM Emission GROUP BY PlantID HAVING COUNT(CASE WHEN ComplianceStatus != 'Соответствует' THEN 1 END) > 2);",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    pp.Name AS PlantName,\n    oc.Name AS OwnerCompanyName,\n    COUNT(e.EmissionID) AS NumberOfNonCompliantEmissions\nFROM\n    PowerPlant pp\nJOIN\n    OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\nJOIN\n    Emission e ON pp.PlantID = e.PlantID\nWHERE\n    e.ComplianceStatus = 'Не соответствует'\nGROUP BY\n    pp.PlantID, pp.Name, oc.Name\nHAVING\n    COUNT(e.EmissionID) > 2;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH NonCompliantEmissions AS (\n    SELECT \n        e.PlantID,\n        COUNT(e.EmissionID) AS NonCompliantCount\n    FROM Emission e\n    WHERE e.ComplianceStatus = 'Не соответствует'\n    GROUP BY e.PlantID\n    HAVING COUNT(e.EmissionID) > 2\n),\nPlantInfo AS (\n    SELECT \n        p.PlantID,\n        p.Name AS PlantName,\n        oc.Name AS OwnerName\n    FROM PowerPlant p\n    JOIN OwnerCompany oc ON p.OwnerCompanyID = oc.CompanyID\n)\nSELECT \n    pi.PlantName,\n    pi.OwnerName,\n    nce.NonCompliantCount\nFROM PlantInfo pi\nJOIN NonCompliantEmissions nce ON pi.PlantID = nce.PlantID\nORDER BY nce.NonCompliantCount DESC;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    pp.Name AS PlantName,\n    oc.Name AS OwnerName,\n    COUNT(e.EmissionID) AS TotalEmissionsCount,\n    SUM(e.CO2Emissions) AS TotalCO2Emissions,\n    SUM(e.SO2Emissions) AS TotalSO2Emissions,\n    SUM(e.NOxEmissions) AS TotalNOxEmissions,\n    SUM(e.ParticulateMatter) AS TotalParticulateMatter\nFROM PowerPlant pp\nJOIN OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\nJOIN Emission e ON pp.PlantID = e.PlantID\nWHERE e.ComplianceStatus = 'Не соответствует'\nGROUP BY pp.Name, oc.Name\nHAVING COUNT(e.EmissionID) > 2\nORDER BY TotalEmissionsCount DESC;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    pp.Name AS PlantName,\n    oc.Name AS OwnerName,\n    COUNT(e.EmissionID) AS NonCompliantEmissionsCount\nFROM PowerPlant pp\nJOIN OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\nJOIN Emission e ON pp.PlantID = e.PlantID\nWHERE e.ComplianceStatus = 'Не соответствует'\nGROUP BY pp.Name, oc.Name\nHAVING COUNT(e.EmissionID) > 2\nORDER BY NonCompliantEmissionsCount DESC;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    pp.Name AS PowerPlantName,\n    oc.Name AS OwnerCompanyName,\n    COUNT(*) AS NonCompliantEmissionCount\nFROM \n    PowerPlant pp\nJOIN \n    Emission e ON pp.PlantID = e.PlantID\nJOIN \n    OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\nWHERE \n    e.ComplianceStatus = 'Не соответствует'\nGROUP BY \n    pp.Name, oc.Name\nHAVING \n    COUNT(*) > 2\nORDER BY \n    NonCompliantEmissionCount DESC;",
            "gigachat_response": "SELECT \n    pp.Name AS PlantName,\n    oc.Name AS OwnerName,\n    COUNT(*) AS NonComplianceCount\nFROM \n    PowerPlant pp\nJOIN \n    OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\nJOIN \n    Emission em ON pp.PlantID = em.PlantID\nWHERE \n    em.ComplianceStatus != 'Соответствует'\nGROUP BY \n    pp.Name, oc.Name\nHAVING \n    COUNT(*) > 2;",
            "gigachat_response_ru": "SELECT \n    pp.Name AS PlantName,\n    oc.Name AS OwnerName,\n    COUNT(*) AS NonComplianceCount\nFROM \n    PowerPlant pp\nJOIN \n    OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\nJOIN \n    Emission em ON pp.PlantID = em.PlantID\nWHERE \n    em.ComplianceStatus <> 'Соответствует'\nGROUP BY \n    pp.Name, oc.Name\nHAVING \n    COUNT(*) > 2;"
        },
        {
            "question": "Какие топ-3 электростанции имеют наибольшую мощность и их текущий статус, отсортированные по убыванию мощности?",
            "sql_query": "SELECT pp.Name AS PlantName, pp.CapacityMW, pp.Status FROM PowerPlant pp ORDER BY pp.CapacityMW DESC LIMIT 3;",
            "gpt-4o_response": "SELECT \n    pp.Name AS PlantName,\n    pp.CapacityMW,\n    pp.Status\nFROM PowerPlant pp\nORDER BY pp.CapacityMW DESC\nLIMIT 3;",
            "gpt-4o_response_ru": "SELECT \n    pp.Name AS PlantName,\n    pp.CapacityMW,\n    pp.Status\nFROM PowerPlant pp\nORDER BY pp.CapacityMW DESC\nLIMIT 3;",
            "google/gemini-2.0-flash-001_response": "SELECT Name, CapacityMW, Status\nFROM PowerPlant\nORDER BY CapacityMW DESC\nLIMIT 3;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT Name, CapacityMW, Status\nFROM PowerPlant\nORDER BY CapacityMW DESC\nLIMIT 3;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    pp.Name AS PlantName,\n    pp.CapacityMW,\n    pp.Status\nFROM PowerPlant pp\nORDER BY pp.CapacityMW DESC\nLIMIT 3;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    pp.Name AS PlantName,\n    pp.CapacityMW,\n    pp.Status\nFROM PowerPlant pp\nORDER BY pp.CapacityMW DESC\nLIMIT 3;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    pp.Name AS PlantName, \n    pp.CapacityMW, \n    pp.Status \nFROM \n    PowerPlant pp \nORDER BY \n    pp.CapacityMW DESC \nLIMIT 3;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT pp.Name, pp.CapacityMW, pp.Status\nFROM PowerPlant pp\nORDER BY pp.CapacityMW DESC\nLIMIT 3;",
            "gigachat_response": "SELECT \n    Name AS PlantName, \n    CapacityMW, \n    Status \nFROM PowerPlant \nORDER BY CapacityMW DESC \nLIMIT 3;",
            "gigachat_response_ru": "SELECT \n    Name AS PlantName,\n    CapacityMW,\n    Status\nFROM PowerPlant\nORDER BY CapacityMW DESC\nLIMIT 3;"
        },
        {
            "question": "Какие топ-4 поставщики имеют рейтинг выше среднего и их годовой объем поставок?",
            "sql_query": "SELECT s.Name AS SupplierName, s.AnnualSupplyVolume, s.Rating FROM Supplier s WHERE s.Rating > (SELECT AVG(Rating) FROM Supplier) ORDER BY s.Rating DESC LIMIT 4;",
            "gpt-4o_response": "WITH AverageRating AS (\n    SELECT AVG(Rating) AS AvgRating\n    FROM Supplier\n),\nTopSuppliers AS (\n    SELECT \n        s.SupplierID,\n        s.Name AS SupplierName,\n        s.Rating,\n        s.AnnualSupplyVolume\n    FROM Supplier s\n    WHERE s.Rating > (SELECT AvgRating FROM AverageRating)\n)\nSELECT \n    ts.SupplierName,\n    ts.Rating,\n    ROUND(ts.AnnualSupplyVolume, 2) AS AnnualSupplyVolume\nFROM TopSuppliers ts\nORDER BY ts.Rating DESC, ts.AnnualSupplyVolume DESC\nLIMIT 4;",
            "gpt-4o_response_ru": "SELECT \n    s.Name AS SupplierName,\n    s.AnnualSupplyVolume,\n    s.Rating\nFROM Supplier s\nWHERE s.Rating > (SELECT AVG(Rating) FROM Supplier)\nORDER BY s.Rating DESC\nLIMIT 4;",
            "google/gemini-2.0-flash-001_response": "SELECT \n    s.Name AS SupplierName,\n    s.Rating,\n    s.AnnualSupplyVolume\nFROM Supplier s\nWHERE s.Rating > (SELECT AVG(Rating) FROM Supplier)\nORDER BY s.Rating DESC\nLIMIT 4;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT \n    s.Name AS SupplierName,\n    s.Rating,\n    s.AnnualSupplyVolume\nFROM Supplier s\nWHERE s.Rating > (SELECT AVG(Rating) FROM Supplier)\nORDER BY s.Rating DESC\nLIMIT 4;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    s.Name AS SupplierName,\n    s.Rating,\n    s.AnnualSupplyVolume,\n    es.Name AS EnergySourceName,\n    es.Type AS EnergySourceType\nFROM Supplier s\nJOIN EnergySource es ON s.SourceID = es.SourceID\nWHERE s.Rating > (SELECT AVG(Rating) FROM Supplier)\nORDER BY s.Rating DESC, s.AnnualSupplyVolume DESC\nLIMIT 4;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    s.Name AS SupplierName,\n    s.AnnualSupplyVolume AS AnnualSupply,\n    s.Rating AS SupplierRating\nFROM \n    Supplier s\nWHERE \n    s.Rating > (SELECT AVG(Rating) FROM Supplier)\nORDER BY \n    s.Rating DESC, s.AnnualSupplyVolume DESC\nLIMIT 4;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    s.Name AS SupplierName,\n    s.Rating,\n    s.AnnualSupplyVolume\nFROM Supplier s\nWHERE s.Rating > (SELECT AVG(Rating) FROM Supplier)\nORDER BY s.AnnualSupplyVolume DESC, s.Rating DESC\nLIMIT 4;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    s.Name AS SupplierName,\n    s.Rating,\n    s.AnnualSupplyVolume,\n    es.Name AS EnergySourceName\nFROM Supplier s\nJOIN EnergySource es ON s.SourceID = es.SourceID\nWHERE s.Rating > (SELECT AVG(Rating) FROM Supplier)\nORDER BY s.Rating DESC, s.AnnualSupplyVolume DESC\nLIMIT 4;",
            "gigachat_response": "SELECT \n    s.Name AS SupplierName,\n    s.AnnualSupplyVolume\nFROM Supplier s\nWHERE s.Rating > (SELECT AVG(Rating) FROM Supplier)\nORDER BY s.Rating DESC\nLIMIT 4;",
            "gigachat_response_ru": "SELECT \n    s.Name AS SupplierName,\n    s.AnnualSupplyVolume\nFROM Supplier s\nWHERE s.Rating > (SELECT AVG(Rating) FROM Supplier)\nORDER BY s.Rating DESC\nLIMIT 4;"
        },
        {
            "question": "Какие топ-3 тарифы имеют наибольшую разницу между пиковыми и непиковыми часами и их текущий статус?",
            "sql_query": "SELECT t.Name AS TariffName, t.PeakHours, t.OffPeakHours, t.Status FROM Tariff t WHERE t.Status = 'Активный' ORDER BY t.PricePerUnit DESC LIMIT 3;",
            "gpt-4o_response": "SELECT \n    t.TariffID,\n    t.Name AS TariffName,\n    t.Status,\n    ABS(TIME_TO_SEC(STR_TO_DATE(SUBSTRING_INDEX(t.PeakHours, '-', -1), '%H:%i')) - TIME_TO_SEC(STR_TO_DATE(SUBSTRING_INDEX(t.PeakHours, '-', 1), '%H:%i'))) / 3600 AS PeakDurationHours,\n    ABS(TIME_TO_SEC(STR_TO_DATE(SUBSTRING_INDEX(t.OffPeakHours, '-', -1), '%H:%i')) - TIME_TO_SEC(STR_TO_DATE(SUBSTRING_INDEX(t.OffPeakHours, '-', 1), '%H:%i'))) / 3600 AS OffPeakDurationHours,\n    ABS(ABS(TIME_TO_SEC(STR_TO_DATE(SUBSTRING_INDEX(t.PeakHours, '-', -1), '%H:%i')) - TIME_TO_SEC(STR_TO_DATE(SUBSTRING_INDEX(t.PeakHours, '-', 1), '%H:%i'))) - ABS(TIME_TO_SEC(STR_TO_DATE(SUBSTRING_INDEX(t.OffPeakHours, '-', -1), '%H:%i')) - TIME_TO_SEC(STR_TO_DATE(SUBSTRING_INDEX(t.OffPeakHours, '-', 1), '%H:%i')))) / 3600 AS DurationDifference\nFROM Tariff t\nORDER BY DurationDifference DESC\nLIMIT 3;",
            "gpt-4o_response_ru": "SELECT \n    t.Name AS TariffName,\n    t.Status,\n    TIME_TO_SEC(TIMEDIFF(STR_TO_DATE(SUBSTRING_INDEX(t.PeakHours, '-', -1), '%H:%i'), STR_TO_DATE(SUBSTRING_INDEX(t.PeakHours, '-', 1), '%H:%i'))) / 3600 AS PeakHoursDuration,\n    TIME_TO_SEC(TIMEDIFF(STR_TO_DATE(SUBSTRING_INDEX(t.OffPeakHours, '-', -1), '%H:%i'), STR_TO_DATE(SUBSTRING_INDEX(t.OffPeakHours, '-', 1), '%H:%i'))) / 3600 AS OffPeakHoursDuration,\n    ABS(TIME_TO_SEC(TIMEDIFF(STR_TO_DATE(SUBSTRING_INDEX(t.PeakHours, '-', -1), '%H:%i'), STR_TO_DATE(SUBSTRING_INDEX(t.PeakHours, '-', 1), '%H:%i'))) / 3600 - \n        TIME_TO_SEC(TIMEDIFF(STR_TO_DATE(SUBSTRING_INDEX(t.OffPeakHours, '-', -1), '%H:%i'), STR_TO_DATE(SUBSTRING_INDEX(t.OffPeakHours, '-', 1), '%H:%i'))) / 3600) AS HoursDifference\nFROM Tariff t\nORDER BY HoursDifference DESC\nLIMIT 3;",
            "google/gemini-2.0-flash-001_response": "SELECT \n    Name,\n    (CASE\n        WHEN PeakHours IS NULL OR OffPeakHours IS NULL THEN 0\n        ELSE PricePerUnit\n    END) AS PriceDifference,\n    Status\nFROM Tariff\nORDER BY PriceDifference DESC\nLIMIT 3;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    TariffID,\n    Name,\n    (LENGTH(PeakHours) - LENGTH(REPLACE(PeakHours, '-', ''))) + (LENGTH(OffPeakHours) - LENGTH(REPLACE(OffPeakHours, '-', ''))) AS TimeDifference,\n    Status\nFROM\n    Tariff\nORDER BY\n    TimeDifference DESC\nLIMIT 3;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    t.Name AS TariffName,\n    t.PricePerUnit AS PeakHourPrice,\n    t.PricePerUnit * 0.8 AS OffPeakHourPrice,\n    ROUND(t.PricePerUnit - (t.PricePerUnit * 0.8), 2) AS PriceDifference,\n    t.Status AS CurrentStatus\nFROM Tariff t\nORDER BY PriceDifference DESC\nLIMIT 3;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    t.Name AS TariffName,\n    t.PricePerUnit AS PeakHourPrice,\n    t.PricePerUnit * 0.8 AS OffPeakHourPrice,\n    ROUND(t.PricePerUnit - t.PricePerUnit * 0.8, 2) AS PriceDifference,\n    t.Status AS CurrentStatus\nFROM Tariff t\nORDER BY PriceDifference DESC\nLIMIT 3;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    t.Name AS TariffName,\n    t.PricePerUnit AS PeakPrice,\n    t.PricePerUnit * 0.7 AS OffPeakPriceEstimate,\n    t.PricePerUnit - (t.PricePerUnit * 0.7) AS PriceDifference,\n    t.Status\nFROM Tariff t\nORDER BY PriceDifference DESC\nLIMIT 3;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    t.Name AS TariffName,\n    t.PricePerUnit AS TariffPrice,\n    (t.PricePerUnit - (SELECT PricePerUnit FROM Tariff WHERE ConsumerType = t.ConsumerType ORDER BY PricePerUnit LIMIT 1)) AS PriceDifference,\n    t.Status AS CurrentStatus\nFROM Tariff t\nORDER BY PriceDifference DESC\nLIMIT 3;",
            "gigachat_response": "SELECT \n    t.TariffID,\n    t.Name AS TariffName,\n    TIME_TO_SEC(TIMEDIFF(STR_TO_TIME(t.PeakHours), STR_TO_TIME(t.OffPeakHours))) / 3600 AS HoursDifference,\n    t.Status\nFROM Tariff t\nWHERE t.Status != 'истек'\nORDER BY ABS(HoursDifference) DESC\nLIMIT 3;",
            "gigachat_response_ru": "SELECT \n    t.TariffID,\n    t.Name AS TariffName,\n    TIME_TO_SEC(TIMEDIFF(t.PeakHours, t.OffPeakHours)) / 3600 AS HoursDifference,\n    t.Status\nFROM Tariff t\nWHERE HOURSDIFFERENCE IS NOT NULL\nORDER BY ABS(HOURSDIFFERENCE) DESC\nLIMIT 3;"
        },
        {
            "question": "Какие топ-4 электростанции имеют наибольшие выбросы CO2 в текущем квартале?",
            "sql_query": "SELECT pp.Name AS PlantName, e.CO2Emissions, e.ReportingPeriod FROM PowerPlant pp JOIN Emission e ON pp.PlantID = e.PlantID WHERE e.ReportingPeriod = 'Q1 2023' ORDER BY e.CO2Emissions DESC LIMIT 4;",
            "gpt-4o_response": "SELECT \n    pp.Name AS PlantName,\n    SUM(e.CO2Emissions) AS TotalCO2Emissions\nFROM \n    PowerPlant pp\nJOIN \n    Emission e ON pp.PlantID = e.PlantID\nWHERE \n    QUARTER(e.Date) = QUARTER(CURRENT_DATE) AND YEAR(e.Date) = YEAR(CURRENT_DATE)\nGROUP BY \n    pp.PlantID, pp.Name\nORDER BY \n    TotalCO2Emissions DESC\nLIMIT 4;",
            "gpt-4o_response_ru": "SELECT \n    pp.Name AS PlantName,\n    SUM(e.CO2Emissions) AS TotalCO2Emissions\nFROM \n    PowerPlant pp\nJOIN \n    Emission e ON pp.PlantID = e.PlantID\nWHERE \n    QUARTER(e.Date) = QUARTER(CURRENT_DATE) AND YEAR(e.Date) = YEAR(CURRENT_DATE)\nGROUP BY \n    pp.PlantID, pp.Name\nORDER BY \n    TotalCO2Emissions DESC\nLIMIT 4;",
            "google/gemini-2.0-flash-001_response": "SELECT \n    pp.Name AS PlantName,\n    SUM(e.CO2Emissions) AS TotalCO2Emissions\nFROM PowerPlant pp\nJOIN Emission e ON pp.PlantID = e.PlantID\nWHERE e.Date BETWEEN DATE('now', 'start of quarter') AND DATE('now', 'localtime')\nGROUP BY pp.Name\nORDER BY TotalCO2Emissions DESC\nLIMIT 4;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    pp.Name AS PlantName,\n    SUM(e.CO2Emissions) AS TotalCO2Emissions\nFROM\n    PowerPlant pp\nJOIN\n    Emission e ON pp.PlantID = e.PlantID\nWHERE\n    e.Date >= DATE(strftime('%Y-%m-01', 'now', 'start of quarter'))\n    AND e.Date < DATE(strftime('%Y-%m-01', 'now', 'start of quarter', '+3 months'))\nGROUP BY\n    pp.Name\nORDER BY\n    TotalCO2Emissions DESC\nLIMIT 4;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH CurrentQuarterEmissions AS (\n    SELECT \n        p.PlantID,\n        p.Name AS PlantName,\n        p.Type AS PlantType,\n        AVG(e.CO2Emissions) AS AvgCO2Emissions\n    FROM PowerPlant p\n    JOIN Emission e ON p.PlantID = e.PlantID\n    WHERE QUARTER(e.Date) = QUARTER(CURRENT_DATE) AND YEAR(e.Date) = YEAR(CURRENT_DATE)\n    GROUP BY p.PlantID, p.Name, p.Type\n)\nSELECT \n    cqe.PlantName,\n    cqe.PlantType,\n    ROUND(cqe.AvgCO2Emissions, 2) AS AvgCO2Emissions\nFROM CurrentQuarterEmissions cqe\nORDER BY cqe.AvgCO2Emissions DESC\nLIMIT 4;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH CurrentQuarterEmissions AS (\n    SELECT \n        p.PlantID,\n        p.Name AS PlantName,\n        SUM(e.CO2Emissions) AS TotalCO2Emissions\n    FROM PowerPlant p\n    JOIN Emission e ON p.PlantID = e.PlantID\n    WHERE QUARTER(e.Date) = QUARTER(CURRENT_DATE) AND YEAR(e.Date) = YEAR(CURRENT_DATE)\n    GROUP BY p.PlantID, p.Name\n)\nSELECT \n    PlantName,\n    TotalCO2Emissions\nFROM CurrentQuarterEmissions\nORDER BY TotalCO2Emissions DESC\nLIMIT 4;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    pp.Name AS PlantName,\n    pp.Type AS PlantType,\n    pp.CapacityMW,\n    e.CO2Emissions,\n    e.Date,\n    oc.Name AS OwnerCompany\nFROM PowerPlant pp\nJOIN Emission e ON pp.PlantID = e.PlantID\nJOIN OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\nWHERE e.ReportingPeriod = 'Q1 2023'\nORDER BY e.CO2Emissions DESC\nLIMIT 4;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    pp.Name AS PlantName,\n    pp.Type AS PlantType,\n    oc.Name AS OwnerCompany,\n    e.CO2Emissions,\n    e.ReportingPeriod\nFROM PowerPlant pp\nJOIN Emission e ON pp.PlantID = e.PlantID\nJOIN OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\nWHERE e.ReportingPeriod = 'Q1 2023'\nORDER BY e.CO2Emissions DESC\nLIMIT 4;",
            "gigachat_response": "SELECT \n    pp.Name AS PlantName,\n    AVG(e.CO2Emissions) AS QuarterlyAverageCO2Emissions\nFROM PowerPlant pp\nJOIN Emission e ON pp.PlantID = e.PlantID\nWHERE e.ReportingPeriod LIKE CONCAT('Q', QUARTER(CURDATE()), '%')\nGROUP BY pp.PlantID, pp.Name\nORDER BY QuarterlyAverageCO2Emissions DESC\nLIMIT 4;",
            "gigachat_response_ru": "SELECT \n    pp.Name AS PlantName,\n    AVG(e.CO2Emissions) AS AvgQuarterlyCO2Emissions\nFROM PowerPlant pp\nJOIN Emission e ON pp.PlantID = e.PlantID\nWHERE e.ReportingPeriod LIKE CONCAT('Q', QUARTER(NOW()), '%')\nGROUP BY pp.PlantID, pp.Name\nORDER BY AvgQuarterlyCO2Emissions DESC\nLIMIT 4;"
        },
        {
            "question": "Какие топ-5 электростанции имеют наибольшее количество инцидентов высокой серьезности и их средняя продолжительность простоя, сгруппированные по типу электростанции?",
            "sql_query": "SELECT pp.Name AS PlantName, pp.Type, COUNT(i.IncidentID) AS IncidentCount, AVG(i.DurationHours) AS AvgDowntime FROM PowerPlant pp JOIN Incident i ON pp.PlantID = i.PlantID WHERE i.Severity = 'Высокая' GROUP BY pp.Name, pp.Type HAVING COUNT(i.IncidentID) > 1 ORDER BY IncidentCount DESC LIMIT 5;",
            "gpt-4o_response": "WITH HighSeverityIncidents AS (\n    SELECT \n        i.PlantID,\n        COUNT(i.IncidentID) AS HighSeverityIncidentCount,\n        AVG(i.DurationHours) AS AvgDowntime\n    FROM Incident i\n    WHERE i.Severity = 'Высокая'\n    GROUP BY i.PlantID\n),\nTop5Plants AS (\n    SELECT \n        hsi.PlantID,\n        pp.Name AS PlantName,\n        pp.Type AS PlantType,\n        hsi.HighSeverityIncidentCount,\n        hsi.AvgDowntime\n    FROM HighSeverityIncidents hsi\n    JOIN PowerPlant pp ON hsi.PlantID = pp.PlantID\n    ORDER BY hsi.HighSeverityIncidentCount DESC\n    LIMIT 5\n)\nSELECT \n    tp.PlantName,\n    tp.PlantType,\n    tp.HighSeverityIncidentCount,\n    ROUND(tp.AvgDowntime, 2) AS AvgDowntime\nFROM Top5Plants tp\nORDER BY tp.PlantType, tp.HighSeverityIncidentCount DESC;",
            "gpt-4o_response_ru": "SELECT \n    pp.Name AS PlantName,\n    pp.Type AS PlantType,\n    COUNT(i.IncidentID) AS HighSeverityIncidentCount,\n    AVG(i.DurationHours) AS AvgDowntimeHours\nFROM PowerPlant pp\nJOIN Incident i ON pp.PlantID = i.PlantID\nWHERE i.Severity = 'Высокая'\nGROUP BY pp.PlantID, pp.Name, pp.Type\nORDER BY HighSeverityIncidentCount DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response": "SELECT \n    pp.Name AS PlantName,\n    pp.Type AS PlantType,\n    COUNT(i.IncidentID) AS HighSeverityIncidentCount,\n    AVG(i.DurationHours) AS AverageDowntimeHours\nFROM PowerPlant pp\nJOIN Incident i ON pp.PlantID = i.PlantID\nWHERE i.Severity = 'Высокая'\nGROUP BY pp.PlantID, pp.Name, pp.Type\nORDER BY HighSeverityIncidentCount DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response_ru": "WITH PlantIncidents AS (\n    SELECT\n        p.PlantID,\n        p.Name AS PlantName,\n        p.Type AS PlantType,\n        COUNT(i.IncidentID) AS TotalHighSeverityIncidents,\n        AVG(i.DurationHours) AS AvgIncidentDuration\n    FROM PowerPlant p\n    JOIN Incident i ON p.PlantID = i.PlantID\n    WHERE i.Severity = 'Высокая'\n    GROUP BY p.PlantID, p.Name, p.Type\n)\nSELECT\n    pi.PlantName,\n    pi.PlantType,\n    pi.TotalHighSeverityIncidents,\n    ROUND(pi.AvgIncidentDuration, 2) AS AvgIncidentDuration\nFROM PlantIncidents pi\nORDER BY pi.TotalHighSeverityIncidents DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH HighSeverityIncidents AS (\n    SELECT \n        p.PlantID,\n        p.Type AS PlantType,\n        COUNT(i.IncidentID) AS HighSeverityIncidentCount,\n        AVG(i.DurationHours) AS AvgIncidentDuration\n    FROM PowerPlant p\n    JOIN Incident i ON p.PlantID = i.PlantID\n    WHERE i.Severity = 'Высокая'\n    GROUP BY p.PlantID, p.Type\n),\nPlantIncidentSummary AS (\n    SELECT \n        his.PlantType,\n        his.HighSeverityIncidentCount,\n        his.AvgIncidentDuration\n    FROM HighSeverityIncidents his\n)\nSELECT \n    pis.PlantType,\n    pis.HighSeverityIncidentCount,\n    ROUND(pis.AvgIncidentDuration, 2) AS AvgIncidentDuration\nFROM PlantIncidentSummary pis\nORDER BY pis.HighSeverityIncidentCount DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH IncidentAnalysis AS (\n    SELECT \n        p.PlantID,\n        p.Name AS PlantName,\n        p.Type AS PlantType,\n        COUNT(i.IncidentID) AS TotalIncidentsCount,\n        SUM(CASE WHEN i.Severity = 'Высокая' THEN 1 ELSE 0 END) AS HighSeverityIncidentsCount,\n        AVG(i.DurationHours) AS AvgIncidentDuration\n    FROM PowerPlant p\n    JOIN Incident i ON p.PlantID = i.PlantID\n    WHERE i.Severity = 'Высокая'\n    GROUP BY p.PlantID, p.Name, p.Type\n),\nRankedIncidents AS (\n    SELECT \n        ia.PlantName,\n        ia.PlantType,\n        ia.TotalIncidentsCount,\n        ia.HighSeverityIncidentsCount,\n        ia.AvgIncidentDuration,\n        ROW_NUMBER() OVER (ORDER BY ia.HighSeverityIncidentsCount DESC) AS RowNum\n    FROM IncidentAnalysis ia\n)\nSELECT \n    ri.PlantName,\n    ri.PlantType,\n    ri.TotalIncidentsCount,\n    ri.HighSeverityIncidentsCount,\n    ROUND(ri.AvgIncidentDuration, 2) AS AvgIncidentDuration\nFROM RankedIncidents ri\nWHERE ri.RowNum <= 5\nORDER BY ri.HighSeverityIncidentsCount DESC;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    pp.Name AS PlantName,\n    pp.Type AS PlantType,\n    COUNT(i.IncidentID) AS HighSeverityIncidentsCount,\n    ROUND(AVG(i.DurationHours), 2) AS AvgDowntimeHours\nFROM PowerPlant pp\nJOIN Incident i ON pp.PlantID = i.PlantID\nWHERE i.Severity = 'Высокая'\nGROUP BY pp.Name, pp.Type\nORDER BY HighSeverityIncidentsCount DESC, AvgDowntimeHours DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "WITH HighSeverityIncidents AS (\n    SELECT \n        i.PlantID,\n        p.Name AS PlantName,\n        p.Type AS PlantType,\n        COUNT(i.IncidentID) AS IncidentCount,\n        AVG(i.DurationHours) AS AvgDowntimeHours\n    FROM Incident i\n    JOIN PowerPlant p ON i.PlantID = p.PlantID\n    WHERE i.Severity = 'Высокая' OR i.Severity = 'Критическая'\n    GROUP BY i.PlantID, p.Name, p.Type\n)\nSELECT \n    PlantName,\n    PlantType,\n    IncidentCount,\n    ROUND(AvgDowntimeHours, 2) AS AvgDowntimeHours\nFROM HighSeverityIncidents\nORDER BY IncidentCount DESC\nLIMIT 5;",
            "gigachat_response": "SELECT \n    pp.Name AS PlantName,\n    pp.Type AS PlantType,\n    COUNT(i.IncidentID) AS HighSeverityIncidentCount,\n    AVG(i.DurationHours) AS AvgDowntimeHours\nFROM PowerPlant pp\nJOIN Incident i ON pp.PlantID = i.PlantID\nWHERE i.Severity = 'Высокая'\nGROUP BY pp.Name, pp.Type\nORDER BY HighSeverityIncidentCount DESC, AvgDowntimeHours DESC\nLIMIT 5;",
            "gigachat_response_ru": "SELECT \n    pp.Name AS PlantName,\n    pp.Type AS PlantType,\n    COUNT(i.IncidentID) AS HighSeverityIncidentCount,\n    AVG(i.DurationHours) AS AvgDowntimeHours\nFROM PowerPlant pp\nJOIN Incident i ON pp.PlantID = i.PlantID\nWHERE i.Severity = 'Высокая'\nGROUP BY pp.Name, pp.Type\nORDER BY HighSeverityIncidentCount DESC, AvgDowntimeHours DESC\nLIMIT 5;"
        },
        {
            "question": "Какие топ-5 электростанций имеют наибольшее количество несоответствующих выбросов и их текущий статус обслуживания, сгруппированные по владельцу?",
            "sql_query": "SELECT oc.Name AS OwnerName, pp.Name AS PlantName, COUNT(e.EmissionID) AS NonCompliantEmissions, m.Status AS MaintenanceStatus FROM OwnerCompany oc JOIN PowerPlant pp ON oc.CompanyID = pp.OwnerCompanyID JOIN Emission e ON pp.PlantID = e.PlantID JOIN Maintenance m ON pp.PlantID = m.PlantID WHERE e.ComplianceStatus = 'Не соответствует' GROUP BY oc.Name, pp.Name, m.Status HAVING COUNT(e.EmissionID) > 1 ORDER BY NonCompliantEmissions DESC LIMIT 5;",
            "gpt-4o_response": "WITH NonCompliantEmissions AS (\n    SELECT \n        e.PlantID,\n        COUNT(CASE WHEN e.ComplianceStatus = 'Не соответствует' THEN 1 END) AS NonCompliantCount\n    FROM Emission e\n    GROUP BY e.PlantID\n),\nTopNonCompliantPlants AS (\n    SELECT \n        nce.PlantID,\n        pp.Name AS PlantName,\n        oc.Name AS OwnerName,\n        nce.NonCompliantCount\n    FROM NonCompliantEmissions nce\n    JOIN PowerPlant pp ON nce.PlantID = pp.PlantID\n    JOIN OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\n    ORDER BY nce.NonCompliantCount DESC\n    LIMIT 5\n)\nSELECT \n    tncp.PlantName,\n    tncp.OwnerName,\n    tncp.NonCompliantCount,\n    m.Status AS MaintenanceStatus\nFROM TopNonCompliantPlants tncp\nLEFT JOIN Maintenance m ON tncp.PlantID = m.PlantID\nORDER BY tncp.NonCompliantCount DESC;",
            "gpt-4o_response_ru": "SELECT \n    pp.Name AS PlantName,\n    oc.Name AS OwnerName,\n    COUNT(CASE WHEN e.ComplianceStatus = 'Не соответствует' THEN 1 END) AS NonCompliantEmissionsCount,\n    m.Status AS MaintenanceStatus\nFROM PowerPlant pp\nJOIN OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\nJOIN Emission e ON pp.PlantID = e.PlantID\nLEFT JOIN Maintenance m ON pp.PlantID = m.PlantID\nGROUP BY pp.PlantID, pp.Name, oc.Name, m.Status\nORDER BY NonCompliantEmissionsCount DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response": "WITH PlantEmissionStatus AS (\n    SELECT \n        p.PlantID,\n        p.Name AS PlantName,\n        oc.Name AS OwnerCompanyName,\n        p.Status AS PlantStatus,\n        COUNT(CASE WHEN e.ComplianceStatus != 'Соответствует' THEN e.EmissionID END) AS NonComplianceCount\n    FROM PowerPlant p\n    JOIN OwnerCompany oc ON p.OwnerCompanyID = oc.CompanyID\n    LEFT JOIN Emission e ON p.PlantID = e.PlantID\n    GROUP BY p.PlantID, p.Name, oc.Name, p.Status\n),\nRankedPlants AS (\n    SELECT \n        PlantID,\n        PlantName,\n        OwnerCompanyName,\n        PlantStatus,\n        NonComplianceCount,\n        RANK() OVER (ORDER BY NonComplianceCount DESC) AS Rank\n    FROM PlantEmissionStatus\n)\nSELECT \n    rp.PlantName,\n    rp.OwnerCompanyName,\n    rp.NonComplianceCount,\n    rp.PlantStatus\nFROM RankedPlants rp\nWHERE rp.Rank <= 5\nORDER BY rp.NonComplianceCount DESC;",
            "google/gemini-2.0-flash-001_response_ru": "WITH PlantEmissionStatus AS (\n    SELECT\n        p.PlantID,\n        p.Name AS PlantName,\n        oc.Name AS OwnerCompanyName,\n        e.ComplianceStatus,\n        m.Status AS MaintenanceStatus,\n        ROW_NUMBER() OVER (PARTITION BY p.PlantID ORDER BY e.Date DESC) AS rn\n    FROM PowerPlant p\n    JOIN OwnerCompany oc ON p.OwnerCompanyID = oc.CompanyID\n    JOIN Emission e ON p.PlantID = e.PlantID\n    LEFT JOIN Maintenance m ON p.PlantID = m.PlantID AND m.Date = (SELECT MAX(Date) FROM Maintenance WHERE PlantID = p.PlantID)\n)\nSELECT\n    pes.PlantName,\n    pes.OwnerCompanyName,\n    COUNT(*) AS NumberOfNonCompliantEmissions,\n    pes.MaintenanceStatus\nFROM PlantEmissionStatus pes\nWHERE pes.ComplianceStatus = 'Не соответствует' AND pes.rn = 1\nGROUP BY pes.PlantName, pes.OwnerCompanyName, pes.MaintenanceStatus\nORDER BY NumberOfNonCompliantEmissions DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH NonCompliantEmissions AS (\n    SELECT \n        p.PlantID,\n        p.Name AS PlantName,\n        p.Type AS PlantType,\n        oc.Name AS OwnerName,\n        COUNT(e.EmissionID) AS NonCompliantCount\n    FROM PowerPlant p\n    JOIN OwnerCompany oc ON p.OwnerCompanyID = oc.CompanyID\n    JOIN Emission e ON p.PlantID = e.PlantID\n    WHERE e.ComplianceStatus = 'Не соответствует'\n    GROUP BY p.PlantID, p.Name, p.Type, oc.Name\n),\nMaintenanceStatus AS (\n    SELECT \n        p.PlantID,\n        p.Name AS PlantName,\n        m.Status AS MaintenanceStatus\n    FROM PowerPlant p\n    JOIN Maintenance m ON p.PlantID = m.PlantID\n    WHERE m.Date = (SELECT MAX(Date) FROM Maintenance m2 WHERE m2.PlantID = p.PlantID)\n)\nSELECT \n    nc.OwnerName,\n    nc.PlantName,\n    nc.PlantType,\n    nc.NonCompliantCount,\n    ms.MaintenanceStatus\nFROM NonCompliantEmissions nc\nJOIN MaintenanceStatus ms ON nc.PlantID = ms.PlantID\nORDER BY nc.NonCompliantCount DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH EmissionCounts AS (\n    SELECT \n        p.PlantID,\n        p.Name AS PlantName,\n        oc.Name AS OwnerName,\n        COUNT(e.EmissionID) AS EmissionCount,\n        MAX(e.ComplianceStatus) AS ComplianceStatus\n    FROM PowerPlant p\n    JOIN OwnerCompany oc ON p.OwnerCompanyID = oc.CompanyID\n    JOIN Emission e ON p.PlantID = e.PlantID\n    WHERE e.ComplianceStatus = 'Не соответствует'\n    GROUP BY p.PlantID, p.Name, oc.Name\n),\nMaintenanceStatus AS (\n    SELECT \n        p.PlantID,\n        p.Name AS PlantName,\n        m.Status AS MaintenanceStatus\n    FROM PowerPlant p\n    JOIN Maintenance m ON p.PlantID = m.PlantID\n    WHERE m.Date = (SELECT MAX(Date) FROM Maintenance)\n)\nSELECT \n    ec.PlantName,\n    ec.OwnerName,\n    ec.EmissionCount,\n    ms.MaintenanceStatus\nFROM EmissionCounts ec\nJOIN MaintenanceStatus ms ON ec.PlantID = ms.PlantID\nORDER BY ec.EmissionCount DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH NonCompliantEmissions AS (\n    SELECT \n        p.PlantID,\n        p.Name AS PlantName,\n        oc.Name AS OwnerName,\n        COUNT(e.EmissionID) AS NonCompliantCount\n    FROM PowerPlant p\n    JOIN OwnerCompany oc ON p.OwnerCompanyID = oc.CompanyID\n    JOIN Emission e ON p.PlantID = e.PlantID\n    WHERE e.ComplianceStatus = 'Не соответствует'\n    GROUP BY p.PlantID, p.Name, oc.Name\n),\nMaintenanceStatus AS (\n    SELECT \n        m.PlantID,\n        m.Status AS MaintenanceStatus,\n        m.NextScheduledDate\n    FROM Maintenance m\n    WHERE m.Status IN ('Завершено', 'В процессе', 'На рассмотрении')\n)\nSELECT \n    nce.PlantName,\n    nce.OwnerName,\n    nce.NonCompliantCount,\n    ms.MaintenanceStatus,\n    ms.NextScheduledDate,\n    p.Status AS PlantStatus\nFROM NonCompliantEmissions nce\nJOIN PowerPlant p ON nce.PlantID = p.PlantID\nLEFT JOIN MaintenanceStatus ms ON nce.PlantID = ms.PlantID\nORDER BY nce.NonCompliantCount DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    oc.Name AS OwnerName,\n    pp.Name AS PlantName,\n    COUNT(CASE WHEN e.ComplianceStatus = 'Не соответствует' THEN 1 END) AS NonCompliantEmissionsCount,\n    MAX(m.Status) AS MaintenanceStatus\nFROM PowerPlant pp\nJOIN OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\nJOIN Emission e ON pp.PlantID = e.PlantID\nLEFT JOIN Maintenance m ON pp.PlantID = m.PlantID\nGROUP BY oc.Name, pp.Name\nORDER BY NonCompliantEmissionsCount DESC\nLIMIT 5;",
            "gigachat_response": "SELECT \n    oc.Name AS OwnerCompanyName,\n    pp.Name AS PlantName,\n    COUNT(e.EmissionID) AS NonComplianceCount,\n    m.Description AS CurrentMaintenanceDescription,\n    m.Status AS CurrentMaintenanceStatus\nFROM \n    PowerPlant pp\nJOIN \n    OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\nLEFT JOIN \n    Emission e ON pp.PlantID = e.PlantID AND e.ComplianceStatus <> 'Соответствует'\nLEFT JOIN \n    Maintenance m ON pp.PlantID = m.PlantID AND m.Date = (\n        SELECT MAX(Date) \n        FROM Maintenance \n        WHERE PlantID = pp.PlantID\n    )\nWHERE \n    e.ComplianceStatus IS NOT NULL -- Ensure only plants with non-compliant emissions are considered\nGROUP BY \n    oc.Name, pp.Name, m.Description, m.Status\nORDER BY \n    NonComplianceCount DESC\nLIMIT 5;",
            "gigachat_response_ru": "SELECT \n    oc.Name AS OwnerCompanyName,\n    pp.Name AS PlantName,\n    COUNT(e.EmissionID) AS NonComplianceCount,\n    m.Description AS CurrentMaintenanceDescription,\n    m.Status AS CurrentMaintenanceStatus\nFROM \n    PowerPlant pp\nJOIN \n    OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\nLEFT JOIN \n    Emission e ON pp.PlantID = e.PlantID AND e.ComplianceStatus <> 'Соответствует'\nLEFT JOIN \n    Maintenance m ON pp.PlantID = m.PlantID AND m.Date = (\n        SELECT MAX(Date) \n        FROM Maintenance \n        WHERE PlantID = pp.PlantID\n    )\nWHERE \n    e.ComplianceStatus IS NOT NULL -- Исключаем электростанции без записей о выбросах\nGROUP BY \n    oc.Name, pp.Name, m.Description, m.Status\nORDER BY \n    NonComplianceCount DESC\nLIMIT 5;"
        },
        {
            "question": "Какие топ-4 подстанции имеют наибольшее количество подключенных линий электропередачи и их общая пропускная способность, сгруппированные по уровню напряжения?",
            "sql_query": "SELECT s.Name AS SubstationName, s.VoltageLevel, COUNT(tl.LineID) AS LineCount, SUM(tl.CapacityMW) AS TotalCapacity FROM Substation s JOIN TransmissionLine tl ON s.SubstationID = tl.OwnerCompanyID GROUP BY s.Name, s.VoltageLevel HAVING COUNT(tl.LineID) > 1 ORDER BY TotalCapacity DESC LIMIT 4;",
            "gpt-4o_response": "WITH SubstationLineConnections AS (\n    SELECT \n        s.SubstationID,\n        s.Name AS SubstationName,\n        s.CapacityMW AS SubstationCapacity,\n        s.VoltageLevel,\n        COUNT(tl.LineID) AS ConnectedLinesCount,\n        SUM(tl.CapacityMW) AS TotalLineCapacity\n    FROM Substation s\n    JOIN TransmissionLine tl ON s.SubstationID = tl.OwnerCompanyID\n    GROUP BY s.SubstationID, s.Name, s.CapacityMW, s.VoltageLevel\n)\nSELECT \n    SubstationName,\n    VoltageLevel,\n    ConnectedLinesCount,\n    ROUND(TotalLineCapacity, 2) AS TotalLineCapacity\nFROM SubstationLineConnections\nORDER BY ConnectedLinesCount DESC, TotalLineCapacity DESC\nLIMIT 4;",
            "gpt-4o_response_ru": "WITH SubstationConnections AS (\n    SELECT \n        s.SubstationID,\n        s.Name AS SubstationName,\n        s.VoltageLevel,\n        COUNT(tl.LineID) AS ConnectedLinesCount,\n        SUM(tl.CapacityMW) AS TotalCapacityMW\n    FROM Substation s\n    JOIN TransmissionLine tl ON s.SubstationID = tl.OwnerCompanyID\n    GROUP BY s.SubstationID, s.Name, s.VoltageLevel\n),\nRankedSubstations AS (\n    SELECT \n        SubstationID,\n        SubstationName,\n        VoltageLevel,\n        ConnectedLinesCount,\n        TotalCapacityMW,\n        ROW_NUMBER() OVER (PARTITION BY VoltageLevel ORDER BY ConnectedLinesCount DESC, TotalCapacityMW DESC) AS Rank\n    FROM SubstationConnections\n)\nSELECT \n    SubstationName,\n    VoltageLevel,\n    ConnectedLinesCount,\n    TotalCapacityMW\nFROM RankedSubstations\nWHERE Rank <= 4\nORDER BY VoltageLevel, ConnectedLinesCount DESC, TotalCapacityMW DESC;",
            "google/gemini-2.0-flash-001_response": "WITH SubstationConnections AS (\n    SELECT\n        s.SubstationID,\n        s.Name AS SubstationName,\n        s.VoltageLevel,\n        COUNT(tl.LineID) AS ConnectedLinesCount,\n        SUM(tl.CapacityMW) AS TotalCapacityMW\n    FROM Substation s\n    LEFT JOIN TransmissionLine tl ON s.OwnerCompanyID = tl.OwnerCompanyID\n    GROUP BY s.SubstationID, s.Name, s.VoltageLevel\n),\nRankedSubstations AS (\n    SELECT\n        SubstationID,\n        SubstationName,\n        VoltageLevel,\n        ConnectedLinesCount,\n        TotalCapacityMW,\n        RANK() OVER (ORDER BY ConnectedLinesCount DESC) AS Rank\n    FROM SubstationConnections\n)\nSELECT\n    rs.SubstationName,\n    rs.VoltageLevel,\n    rs.ConnectedLinesCount,\n    rs.TotalCapacityMW\nFROM RankedSubstations rs\nWHERE rs.Rank <= 4\nORDER BY rs.ConnectedLinesCount DESC;",
            "google/gemini-2.0-flash-001_response_ru": "WITH SubstationLines AS (\n    SELECT\n        s.SubstationID,\n        s.Name AS SubstationName,\n        s.VoltageLevel,\n        COUNT(tl.LineID) AS ConnectedLinesCount,\n        SUM(tl.CapacityMW) AS TotalCapacityMW\n    FROM Substation s\n    LEFT JOIN TransmissionLine tl ON s.OwnerCompanyID = tl.OwnerCompanyID\n    GROUP BY s.SubstationID, s.Name, s.VoltageLevel\n),\nRankedSubstations AS (\n    SELECT\n        SubstationID,\n        SubstationName,\n        VoltageLevel,\n        ConnectedLinesCount,\n        TotalCapacityMW,\n        RANK() OVER (ORDER BY ConnectedLinesCount DESC, TotalCapacityMW DESC) AS Rank\n    FROM SubstationLines\n)\nSELECT\n    rs.SubstationName,\n    rs.VoltageLevel,\n    rs.ConnectedLinesCount,\n    rs.TotalCapacityMW\nFROM RankedSubstations rs\nWHERE rs.Rank <= 4\nORDER BY rs.ConnectedLinesCount DESC, rs.TotalCapacityMW DESC;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH SubstationLines AS (\n    SELECT \n        s.SubstationID,\n        s.Name AS SubstationName,\n        s.VoltageLevel,\n        COUNT(tl.LineID) AS ConnectedLinesCount,\n        SUM(tl.CapacityMW) AS TotalCapacity\n    FROM Substation s\n    JOIN TransmissionLine tl ON s.SubstationID = tl.LineID\n    GROUP BY s.SubstationID, s.Name, s.VoltageLevel\n),\nRankedSubstations AS (\n    SELECT \n        sl.SubstationName,\n        sl.VoltageLevel,\n        sl.ConnectedLinesCount,\n        sl.TotalCapacity,\n        ROW_NUMBER() OVER (PARTITION BY sl.VoltageLevel ORDER BY sl.ConnectedLinesCount DESC) AS RowNum\n    FROM SubstationLines sl\n)\nSELECT \n    rs.SubstationName,\n    rs.VoltageLevel,\n    rs.ConnectedLinesCount,\n    rs.TotalCapacity\nFROM RankedSubstations rs\nWHERE rs.RowNum <= 4\nORDER BY rs.VoltageLevel, rs.ConnectedLinesCount DESC;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH SubstationLines AS (\n    SELECT \n        s.SubstationID,\n        s.Name AS SubstationName,\n        s.VoltageLevel,\n        COUNT(tl.LineID) AS ConnectedLinesCount,\n        SUM(tl.CapacityMW) AS TotalCapacity\n    FROM Substation s\n    JOIN TransmissionLine tl ON s.SubstationID = tl.LineID\n    GROUP BY s.SubstationID, s.Name, s.VoltageLevel\n),\nTopSubstations AS (\n    SELECT \n        SubstationID,\n        SubstationName,\n        VoltageLevel,\n        ConnectedLinesCount,\n        TotalCapacity\n    FROM SubstationLines\n    ORDER BY ConnectedLinesCount DESC\n    LIMIT 4\n)\nSELECT \n    ts.SubstationName,\n    ts.VoltageLevel,\n    ts.ConnectedLinesCount,\n    ts.TotalCapacity\nFROM TopSubstations ts\nORDER BY ts.VoltageLevel, ts.ConnectedLinesCount DESC;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH SubstationLines AS (\n    SELECT \n        s.SubstationID,\n        s.Name AS SubstationName,\n        s.VoltageLevel,\n        COUNT(t.LineID) AS LinesCount,\n        SUM(t.CapacityMW) AS TotalCapacity\n    FROM Substation s\n    JOIN TransmissionLine t ON s.Location = t.StartLocation OR s.Location = t.EndLocation\n    GROUP BY s.SubstationID, s.Name, s.VoltageLevel\n)\nSELECT \n    SubstationName,\n    VoltageLevel,\n    LinesCount AS ConnectedLinesCount,\n    TotalCapacity AS TotalTransmissionCapacity\nFROM SubstationLines\nORDER BY LinesCount DESC, TotalCapacity DESC\nLIMIT 4;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "WITH SubstationLines AS (\n    SELECT \n        s.SubstationID,\n        s.Name AS SubstationName,\n        s.VoltageLevel,\n        COUNT(tl.LineID) AS ConnectedLinesCount,\n        SUM(tl.CapacityMW) AS TotalCapacityMW\n    FROM Substation s\n    JOIN TransmissionLine tl ON (\n        tl.StartLocation LIKE CONCAT('%', s.Location, '%') OR \n        tl.EndLocation LIKE CONCAT('%', s.Location, '%')\n    )\n    GROUP BY s.SubstationID, s.Name, s.VoltageLevel\n)\nSELECT \n    VoltageLevel,\n    SubstationName,\n    ConnectedLinesCount,\n    TotalCapacityMW\nFROM (\n    SELECT \n        VoltageLevel,\n        SubstationName,\n        ConnectedLinesCount,\n        TotalCapacityMW,\n        RANK() OVER (PARTITION BY VoltageLevel ORDER BY ConnectedLinesCount DESC, TotalCapacityMW DESC) AS RankInVoltageLevel\n    FROM SubstationLines\n) AS RankedSubstations\nWHERE RankInVoltageLevel <= 4\nORDER BY VoltageLevel, RankInVoltageLevel;",
            "gigachat_response": "SELECT \n    s.Name AS SubstationName,\n    s.VoltageLevel,\n    COUNT(tl.LineID) AS NumberOfLinesConnected,\n    SUM(tl.CapacityMW) AS TotalTransmissionCapacity\nFROM Substation s\nLEFT JOIN TransmissionLine tl ON s.SubstationID = tl.OwnerCompanyID -- Assuming substation owns transmission lines\nGROUP BY s.SubstationID, s.Name, s.VoltageLevel\nORDER BY NumberOfLinesConnected DESC, TotalTransmissionCapacity DESC\nLIMIT 4;",
            "gigachat_response_ru": "SELECT \n    s.SubstationID,\n    s.Name AS SubstationName,\n    s.VoltageLevel,\n    COUNT(tl.LineID) AS NumberOfLines,\n    SUM(tl.CapacityMW) AS TotalTransmissionCapacity\nFROM \n    Substation s\nLEFT JOIN \n    TransmissionLine tl ON s.SubstationID = tl.OwnerCompanyID -- Предположительно связь между линиями и подстанциями идет через владельца линии\nGROUP BY \n    s.SubstationID, s.Name, s.VoltageLevel\nORDER BY \n    NumberOfLines DESC, TotalTransmissionCapacity DESC\nLIMIT 4;"
        },
        {
            "question": "Какие топ-5 электростанции имеют наибольшую эффективность использования топлива (отношение мощности к выбросам CO2) и их текущий статус, сгруппированные по типу электростанции?",
            "sql_query": "SELECT pp.Name AS PlantName, pp.Type, pp.Status, (pp.CapacityMW / e.CO2Emissions) AS EfficiencyRatio FROM PowerPlant pp JOIN Emission e ON pp.PlantID = e.PlantID WHERE e.ReportingPeriod = 'Q1 2023' AND e.CO2Emissions > 0 GROUP BY pp.Name, pp.Type, pp.Status, e.CO2Emissions, pp.CapacityMW ORDER BY EfficiencyRatio DESC LIMIT 5;",
            "gpt-4o_response": "WITH PlantEfficiency AS (\n    SELECT \n        pp.PlantID,\n        pp.Name AS PlantName,\n        pp.Type AS PlantType,\n        pp.Status AS PlantStatus,\n        pp.CapacityMW,\n        COALESCE(SUM(e.CO2Emissions), 0) AS TotalCO2Emissions,\n        CASE \n            WHEN COALESCE(SUM(e.CO2Emissions), 0) = 0 THEN NULL\n            ELSE pp.CapacityMW / COALESCE(SUM(e.CO2Emissions), 0)\n        END AS Efficiency\n    FROM PowerPlant pp\n    LEFT JOIN Emission e ON pp.PlantID = e.PlantID\n    GROUP BY pp.PlantID, pp.Name, pp.Type, pp.Status, pp.CapacityMW\n),\nRankedEfficiency AS (\n    SELECT \n        PlantType,\n        PlantName,\n        PlantStatus,\n        Efficiency,\n        RANK() OVER (PARTITION BY PlantType ORDER BY Efficiency DESC) AS EfficiencyRank\n    FROM PlantEfficiency\n)\nSELECT \n    PlantType,\n    PlantName,\n    PlantStatus,\n    ROUND(Efficiency, 2) AS Efficiency\nFROM RankedEfficiency\nWHERE EfficiencyRank <= 5\nORDER BY PlantType, Efficiency DESC;",
            "gpt-4o_response_ru": "WITH PlantEfficiency AS (\n    SELECT \n        pp.PlantID,\n        pp.Name AS PlantName,\n        pp.Type AS PlantType,\n        pp.Status AS PlantStatus,\n        pp.CapacityMW,\n        COALESCE(SUM(e.CO2Emissions), 0) AS TotalCO2Emissions,\n        CASE \n            WHEN COALESCE(SUM(e.CO2Emissions), 0) = 0 THEN NULL\n            ELSE pp.CapacityMW / COALESCE(SUM(e.CO2Emissions), 0)\n        END AS Efficiency\n    FROM PowerPlant pp\n    LEFT JOIN Emission e ON pp.PlantID = e.PlantID\n    GROUP BY pp.PlantID, pp.Name, pp.Type, pp.Status, pp.CapacityMW\n),\nTopEfficientPlants AS (\n    SELECT \n        PlantType,\n        PlantName,\n        PlantStatus,\n        Efficiency\n    FROM PlantEfficiency\n    WHERE Efficiency IS NOT NULL\n    ORDER BY Efficiency DESC\n    LIMIT 5\n)\nSELECT \n    PlantType,\n    PlantName,\n    PlantStatus,\n    ROUND(Efficiency, 2) AS Efficiency\nFROM TopEfficientPlants\nORDER BY PlantType, Efficiency DESC;",
            "google/gemini-2.0-flash-001_response": "WITH PlantFuelEfficiency AS (\n    SELECT\n        p.PlantID,\n        p.Name AS PlantName,\n        p.Type AS PlantType,\n        p.Status AS PlantStatus,\n        AVG(e.CO2Emissions) AS AvgCO2Emissions,\n        p.CapacityMW,\n        (p.CapacityMW / AVG(e.CO2Emissions)) AS FuelEfficiency\n    FROM PowerPlant p\n    JOIN Emission e ON p.PlantID = e.PlantID\n    GROUP BY p.PlantID, p.Name, p.Type, p.Status, p.CapacityMW\n)\nSELECT\n    PlantName,\n    PlantType,\n    PlantStatus,\n    CapacityMW,\n    ROUND(AvgCO2Emissions, 2) AS AvgCO2Emissions,\n    ROUND(FuelEfficiency, 2) AS FuelEfficiency\nFROM PlantFuelEfficiency\nORDER BY FuelEfficiency DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response_ru": "WITH PlantEfficiency AS (\n    SELECT\n        p.PlantID,\n        p.Name AS PlantName,\n        p.Type AS PlantType,\n        p.Status AS PlantStatus,\n        AVG(e.CO2Emissions) AS AvgCO2Emissions,\n        p.CapacityMW AS PlantCapacity\n    FROM PowerPlant p\n    JOIN Emission e ON p.PlantID = e.PlantID\n    GROUP BY p.PlantID, p.Name, p.Type, p.Status, p.CapacityMW\n),\nRankedPlants AS (\n    SELECT\n        PlantID,\n        PlantName,\n        PlantType,\n        PlantStatus,\n        PlantCapacity,\n        AvgCO2Emissions,\n        (PlantCapacity / AvgCO2Emissions) AS EfficiencyRatio,\n        ROW_NUMBER() OVER (PARTITION BY PlantType ORDER BY (PlantCapacity / AvgCO2Emissions) DESC) AS RankWithinType\n    FROM PlantEfficiency\n    WHERE AvgCO2Emissions > 0\n)\nSELECT\n    PlantName,\n    PlantType,\n    PlantStatus,\n    PlantCapacity,\n    AvgCO2Emissions,\n    EfficiencyRatio\nFROM RankedPlants\nWHERE RankWithinType <= 5\nORDER BY PlantType, EfficiencyRatio DESC;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH PlantEfficiency AS (\n    SELECT \n        p.PlantID,\n        p.Name AS PlantName,\n        p.Type AS PlantType,\n        p.Status AS PlantStatus,\n        e.CO2Emissions,\n        p.CapacityMW,\n        (p.CapacityMW / e.CO2Emissions) AS EfficiencyRatio\n    FROM PowerPlant p\n    JOIN Emission e ON p.PlantID = e.PlantID\n)\nSELECT \n    pe.PlantType,\n    pe.PlantName,\n    pe.PlantStatus,\n    ROUND(pe.EfficiencyRatio, 2) AS EfficiencyRatio\nFROM PlantEfficiency pe\nORDER BY pe.EfficiencyRatio DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH PlantEfficiency AS (\n    SELECT \n        p.PlantID,\n        p.Name AS PlantName,\n        p.Type AS PlantType,\n        p.CapacityMW,\n        e.CO2Emissions,\n        p.CapacityMW / e.CO2Emissions AS Efficiency,\n        p.Status\n    FROM PowerPlant p\n    JOIN Emission e ON p.PlantID = e.PlantID\n)\nSELECT \n    PlantType,\n    PlantName,\n    CapacityMW,\n    CO2Emissions,\n    Efficiency,\n    Status\nFROM (\n    SELECT \n        PlantType,\n        PlantName,\n        CapacityMW,\n        CO2Emissions,\n        Efficiency,\n        Status,\n        ROW_NUMBER() OVER (PARTITION BY PlantType ORDER BY Efficiency DESC) AS RowNum\n    FROM PlantEfficiency\n) AS RankedPlants\nWHERE RowNum <= 5\nORDER BY PlantType, Efficiency DESC;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    pp.Name AS PlantName,\n    pp.Type AS PlantType,\n    pp.Status,\n    ROUND(pp.CapacityMW / NULLIF(e.CO2Emissions, 0), 2) AS FuelEfficiency,\n    pp.CapacityMW,\n    e.CO2Emissions\nFROM PowerPlant pp\nJOIN Emission e ON pp.PlantID = e.PlantID\nWHERE e.CO2Emissions > 0\nORDER BY FuelEfficiency DESC\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    pp.Name AS PlantName,\n    pp.Type AS PlantType,\n    pp.Status,\n    ROUND(pp.CapacityMW / NULLIF(e.CO2Emissions, 0), 2) AS Efficiency,\n    pp.CapacityMW,\n    e.CO2Emissions\nFROM PowerPlant pp\nJOIN Emission e ON pp.PlantID = e.PlantID\nWHERE e.CO2Emissions > 0\nORDER BY Efficiency DESC\nLIMIT 5;",
            "gigachat_response": "SELECT \n    pp.Name AS PlantName,\n    pp.Type AS PlantType,\n    (pp.CapacityMW / COALESCE(em.CO2Emissions, 1)) AS FuelEfficiencyRatio,\n    pp.Status AS CurrentStatus\nFROM PowerPlant pp\nLEFT JOIN Emission em ON pp.PlantID = em.PlantID\nWHERE em.ReportingPeriod = 'Q1 2023'\nAND em.ComplianceStatus = 'Соответствует'\nGROUP BY pp.PlantID, pp.Name, pp.Type, pp.Status, em.CO2Emissions\nORDER BY FuelEfficiencyRatio DESC\nLIMIT 5;",
            "gigachat_response_ru": "SELECT \n    pp.Name AS PlantName,\n    pp.Type AS PlantType,\n    pp.Status AS CurrentStatus,\n    ROUND(pp.CapacityMW / COALESCE(em.CO2Emissions, 1), 2) AS FuelEfficiencyRatio\nFROM PowerPlant pp\nLEFT JOIN Emission em ON pp.PlantID = em.PlantID\nWHERE em.ReportingPeriod = 'Q1 2023'\nAND em.ComplianceStatus = 'Соответствует'\nGROUP BY pp.PlantID, pp.Name, pp.Type, pp.Status, em.CO2Emissions\nORDER BY FuelEfficiencyRatio DESC\nLIMIT 5;"
        },
        {
            "question": "Какие топ-6 электростанции имеют наибольшее количество инцидентов в течение последних 3 месяцев и их средняя стоимость обслуживания, сгруппированные по владельцу?",
            "sql_query": "SELECT oc.Name AS OwnerName, pp.Name AS PlantName, COUNT(i.IncidentID) AS RecentIncidents, AVG(m.Cost) AS AvgMaintenanceCost FROM OwnerCompany oc JOIN PowerPlant pp ON oc.CompanyID = pp.OwnerCompanyID JOIN Incident i ON pp.PlantID = i.PlantID JOIN Maintenance m ON pp.PlantID = m.PlantID WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) GROUP BY oc.Name, pp.Name HAVING COUNT(i.IncidentID) > 1 ORDER BY RecentIncidents DESC LIMIT 6;",
            "gpt-4o_response": "WITH RecentIncidents AS (\n    SELECT \n        i.PlantID,\n        COUNT(i.IncidentID) AS IncidentCount\n    FROM Incident i\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    GROUP BY i.PlantID\n),\nPlantMaintenanceCost AS (\n    SELECT \n        m.PlantID,\n        AVG(m.Cost) AS AvgMaintenanceCost\n    FROM Maintenance m\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    GROUP BY m.PlantID\n),\nTopPlants AS (\n    SELECT \n        ri.PlantID,\n        ri.IncidentCount,\n        pmc.AvgMaintenanceCost\n    FROM RecentIncidents ri\n    JOIN PlantMaintenanceCost pmc ON ri.PlantID = pmc.PlantID\n    ORDER BY ri.IncidentCount DESC\n    LIMIT 6\n)\nSELECT \n    pp.Name AS PlantName,\n    oc.Name AS OwnerName,\n    tp.IncidentCount,\n    ROUND(tp.AvgMaintenanceCost, 2) AS AvgMaintenanceCost\nFROM TopPlants tp\nJOIN PowerPlant pp ON tp.PlantID = pp.PlantID\nJOIN OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\nORDER BY tp.IncidentCount DESC, tp.AvgMaintenanceCost DESC;",
            "gpt-4o_response_ru": "WITH RecentIncidents AS (\n    SELECT \n        i.PlantID,\n        COUNT(i.IncidentID) AS IncidentCount\n    FROM Incident i\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    GROUP BY i.PlantID\n),\nPlantMaintenance AS (\n    SELECT \n        m.PlantID,\n        AVG(m.Cost) AS AvgMaintenanceCost\n    FROM Maintenance m\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY m.PlantID\n),\nTopPlants AS (\n    SELECT \n        ri.PlantID,\n        pp.Name AS PlantName,\n        oc.Name AS OwnerName,\n        ri.IncidentCount,\n        pm.AvgMaintenanceCost\n    FROM RecentIncidents ri\n    JOIN PowerPlant pp ON ri.PlantID = pp.PlantID\n    JOIN OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\n    LEFT JOIN PlantMaintenance pm ON ri.PlantID = pm.PlantID\n    ORDER BY ri.IncidentCount DESC\n    LIMIT 6\n)\nSELECT \n    tp.PlantName,\n    tp.OwnerName,\n    tp.IncidentCount,\n    ROUND(tp.AvgMaintenanceCost, 2) AS AvgMaintenanceCost\nFROM TopPlants tp\nORDER BY tp.IncidentCount DESC;",
            "google/gemini-2.0-flash-001_response": "WITH RecentIncidents AS (\n    SELECT\n        PlantID,\n        COUNT(*) AS IncidentCount\n    FROM\n        Incident\n    WHERE\n        Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    GROUP BY\n        PlantID\n),\nAvgMaintenanceCost AS (\n    SELECT\n        PlantID,\n        AVG(Cost) AS AvgMaintenanceCost\n    FROM\n        Maintenance\n    GROUP BY\n        PlantID\n)\nSELECT\n    oc.Name AS OwnerCompanyName,\n    pp.Name AS PlantName,\n    ri.IncidentCount,\n    COALESCE(amc.AvgMaintenanceCost, 0) AS AvgMaintenanceCost\nFROM\n    RecentIncidents ri\nJOIN\n    PowerPlant pp ON ri.PlantID = pp.PlantID\nJOIN\n    OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\nLEFT JOIN\n    AvgMaintenanceCost amc ON ri.PlantID = amc.PlantID\nORDER BY\n    ri.IncidentCount DESC\nLIMIT 6;",
            "google/gemini-2.0-flash-001_response_ru": "WITH PlantIncidents AS (\n    SELECT\n        PlantID,\n        COUNT(*) AS IncidentCount\n    FROM Incident\n    WHERE Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    GROUP BY PlantID\n),\nPlantMaintenanceCost AS (\n    SELECT\n        PlantID,\n        AVG(Cost) AS AvgMaintenanceCost\n    FROM Maintenance\n    WHERE Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    GROUP BY PlantID\n)\nSELECT\n    oc.Name AS OwnerCompanyName,\n    pp.Name AS PlantName,\n    pi.IncidentCount,\n    COALESCE(pmc.AvgMaintenanceCost, 0) AS AvgMaintenanceCost\nFROM PowerPlant pp\nJOIN OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\nLEFT JOIN PlantIncidents pi ON pp.PlantID = pi.PlantID\nLEFT JOIN PlantMaintenanceCost pmc ON pp.PlantID = pmc.PlantID\nORDER BY pi.IncidentCount DESC\nLIMIT 6;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH PlantIncidents AS (\n    SELECT \n        p.PlantID,\n        p.Name AS PlantName,\n        oc.Name AS OwnerName,\n        COUNT(i.IncidentID) AS TotalIncidentsCount,\n        AVG(m.Cost) AS AvgMaintenanceCost\n    FROM PowerPlant p\n    JOIN OwnerCompany oc ON p.OwnerCompanyID = oc.CompanyID\n    LEFT JOIN Incident i ON p.PlantID = i.PlantID AND i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    LEFT JOIN Maintenance m ON p.PlantID = m.PlantID AND m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    GROUP BY p.PlantID, p.Name, oc.Name\n),\nRankedPlants AS (\n    SELECT \n        PlantName,\n        OwnerName,\n        TotalIncidentsCount,\n        AvgMaintenanceCost,\n        ROW_NUMBER() OVER (ORDER BY TotalIncidentsCount DESC) AS RowNum\n    FROM PlantIncidents\n)\nSELECT \n    PlantName,\n    OwnerName,\n    TotalIncidentsCount,\n    ROUND(AvgMaintenanceCost, 2) AS AvgMaintenanceCost\nFROM RankedPlants\nWHERE RowNum <= 6\nORDER BY TotalIncidentsCount DESC;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH PlantIncidents AS (\n    SELECT \n        p.PlantID,\n        p.Name AS PlantName,\n        oc.Name AS OwnerName,\n        COUNT(i.IncidentID) AS TotalIncidentsCount,\n        AVG(m.Cost) AS AvgMaintenanceCost\n    FROM PowerPlant p\n    JOIN OwnerCompany oc ON p.OwnerCompanyID = oc.CompanyID\n    JOIN Incident i ON p.PlantID = i.PlantID\n    JOIN Maintenance m ON p.PlantID = m.PlantID\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    GROUP BY p.PlantID, p.Name, oc.Name\n),\nRankedPlants AS (\n    SELECT \n        PlantName,\n        OwnerName,\n        TotalIncidentsCount,\n        AvgMaintenanceCost,\n        ROW_NUMBER() OVER (ORDER BY TotalIncidentsCount DESC) AS RowNum\n    FROM PlantIncidents\n)\nSELECT \n    PlantName,\n    OwnerName,\n    TotalIncidentsCount,\n    ROUND(AvgMaintenanceCost, 2) AS AvgMaintenanceCost\nFROM RankedPlants\nWHERE RowNum <= 6\nORDER BY TotalIncidentsCount DESC;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH PlantIncidents AS (\n    SELECT \n        p.PlantID,\n        p.Name AS PlantName,\n        oc.Name AS OwnerName,\n        COUNT(i.IncidentID) AS IncidentCount,\n        AVG(m.Cost) AS AvgMaintenanceCost\n    FROM PowerPlant p\n    JOIN OwnerCompany oc ON p.OwnerCompanyID = oc.CompanyID\n    JOIN Incident i ON p.PlantID = i.PlantID\n    JOIN Maintenance m ON p.PlantID = m.PlantID\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    GROUP BY p.PlantID, p.Name, oc.Name\n)\nSELECT \n    PlantName,\n    OwnerName,\n    IncidentCount,\n    ROUND(AvgMaintenanceCost, 2) AS AvgMaintenanceCost\nFROM PlantIncidents\nORDER BY IncidentCount DESC\nLIMIT 6;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    oc.Name AS OwnerName,\n    pp.Name AS PlantName,\n    COUNT(i.IncidentID) AS IncidentCount,\n    ROUND(AVG(m.Cost), 2) AS AvgMaintenanceCost\nFROM PowerPlant pp\nJOIN OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\nJOIN Incident i ON pp.PlantID = i.PlantID\nJOIN Maintenance m ON pp.PlantID = m.PlantID\nWHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\nGROUP BY oc.Name, pp.Name\nORDER BY IncidentCount DESC\nLIMIT 6;",
            "gigachat_response": "SELECT \n    oc.Name AS OwnerCompanyName,\n    pp.Name AS PlantName,\n    COUNT(i.IncidentID) AS IncidentCount,\n    AVG(m.Cost) AS AverageMaintenanceCost\nFROM PowerPlant pp\nJOIN OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\nLEFT JOIN Incident i ON pp.PlantID = i.PlantID\nLEFT JOIN Maintenance m ON pp.PlantID = m.PlantID\nWHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\nGROUP BY oc.Name, pp.Name\nORDER BY IncidentCount DESC\nLIMIT 6;",
            "gigachat_response_ru": "SELECT \n    oc.Name AS OwnerCompanyName,\n    pp.Name AS PlantName,\n    COUNT(i.IncidentID) AS IncidentCount,\n    AVG(m.Cost) AS AverageMaintenanceCost\nFROM PowerPlant pp\nJOIN OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\nLEFT JOIN Incident i ON pp.PlantID = i.PlantID AND i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\nLEFT JOIN Maintenance m ON pp.PlantID = m.PlantID AND m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\nWHERE i.IncidentID IS NOT NULL\nGROUP BY oc.Name, pp.Name\nORDER BY IncidentCount DESC\nLIMIT 6;"
        },
        {
            "question": "Какие топ-7 электростанций имеют наибольшую разницу между плановым и фактическим объемом выбросов CO2 за последний квартал, сгруппированные по типу электростанции и владельцу?",
            "sql_query": "SELECT pp.Name AS PlantName, pp.Type, oc.Name AS OwnerName, (e.CO2Emissions - (pp.CapacityMW * 0.8)) AS EmissionDeviation FROM PowerPlant pp JOIN OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID JOIN Emission e ON pp.PlantID = e.PlantID WHERE e.ReportingPeriod = 'Q1 2023' AND e.ComplianceStatus = 'Соответствует' GROUP BY pp.Name, pp.Type, oc.Name, e.CO2Emissions, pp.CapacityMW ORDER BY EmissionDeviation DESC LIMIT 7;",
            "gpt-4o_response": "WITH EmissionDifference AS (\n    SELECT \n        e.PlantID,\n        p.Name AS PlantName,\n        p.Type AS PlantType,\n        oc.Name AS OwnerName,\n        MAX(e.CO2Emissions) - MIN(e.CO2Emissions) AS CO2EmissionDifference\n    FROM Emission e\n    JOIN PowerPlant p ON e.PlantID = p.PlantID\n    JOIN OwnerCompany oc ON p.OwnerCompanyID = oc.CompanyID\n    WHERE e.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    GROUP BY e.PlantID, p.Name, p.Type, oc.Name\n),\nRankedEmissions AS (\n    SELECT \n        PlantID,\n        PlantName,\n        PlantType,\n        OwnerName,\n        CO2EmissionDifference,\n        ROW_NUMBER() OVER (PARTITION BY PlantType, OwnerName ORDER BY CO2EmissionDifference DESC) AS Rank\n    FROM EmissionDifference\n)\nSELECT \n    PlantName,\n    PlantType,\n    OwnerName,\n    CO2EmissionDifference\nFROM RankedEmissions\nWHERE Rank <= 7\nORDER BY PlantType, OwnerName, CO2EmissionDifference DESC;",
            "gpt-4o_response_ru": "WITH EmissionDifference AS (\n    SELECT \n        e.PlantID,\n        p.Name AS PlantName,\n        p.Type AS PlantType,\n        oc.Name AS OwnerName,\n        ABS(SUM(e.CO2Emissions) - (SELECT AVG(e2.CO2Emissions) FROM Emission e2 WHERE e2.PlantID = e.PlantID AND e2.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH))) AS EmissionDiff\n    FROM Emission e\n    JOIN PowerPlant p ON e.PlantID = p.PlantID\n    JOIN OwnerCompany oc ON p.OwnerCompanyID = oc.CompanyID\n    WHERE e.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    GROUP BY e.PlantID, p.Name, p.Type, oc.Name\n)\nSELECT \n    ed.PlantName,\n    ed.PlantType,\n    ed.OwnerName,\n    ROUND(ed.EmissionDiff, 2) AS EmissionDifference\nFROM EmissionDifference ed\nORDER BY ed.EmissionDifference DESC\nLIMIT 7;",
            "google/gemini-2.0-flash-001_response": "WITH QuarterlyEmissions AS (\n    SELECT\n        p.PlantID,\n        p.Name AS PlantName,\n        p.Type AS PlantType,\n        oc.Name AS OwnerName,\n        AVG(e.CO2Emissions) AS AvgCO2Emissions\n    FROM PowerPlant p\n    JOIN OwnerCompany oc ON p.OwnerCompanyID = oc.CompanyID\n    JOIN Emission e ON p.PlantID = e.PlantID\n    WHERE e.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    GROUP BY p.PlantID, p.Name, p.Type, oc.Name\n),\nPlannedEmissions AS (\n    SELECT\n        p.PlantID,\n        AVG(e.CO2Emissions) AS AvgPlannedCO2Emissions\n    FROM PowerPlant p\n    JOIN Emission e ON p.PlantID = e.PlantID\n    GROUP BY p.PlantID\n)\nSELECT\n    qe.PlantName,\n    qe.PlantType,\n    qe.OwnerName,\n    ROUND(qe.AvgCO2Emissions, 2) AS ActualAvgCO2Emissions,\n    ROUND(pe.AvgPlannedCO2Emissions, 2) AS PlannedAvgCO2Emissions,\n    ROUND(ABS(qe.AvgCO2Emissions - pe.AvgPlannedCO2Emissions), 2) AS EmissionDifference\nFROM QuarterlyEmissions qe\nJOIN PlannedEmissions pe ON qe.PlantID = pe.PlantID\nORDER BY EmissionDifference DESC\nLIMIT 7;",
            "google/gemini-2.0-flash-001_response_ru": "WITH PlannedEmissions AS (\n    SELECT\n        p.PlantID,\n        p.Name AS PlantName,\n        p.Type AS PlantType,\n        oc.Name AS OwnerCompanyName,\n        AVG(e.CO2Emissions) AS AvgCO2Emissions\n    FROM PowerPlant p\n    JOIN OwnerCompany oc ON p.OwnerCompanyID = oc.CompanyID\n    JOIN Emission e ON p.PlantID = e.PlantID\n    WHERE e.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    GROUP BY p.PlantID, p.Name, p.Type, oc.Name\n),\nActualCapacity AS (\n    SELECT\n        p.PlantID,\n        p.CapacityMW AS PlantCapacity\n    FROM PowerPlant p\n),\nEmissionFactors AS (\n    SELECT\n        p.PlantID,\n        es.EmissionFactor AS EnergySourceEmissionFactor\n    FROM PowerPlant p\n    JOIN EnergySource es ON 1=1\n),\nExpectedEmissions AS (\n    SELECT\n        pe.PlantID,\n        pe.PlantName,\n        pe.PlantType,\n        pe.OwnerCompanyName,\n        pe.AvgCO2Emissions AS ActualEmissions,\n        ac.PlantCapacity,\n        ef.EnergySourceEmissionFactor,\n        (ac.PlantCapacity * ef.EnergySourceEmissionFactor) AS ExpectedEmissions\n    FROM PlannedEmissions pe\n    JOIN ActualCapacity ac ON pe.PlantID = ac.PlantID\n    JOIN EmissionFactors ef ON pe.PlantID = ef.PlantID\n),\nEmissionDifference AS (\n    SELECT\n        PlantID,\n        PlantName,\n        PlantType,\n        OwnerCompanyName,\n        (ExpectedEmissions - ActualEmissions) AS EmissionDifference\n    FROM ExpectedEmissions\n)\nSELECT\n    PlantName,\n    PlantType,\n    OwnerCompanyName,\n    EmissionDifference\nFROM EmissionDifference\nORDER BY EmissionDifference DESC\nLIMIT 7;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH PlannedEmissions AS (\n    SELECT \n        pp.PlantID,\n        pp.Type AS PlantType,\n        oc.Name AS OwnerName,\n        SUM(es.EmissionFactor * pp.CapacityMW) AS PlannedEmissions\n    FROM PowerPlant pp\n    JOIN OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\n    JOIN EnergySource es ON pp.Type = es.Type\n    GROUP BY pp.PlantID, pp.Type, oc.Name\n),\nActualEmissions AS (\n    SELECT \n        pp.PlantID,\n        pp.Type AS PlantType,\n        oc.Name AS OwnerName,\n        SUM(e.CO2Emissions) AS ActualEmissions\n    FROM PowerPlant pp\n    JOIN OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\n    JOIN Emission e ON pp.PlantID = e.PlantID\n    WHERE e.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    GROUP BY pp.PlantID, pp.Type, oc.Name\n),\nEmissionDifference AS (\n    SELECT \n        pe.PlantID,\n        pe.PlantType,\n        pe.OwnerName,\n        pe.PlannedEmissions,\n        ae.ActualEmissions,\n        ABS(pe.PlannedEmissions - ae.ActualEmissions) AS EmissionDifference\n    FROM PlannedEmissions pe\n    JOIN ActualEmissions ae ON pe.PlantID = ae.PlantID\n)\nSELECT \n    ed.PlantType,\n    ed.OwnerName,\n    pp.Name AS PlantName,\n    ed.PlannedEmissions,\n    ed.ActualEmissions,\n    ed.EmissionDifference\nFROM EmissionDifference ed\nJOIN PowerPlant pp ON ed.PlantID = pp.PlantID\nORDER BY ed.EmissionDifference DESC\nLIMIT 7;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH PlannedEmissions AS (\n    SELECT \n        pp.PlantID,\n        pp.Name AS PlantName,\n        pp.Type AS PlantType,\n        oc.Name AS OwnerName,\n        es.EmissionFactor * pp.CapacityMW AS PlannedCO2Emissions\n    FROM PowerPlant pp\n    JOIN OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\n    JOIN EnergySource es ON pp.Type = es.Type\n),\nActualEmissions AS (\n    SELECT \n        pp.PlantID,\n        AVG(e.CO2Emissions) AS ActualCO2Emissions\n    FROM PowerPlant pp\n    JOIN Emission e ON pp.PlantID = e.PlantID\n    WHERE e.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    GROUP BY pp.PlantID\n),\nEmissionDifference AS (\n    SELECT \n        pe.PlantID,\n        pe.PlantName,\n        pe.PlantType,\n        pe.OwnerName,\n        ae.ActualCO2Emissions,\n        pe.PlannedCO2Emissions,\n        ABS(pe.PlannedCO2Emissions - ae.ActualCO2Emissions) AS EmissionDiff\n    FROM PlannedEmissions pe\n    JOIN ActualEmissions ae ON pe.PlantID = ae.PlantID\n)\nSELECT \n    ed.PlantName,\n    ed.PlantType,\n    ed.OwnerName,\n    ed.ActualCO2Emissions,\n    ed.PlannedCO2Emissions,\n    ed.EmissionDiff\nFROM EmissionDifference ed\nORDER BY ed.EmissionDiff DESC\nLIMIT 7;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH PlantEmissions AS (\n    SELECT \n        p.PlantID,\n        p.Name AS PlantName,\n        p.Type AS PlantType,\n        oc.Name AS OwnerName,\n        e.CO2Emissions AS ActualCO2Emissions,\n        e.ReportingPeriod,\n        ROW_NUMBER() OVER (PARTITION BY p.PlantID ORDER BY e.Date DESC) AS rn\n    FROM PowerPlant p\n    JOIN OwnerCompany oc ON p.OwnerCompanyID = oc.CompanyID\n    JOIN Emission e ON p.PlantID = e.PlantID\n    WHERE e.ReportingPeriod LIKE '%Q1 2023%'\n),\nPlannedEmissions AS (\n    SELECT \n        p.PlantID,\n        p.PlantName,\n        p.PlantType,\n        p.OwnerName,\n        p.ActualCO2Emissions,\n        (p.ActualCO2Emissions * 0.85) AS PlannedCO2Emissions,\n        (p.ActualCO2Emissions - (p.ActualCO2Emissions * 0.85)) AS EmissionDifference\n    FROM PlantEmissions p\n    WHERE p.rn = 1\n)\nSELECT \n    PlantName,\n    PlantType,\n    OwnerName,\n    ROUND(PlannedCO2Emissions, 2) AS PlannedCO2Emissions,\n    ROUND(ActualCO2Emissions, 2) AS ActualCO2Emissions,\n    ROUND(EmissionDifference, 2) AS EmissionDifference\nFROM PlannedEmissions\nORDER BY EmissionDifference DESC\nLIMIT 7;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    pp.Name AS PlantName,\n    pp.Type AS PlantType,\n    oc.Name AS OwnerCompany,\n    e.CO2Emissions AS ActualCO2Emissions,\n    r.EmmissionStandard AS PlannedCO2Emissions,\n    ABS(e.CO2Emissions - r.EmmissionStandard) AS CO2EmissionDifference,\n    e.ReportingPeriod\nFROM PowerPlant pp\nJOIN OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\nJOIN Emission e ON pp.PlantID = e.PlantID\nJOIN Regulation r ON 1=1\nWHERE e.ReportingPeriod = 'Q1 2023'\nORDER BY CO2EmissionDifference DESC\nLIMIT 7;",
            "gigachat_response": "WITH LatestQuarterEmission AS (\n    SELECT \n        PlantID,\n        MAX(Date) AS LatestDate\n    FROM Emission\n    WHERE ReportingPeriod LIKE '%Q%'\n      AND Year(Date) = Year(CURRENT_DATE)\n    GROUP BY PlantID\n),\nLatestEmissionData AS (\n    SELECT \n        e.PlantID,\n        e.CO2Emissions AS ActualCO2Emissions,\n        ep.PlanningValue AS PlannedCO2Emissions\n    FROM Emission e\n    INNER JOIN LatestQuarterEmission leq ON e.PlantID = leq.PlantID AND e.Date = leq.LatestDate\n    LEFT JOIN (\n        SELECT \n            PlantID,\n            AVG(CO2Emissions) AS PlanningValue\n        FROM Emission\n        WHERE ReportingPeriod NOT LIKE '%Q%' -- Assuming planning values do not contain quarter indicators\n          AND Year(Date) = Year(CURRENT_DATE)\n        GROUP BY PlantID\n    ) ep ON e.PlantID = ep.PlantID\n),\nDifferenceInEmissions AS (\n    SELECT \n        led.PlantID,\n        ABS(led.ActualCO2Emissions - led.PlannedCO2Emissions) AS Difference,\n        p.Type AS PlantType,\n        oc.Name AS OwnerName\n    FROM LatestEmissionData led\n    INNER JOIN PowerPlant p ON led.PlantID = p.PlantID\n    INNER JOIN OwnerCompany oc ON p.OwnerCompanyID = oc.CompanyID\n)\nSELECT \n    d.PlantID,\n    p.Name AS PlantName,\n    d.Difference AS EmissionsDifference,\n    d.PlantType,\n    d.OwnerName\nFROM DifferenceInEmissions d\nINNER JOIN PowerPlant p ON d.PlantID = p.PlantID\nORDER BY EmissionsDifference DESC\nLIMIT 7;",
            "gigachat_response_ru": "WITH EmissionsData AS (\n    SELECT \n        ep.PlantID,\n        ep.Type AS PlantType,\n        oc.Name AS OwnerName,\n        SUM(ep.CO2Emissions) AS ActualCO2Emissions,\n        AVG(es.EmissionFactor) AS PlannedCO2Emissions\n    FROM PowerPlant ep\n    JOIN OwnerCompany oc ON ep.OwnerCompanyID = oc.CompanyID\n    JOIN EnergySource es ON ep.Type = es.Type\n    JOIN Emission em ON ep.PlantID = em.PlantID\n    WHERE em.ReportingPeriod LIKE '%Q4%'\n      AND em.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n    GROUP BY ep.PlantID, ep.Type, oc.Name\n), \nDifferenceAnalysis AS (\n    SELECT \n        ed.PlantID,\n        ed.ActualCO2Emissions,\n        ed.PlannedCO2Emissions,\n        ABS(ed.ActualCO2Emissions - ed.PlannedCO2Emissions) AS Difference,\n        ed.PlantType,\n        ed.OwnerName\n    FROM EmissionsData ed\n)\nSELECT \n    da.PlantID,\n    da.ActualCO2Emissions,\n    da.PlannedCO2Emissions,\n    da.Difference,\n    da.PlantType,\n    da.OwnerName\nFROM DifferenceAnalysis da\nORDER BY da.Difference DESC\nLIMIT 7;"
        },
        {
            "question": "Какие топ-8 поставщиков имеют наибольшую среднюю стоимость обслуживания контрактов с потребителями, у которых потребление превышает среднее по отрасли, сгруппированные по типу продукта?",
            "sql_query": "SELECT s.Name AS SupplierName, s.ProductRange, AVG(c.PricePerUnit * c.Volume) AS AvgContractValue FROM Supplier s JOIN `Contract` c ON s.SupplierID = c.SupplierID JOIN Consumer co ON c.ConsumerID = co.ConsumerID WHERE co.AverageMonthlyConsumption > (SELECT AVG(AverageMonthlyConsumption) FROM Consumer) AND c.Status = 'active' GROUP BY s.Name, s.ProductRange ORDER BY AvgContractValue DESC LIMIT 8;",
            "gpt-4o_response": "WITH ConsumerAverageConsumption AS (\n    SELECT \n        Type,\n        AVG(AverageMonthlyConsumption) AS AvgConsumption\n    FROM Consumer\n    GROUP BY Type\n),\nAboveAverageConsumers AS (\n    SELECT \n        c.ConsumerID,\n        c.Type,\n        c.AverageMonthlyConsumption\n    FROM Consumer c\n    JOIN ConsumerAverageConsumption cac ON c.Type = cac.Type\n    WHERE c.AverageMonthlyConsumption > cac.AvgConsumption\n),\nSupplierContractCost AS (\n    SELECT \n        s.SupplierID,\n        s.Name AS SupplierName,\n        s.ProductRange,\n        AVG(ct.PricePerUnit) AS AvgContractCost\n    FROM Supplier s\n    JOIN `Contract` ct ON s.SupplierID = ct.SupplierID\n    JOIN AboveAverageConsumers aac ON ct.ConsumerID = aac.ConsumerID\n    WHERE ct.Status = 'active'\n    GROUP BY s.SupplierID, s.Name, s.ProductRange\n)\nSELECT \n    SupplierName,\n    ProductRange,\n    ROUND(AvgContractCost, 2) AS AvgContractCost\nFROM SupplierContractCost\nORDER BY AvgContractCost DESC\nLIMIT 8;",
            "gpt-4o_response_ru": "WITH ConsumerAverage AS (\n    SELECT AVG(AverageMonthlyConsumption) AS IndustryAverageConsumption\n    FROM Consumer\n),\nHighConsumptionConsumers AS (\n    SELECT ConsumerID\n    FROM Consumer\n    WHERE AverageMonthlyConsumption > (SELECT IndustryAverageConsumption FROM ConsumerAverage)\n),\nSupplierContractCost AS (\n    SELECT \n        s.SupplierID,\n        s.Name AS SupplierName,\n        s.ProductRange,\n        AVG(c.PricePerUnit * c.Volume) AS AvgContractCost\n    FROM Supplier s\n    JOIN `Contract` c ON s.SupplierID = c.SupplierID\n    WHERE c.ConsumerID IN (SELECT ConsumerID FROM HighConsumptionConsumers)\n    GROUP BY s.SupplierID, s.Name, s.ProductRange\n)\nSELECT \n    SupplierName,\n    ProductRange,\n    ROUND(AvgContractCost, 2) AS AvgContractCost\nFROM SupplierContractCost\nORDER BY AvgContractCost DESC\nLIMIT 8;",
            "google/gemini-2.0-flash-001_response": "WITH AvgIndustryConsumption AS (\n    SELECT AVG(AverageMonthlyConsumption) AS AvgConsumption\n    FROM Consumer\n),\nAboveAvgConsumers AS (\n    SELECT ConsumerID\n    FROM Consumer\n    WHERE AverageMonthlyConsumption > (SELECT AvgConsumption FROM AvgIndustryConsumption)\n),\nContractCosts AS (\n    SELECT \n        c.SupplierID,\n        c.ConsumerID,\n        c.PricePerUnit * c.Volume AS ContractCost\n    FROM `Contract` c\n    WHERE c.ConsumerID IN (SELECT ConsumerID FROM AboveAvgConsumers)\n),\nSupplierAvgContractCost AS (\n    SELECT \n        s.SupplierID,\n        s.Name AS SupplierName,\n        es.Type AS ProductType,\n        AVG(cc.ContractCost) AS AvgContractCost\n    FROM Supplier s\n    JOIN ContractCosts cc ON s.SupplierID = cc.SupplierID\n    JOIN EnergySource es ON s.SourceID = es.SourceID\n    GROUP BY s.SupplierID, s.Name, es.Type\n)\nSELECT \n    sacc.SupplierName,\n    sacc.ProductType,\n    ROUND(sacc.AvgContractCost, 2) AS AverageContractCost\nFROM SupplierAvgContractCost sacc\nORDER BY sacc.AvgContractCost DESC\nLIMIT 8;",
            "google/gemini-2.0-flash-001_response_ru": "WITH IndustryAverageConsumption AS (\n    SELECT AVG(AverageMonthlyConsumption) AS AvgIndustryConsumption\n    FROM Consumer\n),\nAboveAverageConsumers AS (\n    SELECT ConsumerID\n    FROM Consumer\n    WHERE AverageMonthlyConsumption > (SELECT AvgIndustryConsumption FROM IndustryAverageConsumption)\n),\nContractCosts AS (\n    SELECT\n        c.SupplierID,\n        AVG(c.PricePerUnit * c.Volume) AS AvgContractCost\n    FROM `Contract` c\n    JOIN AboveAverageConsumers aac ON c.ConsumerID = aac.ConsumerID\n    GROUP BY c.SupplierID\n),\nSupplierProductTypes AS (\n    SELECT\n        s.SupplierID,\n        s.Name AS SupplierName,\n        s.ContactName,\n        s.ContactPhone,\n        s.ContactEmail,\n        es.Type AS ProductType\n    FROM Supplier s\n    JOIN EnergySource es ON s.SourceID = es.SourceID\n)\nSELECT\n    spt.SupplierName,\n    spt.ContactName,\n    spt.ContactPhone,\n    spt.ContactEmail,\n    spt.ProductType,\n    ROUND(cc.AvgContractCost, 2) AS AvgContractCost\nFROM SupplierProductTypes spt\nJOIN ContractCosts cc ON spt.SupplierID = cc.SupplierID\nORDER BY cc.AvgContractCost DESC\nLIMIT 8;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH AverageConsumption AS (\n    SELECT AVG(AverageMonthlyConsumption) AS AvgConsumption\n    FROM Consumer\n),\nTopSuppliers AS (\n    SELECT \n        s.SupplierID,\n        s.Name AS SupplierName,\n        es.Type AS ProductType,\n        AVG(ct.PricePerUnit) AS AvgContractPrice,\n        AVG(m.Cost) AS AvgMaintenanceCost\n    FROM Supplier s\n    JOIN EnergySource es ON s.SourceID = es.SourceID\n    JOIN `Contract` ct ON s.SupplierID = ct.SupplierID\n    JOIN Consumer c ON ct.ConsumerID = c.ConsumerID\n    LEFT JOIN Maintenance m ON ct.ContractID = m.MaintenanceID\n    WHERE c.AverageMonthlyConsumption > (SELECT AvgConsumption FROM AverageConsumption)\n    GROUP BY s.SupplierID, s.Name, es.Type\n),\nRankedSuppliers AS (\n    SELECT \n        ts.SupplierName,\n        ts.ProductType,\n        ts.AvgContractPrice,\n        ts.AvgMaintenanceCost,\n        ROW_NUMBER() OVER (ORDER BY ts.AvgMaintenanceCost DESC) AS RowNum\n    FROM TopSuppliers ts\n)\nSELECT \n    rs.SupplierName,\n    rs.ProductType,\n    ROUND(rs.AvgContractPrice, 2) AS AvgContractPrice,\n    ROUND(rs.AvgMaintenanceCost, 2) AS AvgMaintenanceCost\nFROM RankedSuppliers rs\nWHERE rs.RowNum <= 8\nORDER BY rs.AvgMaintenanceCost DESC;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH TopSuppliers AS (\n    SELECT \n        s.SupplierID,\n        s.Name AS SupplierName,\n        es.Type AS ProductType,\n        AVG(ct.PricePerUnit) AS AvgContractPrice,\n        AVG(c.AverageMonthlyConsumption) AS AvgMonthlyConsumption\n    FROM Supplier s\n    JOIN EnergySource es ON s.SourceID = es.SourceID\n    JOIN `Contract` ct ON s.SupplierID = ct.SupplierID\n    JOIN Consumer c ON ct.ConsumerID = c.ConsumerID\n    WHERE c.AverageMonthlyConsumption > (SELECT AVG(AverageMonthlyConsumption) FROM Consumer)\n    GROUP BY s.SupplierID, s.Name, es.Type\n),\nSupplierMaintenanceCost AS (\n    SELECT \n        s.SupplierID,\n        AVG(m.Cost) AS AvgMaintenanceCost\n    FROM Supplier s\n    JOIN `Contract` ct ON s.SupplierID = ct.SupplierID\n    JOIN Consumer c ON ct.ConsumerID = c.ConsumerID\n    JOIN Meter m ON c.ConsumerID = m.ConsumerID\n    GROUP BY s.SupplierID\n)\nSELECT \n    ts.SupplierName,\n    ts.ProductType,\n    ROUND(sm.AvgMaintenanceCost, 2) AS AvgMaintenanceCost,\n    ts.AvgContractPrice,\n    ts.AvgMonthlyConsumption\nFROM TopSuppliers ts\nJOIN SupplierMaintenanceCost sm ON ts.SupplierID = sm.SupplierID\nORDER BY sm.AvgMaintenanceCost DESC\nLIMIT 8;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH HighConsumptionConsumers AS (\n    SELECT \n        c.ConsumerID,\n        c.Name AS ConsumerName,\n        c.AverageMonthlyConsumption\n    FROM Consumer c\n    WHERE c.AverageMonthlyConsumption > (SELECT AVG(AverageMonthlyConsumption) FROM Consumer)\n),\nSupplierContractStats AS (\n    SELECT \n        s.SupplierID,\n        s.Name AS SupplierName,\n        es.Type AS ProductType,\n        AVG(ct.PricePerUnit * ct.Volume) AS AvgContractValue\n    FROM Supplier s\n    JOIN EnergySource es ON s.SourceID = es.SourceID\n    JOIN `Contract` ct ON s.SupplierID = ct.SupplierID\n    JOIN HighConsumptionConsumers hcc ON ct.ConsumerID = hcc.ConsumerID\n    WHERE ct.Status = 'active'\n    GROUP BY s.SupplierID, s.Name, es.Type\n)\nSELECT \n    SupplierName,\n    ProductType,\n    ROUND(AvgContractValue, 2) AS AvgContractValue\nFROM SupplierContractStats\nORDER BY AvgContractValue DESC\nLIMIT 8;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "WITH HighConsumptionConsumers AS (\n    SELECT \n        c.ConsumerID,\n        c.Name,\n        c.AverageMonthlyConsumption\n    FROM Consumer c\n    WHERE c.AverageMonthlyConsumption > (SELECT AVG(AverageMonthlyConsumption) FROM Consumer)\n),\nSupplierContractStats AS (\n    SELECT \n        s.SupplierID,\n        s.Name AS SupplierName,\n        es.Type AS ProductType,\n        AVG(ct.PricePerUnit * ct.Volume) AS AvgContractValue\n    FROM Supplier s\n    JOIN EnergySource es ON s.SourceID = es.SourceID\n    JOIN `Contract` ct ON s.SupplierID = ct.SupplierID\n    JOIN HighConsumptionConsumers hcc ON ct.ConsumerID = hcc.ConsumerID\n    WHERE ct.Status = 'active'\n    GROUP BY s.SupplierID, s.Name, es.Type\n)\nSELECT \n    SupplierName,\n    ProductType,\n    ROUND(AvgContractValue, 2) AS AvgContractValue\nFROM SupplierContractStats\nORDER BY AvgContractValue DESC\nLIMIT 8;",
            "gigachat_response": "WITH HighConsumptionConsumers AS (\n    SELECT \n        ConsumerID,\n        AverageMonthlyConsumption\n    FROM Consumer\n    WHERE AverageMonthlyConsumption > (\n        SELECT AVG(AverageMonthlyConsumption) \n        FROM Consumer\n    )\n),\nAverageServiceCost AS (\n    SELECT \n        c.SupplierID,\n        AVG(c.PricePerUnit) AS AvgServiceCost\n    FROM `Contract` c\n    INNER JOIN HighConsumptionConsumers hcc ON c.ConsumerID = hcc.ConsumerID\n    GROUP BY c.SupplierID\n),\nProductTypes AS (\n    SELECT \n        s.SupplierID,\n        es.Type AS ProductType\n    FROM Supplier s\n    LEFT JOIN EnergySource es ON s.SourceID = es.SourceID\n)\nSELECT \n    pt.ProductType,\n    s.Name AS SupplierName,\n    ASC.AvgServiceCost\nFROM AverageServiceCost ASC\nINNER JOIN Supplier s ON ASC.SupplierID = s.SupplierID\nLEFT JOIN ProductTypes pt ON s.SupplierID = pt.SupplierID\nORDER BY ASC.AvgServiceCost DESC\nLIMIT 8;",
            "gigachat_response_ru": "WITH HighConsumptionConsumers AS (\n    SELECT ConsumerID\n    FROM Consumer\n    WHERE AverageMonthlyConsumption > (\n        SELECT AVG(AverageMonthlyConsumption)\n        FROM Consumer\n    )\n),\nAverageServiceCost AS (\n    SELECT \n        c.SupplierID,\n        AVG(c.PricePerUnit) AS AvgServiceCost\n    FROM `Contract` c\n    INNER JOIN HighConsumptionConsumers hcc ON c.ConsumerID = hcc.ConsumerID\n    GROUP BY c.SupplierID\n),\nProductTypes AS (\n    SELECT \n        s.SupplierID,\n        es.Type AS ProductType\n    FROM Supplier s\n    LEFT JOIN EnergySource es ON s.SourceID = es.SourceID\n)\nSELECT \n    pt.ProductType,\n    s.Name AS SupplierName,\n    ASC.AvgServiceCost\nFROM AverageServiceCost ASC\nINNER JOIN Supplier s ON ASC.SupplierID = s.SupplierID\nLEFT JOIN ProductTypes pt ON s.SupplierID = pt.SupplierID\nORDER BY ASC.AvgServiceCost DESC\nLIMIT 8;"
        },
        {
            "question": "Какие топ-6 подстанций имеют наибольшее количество подключенных линий электропередачи с разными уровнями напряжения, сгруппированные по региону и владельцу?",
            "sql_query": "SELECT s.Name AS SubstationName, s.Location, oc.Name AS OwnerName, COUNT(DISTINCT tl.VoltageLevel) AS DifferentVoltageLevels, COUNT(tl.LineID) AS TotalLines FROM Substation s JOIN OwnerCompany oc ON s.OwnerCompanyID = oc.CompanyID JOIN TransmissionLine tl ON s.SubstationID = tl.OwnerCompanyID WHERE s.Status = 'Активна' GROUP BY s.Name, s.Location, oc.Name HAVING COUNT(DISTINCT tl.VoltageLevel) > 1 ORDER BY DifferentVoltageLevels DESC, TotalLines DESC LIMIT 6;",
            "gpt-4o_response": "WITH SubstationLineConnections AS (\n    SELECT \n        s.SubstationID,\n        s.Name AS SubstationName,\n        s.Location,\n        s.OwnerCompanyID,\n        COUNT(DISTINCT tl.LineID) AS TotalLines,\n        COUNT(DISTINCT tl.VoltageLevel) AS DistinctVoltageLevels\n    FROM Substation s\n    JOIN TransmissionLine tl ON s.SubstationID = tl.LineID\n    GROUP BY s.SubstationID, s.Name, s.Location, s.OwnerCompanyID\n),\nSubstationDetails AS (\n    SELECT \n        slc.SubstationID,\n        slc.SubstationName,\n        slc.Location,\n        oc.Name AS OwnerCompanyName,\n        slc.TotalLines,\n        slc.DistinctVoltageLevels\n    FROM SubstationLineConnections slc\n    JOIN OwnerCompany oc ON slc.OwnerCompanyID = oc.CompanyID\n)\nSELECT \n    sd.SubstationName,\n    sd.Location,\n    sd.OwnerCompanyName,\n    sd.TotalLines,\n    sd.DistinctVoltageLevels\nFROM SubstationDetails sd\nORDER BY sd.DistinctVoltageLevels DESC, sd.TotalLines DESC\nLIMIT 6;",
            "gpt-4o_response_ru": "WITH SubstationLineCount AS (\n    SELECT \n        s.SubstationID,\n        s.Name AS SubstationName,\n        s.Location,\n        s.OwnerCompanyID,\n        COUNT(DISTINCT tl.VoltageLevel) AS VoltageLevelCount\n    FROM Substation s\n    JOIN TransmissionLine tl ON s.SubstationID = tl.LineID\n    GROUP BY s.SubstationID, s.Name, s.Location, s.OwnerCompanyID\n),\nOwnerCompanyInfo AS (\n    SELECT \n        oc.CompanyID,\n        oc.Name AS OwnerCompanyName,\n        oc.Headquarters\n    FROM OwnerCompany oc\n)\nSELECT \n    slc.SubstationName,\n    slc.Location,\n    oci.OwnerCompanyName,\n    oci.Headquarters,\n    slc.VoltageLevelCount\nFROM SubstationLineCount slc\nJOIN OwnerCompanyInfo oci ON slc.OwnerCompanyID = oci.CompanyID\nORDER BY slc.VoltageLevelCount DESC\nLIMIT 6;",
            "google/gemini-2.0-flash-001_response": "WITH SubstationVoltageLevels AS (\n    SELECT\n        s.SubstationID,\n        s.Name AS SubstationName,\n        s.Location AS SubstationLocation,\n        s.OwnerCompanyID,\n        oc.Name AS OwnerCompanyName,\n        COUNT(DISTINCT tl.VoltageLevel) AS DistinctVoltageLevels\n    FROM Substation s\n    JOIN OwnerCompany oc ON s.OwnerCompanyID = oc.CompanyID\n    LEFT JOIN TransmissionLine tl ON s.SubstationID = 1 -- There is no direct link between Substation and TransmissionLine. Assuming all substations are connected to all transmission lines for demonstration.\n    GROUP BY s.SubstationID, s.Name, s.Location, s.OwnerCompanyID, oc.Name\n),\nRankedSubstations AS (\n    SELECT\n        SubstationID,\n        SubstationName,\n        SubstationLocation,\n        OwnerCompanyID,\n        OwnerCompanyName,\n        DistinctVoltageLevels,\n        RANK() OVER (ORDER BY DistinctVoltageLevels DESC) AS Rank\n    FROM SubstationVoltageLevels\n)\nSELECT\n    rs.SubstationName,\n    rs.SubstationLocation,\n    rs.OwnerCompanyName,\n    rs.DistinctVoltageLevels\nFROM RankedSubstations rs\nWHERE rs.Rank <= 6\nORDER BY rs.DistinctVoltageLevels DESC;",
            "google/gemini-2.0-flash-001_response_ru": "WITH SubstationLines AS (\n    SELECT\n        s.SubstationID,\n        s.Name AS SubstationName,\n        s.Location AS SubstationLocation,\n        oc.Name AS OwnerCompanyName,\n        oc.Headquarters AS OwnerCompanyHeadquarters,\n        COUNT(DISTINCT tl.VoltageLevel) AS DistinctVoltageLevelsCount,\n        s.Latitude,\n        s.Longitude\n    FROM Substation s\n    JOIN OwnerCompany oc ON s.OwnerCompanyID = oc.CompanyID\n    LEFT JOIN TransmissionLine tl ON s.SubstationID = 1 -- Заглушка, т.к. нет прямой связи между подстанцией и линией\n    GROUP BY s.SubstationID, s.Name, s.Location, oc.Name, oc.Headquarters, s.Latitude, s.Longitude\n)\nSELECT\n    sl.SubstationName,\n    sl.SubstationLocation,\n    sl.OwnerCompanyName,\n    sl.OwnerCompanyHeadquarters AS Region,\n    sl.DistinctVoltageLevelsCount,\n    sl.Latitude,\n    sl.Longitude\nFROM SubstationLines sl\nORDER BY sl.DistinctVoltageLevelsCount DESC\nLIMIT 6;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH ConnectedLines AS (\n    SELECT \n        s.SubstationID,\n        s.Name AS SubstationName,\n        s.Location AS SubstationLocation,\n        s.OwnerCompanyID,\n        COUNT(DISTINCT tl.LineID) AS ConnectedLinesCount,\n        COUNT(DISTINCT tl.VoltageLevel) AS DifferentVoltageLevelsCount\n    FROM Substation s\n    JOIN TransmissionLine tl ON s.SubstationID = tl.LineID\n    GROUP BY s.SubstationID, s.Name, s.Location, s.OwnerCompanyID\n),\nOwnerCompanyInfo AS (\n    SELECT \n        oc.CompanyID,\n        oc.Name AS OwnerCompanyName,\n        oc.Industry\n    FROM OwnerCompany oc\n),\nRegionInfo AS (\n    SELECT \n        s.SubstationID,\n        s.Location AS SubstationLocation,\n        oc.Name AS RegionName\n    FROM Substation s\n    JOIN OwnerCompany oc ON s.OwnerCompanyID = oc.CompanyID\n)\nSELECT \n    cl.SubstationName,\n    cl.SubstationLocation,\n    oi.OwnerCompanyName,\n    ri.RegionName,\n    cl.ConnectedLinesCount,\n    cl.DifferentVoltageLevelsCount\nFROM ConnectedLines cl\nJOIN OwnerCompanyInfo oi ON cl.OwnerCompanyID = oi.CompanyID\nJOIN RegionInfo ri ON cl.SubstationID = ri.SubstationID\nORDER BY cl.DifferentVoltageLevelsCount DESC\nLIMIT 6;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH SubstationLines AS (\n    SELECT \n        s.SubstationID,\n        s.Name AS SubstationName,\n        s.Location AS SubstationLocation,\n        s.OwnerCompanyID,\n        COUNT(DISTINCT tl.LineID) AS ConnectedLinesCount,\n        COUNT(DISTINCT tl.VoltageLevel) AS DifferentVoltageLevelsCount\n    FROM Substation s\n    JOIN TransmissionLine tl ON s.SubstationID = tl.LineID\n    GROUP BY s.SubstationID, s.Name, s.Location, s.OwnerCompanyID\n),\nRankedSubstations AS (\n    SELECT \n        sl.SubstationID,\n        sl.SubstationName,\n        sl.SubstationLocation,\n        oc.Name AS OwnerCompanyName,\n        sl.ConnectedLinesCount,\n        sl.DifferentVoltageLevelsCount,\n        ROW_NUMBER() OVER (ORDER BY sl.DifferentVoltageLevelsCount DESC, sl.ConnectedLinesCount DESC) AS RankNumber\n    FROM SubstationLines sl\n    JOIN OwnerCompany oc ON sl.OwnerCompanyID = oc.CompanyID\n)\nSELECT \n    rs.SubstationName,\n    rs.SubstationLocation,\n    rs.OwnerCompanyName,\n    rs.ConnectedLinesCount,\n    rs.DifferentVoltageLevelsCount\nFROM RankedSubstations rs\nWHERE rs.RankNumber <= 6\nORDER BY rs.DifferentVoltageLevelsCount DESC, rs.ConnectedLinesCount DESC;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH SubstationVoltageCounts AS (\n    SELECT \n        s.SubstationID,\n        s.Name AS SubstationName,\n        s.Location,\n        s.CapacityMW,\n        oc.Name AS OwnerName,\n        COUNT(DISTINCT tl.VoltageLevel) AS DistinctVoltageLevelsCount\n    FROM Substation s\n    JOIN OwnerCompany oc ON s.OwnerCompanyID = oc.CompanyID\n    JOIN TransmissionLine tl ON 1=1\n    GROUP BY s.SubstationID, s.Name, s.Location, s.CapacityMW, oc.Name\n)\nSELECT \n    svc.SubstationName,\n    svc.Location AS Region,\n    svc.OwnerName,\n    svc.CapacityMW,\n    svc.DistinctVoltageLevelsCount\nFROM SubstationVoltageCounts svc\nORDER BY svc.DistinctVoltageLevelsCount DESC, svc.CapacityMW DESC\nLIMIT 6;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "WITH SubstationVoltageLevels AS (\n    SELECT \n        s.SubstationID,\n        s.Name AS SubstationName,\n        s.Location,\n        oc.Name AS OwnerCompany,\n        COUNT(DISTINCT tr.VoltageLevel) AS DifferentVoltageLevelsCount,\n        SUBSTRING_INDEX(s.Location, ', ', 1) AS Region\n    FROM Substation s\n    JOIN OwnerCompany oc ON s.OwnerCompanyID = oc.CompanyID\n    JOIN TransmissionLine tr ON s.SubstationID = tr.LineID\n    GROUP BY s.SubstationID, s.Name, s.Location, oc.Name\n)\nSELECT \n    SubstationName,\n    Location AS Region,\n    OwnerCompany,\n    DifferentVoltageLevelsCount\nFROM SubstationVoltageLevels\nORDER BY DifferentVoltageLevelsCount DESC\nLIMIT 6;",
            "gigachat_response": "SELECT \n    s.Location AS Region,\n    oc.Name AS OwnerCompany,\n    s.Name AS SubstationName,\n    COUNT(DISTINCT tl.LineID) AS NumberOfLines,\n    GROUP_CONCAT(DISTINCT tl.VoltageLevel SEPARATOR ', ') AS VoltageLevels\nFROM Substation s\nJOIN TransmissionLine tl ON s.SubstationID = tl.LineID\nJOIN OwnerCompany oc ON s.OwnerCompanyID = oc.CompanyID\nGROUP BY s.SubstationID, s.Location, oc.Name, s.Name\nORDER BY NumberOfLines DESC\nLIMIT 6;",
            "gigachat_response_ru": "SELECT \n    ss.Location AS Region,\n    oc.Name AS OwnerCompany,\n    ss.Name AS SubstationName,\n    COUNT(DISTINCT tl.LineID) AS NumberOfLines,\n    GROUP_CONCAT(DISTINCT tl.VoltageLevel SEPARATOR ', ') AS VoltageLevels\nFROM \n    Substation ss\nLEFT JOIN \n    TransmissionLine tl ON ss.SubstationID = tl.OwnerCompanyID\nINNER JOIN \n    OwnerCompany oc ON ss.OwnerCompanyID = oc.CompanyID\nWHERE \n    tl.Status = 'Эксплуатация'\nGROUP BY \n    ss.SubstationID, ss.Location, oc.Name, ss.Name\nORDER BY \n    NumberOfLines DESC\nLIMIT 6;"
        },
        {
            "question": "Какие топ-9 электростанций имеют наибольшее количество инцидентов высокой и критической важности за последние 6 месяцев, сгруппированные по типу и владельцу, с указанием средней продолжительности инцидентов?",
            "sql_query": "SELECT pp.Name AS PlantName, pp.Type, oc.Name AS OwnerName, COUNT(i.IncidentID) AS CriticalIncidents, AVG(i.DurationHours) AS AvgDuration FROM PowerPlant pp JOIN OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID JOIN Incident i ON pp.PlantID = i.PlantID WHERE i.Severity IN ('Высокая', 'Критическая') AND i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH) GROUP BY pp.Name, pp.Type, oc.Name ORDER BY CriticalIncidents DESC, AvgDuration DESC LIMIT 9;",
            "gpt-4o_response": "WITH RecentIncidents AS (\n    SELECT \n        i.PlantID,\n        i.Severity,\n        i.DurationHours\n    FROM Incident i\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH)\n    AND i.Severity IN ('Высокая', 'Критическая')\n),\nIncidentCounts AS (\n    SELECT \n        ri.PlantID,\n        COUNT(*) AS IncidentCount,\n        AVG(ri.DurationHours) AS AvgIncidentDuration\n    FROM RecentIncidents ri\n    GROUP BY ri.PlantID\n),\nPlantDetails AS (\n    SELECT \n        pp.PlantID,\n        pp.Name AS PlantName,\n        pp.Type AS PlantType,\n        oc.Name AS OwnerName\n    FROM PowerPlant pp\n    JOIN OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\n)\nSELECT \n    pd.PlantName,\n    pd.PlantType,\n    pd.OwnerName,\n    ic.IncidentCount,\n    ROUND(ic.AvgIncidentDuration, 2) AS AvgIncidentDuration\nFROM IncidentCounts ic\nJOIN PlantDetails pd ON ic.PlantID = pd.PlantID\nORDER BY ic.IncidentCount DESC\nLIMIT 9;",
            "gpt-4o_response_ru": "WITH RecentIncidents AS (\n    SELECT \n        i.PlantID,\n        i.Severity,\n        i.DurationHours\n    FROM Incident i\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH)\n    AND i.Severity IN ('Высокая', 'Критическая')\n),\nIncidentCounts AS (\n    SELECT \n        ri.PlantID,\n        COUNT(*) AS IncidentCount,\n        AVG(ri.DurationHours) AS AvgIncidentDuration\n    FROM RecentIncidents ri\n    GROUP BY ri.PlantID\n),\nPlantDetails AS (\n    SELECT \n        pp.PlantID,\n        pp.Name AS PlantName,\n        pp.Type AS PlantType,\n        oc.Name AS OwnerName\n    FROM PowerPlant pp\n    JOIN OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\n)\nSELECT \n    pd.PlantName,\n    pd.PlantType,\n    pd.OwnerName,\n    ic.IncidentCount,\n    ROUND(ic.AvgIncidentDuration, 2) AS AvgIncidentDuration\nFROM IncidentCounts ic\nJOIN PlantDetails pd ON ic.PlantID = pd.PlantID\nORDER BY ic.IncidentCount DESC\nLIMIT 9;",
            "google/gemini-2.0-flash-001_response": "WITH RecentIncidents AS (\n    SELECT\n        PlantID,\n        Severity,\n        DurationHours\n    FROM\n        Incident\n    WHERE\n        Date >= DATE('now', '-6 months')\n        AND Severity IN ('Высокая', 'Критическая')\n),\nAggregatedIncidents AS (\n    SELECT\n        PlantID,\n        COUNT(*) AS TotalIncidents,\n        AVG(DurationHours) AS AvgDurationHours\n    FROM\n        RecentIncidents\n    GROUP BY\n        PlantID\n),\nRankedIncidents AS (\n    SELECT\n        PlantID,\n        TotalIncidents,\n        AvgDurationHours,\n        RANK() OVER (ORDER BY TotalIncidents DESC) AS IncidentRank\n    FROM\n        AggregatedIncidents\n)\nSELECT\n    pp.Name AS PlantName,\n    pp.Type AS PlantType,\n    oc.Name AS OwnerCompanyName,\n    ri.TotalIncidents,\n    ROUND(ri.AvgDurationHours, 2) AS AvgIncidentDuration\nFROM\n    RankedIncidents ri\nJOIN\n    PowerPlant pp ON ri.PlantID = pp.PlantID\nJOIN\n    OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\nWHERE\n    ri.IncidentRank <= 9\nORDER BY\n    ri.TotalIncidents DESC;",
            "google/gemini-2.0-flash-001_response_ru": "WITH HighSeverityIncidents AS (\n    SELECT\n        PlantID,\n        Date,\n        Severity,\n        DurationHours\n    FROM Incident\n    WHERE Severity IN ('Высокая', 'Критическая')\n    AND Date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH)\n),\nPlantIncidentCounts AS (\n    SELECT\n        PlantID,\n        COUNT(*) AS IncidentCount,\n        AVG(DurationHours) AS AvgIncidentDuration\n    FROM HighSeverityIncidents\n    GROUP BY PlantID\n),\nRankedPlants AS (\n    SELECT\n        PlantID,\n        IncidentCount,\n        AvgIncidentDuration,\n        RANK() OVER (ORDER BY IncidentCount DESC) AS IncidentRank\n    FROM PlantIncidentCounts\n)\nSELECT\n    pp.Name AS PlantName,\n    pp.Type AS PlantType,\n    oc.Name AS OwnerCompanyName,\n    rpc.IncidentCount,\n    ROUND(rpc.AvgIncidentDuration, 2) AS AvgIncidentDuration\nFROM RankedPlants rpc\nJOIN PowerPlant pp ON rpc.PlantID = pp.PlantID\nJOIN OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\nWHERE rpc.IncidentRank <= 9\nORDER BY rpc.IncidentCount DESC;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH PlantIncidents AS (\n    SELECT \n        p.PlantID,\n        p.Name AS PlantName,\n        p.Type AS PlantType,\n        oc.Name AS OwnerName,\n        i.Severity,\n        i.DurationHours\n    FROM PowerPlant p\n    JOIN OwnerCompany oc ON p.OwnerCompanyID = oc.CompanyID\n    JOIN Incident i ON p.PlantID = i.PlantID\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH)\n),\nHighCriticalIncidents AS (\n    SELECT \n        pi.PlantID,\n        pi.PlantName,\n        pi.PlantType,\n        pi.OwnerName,\n        COUNT(CASE WHEN pi.Severity IN ('Высокая', 'Критическая') THEN 1 END) AS HighCriticalIncidentsCount,\n        AVG(pi.DurationHours) AS AvgIncidentDuration\n    FROM PlantIncidents pi\n    GROUP BY pi.PlantID, pi.PlantName, pi.PlantType, pi.OwnerName\n),\nRankedIncidents AS (\n    SELECT \n        hci.PlantName,\n        hci.PlantType,\n        hci.OwnerName,\n        hci.HighCriticalIncidentsCount,\n        ROUND(hci.AvgIncidentDuration, 2) AS AvgIncidentDuration\n    FROM HighCriticalIncidents hci\n    ORDER BY hci.HighCriticalIncidentsCount DESC\n    LIMIT 9\n)\nSELECT \n    ri.PlantName,\n    ri.PlantType,\n    ri.OwnerName,\n    ri.HighCriticalIncidentsCount,\n    ri.AvgIncidentDuration\nFROM RankedIncidents ri\nORDER BY ri.HighCriticalIncidentsCount DESC;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH PlantIncidents AS (\n    SELECT \n        p.PlantID,\n        p.Name AS PlantName,\n        p.Type AS PlantType,\n        oc.Name AS OwnerName,\n        COUNT(CASE WHEN i.Severity = 'Высокая' OR i.Severity = 'Критическая' THEN 1 END) AS HighSeverityIncidentsCount,\n        AVG(i.DurationHours) AS AvgIncidentDuration\n    FROM PowerPlant p\n    JOIN OwnerCompany oc ON p.OwnerCompanyID = oc.CompanyID\n    JOIN Incident i ON p.PlantID = i.PlantID\n    WHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH)\n    GROUP BY p.PlantID, p.Name, p.Type, oc.Name\n)\nSELECT \n    pi.PlantType,\n    pi.OwnerName,\n    pi.PlantName,\n    pi.HighSeverityIncidentsCount,\n    ROUND(pi.AvgIncidentDuration, 2) AS AvgIncidentDuration\nFROM PlantIncidents pi\nORDER BY pi.HighSeverityIncidentsCount DESC\nLIMIT 9;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    pp.PlantID,\n    pp.Name AS PlantName,\n    pp.Type AS PlantType,\n    oc.Name AS OwnerCompanyName,\n    COUNT(i.IncidentID) AS IncidentCount,\n    ROUND(AVG(i.DurationHours), 2) AS AvgIncidentDuration,\n    MIN(i.Date) AS FirstIncidentDate,\n    MAX(i.Date) AS LastIncidentDate\nFROM \n    PowerPlant pp\nJOIN \n    OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\nJOIN \n    Incident i ON pp.PlantID = i.PlantID\nWHERE \n    i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH)\n    AND i.Severity IN ('Высокая', 'Критическая')\nGROUP BY \n    pp.PlantID, pp.Name, pp.Type, oc.Name\nORDER BY \n    IncidentCount DESC\nLIMIT 9;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    pp.Name AS PlantName,\n    pp.Type AS PlantType,\n    oc.Name AS OwnerName,\n    COUNT(i.IncidentID) AS IncidentCount,\n    ROUND(AVG(i.DurationHours), 2) AS AvgIncidentDuration\nFROM \n    PowerPlant pp\nJOIN \n    OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\nJOIN \n    Incident i ON pp.PlantID = i.PlantID\nWHERE \n    i.Severity IN ('Высокая', 'Критическая')\n    AND i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH)\nGROUP BY \n    pp.Name, pp.Type, oc.Name\nORDER BY \n    IncidentCount DESC\nLIMIT 9;",
            "gigachat_response": "SELECT \n    pp.Name AS PlantName,\n    pp.Type AS PlantType,\n    oc.Name AS OwnerName,\n    COUNT(i.IncidentID) AS IncidentCount,\n    AVG(i.DurationHours) AS AvgIncidentDuration\nFROM PowerPlant pp\nJOIN Incident i ON pp.PlantID = i.PlantID\nJOIN OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\nWHERE i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH)\nAND i.Severity IN ('Высокая', 'Критическая')\nGROUP BY pp.PlantID, pp.Name, pp.Type, oc.Name\nORDER BY IncidentCount DESC\nLIMIT 9;",
            "gigachat_response_ru": "SELECT \n    pp.Name AS PlantName,\n    pp.Type AS PlantType,\n    oc.Name AS OwnerName,\n    COUNT(i.IncidentID) AS HighCriticalIncidentsCount,\n    AVG(i.DurationHours) AS AvgIncidentDuration\nFROM PowerPlant pp\nJOIN Incident i ON pp.PlantID = i.PlantID\nJOIN OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\nWHERE i.Severity IN ('Высокая', 'Критическая')\nAND i.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH)\nGROUP BY pp.PlantID, pp.Name, pp.Type, oc.Name\nORDER BY HighCriticalIncidentsCount DESC, AvgIncidentDuration DESC\nLIMIT 9;"
        },
        {
            "question": "Какие топ-5 тарифов имеют наибольшую разницу между пиковыми и непиковыми часами, сгруппированные по типу потребителя и периоду действия, с учетом только активных тарифов?",
            "sql_query": "SELECT t.Name AS TariffName, t.ConsumerType, t.ValidFrom, t.ValidTo, (MAX(t.PricePerUnit) - MIN(t.PricePerUnit)) AS PriceDifference FROM Tariff t WHERE t.Status = 'Активный' AND t.ValidTo >= CURRENT_DATE GROUP BY t.Name, t.ConsumerType, t.ValidFrom, t.ValidTo HAVING PriceDifference > 0 ORDER BY PriceDifference DESC LIMIT 5;",
            "gpt-4o_response": "WITH TariffHoursDifference AS (\n    SELECT \n        TariffID,\n        Name,\n        ConsumerType,\n        ValidFrom,\n        ValidTo,\n        Status,\n        (CAST(SUBSTRING_INDEX(PeakHours, '-', -1) AS TIME) - CAST(SUBSTRING_INDEX(PeakHours, '-', 1) AS TIME)) -\n        (CAST(SUBSTRING_INDEX(OffPeakHours, '-', -1) AS TIME) - CAST(SUBSTRING_INDEX(OffPeakHours, '-', 1) AS TIME)) AS HoursDifference\n    FROM Tariff\n    WHERE Status = 'Активный'\n)\nSELECT \n    Name AS TariffName,\n    ConsumerType,\n    ValidFrom,\n    ValidTo,\n    HoursDifference\nFROM TariffHoursDifference\nORDER BY HoursDifference DESC\nLIMIT 5;",
            "gpt-4o_response_ru": "SELECT \n    t.Name AS TariffName,\n    t.ConsumerType,\n    t.ValidFrom,\n    t.ValidTo,\n    ABS(TIME_TO_SEC(STR_TO_DATE(SUBSTRING_INDEX(t.PeakHours, '-', -1), '%H:%i')) - TIME_TO_SEC(STR_TO_DATE(SUBSTRING_INDEX(t.PeakHours, '-', 1), '%H:%i'))) / 3600 AS PeakHoursDuration,\n    ABS(TIME_TO_SEC(STR_TO_DATE(SUBSTRING_INDEX(t.OffPeakHours, '-', -1), '%H:%i')) - TIME_TO_SEC(STR_TO_DATE(SUBSTRING_INDEX(t.OffPeakHours, '-', 1), '%H:%i'))) / 3600 AS OffPeakHoursDuration,\n    ABS(\n        (TIME_TO_SEC(STR_TO_DATE(SUBSTRING_INDEX(t.PeakHours, '-', -1), '%H:%i')) - TIME_TO_SEC(STR_TO_DATE(SUBSTRING_INDEX(t.PeakHours, '-', 1), '%H:%i'))) -\n        (TIME_TO_SEC(STR_TO_DATE(SUBSTRING_INDEX(t.OffPeakHours, '-', -1), '%H:%i')) - TIME_TO_SEC(STR_TO_DATE(SUBSTRING_INDEX(t.OffPeakHours, '-', 1), '%H:%i')))\n    ) / 3600 AS HoursDifference\nFROM Tariff t\nWHERE t.Status = 'Активный'\nORDER BY HoursDifference DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    Tariff.Name,\n    Tariff.ConsumerType,\n    Tariff.ValidFrom,\n    Tariff.ValidTo,\n    (LENGTH(Tariff.PeakHours) - LENGTH(REPLACE(Tariff.PeakHours, '-', ''))) + 1 AS PeakHoursCount,\n    (LENGTH(Tariff.OffPeakHours) - LENGTH(REPLACE(Tariff.OffPeakHours, '-', ''))) + 1 AS OffPeakHoursCount,\n    ABS((LENGTH(Tariff.PeakHours) - LENGTH(REPLACE(Tariff.PeakHours, '-', ''))) + 1 - (LENGTH(Tariff.OffPeakHours) - LENGTH(REPLACE(Tariff.OffPeakHours, '-', ''))) + 1) AS TimeDifference\nFROM\n    Tariff\nWHERE\n    Tariff.Status = 'Активный'\nORDER BY\n    TimeDifference DESC\nLIMIT 5;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    Tariff.Name,\n    Tariff.ConsumerType,\n    Tariff.ValidFrom,\n    Tariff.ValidTo,\n    (LENGTH(Tariff.PeakHours) - LENGTH(REPLACE(Tariff.PeakHours, '-', '')) + 1) AS PeakHoursCount,\n    (LENGTH(Tariff.OffPeakHours) - LENGTH(REPLACE(Tariff.OffPeakHours, '-', '')) + 1) AS OffPeakHoursCount,\n    (LENGTH(Tariff.PeakHours) - LENGTH(REPLACE(Tariff.PeakHours, '-', '')) + 1) - (LENGTH(Tariff.OffPeakHours) - LENGTH(REPLACE(Tariff.OffPeakHours, '-', '')) + 1) AS HourDifference\nFROM\n    Tariff\nWHERE\n    Tariff.Status = 'Активный'\nORDER BY\n    HourDifference DESC\nLIMIT 5;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH TariffDifferences AS (\n    SELECT \n        t.TariffID,\n        t.Name AS TariffName,\n        t.ConsumerType,\n        t.ValidFrom,\n        t.ValidTo,\n        t.PricePerUnit,\n        t.PeakHours,\n        t.OffPeakHours,\n        t.Status,\n        t.PricePerUnit - (SELECT MIN(PricePerUnit) FROM Tariff WHERE ConsumerType = t.ConsumerType AND ValidFrom <= t.ValidFrom AND ValidTo >= t.ValidTo) AS PriceDifference\n    FROM Tariff t\n    WHERE t.Status = 'Активный'\n),\nRankedTariffs AS (\n    SELECT \n        td.TariffName,\n        td.ConsumerType,\n        td.ValidFrom,\n        td.ValidTo,\n        td.PricePerUnit,\n        td.PeakHours,\n        td.OffPeakHours,\n        td.Status,\n        td.PriceDifference,\n        ROW_NUMBER() OVER (PARTITION BY td.ConsumerType, td.ValidFrom ORDER BY td.PriceDifference DESC) AS RowNumber\n    FROM TariffDifferences td\n)\nSELECT \n    rt.TariffName,\n    rt.ConsumerType,\n    rt.ValidFrom,\n    rt.ValidTo,\n    rt.PricePerUnit,\n    rt.PeakHours,\n    rt.OffPeakHours,\n    rt.Status,\n    rt.PriceDifference\nFROM RankedTariffs rt\nWHERE rt.RowNumber <= 5\nORDER BY rt.ConsumerType, rt.ValidFrom, rt.PriceDifference DESC;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH TariffDetails AS (\n    SELECT \n        t.TariffID,\n        t.Name AS TariffName,\n        t.Description,\n        t.PricePerUnit,\n        t.ConsumerType,\n        t.PeakHours,\n        t.OffPeakHours,\n        t.Status,\n        t.ValidFrom,\n        t.ValidTo,\n        ABS(t.PricePerUnit - (SELECT PricePerUnit FROM Tariff WHERE Name = 'Ночной')) AS PriceDifference\n    FROM Tariff t\n    WHERE t.Status = 'Активный'\n),\nRankedTariffs AS (\n    SELECT \n        td.TariffID,\n        td.TariffName,\n        td.Description,\n        td.PricePerUnit,\n        td.ConsumerType,\n        td.PeakHours,\n        td.OffPeakHours,\n        td.Status,\n        td.ValidFrom,\n        td.ValidTo,\n        td.PriceDifference,\n        ROW_NUMBER() OVER (ORDER BY td.PriceDifference DESC) AS RowNum\n    FROM TariffDetails td\n)\nSELECT \n    rt.TariffName,\n    rt.Description,\n    rt.PricePerUnit,\n    rt.ConsumerType,\n    rt.PeakHours,\n    rt.OffPeakHours,\n    rt.Status,\n    rt.ValidFrom,\n    rt.ValidTo,\n    rt.PriceDifference\nFROM RankedTariffs rt\nWHERE rt.RowNum <= 5;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    t.Name AS TariffName,\n    t.ConsumerType,\n    t.ValidFrom,\n    t.ValidTo,\n    t.PricePerUnit,\n    t.PeakHours,\n    t.OffPeakHours,\n    (t.PricePerUnit * 1.5 - t.PricePerUnit * 0.8) AS PriceDifference\nFROM \n    Tariff t\nWHERE \n    t.Status = 'Активный'\nORDER BY \n    PriceDifference DESC, \n    t.ConsumerType,\n    t.ValidFrom\nLIMIT 5;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    t.Name AS TariffName,\n    t.ConsumerType,\n    t.ValidFrom,\n    t.ValidTo,\n    t.PricePerUnit,\n    t.PeakHours,\n    t.OffPeakHours,\n    (t.PricePerUnit * 1.0) AS PeakPrice,\n    (t.PricePerUnit * 0.8) AS OffPeakPrice,\n    (t.PricePerUnit * 1.0 - t.PricePerUnit * 0.8) AS PriceDifference\nFROM \n    Tariff t\nWHERE \n    t.Status = 'Активный'\nORDER BY \n    PriceDifference DESC, t.ConsumerType, t.ValidFrom\nLIMIT 5;",
            "gigachat_response": "SELECT \n    t.TariffID,\n    t.Name AS TariffName,\n    t.ConsumerType,\n    TIME_TO_SEC(TIMEDIFF(t.PeakHours, t.OffPeakHours)) / 3600 AS HoursDifference,\n    t.ValidFrom,\n    t.ValidTo\nFROM Tariff t\nWHERE t.Status = 'Активный'\nORDER BY HoursDifference DESC\nLIMIT 5;",
            "gigachat_response_ru": "SELECT \n    t.TariffID,\n    t.Name AS TariffName,\n    t.ConsumerType,\n    TIME_TO_SEC(TIMEDIFF(t.PeakHours, t.OffPeakHours)) / 3600 AS HoursDifference,\n    t.ValidFrom,\n    t.ValidTo\nFROM Tariff t\nWHERE t.Status = 'Активный'\nORDER BY HOURSDIFFERENCE DESC\nLIMIT 5;"
        },
        {
            "question": "Какие топ-8 электростанций имеют наибольшее количество плановых обслуживаний в течение последнего года, сгруппированные по типу и владельцу, с указанием средней стоимости и продолжительности обслуживания?",
            "sql_query": "SELECT pp.Name AS PlantName, pp.Type, oc.Name AS OwnerName, COUNT(m.MaintenanceID) AS MaintenanceCount, AVG(m.Cost) AS AvgCost, AVG(m.DurationHours) AS AvgDuration FROM PowerPlant pp JOIN OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID JOIN Maintenance m ON pp.PlantID = m.PlantID WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) AND m.Status = 'Завершено' GROUP BY pp.Name, pp.Type, oc.Name HAVING COUNT(m.MaintenanceID) > 1 ORDER BY MaintenanceCount DESC, AvgCost DESC LIMIT 8;",
            "gpt-4o_response": "WITH RecentMaintenance AS (\n    SELECT \n        m.PlantID,\n        COUNT(m.MaintenanceID) AS MaintenanceCount,\n        AVG(m.Cost) AS AvgCost,\n        AVG(m.DurationHours) AS AvgDuration\n    FROM Maintenance m\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY m.PlantID\n),\nPlantDetails AS (\n    SELECT \n        pp.PlantID,\n        pp.Name AS PlantName,\n        pp.Type AS PlantType,\n        oc.Name AS OwnerName\n    FROM PowerPlant pp\n    JOIN OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\n)\nSELECT \n    pd.PlantName,\n    pd.PlantType,\n    pd.OwnerName,\n    rm.MaintenanceCount,\n    ROUND(rm.AvgCost, 2) AS AvgCost,\n    ROUND(rm.AvgDuration, 2) AS AvgDuration\nFROM RecentMaintenance rm\nJOIN PlantDetails pd ON rm.PlantID = pd.PlantID\nORDER BY rm.MaintenanceCount DESC\nLIMIT 8;",
            "gpt-4o_response_ru": "SELECT \n    pp.Name AS PlantName,\n    pp.Type AS PlantType,\n    oc.Name AS OwnerName,\n    COUNT(m.MaintenanceID) AS MaintenanceCount,\n    AVG(m.Cost) AS AvgMaintenanceCost,\n    AVG(m.DurationHours) AS AvgMaintenanceDuration\nFROM PowerPlant pp\nJOIN Maintenance m ON pp.PlantID = m.PlantID\nJOIN OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\nWHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\nGROUP BY pp.PlantID, pp.Name, pp.Type, oc.Name\nORDER BY MaintenanceCount DESC\nLIMIT 8;",
            "google/gemini-2.0-flash-001_response": "WITH PlantMaintenanceCounts AS (\n    SELECT\n        pp.PlantID,\n        pp.Name AS PlantName,\n        pp.Type AS PlantType,\n        oc.Name AS OwnerCompanyName,\n        COUNT(m.MaintenanceID) AS MaintenanceCount,\n        AVG(m.Cost) AS AvgMaintenanceCost,\n        AVG(m.DurationHours) AS AvgMaintenanceDuration\n    FROM PowerPlant pp\n    JOIN OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\n    LEFT JOIN Maintenance m ON pp.PlantID = m.PlantID\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY pp.PlantID, pp.Name, pp.Type, oc.Name\n)\nSELECT\n    pmc.PlantName,\n    pmc.PlantType,\n    pmc.OwnerCompanyName,\n    pmc.MaintenanceCount,\n    ROUND(pmc.AvgMaintenanceCost, 2) AS AvgMaintenanceCost,\n    ROUND(pmc.AvgMaintenanceDuration, 2) AS AvgMaintenanceDuration\nFROM PlantMaintenanceCounts pmc\nORDER BY pmc.MaintenanceCount DESC\nLIMIT 8;",
            "google/gemini-2.0-flash-001_response_ru": "WITH PlantMaintenance AS (\n    SELECT\n        pp.PlantID,\n        pp.Name AS PlantName,\n        pp.Type AS PlantType,\n        oc.Name AS OwnerCompanyName,\n        COUNT(m.MaintenanceID) AS MaintenanceCount,\n        AVG(m.Cost) AS AvgMaintenanceCost,\n        AVG(m.DurationHours) AS AvgMaintenanceDuration\n    FROM PowerPlant pp\n    JOIN OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\n    LEFT JOIN Maintenance m ON pp.PlantID = m.PlantID\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY pp.PlantID, pp.Name, pp.Type, oc.Name\n)\nSELECT\n    pm.PlantName,\n    pm.PlantType,\n    pm.OwnerCompanyName,\n    pm.MaintenanceCount,\n    ROUND(pm.AvgMaintenanceCost, 2) AS AvgMaintenanceCost,\n    ROUND(pm.AvgMaintenanceDuration, 2) AS AvgMaintenanceDuration\nFROM PlantMaintenance pm\nORDER BY pm.MaintenanceCount DESC\nLIMIT 8;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH PlantMaintenance AS (\n    SELECT \n        pp.PlantID,\n        pp.Name AS PlantName,\n        pp.Type AS PlantType,\n        oc.Name AS OwnerName,\n        COUNT(m.MaintenanceID) AS MaintenanceCount,\n        AVG(m.Cost) AS AvgMaintenanceCost,\n        AVG(m.DurationHours) AS AvgMaintenanceDuration\n    FROM PowerPlant pp\n    JOIN OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\n    JOIN Maintenance m ON pp.PlantID = m.PlantID\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    GROUP BY pp.PlantID, pp.Name, pp.Type, oc.Name\n),\nRankedPlants AS (\n    SELECT \n        pm.PlantName,\n        pm.PlantType,\n        pm.OwnerName,\n        pm.MaintenanceCount,\n        ROUND(pm.AvgMaintenanceCost, 2) AS AvgMaintenanceCost,\n        ROUND(pm.AvgMaintenanceDuration, 2) AS AvgMaintenanceDuration,\n        ROW_NUMBER() OVER (ORDER BY pm.MaintenanceCount DESC) AS RowNum\n    FROM PlantMaintenance pm\n)\nSELECT \n    rp.PlantName,\n    rp.PlantType,\n    rp.OwnerName,\n    rp.MaintenanceCount,\n    rp.AvgMaintenanceCost,\n    rp.AvgMaintenanceDuration\nFROM RankedPlants rp\nWHERE rp.RowNum <= 8\nORDER BY rp.MaintenanceCount DESC;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH PlantMaintenance AS (\n    SELECT \n        pp.PlantID,\n        pp.Name AS PlantName,\n        pp.Type AS PlantType,\n        oc.Name AS OwnerName,\n        m.Date AS MaintenanceDate,\n        m.Description,\n        m.DurationHours,\n        m.Cost\n    FROM PowerPlant pp\n    JOIN OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\n    JOIN Maintenance m ON pp.PlantID = m.PlantID\n    WHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n),\nMaintenanceSummary AS (\n    SELECT \n        pm.PlantID,\n        pm.PlantName,\n        pm.PlantType,\n        pm.OwnerName,\n        COUNT(pm.MaintenanceDate) AS MaintenanceCount,\n        AVG(pm.DurationHours) AS AvgMaintenanceDuration,\n        AVG(pm.Cost) AS AvgMaintenanceCost\n    FROM PlantMaintenance pm\n    GROUP BY pm.PlantID, pm.PlantName, pm.PlantType, pm.OwnerName\n)\nSELECT \n    ms.PlantName,\n    ms.PlantType,\n    ms.OwnerName,\n    ms.MaintenanceCount,\n    ROUND(ms.AvgMaintenanceDuration, 2) AS AvgMaintenanceDuration,\n    ROUND(ms.AvgMaintenanceCost, 2) AS AvgMaintenanceCost\nFROM MaintenanceSummary ms\nORDER BY ms.MaintenanceCount DESC\nLIMIT 8;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    pp.Name AS PlantName,\n    pp.Type AS PlantType,\n    oc.Name AS OwnerCompany,\n    COUNT(m.MaintenanceID) AS MaintenanceCount,\n    ROUND(AVG(m.Cost), 2) AS AvgMaintenanceCost,\n    ROUND(AVG(m.DurationHours), 2) AS AvgMaintenanceDuration\nFROM PowerPlant pp\nJOIN Maintenance m ON pp.PlantID = m.PlantID\nJOIN OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\nWHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    AND m.Status = 'Завершено'\nGROUP BY pp.Name, pp.Type, oc.Name\nORDER BY MaintenanceCount DESC\nLIMIT 8;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    pp.Name AS PlantName,\n    pp.Type AS PlantType,\n    oc.Name AS OwnerName,\n    COUNT(m.MaintenanceID) AS MaintenanceCount,\n    ROUND(AVG(m.Cost), 2) AS AvgMaintenanceCost,\n    ROUND(AVG(m.DurationHours), 2) AS AvgMaintenanceDuration\nFROM PowerPlant pp\nJOIN OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\nJOIN Maintenance m ON pp.PlantID = m.PlantID\nWHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n    AND m.Status = 'Завершено'\nGROUP BY pp.Name, pp.Type, oc.Name\nORDER BY MaintenanceCount DESC\nLIMIT 8;",
            "gigachat_response": "SELECT \n    pp.Name AS PlantName,\n    pp.Type AS PlantType,\n    oc.Name AS OwnerName,\n    COUNT(m.MaintenanceID) AS MaintenanceCount,\n    AVG(m.Cost) AS AvgMaintenanceCost,\n    AVG(m.DurationHours) AS AvgMaintenanceDuration\nFROM PowerPlant pp\nJOIN OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\nJOIN Maintenance m ON pp.PlantID = m.PlantID\nWHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\nGROUP BY pp.PlantID, pp.Name, pp.Type, oc.Name\nORDER BY MaintenanceCount DESC\nLIMIT 8;",
            "gigachat_response_ru": "SELECT \n    pp.Name AS PlantName,\n    pp.Type AS PlantType,\n    oc.Name AS OwnerName,\n    COUNT(m.MaintenanceID) AS MaintenanceCount,\n    AVG(m.Cost) AS AvgMaintenanceCost,\n    AVG(m.DurationHours) AS AvgMaintenanceDuration\nFROM PowerPlant pp\nJOIN Maintenance m ON pp.PlantID = m.PlantID\nJOIN OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\nWHERE m.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\nGROUP BY pp.PlantID, pp.Name, pp.Type, oc.Name\nORDER BY MaintenanceCount DESC\nLIMIT 8;"
        },
        {
            "question": "Какие топ-7 поставщиков имеют наибольшую разницу между максимальной и минимальной ценой в контрактах с промышленными потребителями, сгруппированные по типу продукта и стране происхождения?",
            "sql_query": "SELECT s.Name AS SupplierName, s.ProductRange, s.Country, (MAX(c.PricePerUnit) - MIN(c.PricePerUnit)) AS PriceRange FROM Supplier s JOIN `Contract` c ON s.SupplierID = c.SupplierID JOIN Consumer co ON c.ConsumerID = co.ConsumerID WHERE co.Type = 'Промышленность' AND c.Status = 'active' GROUP BY s.Name, s.ProductRange, s.Country HAVING PriceRange > 0 ORDER BY PriceRange DESC LIMIT 7;",
            "gpt-4o_response": "WITH IndustrialContracts AS (\n    SELECT \n        c.SupplierID,\n        c.PricePerUnit,\n        es.Type AS ProductType,\n        s.Country\n    FROM `Contract` c\n    JOIN Consumer con ON c.ConsumerID = con.ConsumerID\n    JOIN Supplier s ON c.SupplierID = s.SupplierID\n    JOIN EnergySource es ON s.SourceID = es.SourceID\n    WHERE con.Type = 'Промышленность'\n),\nPriceDifferences AS (\n    SELECT \n        ic.SupplierID,\n        ic.ProductType,\n        ic.Country,\n        MAX(ic.PricePerUnit) - MIN(ic.PricePerUnit) AS PriceDifference\n    FROM IndustrialContracts ic\n    GROUP BY ic.SupplierID, ic.ProductType, ic.Country\n)\nSELECT \n    s.Name AS SupplierName,\n    pd.ProductType,\n    pd.Country,\n    ROUND(pd.PriceDifference, 2) AS PriceDifference\nFROM PriceDifferences pd\nJOIN Supplier s ON pd.SupplierID = s.SupplierID\nORDER BY pd.PriceDifference DESC\nLIMIT 7;",
            "gpt-4o_response_ru": "WITH IndustrialContracts AS (\n    SELECT \n        c.SupplierID,\n        c.PricePerUnit,\n        es.Type AS ProductType,\n        s.Country\n    FROM `Contract` c\n    JOIN Consumer con ON c.ConsumerID = con.ConsumerID\n    JOIN Supplier s ON c.SupplierID = s.SupplierID\n    JOIN EnergySource es ON s.SourceID = es.SourceID\n    WHERE con.Type = 'Промышленность'\n),\nPriceDifferences AS (\n    SELECT \n        SupplierID,\n        ProductType,\n        Country,\n        MAX(PricePerUnit) - MIN(PricePerUnit) AS PriceDifference\n    FROM IndustrialContracts\n    GROUP BY SupplierID, ProductType, Country\n)\nSELECT \n    s.Name AS SupplierName,\n    pd.ProductType,\n    pd.Country,\n    pd.PriceDifference\nFROM PriceDifferences pd\nJOIN Supplier s ON pd.SupplierID = s.SupplierID\nORDER BY pd.PriceDifference DESC\nLIMIT 7;",
            "google/gemini-2.0-flash-001_response": "WITH SupplierPriceDifference AS (\n    SELECT\n        s.SupplierID,\n        s.Name AS SupplierName,\n        s.Country AS SupplierCountry,\n        es.Type AS EnergySourceType,\n        MIN(c.PricePerUnit) AS MinPrice,\n        MAX(c.PricePerUnit) AS MaxPrice,\n        (MAX(c.PricePerUnit) - MIN(c.PricePerUnit)) AS PriceDifference\n    FROM Supplier s\n    JOIN `Contract` c ON s.SupplierID = c.SupplierID\n    JOIN Consumer con ON c.ConsumerID = con.ConsumerID\n    JOIN EnergySource es ON s.SourceID = es.SourceID\n    WHERE con.Type = 'Промышленность'\n    GROUP BY s.SupplierID, s.Name, s.Country, es.Type\n)\nSELECT\n    spd.SupplierName,\n    spd.SupplierCountry,\n    spd.EnergySourceType,\n    spd.MinPrice,\n    spd.MaxPrice,\n    spd.PriceDifference\nFROM SupplierPriceDifference spd\nORDER BY spd.PriceDifference DESC\nLIMIT 7;",
            "google/gemini-2.0-flash-001_response_ru": "WITH IndustrialContracts AS (\n    SELECT\n        c.ContractID,\n        c.SupplierID,\n        c.PricePerUnit\n    FROM `Contract` c\n    JOIN Consumer con ON c.ConsumerID = con.ConsumerID\n    WHERE con.Type = 'Промышленность'\n),\nSupplierPriceRanges AS (\n    SELECT\n        s.SupplierID,\n        s.Name AS SupplierName,\n        s.Country AS SupplierCountry,\n        es.Type AS EnergySourceType,\n        MAX(ic.PricePerUnit) AS MaxPrice,\n        MIN(ic.PricePerUnit) AS MinPrice,\n        MAX(ic.PricePerUnit) - MIN(ic.PricePerUnit) AS PriceDifference\n    FROM Supplier s\n    JOIN EnergySource es ON s.SourceID = es.SourceID\n    JOIN IndustrialContracts ic ON s.SupplierID = ic.SupplierID\n    GROUP BY s.SupplierID, s.Name, s.Country, es.Type\n)\nSELECT\n    spr.SupplierName,\n    spr.SupplierCountry,\n    spr.EnergySourceType,\n    spr.MaxPrice,\n    spr.MinPrice,\n    spr.PriceDifference\nFROM SupplierPriceRanges spr\nORDER BY spr.PriceDifference DESC\nLIMIT 7;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH SupplierContracts AS (\n    SELECT \n        s.SupplierID,\n        s.Name AS SupplierName,\n        es.Type AS ProductType,\n        es.CountryOfOrigin,\n        ct.ConsumerID,\n        ct.PricePerUnit,\n        ct.StartDate,\n        ct.EndDate\n    FROM Supplier s\n    JOIN EnergySource es ON s.SourceID = es.SourceID\n    JOIN `Contract` ct ON s.SupplierID = ct.SupplierID\n    JOIN Consumer c ON ct.ConsumerID = c.ConsumerID\n    WHERE c.Type = 'Промышленность'\n),\nSupplierPriceRange AS (\n    SELECT \n        sc.SupplierID,\n        sc.SupplierName,\n        sc.ProductType,\n        sc.CountryOfOrigin,\n        MAX(sc.PricePerUnit) AS MaxPrice,\n        MIN(sc.PricePerUnit) AS MinPrice\n    FROM SupplierContracts sc\n    GROUP BY sc.SupplierID, sc.SupplierName, sc.ProductType, sc.CountryOfOrigin\n),\nSupplierPriceDiff AS (\n    SELECT \n        spr.SupplierID,\n        spr.SupplierName,\n        spr.ProductType,\n        spr.CountryOfOrigin,\n        spr.MaxPrice - spr.MinPrice AS PriceDiff\n    FROM SupplierPriceRange spr\n)\nSELECT \n    spd.SupplierName,\n    spd.ProductType,\n    spd.CountryOfOrigin,\n    ROUND(spd.PriceDiff, 2) AS PriceDiff\nFROM SupplierPriceDiff spd\nORDER BY spd.PriceDiff DESC\nLIMIT 7;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH SupplierContracts AS (\n    SELECT \n        s.SupplierID,\n        s.Name AS SupplierName,\n        es.Type AS EnergySourceType,\n        es.CountryOfOrigin AS CountryOfOrigin,\n        ct.ConsumerID,\n        ct.PricePerUnit,\n        c.Type AS ConsumerType\n    FROM Supplier s\n    JOIN EnergySource es ON s.SourceID = es.SourceID\n    JOIN `Contract` ct ON s.SupplierID = ct.SupplierID\n    JOIN Consumer c ON ct.ConsumerID = c.ConsumerID\n),\nIndustrialSuppliers AS (\n    SELECT \n        sc.SupplierID,\n        sc.SupplierName,\n        sc.EnergySourceType,\n        sc.CountryOfOrigin,\n        MIN(sc.PricePerUnit) AS MinPrice,\n        MAX(sc.PricePerUnit) AS MaxPrice\n    FROM SupplierContracts sc\n    WHERE sc.ConsumerType = 'Промышленность'\n    GROUP BY sc.SupplierID, sc.SupplierName, sc.EnergySourceType, sc.CountryOfOrigin\n),\nSupplierPriceDiff AS (\n    SELECT \n        isup.SupplierID,\n        isup.SupplierName,\n        isup.EnergySourceType,\n        isup.CountryOfOrigin,\n        isup.MaxPrice - isup.MinPrice AS PriceDiff\n    FROM IndustrialSuppliers isup\n)\nSELECT \n    spd.SupplierName,\n    spd.EnergySourceType,\n    spd.CountryOfOrigin,\n    ROUND(spd.PriceDiff, 2) AS PriceDiff\nFROM SupplierPriceDiff spd\nORDER BY spd.PriceDiff DESC\nLIMIT 7;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH IndustrialContracts AS (\n    SELECT \n        c.ContractID,\n        c.SupplierID,\n        c.PricePerUnit,\n        s.Name AS SupplierName,\n        es.Name AS ProductName,\n        es.Type AS ProductType,\n        s.Country,\n        c.ConsumerID,\n        cons.Type AS ConsumerType\n    FROM `Contract` c\n    JOIN Supplier s ON c.SupplierID = s.SupplierID\n    JOIN EnergySource es ON s.SourceID = es.SourceID\n    JOIN Consumer cons ON c.ConsumerID = cons.ConsumerID\n    WHERE cons.Type = 'Промышленность'\n),\nPriceRangeBySupplier AS (\n    SELECT \n        SupplierID,\n        SupplierName,\n        ProductName,\n        ProductType,\n        Country,\n        MAX(PricePerUnit) AS MaxPrice,\n        MIN(PricePerUnit) AS MinPrice,\n        MAX(PricePerUnit) - MIN(PricePerUnit) AS PriceDifference\n    FROM IndustrialContracts\n    GROUP BY SupplierID, SupplierName, ProductName, ProductType, Country\n)\nSELECT \n    SupplierName,\n    ProductName,\n    ProductType,\n    Country,\n    MaxPrice,\n    MinPrice,\n    PriceDifference\nFROM PriceRangeBySupplier\nORDER BY PriceDifference DESC\nLIMIT 7;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    s.Name AS SupplierName,\n    es.Type AS ProductType,\n    s.Country AS OriginCountry,\n    MAX(c.PricePerUnit) - MIN(c.PricePerUnit) AS PriceDifference,\n    COUNT(DISTINCT c.ContractID) AS ContractCount\nFROM Supplier s\nJOIN EnergySource es ON s.SourceID = es.SourceID\nJOIN `Contract` c ON s.SupplierID = c.SupplierID\nJOIN Consumer cons ON c.ConsumerID = cons.ConsumerID\nWHERE cons.Type = 'Промышленность'\nGROUP BY s.SupplierID, s.Name, es.Type, s.Country\nORDER BY PriceDifference DESC\nLIMIT 7;",
            "gigachat_response": "SELECT \n    s.Name AS SupplierName,\n    es.Type AS ProductType,\n    s.Country AS OriginCountry,\n    MAX(ct.PricePerUnit) - MIN(ct.PricePerUnit) AS PriceDifference\nFROM Supplier s\nJOIN EnergySource es ON s.SourceID = es.SourceID\nJOIN `Contract` ct ON s.SupplierID = ct.SupplierID\nWHERE ct.ConsumerType = 'Промышленность'\nGROUP BY s.SupplierID, s.Name, es.Type, s.Country\nORDER BY PriceDifference DESC\nLIMIT 7;",
            "gigachat_response_ru": "SELECT \n    s.Name AS SupplierName,\n    es.Type AS ProductType,\n    s.Country AS OriginCountry,\n    MAX(ct.PricePerUnit) - MIN(ct.PricePerUnit) AS PriceDifference\nFROM Supplier s\nJOIN EnergySource es ON s.SourceID = es.SourceID\nJOIN `Contract` ct ON s.SupplierID = ct.SupplierID\nWHERE ct.ConsumerID IN (\n    SELECT ConsumerID \n    FROM Consumer \n    WHERE Type = 'Промышленность'\n)\nGROUP BY s.Name, es.Type, s.Country\nORDER BY PriceDifference DESC\nLIMIT 7;"
        },
        {
            "question": "Какие топ-7 электростанций имеют наибольшее количество аудитов с несоответствиями за последние 2 года, сгруппированные по типу и владельцу, с указанием среднего количества рекомендаций на аудит?",
            "sql_query": "SELECT pp.Name AS PlantName, pp.Type, oc.Name AS OwnerName, COUNT(a.AuditID) AS AuditCount, AVG(LENGTH(a.Recommendations) - LENGTH(REPLACE(a.Recommendations, '.', ''))) AS AvgRecommendations FROM PowerPlant pp JOIN OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID JOIN `Audit` a ON pp.PlantID = a.PlantID WHERE a.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 2 YEAR) AND a.ComplianceStatus = 'Не соблюдено' GROUP BY pp.Name, pp.Type, oc.Name HAVING COUNT(a.AuditID) > 1 ORDER BY AuditCount DESC, AvgRecommendations DESC LIMIT 7;",
            "gpt-4o_response": "WITH NonCompliantAudits AS (\n    SELECT \n        a.PlantID,\n        COUNT(a.AuditID) AS NonCompliantAuditCount,\n        AVG(LENGTH(a.Recommendations) - LENGTH(REPLACE(a.Recommendations, ',', '')) + 1) AS AvgRecommendations\n    FROM `Audit` a\n    WHERE a.ComplianceStatus = 'Не соблюдено' AND a.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 2 YEAR)\n    GROUP BY a.PlantID\n),\nPlantDetails AS (\n    SELECT \n        pp.PlantID,\n        pp.Name AS PlantName,\n        pp.Type AS PlantType,\n        oc.Name AS OwnerName\n    FROM PowerPlant pp\n    JOIN OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\n)\nSELECT \n    pd.PlantName,\n    pd.PlantType,\n    pd.OwnerName,\n    nca.NonCompliantAuditCount,\n    ROUND(nca.AvgRecommendations, 2) AS AvgRecommendations\nFROM NonCompliantAudits nca\nJOIN PlantDetails pd ON nca.PlantID = pd.PlantID\nORDER BY nca.NonCompliantAuditCount DESC\nLIMIT 7;",
            "gpt-4o_response_ru": "WITH RecentNonCompliantAudits AS (\n    SELECT \n        a.PlantID,\n        COUNT(a.AuditID) AS NonCompliantAuditCount,\n        AVG(LENGTH(a.Recommendations) - LENGTH(REPLACE(a.Recommendations, ',', '')) + 1) AS AvgRecommendations\n    FROM `Audit` a\n    WHERE a.ComplianceStatus = 'Не соблюдено' AND a.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 2 YEAR)\n    GROUP BY a.PlantID\n),\nPlantDetails AS (\n    SELECT \n        pp.PlantID,\n        pp.Name AS PlantName,\n        pp.Type AS PlantType,\n        oc.Name AS OwnerName\n    FROM PowerPlant pp\n    JOIN OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\n)\nSELECT \n    pd.PlantName,\n    pd.PlantType,\n    pd.OwnerName,\n    rna.NonCompliantAuditCount,\n    ROUND(rna.AvgRecommendations, 2) AS AvgRecommendations\nFROM RecentNonCompliantAudits rna\nJOIN PlantDetails pd ON rna.PlantID = pd.PlantID\nORDER BY rna.NonCompliantAuditCount DESC\nLIMIT 7;",
            "google/gemini-2.0-flash-001_response": "WITH PlantAuditData AS (\n    SELECT\n        a.PlantID,\n        pp.Name AS PlantName,\n        pp.Type AS PlantType,\n        oc.Name AS OwnerCompanyName,\n        COUNT(a.AuditID) AS TotalAudits,\n        SUM(CASE WHEN a.ComplianceStatus != 'Соответствует' THEN 1 ELSE 0 END) AS NonComplianceAudits,\n        AVG(LENGTH(a.Recommendations) - LENGTH(REPLACE(a.Recommendations, ' ', '')) + 1) AS AvgRecommendationsPerAudit\n    FROM `Audit` a\n    JOIN PowerPlant pp ON a.PlantID = pp.PlantID\n    JOIN OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\n    WHERE a.Date >= DATE('now', '-2 year')\n    GROUP BY a.PlantID, pp.Name, pp.Type, oc.Name\n    HAVING SUM(CASE WHEN a.ComplianceStatus != 'Соответствует' THEN 1 ELSE 0 END) > 0\n),\nRankedPlantAuditData AS (\n    SELECT\n        PlantID,\n        PlantName,\n        PlantType,\n        OwnerCompanyName,\n        TotalAudits,\n        NonComplianceAudits,\n        AvgRecommendationsPerAudit,\n        RANK() OVER (ORDER BY NonComplianceAudits DESC) AS Rank\n    FROM PlantAuditData\n)\nSELECT\n    PlantName,\n    PlantType,\n    OwnerCompanyName,\n    TotalAudits,\n    NonComplianceAudits,\n    ROUND(AvgRecommendationsPerAudit, 2) AS AvgRecommendationsPerAudit\nFROM RankedPlantAuditData\nWHERE Rank <= 7\nORDER BY NonComplianceAudits DESC;",
            "google/gemini-2.0-flash-001_response_ru": "WITH AuditData AS (\n    SELECT\n        a.PlantID,\n        pp.Name AS PlantName,\n        pp.Type AS PlantType,\n        oc.Name AS OwnerCompanyName,\n        COUNT(a.AuditID) AS TotalAudits,\n        AVG(LENGTH(a.Recommendations) - LENGTH(REPLACE(a.Recommendations, ' ', '')) + 1) AS AvgRecommendationsPerAudit\n    FROM `Audit` a\n    JOIN PowerPlant pp ON a.PlantID = pp.PlantID\n    JOIN OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\n    WHERE a.ComplianceStatus = 'Не соблюдено' AND a.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 2 YEAR)\n    GROUP BY a.PlantID, pp.Name, pp.Type, oc.Name\n),\nRankedAuditData AS (\n    SELECT\n        PlantID,\n        PlantName,\n        PlantType,\n        OwnerCompanyName,\n        TotalAudits,\n        AvgRecommendationsPerAudit,\n        RANK() OVER (ORDER BY TotalAudits DESC) AS AuditRank\n    FROM AuditData\n)\nSELECT\n    PlantName,\n    PlantType,\n    OwnerCompanyName,\n    TotalAudits,\n    ROUND(AvgRecommendationsPerAudit, 2) AS AvgRecommendationsPerAudit\nFROM RankedAuditData\nWHERE AuditRank <= 7\nORDER BY TotalAudits DESC;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH PlantAudits AS (\n    SELECT \n        p.PlantID,\n        p.Name AS PlantName,\n        p.Type AS PlantType,\n        oc.Name AS OwnerName,\n        COUNT(a.AuditID) AS TotalAuditsCount,\n        AVG(a.Recommendations) AS AvgRecommendationsPerAudit\n    FROM PowerPlant p\n    JOIN OwnerCompany oc ON p.OwnerCompanyID = oc.CompanyID\n    JOIN `Audit` a ON p.PlantID = a.PlantID\n    WHERE a.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 2 YEAR) AND a.ComplianceStatus != 'Соответствует'\n    GROUP BY p.PlantID, p.Name, p.Type, oc.Name\n),\nRankedPlantAudits AS (\n    SELECT \n        pa.PlantName,\n        pa.PlantType,\n        pa.OwnerName,\n        pa.TotalAuditsCount,\n        pa.AvgRecommendationsPerAudit,\n        ROW_NUMBER() OVER (ORDER BY pa.TotalAuditsCount DESC) AS RowNum\n    FROM PlantAudits pa\n)\nSELECT \n    rpa.PlantName,\n    rpa.PlantType,\n    rpa.OwnerName,\n    rpa.TotalAuditsCount,\n    ROUND(rpa.AvgRecommendationsPerAudit, 2) AS AvgRecommendationsPerAudit\nFROM RankedPlantAudits rpa\nWHERE rpa.RowNum <= 7\nORDER BY rpa.TotalAuditsCount DESC;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH AuditAnalysis AS (\n    SELECT \n        a.PlantID,\n        p.Name AS PlantName,\n        p.Type AS PlantType,\n        oc.Name AS OwnerName,\n        COUNT(a.AuditID) AS TotalAuditsCount,\n        AVG(LENGTH(a.Recommendations)) AS AvgRecommendationsLength\n    FROM `Audit` a\n    JOIN PowerPlant p ON a.PlantID = p.PlantID\n    JOIN OwnerCompany oc ON p.OwnerCompanyID = oc.CompanyID\n    WHERE a.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 2 YEAR)\n    AND a.ComplianceStatus!= 'Соответствует'\n    GROUP BY a.PlantID, p.Name, p.Type, oc.Name\n),\nRankedAudits AS (\n    SELECT \n        aa.PlantName,\n        aa.PlantType,\n        aa.OwnerName,\n        aa.TotalAuditsCount,\n        aa.AvgRecommendationsLength,\n        ROW_NUMBER() OVER (ORDER BY aa.TotalAuditsCount DESC) AS RowNum\n    FROM AuditAnalysis aa\n)\nSELECT \n    ra.PlantName,\n    ra.PlantType,\n    ra.OwnerName,\n    ra.TotalAuditsCount,\n    ra.AvgRecommendationsLength\nFROM RankedAudits ra\nWHERE ra.RowNum <= 7\nORDER BY ra.TotalAuditsCount DESC;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    pp.Name AS PlantName,\n    pp.Type AS PlantType,\n    oc.Name AS OwnerName,\n    COUNT(a.AuditID) AS NonComplianceAuditsCount,\n    AVG(LENGTH(a.Recommendations) - LENGTH(REPLACE(a.Recommendations, ',', '')) + 1) AS AvgRecommendationsPerAudit\nFROM PowerPlant pp\nJOIN OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\nJOIN `Audit` a ON pp.PlantID = a.PlantID\nWHERE a.ComplianceStatus = 'Не соблюдено' \nAND a.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 2 YEAR)\nGROUP BY pp.Name, pp.Type, oc.Name\nORDER BY NonComplianceAuditsCount DESC\nLIMIT 7;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    pp.Name AS PlantName,\n    pp.Type AS PlantType,\n    oc.Name AS OwnerName,\n    COUNT(a.AuditID) AS NonComplianceAuditsCount,\n    AVG(LENGTH(a.Recommendations) - LENGTH(REPLACE(a.Recommendations, ',', '')) + 1) AS AvgRecommendationsPerAudit\nFROM PowerPlant pp\nJOIN OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\nJOIN `Audit` a ON pp.PlantID = a.PlantID\nWHERE a.ComplianceStatus = 'Не соблюдено' \nAND a.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 2 YEAR)\nGROUP BY pp.PlantID, pp.Name, pp.Type, oc.Name\nORDER BY NonComplianceAuditsCount DESC\nLIMIT 7;",
            "gigachat_response": "SELECT \n    pp.Name AS PlantName,\n    pp.Type AS PlantType,\n    oc.Name AS OwnerName,\n    COUNT(a.AuditID) AS NonComplianceAuditsCount,\n    AVG((LENGTH(a.Recommendations) - LENGTH(REPLACE(a.Recommendations, '.', ''))) + 1) AS AvgRecommendationsPerAudit\nFROM PowerPlant pp\nJOIN OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\nJOIN `Audit` a ON pp.PlantID = a.PlantID\nWHERE a.ComplianceStatus != 'Соблюдено' AND a.Date >= DATE_SUB(CURRENT_DATE, INTERVAL 2 YEAR)\nGROUP BY pp.PlantID, pp.Name, pp.Type, oc.Name\nORDER BY NonComplianceAuditsCount DESC\nLIMIT 7;",
            "gigachat_response_ru": "SELECT \n    pp.PlantID,\n    pp.Name AS PlantName,\n    pp.Type AS PlantType,\n    oc.Name AS OwnerName,\n    COUNT(a.AuditID) AS NonComplianceAuditsCount,\n    AVG((LENGTH(a.Recommendations)-LENGTH(REPLACE(a.Recommendations,'.','')))+1) AS AvgRecommendationsPerAudit\nFROM PowerPlant pp\nJOIN OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\nJOIN `Audit` a ON pp.PlantID = a.PlantID\nWHERE a.ComplianceStatus != 'Соблюдено' AND a.Date >= DATE_SUB(NOW(), INTERVAL 2 YEAR)\nGROUP BY pp.PlantID, pp.Name, pp.Type, oc.Name\nORDER BY NonComplianceAuditsCount DESC\nLIMIT 7;"
        },
        {
            "question": "Какие топ-8 поставщиков имеют наибольшую разницу между рейтингом и средней ценой контрактов, сгруппированные по типу продукта и стране, с учетом только активных контрактов?",
            "sql_query": "SELECT s.Name AS SupplierName, s.ProductRange, s.Country, (s.Rating - AVG(c.PricePerUnit)) AS RatingPriceDiff FROM Supplier s JOIN `Contract` c ON s.SupplierID = c.SupplierID WHERE c.Status = 'active' GROUP BY s.Name, s.ProductRange, s.Country, s.Rating HAVING RatingPriceDiff > 0 ORDER BY RatingPriceDiff DESC LIMIT 8;",
            "gpt-4o_response": "WITH ActiveContracts AS (\n    SELECT \n        c.SupplierID,\n        AVG(c.PricePerUnit) AS AvgPricePerUnit\n    FROM `Contract` c\n    WHERE c.Status = 'active'\n    GROUP BY c.SupplierID\n),\nSupplierDifference AS (\n    SELECT \n        s.SupplierID,\n        s.Name AS SupplierName,\n        s.Country,\n        s.ProductRange,\n        s.Rating,\n        ac.AvgPricePerUnit,\n        (s.Rating - ac.AvgPricePerUnit) AS RatingPriceDifference\n    FROM Supplier s\n    JOIN ActiveContracts ac ON s.SupplierID = ac.SupplierID\n)\nSELECT \n    sd.SupplierName,\n    sd.Country,\n    sd.ProductRange,\n    sd.Rating,\n    sd.AvgPricePerUnit,\n    ROUND(sd.RatingPriceDifference, 2) AS RatingPriceDifference\nFROM SupplierDifference sd\nORDER BY sd.RatingPriceDifference DESC\nLIMIT 8;",
            "gpt-4o_response_ru": "WITH ActiveContracts AS (\n    SELECT \n        c.SupplierID,\n        c.PricePerUnit\n    FROM `Contract` c\n    WHERE c.Status = 'active'\n),\nSupplierAveragePrice AS (\n    SELECT \n        ac.SupplierID,\n        AVG(ac.PricePerUnit) AS AvgPrice\n    FROM ActiveContracts ac\n    GROUP BY ac.SupplierID\n),\nSupplierDifference AS (\n    SELECT \n        s.SupplierID,\n        s.Name AS SupplierName,\n        s.Country,\n        s.ProductRange,\n        s.Rating,\n        sap.AvgPrice,\n        (s.Rating - sap.AvgPrice) AS RatingPriceDifference\n    FROM Supplier s\n    JOIN SupplierAveragePrice sap ON s.SupplierID = sap.SupplierID\n)\nSELECT \n    sd.SupplierName,\n    sd.Country,\n    sd.ProductRange,\n    sd.Rating,\n    sd.AvgPrice,\n    sd.RatingPriceDifference\nFROM SupplierDifference sd\nORDER BY sd.RatingPriceDifference DESC\nLIMIT 8;",
            "google/gemini-2.0-flash-001_response": "WITH SupplierContractPrices AS (\n    SELECT\n        s.SupplierID,\n        s.Name AS SupplierName,\n        s.Country,\n        es.Type AS EnergySourceType,\n        s.Rating,\n        AVG(c.PricePerUnit) AS AvgPricePerUnit\n    FROM Supplier s\n    JOIN EnergySource es ON s.SourceID = es.SourceID\n    JOIN `Contract` c ON s.SupplierID = c.SupplierID\n    WHERE c.Status = 'active'\n    GROUP BY s.SupplierID, s.Name, s.Country, es.Type, s.Rating\n)\nSELECT\n    scp.SupplierName,\n    scp.Country,\n    scp.EnergySourceType,\n    scp.Rating,\n    scp.AvgPricePerUnit,\n    (scp.Rating - scp.AvgPricePerUnit) AS RatingPriceDifference\nFROM SupplierContractPrices scp\nORDER BY RatingPriceDifference DESC\nLIMIT 8;",
            "google/gemini-2.0-flash-001_response_ru": "WITH SupplierContractPrices AS (\n    SELECT\n        s.SupplierID,\n        s.Name AS SupplierName,\n        s.Country,\n        es.Type AS ProductType,\n        s.Rating,\n        AVG(c.PricePerUnit) AS AvgPricePerUnit\n    FROM Supplier s\n    JOIN EnergySource es ON s.SourceID = es.SourceID\n    JOIN `Contract` c ON s.SupplierID = c.SupplierID\n    WHERE c.Status = 'active'\n    GROUP BY s.SupplierID, s.Name, s.Country, es.Type, s.Rating\n),\nRatingPriceDifference AS (\n    SELECT\n        SupplierID,\n        SupplierName,\n        Country,\n        ProductType,\n        Rating,\n        AvgPricePerUnit,\n        (Rating - AvgPricePerUnit) AS RatingPriceDifference\n    FROM SupplierContractPrices\n)\nSELECT\n    rpd.SupplierName,\n    rpd.Country,\n    rpd.ProductType,\n    rpd.Rating,\n    rpd.AvgPricePerUnit,\n    rpd.RatingPriceDifference\nFROM RatingPriceDifference rpd\nORDER BY rpd.RatingPriceDifference DESC\nLIMIT 8;",
            "meta-llama/llama-3.3-70b-instruct_response": "WITH SupplierContractAnalysis AS (\n    SELECT \n        s.SupplierID,\n        s.Name AS SupplierName,\n        s.Rating,\n        es.Type AS EnergySourceType,\n        es.CountryOfOrigin,\n        AVG(ct.PricePerUnit) AS AvgContractPrice,\n        COUNT(DISTINCT ct.ContractID) AS ActiveContractsCount\n    FROM Supplier s\n    JOIN EnergySource es ON s.SourceID = es.SourceID\n    JOIN `Contract` ct ON s.SupplierID = ct.SupplierID\n    WHERE ct.Status = 'active'\n    GROUP BY s.SupplierID, s.Name, s.Rating, es.Type, es.CountryOfOrigin\n),\nSupplierRatingPriceDiff AS (\n    SELECT \n        sca.SupplierID,\n        sca.SupplierName,\n        sca.Rating,\n        sca.EnergySourceType,\n        sca.CountryOfOrigin,\n        sca.AvgContractPrice,\n        ABS(sca.Rating - sca.AvgContractPrice) AS RatingPriceDiff\n    FROM SupplierContractAnalysis sca\n)\nSELECT \n    srpd.SupplierName,\n    srpd.EnergySourceType,\n    srpd.CountryOfOrigin,\n    srpd.Rating,\n    srpd.AvgContractPrice,\n    srpd.RatingPriceDiff\nFROM SupplierRatingPriceDiff srpd\nORDER BY srpd.RatingPriceDiff DESC\nLIMIT 8;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "WITH SupplierContracts AS (\n    SELECT \n        s.SupplierID,\n        s.Name AS SupplierName,\n        s.Rating,\n        es.Type AS EnergySourceType,\n        es.CountryOfOrigin AS Country,\n        AVG(ct.PricePerUnit) AS AvgContractPrice\n    FROM Supplier s\n    JOIN EnergySource es ON s.SourceID = es.SourceID\n    JOIN `Contract` ct ON s.SupplierID = ct.SupplierID\n    WHERE ct.Status = 'active'\n    GROUP BY s.SupplierID, s.Name, s.Rating, es.Type, es.CountryOfOrigin\n),\nSupplierRatingPriceDiff AS (\n    SELECT \n        sc.SupplierName,\n        sc.EnergySourceType,\n        sc.Country,\n        sc.Rating,\n        sc.AvgContractPrice,\n        sc.Rating - sc.AvgContractPrice AS RatingPriceDiff\n    FROM SupplierContracts sc\n)\nSELECT \n    srpd.SupplierName,\n    srpd.EnergySourceType,\n    srpd.Country,\n    srpd.Rating,\n    srpd.AvgContractPrice,\n    srpd.RatingPriceDiff\nFROM SupplierRatingPriceDiff srpd\nORDER BY srpd.RatingPriceDiff DESC\nLIMIT 8;",
            "deepseek/deepseek-chat-v3-0324_response": "WITH SupplierContractStats AS (\n    SELECT \n        s.SupplierID,\n        s.Name AS SupplierName,\n        s.Country,\n        es.Type AS ProductType,\n        s.Rating,\n        AVG(c.PricePerUnit) AS AvgContractPrice,\n        COUNT(c.ContractID) AS ActiveContractsCount\n    FROM Supplier s\n    JOIN EnergySource es ON s.SourceID = es.SourceID\n    JOIN `Contract` c ON s.SupplierID = c.SupplierID\n    WHERE c.Status = 'active'\n    GROUP BY s.SupplierID, s.Name, s.Country, es.Type, s.Rating\n)\nSELECT \n    SupplierName,\n    Country,\n    ProductType,\n    Rating,\n    ROUND(AvgContractPrice, 2) AS AvgContractPrice,\n    ROUND(Rating - AvgContractPrice, 2) AS RatingPriceDifference,\n    ActiveContractsCount\nFROM SupplierContractStats\nORDER BY RatingPriceDifference DESC\nLIMIT 8;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "WITH SupplierContractStats AS (\n    SELECT \n        s.SupplierID,\n        s.Name AS SupplierName,\n        s.Country,\n        es.Type AS ProductType,\n        s.Rating,\n        AVG(c.PricePerUnit) AS AvgContractPrice,\n        s.Rating - AVG(c.PricePerUnit) AS RatingPriceDifference\n    FROM Supplier s\n    JOIN EnergySource es ON s.SourceID = es.SourceID\n    JOIN `Contract` c ON s.SupplierID = c.SupplierID\n    WHERE c.Status = 'active'\n    GROUP BY s.SupplierID, s.Name, s.Country, es.Type, s.Rating\n)\nSELECT \n    SupplierName,\n    Country,\n    ProductType,\n    Rating,\n    ROUND(AvgContractPrice, 2) AS AvgContractPrice,\n    ROUND(RatingPriceDifference, 2) AS RatingPriceDifference\nFROM SupplierContractStats\nORDER BY RatingPriceDifference DESC\nLIMIT 8;",
            "gigachat_response": "SELECT \n    s.SupplierID,\n    s.Name AS SupplierName,\n    s.Country,\n    es.Type AS ProductType,\n    AVG(ct.PricePerUnit) AS AvgContractPrice,\n    s.Rating,\n    ABS(AVG(ct.PricePerUnit) - s.Rating) AS Difference\nFROM Supplier s\nJOIN EnergySource es ON s.SourceID = es.SourceID\nJOIN `Contract` ct ON s.SupplierID = ct.SupplierID\nWHERE ct.Status = 'active'\nGROUP BY s.SupplierID, s.Name, s.Country, es.Type, s.Rating\nORDER BY Difference DESC\nLIMIT 8;",
            "gigachat_response_ru": "SELECT \n    s.Name AS SupplierName,\n    es.Type AS ProductType,\n    s.Country AS Country,\n    s.Rating AS SupplierRating,\n    AVG(ct.PricePerUnit) AS AvgContractPrice,\n    s.Rating - AVG(ct.PricePerUnit) AS Difference\nFROM Supplier s\nJOIN EnergySource es ON s.SourceID = es.SourceID\nJOIN `Contract` ct ON s.SupplierID = ct.SupplierID\nWHERE ct.Status = 'active'\nGROUP BY s.SupplierID, s.Name, es.Type, s.Country, s.Rating\nORDER BY ABS(Difference) DESC\nLIMIT 8;"
        },
        {
            "question": "Какие электростанции и их владельцы выбросили более 1000 тонн CO2 в 2023 году?",
            "sql_query": "SELECT pp.Name AS PlantName, oc.Name AS OwnerName, SUM(e.CO2Emissions) AS TotalCO2Emissions FROM PowerPlant pp JOIN OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID JOIN Emission e ON pp.PlantID = e.PlantID WHERE e.Date BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY pp.Name, oc.Name HAVING SUM(e.CO2Emissions) > 1000;",
            "gpt-4o_response": "SELECT \n    pp.Name AS PlantName,\n    oc.Name AS OwnerCompanyName,\n    SUM(e.CO2Emissions) AS TotalCO2Emissions\nFROM \n    PowerPlant pp\nJOIN \n    Emission e ON pp.PlantID = e.PlantID\nJOIN \n    OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\nWHERE \n    e.Date BETWEEN '2023-01-01' AND '2023-12-31'\nGROUP BY \n    pp.PlantID, pp.Name, oc.Name\nHAVING \n    SUM(e.CO2Emissions) > 1000;",
            "gpt-4o_response_ru": "SELECT \n    pp.Name AS PowerPlantName,\n    oc.Name AS OwnerCompanyName,\n    SUM(e.CO2Emissions) AS TotalCO2Emissions\nFROM \n    PowerPlant pp\nJOIN \n    Emission e ON pp.PlantID = e.PlantID\nJOIN \n    OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\nWHERE \n    e.Date BETWEEN '2023-01-01' AND '2023-12-31'\nGROUP BY \n    pp.PlantID, pp.Name, oc.Name\nHAVING \n    SUM(e.CO2Emissions) > 1000;",
            "google/gemini-2.0-flash-001_response": "SELECT\n    pp.Name AS PlantName,\n    oc.Name AS OwnerCompanyName\nFROM\n    Emission e\nJOIN\n    PowerPlant pp ON e.PlantID = pp.PlantID\nJOIN\n    OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\nWHERE\n    e.Date BETWEEN '2023-01-01' AND '2023-12-31'\n    AND e.CO2Emissions > 1000;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    pp.Name AS PlantName,\n    oc.Name AS OwnerCompanyName\nFROM\n    Emission e\nJOIN\n    PowerPlant pp ON e.PlantID = pp.PlantID\nJOIN\n    OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\nWHERE\n    e.Date BETWEEN '2023-01-01' AND '2023-12-31'\nGROUP BY\n    pp.PlantID, pp.Name, oc.Name\nHAVING\n    SUM(e.CO2Emissions) > 1000;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    pp.Name AS PlantName,\n    oc.Name AS OwnerName,\n    SUM(e.CO2Emissions) AS TotalCO2Emissions\nFROM PowerPlant pp\nJOIN OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\nJOIN Emission e ON pp.PlantID = e.PlantID\nWHERE YEAR(e.Date) = 2023\nGROUP BY pp.Name, oc.Name\nHAVING SUM(e.CO2Emissions) > 1000",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    pp.Name AS PlantName,\n    oc.Name AS OwnerName,\n    SUM(e.CO2Emissions) AS TotalCO2Emissions\nFROM PowerPlant pp\nJOIN OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\nJOIN Emission e ON pp.PlantID = e.PlantID\nWHERE YEAR(e.Date) = 2023\nGROUP BY pp.Name, oc.Name\nHAVING SUM(e.CO2Emissions) > 1000\nORDER BY TotalCO2Emissions DESC;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    pp.Name AS PlantName,\n    oc.Name AS OwnerName,\n    e.CO2Emissions,\n    e.Date\nFROM \n    PowerPlant pp\nJOIN \n    OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\nJOIN \n    Emission e ON pp.PlantID = e.PlantID\nWHERE \n    e.CO2Emissions > 1000\n    AND YEAR(e.Date) = 2023\nORDER BY \n    e.CO2Emissions DESC;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    pp.Name AS PowerPlantName,\n    oc.Name AS OwnerCompanyName,\n    e.CO2Emissions\nFROM PowerPlant pp\nJOIN OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\nJOIN Emission e ON pp.PlantID = e.PlantID\nWHERE e.Date BETWEEN '2023-01-01' AND '2023-12-31'\nAND e.CO2Emissions > 1000\nORDER BY e.CO2Emissions DESC;",
            "gigachat_response": "SELECT \n    pp.Name AS PlantName,\n    oc.Name AS OwnerName,\n    e.CO2Emissions\nFROM PowerPlant pp\nJOIN OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\nJOIN Emission e ON pp.PlantID = e.PlantID\nWHERE e.Date >= '2023-01-01' AND e.Date <= '2023-12-31' AND e.CO2Emissions > 1000;",
            "gigachat_response_ru": "SELECT \n    pp.Name AS PlantName,\n    oc.Name AS OwnerName,\n    e.CO2Emissions\nFROM \n    PowerPlant pp\nJOIN \n    OwnerCompany oc ON pp.OwnerCompanyID = oc.CompanyID\nJOIN \n    Emission e ON pp.PlantID = e.PlantID\nWHERE \n    e.Date >= '2023-01-01' \n    AND e.Date <= '2023-12-31'\n    AND e.CO2Emissions > 1000;"
        },
        {
            "question": "Какие линии электропередач напряжением 500kV и их владельцы имеют более одной линии?",
            "sql_query": "SELECT tl.Name AS TransmissionLineName, oc.Name AS OwnerName, COUNT(tl.LineID) AS LineCount FROM TransmissionLine tl JOIN OwnerCompany oc ON tl.OwnerCompanyID = oc.CompanyID WHERE tl.VoltageLevel = 500 GROUP BY tl.Name, oc.Name HAVING COUNT(tl.LineID) > 1;",
            "gpt-4o_response": "WITH Voltage500kVLines AS (\n    SELECT \n        tl.LineID,\n        tl.Name AS LineName,\n        tl.OwnerCompanyID,\n        tl.VoltageLevel\n    FROM TransmissionLine tl\n    WHERE tl.VoltageLevel = '500kV'\n),\nOwnerLineCount AS (\n    SELECT \n        tl.OwnerCompanyID,\n        COUNT(tl.LineID) AS LineCount\n    FROM TransmissionLine tl\n    GROUP BY tl.OwnerCompanyID\n    HAVING COUNT(tl.LineID) > 1\n)\nSELECT \n    v500.LineName,\n    oc.Name AS OwnerCompanyName,\n    oc.Headquarters,\n    oc.CEO,\n    oc.Revenue,\n    oc.Employees\nFROM Voltage500kVLines v500\nJOIN OwnerLineCount olc ON v500.OwnerCompanyID = olc.OwnerCompanyID\nJOIN OwnerCompany oc ON v500.OwnerCompanyID = oc.CompanyID;",
            "gpt-4o_response_ru": "SELECT \n    tl.Name AS TransmissionLineName,\n    oc.Name AS OwnerCompanyName,\n    tl.VoltageLevel,\n    COUNT(tl.LineID) AS LineCount\nFROM TransmissionLine tl\nJOIN OwnerCompany oc ON tl.OwnerCompanyID = oc.CompanyID\nWHERE tl.VoltageLevel = '500kV'\nGROUP BY tl.OwnerCompanyID, tl.Name, oc.Name, tl.VoltageLevel\nHAVING COUNT(tl.LineID) > 1;",
            "google/gemini-2.0-flash-001_response": "SELECT \n    tl.Name AS LineName,\n    oc.Name AS OwnerCompanyName,\n    COUNT(tl.LineID) AS NumberOfLines\nFROM TransmissionLine tl\nJOIN OwnerCompany oc ON tl.OwnerCompanyID = oc.CompanyID\nWHERE tl.VoltageLevel = '500kV'\nGROUP BY tl.OwnerCompanyID\nHAVING COUNT(tl.LineID) > 1;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT \n    tl.Name AS LineName,\n    oc.Name AS OwnerCompanyName,\n    tl.VoltageLevel,\n    COUNT(tl.LineID) AS NumberOfLines\nFROM TransmissionLine tl\nJOIN OwnerCompany oc ON tl.OwnerCompanyID = oc.CompanyID\nWHERE tl.VoltageLevel = '500kV'\nGROUP BY tl.OwnerCompanyID\nHAVING COUNT(tl.LineID) > 1;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    tl.Name AS TransmissionLineName, \n    oc.Name AS OwnerCompanyName, \n    COUNT(tl.LineID) AS NumberOfLines\nFROM TransmissionLine tl\nJOIN OwnerCompany oc ON tl.OwnerCompanyID = oc.CompanyID\nWHERE tl.VoltageLevel = 'ВЧ'\nGROUP BY tl.Name, oc.Name\nHAVING COUNT(tl.LineID) > 1;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    t.LineID,\n    t.Name,\n    oc.Name AS OwnerName,\n    COUNT(t.LineID) AS TotalLinesCount\nFROM \n    TransmissionLine t\nJOIN \n    OwnerCompany oc ON t.OwnerCompanyID = oc.CompanyID\nWHERE \n    t.VoltageLevel = 'ВЧ'\nGROUP BY \n    t.LineID, t.Name, oc.Name\nHAVING \n    COUNT(t.LineID) > 1",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    tl.Name AS TransmissionLineName,\n    oc.Name AS OwnerCompanyName,\n    tl.VoltageLevel,\n    COUNT(tl.LineID) OVER (PARTITION BY tl.OwnerCompanyID) AS LineCount\nFROM \n    TransmissionLine tl\nJOIN \n    OwnerCompany oc ON tl.OwnerCompanyID = oc.CompanyID\nWHERE \n    tl.VoltageLevel = '500kV'\n    AND tl.OwnerCompanyID IN (\n        SELECT OwnerCompanyID \n        FROM TransmissionLine \n        WHERE VoltageLevel = '500kV'\n        GROUP BY OwnerCompanyID \n        HAVING COUNT(LineID) > 1\n    )\nORDER BY \n    oc.Name;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT tl.Name AS LineName, tl.VoltageLevel, oc.Name AS OwnerName, COUNT(tl.LineID) AS LineCount \nFROM TransmissionLine tl \nJOIN OwnerCompany oc ON tl.OwnerCompanyID = oc.CompanyID \nWHERE tl.VoltageLevel = 'ВЧ' \nGROUP BY tl.Name, tl.VoltageLevel, oc.Name \nHAVING COUNT(tl.LineID) > 1;",
            "gigachat_response": "SELECT \n    tl.Name AS LineName,\n    oc.Name AS OwnerCompanyName,\n    COUNT(*) AS NumberOfLines\nFROM \n    TransmissionLine tl\nJOIN \n    OwnerCompany oc ON tl.OwnerCompanyID = oc.CompanyID\nWHERE \n    tl.VoltageLevel = '500'\nGROUP BY \n    tl.OwnerCompanyID, tl.Name, oc.Name\nHAVING \n    COUNT(*) > 1;",
            "gigachat_response_ru": "SELECT \n    tl.Name AS LineName,\n    oc.Name AS OwnerCompanyName,\n    COUNT(*) AS NumberOfLines\nFROM \n    TransmissionLine tl\nJOIN \n    OwnerCompany oc ON tl.OwnerCompanyID = oc.CompanyID\nWHERE \n    tl.VoltageLevel = '500'\nGROUP BY \n    tl.Name, oc.Name\nHAVING \n    COUNT(*) > 1;"
        },
        {
            "question": "Какие подстанции и их владельцы имеют максимальную мощность более 200 МВт и находятся в эксплуатации?",
            "sql_query": "SELECT s.Name AS SubstationName, oc.Name AS OwnerName, MAX(s.CapacityMW) AS MaxCapacity FROM Substation s JOIN OwnerCompany oc ON s.OwnerCompanyID = oc.CompanyID WHERE s.Status = 'Активна' GROUP BY s.Name, oc.Name HAVING MAX(s.CapacityMW) > 200;",
            "gpt-4o_response": "SELECT \n    s.Name AS SubstationName,\n    s.Location,\n    s.CapacityMW,\n    s.Status,\n    oc.Name AS OwnerCompanyName,\n    oc.Headquarters\nFROM Substation s\nJOIN OwnerCompany oc ON s.OwnerCompanyID = oc.CompanyID\nWHERE s.CapacityMW > 200 AND s.Status = 'Активна';",
            "gpt-4o_response_ru": "SELECT \n    s.Name AS SubstationName,\n    s.Location,\n    s.CapacityMW,\n    s.Status,\n    oc.Name AS OwnerCompanyName,\n    oc.Headquarters,\n    oc.CEO\nFROM \n    Substation s\nJOIN \n    OwnerCompany oc ON s.OwnerCompanyID = oc.CompanyID\nWHERE \n    s.CapacityMW > 200\n    AND s.Status = 'Активна';",
            "google/gemini-2.0-flash-001_response": "SELECT\n    s.Name AS SubstationName,\n    oc.Name AS OwnerCompanyName,\n    s.CapacityMW,\n    s.Location\nFROM\n    Substation s\nJOIN\n    OwnerCompany oc ON s.OwnerCompanyID = oc.CompanyID\nWHERE\n    s.CapacityMW > 200\n    AND s.Status = 'Активна';",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    s.Name AS SubstationName,\n    oc.Name AS OwnerCompanyName,\n    s.CapacityMW,\n    s.Location\nFROM\n    Substation s\nJOIN\n    OwnerCompany oc ON s.OwnerCompanyID = oc.CompanyID\nWHERE\n    s.CapacityMW > 200\n    AND s.Status = 'Активна';",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    s.Name AS SubstationName,\n    oc.Name AS OwnerName,\n    s.CapacityMW,\n    s.Status\nFROM Substation s\nJOIN OwnerCompany oc ON s.OwnerCompanyID = oc.CompanyID\nWHERE s.CapacityMW > 200 AND s.Status = 'Активна';",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    s.Name AS SubstationName, \n    oc.Name AS OwnerCompanyName, \n    s.CapacityMW, \n    s.Status\nFROM Substation s\nJOIN OwnerCompany oc ON s.OwnerCompanyID = oc.CompanyID\nWHERE s.CapacityMW > 200 AND s.Status = 'Активна'\nORDER BY s.CapacityMW DESC;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    s.Name AS SubstationName, \n    s.CapacityMW, \n    oc.Name AS OwnerCompanyName, \n    oc.Headquarters, \n    oc.CEO\nFROM \n    Substation s\nJOIN \n    OwnerCompany oc ON s.OwnerCompanyID = oc.CompanyID\nWHERE \n    s.CapacityMW > 200 \n    AND s.Status = 'Активна'\nORDER BY \n    s.CapacityMW DESC;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT s.Name AS SubstationName, s.CapacityMW, oc.Name AS OwnerCompanyName\nFROM Substation s\nJOIN OwnerCompany oc ON s.OwnerCompanyID = oc.CompanyID\nWHERE s.CapacityMW > 200 AND s.Status = 'Активна'\nORDER BY s.CapacityMW DESC;",
            "gigachat_response": "SELECT ss.Name AS SubstationName, oc.Name AS OwnerCompanyName\nFROM Substation ss\nJOIN OwnerCompany oc ON ss.OwnerCompanyID = oc.CompanyID\nWHERE ss.CapacityMW > 200 AND ss.Status = 'Активна';",
            "gigachat_response_ru": "SELECT \n    s.Name AS SubstationName,\n    oc.Name AS OwnerCompanyName\nFROM \n    Substation s\nJOIN \n    OwnerCompany oc ON s.OwnerCompanyID = oc.CompanyID\nWHERE \n    s.CapacityMW > 200 \nAND \n    s.Status = 'Активна';"
        },
        {
            "question": "Какие потребители имеют более одного счетчика и общие показания счетчиков?",
            "sql_query": "SELECT c.Name AS ConsumerName, COUNT(m.MeterID) AS MeterCount, SUM(m.LastReading) AS TotalReading FROM Consumer c JOIN Meter m ON c.ConsumerID = m.ConsumerID WHERE m.Status = 'Активен' GROUP BY c.Name HAVING COUNT(m.MeterID) > 1;",
            "gpt-4o_response": "SELECT \n    c.Name AS ConsumerName,\n    c.Location AS ConsumerLocation,\n    COUNT(m.MeterID) AS MeterCount,\n    SUM(m.LastReading) AS TotalMeterReadings\nFROM \n    Consumer c\nJOIN \n    Meter m ON c.ConsumerID = m.ConsumerID\nGROUP BY \n    c.ConsumerID, c.Name, c.Location\nHAVING \n    COUNT(m.MeterID) > 1;",
            "gpt-4o_response_ru": "SELECT \n    c.Name AS ConsumerName,\n    c.ContactName,\n    c.ContactEmail,\n    COUNT(m.MeterID) AS MeterCount,\n    SUM(m.LastReading) AS TotalMeterReadings\nFROM \n    Consumer c\nJOIN \n    Meter m ON c.ConsumerID = m.ConsumerID\nGROUP BY \n    c.ConsumerID, c.Name, c.ContactName, c.ContactEmail\nHAVING \n    COUNT(m.MeterID) > 1;",
            "google/gemini-2.0-flash-001_response": "SELECT \n    c.Name AS ConsumerName,\n    COUNT(m.MeterID) AS MeterCount,\n    SUM(m.LastReading) AS TotalLastReading\nFROM Consumer c\nJOIN Meter m ON c.ConsumerID = m.ConsumerID\nGROUP BY c.ConsumerID, c.Name\nHAVING COUNT(m.MeterID) > 1;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT \n    c.Name AS ConsumerName,\n    c.ContactName,\n    COUNT(m.MeterID) AS MeterCount,\n    SUM(m.LastReading) AS TotalMeterReading\nFROM Consumer c\nJOIN Meter m ON c.ConsumerID = m.ConsumerID\nGROUP BY c.ConsumerID, c.Name, c.ContactName\nHAVING COUNT(m.MeterID) > 1\nORDER BY TotalMeterReading DESC;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    c.Name AS ConsumerName,\n    c.Type AS ConsumerType,\n    c.Location AS ConsumerLocation,\n    COUNT(m.MeterID) AS MeterCount,\n    SUM(m.LastReading) AS TotalMeterReadings\nFROM Consumer c\nJOIN Meter m ON c.ConsumerID = m.ConsumerID\nGROUP BY c.Name, c.Type, c.Location\nHAVING COUNT(m.MeterID) > 1\nORDER BY MeterCount DESC;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    c.Name AS ConsumerName,\n    COUNT(m.MeterID) AS MeterCount,\n    SUM(m.LastReading) AS TotalMeterReadings\nFROM Consumer c\nJOIN Meter m ON c.ConsumerID = m.ConsumerID\nGROUP BY c.Name\nHAVING COUNT(m.MeterID) > 1\nORDER BY MeterCount DESC;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    c.ConsumerID,\n    c.Name AS ConsumerName,\n    c.Type AS ConsumerType,\n    COUNT(m.MeterID) AS MeterCount,\n    SUM(m.LastReading) AS TotalMeterReading\nFROM \n    Consumer c\nJOIN \n    Meter m ON c.ConsumerID = m.ConsumerID\nGROUP BY \n    c.ConsumerID, c.Name, c.Type\nHAVING \n    COUNT(m.MeterID) > 1\nORDER BY \n    TotalMeterReading DESC;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    c.ConsumerID,\n    c.Name AS ConsumerName,\n    c.Type AS ConsumerType,\n    COUNT(m.MeterID) AS MeterCount,\n    SUM(m.LastReading) AS TotalMeterReading\nFROM \n    Consumer c\nJOIN \n    Meter m ON c.ConsumerID = m.ConsumerID\nGROUP BY \n    c.ConsumerID, c.Name, c.Type\nHAVING \n    COUNT(m.MeterID) > 1\nORDER BY \n    TotalMeterReading DESC;",
            "gigachat_response": "SELECT \n    c.Name AS ConsumerName,\n    COUNT(m.MeterID) AS NumberOfMeters,\n    SUM(m.LastReading) AS TotalMeterReadings\nFROM \n    Consumer c\nJOIN \n    Meter m ON c.ConsumerID = m.ConsumerID\nGROUP BY \n    c.ConsumerID, c.Name\nHAVING \n    COUNT(m.MeterID) > 1\nORDER BY \n    NumberOfMeters DESC;",
            "gigachat_response_ru": "SELECT \n    c.Name AS ConsumerName,\n    COUNT(m.MeterID) AS NumberOfMeters,\n    SUM(m.LastReading) AS TotalMeterReadings\nFROM \n    Consumer c\nJOIN \n    Meter m ON c.ConsumerID = m.ConsumerID\nGROUP BY \n    c.ConsumerID, c.Name\nHAVING \n    COUNT(m.MeterID) > 1;"
        },
        {
            "question": "Какие инциденты с высокой серьезностью произошли более одного раза и их средняя продолжительность?",
            "sql_query": "SELECT i.Description AS IncidentDescription, COUNT(i.IncidentID) AS IncidentCount, AVG(i.DurationHours) AS AvgDuration FROM Incident i WHERE i.Severity = 'Высокая' GROUP BY i.Description HAVING COUNT(i.IncidentID) > 1;",
            "gpt-4o_response": "SELECT \n    i.Description AS IncidentDescription,\n    COUNT(i.IncidentID) AS IncidentCount,\n    AVG(i.DurationHours) AS AvgDurationHours\nFROM \n    Incident i\nWHERE \n    i.Severity = 'Высокая'\nGROUP BY \n    i.Description\nHAVING \n    COUNT(i.IncidentID) > 1;",
            "gpt-4o_response_ru": "SELECT \n    i.Description,\n    COUNT(i.IncidentID) AS IncidentCount,\n    AVG(i.DurationHours) AS AvgDuration\nFROM \n    Incident i\nWHERE \n    i.Severity = 'Высокая'\nGROUP BY \n    i.Description\nHAVING \n    COUNT(i.IncidentID) > 1;",
            "google/gemini-2.0-flash-001_response": "SELECT Description, COUNT(*) AS IncidentCount, AVG(DurationHours) AS AverageDuration\nFROM Incident\nWHERE Severity = 'Высокая'\nGROUP BY Description\nHAVING COUNT(*) > 1;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT \n    Description,\n    COUNT(*) AS IncidentCount,\n    AVG(DurationHours) AS AverageDuration\nFROM Incident\nWHERE Severity = 'Высокая'\nGROUP BY Description\nHAVING COUNT(*) > 1;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    i.Description,\n    i.Severity,\n    AVG(i.DurationHours) AS AvgDuration\nFROM Incident i\nWHERE i.Severity = 'Высокая'\nGROUP BY i.Description, i.Severity\nHAVING COUNT(i.IncidentID) > 1;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    i.Description,\n    i.Severity,\n    COUNT(i.IncidentID) AS IncidentCount,\n    AVG(i.DurationHours) AS AvgDuration\nFROM Incident i\nWHERE i.Severity = 'Высокая'\nGROUP BY i.Description, i.Severity\nHAVING COUNT(i.IncidentID) > 1",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    i.Description AS IncidentDescription,\n    COUNT(i.IncidentID) AS IncidentCount,\n    AVG(i.DurationHours) AS AvgDurationHours,\n    p.Name AS PlantName,\n    p.Type AS PlantType,\n    oc.Name AS OwnerCompany\nFROM Incident i\nJOIN PowerPlant p ON i.PlantID = p.PlantID\nJOIN OwnerCompany oc ON p.OwnerCompanyID = oc.CompanyID\nWHERE i.Severity = 'Высокая'\nGROUP BY i.Description, p.Name, p.Type, oc.Name\nHAVING COUNT(i.IncidentID) > 1\nORDER BY AvgDurationHours DESC;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    i.Description AS IncidentDescription,\n    COUNT(i.IncidentID) AS IncidentCount,\n    AVG(i.DurationHours) AS AvgDurationHours\nFROM \n    Incident i\nWHERE \n    i.Severity = 'Высокая'\nGROUP BY \n    i.Description\nHAVING \n    COUNT(i.IncidentID) > 1\nORDER BY \n    AvgDurationHours DESC;",
            "gigachat_response": "SELECT \n    i.Description AS IncidentDescription,\n    AVG(i.DurationHours) AS AverageDuration\nFROM Incident i\nWHERE i.Severity = 'Высокая'\nGROUP BY i.Description\nHAVING COUNT(*) > 1;",
            "gigachat_response_ru": "SELECT \n    i.Description AS IncidentDescription,\n    AVG(i.DurationHours) AS AverageDuration\nFROM Incident i\nWHERE i.Severity = 'Высокая'\nGROUP BY i.Description\nHAVING COUNT(*) > 1;"
        },
        {
            "question": "Какие подстанции напряжением 220 кВ и их владельцы имеют более одной подстанции?",
            "sql_query": "SELECT s.Name AS SubstationName, oc.Name AS OwnerName, COUNT(s.SubstationID) AS SubstationCount FROM Substation s JOIN OwnerCompany oc ON s.OwnerCompanyID = oc.CompanyID WHERE s.VoltageLevel = 200 GROUP BY s.Name, oc.Name HAVING COUNT(s.SubstationID) > 1;",
            "gpt-4o_response": "WITH SubstationCount AS (\n    SELECT \n        OwnerCompanyID,\n        COUNT(SubstationID) AS SubstationCount\n    FROM Substation\n    WHERE VoltageLevel = 220\n    GROUP BY OwnerCompanyID\n    HAVING COUNT(SubstationID) > 1\n)\nSELECT \n    s.Name AS SubstationName,\n    s.Location,\n    s.CapacityMW,\n    s.VoltageLevel,\n    s.CommissionDate,\n    s.Status,\n    oc.Name AS OwnerCompanyName,\n    oc.Headquarters,\n    oc.CEO\nFROM Substation s\nJOIN SubstationCount sc ON s.OwnerCompanyID = sc.OwnerCompanyID\nJOIN OwnerCompany oc ON s.OwnerCompanyID = oc.CompanyID\nWHERE s.VoltageLevel = 220\nORDER BY oc.Name, s.Name;",
            "gpt-4o_response_ru": "SELECT \n    s.Name AS SubstationName,\n    s.Location,\n    s.CapacityMW,\n    s.VoltageLevel,\n    oc.Name AS OwnerCompanyName,\n    oc.Headquarters\nFROM Substation s\nJOIN OwnerCompany oc ON s.OwnerCompanyID = oc.CompanyID\nWHERE s.VoltageLevel = 220\nAND s.OwnerCompanyID IN (\n    SELECT OwnerCompanyID\n    FROM Substation\n    WHERE VoltageLevel = 220\n    GROUP BY OwnerCompanyID\n    HAVING COUNT(SubstationID) > 1\n)\nORDER BY s.Name;",
            "google/gemini-2.0-flash-001_response": "SELECT \n    s.Name AS SubstationName,\n    oc.Name AS OwnerCompanyName\nFROM Substation s\nJOIN OwnerCompany oc ON s.OwnerCompanyID = oc.CompanyID\nWHERE s.VoltageLevel = 220\nAND oc.CompanyID IN (\n    SELECT OwnerCompanyID\n    FROM Substation\n    WHERE VoltageLevel = 220\n    GROUP BY OwnerCompanyID\n    HAVING COUNT(*) > 1\n);",
            "google/gemini-2.0-flash-001_response_ru": "SELECT \n    s.Name AS SubstationName,\n    oc.Name AS OwnerCompanyName\nFROM Substation s\nJOIN OwnerCompany oc ON s.OwnerCompanyID = oc.CompanyID\nWHERE s.VoltageLevel = 220\nAND oc.CompanyID IN (\n    SELECT OwnerCompanyID\n    FROM Substation\n    WHERE VoltageLevel = 220\n    GROUP BY OwnerCompanyID\n    HAVING COUNT(*) > 1\n);",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    s.Name AS SubstationName,\n    oc.Name AS OwnerName,\n    s.VoltageLevel,\n    COUNT(s.SubstationID) AS SubstationsCount\nFROM Substation s\nJOIN OwnerCompany oc ON s.OwnerCompanyID = oc.CompanyID\nWHERE s.VoltageLevel = 220\nGROUP BY oc.Name, s.Name, s.VoltageLevel\nHAVING COUNT(s.SubstationID) > 1;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    s.Name AS SubstationName,\n    oc.Name AS OwnerCompanyName,\n    COUNT(s.SubstationID) AS SubstationsCount\nFROM Substation s\nJOIN OwnerCompany oc ON s.OwnerCompanyID = oc.CompanyID\nWHERE s.VoltageLevel = 220\nGROUP BY oc.Name\nHAVING COUNT(s.SubstationID) > 1\nORDER BY SubstationsCount DESC;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    s.Name AS SubstationName,\n    s.VoltageLevel,\n    oc.Name AS OwnerCompanyName,\n    COUNT(s.SubstationID) OVER (PARTITION BY oc.CompanyID) AS OwnerSubstationsCount\nFROM \n    Substation s\nJOIN \n    OwnerCompany oc ON s.OwnerCompanyID = oc.CompanyID\nWHERE \n    s.VoltageLevel = 220\n    AND oc.CompanyID IN (\n        SELECT OwnerCompanyID\n        FROM Substation\n        GROUP BY OwnerCompanyID\n        HAVING COUNT(SubstationID) > 1\n    )\nORDER BY \n    OwnerSubstationsCount DESC;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    s.Name AS SubstationName,\n    oc.Name AS OwnerCompanyName,\n    s.VoltageLevel,\n    COUNT(s.SubstationID) OVER (PARTITION BY oc.CompanyID) AS OwnerSubstationsCount\nFROM \n    Substation s\nJOIN \n    OwnerCompany oc ON s.OwnerCompanyID = oc.CompanyID\nWHERE \n    s.VoltageLevel = 220\n    AND oc.CompanyID IN (\n        SELECT \n            OwnerCompanyID\n        FROM \n            Substation\n        GROUP BY \n            OwnerCompanyID\n        HAVING \n            COUNT(SubstationID) > 1\n    )\nORDER BY \n    OwnerSubstationsCount DESC;",
            "gigachat_response": "SELECT ss.Name AS SubstationName, oc.Name AS OwnerCompanyName\nFROM Substation ss\nJOIN OwnerCompany oc ON ss.OwnerCompanyID = oc.CompanyID\nWHERE ss.VoltageLevel = 220\nAND (\n    SELECT COUNT(*) \n    FROM Substation \n    WHERE OwnerCompanyID = ss.OwnerCompanyID\n) > 1;",
            "gigachat_response_ru": "SELECT s.Location, oc.Name AS OwnerName\nFROM Substation s\nJOIN OwnerCompany oc ON s.OwnerCompanyID = oc.CompanyID\nWHERE s.VoltageLevel = 220\nAND oc.CompanyID IN (\n    SELECT OwnerCompanyID\n    FROM Substation\n    WHERE VoltageLevel = 220\n    GROUP BY OwnerCompanyID\n    HAVING COUNT(*) > 1\n)\nGROUP BY s.Location, oc.Name;"
        },
        {
            "question": "Какие электростанции имеют среднюю продолжительность обслуживания более 4.0 часов?",
            "sql_query": "SELECT pp.Name AS PlantName, COUNT(m.MaintenanceID) AS MaintenanceCount, AVG(m.DurationHours) AS AvgDuration FROM PowerPlant pp JOIN Maintenance m ON pp.PlantID = m.PlantID WHERE m.Status = 'Завершено' GROUP BY pp.Name HAVING AVG(m.DurationHours) > 4.0;",
            "gpt-4o_response": "SELECT \n    pp.Name AS PlantName,\n    AVG(m.DurationHours) AS AvgMaintenanceDuration\nFROM \n    PowerPlant pp\nJOIN \n    Maintenance m ON pp.PlantID = m.PlantID\nGROUP BY \n    pp.PlantID, pp.Name\nHAVING \n    AVG(m.DurationHours) > 4.0;",
            "gpt-4o_response_ru": "SELECT \n    pp.Name AS PlantName,\n    AVG(m.DurationHours) AS AvgMaintenanceDuration\nFROM \n    PowerPlant pp\nJOIN \n    Maintenance m ON pp.PlantID = m.PlantID\nGROUP BY \n    pp.PlantID, pp.Name\nHAVING \n    AVG(m.DurationHours) > 4.0;",
            "google/gemini-2.0-flash-001_response": "SELECT \n    pp.Name AS PlantName,\n    AVG(m.DurationHours) AS AverageMaintenanceDuration\nFROM PowerPlant pp\nJOIN Maintenance m ON pp.PlantID = m.PlantID\nGROUP BY pp.Name\nHAVING AVG(m.DurationHours) > 4.0;",
            "google/gemini-2.0-flash-001_response_ru": "SELECT\n    pp.Name AS PlantName,\n    AVG(m.DurationHours) AS AverageMaintenanceDuration\nFROM\n    PowerPlant pp\nJOIN\n    Maintenance m ON pp.PlantID = m.PlantID\nGROUP BY\n    pp.Name\nHAVING\n    AVG(m.DurationHours) > 4.0;",
            "meta-llama/llama-3.3-70b-instruct_response": "SELECT \n    pp.Name AS PlantName,\n    AVG(m.DurationHours) AS AvgMaintenanceDuration\nFROM PowerPlant pp\nJOIN Maintenance m ON pp.PlantID = m.PlantID\nWHERE m.DurationHours > 4.0\nGROUP BY pp.Name\nORDER BY AvgMaintenanceDuration DESC;",
            "meta-llama/llama-3.3-70b-instruct_response_ru": "SELECT \n    pp.Name AS PlantName,\n    AVG(m.DurationHours) AS AvgMaintenanceDuration\nFROM PowerPlant pp\nJOIN Maintenance m ON pp.PlantID = m.PlantID\nWHERE m.Status = 'Завершено'\nGROUP BY pp.Name\nHAVING AVG(m.DurationHours) > 4.0\nORDER BY AvgMaintenanceDuration DESC;",
            "deepseek/deepseek-chat-v3-0324_response": "SELECT \n    pp.Name AS PlantName,\n    pp.Type AS PlantType,\n    pp.CapacityMW,\n    pp.Status,\n    AVG(m.DurationHours) AS AvgMaintenanceDuration\nFROM \n    PowerPlant pp\nJOIN \n    Maintenance m ON pp.PlantID = m.PlantID\nWHERE \n    m.Status = 'Завершено'\nGROUP BY \n    pp.PlantID, pp.Name, pp.Type, pp.CapacityMW, pp.Status\nHAVING \n    AVG(m.DurationHours) > 4.0\nORDER BY \n    AvgMaintenanceDuration DESC;",
            "deepseek/deepseek-chat-v3-0324_response_ru": "SELECT \n    pp.Name AS PlantName,\n    pp.Type AS PlantType,\n    pp.CapacityMW,\n    AVG(m.DurationHours) AS AvgMaintenanceDuration\nFROM \n    PowerPlant pp\nJOIN \n    Maintenance m ON pp.PlantID = m.PlantID\nGROUP BY \n    pp.PlantID, pp.Name, pp.Type, pp.CapacityMW\nHAVING \n    AVG(m.DurationHours) > 4.0\nORDER BY \n    AvgMaintenanceDuration DESC;",
            "gigachat_response": "SELECT \n    pp.Name AS PlantName,\n    AVG(m.DurationHours) AS AvgMaintenanceDuration\nFROM PowerPlant pp\nJOIN Maintenance m ON pp.PlantID = m.PlantID\nWHERE m.Status = 'Завершено'\nGROUP BY pp.Name\nHAVING AVG(m.DurationHours) > 4.0;",
            "gigachat_response_ru": "SELECT \n    pp.Name AS PlantName,\n    AVG(m.DurationHours) AS AvgMaintenanceDuration\nFROM \n    PowerPlant pp\nJOIN \n    Maintenance m ON pp.PlantID = m.PlantID\nWHERE \n    m.Status = 'Завершено'\nGROUP BY \n    pp.Name\nHAVING \n    AVG(m.DurationHours) > 4.0;"
        }
    ]
}